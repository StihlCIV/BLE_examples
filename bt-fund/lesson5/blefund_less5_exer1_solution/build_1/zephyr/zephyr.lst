
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
LOG_MODULE_REGISTER(bt_data);

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   0:	80 75 00 20 ad 41 01 00 b9 48 02 00 81 41 01 00     .u. .A...H...A..
	while (ad->len > 1) {
  10:	81 41 01 00 81 41 01 00 81 41 01 00 00 00 00 00     .A...A...A......
	...
			/* Early termination */
			return;
		}

		if (len > ad->len) {
			LOG_WRN("malformed advertising data %u / %u",
  2c:	7d 3a 01 00 81 41 01 00 00 00 00 00 29 3a 01 00     }:...A......):..
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
  3c:	81 41 01 00                                         .A..

00000040 <_irq_vector_table>:
  40:	2d 3b 01 00 8d 71 02 00 2d 3b 01 00 2d 3b 01 00     -;...q..-;..-;..
				len, ad->len);
			return;
		}

		data.type = net_buf_simple_pull_u8(ad);
  50:	2d 3b 01 00 2d 3b 01 00 2d 3b 01 00 2d 3b 01 00     -;..-;..-;..-;..
		data.data_len = len - 1;
		data.data = ad->data;
  60:	3b 71 02 00 2d 3b 01 00 2d 3b 01 00 73 71 02 00     ;q..-;..-;..sq..

		if (!func(&data, user_data)) {
			return;
		}

		net_buf_simple_pull(ad, len - 1);
  70:	2d 3b 01 00 2d 3b 01 00 2d 3b 01 00 2d 3b 01 00     -;..-;..-;..-;..
  80:	2d 3b 01 00 2d 3b 01 00 2d 3b 01 00 2d 3b 01 00     -;..-;..-;..-;..
  90:	2d 3b 01 00 2d 3b 01 00 2d 3b 01 00 2d 3b 01 00     -;..-;..-;..-;..
  a0:	2d 3b 01 00 2d 3b 01 00 2d 3b 01 00 2d 3b 01 00     -;..-;..-;..-;..
  b0:	2d 3b 01 00 2d 3b 01 00 2d 3b 01 00 2d 3b 01 00     -;..-;..-;..-;..
  c0:	2d 3b 01 00 2d 3b 01 00 2d 3b 01 00 2d 3b 01 00     -;..-;..-;..-;..
  d0:	2d 3b 01 00 2d 3b 01 00 2d 3b 01 00 2d 3b 01 00     -;..-;..-;..-;..
  e0:	2d 3b 01 00 2d 3b 01 00 2d 3b 01 00 2d 3b 01 00     -;..-;..-;..-;..
  f0:	2d 3b 01 00 2d 3b 01 00 2d 3b 01 00 2d 3b 01 00     -;..-;..-;..-;..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f00c f9c6 	bl	c4b0 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <ocrypto_bigint_add256>:
     134:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     138:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     13c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     140:	185b      	adds	r3, r3, r1
     142:	eb54 040c 	adcs.w	r4, r4, ip
     146:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     14a:	414d      	adcs	r5, r1
     14c:	eb56 060c 	adcs.w	r6, r6, ip
     150:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     154:	414f      	adcs	r7, r1
     156:	eb58 080c 	adcs.w	r8, r8, ip
     15a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     15e:	eb59 0901 	adcs.w	r9, r9, r1
     162:	eb5a 0a0c 	adcs.w	sl, sl, ip
     166:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     16a:	4180      	sbcs	r0, r0
     16c:	3001      	adds	r0, #1
     16e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     172:	4770      	bx	lr

00000174 <ocrypto_bigint_sub256>:
     174:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     178:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     17c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     180:	1a5b      	subs	r3, r3, r1
     182:	eb74 040c 	sbcs.w	r4, r4, ip
     186:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     18a:	418d      	sbcs	r5, r1
     18c:	eb76 060c 	sbcs.w	r6, r6, ip
     190:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     194:	418f      	sbcs	r7, r1
     196:	eb78 080c 	sbcs.w	r8, r8, ip
     19a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     19e:	eb79 0901 	sbcs.w	r9, r9, r1
     1a2:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     1a6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     1aa:	4180      	sbcs	r0, r0
     1ac:	4240      	negs	r0, r0
     1ae:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1b2:	4770      	bx	lr

000001b4 <ocrypto_bigint_cadd256>:
     1b4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1b8:	4252      	negs	r2, r2
     1ba:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1be:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1c2:	4017      	ands	r7, r2
     1c4:	19db      	adds	r3, r3, r7
     1c6:	ea18 0802 	ands.w	r8, r8, r2
     1ca:	eb54 0408 	adcs.w	r4, r4, r8
     1ce:	ea19 0902 	ands.w	r9, r9, r2
     1d2:	eb55 0509 	adcs.w	r5, r5, r9
     1d6:	ea1a 0a02 	ands.w	sl, sl, r2
     1da:	eb56 060a 	adcs.w	r6, r6, sl
     1de:	c078      	stmia	r0!, {r3, r4, r5, r6}
     1e0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1e4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1e8:	4017      	ands	r7, r2
     1ea:	417b      	adcs	r3, r7
     1ec:	ea18 0802 	ands.w	r8, r8, r2
     1f0:	eb54 0408 	adcs.w	r4, r4, r8
     1f4:	ea19 0902 	ands.w	r9, r9, r2
     1f8:	eb55 0509 	adcs.w	r5, r5, r9
     1fc:	ea1a 0a02 	ands.w	sl, sl, r2
     200:	eb56 060a 	adcs.w	r6, r6, sl
     204:	c078      	stmia	r0!, {r3, r4, r5, r6}
     206:	4180      	sbcs	r0, r0
     208:	3001      	adds	r0, #1
     20a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     20e:	4770      	bx	lr

00000210 <ocrypto_bigint_csub256>:
     210:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     214:	4252      	negs	r2, r2
     216:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     21a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     21e:	4017      	ands	r7, r2
     220:	1bdb      	subs	r3, r3, r7
     222:	ea18 0802 	ands.w	r8, r8, r2
     226:	eb74 0408 	sbcs.w	r4, r4, r8
     22a:	ea19 0902 	ands.w	r9, r9, r2
     22e:	eb75 0509 	sbcs.w	r5, r5, r9
     232:	ea1a 0a02 	ands.w	sl, sl, r2
     236:	eb76 060a 	sbcs.w	r6, r6, sl
     23a:	c078      	stmia	r0!, {r3, r4, r5, r6}
     23c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     240:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     244:	4017      	ands	r7, r2
     246:	41bb      	sbcs	r3, r7
     248:	ea18 0802 	ands.w	r8, r8, r2
     24c:	eb74 0408 	sbcs.w	r4, r4, r8
     250:	ea19 0902 	ands.w	r9, r9, r2
     254:	eb75 0509 	sbcs.w	r5, r5, r9
     258:	ea1a 0a02 	ands.w	sl, sl, r2
     25c:	eb76 060a 	sbcs.w	r6, r6, sl
     260:	c078      	stmia	r0!, {r3, r4, r5, r6}
     262:	4180      	sbcs	r0, r0
     264:	4240      	negs	r0, r0
     266:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     26a:	4770      	bx	lr

0000026c <ocrypto_bigint_cswap256>:
     26c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     270:	4252      	negs	r2, r2
     272:	f04f 0804 	mov.w	r8, #4

00000276 <cswap256_loop>:
     276:	e890 0030 	ldmia.w	r0, {r4, r5}
     27a:	e891 00c0 	ldmia.w	r1, {r6, r7}
     27e:	1ba3      	subs	r3, r4, r6
     280:	4013      	ands	r3, r2
     282:	1ae4      	subs	r4, r4, r3
     284:	18f6      	adds	r6, r6, r3
     286:	1beb      	subs	r3, r5, r7
     288:	4013      	ands	r3, r2
     28a:	1aed      	subs	r5, r5, r3
     28c:	18ff      	adds	r7, r7, r3
     28e:	c030      	stmia	r0!, {r4, r5}
     290:	c1c0      	stmia	r1!, {r6, r7}
     292:	f1b8 0801 	subs.w	r8, r8, #1
     296:	d1ee      	bne.n	276 <cswap256_loop>
     298:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     29c:	4770      	bx	lr
     29e:	bf00      	nop

000002a0 <ocrypto_mul256_noframe>:
     2a0:	b500      	push	{lr}
     2a2:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
     2a6:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
     2aa:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     2ae:	b402      	push	{r1}
     2b0:	fba7 5102 	umull	r5, r1, r7, r2
     2b4:	950a      	str	r5, [sp, #40]	; 0x28
     2b6:	fba8 0b02 	umull	r0, fp, r8, r2
     2ba:	fbe7 1063 	umaal	r1, r0, r7, r3
     2be:	fbe9 b062 	umaal	fp, r0, r9, r2
     2c2:	910b      	str	r1, [sp, #44]	; 0x2c
     2c4:	fba8 5103 	umull	r5, r1, r8, r3
     2c8:	fbea 0162 	umaal	r0, r1, sl, r2
     2cc:	fbe7 b564 	umaal	fp, r5, r7, r4
     2d0:	fbe7 0566 	umaal	r0, r5, r7, r6
     2d4:	fbe8 1566 	umaal	r1, r5, r8, r6
     2d8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
     2dc:	fba9 b603 	umull	fp, r6, r9, r3
     2e0:	fbea 1663 	umaal	r1, r6, sl, r3
     2e4:	fbec 5663 	umaal	r5, r6, ip, r3
     2e8:	fbe8 0b64 	umaal	r0, fp, r8, r4
     2ec:	fbe9 1b64 	umaal	r1, fp, r9, r4
     2f0:	fbea 5b64 	umaal	r5, fp, sl, r4
     2f4:	fbec 6b64 	umaal	r6, fp, ip, r4
     2f8:	900d      	str	r0, [sp, #52]	; 0x34
     2fa:	fbac 3002 	umull	r3, r0, ip, r2
     2fe:	9c05      	ldr	r4, [sp, #20]
     300:	fbee 5062 	umaal	r5, r0, lr, r2
     304:	fbe9 6064 	umaal	r6, r0, r9, r4
     308:	fbea b064 	umaal	fp, r0, sl, r4
     30c:	fbe7 3164 	umaal	r3, r1, r7, r4
     310:	fbe8 5164 	umaal	r5, r1, r8, r4
     314:	9c06      	ldr	r4, [sp, #24]
     316:	fbe8 6164 	umaal	r6, r1, r8, r4
     31a:	fbe9 b164 	umaal	fp, r1, r9, r4
     31e:	fbea 0164 	umaal	r0, r1, sl, r4
     322:	930e      	str	r3, [sp, #56]	; 0x38
     324:	fba7 3204 	umull	r3, r2, r7, r4
     328:	9c07      	ldr	r4, [sp, #28]
     32a:	fbe7 6264 	umaal	r6, r2, r7, r4
     32e:	fbe8 b264 	umaal	fp, r2, r8, r4
     332:	fbe9 0264 	umaal	r0, r2, r9, r4
     336:	fbea 1264 	umaal	r1, r2, sl, r4
     33a:	9c04      	ldr	r4, [sp, #16]
     33c:	fbe9 5364 	umaal	r5, r3, r9, r4
     340:	fbea 6364 	umaal	r6, r3, sl, r4
     344:	9c08      	ldr	r4, [sp, #32]
     346:	fbe7 b364 	umaal	fp, r3, r7, r4
     34a:	fbe8 0364 	umaal	r0, r3, r8, r4
     34e:	fbe9 1364 	umaal	r1, r3, r9, r4
     352:	fbea 2364 	umaal	r2, r3, sl, r4
     356:	950f      	str	r5, [sp, #60]	; 0x3c
     358:	f85d 9b04 	ldr.w	r9, [sp], #4
     35c:	e899 0600 	ldmia.w	r9, {r9, sl}
     360:	f8dd 8000 	ldr.w	r8, [sp]
     364:	fba9 5408 	umull	r5, r4, r9, r8
     368:	fbea b468 	umaal	fp, r4, sl, r8
     36c:	f8dd 8010 	ldr.w	r8, [sp, #16]
     370:	fbec 0468 	umaal	r0, r4, ip, r8
     374:	fbee 1468 	umaal	r1, r4, lr, r8
     378:	fbe9 2468 	umaal	r2, r4, r9, r8
     37c:	fbea 3468 	umaal	r3, r4, sl, r8
     380:	f8dd 8004 	ldr.w	r8, [sp, #4]
     384:	fbee 6568 	umaal	r6, r5, lr, r8
     388:	fbe9 b568 	umaal	fp, r5, r9, r8
     38c:	fbea 0568 	umaal	r0, r5, sl, r8
     390:	f8dd 8014 	ldr.w	r8, [sp, #20]
     394:	fbec 1568 	umaal	r1, r5, ip, r8
     398:	fbee 2568 	umaal	r2, r5, lr, r8
     39c:	fbe9 3568 	umaal	r3, r5, r9, r8
     3a0:	fbea 4568 	umaal	r4, r5, sl, r8
     3a4:	960f      	str	r6, [sp, #60]	; 0x3c
     3a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
     3aa:	fbae 7608 	umull	r7, r6, lr, r8
     3ae:	fbe9 0668 	umaal	r0, r6, r9, r8
     3b2:	fbea 1668 	umaal	r1, r6, sl, r8
     3b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
     3ba:	fbec 2668 	umaal	r2, r6, ip, r8
     3be:	fbee 3668 	umaal	r3, r6, lr, r8
     3c2:	fbe9 4668 	umaal	r4, r6, r9, r8
     3c6:	fbea 5668 	umaal	r5, r6, sl, r8
     3ca:	f8dd 800c 	ldr.w	r8, [sp, #12]
     3ce:	fbec b768 	umaal	fp, r7, ip, r8
     3d2:	fbee 0768 	umaal	r0, r7, lr, r8
     3d6:	fbe9 1768 	umaal	r1, r7, r9, r8
     3da:	fbea 2768 	umaal	r2, r7, sl, r8
     3de:	f8dd 801c 	ldr.w	r8, [sp, #28]
     3e2:	fbec 3768 	umaal	r3, r7, ip, r8
     3e6:	fbee 4768 	umaal	r4, r7, lr, r8
     3ea:	fbe9 5768 	umaal	r5, r7, r9, r8
     3ee:	fbea 6768 	umaal	r6, r7, sl, r8
     3f2:	b008      	add	sp, #32
     3f4:	bd00      	pop	{pc}
     3f6:	bf00      	nop

000003f8 <ocrypto_bigint_mul256>:
     3f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3fc:	b087      	sub	sp, #28
     3fe:	f7ff ff4f 	bl	2a0 <ocrypto_mul256_noframe>
     402:	f8dd 801c 	ldr.w	r8, [sp, #28]
     406:	f108 0820 	add.w	r8, r8, #32
     40a:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     40e:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     410:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000418 <ocrypto_sqr256_noframe>:
     418:	b500      	push	{lr}
     41a:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     41e:	fba3 5203 	umull	r5, r2, r3, r3
     422:	9501      	str	r5, [sp, #4]
     424:	fba3 0104 	umull	r0, r1, r3, r4
     428:	fbe3 2064 	umaal	r2, r0, r3, r4
     42c:	fbe3 1067 	umaal	r1, r0, r3, r7
     430:	9202      	str	r2, [sp, #8]
     432:	fba3 5207 	umull	r5, r2, r3, r7
     436:	fbe3 0268 	umaal	r0, r2, r3, r8
     43a:	fbe4 1564 	umaal	r1, r5, r4, r4
     43e:	fbe3 0568 	umaal	r0, r5, r3, r8
     442:	fbe3 2569 	umaal	r2, r5, r3, r9
     446:	9103      	str	r1, [sp, #12]
     448:	fba4 b607 	umull	fp, r6, r4, r7
     44c:	fbe3 2669 	umaal	r2, r6, r3, r9
     450:	fbe3 566a 	umaal	r5, r6, r3, sl
     454:	fbe4 0b67 	umaal	r0, fp, r4, r7
     458:	fbe4 2b68 	umaal	r2, fp, r4, r8
     45c:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     460:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     464:	9004      	str	r0, [sp, #16]
     466:	fba4 1008 	umull	r1, r0, r4, r8
     46a:	fbe4 5069 	umaal	r5, r0, r4, r9
     46e:	fbe3 606c 	umaal	r6, r0, r3, ip
     472:	fbe3 b06e 	umaal	fp, r0, r3, lr
     476:	fbe7 2167 	umaal	r2, r1, r7, r7
     47a:	fbe4 5169 	umaal	r5, r1, r4, r9
     47e:	fbe4 616a 	umaal	r6, r1, r4, sl
     482:	fbe3 b16e 	umaal	fp, r1, r3, lr
     486:	fbe4 016e 	umaal	r0, r1, r4, lr
     48a:	9205      	str	r2, [sp, #20]
     48c:	fba7 3208 	umull	r3, r2, r7, r8
     490:	fbe4 626a 	umaal	r6, r2, r4, sl
     494:	fbe4 b26c 	umaal	fp, r2, r4, ip
     498:	fbe4 026e 	umaal	r0, r2, r4, lr
     49c:	fbe7 126e 	umaal	r1, r2, r7, lr
     4a0:	fbe7 5368 	umaal	r5, r3, r7, r8
     4a4:	fbe7 6369 	umaal	r6, r3, r7, r9
     4a8:	fbe4 b36c 	umaal	fp, r3, r4, ip
     4ac:	fbe7 036c 	umaal	r0, r3, r7, ip
     4b0:	fbe7 136e 	umaal	r1, r3, r7, lr
     4b4:	fbe8 236e 	umaal	r2, r3, r8, lr
     4b8:	9506      	str	r5, [sp, #24]
     4ba:	fba7 5409 	umull	r5, r4, r7, r9
     4be:	fbe7 b46a 	umaal	fp, r4, r7, sl
     4c2:	fbe7 046c 	umaal	r0, r4, r7, ip
     4c6:	fbe8 146c 	umaal	r1, r4, r8, ip
     4ca:	fbe8 246e 	umaal	r2, r4, r8, lr
     4ce:	fbe9 346e 	umaal	r3, r4, r9, lr
     4d2:	fbe8 6568 	umaal	r6, r5, r8, r8
     4d6:	fbe7 b56a 	umaal	fp, r5, r7, sl
     4da:	fbe8 056a 	umaal	r0, r5, r8, sl
     4de:	fbe8 156c 	umaal	r1, r5, r8, ip
     4e2:	fbe9 256c 	umaal	r2, r5, r9, ip
     4e6:	fbe9 356e 	umaal	r3, r5, r9, lr
     4ea:	fbea 456e 	umaal	r4, r5, sl, lr
     4ee:	9607      	str	r6, [sp, #28]
     4f0:	fba8 7609 	umull	r7, r6, r8, r9
     4f4:	fbe8 066a 	umaal	r0, r6, r8, sl
     4f8:	fbe9 166a 	umaal	r1, r6, r9, sl
     4fc:	fbe9 266c 	umaal	r2, r6, r9, ip
     500:	fbea 366c 	umaal	r3, r6, sl, ip
     504:	fbea 466e 	umaal	r4, r6, sl, lr
     508:	fbec 566e 	umaal	r5, r6, ip, lr
     50c:	fbe8 b769 	umaal	fp, r7, r8, r9
     510:	fbe9 0769 	umaal	r0, r7, r9, r9
     514:	fbe9 176a 	umaal	r1, r7, r9, sl
     518:	fbea 276a 	umaal	r2, r7, sl, sl
     51c:	fbea 376c 	umaal	r3, r7, sl, ip
     520:	fbec 476c 	umaal	r4, r7, ip, ip
     524:	fbec 576e 	umaal	r5, r7, ip, lr
     528:	fbee 676e 	umaal	r6, r7, lr, lr
     52c:	bd00      	pop	{pc}
     52e:	bf00      	nop

00000530 <ocrypto_bigint_sqr256>:
     530:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     534:	b087      	sub	sp, #28
     536:	f7ff ff6f 	bl	418 <ocrypto_sqr256_noframe>
     53a:	f8dd 801c 	ldr.w	r8, [sp, #28]
     53e:	f108 0820 	add.w	r8, r8, #32
     542:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     546:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     548:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000550 <ocrypto_constant_time_equal>:
     550:	b430      	push	{r4, r5}
     552:	f04f 0300 	mov.w	r3, #0

00000556 <constant_time_equal_loop>:
     556:	f810 4b01 	ldrb.w	r4, [r0], #1
     55a:	f811 5b01 	ldrb.w	r5, [r1], #1
     55e:	3a01      	subs	r2, #1
     560:	ea84 0405 	eor.w	r4, r4, r5
     564:	ea43 0304 	orr.w	r3, r3, r4
     568:	d1f5      	bne.n	556 <constant_time_equal_loop>
     56a:	f1a3 0301 	sub.w	r3, r3, #1
     56e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     572:	bc30      	pop	{r4, r5}
     574:	4770      	bx	lr
     576:	bf00      	nop

00000578 <ocrypto_constant_time_is_zero>:
     578:	f04f 0300 	mov.w	r3, #0

0000057c <constant_time_is_zero_loop>:
     57c:	f810 2b01 	ldrb.w	r2, [r0], #1
     580:	3901      	subs	r1, #1
     582:	ea43 0302 	orr.w	r3, r3, r2
     586:	d1f9      	bne.n	57c <constant_time_is_zero_loop>
     588:	f1a3 0301 	sub.w	r3, r3, #1
     58c:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     590:	4770      	bx	lr
     592:	bf00      	nop

00000594 <ocrypto_constant_time_xor>:
     594:	b430      	push	{r4, r5}

00000596 <constant_time_xor_loop>:
     596:	f811 4b01 	ldrb.w	r4, [r1], #1
     59a:	f812 5b01 	ldrb.w	r5, [r2], #1
     59e:	406c      	eors	r4, r5
     5a0:	f800 4b01 	strb.w	r4, [r0], #1
     5a4:	3b01      	subs	r3, #1
     5a6:	d1f6      	bne.n	596 <constant_time_xor_loop>
     5a8:	bc30      	pop	{r4, r5}
     5aa:	4770      	bx	lr

000005ac <ocrypto_mod_p256_add>:
     5ac:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     5b0:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     5b4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5b8:	185b      	adds	r3, r3, r1
     5ba:	eb54 040c 	adcs.w	r4, r4, ip
     5be:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5c2:	414d      	adcs	r5, r1
     5c4:	eb56 060c 	adcs.w	r6, r6, ip
     5c8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5cc:	414f      	adcs	r7, r1
     5ce:	eb58 080c 	adcs.w	r8, r8, ip
     5d2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5d6:	eb59 0901 	adcs.w	r9, r9, r1
     5da:	eb5a 0a0c 	adcs.w	sl, sl, ip
     5de:	4189      	sbcs	r1, r1
     5e0:	f1b3 33ff 	subs.w	r3, r3, #4294967295	; 0xffffffff
     5e4:	f174 34ff 	sbcs.w	r4, r4, #4294967295	; 0xffffffff
     5e8:	f175 35ff 	sbcs.w	r5, r5, #4294967295	; 0xffffffff
     5ec:	f176 0600 	sbcs.w	r6, r6, #0
     5f0:	f177 0700 	sbcs.w	r7, r7, #0
     5f4:	f178 0800 	sbcs.w	r8, r8, #0
     5f8:	f179 0901 	sbcs.w	r9, r9, #1
     5fc:	f17a 3aff 	sbcs.w	sl, sl, #4294967295	; 0xffffffff
     600:	f151 0100 	adcs.w	r1, r1, #0
     604:	185b      	adds	r3, r3, r1
     606:	414c      	adcs	r4, r1
     608:	414d      	adcs	r5, r1
     60a:	f156 0600 	adcs.w	r6, r6, #0
     60e:	f157 0700 	adcs.w	r7, r7, #0
     612:	f158 0800 	adcs.w	r8, r8, #0
     616:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     61a:	eb5a 0a01 	adcs.w	sl, sl, r1
     61e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     622:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     626:	4770      	bx	lr

00000628 <ocrypto_mod_p256_sub>:
     628:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     62c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     630:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     634:	1a5b      	subs	r3, r3, r1
     636:	eb74 040c 	sbcs.w	r4, r4, ip
     63a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     63e:	418d      	sbcs	r5, r1
     640:	eb76 060c 	sbcs.w	r6, r6, ip
     644:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     648:	418f      	sbcs	r7, r1
     64a:	eb78 080c 	sbcs.w	r8, r8, ip
     64e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     652:	eb79 0901 	sbcs.w	r9, r9, r1
     656:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     65a:	4189      	sbcs	r1, r1
     65c:	185b      	adds	r3, r3, r1
     65e:	414c      	adcs	r4, r1
     660:	414d      	adcs	r5, r1
     662:	f156 0600 	adcs.w	r6, r6, #0
     666:	f157 0700 	adcs.w	r7, r7, #0
     66a:	f158 0800 	adcs.w	r8, r8, #0
     66e:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     672:	eb5a 0a01 	adcs.w	sl, sl, r1
     676:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     67a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     67e:	4770      	bx	lr

00000680 <mul_reduce>:
     680:	eb18 0804 	adds.w	r8, r8, r4
     684:	eb59 0905 	adcs.w	r9, r9, r5
     688:	eb5a 0a06 	adcs.w	sl, sl, r6
     68c:	eb5b 0b07 	adcs.w	fp, fp, r7
     690:	f05f 0c00 	movs.w	ip, #0
     694:	f14c 0c00 	adc.w	ip, ip, #0
     698:	eb18 0805 	adds.w	r8, r8, r5
     69c:	eb59 0906 	adcs.w	r9, r9, r6
     6a0:	eb5a 0a07 	adcs.w	sl, sl, r7
     6a4:	eb5b 0b07 	adcs.w	fp, fp, r7
     6a8:	eb50 000c 	adcs.w	r0, r0, ip
     6ac:	f05f 0c00 	movs.w	ip, #0
     6b0:	eb51 010c 	adcs.w	r1, r1, ip
     6b4:	eb52 020c 	adcs.w	r2, r2, ip
     6b8:	4163      	adcs	r3, r4
     6ba:	f14c 0c00 	adc.w	ip, ip, #0
     6be:	ebb8 0807 	subs.w	r8, r8, r7
     6c2:	f179 0900 	sbcs.w	r9, r9, #0
     6c6:	f17a 0a00 	sbcs.w	sl, sl, #0
     6ca:	eb7b 0b04 	sbcs.w	fp, fp, r4
     6ce:	41a8      	sbcs	r0, r5
     6d0:	41b1      	sbcs	r1, r6
     6d2:	41a2      	sbcs	r2, r4
     6d4:	41b3      	sbcs	r3, r6
     6d6:	f16c 0c00 	sbc.w	ip, ip, #0
     6da:	ebbb 0b05 	subs.w	fp, fp, r5
     6de:	41b0      	sbcs	r0, r6
     6e0:	41b9      	sbcs	r1, r7
     6e2:	41aa      	sbcs	r2, r5
     6e4:	41bb      	sbcs	r3, r7
     6e6:	f16c 0c00 	sbc.w	ip, ip, #0
     6ea:	f04c 0601 	orr.w	r6, ip, #1
     6ee:	f08c 0702 	eor.w	r7, ip, #2
     6f2:	eb18 0806 	adds.w	r8, r8, r6
     6f6:	eb59 096c 	adcs.w	r9, r9, ip, asr #1
     6fa:	eb5a 0a6c 	adcs.w	sl, sl, ip, asr #1
     6fe:	eb7b 0b6c 	sbcs.w	fp, fp, ip, asr #1
     702:	eb70 046c 	sbcs.w	r4, r0, ip, asr #1
     706:	eb71 056c 	sbcs.w	r5, r1, ip, asr #1
     70a:	eb72 0667 	sbcs.w	r6, r2, r7, asr #1
     70e:	eb53 076c 	adcs.w	r7, r3, ip, asr #1
     712:	eb6c 0c6c 	sbc.w	ip, ip, ip, asr #1
     716:	eb18 000c 	adds.w	r0, r8, ip
     71a:	eb59 010c 	adcs.w	r1, r9, ip
     71e:	eb5a 020c 	adcs.w	r2, sl, ip
     722:	f15b 0300 	adcs.w	r3, fp, #0
     726:	f154 0400 	adcs.w	r4, r4, #0
     72a:	f155 0500 	adcs.w	r5, r5, #0
     72e:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
     732:	eb57 070c 	adcs.w	r7, r7, ip
     736:	4770      	bx	lr

00000738 <ocrypto_mod_p256_mul>:
     738:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     73c:	b087      	sub	sp, #28
     73e:	f7ff fdaf 	bl	2a0 <ocrypto_mul256_noframe>
     742:	f8dd 8010 	ldr.w	r8, [sp, #16]
     746:	f8dd 9014 	ldr.w	r9, [sp, #20]
     74a:	f8dd a018 	ldr.w	sl, [sp, #24]
     74e:	f7ff ff97 	bl	680 <mul_reduce>
     752:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     756:	f7ff ff93 	bl	680 <mul_reduce>
     75a:	b003      	add	sp, #12
     75c:	f85d 8b04 	ldr.w	r8, [sp], #4
     760:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000768 <ocrypto_mod_p256_sqr>:
     768:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     76c:	b087      	sub	sp, #28
     76e:	f7ff fe53 	bl	418 <ocrypto_sqr256_noframe>
     772:	f8dd 8010 	ldr.w	r8, [sp, #16]
     776:	f8dd 9014 	ldr.w	r9, [sp, #20]
     77a:	f8dd a018 	ldr.w	sl, [sp, #24]
     77e:	f7ff ff7f 	bl	680 <mul_reduce>
     782:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     786:	f7ff ff7b 	bl	680 <mul_reduce>
     78a:	b003      	add	sp, #12
     78c:	f85d 8b04 	ldr.w	r8, [sp], #4
     790:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     79a:	4c14      	ldr	r4, [pc, #80]	; (7ec <ocrypto_mod_p256_sqr+0x84>)
     79c:	7a20      	ldrb	r0, [r4, #8]
     79e:	f88d 0001 	strb.w	r0, [sp, #1]
     7a2:	79e0      	ldrb	r0, [r4, #7]
     7a4:	f88d 0000 	strb.w	r0, [sp]
     7a8:	79a0      	ldrb	r0, [r4, #6]
     7aa:	f8ad 0004 	strh.w	r0, [sp, #4]
     7ae:	7960      	ldrb	r0, [r4, #5]
     7b0:	f8ad 0002 	strh.w	r0, [sp, #2]
     7b4:	4668      	mov	r0, sp
     7b6:	f006 fae3 	bl	6d80 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
     7ba:	b108      	cbz	r0, 7c0 <ocrypto_mod_p256_sqr+0x58>
     7bc:	21ad      	movs	r1, #173	; 0xad
     7be:	e010      	b.n	7e2 <ocrypto_mod_p256_sqr+0x7a>
     7c0:	68e0      	ldr	r0, [r4, #12]
     7c2:	9002      	str	r0, [sp, #8]
     7c4:	a802      	add	r0, sp, #8
     7c6:	f006 faf1 	bl	6dac <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
     7ca:	b108      	cbz	r0, 7d0 <ocrypto_mod_p256_sqr+0x68>
     7cc:	21b1      	movs	r1, #177	; 0xb1
     7ce:	e008      	b.n	7e2 <ocrypto_mod_p256_sqr+0x7a>
     7d0:	4807      	ldr	r0, [pc, #28]	; (7f0 <ocrypto_mod_p256_sqr+0x88>)
     7d2:	6800      	ldr	r0, [r0, #0]
     7d4:	9003      	str	r0, [sp, #12]
     7d6:	a803      	add	r0, sp, #12
     7d8:	f00f fa2a 	bl	fc30 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
     7dc:	2800      	cmp	r0, #0
     7de:	d003      	beq.n	7e8 <ocrypto_mod_p256_sqr+0x80>
     7e0:	21b5      	movs	r1, #181	; 0xb5
     7e2:	2003      	movs	r0, #3
     7e4:	f000 f8e4 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     7e8:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
     7ea:	0000      	.short	0x0000
     7ec:	20001020 	.word	0x20001020
     7f0:	00000ab8 	.word	0x00000ab8

000007f4 <sdc_build_revision_get>:
     7f4:	b510      	push	{r4, lr}
     7f6:	b128      	cbz	r0, 804 <CONFIG_ISR_STACK_SIZE+0x4>
     7f8:	2214      	movs	r2, #20
     7fa:	4904      	ldr	r1, [pc, #16]	; (80c <CONFIG_ISR_STACK_SIZE+0xc>)
     7fc:	f010 f85f 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     800:	2000      	movs	r0, #0
     802:	bd10      	pop	{r4, pc}
     804:	f06f 0015 	mvn.w	r0, #21
     808:	bd10      	pop	{r4, pc}
     80a:	0000      	.short	0x0000
     80c:	00000ae0 	.word	0x00000ae0

00000810 <sdc_cfg_set>:
     810:	b570      	push	{r4, r5, r6, lr}
     812:	f06f 052c 	mvn.w	r5, #44	; 0x2c
     816:	bb78      	cbnz	r0, 878 <__data_size+0x18>
     818:	4c22      	ldr	r4, [pc, #136]	; (8a4 <__data_size+0x44>)
     81a:	7860      	ldrb	r0, [r4, #1]
     81c:	b108      	cbz	r0, 822 <sdc_cfg_set+0x12>
     81e:	11a8      	asrs	r0, r5, #6
     820:	bd70      	pop	{r4, r5, r6, pc}
     822:	b1f9      	cbz	r1, 864 <__data_size+0x4>
     824:	f06f 0015 	mvn.w	r0, #21
     828:	2a00      	cmp	r2, #0
     82a:	d0f9      	beq.n	820 <sdc_cfg_set+0x10>
     82c:	4b1e      	ldr	r3, [pc, #120]	; (8a8 <__data_size+0x48>)
     82e:	1e89      	subs	r1, r1, #2
     830:	2907      	cmp	r1, #7
     832:	d231      	bcs.n	898 <__data_size+0x38>
     834:	e8df f001 	tbb	[pc, r1]
     838:	1a170704 	.word	0x1a170704
     83c:	00211d30 	.word	0x00211d30
     840:	7810      	ldrb	r0, [r2, #0]
     842:	7058      	strb	r0, [r3, #1]
     844:	e01d      	b.n	882 <__data_size+0x22>
     846:	7891      	ldrb	r1, [r2, #2]
     848:	2900      	cmp	r1, #0
     84a:	d0e9      	beq.n	820 <sdc_cfg_set+0x10>
     84c:	78d1      	ldrb	r1, [r2, #3]
     84e:	2900      	cmp	r1, #0
     850:	d0e6      	beq.n	820 <sdc_cfg_set+0x10>
     852:	7811      	ldrb	r1, [r2, #0]
     854:	291b      	cmp	r1, #27
     856:	d3e3      	bcc.n	820 <sdc_cfg_set+0x10>
     858:	7851      	ldrb	r1, [r2, #1]
     85a:	291b      	cmp	r1, #27
     85c:	d3e0      	bcc.n	820 <sdc_cfg_set+0x10>
     85e:	6810      	ldr	r0, [r2, #0]
     860:	f8c3 0005 	str.w	r0, [r3, #5]
     864:	e00d      	b.n	882 <__data_size+0x22>
     866:	6810      	ldr	r0, [r2, #0]
     868:	60d8      	str	r0, [r3, #12]
     86a:	e00a      	b.n	882 <__data_size+0x22>
     86c:	7810      	ldrb	r0, [r2, #0]
     86e:	7098      	strb	r0, [r3, #2]
     870:	e007      	b.n	882 <__data_size+0x22>
     872:	8810      	ldrh	r0, [r2, #0]
     874:	8258      	strh	r0, [r3, #18]
     876:	e004      	b.n	882 <__data_size+0x22>
     878:	e00e      	b.n	898 <__data_size+0x38>
     87a:	8811      	ldrh	r1, [r2, #0]
     87c:	29ff      	cmp	r1, #255	; 0xff
     87e:	d8cf      	bhi.n	820 <sdc_cfg_set+0x10>
     880:	7519      	strb	r1, [r3, #20]
     882:	2201      	movs	r2, #1
     884:	4908      	ldr	r1, [pc, #32]	; (8a8 <__data_size+0x48>)
     886:	2000      	movs	r0, #0
     888:	f00b ff62 	bl	c750 <__udivmoddi4+0x2a0>
     88c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
     890:	db04      	blt.n	89c <__data_size+0x3c>
     892:	f06f 000b 	mvn.w	r0, #11
     896:	bd70      	pop	{r4, r5, r6, pc}
     898:	4628      	mov	r0, r5
     89a:	bd70      	pop	{r4, r5, r6, pc}
     89c:	2101      	movs	r1, #1
     89e:	70a1      	strb	r1, [r4, #2]
     8a0:	bd70      	pop	{r4, r5, r6, pc}
     8a2:	0000      	.short	0x0000
     8a4:	20000040 	.word	0x20000040
     8a8:	20001020 	.word	0x20001020

000008ac <sdc_disable>:
     8ac:	b510      	push	{r4, lr}
     8ae:	4c07      	ldr	r4, [pc, #28]	; (8cc <sdc_disable+0x20>)
     8b0:	7860      	ldrb	r0, [r4, #1]
     8b2:	b120      	cbz	r0, 8be <sdc_disable+0x12>
     8b4:	f006 fd60 	bl	7378 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
     8b8:	7820      	ldrb	r0, [r4, #0]
     8ba:	f00b fd19 	bl	c2f0 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
     8be:	f000 fe4d 	bl	155c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
     8c2:	f000 ff25 	bl	1710 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
     8c6:	2000      	movs	r0, #0
     8c8:	7060      	strb	r0, [r4, #1]
     8ca:	bd10      	pop	{r4, pc}
     8cc:	20000040 	.word	0x20000040

000008d0 <sdc_enable>:
     8d0:	b570      	push	{r4, r5, r6, lr}
     8d2:	460c      	mov	r4, r1
     8d4:	0005      	movs	r5, r0
     8d6:	d002      	beq.n	8de <sdc_enable+0xe>
     8d8:	b10c      	cbz	r4, 8de <sdc_enable+0xe>
     8da:	0760      	lsls	r0, r4, #29
     8dc:	d002      	beq.n	8e4 <sdc_enable+0x14>
     8de:	f06f 0015 	mvn.w	r0, #21
     8e2:	bd70      	pop	{r4, r5, r6, pc}
     8e4:	f000 f922 	bl	b2c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
     8e8:	b1a8      	cbz	r0, 916 <sdc_enable+0x46>
     8ea:	4628      	mov	r0, r5
     8ec:	f00b fcc6 	bl	c27c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
     8f0:	4d0a      	ldr	r5, [pc, #40]	; (91c <sdc_enable+0x4c>)
     8f2:	2200      	movs	r2, #0
     8f4:	490a      	ldr	r1, [pc, #40]	; (920 <sdc_enable+0x50>)
     8f6:	7028      	strb	r0, [r5, #0]
     8f8:	4620      	mov	r0, r4
     8fa:	f00b ff29 	bl	c750 <__udivmoddi4+0x2a0>
     8fe:	f00f fda6 	bl	1044e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
     902:	2100      	movs	r1, #0
     904:	7828      	ldrb	r0, [r5, #0]
     906:	f006 fd21 	bl	734c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
     90a:	f7ff ff45 	bl	798 <ocrypto_mod_p256_sqr+0x30>
     90e:	2001      	movs	r0, #1
     910:	7068      	strb	r0, [r5, #1]
     912:	2000      	movs	r0, #0
     914:	bd70      	pop	{r4, r5, r6, pc}
     916:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     91a:	bd70      	pop	{r4, r5, r6, pc}
     91c:	20000040 	.word	0x20000040
     920:	20001020 	.word	0x20001020

00000924 <sdc_init>:
     924:	b530      	push	{r4, r5, lr}
     926:	b089      	sub	sp, #36	; 0x24
     928:	0004      	movs	r4, r0
     92a:	d00c      	beq.n	946 <sdc_init+0x22>
     92c:	f00b fc4e 	bl	c1cc <mpsl_is_initialized>
     930:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
     934:	b120      	cbz	r0, 940 <sdc_init+0x1c>
     936:	f00b fae1 	bl	befc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
     93a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
     93e:	d905      	bls.n	94c <sdc_init+0x28>
     940:	4628      	mov	r0, r5
     942:	b009      	add	sp, #36	; 0x24
     944:	bd30      	pop	{r4, r5, pc}
     946:	f06f 0015 	mvn.w	r0, #21
     94a:	e7fa      	b.n	942 <sdc_init+0x1e>
     94c:	4d13      	ldr	r5, [pc, #76]	; (99c <sdc_init+0x78>)
     94e:	4814      	ldr	r0, [pc, #80]	; (9a0 <sdc_init+0x7c>)
     950:	606c      	str	r4, [r5, #4]
     952:	f000 fa07 	bl	d64 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
     956:	2000      	movs	r0, #0
     958:	7068      	strb	r0, [r5, #1]
     95a:	70a8      	strb	r0, [r5, #2]
     95c:	4601      	mov	r1, r0
     95e:	2224      	movs	r2, #36	; 0x24
     960:	4668      	mov	r0, sp
     962:	f010 f826 	bl	109b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     966:	2224      	movs	r2, #36	; 0x24
     968:	490e      	ldr	r1, [pc, #56]	; (9a4 <sdc_init+0x80>)
     96a:	4668      	mov	r0, sp
     96c:	f00f ffa7 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     970:	2224      	movs	r2, #36	; 0x24
     972:	4669      	mov	r1, sp
     974:	480c      	ldr	r0, [pc, #48]	; (9a8 <sdc_init+0x84>)
     976:	f00f ffa2 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     97a:	f3ef 8410 	mrs	r4, PRIMASK
     97e:	b672      	cpsid	i
     980:	f000 fdfa 	bl	1578 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
     984:	4809      	ldr	r0, [pc, #36]	; (9ac <sdc_init+0x88>)
     986:	f000 fecf 	bl	1728 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
     98a:	b118      	cbz	r0, 994 <sdc_init+0x70>
     98c:	21cb      	movs	r1, #203	; 0xcb
     98e:	2003      	movs	r0, #3
     990:	f000 f80e 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     994:	b904      	cbnz	r4, 998 <sdc_init+0x74>
     996:	b662      	cpsie	i
     998:	2000      	movs	r0, #0
     99a:	e7d2      	b.n	942 <sdc_init+0x1e>
     99c:	20000040 	.word	0x20000040
     9a0:	00000799 	.word	0x00000799
     9a4:	00000abc 	.word	0x00000abc
     9a8:	20001020 	.word	0x20001020
     9ac:	00000b59 	.word	0x00000b59

000009b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
     9b0:	b50e      	push	{r1, r2, r3, lr}
     9b2:	b672      	cpsid	i
     9b4:	4a15      	ldr	r2, [pc, #84]	; (a0c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
     9b6:	6855      	ldr	r5, [r2, #4]
     9b8:	b1dd      	cbz	r5, 9f2 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
     9ba:	2200      	movs	r2, #0
     9bc:	4603      	mov	r3, r0
     9be:	466e      	mov	r6, sp
     9c0:	240a      	movs	r4, #10
     9c2:	e003      	b.n	9cc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
     9c4:	fbb0 f0f4 	udiv	r0, r0, r4
     9c8:	1c52      	adds	r2, r2, #1
     9ca:	b2d2      	uxtb	r2, r2
     9cc:	2800      	cmp	r0, #0
     9ce:	d1f9      	bne.n	9c4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
     9d0:	54b0      	strb	r0, [r6, r2]
     9d2:	e00a      	b.n	9ea <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
     9d4:	b2d8      	uxtb	r0, r3
     9d6:	fbb0 f7f4 	udiv	r7, r0, r4
     9da:	fbb3 f3f4 	udiv	r3, r3, r4
     9de:	fb04 0017 	mls	r0, r4, r7, r0
     9e2:	1e52      	subs	r2, r2, #1
     9e4:	b2d2      	uxtb	r2, r2
     9e6:	3030      	adds	r0, #48	; 0x30
     9e8:	54b0      	strb	r0, [r6, r2]
     9ea:	2a00      	cmp	r2, #0
     9ec:	d1f2      	bne.n	9d4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
     9ee:	4630      	mov	r0, r6
     9f0:	47a8      	blx	r5
     9f2:	f3bf 8f4f 	dsb	sy
     9f6:	4806      	ldr	r0, [pc, #24]	; (a10 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
     9f8:	6801      	ldr	r1, [r0, #0]
     9fa:	4a06      	ldr	r2, [pc, #24]	; (a14 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
     9fc:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
     a00:	4311      	orrs	r1, r2
     a02:	6001      	str	r1, [r0, #0]
     a04:	f3bf 8f4f 	dsb	sy
     a08:	bf00      	nop
     a0a:	e7fd      	b.n	a08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
     a0c:	20000040 	.word	0x20000040
     a10:	e000ed0c 	.word	0xe000ed0c
     a14:	05fa0004 	.word	0x05fa0004

00000a18 <sdc_support_adv>:
     a18:	4806      	ldr	r0, [pc, #24]	; (a34 <sdc_support_adv+0x1c>)
     a1a:	b510      	push	{r4, lr}
     a1c:	7881      	ldrb	r1, [r0, #2]
     a1e:	7840      	ldrb	r0, [r0, #1]
     a20:	4301      	orrs	r1, r0
     a22:	d002      	beq.n	a2a <sdc_support_adv+0x12>
     a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a28:	bd10      	pop	{r4, pc}
     a2a:	f006 fcb5 	bl	7398 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
     a2e:	2000      	movs	r0, #0
     a30:	bd10      	pop	{r4, pc}
     a32:	0000      	.short	0x0000
     a34:	20000040 	.word	0x20000040

00000a38 <sdc_support_dle_peripheral>:
     a38:	4806      	ldr	r0, [pc, #24]	; (a54 <sdc_support_dle_peripheral+0x1c>)
     a3a:	b510      	push	{r4, lr}
     a3c:	7881      	ldrb	r1, [r0, #2]
     a3e:	7840      	ldrb	r0, [r0, #1]
     a40:	4301      	orrs	r1, r0
     a42:	d002      	beq.n	a4a <sdc_support_dle_peripheral+0x12>
     a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a48:	bd10      	pop	{r4, pc}
     a4a:	f006 facd 	bl	6fe8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
     a4e:	2000      	movs	r0, #0
     a50:	bd10      	pop	{r4, pc}
     a52:	0000      	.short	0x0000
     a54:	20000040 	.word	0x20000040

00000a58 <sdc_support_le_2m_phy>:
     a58:	4806      	ldr	r0, [pc, #24]	; (a74 <sdc_support_le_2m_phy+0x1c>)
     a5a:	b510      	push	{r4, lr}
     a5c:	7881      	ldrb	r1, [r0, #2]
     a5e:	7840      	ldrb	r0, [r0, #1]
     a60:	4301      	orrs	r1, r0
     a62:	d002      	beq.n	a6a <sdc_support_le_2m_phy+0x12>
     a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a68:	bd10      	pop	{r4, pc}
     a6a:	f00f fa85 	bl	ff78 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
     a6e:	2000      	movs	r0, #0
     a70:	bd10      	pop	{r4, pc}
     a72:	0000      	.short	0x0000
     a74:	20000040 	.word	0x20000040

00000a78 <sdc_support_peripheral>:
     a78:	4806      	ldr	r0, [pc, #24]	; (a94 <sdc_support_peripheral+0x1c>)
     a7a:	b510      	push	{r4, lr}
     a7c:	7881      	ldrb	r1, [r0, #2]
     a7e:	7840      	ldrb	r0, [r0, #1]
     a80:	4301      	orrs	r1, r0
     a82:	d002      	beq.n	a8a <sdc_support_peripheral+0x12>
     a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a88:	bd10      	pop	{r4, pc}
     a8a:	f006 fc97 	bl	73bc <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
     a8e:	2000      	movs	r0, #0
     a90:	bd10      	pop	{r4, pc}
     a92:	0000      	.short	0x0000
     a94:	20000040 	.word	0x20000040

00000a98 <sdc_support_phy_update_peripheral>:
     a98:	4806      	ldr	r0, [pc, #24]	; (ab4 <sdc_support_phy_update_peripheral+0x1c>)
     a9a:	b510      	push	{r4, lr}
     a9c:	7881      	ldrb	r1, [r0, #2]
     a9e:	7840      	ldrb	r0, [r0, #1]
     aa0:	4301      	orrs	r1, r0
     aa2:	d002      	beq.n	aaa <sdc_support_phy_update_peripheral+0x12>
     aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     aa8:	bd10      	pop	{r4, pc}
     aaa:	f00f fa79 	bl	ffa0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
     aae:	2000      	movs	r0, #0
     ab0:	bd10      	pop	{r4, pc}
     ab2:	0000      	.short	0x0000
     ab4:	20000040 	.word	0x20000040
     ab8:	00000001 	.word	0x00000001
     abc:	00010100 	.word	0x00010100
     ac0:	031b1b00 	.word	0x031b1b00
     ac4:	00000002 	.word	0x00000002
     ac8:	00001d4c 	.word	0x00001d4c
     acc:	001f0000 	.word	0x001f0000
     ad0:	00000008 	.word	0x00000008
	...
     ae0:	c12e7ee0 	.word	0xc12e7ee0
     ae4:	2385055e 	.word	0x2385055e
     ae8:	fadc1546 	.word	0xfadc1546
     aec:	707d298e 	.word	0x707d298e
     af0:	fca59310 	.word	0xfca59310

00000af4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
     af4:	4a05      	ldr	r2, [pc, #20]	; (b0c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
     af6:	b510      	push	{r4, lr}
     af8:	6852      	ldr	r2, [r2, #4]
     afa:	b112      	cbz	r2, b02 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
     afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     b00:	4710      	bx	r2
     b02:	2192      	movs	r1, #146	; 0x92
     b04:	2004      	movs	r0, #4
     b06:	f7ff ff53 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     b0a:	0000      	.short	0x0000
     b0c:	20001044 	.word	0x20001044

00000b10 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
     b10:	4a05      	ldr	r2, [pc, #20]	; (b28 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
     b12:	b510      	push	{r4, lr}
     b14:	6892      	ldr	r2, [r2, #8]
     b16:	b112      	cbz	r2, b1e <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
     b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     b1c:	4710      	bx	r2
     b1e:	2198      	movs	r1, #152	; 0x98
     b20:	2004      	movs	r0, #4
     b22:	f7ff ff45 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     b26:	0000      	.short	0x0000
     b28:	20001044 	.word	0x20001044

00000b2c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
     b2c:	4805      	ldr	r0, [pc, #20]	; (b44 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
     b2e:	6801      	ldr	r1, [r0, #0]
     b30:	b129      	cbz	r1, b3e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     b32:	6841      	ldr	r1, [r0, #4]
     b34:	b119      	cbz	r1, b3e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     b36:	6880      	ldr	r0, [r0, #8]
     b38:	b108      	cbz	r0, b3e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     b3a:	2001      	movs	r0, #1
     b3c:	4770      	bx	lr
     b3e:	2000      	movs	r0, #0
     b40:	4770      	bx	lr
     b42:	0000      	.short	0x0000
     b44:	20001044 	.word	0x20001044

00000b48 <sdc_rand_source_register>:
     b48:	4902      	ldr	r1, [pc, #8]	; (b54 <sdc_rand_source_register+0xc>)
     b4a:	c80d      	ldmia	r0, {r0, r2, r3}
     b4c:	e881 000d 	stmia.w	r1, {r0, r2, r3}
     b50:	2000      	movs	r0, #0
     b52:	4770      	bx	lr
     b54:	20001044 	.word	0x20001044

00000b58 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
     b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b5a:	4c12      	ldr	r4, [pc, #72]	; (ba4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
     b5c:	2600      	movs	r6, #0
     b5e:	6825      	ldr	r5, [r4, #0]
     b60:	e011      	b.n	b86 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     b62:	9800      	ldr	r0, [sp, #0]
     b64:	2802      	cmp	r0, #2
     b66:	d002      	beq.n	b6e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
     b68:	2803      	cmp	r0, #3
     b6a:	d10c      	bne.n	b86 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     b6c:	e006      	b.n	b7c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
     b6e:	6820      	ldr	r0, [r4, #0]
     b70:	b110      	cbz	r0, b78 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
     b72:	2000      	movs	r0, #0
     b74:	6026      	str	r6, [r4, #0]
     b76:	e005      	b.n	b84 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
     b78:	2128      	movs	r1, #40	; 0x28
     b7a:	e00c      	b.n	b96 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     b7c:	6820      	ldr	r0, [r4, #0]
     b7e:	b168      	cbz	r0, b9c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
     b80:	2001      	movs	r0, #1
     b82:	6026      	str	r6, [r4, #0]
     b84:	47a8      	blx	r5
     b86:	4668      	mov	r0, sp
     b88:	f000 fd94 	bl	16b4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
     b8c:	2800      	cmp	r0, #0
     b8e:	d0e8      	beq.n	b62 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
     b90:	2805      	cmp	r0, #5
     b92:	d005      	beq.n	ba0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
     b94:	2135      	movs	r1, #53	; 0x35
     b96:	2004      	movs	r0, #4
     b98:	f7ff ff0a 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     b9c:	212d      	movs	r1, #45	; 0x2d
     b9e:	e7fa      	b.n	b96 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ba2:	0000      	.short	0x0000
     ba4:	20000048 	.word	0x20000048

00000ba8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
     ba8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
     bac:	4e28      	ldr	r6, [pc, #160]	; (c50 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     bae:	4605      	mov	r5, r0
     bb0:	1d00      	adds	r0, r0, #4
     bb2:	f106 0744 	add.w	r7, r6, #68	; 0x44
     bb6:	6030      	str	r0, [r6, #0]
     bb8:	7838      	ldrb	r0, [r7, #0]
     bba:	b158      	cbz	r0, bd4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
     bbc:	78ba      	ldrb	r2, [r7, #2]
     bbe:	463c      	mov	r4, r7
     bc0:	1c79      	adds	r1, r7, #1
     bc2:	4628      	mov	r0, r5
     bc4:	1c92      	adds	r2, r2, #2
     bc6:	f00f fe7a 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     bca:	2000      	movs	r0, #0
     bcc:	7020      	strb	r0, [r4, #0]
     bce:	2004      	movs	r0, #4
     bd0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
     bd4:	481e      	ldr	r0, [pc, #120]	; (c50 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     bd6:	f001 ff6d 	bl	2ab4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
     bda:	4604      	mov	r4, r0
     bdc:	2802      	cmp	r0, #2
     bde:	d004      	beq.n	bea <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
     be0:	2c04      	cmp	r4, #4
     be2:	d007      	beq.n	bf4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x4c>
     be4:	2c08      	cmp	r4, #8
     be6:	d02c      	beq.n	c42 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9a>
     be8:	e02f      	b.n	c4a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa2>
     bea:	4919      	ldr	r1, [pc, #100]	; (c50 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     bec:	4628      	mov	r0, r5
     bee:	f00b fe74 	bl	c8da <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
     bf2:	e02a      	b.n	c4a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa2>
     bf4:	7830      	ldrb	r0, [r6, #0]
     bf6:	2808      	cmp	r0, #8
     bf8:	d104      	bne.n	c04 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x5c>
     bfa:	2105      	movs	r1, #5
     bfc:	203e      	movs	r0, #62	; 0x3e
     bfe:	f00b fe3e 	bl	c87e <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
     c02:	b150      	cbz	r0, c1a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x72>
     c04:	4912      	ldr	r1, [pc, #72]	; (c50 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     c06:	4628      	mov	r0, r5
     c08:	f00b fecc 	bl	c9a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
     c0c:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
     c10:	d30e      	bcc.n	c30 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x88>
     c12:	21c7      	movs	r1, #199	; 0xc7
     c14:	2008      	movs	r0, #8
     c16:	f7ff fecb 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     c1a:	88b0      	ldrh	r0, [r6, #4]
     c1c:	f8ad 0000 	strh.w	r0, [sp]
     c20:	a901      	add	r1, sp, #4
     c22:	4668      	mov	r0, sp
     c24:	f00c f92e 	bl	ce84 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
     c28:	2800      	cmp	r0, #0
     c2a:	d0c5      	beq.n	bb8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     c2c:	21a8      	movs	r1, #168	; 0xa8
     c2e:	e7f1      	b.n	c14 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x6c>
     c30:	2800      	cmp	r0, #0
     c32:	d0c1      	beq.n	bb8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     c34:	78a9      	ldrb	r1, [r5, #2]
     c36:	7828      	ldrb	r0, [r5, #0]
     c38:	f00b fe21 	bl	c87e <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
     c3c:	2800      	cmp	r0, #0
     c3e:	d0bb      	beq.n	bb8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     c40:	e003      	b.n	c4a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa2>
     c42:	4903      	ldr	r1, [pc, #12]	; (c50 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     c44:	4628      	mov	r0, r5
     c46:	f00b fe76 	bl	c936 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
     c4a:	4620      	mov	r0, r4
     c4c:	e7c0      	b.n	bd0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
     c4e:	0000      	.short	0x0000
     c50:	20001050 	.word	0x20001050
     c54:	b570      	push	{r4, r5, r6, lr}
     c56:	780a      	ldrb	r2, [r1, #0]
     c58:	7082      	strb	r2, [r0, #2]
     c5a:	b33a      	cbz	r2, cac <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x104>
     c5c:	2a01      	cmp	r2, #1
     c5e:	d825      	bhi.n	cac <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x104>
     c60:	2313      	movs	r3, #19
     c62:	7003      	strb	r3, [r0, #0]
     c64:	2300      	movs	r3, #0
     c66:	e00a      	b.n	c7e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xd6>
     c68:	eb01 0443 	add.w	r4, r1, r3, lsl #1
     c6c:	eb00 0543 	add.w	r5, r0, r3, lsl #1
     c70:	78a6      	ldrb	r6, [r4, #2]
     c72:	70ee      	strb	r6, [r5, #3]
     c74:	8864      	ldrh	r4, [r4, #2]
     c76:	0a24      	lsrs	r4, r4, #8
     c78:	1c5b      	adds	r3, r3, #1
     c7a:	712c      	strb	r4, [r5, #4]
     c7c:	b2db      	uxtb	r3, r3
     c7e:	4293      	cmp	r3, r2
     c80:	d3f2      	bcc.n	c68 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xc0>
     c82:	2300      	movs	r3, #0
     c84:	e00b      	b.n	c9e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xf6>
     c86:	bf00      	nop
     c88:	eb01 0543 	add.w	r5, r1, r3, lsl #1
     c8c:	eb00 0443 	add.w	r4, r0, r3, lsl #1
     c90:	792e      	ldrb	r6, [r5, #4]
     c92:	7166      	strb	r6, [r4, #5]
     c94:	88ad      	ldrh	r5, [r5, #4]
     c96:	0a2d      	lsrs	r5, r5, #8
     c98:	1c5b      	adds	r3, r3, #1
     c9a:	71a5      	strb	r5, [r4, #6]
     c9c:	b2db      	uxtb	r3, r3
     c9e:	4293      	cmp	r3, r2
     ca0:	d3f2      	bcc.n	c88 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xe0>
     ca2:	2101      	movs	r1, #1
     ca4:	eb01 0082 	add.w	r0, r1, r2, lsl #2
     ca8:	b2c0      	uxtb	r0, r0
     caa:	bd70      	pop	{r4, r5, r6, pc}
     cac:	2000      	movs	r0, #0
     cae:	bd70      	pop	{r4, r5, r6, pc}

00000cb0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
     cb0:	2840      	cmp	r0, #64	; 0x40
     cb2:	d203      	bcs.n	cbc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
     cb4:	1e40      	subs	r0, r0, #1
     cb6:	b2c1      	uxtb	r1, r0
     cb8:	4805      	ldr	r0, [pc, #20]	; (cd0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     cba:	e005      	b.n	cc8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
     cbc:	28ff      	cmp	r0, #255	; 0xff
     cbe:	d005      	beq.n	ccc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
     cc0:	3840      	subs	r0, #64	; 0x40
     cc2:	b2c1      	uxtb	r1, r0
     cc4:	4802      	ldr	r0, [pc, #8]	; (cd0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     cc6:	3008      	adds	r0, #8
     cc8:	f00c b86b 	b.w	cda2 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     ccc:	2001      	movs	r0, #1
     cce:	4770      	bx	lr
     cd0:	2000004c 	.word	0x2000004c

00000cd4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
     cd4:	1e40      	subs	r0, r0, #1
     cd6:	b2c1      	uxtb	r1, r0
     cd8:	4801      	ldr	r0, [pc, #4]	; (ce0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
     cda:	f00c b862 	b.w	cda2 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     cde:	0000      	.short	0x0000
     ce0:	2000005c 	.word	0x2000005c

00000ce4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
     ce4:	4902      	ldr	r1, [pc, #8]	; (cf0 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
     ce6:	6802      	ldr	r2, [r0, #0]
     ce8:	610a      	str	r2, [r1, #16]
     cea:	6840      	ldr	r0, [r0, #4]
     cec:	6148      	str	r0, [r1, #20]
     cee:	4770      	bx	lr
     cf0:	2000004c 	.word	0x2000004c

00000cf4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
     cf4:	4905      	ldr	r1, [pc, #20]	; (d0c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
     cf6:	6802      	ldr	r2, [r0, #0]
     cf8:	600a      	str	r2, [r1, #0]
     cfa:	6840      	ldr	r0, [r0, #4]
     cfc:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
     d00:	600a      	str	r2, [r1, #0]
     d02:	4a03      	ldr	r2, [pc, #12]	; (d10 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
     d04:	4310      	orrs	r0, r2
     d06:	6048      	str	r0, [r1, #4]
     d08:	4770      	bx	lr
     d0a:	0000      	.short	0x0000
     d0c:	2000004c 	.word	0x2000004c
     d10:	024007f8 	.word	0x024007f8

00000d14 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
     d14:	4902      	ldr	r1, [pc, #8]	; (d20 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
     d16:	6802      	ldr	r2, [r0, #0]
     d18:	608a      	str	r2, [r1, #8]
     d1a:	6840      	ldr	r0, [r0, #4]
     d1c:	60c8      	str	r0, [r1, #12]
     d1e:	4770      	bx	lr
     d20:	2000004c 	.word	0x2000004c

00000d24 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
     d24:	4807      	ldr	r0, [pc, #28]	; (d44 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
     d26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     d2a:	2200      	movs	r2, #0
     d2c:	6001      	str	r1, [r0, #0]
     d2e:	0cc9      	lsrs	r1, r1, #19
     d30:	6041      	str	r1, [r0, #4]
     d32:	f100 0108 	add.w	r1, r0, #8
     d36:	201f      	movs	r0, #31
     d38:	600a      	str	r2, [r1, #0]
     d3a:	604a      	str	r2, [r1, #4]
     d3c:	3108      	adds	r1, #8
     d3e:	e9c1 0200 	strd	r0, r2, [r1]
     d42:	4770      	bx	lr
     d44:	2000004c 	.word	0x2000004c

00000d48 <sdc_hci_cmd_cb_reset>:
     d48:	b510      	push	{r4, lr}
     d4a:	f7ff ffeb 	bl	d24 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
     d4e:	f00f f887 	bl	fe60 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
     d52:	4604      	mov	r4, r0
     d54:	4802      	ldr	r0, [pc, #8]	; (d60 <sdc_hci_cmd_cb_reset+0x18>)
     d56:	6800      	ldr	r0, [r0, #0]
     d58:	b100      	cbz	r0, d5c <sdc_hci_cmd_cb_reset+0x14>
     d5a:	4780      	blx	r0
     d5c:	4620      	mov	r0, r4
     d5e:	bd10      	pop	{r4, pc}
     d60:	20000064 	.word	0x20000064

00000d64 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
     d64:	4901      	ldr	r1, [pc, #4]	; (d6c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
     d66:	6008      	str	r0, [r1, #0]
     d68:	4770      	bx	lr
     d6a:	0000      	.short	0x0000
     d6c:	20000064 	.word	0x20000064

00000d70 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
     d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     d74:	4604      	mov	r4, r0
     d76:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     d7a:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
     d7e:	4d1f      	ldr	r5, [pc, #124]	; (dfc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
     d80:	4e1e      	ldr	r6, [pc, #120]	; (dfc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
     d82:	3d10      	subs	r5, #16
     d84:	2210      	movs	r2, #16
     d86:	2100      	movs	r1, #0
     d88:	4620      	mov	r0, r4
     d8a:	f00f fe12 	bl	109b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     d8e:	2210      	movs	r2, #16
     d90:	2100      	movs	r1, #0
     d92:	f104 0010 	add.w	r0, r4, #16
     d96:	f00f fe0c 	bl	109b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     d9a:	6828      	ldr	r0, [r5, #0]
     d9c:	1c40      	adds	r0, r0, #1
     d9e:	d108      	bne.n	db2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     da0:	6868      	ldr	r0, [r5, #4]
     da2:	1c40      	adds	r0, r0, #1
     da4:	d105      	bne.n	db2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     da6:	68a8      	ldr	r0, [r5, #8]
     da8:	1c40      	adds	r0, r0, #1
     daa:	d102      	bne.n	db2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     dac:	68e8      	ldr	r0, [r5, #12]
     dae:	1c40      	adds	r0, r0, #1
     db0:	d007      	beq.n	dc2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x52>
     db2:	6828      	ldr	r0, [r5, #0]
     db4:	686a      	ldr	r2, [r5, #4]
     db6:	68a9      	ldr	r1, [r5, #8]
     db8:	68eb      	ldr	r3, [r5, #12]
     dba:	6120      	str	r0, [r4, #16]
     dbc:	6162      	str	r2, [r4, #20]
     dbe:	61a1      	str	r1, [r4, #24]
     dc0:	61e3      	str	r3, [r4, #28]
     dc2:	2000      	movs	r0, #0
     dc4:	f000 fd84 	bl	18d0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
     dc8:	4387      	bics	r7, r0
     dca:	07f8      	lsls	r0, r7, #31
     dcc:	d113      	bne.n	df6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
     dce:	6830      	ldr	r0, [r6, #0]
     dd0:	1c40      	adds	r0, r0, #1
     dd2:	d108      	bne.n	de6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     dd4:	6870      	ldr	r0, [r6, #4]
     dd6:	1c40      	adds	r0, r0, #1
     dd8:	d105      	bne.n	de6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     dda:	68b0      	ldr	r0, [r6, #8]
     ddc:	1c40      	adds	r0, r0, #1
     dde:	d102      	bne.n	de6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     de0:	68f0      	ldr	r0, [r6, #12]
     de2:	1c40      	adds	r0, r0, #1
     de4:	d007      	beq.n	df6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
     de6:	6832      	ldr	r2, [r6, #0]
     de8:	6870      	ldr	r0, [r6, #4]
     dea:	68b1      	ldr	r1, [r6, #8]
     dec:	68f3      	ldr	r3, [r6, #12]
     dee:	6022      	str	r2, [r4, #0]
     df0:	6060      	str	r0, [r4, #4]
     df2:	60a1      	str	r1, [r4, #8]
     df4:	60e3      	str	r3, [r4, #12]
     df6:	2000      	movs	r0, #0
     df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     dfc:	10000090 	.word	0x10000090

00000e00 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
     e00:	b538      	push	{r3, r4, r5, lr}
     e02:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
     e06:	4604      	mov	r4, r0
     e08:	4822      	ldr	r0, [pc, #136]	; (e94 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
     e0a:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
     e0e:	4d21      	ldr	r5, [pc, #132]	; (e94 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
     e10:	6802      	ldr	r2, [r0, #0]
     e12:	3d14      	subs	r5, #20
     e14:	1c52      	adds	r2, r2, #1
     e16:	d104      	bne.n	e22 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x22>
     e18:	6842      	ldr	r2, [r0, #4]
     e1a:	43d2      	mvns	r2, r2
     e1c:	0412      	lsls	r2, r2, #16
     e1e:	0c12      	lsrs	r2, r2, #16
     e20:	d035      	beq.n	e8e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
     e22:	07c9      	lsls	r1, r1, #31
     e24:	d033      	beq.n	e8e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
     e26:	6801      	ldr	r1, [r0, #0]
     e28:	6840      	ldr	r0, [r0, #4]
     e2a:	f8ad 0000 	strh.w	r0, [sp]
     e2e:	f8c4 1001 	str.w	r1, [r4, #1]
     e32:	f8bd 0000 	ldrh.w	r0, [sp]
     e36:	f8a4 0005 	strh.w	r0, [r4, #5]
     e3a:	79a0      	ldrb	r0, [r4, #6]
     e3c:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
     e40:	71a0      	strb	r0, [r4, #6]
     e42:	6828      	ldr	r0, [r5, #0]
     e44:	1c40      	adds	r0, r0, #1
     e46:	d00c      	beq.n	e62 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     e48:	6868      	ldr	r0, [r5, #4]
     e4a:	1c40      	adds	r0, r0, #1
     e4c:	d009      	beq.n	e62 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     e4e:	68a8      	ldr	r0, [r5, #8]
     e50:	1c40      	adds	r0, r0, #1
     e52:	d006      	beq.n	e62 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     e54:	68e8      	ldr	r0, [r5, #12]
     e56:	1c40      	adds	r0, r0, #1
     e58:	d003      	beq.n	e62 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     e5a:	2000      	movs	r0, #0
     e5c:	f000 fd38 	bl	18d0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
     e60:	b140      	cbz	r0, e74 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x74>
     e62:	2210      	movs	r2, #16
     e64:	2100      	movs	r1, #0
     e66:	1de0      	adds	r0, r4, #7
     e68:	f00f fda3 	bl	109b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     e6c:	2001      	movs	r0, #1
     e6e:	7020      	strb	r0, [r4, #0]
     e70:	2000      	movs	r0, #0
     e72:	bd38      	pop	{r3, r4, r5, pc}
     e74:	682a      	ldr	r2, [r5, #0]
     e76:	6869      	ldr	r1, [r5, #4]
     e78:	68a8      	ldr	r0, [r5, #8]
     e7a:	68eb      	ldr	r3, [r5, #12]
     e7c:	f8c4 2007 	str.w	r2, [r4, #7]
     e80:	f8c4 100b 	str.w	r1, [r4, #11]
     e84:	f8c4 000f 	str.w	r0, [r4, #15]
     e88:	f8c4 3013 	str.w	r3, [r4, #19]
     e8c:	e7ee      	b.n	e6c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
     e8e:	2000      	movs	r0, #0
     e90:	e7ed      	b.n	e6e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
     e92:	0000      	.short	0x0000
     e94:	100000a4 	.word	0x100000a4

00000e98 <sdc_hci_cmd_vs_zephyr_read_version_info>:
     e98:	2102      	movs	r1, #2
     e9a:	8001      	strh	r1, [r0, #0]
     e9c:	8041      	strh	r1, [r0, #2]
     e9e:	2100      	movs	r1, #0
     ea0:	7101      	strb	r1, [r0, #4]
     ea2:	21e0      	movs	r1, #224	; 0xe0
     ea4:	7141      	strb	r1, [r0, #5]
     ea6:	f642 617e 	movw	r1, #11902	; 0x2e7e
     eaa:	80c1      	strh	r1, [r0, #6]
     eac:	4901      	ldr	r1, [pc, #4]	; (eb4 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
     eae:	6081      	str	r1, [r0, #8]
     eb0:	2000      	movs	r0, #0
     eb2:	4770      	bx	lr
     eb4:	85055ec1 	.word	0x85055ec1
     eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     ebc:	798c      	ldrb	r4, [r1, #6]
     ebe:	f8dd e018 	ldr.w	lr, [sp, #24]
     ec2:	2c08      	cmp	r4, #8
     ec4:	d901      	bls.n	eca <sdc_hci_cmd_vs_zephyr_read_version_info+0x32>
     ec6:	21db      	movs	r1, #219	; 0xdb
     ec8:	e02c      	b.n	f24 <sdc_hci_cmd_vs_zephyr_read_version_info+0x8c>
     eca:	f8df c0a4 	ldr.w	ip, [pc, #164]	; f70 <sdc_hci_cmd_vs_zephyr_read_version_info+0xd8>
     ece:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
     ed2:	b10d      	cbz	r5, ed8 <sdc_hci_cmd_vs_zephyr_read_version_info+0x40>
     ed4:	21dc      	movs	r1, #220	; 0xdc
     ed6:	e025      	b.n	f24 <sdc_hci_cmd_vs_zephyr_read_version_info+0x8c>
     ed8:	79cd      	ldrb	r5, [r1, #7]
     eda:	2d00      	cmp	r5, #0
     edc:	d045      	beq.n	f6a <sdc_hci_cmd_vs_zephyr_read_version_info+0xd2>
     ede:	006f      	lsls	r7, r5, #1
     ee0:	370a      	adds	r7, #10
     ee2:	681d      	ldr	r5, [r3, #0]
     ee4:	2c02      	cmp	r4, #2
     ee6:	443d      	add	r5, r7
     ee8:	d901      	bls.n	eee <sdc_hci_cmd_vs_zephyr_read_version_info+0x56>
     eea:	4626      	mov	r6, r4
     eec:	e001      	b.n	ef2 <sdc_hci_cmd_vs_zephyr_read_version_info+0x5a>
     eee:	f04f 0602 	mov.w	r6, #2
     ef2:	442e      	add	r6, r5
     ef4:	f1a6 0601 	sub.w	r6, r6, #1
     ef8:	d901      	bls.n	efe <sdc_hci_cmd_vs_zephyr_read_version_info+0x66>
     efa:	4625      	mov	r5, r4
     efc:	e001      	b.n	f02 <sdc_hci_cmd_vs_zephyr_read_version_info+0x6a>
     efe:	f04f 0502 	mov.w	r5, #2
     f02:	f1a5 0501 	sub.w	r5, r5, #1
     f06:	ea26 0605 	bic.w	r6, r6, r5
     f0a:	888d      	ldrh	r5, [r1, #4]
     f0c:	4425      	add	r5, r4
     f0e:	f1a4 0401 	sub.w	r4, r4, #1
     f12:	f1a5 0501 	sub.w	r5, r5, #1
     f16:	ea25 0504 	bic.w	r5, r5, r4
     f1a:	f64f 74ff 	movw	r4, #65535	; 0xffff
     f1e:	42a5      	cmp	r5, r4
     f20:	d303      	bcc.n	f2a <sdc_hci_cmd_vs_zephyr_read_version_info+0x92>
     f22:	21e7      	movs	r1, #231	; 0xe7
     f24:	2017      	movs	r0, #23
     f26:	f7ff fd43 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     f2a:	f1be 0f00 	cmp.w	lr, #0
     f2e:	d118      	bne.n	f62 <sdc_hci_cmd_vs_zephyr_read_version_info+0xca>
     f30:	1bf4      	subs	r4, r6, r7
     f32:	f84c 4020 	str.w	r4, [ip, r0, lsl #2]
     f36:	8025      	strh	r5, [r4, #0]
     f38:	79c8      	ldrb	r0, [r1, #7]
     f3a:	70a0      	strb	r0, [r4, #2]
     f3c:	2001      	movs	r0, #1
     f3e:	70e0      	strb	r0, [r4, #3]
     f40:	7122      	strb	r2, [r4, #4]
     f42:	6808      	ldr	r0, [r1, #0]
     f44:	f64f 72f0 	movw	r2, #65520	; 0xfff0
     f48:	0c00      	lsrs	r0, r0, #16
     f4a:	80e0      	strh	r0, [r4, #6]
     f4c:	8808      	ldrh	r0, [r1, #0]
     f4e:	8120      	strh	r0, [r4, #8]
     f50:	2000      	movs	r0, #0
     f52:	e003      	b.n	f5c <sdc_hci_cmd_vs_zephyr_read_version_info+0xc4>
     f54:	eb04 0740 	add.w	r7, r4, r0, lsl #1
     f58:	1c40      	adds	r0, r0, #1
     f5a:	817a      	strh	r2, [r7, #10]
     f5c:	79cf      	ldrb	r7, [r1, #7]
     f5e:	4287      	cmp	r7, r0
     f60:	d8f8      	bhi.n	f54 <sdc_hci_cmd_vs_zephyr_read_version_info+0xbc>
     f62:	79c8      	ldrb	r0, [r1, #7]
     f64:	fb00 6005 	mla	r0, r0, r5, r6
     f68:	6018      	str	r0, [r3, #0]
     f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f6e:	0000      	.short	0x0000
     f70:	20000068 	.word	0x20000068
     f74:	b530      	push	{r4, r5, lr}
     f76:	4603      	mov	r3, r0
     f78:	ea4f 0002 	mov.w	r0, r2
     f7c:	eb03 0440 	add.w	r4, r3, r0, lsl #1
     f80:	8964      	ldrh	r4, [r4, #10]
     f82:	428c      	cmp	r4, r1
     f84:	d009      	beq.n	f9a <sdc_hci_cmd_vs_zephyr_read_version_info+0x102>
     f86:	789c      	ldrb	r4, [r3, #2]
     f88:	1c40      	adds	r0, r0, #1
     f8a:	fbb0 f5f4 	udiv	r5, r0, r4
     f8e:	fb04 0015 	mls	r0, r4, r5, r0
     f92:	b2c0      	uxtb	r0, r0
     f94:	4290      	cmp	r0, r2
     f96:	d1f1      	bne.n	f7c <sdc_hci_cmd_vs_zephyr_read_version_info+0xe4>
     f98:	20ff      	movs	r0, #255	; 0xff
     f9a:	bd30      	pop	{r4, r5, pc}

00000f9c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
     f9c:	b570      	push	{r4, r5, r6, lr}
     f9e:	4605      	mov	r5, r0
     fa0:	4819      	ldr	r0, [pc, #100]	; (1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>)
     fa2:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
     fa6:	b364      	cbz	r4, 1002 <CONFIG_FPROTECT_BLOCK_SIZE+0x2>
     fa8:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
     fac:	d304      	bcc.n	fb8 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x1c>
     fae:	f240 2125 	movw	r1, #549	; 0x225
     fb2:	2017      	movs	r0, #23
     fb4:	f7ff fcfc 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     fb8:	4629      	mov	r1, r5
     fba:	4620      	mov	r0, r4
     fbc:	f00c fa0d 	bl	d3da <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
     fc0:	4601      	mov	r1, r0
     fc2:	28ff      	cmp	r0, #255	; 0xff
     fc4:	d004      	beq.n	fd0 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x34>
     fc6:	4620      	mov	r0, r4
     fc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     fcc:	f00c ba19 	b.w	d402 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
     fd0:	78a0      	ldrb	r0, [r4, #2]
     fd2:	fbb5 f1f0 	udiv	r1, r5, r0
     fd6:	fb00 5011 	mls	r0, r0, r1, r5
     fda:	b2c6      	uxtb	r6, r0
     fdc:	4632      	mov	r2, r6
     fde:	f64f 71f0 	movw	r1, #65520	; 0xfff0
     fe2:	4620      	mov	r0, r4
     fe4:	f7ff ffc6 	bl	f74 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
     fe8:	4602      	mov	r2, r0
     fea:	28ff      	cmp	r0, #255	; 0xff
     fec:	d009      	beq.n	1002 <CONFIG_FPROTECT_BLOCK_SIZE+0x2>
     fee:	42b2      	cmp	r2, r6
     ff0:	d001      	beq.n	ff6 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x5a>
     ff2:	2000      	movs	r0, #0
     ff4:	70e0      	strb	r0, [r4, #3]
     ff6:	4629      	mov	r1, r5
     ff8:	4620      	mov	r0, r4
     ffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     ffe:	f00c b9e6 	b.w	d3ce <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
    1002:	2000      	movs	r0, #0
    1004:	bd70      	pop	{r4, r5, r6, pc}
    1006:	0000      	.short	0x0000
    1008:	20000068 	.word	0x20000068

0000100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    100c:	4a08      	ldr	r2, [pc, #32]	; (1030 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>)
    100e:	b510      	push	{r4, lr}
    1010:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
    1014:	4601      	mov	r1, r0
    1016:	4620      	mov	r0, r4
    1018:	f00c f9df 	bl	d3da <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
    101c:	4601      	mov	r1, r0
    101e:	28ff      	cmp	r0, #255	; 0xff
    1020:	d004      	beq.n	102c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x20>
    1022:	4620      	mov	r0, r4
    1024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1028:	f00c b9eb 	b.w	d402 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    102c:	2000      	movs	r0, #0
    102e:	bd10      	pop	{r4, pc}
    1030:	20000068 	.word	0x20000068

00001034 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    1034:	b5f0      	push	{r4, r5, r6, r7, lr}
    1036:	b089      	sub	sp, #36	; 0x24
    1038:	0004      	movs	r4, r0
    103a:	460e      	mov	r6, r1
    103c:	9406      	str	r4, [sp, #24]
    103e:	d007      	beq.n	1050 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x1c>
    1040:	2500      	movs	r5, #0
    1042:	0760      	lsls	r0, r4, #29
    1044:	d006      	beq.n	1054 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x20>
    1046:	f240 1119 	movw	r1, #281	; 0x119
    104a:	2017      	movs	r0, #23
    104c:	f7ff fcb0 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1050:	2501      	movs	r5, #1
    1052:	e7f6      	b.n	1042 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xe>
    1054:	4814      	ldr	r0, [pc, #80]	; (10a8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x74>)
    1056:	2200      	movs	r2, #0
    1058:	4f14      	ldr	r7, [pc, #80]	; (10ac <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
    105a:	6002      	str	r2, [r0, #0]
    105c:	6042      	str	r2, [r0, #4]
    105e:	e9d7 1000 	ldrd	r1, r0, [r7]
    1062:	f896 c000 	ldrb.w	ip, [r6]
    1066:	68bb      	ldr	r3, [r7, #8]
    1068:	f36c 601f 	bfi	r0, ip, #24, #8
    106c:	e9cd 0302 	strd	r0, r3, [sp, #8]
    1070:	e9cd 5100 	strd	r5, r1, [sp]
    1074:	ab06      	add	r3, sp, #24
    1076:	a901      	add	r1, sp, #4
    1078:	4610      	mov	r0, r2
    107a:	f7ff ff1d 	bl	eb8 <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
    107e:	e9d7 1003 	ldrd	r1, r0, [r7, #12]
    1082:	7873      	ldrb	r3, [r6, #1]
    1084:	697a      	ldr	r2, [r7, #20]
    1086:	f363 601f 	bfi	r0, r3, #24, #8
    108a:	e9cd 0202 	strd	r0, r2, [sp, #8]
    108e:	e9cd 5100 	strd	r5, r1, [sp]
    1092:	ab06      	add	r3, sp, #24
    1094:	2200      	movs	r2, #0
    1096:	a901      	add	r1, sp, #4
    1098:	2001      	movs	r0, #1
    109a:	f7ff ff0d 	bl	eb8 <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
    109e:	9806      	ldr	r0, [sp, #24]
    10a0:	b009      	add	sp, #36	; 0x24
    10a2:	1b00      	subs	r0, r0, r4
    10a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10a6:	0000      	.short	0x0000
    10a8:	20000068 	.word	0x20000068
    10ac:	0000119c 	.word	0x0000119c

000010b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    10b0:	b510      	push	{r4, lr}
    10b2:	4604      	mov	r4, r0
    10b4:	7980      	ldrb	r0, [r0, #6]
    10b6:	490e      	ldr	r1, [pc, #56]	; (10f0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x40>)
    10b8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    10bc:	b1a8      	cbz	r0, 10ea <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    10be:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    10c2:	79e1      	ldrb	r1, [r4, #7]
    10c4:	7882      	ldrb	r2, [r0, #2]
    10c6:	4291      	cmp	r1, r2
    10c8:	d20f      	bcs.n	10ea <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    10ca:	1c4a      	adds	r2, r1, #1
    10cc:	71e2      	strb	r2, [r4, #7]
    10ce:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    10d2:	8952      	ldrh	r2, [r2, #10]
    10d4:	429a      	cmp	r2, r3
    10d6:	d0f4      	beq.n	10c2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x12>
    10d8:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    10dc:	8952      	ldrh	r2, [r2, #10]
    10de:	80a2      	strh	r2, [r4, #4]
    10e0:	f00c f98f 	bl	d402 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    10e4:	6020      	str	r0, [r4, #0]
    10e6:	2000      	movs	r0, #0
    10e8:	bd10      	pop	{r4, pc}
    10ea:	2005      	movs	r0, #5
    10ec:	bd10      	pop	{r4, pc}
    10ee:	0000      	.short	0x0000
    10f0:	20000068 	.word	0x20000068

000010f4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    10f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    10f8:	4607      	mov	r7, r0
    10fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
    10fe:	8038      	strh	r0, [r7, #0]
    1100:	4812      	ldr	r0, [pc, #72]	; (114c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x58>)
    1102:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    1106:	b1ec      	cbz	r4, 1144 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    1108:	78a5      	ldrb	r5, [r4, #2]
    110a:	7920      	ldrb	r0, [r4, #4]
    110c:	fbb0 f1f5 	udiv	r1, r0, r5
    1110:	fb05 0611 	mls	r6, r5, r1, r0
    1114:	4632      	mov	r2, r6
    1116:	f64f 71f0 	movw	r1, #65520	; 0xfff0
    111a:	4620      	mov	r0, r4
    111c:	f7ff ff2a 	bl	f74 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
    1120:	4602      	mov	r2, r0
    1122:	28ff      	cmp	r0, #255	; 0xff
    1124:	d00e      	beq.n	1144 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    1126:	1ba8      	subs	r0, r5, r6
    1128:	4410      	add	r0, r2
    112a:	fbb0 f1f5 	udiv	r1, r0, r5
    112e:	fb05 0011 	mls	r0, r5, r1, r0
    1132:	7921      	ldrb	r1, [r4, #4]
    1134:	4408      	add	r0, r1
    1136:	b281      	uxth	r1, r0
    1138:	8039      	strh	r1, [r7, #0]
    113a:	4620      	mov	r0, r4
    113c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1140:	f00c b945 	b.w	d3ce <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
    1144:	2000      	movs	r0, #0
    1146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    114a:	0000      	.short	0x0000
    114c:	20000068 	.word	0x20000068

00001150 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    1150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1154:	4606      	mov	r6, r0
    1156:	4810      	ldr	r0, [pc, #64]	; (1198 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x48>)
    1158:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    115c:	4631      	mov	r1, r6
    115e:	4628      	mov	r0, r5
    1160:	f00c f93b 	bl	d3da <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
    1164:	4604      	mov	r4, r0
    1166:	28ff      	cmp	r0, #255	; 0xff
    1168:	d012      	beq.n	1190 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x40>
    116a:	f8d5 0006 	ldr.w	r0, [r5, #6]
    116e:	4621      	mov	r1, r4
    1170:	ea4f 4730 	mov.w	r7, r0, ror #16
    1174:	4628      	mov	r0, r5
    1176:	f00c f944 	bl	d402 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    117a:	4601      	mov	r1, r0
    117c:	4630      	mov	r0, r6
    117e:	47b8      	blx	r7
    1180:	eb05 0144 	add.w	r1, r5, r4, lsl #1
    1184:	f64f 70f0 	movw	r0, #65520	; 0xfff0
    1188:	8148      	strh	r0, [r1, #10]
    118a:	2000      	movs	r0, #0
    118c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1190:	f243 0002 	movw	r0, #12290	; 0x3002
    1194:	e7fa      	b.n	118c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x3c>
    1196:	0000      	.short	0x0000
    1198:	20000068 	.word	0x20000068
    119c:	0000f213 	.word	0x0000f213
    11a0:	000802f8 	.word	0x000802f8
    11a4:	00000000 	.word	0x00000000
    11a8:	0000e7e9 	.word	0x0000e7e9
    11ac:	00080118 	.word	0x00080118
    11b0:	00000000 	.word	0x00000000

000011b4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    11b4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11b8:	4c24      	ldr	r4, [pc, #144]	; (124c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    11ba:	4606      	mov	r6, r0
    11bc:	b081      	sub	sp, #4
    11be:	6820      	ldr	r0, [r4, #0]
    11c0:	469a      	mov	sl, r3
    11c2:	4693      	mov	fp, r2
    11c4:	b158      	cbz	r0, 11de <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    11c6:	7a01      	ldrb	r1, [r0, #8]
    11c8:	42b1      	cmp	r1, r6
    11ca:	d903      	bls.n	11d4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    11cc:	6840      	ldr	r0, [r0, #4]
    11ce:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    11d2:	b140      	cbz	r0, 11e6 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    11d4:	f243 0002 	movw	r0, #12290	; 0x3002
    11d8:	b005      	add	sp, #20
    11da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11de:	21a5      	movs	r1, #165	; 0xa5
    11e0:	2018      	movs	r0, #24
    11e2:	f7ff fbe5 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    11e6:	4619      	mov	r1, r3
    11e8:	9802      	ldr	r0, [sp, #8]
    11ea:	f00c f945 	bl	d478 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    11ee:	4680      	mov	r8, r0
    11f0:	4658      	mov	r0, fp
    11f2:	990e      	ldr	r1, [sp, #56]	; 0x38
    11f4:	f00c f936 	bl	d464 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    11f8:	4605      	mov	r5, r0
    11fa:	eb08 0005 	add.w	r0, r8, r5
    11fe:	1d00      	adds	r0, r0, #4
    1200:	b287      	uxth	r7, r0
    1202:	6820      	ldr	r0, [r4, #0]
    1204:	46a1      	mov	r9, r4
    1206:	4639      	mov	r1, r7
    1208:	6800      	ldr	r0, [r0, #0]
    120a:	f00c f87b 	bl	d304 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    120e:	0004      	movs	r4, r0
    1210:	d01a      	beq.n	1248 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    1212:	8067      	strh	r7, [r4, #2]
    1214:	8025      	strh	r5, [r4, #0]
    1216:	4629      	mov	r1, r5
    1218:	1d20      	adds	r0, r4, #4
    121a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    121c:	4607      	mov	r7, r0
    121e:	465a      	mov	r2, fp
    1220:	2309      	movs	r3, #9
    1222:	9500      	str	r5, [sp, #0]
    1224:	f00b ffe8 	bl	d1f8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    1228:	8820      	ldrh	r0, [r4, #0]
    122a:	4641      	mov	r1, r8
    122c:	4438      	add	r0, r7
    122e:	230a      	movs	r3, #10
    1230:	9a02      	ldr	r2, [sp, #8]
    1232:	f8cd a000 	str.w	sl, [sp]
    1236:	f00b ffdf 	bl	d1f8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    123a:	f8d9 0000 	ldr.w	r0, [r9]
    123e:	6840      	ldr	r0, [r0, #4]
    1240:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    1244:	2000      	movs	r0, #0
    1246:	e7c7      	b.n	11d8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    1248:	2004      	movs	r0, #4
    124a:	e7c5      	b.n	11d8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    124c:	20000070 	.word	0x20000070

00001250 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    1250:	b570      	push	{r4, r5, r6, lr}
    1252:	4c14      	ldr	r4, [pc, #80]	; (12a4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    1254:	6823      	ldr	r3, [r4, #0]
    1256:	b18b      	cbz	r3, 127c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    1258:	7a19      	ldrb	r1, [r3, #8]
    125a:	4281      	cmp	r1, r0
    125c:	d912      	bls.n	1284 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    125e:	685a      	ldr	r2, [r3, #4]
    1260:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    1264:	b171      	cbz	r1, 1284 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    1266:	2500      	movs	r5, #0
    1268:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    126c:	884a      	ldrh	r2, [r1, #2]
    126e:	6818      	ldr	r0, [r3, #0]
    1270:	f00c f8a0 	bl	d3b4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    1274:	6821      	ldr	r1, [r4, #0]
    1276:	2000      	movs	r0, #0
    1278:	7a0a      	ldrb	r2, [r1, #8]
    127a:	e00c      	b.n	1296 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    127c:	21c6      	movs	r1, #198	; 0xc6
    127e:	2018      	movs	r0, #24
    1280:	f7ff fb96 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1284:	f243 0002 	movw	r0, #12290	; 0x3002
    1288:	bd70      	pop	{r4, r5, r6, pc}
    128a:	684b      	ldr	r3, [r1, #4]
    128c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1290:	b933      	cbnz	r3, 12a0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    1292:	1c40      	adds	r0, r0, #1
    1294:	b2c0      	uxtb	r0, r0
    1296:	4282      	cmp	r2, r0
    1298:	d8f7      	bhi.n	128a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    129a:	6808      	ldr	r0, [r1, #0]
    129c:	f00c f87f 	bl	d39e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    12a0:	2000      	movs	r0, #0
    12a2:	bd70      	pop	{r4, r5, r6, pc}
    12a4:	20000070 	.word	0x20000070

000012a8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    12a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    12ac:	460d      	mov	r5, r1
    12ae:	0004      	movs	r4, r0
    12b0:	4690      	mov	r8, r2
    12b2:	f04f 0600 	mov.w	r6, #0
    12b6:	d006      	beq.n	12c6 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    12b8:	2700      	movs	r7, #0
    12ba:	07a0      	lsls	r0, r4, #30
    12bc:	d005      	beq.n	12ca <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    12be:	2186      	movs	r1, #134	; 0x86
    12c0:	2018      	movs	r0, #24
    12c2:	f7ff fb75 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    12c6:	2701      	movs	r7, #1
    12c8:	e7f7      	b.n	12ba <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    12ca:	b1cd      	cbz	r5, 1300 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    12cc:	4611      	mov	r1, r2
    12ce:	2000      	movs	r0, #0
    12d0:	f00c f849 	bl	d366 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    12d4:	300c      	adds	r0, #12
    12d6:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    12da:	b98f      	cbnz	r7, 1300 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    12dc:	4f0a      	ldr	r7, [pc, #40]	; (1308 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    12de:	f104 000c 	add.w	r0, r4, #12
    12e2:	00aa      	lsls	r2, r5, #2
    12e4:	603c      	str	r4, [r7, #0]
    12e6:	7225      	strb	r5, [r4, #8]
    12e8:	6060      	str	r0, [r4, #4]
    12ea:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    12ee:	6020      	str	r0, [r4, #0]
    12f0:	2100      	movs	r1, #0
    12f2:	6860      	ldr	r0, [r4, #4]
    12f4:	f00f fb5d 	bl	109b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    12f8:	4641      	mov	r1, r8
    12fa:	6838      	ldr	r0, [r7, #0]
    12fc:	f00c f833 	bl	d366 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    1300:	4630      	mov	r0, r6
    1302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1306:	0000      	.short	0x0000
    1308:	20000070 	.word	0x20000070

0000130c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    130c:	b570      	push	{r4, r5, r6, lr}
    130e:	4d08      	ldr	r5, [pc, #32]	; (1330 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    1310:	6828      	ldr	r0, [r5, #0]
    1312:	2800      	cmp	r0, #0
    1314:	d00a      	beq.n	132c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    1316:	2400      	movs	r4, #0
    1318:	e004      	b.n	1324 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    131a:	4620      	mov	r0, r4
    131c:	f7ff ff98 	bl	1250 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    1320:	1c64      	adds	r4, r4, #1
    1322:	b2e4      	uxtb	r4, r4
    1324:	6828      	ldr	r0, [r5, #0]
    1326:	7a00      	ldrb	r0, [r0, #8]
    1328:	42a0      	cmp	r0, r4
    132a:	d8f6      	bhi.n	131a <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    132c:	bd70      	pop	{r4, r5, r6, pc}
    132e:	0000      	.short	0x0000
    1330:	20000070 	.word	0x20000070

00001334 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    1334:	4909      	ldr	r1, [pc, #36]	; (135c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    1336:	b510      	push	{r4, lr}
    1338:	4602      	mov	r2, r0
    133a:	6809      	ldr	r1, [r1, #0]
    133c:	2000      	movs	r0, #0
    133e:	b149      	cbz	r1, 1354 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    1340:	7a0b      	ldrb	r3, [r1, #8]
    1342:	4293      	cmp	r3, r2
    1344:	d905      	bls.n	1352 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1346:	6849      	ldr	r1, [r1, #4]
    1348:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    134c:	2900      	cmp	r1, #0
    134e:	d000      	beq.n	1352 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1350:	1d08      	adds	r0, r1, #4
    1352:	bd10      	pop	{r4, pc}
    1354:	21ec      	movs	r1, #236	; 0xec
    1356:	2018      	movs	r0, #24
    1358:	f7ff fb2a 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    135c:	20000070 	.word	0x20000070

00001360 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    1360:	490a      	ldr	r1, [pc, #40]	; (138c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x4>)
    1362:	b510      	push	{r4, lr}
    1364:	4602      	mov	r2, r0
    1366:	6809      	ldr	r1, [r1, #0]
    1368:	2000      	movs	r0, #0
    136a:	b159      	cbz	r1, 1384 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    136c:	7a0b      	ldrb	r3, [r1, #8]
    136e:	4293      	cmp	r3, r2
    1370:	d907      	bls.n	1382 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1372:	6849      	ldr	r1, [r1, #4]
    1374:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1378:	2900      	cmp	r1, #0
    137a:	d002      	beq.n	1382 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    137c:	f831 0b04 	ldrh.w	r0, [r1], #4
    1380:	4408      	add	r0, r1
    1382:	bd10      	pop	{r4, pc}
    1384:	21fa      	movs	r1, #250	; 0xfa
    1386:	2018      	movs	r0, #24
    1388:	f7ff fb12 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    138c:	20000070 	.word	0x20000070
    1390:	b570      	push	{r4, r5, r6, lr}
    1392:	4b1e      	ldr	r3, [pc, #120]	; (140c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x84>)
    1394:	6845      	ldr	r5, [r0, #4]
    1396:	4604      	mov	r4, r0
    1398:	2200      	movs	r2, #0
    139a:	b1a1      	cbz	r1, 13c6 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x3e>
    139c:	2001      	movs	r0, #1
    139e:	7060      	strb	r0, [r4, #1]
    13a0:	8858      	ldrh	r0, [r3, #2]
    13a2:	0881      	lsrs	r1, r0, #2
    13a4:	f05f 0000 	movs.w	r0, #0
    13a8:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    13ac:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    13b0:	831a      	strh	r2, [r3, #24]
    13b2:	8419      	strh	r1, [r3, #32]
    13b4:	fb00 5301 	mla	r3, r0, r1, r5
    13b8:	6073      	str	r3, [r6, #4]
    13ba:	1823      	adds	r3, r4, r0
    13bc:	1c40      	adds	r0, r0, #1
    13be:	751a      	strb	r2, [r3, #20]
    13c0:	2804      	cmp	r0, #4
    13c2:	d3f1      	bcc.n	13a8 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x20>
    13c4:	bd70      	pop	{r4, r5, r6, pc}
    13c6:	7062      	strb	r2, [r4, #1]
    13c8:	f05f 0000 	movs.w	r0, #0
    13cc:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    13d0:	830a      	strh	r2, [r1, #24]
    13d2:	840a      	strh	r2, [r1, #32]
    13d4:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    13d8:	604a      	str	r2, [r1, #4]
    13da:	1821      	adds	r1, r4, r0
    13dc:	1c40      	adds	r0, r0, #1
    13de:	750a      	strb	r2, [r1, #20]
    13e0:	2804      	cmp	r0, #4
    13e2:	d3f3      	bcc.n	13cc <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x44>
    13e4:	8858      	ldrh	r0, [r3, #2]
    13e6:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    13ea:	d201      	bcs.n	13f0 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x68>
    13ec:	0846      	lsrs	r6, r0, #1
    13ee:	e000      	b.n	13f2 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x6a>
    13f0:	26ff      	movs	r6, #255	; 0xff
    13f2:	f00c f8b5 	bl	d560 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    13f6:	6065      	str	r5, [r4, #4]
    13f8:	8420      	strh	r0, [r4, #32]
    13fa:	1829      	adds	r1, r5, r0
    13fc:	60a1      	str	r1, [r4, #8]
    13fe:	8466      	strh	r6, [r4, #34]	; 0x22
    1400:	60e5      	str	r5, [r4, #12]
    1402:	84a0      	strh	r0, [r4, #36]	; 0x24
    1404:	6121      	str	r1, [r4, #16]
    1406:	84e6      	strh	r6, [r4, #38]	; 0x26
    1408:	bd70      	pop	{r4, r5, r6, pc}
    140a:	0000      	.short	0x0000
    140c:	20000074 	.word	0x20000074

00001410 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    1410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1414:	b158      	cbz	r0, 142e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
    1416:	2500      	movs	r5, #0
    1418:	4411      	add	r1, r2
    141a:	4e24      	ldr	r6, [pc, #144]	; (14ac <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    141c:	b2cc      	uxtb	r4, r1
    141e:	2700      	movs	r7, #0
    1420:	7034      	strb	r4, [r6, #0]
    1422:	0781      	lsls	r1, r0, #30
    1424:	d005      	beq.n	1432 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
    1426:	214e      	movs	r1, #78	; 0x4e
    1428:	2009      	movs	r0, #9
    142a:	f7ff fac1 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    142e:	2501      	movs	r5, #1
    1430:	e7f2      	b.n	1418 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    1432:	2b1f      	cmp	r3, #31
    1434:	d804      	bhi.n	1440 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x30>
    1436:	f64f 71ff 	movw	r1, #65535	; 0xffff
    143a:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    143e:	e009      	b.n	1454 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x44>
    1440:	0059      	lsls	r1, r3, #1
    1442:	2bff      	cmp	r3, #255	; 0xff
    1444:	d90c      	bls.n	1460 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x50>
    1446:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    144a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    144e:	d200      	bcs.n	1452 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1450:	4611      	mov	r1, r2
    1452:	b289      	uxth	r1, r1
    1454:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    1458:	1cc9      	adds	r1, r1, #3
    145a:	4011      	ands	r1, r2
    145c:	b135      	cbz	r5, 146c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5c>
    145e:	e007      	b.n	1470 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    1460:	227c      	movs	r2, #124	; 0x7c
    1462:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    1466:	d3f4      	bcc.n	1452 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1468:	217c      	movs	r1, #124	; 0x7c
    146a:	e7f2      	b.n	1452 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    146c:	6070      	str	r0, [r6, #4]
    146e:	8071      	strh	r1, [r6, #2]
    1470:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    1474:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    1478:	2200      	movs	r2, #0
    147a:	6876      	ldr	r6, [r6, #4]
    147c:	f04f 0c01 	mov.w	ip, #1
    1480:	e00d      	b.n	149e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    1482:	b94d      	cbnz	r5, 1498 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x88>
    1484:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    1488:	eb00 0e03 	add.w	lr, r0, r3
    148c:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    1490:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    1494:	f8c7 e004 	str.w	lr, [r7, #4]
    1498:	1c52      	adds	r2, r2, #1
    149a:	440b      	add	r3, r1
    149c:	b2d2      	uxtb	r2, r2
    149e:	42a2      	cmp	r2, r4
    14a0:	d3ef      	bcc.n	1482 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x72>
    14a2:	1ddb      	adds	r3, r3, #7
    14a4:	f023 0007 	bic.w	r0, r3, #7
    14a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    14ac:	20000074 	.word	0x20000074

000014b0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    14b0:	b570      	push	{r4, r5, r6, lr}
    14b2:	4a10      	ldr	r2, [pc, #64]	; (14f4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    14b4:	2000      	movs	r0, #0
    14b6:	6851      	ldr	r1, [r2, #4]
    14b8:	7812      	ldrb	r2, [r2, #0]
    14ba:	e014      	b.n	14e6 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    14bc:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    14c0:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    14c4:	b16b      	cbz	r3, 14e2 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    14c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    14ca:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    14ce:	d00c      	beq.n	14ea <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    14d0:	2500      	movs	r5, #0
    14d2:	70a5      	strb	r5, [r4, #2]
    14d4:	2101      	movs	r1, #1
    14d6:	4620      	mov	r0, r4
    14d8:	f7ff ff5a 	bl	1390 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x8>
    14dc:	7025      	strb	r5, [r4, #0]
    14de:	4620      	mov	r0, r4
    14e0:	bd70      	pop	{r4, r5, r6, pc}
    14e2:	1c40      	adds	r0, r0, #1
    14e4:	b2c0      	uxtb	r0, r0
    14e6:	4290      	cmp	r0, r2
    14e8:	d3e8      	bcc.n	14bc <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    14ea:	21a9      	movs	r1, #169	; 0xa9
    14ec:	2009      	movs	r0, #9
    14ee:	f7ff fa5f 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    14f2:	0000      	.short	0x0000
    14f4:	20000074 	.word	0x20000074

000014f8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    14f8:	4804      	ldr	r0, [pc, #16]	; (150c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    14fa:	b510      	push	{r4, lr}
    14fc:	8840      	ldrh	r0, [r0, #2]
    14fe:	0884      	lsrs	r4, r0, #2
    1500:	f00c f82e 	bl	d560 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    1504:	4284      	cmp	r4, r0
    1506:	d300      	bcc.n	150a <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    1508:	4620      	mov	r0, r4
    150a:	bd10      	pop	{r4, pc}
    150c:	20000074 	.word	0x20000074
    1510:	b530      	push	{r4, r5, lr}
    1512:	490d      	ldr	r1, [pc, #52]	; (1548 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    1514:	2001      	movs	r0, #1
    1516:	6048      	str	r0, [r1, #4]
    1518:	1e82      	subs	r2, r0, #2
    151a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    151e:	490b      	ldr	r1, [pc, #44]	; (154c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    1520:	6088      	str	r0, [r1, #8]
    1522:	2300      	movs	r3, #0
    1524:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    1528:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    152c:	4c08      	ldr	r4, [pc, #32]	; (1550 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    152e:	6023      	str	r3, [r4, #0]
    1530:	1d25      	adds	r5, r4, #4
    1532:	6028      	str	r0, [r5, #0]
    1534:	6088      	str	r0, [r1, #8]
    1536:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    153a:	6023      	str	r3, [r4, #0]
    153c:	6028      	str	r0, [r5, #0]
    153e:	4906      	ldr	r1, [pc, #24]	; (1558 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    1540:	4804      	ldr	r0, [pc, #16]	; (1554 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    1542:	6008      	str	r0, [r1, #0]
    1544:	bd30      	pop	{r4, r5, pc}
    1546:	0000      	.short	0x0000
    1548:	4000e000 	.word	0x4000e000
    154c:	4000f000 	.word	0x4000f000
    1550:	4000f500 	.word	0x4000f500
    1554:	3ff60000 	.word	0x3ff60000
    1558:	4001f508 	.word	0x4001f508

0000155c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    155c:	b510      	push	{r4, lr}
    155e:	f7ff ffd7 	bl	1510 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    1562:	f00c f8d4 	bl	d70e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    1566:	4903      	ldr	r1, [pc, #12]	; (1574 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    1568:	4801      	ldr	r0, [pc, #4]	; (1570 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    156a:	6008      	str	r0, [r1, #0]
    156c:	bd10      	pop	{r4, pc}
    156e:	0000      	.short	0x0000
    1570:	3ff60000 	.word	0x3ff60000
    1574:	4001f508 	.word	0x4001f508

00001578 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    1578:	b510      	push	{r4, lr}
    157a:	f7ff ffc9 	bl	1510 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    157e:	f00c f8c6 	bl	d70e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    1582:	f000 f887 	bl	1694 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    1586:	4905      	ldr	r1, [pc, #20]	; (159c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    1588:	4803      	ldr	r0, [pc, #12]	; (1598 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
    158a:	6008      	str	r0, [r1, #0]
    158c:	f000 f8b8 	bl	1700 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    1590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1594:	f000 b8dc 	b.w	1750 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    1598:	3ff60000 	.word	0x3ff60000
    159c:	4001f508 	.word	0x4001f508
    15a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15a4:	4682      	mov	sl, r0
    15a6:	4838      	ldr	r0, [pc, #224]	; (1688 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    15a8:	f00f f898 	bl	106dc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    15ac:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 1688 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    15b0:	b128      	cbz	r0, 15be <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
    15b2:	2601      	movs	r6, #1
    15b4:	f10b 0001 	add.w	r0, fp, #1
    15b8:	21ff      	movs	r1, #255	; 0xff
    15ba:	7001      	strb	r1, [r0, #0]
    15bc:	e000      	b.n	15c0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
    15be:	2600      	movs	r6, #0
    15c0:	f44f 7580 	mov.w	r5, #256	; 0x100
    15c4:	4c31      	ldr	r4, [pc, #196]	; (168c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    15c6:	f04f 0800 	mov.w	r8, #0
    15ca:	1d2f      	adds	r7, r5, #4
    15cc:	2101      	movs	r1, #1
    15ce:	6061      	str	r1, [r4, #4]
    15d0:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    15d4:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    15d8:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    15dc:	6021      	str	r1, [r4, #0]
    15de:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 1690 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>
    15e2:	e01c      	b.n	161e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    15e4:	f8d9 0000 	ldr.w	r0, [r9]
    15e8:	06c0      	lsls	r0, r0, #27
    15ea:	d518      	bpl.n	161e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    15ec:	200e      	movs	r0, #14
    15ee:	f00c f89d 	bl	d72c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    15f2:	f3ef 8010 	mrs	r0, PRIMASK
    15f6:	9000      	str	r0, [sp, #0]
    15f8:	b672      	cpsid	i
    15fa:	2103      	movs	r1, #3
    15fc:	4620      	mov	r0, r4
    15fe:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    1602:	4629      	mov	r1, r5
    1604:	f00c f89f 	bl	d746 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1608:	b930      	cbnz	r0, 1618 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    160a:	4639      	mov	r1, r7
    160c:	4620      	mov	r0, r4
    160e:	f00c f89a 	bl	d746 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1612:	b908      	cbnz	r0, 1618 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    1614:	f00f f8f9 	bl	1080a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    1618:	9800      	ldr	r0, [sp, #0]
    161a:	b900      	cbnz	r0, 161e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    161c:	b662      	cpsie	i
    161e:	4629      	mov	r1, r5
    1620:	4620      	mov	r0, r4
    1622:	f00c f890 	bl	d746 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1626:	b928      	cbnz	r0, 1634 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xbc>
    1628:	4639      	mov	r1, r7
    162a:	4620      	mov	r0, r4
    162c:	f00c f88b 	bl	d746 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1630:	2800      	cmp	r0, #0
    1632:	d0d7      	beq.n	15e4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x6c>
    1634:	4639      	mov	r1, r7
    1636:	4620      	mov	r0, r4
    1638:	f00c f885 	bl	d746 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    163c:	2800      	cmp	r0, #0
    163e:	d1c5      	bne.n	15cc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
    1640:	bb06      	cbnz	r6, 1684 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    1642:	f89b 1001 	ldrb.w	r1, [fp, #1]
    1646:	f88d 1000 	strb.w	r1, [sp]
    164a:	9900      	ldr	r1, [sp, #0]
    164c:	9100      	str	r1, [sp, #0]
    164e:	f89d 1000 	ldrb.w	r1, [sp]
    1652:	b109      	cbz	r1, 1658 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe0>
    1654:	2501      	movs	r5, #1
    1656:	e000      	b.n	165a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe2>
    1658:	2500      	movs	r5, #0
    165a:	f10b 0001 	add.w	r0, fp, #1
    165e:	f880 8000 	strb.w	r8, [r0]
    1662:	2003      	movs	r0, #3
    1664:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    1668:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    166c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1670:	200e      	movs	r0, #14
    1672:	f00c f85b 	bl	d72c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    1676:	4804      	ldr	r0, [pc, #16]	; (1688 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    1678:	f00f f847 	bl	1070a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    167c:	b115      	cbz	r5, 1684 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    167e:	2011      	movs	r0, #17
    1680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1684:	2000      	movs	r0, #0
    1686:	e7fb      	b.n	1680 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x108>
    1688:	20000360 	.word	0x20000360
    168c:	4000e000 	.word	0x4000e000
    1690:	e000ed10 	.word	0xe000ed10

00001694 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    1694:	b510      	push	{r4, lr}
    1696:	4806      	ldr	r0, [pc, #24]	; (16b0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1698:	f00f f833 	bl	10702 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    169c:	b118      	cbz	r0, 16a6 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    169e:	2130      	movs	r1, #48	; 0x30
    16a0:	201d      	movs	r0, #29
    16a2:	f7ff f985 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    16a6:	4802      	ldr	r0, [pc, #8]	; (16b0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    16a8:	2100      	movs	r1, #0
    16aa:	7041      	strb	r1, [r0, #1]
    16ac:	bd10      	pop	{r4, pc}
    16ae:	0000      	.short	0x0000
    16b0:	20000360 	.word	0x20000360

000016b4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    16b4:	b570      	push	{r4, r5, r6, lr}
    16b6:	4911      	ldr	r1, [pc, #68]	; (16fc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    16b8:	680a      	ldr	r2, [r1, #0]
    16ba:	b1ea      	cbz	r2, 16f8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    16bc:	2300      	movs	r3, #0
    16be:	461d      	mov	r5, r3
    16c0:	2401      	movs	r4, #1
    16c2:	684a      	ldr	r2, [r1, #4]
    16c4:	1c52      	adds	r2, r2, #1
    16c6:	604a      	str	r2, [r1, #4]
    16c8:	2a09      	cmp	r2, #9
    16ca:	d300      	bcc.n	16ce <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    16cc:	604d      	str	r5, [r1, #4]
    16ce:	790e      	ldrb	r6, [r1, #4]
    16d0:	fa04 f206 	lsl.w	r2, r4, r6
    16d4:	680e      	ldr	r6, [r1, #0]
    16d6:	4216      	tst	r6, r2
    16d8:	d00b      	beq.n	16f2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    16da:	f3ef 8310 	mrs	r3, PRIMASK
    16de:	b672      	cpsid	i
    16e0:	680c      	ldr	r4, [r1, #0]
    16e2:	4394      	bics	r4, r2
    16e4:	600c      	str	r4, [r1, #0]
    16e6:	b903      	cbnz	r3, 16ea <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    16e8:	b662      	cpsie	i
    16ea:	6849      	ldr	r1, [r1, #4]
    16ec:	6001      	str	r1, [r0, #0]
    16ee:	2000      	movs	r0, #0
    16f0:	bd70      	pop	{r4, r5, r6, pc}
    16f2:	1c5b      	adds	r3, r3, #1
    16f4:	2b09      	cmp	r3, #9
    16f6:	d3e4      	bcc.n	16c2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    16f8:	2005      	movs	r0, #5
    16fa:	bd70      	pop	{r4, r5, r6, pc}
    16fc:	2000007c 	.word	0x2000007c

00001700 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    1700:	4802      	ldr	r0, [pc, #8]	; (170c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    1702:	2100      	movs	r1, #0
    1704:	6001      	str	r1, [r0, #0]
    1706:	6041      	str	r1, [r0, #4]
    1708:	4770      	bx	lr
    170a:	0000      	.short	0x0000
    170c:	2000007c 	.word	0x2000007c

00001710 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    1710:	b510      	push	{r4, lr}
    1712:	4c04      	ldr	r4, [pc, #16]	; (1724 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    1714:	7820      	ldrb	r0, [r4, #0]
    1716:	28ff      	cmp	r0, #255	; 0xff
    1718:	d003      	beq.n	1722 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    171a:	f00a fde9 	bl	c2f0 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    171e:	20ff      	movs	r0, #255	; 0xff
    1720:	7020      	strb	r0, [r4, #0]
    1722:	bd10      	pop	{r4, pc}
    1724:	20000000 	.word	0x20000000

00001728 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    1728:	b510      	push	{r4, lr}
    172a:	4c08      	ldr	r4, [pc, #32]	; (174c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    172c:	7861      	ldrb	r1, [r4, #1]
    172e:	b109      	cbz	r1, 1734 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    1730:	200f      	movs	r0, #15
    1732:	bd10      	pop	{r4, pc}
    1734:	f00a fda2 	bl	c27c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    1738:	7020      	strb	r0, [r4, #0]
    173a:	28ff      	cmp	r0, #255	; 0xff
    173c:	d001      	beq.n	1742 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    173e:	2000      	movs	r0, #0
    1740:	bd10      	pop	{r4, pc}
    1742:	2173      	movs	r1, #115	; 0x73
    1744:	201f      	movs	r0, #31
    1746:	f7ff f933 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    174a:	0000      	.short	0x0000
    174c:	20000000 	.word	0x20000000

00001750 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    1750:	4901      	ldr	r1, [pc, #4]	; (1758 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    1752:	2000      	movs	r0, #0
    1754:	7048      	strb	r0, [r1, #1]
    1756:	4770      	bx	lr
    1758:	20000000 	.word	0x20000000

0000175c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    175c:	4806      	ldr	r0, [pc, #24]	; (1778 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    175e:	4a07      	ldr	r2, [pc, #28]	; (177c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    1760:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    1762:	8852      	ldrh	r2, [r2, #2]
    1764:	4291      	cmp	r1, r2
    1766:	d104      	bne.n	1772 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    1768:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    176c:	b108      	cbz	r0, 1772 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    176e:	2000      	movs	r0, #0
    1770:	4770      	bx	lr
    1772:	2001      	movs	r0, #1
    1774:	4770      	bx	lr
    1776:	0000      	.short	0x0000
    1778:	20001270 	.word	0x20001270
    177c:	20000354 	.word	0x20000354

00001780 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    1780:	4901      	ldr	r1, [pc, #4]	; (1788 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    1782:	8048      	strh	r0, [r1, #2]
    1784:	4770      	bx	lr
    1786:	0000      	.short	0x0000
    1788:	20000354 	.word	0x20000354

0000178c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    178c:	4808      	ldr	r0, [pc, #32]	; (17b0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    178e:	4a09      	ldr	r2, [pc, #36]	; (17b4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    1790:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    1792:	8852      	ldrh	r2, [r2, #2]
    1794:	4291      	cmp	r1, r2
    1796:	d109      	bne.n	17ac <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1798:	f64f 71ff 	movw	r1, #65535	; 0xffff
    179c:	8481      	strh	r1, [r0, #36]	; 0x24
    179e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    17a2:	b119      	cbz	r1, 17ac <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    17a4:	2100      	movs	r1, #0
    17a6:	7001      	strb	r1, [r0, #0]
    17a8:	2001      	movs	r0, #1
    17aa:	4770      	bx	lr
    17ac:	2000      	movs	r0, #0
    17ae:	4770      	bx	lr
    17b0:	20001270 	.word	0x20001270
    17b4:	20000354 	.word	0x20000354

000017b8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    17b8:	4807      	ldr	r0, [pc, #28]	; (17d8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    17ba:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    17be:	2901      	cmp	r1, #1
    17c0:	d007      	beq.n	17d2 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    17c2:	2101      	movs	r1, #1
    17c4:	7001      	strb	r1, [r0, #0]
    17c6:	4805      	ldr	r0, [pc, #20]	; (17dc <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    17c8:	4903      	ldr	r1, [pc, #12]	; (17d8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    17ca:	8800      	ldrh	r0, [r0, #0]
    17cc:	8488      	strh	r0, [r1, #36]	; 0x24
    17ce:	2001      	movs	r0, #1
    17d0:	4770      	bx	lr
    17d2:	2000      	movs	r0, #0
    17d4:	4770      	bx	lr
    17d6:	0000      	.short	0x0000
    17d8:	20001270 	.word	0x20001270
    17dc:	20000354 	.word	0x20000354

000017e0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    17e0:	4906      	ldr	r1, [pc, #24]	; (17fc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    17e2:	4b07      	ldr	r3, [pc, #28]	; (1800 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    17e4:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    17e6:	885b      	ldrh	r3, [r3, #2]
    17e8:	429a      	cmp	r2, r3
    17ea:	d105      	bne.n	17f8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    17ec:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    17f0:	b112      	cbz	r2, 17f8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    17f2:	6001      	str	r1, [r0, #0]
    17f4:	2001      	movs	r0, #1
    17f6:	4770      	bx	lr
    17f8:	2000      	movs	r0, #0
    17fa:	4770      	bx	lr
    17fc:	20001270 	.word	0x20001270
    1800:	20000354 	.word	0x20000354

00001804 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    1804:	4909      	ldr	r1, [pc, #36]	; (182c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    1806:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    1808:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    180c:	3bff      	subs	r3, #255	; 0xff
    180e:	d002      	beq.n	1816 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    1810:	2100      	movs	r1, #0
    1812:	6001      	str	r1, [r0, #0]
    1814:	e007      	b.n	1826 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    1816:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    181a:	4904      	ldr	r1, [pc, #16]	; (182c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    181c:	2a01      	cmp	r2, #1
    181e:	d002      	beq.n	1826 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    1820:	6001      	str	r1, [r0, #0]
    1822:	2001      	movs	r0, #1
    1824:	4770      	bx	lr
    1826:	2000      	movs	r0, #0
    1828:	4770      	bx	lr
    182a:	0000      	.short	0x0000
    182c:	20001270 	.word	0x20001270

00001830 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    1830:	4901      	ldr	r1, [pc, #4]	; (1838 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    1832:	8008      	strh	r0, [r1, #0]
    1834:	4770      	bx	lr
    1836:	0000      	.short	0x0000
    1838:	20000354 	.word	0x20000354

0000183c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    183c:	4905      	ldr	r1, [pc, #20]	; (1854 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    183e:	2000      	movs	r0, #0
    1840:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    1844:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1848:	8488      	strh	r0, [r1, #36]	; 0x24
    184a:	4903      	ldr	r1, [pc, #12]	; (1858 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    184c:	8008      	strh	r0, [r1, #0]
    184e:	8048      	strh	r0, [r1, #2]
    1850:	4770      	bx	lr
    1852:	0000      	.short	0x0000
    1854:	20001270 	.word	0x20001270
    1858:	20000354 	.word	0x20000354
    185c:	4905      	ldr	r1, [pc, #20]	; (1874 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    185e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    1860:	4282      	cmp	r2, r0
    1862:	d105      	bne.n	1870 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    1864:	2000      	movs	r0, #0
    1866:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    186a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    186e:	8488      	strh	r0, [r1, #36]	; 0x24
    1870:	4770      	bx	lr
    1872:	0000      	.short	0x0000
    1874:	20001270 	.word	0x20001270

00001878 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    1878:	4a0a      	ldr	r2, [pc, #40]	; (18a4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    187a:	b110      	cbz	r0, 1882 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    187c:	2801      	cmp	r0, #1
    187e:	d007      	beq.n	1890 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    1880:	e00e      	b.n	18a0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1882:	7850      	ldrb	r0, [r2, #1]
    1884:	b160      	cbz	r0, 18a0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1886:	f8d2 0002 	ldr.w	r0, [r2, #2]
    188a:	6008      	str	r0, [r1, #0]
    188c:	88d0      	ldrh	r0, [r2, #6]
    188e:	e004      	b.n	189a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    1890:	7810      	ldrb	r0, [r2, #0]
    1892:	b128      	cbz	r0, 18a0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1894:	6890      	ldr	r0, [r2, #8]
    1896:	6008      	str	r0, [r1, #0]
    1898:	8990      	ldrh	r0, [r2, #12]
    189a:	8088      	strh	r0, [r1, #4]
    189c:	2001      	movs	r0, #1
    189e:	4770      	bx	lr
    18a0:	2000      	movs	r0, #0
    18a2:	4770      	bx	lr
    18a4:	20000362 	.word	0x20000362

000018a8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    18a8:	4a08      	ldr	r2, [pc, #32]	; (18cc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    18aa:	2301      	movs	r3, #1
    18ac:	b138      	cbz	r0, 18be <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    18ae:	2801      	cmp	r0, #1
    18b0:	d104      	bne.n	18bc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    18b2:	7013      	strb	r3, [r2, #0]
    18b4:	6808      	ldr	r0, [r1, #0]
    18b6:	6090      	str	r0, [r2, #8]
    18b8:	8888      	ldrh	r0, [r1, #4]
    18ba:	8190      	strh	r0, [r2, #12]
    18bc:	4770      	bx	lr
    18be:	7053      	strb	r3, [r2, #1]
    18c0:	6808      	ldr	r0, [r1, #0]
    18c2:	f8c2 0002 	str.w	r0, [r2, #2]
    18c6:	8888      	ldrh	r0, [r1, #4]
    18c8:	80d0      	strh	r0, [r2, #6]
    18ca:	4770      	bx	lr
    18cc:	20000362 	.word	0x20000362

000018d0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    18d0:	4906      	ldr	r1, [pc, #24]	; (18ec <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    18d2:	b110      	cbz	r0, 18da <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    18d4:	2801      	cmp	r0, #1
    18d6:	d002      	beq.n	18de <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    18d8:	e005      	b.n	18e6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    18da:	7848      	ldrb	r0, [r1, #1]
    18dc:	e000      	b.n	18e0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    18de:	7808      	ldrb	r0, [r1, #0]
    18e0:	b108      	cbz	r0, 18e6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    18e2:	2001      	movs	r0, #1
    18e4:	4770      	bx	lr
    18e6:	2000      	movs	r0, #0
    18e8:	4770      	bx	lr
    18ea:	0000      	.short	0x0000
    18ec:	20000362 	.word	0x20000362

000018f0 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>:
    18f0:	4901      	ldr	r1, [pc, #4]	; (18f8 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY+0x8>)
    18f2:	7708      	strb	r0, [r1, #28]
    18f4:	4770      	bx	lr
    18f6:	0000      	.short	0x0000
    18f8:	20000b32 	.word	0x20000b32

000018fc <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA>:
    18fc:	4801      	ldr	r0, [pc, #4]	; (1904 <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA+0x8>)
    18fe:	7880      	ldrb	r0, [r0, #2]
    1900:	4770      	bx	lr
    1902:	0000      	.short	0x0000
    1904:	20000084 	.word	0x20000084

00001908 <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY>:
    1908:	4801      	ldr	r0, [pc, #4]	; (1910 <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY+0x8>)
    190a:	78c0      	ldrb	r0, [r0, #3]
    190c:	4770      	bx	lr
    190e:	0000      	.short	0x0000
    1910:	20000084 	.word	0x20000084

00001914 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY>:
    1914:	b570      	push	{r4, r5, r6, lr}
    1916:	460c      	mov	r4, r1
    1918:	4605      	mov	r5, r0
    191a:	f000 f91f 	bl	1b5c <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>
    191e:	b118      	cbz	r0, 1928 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x14>
    1920:	21d0      	movs	r1, #208	; 0xd0
    1922:	2027      	movs	r0, #39	; 0x27
    1924:	f7ff f844 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1928:	4803      	ldr	r0, [pc, #12]	; (1938 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x24>)
    192a:	2101      	movs	r1, #1
    192c:	f00c fb2d 	bl	df8a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    1930:	4802      	ldr	r0, [pc, #8]	; (193c <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x28>)
    1932:	e9c0 540b 	strd	r5, r4, [r0, #44]	; 0x2c
    1936:	bd70      	pop	{r4, r5, r6, pc}
    1938:	20000b10 	.word	0x20000b10
    193c:	20000084 	.word	0x20000084

00001940 <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q>:
    1940:	4901      	ldr	r1, [pc, #4]	; (1948 <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q+0x8>)
    1942:	2001      	movs	r0, #1
    1944:	7148      	strb	r0, [r1, #5]
    1946:	4770      	bx	lr
    1948:	20000084 	.word	0x20000084

0000194c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA>:
    194c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1950:	4d5b      	ldr	r5, [pc, #364]	; (1ac0 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x174>)
    1952:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    1954:	782e      	ldrb	r6, [r5, #0]
    1956:	2e00      	cmp	r6, #0
    1958:	d16b      	bne.n	1a32 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    195a:	2a00      	cmp	r2, #0
    195c:	d069      	beq.n	1a32 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    195e:	2b00      	cmp	r3, #0
    1960:	d067      	beq.n	1a32 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    1962:	2c00      	cmp	r4, #0
    1964:	d065      	beq.n	1a32 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    1966:	f105 0614 	add.w	r6, r5, #20
    196a:	e9c5 010f 	strd	r0, r1, [r5, #60]	; 0x3c
    196e:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    1972:	2700      	movs	r7, #0
    1974:	716f      	strb	r7, [r5, #5]
    1976:	712f      	strb	r7, [r5, #4]
    1978:	70af      	strb	r7, [r5, #2]
    197a:	706f      	strb	r7, [r5, #1]
    197c:	70ef      	strb	r7, [r5, #3]
    197e:	81af      	strh	r7, [r5, #12]
    1980:	81ef      	strh	r7, [r5, #14]
    1982:	f000 f92f 	bl	1be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1986:	4606      	mov	r6, r0
    1988:	f000 f926 	bl	1bd8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    198c:	4604      	mov	r4, r0
    198e:	f006 f9d1 	bl	7d34 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    1992:	f005 ff29 	bl	77e8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1996:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    199a:	f006 fa4f 	bl	7e3c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    199e:	69e0      	ldr	r0, [r4, #28]
    19a0:	f006 fb32 	bl	8008 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    19a4:	6960      	ldr	r0, [r4, #20]
    19a6:	f006 fb25 	bl	7ff4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    19aa:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
    19ae:	f006 fb5b 	bl	8068 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    19b2:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    19b6:	6840      	ldr	r0, [r0, #4]
    19b8:	f890 021a 	ldrb.w	r0, [r0, #538]	; 0x21a
    19bc:	b108      	cbz	r0, 19c2 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x76>
    19be:	f006 f933 	bl	7c28 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    19c2:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    19c6:	2001      	movs	r0, #1
    19c8:	f006 f872 	bl	7ab0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    19cc:	2800      	cmp	r0, #0
    19ce:	d070      	beq.n	1ab2 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x166>
    19d0:	483c      	ldr	r0, [pc, #240]	; (1ac4 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x178>)
    19d2:	f006 f8d9 	bl	7b88 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    19d6:	8820      	ldrh	r0, [r4, #0]
    19d8:	f7ff fcc2 	bl	1360 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    19dc:	6368      	str	r0, [r5, #52]	; 0x34
    19de:	8820      	ldrh	r0, [r4, #0]
    19e0:	f7ff fca8 	bl	1334 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    19e4:	f106 0288 	add.w	r2, r6, #136	; 0x88
    19e8:	63a8      	str	r0, [r5, #56]	; 0x38
    19ea:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
    19ee:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 1ac8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>
    19f2:	e889 110c 	stmia.w	r9, {r2, r3, r8, ip}
    19f6:	f8d6 2098 	ldr.w	r2, [r6, #152]	; 0x98
    19fa:	f8c9 2019 	str.w	r2, [r9, #25]
    19fe:	f8d6 109c 	ldr.w	r1, [r6, #156]	; 0x9c
    1a02:	f8c9 101d 	str.w	r1, [r9, #29]
    1a06:	f000 f925 	bl	1c54 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xdc>
    1a0a:	4601      	mov	r1, r0
    1a0c:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    1a0e:	f00c f811 	bl	da34 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    1a12:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    1a14:	4281      	cmp	r1, r0
    1a16:	d200      	bcs.n	1a1a <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xce>
    1a18:	4608      	mov	r0, r1
    1a1a:	71a8      	strb	r0, [r5, #6]
    1a1c:	46a8      	mov	r8, r5
    1a1e:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    1a22:	46ba      	mov	sl, r7
    1a24:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    1a26:	f896 7023 	ldrb.w	r7, [r6, #35]	; 0x23
    1a2a:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    1a2c:	2908      	cmp	r1, #8
    1a2e:	d104      	bne.n	1a3a <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xee>
    1a30:	e002      	b.n	1a38 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xec>
    1a32:	f240 1145 	movw	r1, #325	; 0x145
    1a36:	e040      	b.n	1aba <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16e>
    1a38:	2104      	movs	r1, #4
    1a3a:	f00b fffb 	bl	da34 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    1a3e:	b90f      	cbnz	r7, 1a44 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xf8>
    1a40:	1d00      	adds	r0, r0, #4
    1a42:	b280      	uxth	r0, r0
    1a44:	4285      	cmp	r5, r0
    1a46:	d200      	bcs.n	1a4a <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xfe>
    1a48:	4628      	mov	r0, r5
    1a4a:	b2c5      	uxtb	r5, r0
    1a4c:	f888 5007 	strb.w	r5, [r8, #7]
    1a50:	f888 5008 	strb.w	r5, [r8, #8]
    1a54:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    1a58:	46d0      	mov	r8, sl
    1a5a:	b190      	cbz	r0, 1a82 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x136>
    1a5c:	2701      	movs	r7, #1
    1a5e:	f889 7018 	strb.w	r7, [r9, #24]
    1a62:	e9d6 1220 	ldrd	r1, r2, [r6, #128]	; 0x80
    1a66:	e9c9 1204 	strd	r1, r2, [r9, #16]
    1a6a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    1a6e:	f00b fef6 	bl	d85e <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
    1a72:	4603      	mov	r3, r0
    1a74:	462a      	mov	r2, r5
    1a76:	4914      	ldr	r1, [pc, #80]	; (1ac8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>)
    1a78:	4638      	mov	r0, r7
    1a7a:	f8cd 8000 	str.w	r8, [sp]
    1a7e:	f005 fe1f 	bl	76c0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1a82:	2001      	movs	r0, #1
    1a84:	f000 fb46 	bl	2114 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c8>
    1a88:	4810      	ldr	r0, [pc, #64]	; (1acc <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x180>)
    1a8a:	6800      	ldr	r0, [r0, #0]
    1a8c:	2803      	cmp	r0, #3
    1a8e:	d012      	beq.n	1ab6 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16a>
    1a90:	280b      	cmp	r0, #11
    1a92:	d010      	beq.n	1ab6 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16a>
    1a94:	480c      	ldr	r0, [pc, #48]	; (1ac8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>)
    1a96:	220e      	movs	r2, #14
    1a98:	2100      	movs	r1, #0
    1a9a:	304a      	adds	r0, #74	; 0x4a
    1a9c:	f00e ff89 	bl	109b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1aa0:	4809      	ldr	r0, [pc, #36]	; (1ac8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>)
    1aa2:	8ab1      	ldrh	r1, [r6, #20]
    1aa4:	304a      	adds	r0, #74	; 0x4a
    1aa6:	8041      	strh	r1, [r0, #2]
    1aa8:	8821      	ldrh	r1, [r4, #0]
    1aaa:	8001      	strh	r1, [r0, #0]
    1aac:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
    1ab0:	7101      	strb	r1, [r0, #4]
    1ab2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ab6:	f240 2102 	movw	r1, #514	; 0x202
    1aba:	2027      	movs	r0, #39	; 0x27
    1abc:	f7fe ff78 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1ac0:	20000084 	.word	0x20000084
    1ac4:	00002318 	.word	0x00002318
    1ac8:	20000ae8 	.word	0x20000ae8
    1acc:	40001550 	.word	0x40001550

00001ad0 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>:
    1ad0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    1ad4:	4688      	mov	r8, r1
    1ad6:	4607      	mov	r7, r0
    1ad8:	f000 f884 	bl	1be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1adc:	4c1a      	ldr	r4, [pc, #104]	; (1b48 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x78>)
    1ade:	4605      	mov	r5, r0
    1ae0:	07b8      	lsls	r0, r7, #30
    1ae2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1ae4:	784e      	ldrb	r6, [r1, #1]
    1ae6:	d516      	bpl.n	1b16 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x46>
    1ae8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1aea:	b330      	cbz	r0, 1b3a <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x6a>
    1aec:	8962      	ldrh	r2, [r4, #10]
    1aee:	1cd2      	adds	r2, r2, #3
    1af0:	f00e fee5 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1af4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1af6:	6260      	str	r0, [r4, #36]	; 0x24
    1af8:	4669      	mov	r1, sp
    1afa:	aa01      	add	r2, sp, #4
    1afc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1afe:	f00b faf8 	bl	d0f2 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    1b02:	9800      	ldr	r0, [sp, #0]
    1b04:	f00b faab 	bl	d05e <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    1b08:	f8c8 0000 	str.w	r0, [r8]
    1b0c:	4631      	mov	r1, r6
    1b0e:	2201      	movs	r2, #1
    1b10:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1b12:	f00b fa5b 	bl	cfcc <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    1b16:	07f8      	lsls	r0, r7, #31
    1b18:	d00d      	beq.n	1b36 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x66>
    1b1a:	e9d5 0120 	ldrd	r0, r1, [r5, #128]	; 0x80
    1b1e:	3518      	adds	r5, #24
    1b20:	1c40      	adds	r0, r0, #1
    1b22:	f141 0100 	adc.w	r1, r1, #0
    1b26:	e9c5 011a 	strd	r0, r1, [r5, #104]	; 0x68
    1b2a:	f815 0918 	ldrb.w	r0, [r5], #-24
    1b2e:	2801      	cmp	r0, #1
    1b30:	d008      	beq.n	1b44 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x74>
    1b32:	2001      	movs	r0, #1
    1b34:	7628      	strb	r0, [r5, #24]
    1b36:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    1b3a:	f240 415c 	movw	r1, #1116	; 0x45c
    1b3e:	2027      	movs	r0, #39	; 0x27
    1b40:	f7fe ff36 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1b44:	2000      	movs	r0, #0
    1b46:	e7f5      	b.n	1b34 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x64>
    1b48:	20000084 	.word	0x20000084

00001b4c <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI>:
    1b4c:	4802      	ldr	r0, [pc, #8]	; (1b58 <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI+0xc>)
    1b4e:	89c0      	ldrh	r0, [r0, #14]
    1b50:	f3c0 2080 	ubfx	r0, r0, #10, #1
    1b54:	4770      	bx	lr
    1b56:	0000      	.short	0x0000
    1b58:	20000084 	.word	0x20000084

00001b5c <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>:
    1b5c:	4804      	ldr	r0, [pc, #16]	; (1b70 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0x14>)
    1b5e:	7800      	ldrb	r0, [r0, #0]
    1b60:	b108      	cbz	r0, 1b66 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0xa>
    1b62:	200c      	movs	r0, #12
    1b64:	4770      	bx	lr
    1b66:	4903      	ldr	r1, [pc, #12]	; (1b74 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0x18>)
    1b68:	2000      	movs	r0, #0
    1b6a:	7708      	strb	r0, [r1, #28]
    1b6c:	4770      	bx	lr
    1b6e:	0000      	.short	0x0000
    1b70:	20000084 	.word	0x20000084
    1b74:	20000b32 	.word	0x20000b32

00001b78 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA>:
    1b78:	480c      	ldr	r0, [pc, #48]	; (1bac <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x34>)
    1b7a:	b510      	push	{r4, lr}
    1b7c:	7801      	ldrb	r1, [r0, #0]
    1b7e:	b149      	cbz	r1, 1b94 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1c>
    1b80:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    1b84:	7800      	ldrb	r0, [r0, #0]
    1b86:	2802      	cmp	r0, #2
    1b88:	d008      	beq.n	1b9c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x24>
    1b8a:	f240 211e 	movw	r1, #542	; 0x21e
    1b8e:	2027      	movs	r0, #39	; 0x27
    1b90:	f7fe ff0e 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1b98:	f000 b9ca 	b.w	1f30 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e4>
    1b9c:	6848      	ldr	r0, [r1, #4]
    1b9e:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    1ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1ba6:	f005 bff7 	b.w	7b98 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    1baa:	0000      	.short	0x0000
    1bac:	20000084 	.word	0x20000084
    1bb0:	4608      	mov	r0, r1
    1bb2:	2100      	movs	r1, #0
    1bb4:	7041      	strb	r1, [r0, #1]
    1bb6:	211d      	movs	r1, #29
    1bb8:	f800 1b04 	strb.w	r1, [r0], #4
    1bbc:	220e      	movs	r2, #14
    1bbe:	4901      	ldr	r1, [pc, #4]	; (1bc4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c>)
    1bc0:	f00e be7d 	b.w	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1bc4:	20000b40 	.word	0x20000b40
    1bc8:	4a02      	ldr	r2, [pc, #8]	; (1bd4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x5c>)
    1bca:	8993      	ldrh	r3, [r2, #12]
    1bcc:	4303      	orrs	r3, r0
    1bce:	8193      	strh	r3, [r2, #12]
    1bd0:	6952      	ldr	r2, [r2, #20]
    1bd2:	4710      	bx	r2
    1bd4:	20000084 	.word	0x20000084
    1bd8:	4801      	ldr	r0, [pc, #4]	; (1be0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x68>)
    1bda:	6840      	ldr	r0, [r0, #4]
    1bdc:	4770      	bx	lr
    1bde:	0000      	.short	0x0000
    1be0:	200000c0 	.word	0x200000c0
    1be4:	4801      	ldr	r0, [pc, #4]	; (1bec <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x74>)
    1be6:	6840      	ldr	r0, [r0, #4]
    1be8:	3080      	adds	r0, #128	; 0x80
    1bea:	4770      	bx	lr
    1bec:	200000c0 	.word	0x200000c0
    1bf0:	4a01      	ldr	r2, [pc, #4]	; (1bf8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x80>)
    1bf2:	2100      	movs	r1, #0
    1bf4:	6952      	ldr	r2, [r2, #20]
    1bf6:	4710      	bx	r2
    1bf8:	20000084 	.word	0x20000084
    1bfc:	b570      	push	{r4, r5, r6, lr}
    1bfe:	4605      	mov	r5, r0
    1c00:	2901      	cmp	r1, #1
    1c02:	d818      	bhi.n	1c36 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    1c04:	4c12      	ldr	r4, [pc, #72]	; (1c50 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd8>)
    1c06:	69a1      	ldr	r1, [r4, #24]
    1c08:	4788      	blx	r1
    1c0a:	b1a0      	cbz	r0, 1c36 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    1c0c:	7920      	ldrb	r0, [r4, #4]
    1c0e:	b990      	cbnz	r0, 1c36 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    1c10:	b9e5      	cbnz	r5, 1c4c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd4>
    1c12:	f104 0010 	add.w	r0, r4, #16
    1c16:	7801      	ldrb	r1, [r0, #0]
    1c18:	06c8      	lsls	r0, r1, #27
    1c1a:	d405      	bmi.n	1c28 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb0>
    1c1c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    1c1e:	7800      	ldrb	r0, [r0, #0]
    1c20:	06c0      	lsls	r0, r0, #27
    1c22:	d401      	bmi.n	1c28 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb0>
    1c24:	2001      	movs	r0, #1
    1c26:	e000      	b.n	1c2a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb2>
    1c28:	2000      	movs	r0, #0
    1c2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1c2c:	b92a      	cbnz	r2, 1c3a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc2>
    1c2e:	8962      	ldrh	r2, [r4, #10]
    1c30:	b11a      	cbz	r2, 1c3a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc2>
    1c32:	06c9      	lsls	r1, r1, #27
    1c34:	d401      	bmi.n	1c3a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc2>
    1c36:	2001      	movs	r0, #1
    1c38:	bd70      	pop	{r4, r5, r6, pc}
    1c3a:	89a1      	ldrh	r1, [r4, #12]
    1c3c:	078a      	lsls	r2, r1, #30
    1c3e:	d503      	bpl.n	1c48 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd0>
    1c40:	6a22      	ldr	r2, [r4, #32]
    1c42:	78d2      	ldrb	r2, [r2, #3]
    1c44:	2a02      	cmp	r2, #2
    1c46:	d001      	beq.n	1c4c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd4>
    1c48:	4308      	orrs	r0, r1
    1c4a:	d1f4      	bne.n	1c36 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    1c4c:	2000      	movs	r0, #0
    1c4e:	bd70      	pop	{r4, r5, r6, pc}
    1c50:	20000084 	.word	0x20000084
    1c54:	b510      	push	{r4, lr}
    1c56:	f7ff ffbf 	bl	1bd8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    1c5a:	4604      	mov	r4, r0
    1c5c:	f7ff ffc2 	bl	1be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1c60:	4602      	mov	r2, r0
    1c62:	7f41      	ldrb	r1, [r0, #29]
    1c64:	4816      	ldr	r0, [pc, #88]	; (1cc0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x148>)
    1c66:	2925      	cmp	r1, #37	; 0x25
    1c68:	d010      	beq.n	1c8c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
    1c6a:	2926      	cmp	r1, #38	; 0x26
    1c6c:	d00e      	beq.n	1c8c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
    1c6e:	7f92      	ldrb	r2, [r2, #30]
    1c70:	2a25      	cmp	r2, #37	; 0x25
    1c72:	d00b      	beq.n	1c8c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
    1c74:	2920      	cmp	r1, #32
    1c76:	d00d      	beq.n	1c94 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x11c>
    1c78:	2921      	cmp	r1, #33	; 0x21
    1c7a:	d00b      	beq.n	1c94 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x11c>
    1c7c:	2a23      	cmp	r2, #35	; 0x23
    1c7e:	d00f      	beq.n	1ca0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x128>
    1c80:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1c84:	2804      	cmp	r0, #4
    1c86:	d100      	bne.n	1c8a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x112>
    1c88:	2008      	movs	r0, #8
    1c8a:	bd10      	pop	{r4, pc}
    1c8c:	6840      	ldr	r0, [r0, #4]
    1c8e:	f890 12ce 	ldrb.w	r1, [r0, #718]	; 0x2ce
    1c92:	e00e      	b.n	1cb2 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x13a>
    1c94:	2a23      	cmp	r2, #35	; 0x23
    1c96:	d003      	beq.n	1ca0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x128>
    1c98:	6840      	ldr	r0, [r0, #4]
    1c9a:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
    1c9e:	e005      	b.n	1cac <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x134>
    1ca0:	6841      	ldr	r1, [r0, #4]
    1ca2:	f891 013e 	ldrb.w	r0, [r1, #318]	; 0x13e
    1ca6:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    1caa:	4008      	ands	r0, r1
    1cac:	f00b fdcd 	bl	d84a <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x4>
    1cb0:	4601      	mov	r1, r0
    1cb2:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1cba:	f00b bdde 	b.w	d87a <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x34>
    1cbe:	0000      	.short	0x0000
    1cc0:	200000c0 	.word	0x200000c0
    1cc4:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1cc8:	468b      	mov	fp, r1
    1cca:	4681      	mov	r9, r0
    1ccc:	f7ff ff8a 	bl	1be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1cd0:	2600      	movs	r6, #0
    1cd2:	4c66      	ldr	r4, [pc, #408]	; (1e6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x120>)
    1cd4:	4607      	mov	r7, r0
    1cd6:	f88d 6008 	strb.w	r6, [sp, #8]
    1cda:	9603      	str	r6, [sp, #12]
    1cdc:	9601      	str	r6, [sp, #4]
    1cde:	7820      	ldrb	r0, [r4, #0]
    1ce0:	4635      	mov	r5, r6
    1ce2:	2802      	cmp	r0, #2
    1ce4:	d004      	beq.n	1cf0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x178>
    1ce6:	f240 41df 	movw	r1, #1247	; 0x4df
    1cea:	2027      	movs	r0, #39	; 0x27
    1cec:	f7fe fe60 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1cf0:	7ba0      	ldrb	r0, [r4, #14]
    1cf2:	0640      	lsls	r0, r0, #25
    1cf4:	d406      	bmi.n	1d04 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x18c>
    1cf6:	2040      	movs	r0, #64	; 0x40
    1cf8:	f7ff ff7a 	bl	1bf0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    1cfc:	89e0      	ldrh	r0, [r4, #14]
    1cfe:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    1d02:	81e0      	strh	r0, [r4, #14]
    1d04:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
    1d08:	f1b9 0f00 	cmp.w	r9, #0
    1d0c:	d03a      	beq.n	1d84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38>
    1d0e:	b180      	cbz	r0, 1d32 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    1d10:	f005 fda4 	bl	785c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    1d14:	f005 fd7e 	bl	7814 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    1d18:	b958      	cbnz	r0, 1d32 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    1d1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1d1c:	7841      	ldrb	r1, [r0, #1]
    1d1e:	b141      	cbz	r1, 1d32 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    1d20:	7800      	ldrb	r0, [r0, #0]
    1d22:	7e39      	ldrb	r1, [r7, #24]
    1d24:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1d28:	4288      	cmp	r0, r1
    1d2a:	d102      	bne.n	1d32 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    1d2c:	2001      	movs	r0, #1
    1d2e:	7060      	strb	r0, [r4, #1]
    1d30:	e097      	b.n	1e62 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x116>
    1d32:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1d34:	7841      	ldrb	r1, [r0, #1]
    1d36:	8161      	strh	r1, [r4, #10]
    1d38:	b121      	cbz	r1, 1d44 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1cc>
    1d3a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1d3c:	f00b faaf 	bl	d29e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    1d40:	62a0      	str	r0, [r4, #40]	; 0x28
    1d42:	e000      	b.n	1d46 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ce>
    1d44:	62a5      	str	r5, [r4, #40]	; 0x28
    1d46:	89e0      	ldrh	r0, [r4, #14]
    1d48:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    1d4c:	81e0      	strh	r0, [r4, #14]
    1d4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1d50:	7df9      	ldrb	r1, [r7, #23]
    1d52:	7800      	ldrb	r0, [r0, #0]
    1d54:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1d58:	4288      	cmp	r0, r1
    1d5a:	d007      	beq.n	1d6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20>
    1d5c:	a803      	add	r0, sp, #12
    1d5e:	f000 f98b 	bl	2078 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x32c>
    1d62:	89e0      	ldrh	r0, [r4, #14]
    1d64:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    1d68:	81e0      	strh	r0, [r4, #14]
    1d6a:	e000      	b.n	1d6e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x22>
    1d6c:	2601      	movs	r6, #1
    1d6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1d70:	7e39      	ldrb	r1, [r7, #24]
    1d72:	7800      	ldrb	r0, [r0, #0]
    1d74:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1d78:	4288      	cmp	r0, r1
    1d7a:	d10d      	bne.n	1d98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4c>
    1d7c:	a802      	add	r0, sp, #8
    1d7e:	f000 f931 	bl	1fe4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x298>
    1d82:	e009      	b.n	1d98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4c>
    1d84:	b108      	cbz	r0, 1d8a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e>
    1d86:	f005 fd63 	bl	7850 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    1d8a:	78a0      	ldrb	r0, [r4, #2]
    1d8c:	1c40      	adds	r0, r0, #1
    1d8e:	70a0      	strb	r0, [r4, #2]
    1d90:	89e0      	ldrh	r0, [r4, #14]
    1d92:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    1d96:	81e0      	strh	r0, [r4, #14]
    1d98:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 1e6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x120>
    1d9c:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
    1da0:	f10a 0a3c 	add.w	sl, sl, #60	; 0x3c
    1da4:	b190      	cbz	r0, 1dcc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x80>
    1da6:	f7ff ff17 	bl	1bd8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    1daa:	4931      	ldr	r1, [pc, #196]	; (1e70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x124>)
    1dac:	760d      	strb	r5, [r1, #24]
    1dae:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    1db2:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1db6:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    1dba:	f00b fd50 	bl	d85e <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
    1dbe:	4603      	mov	r3, r0
    1dc0:	22fb      	movs	r2, #251	; 0xfb
    1dc2:	492b      	ldr	r1, [pc, #172]	; (1e70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x124>)
    1dc4:	4628      	mov	r0, r5
    1dc6:	9500      	str	r5, [sp, #0]
    1dc8:	f005 fc7a 	bl	76c0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1dcc:	f04f 0800 	mov.w	r8, #0
    1dd0:	f1bb 0f00 	cmp.w	fp, #0
    1dd4:	d104      	bne.n	1de0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x94>
    1dd6:	78a1      	ldrb	r1, [r4, #2]
    1dd8:	2001      	movs	r0, #1
    1dda:	f7ff ff0f 	bl	1bfc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    1dde:	b120      	cbz	r0, 1dea <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x9e>
    1de0:	f006 f8f4 	bl	7fcc <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    1de4:	f04f 0801 	mov.w	r8, #1
    1de8:	e002      	b.n	1df0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa4>
    1dea:	2000      	movs	r0, #0
    1dec:	f000 f9d0 	bl	2190 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x444>
    1df0:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1df4:	b118      	cbz	r0, 1dfe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb2>
    1df6:	a901      	add	r1, sp, #4
    1df8:	2002      	movs	r0, #2
    1dfa:	f7ff fe69 	bl	1ad0 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>
    1dfe:	481c      	ldr	r0, [pc, #112]	; (1e70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x124>)
    1e00:	8aba      	ldrh	r2, [r7, #20]
    1e02:	304a      	adds	r0, #74	; 0x4a
    1e04:	b13e      	cbz	r6, 1e16 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xca>
    1e06:	b91a      	cbnz	r2, 1e10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc4>
    1e08:	88c2      	ldrh	r2, [r0, #6]
    1e0a:	b90a      	cbnz	r2, 1e10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc4>
    1e0c:	8902      	ldrh	r2, [r0, #8]
    1e0e:	b112      	cbz	r2, 1e16 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xca>
    1e10:	8942      	ldrh	r2, [r0, #10]
    1e12:	1c52      	adds	r2, r2, #1
    1e14:	8142      	strh	r2, [r0, #10]
    1e16:	f1b9 0f00 	cmp.w	r9, #0
    1e1a:	d004      	beq.n	1e26 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xda>
    1e1c:	88c1      	ldrh	r1, [r0, #6]
    1e1e:	1c49      	adds	r1, r1, #1
    1e20:	80c1      	strh	r1, [r0, #6]
    1e22:	70a5      	strb	r5, [r4, #2]
    1e24:	e002      	b.n	1e2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe0>
    1e26:	8901      	ldrh	r1, [r0, #8]
    1e28:	1c49      	adds	r1, r1, #1
    1e2a:	8101      	strh	r1, [r0, #8]
    1e2c:	480f      	ldr	r0, [pc, #60]	; (1e6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x120>)
    1e2e:	303c      	adds	r0, #60	; 0x3c
    1e30:	f001 f9f2 	bl	3218 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    1e34:	9803      	ldr	r0, [sp, #12]
    1e36:	b140      	cbz	r0, 1e4a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfe>
    1e38:	f00b f911 	bl	d05e <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    1e3c:	f8da 1004 	ldr.w	r1, [sl, #4]
    1e40:	1c40      	adds	r0, r0, #1
    1e42:	7205      	strb	r5, [r0, #8]
    1e44:	2208      	movs	r2, #8
    1e46:	f00c f927 	bl	e098 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1e4a:	9801      	ldr	r0, [sp, #4]
    1e4c:	b130      	cbz	r0, 1e5c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x110>
    1e4e:	f8da 1004 	ldr.w	r1, [sl, #4]
    1e52:	7205      	strb	r5, [r0, #8]
    1e54:	2210      	movs	r2, #16
    1e56:	9801      	ldr	r0, [sp, #4]
    1e58:	f00c f91e 	bl	e098 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1e5c:	f1b8 0f00 	cmp.w	r8, #0
    1e60:	d001      	beq.n	1e66 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x11a>
    1e62:	f000 f865 	bl	1f30 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e4>
    1e66:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1e6a:	0000      	.short	0x0000
    1e6c:	20000084 	.word	0x20000084
    1e70:	20000ae8 	.word	0x20000ae8
    1e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1e78:	4688      	mov	r8, r1
    1e7a:	4681      	mov	r9, r0
    1e7c:	f7ff feb2 	bl	1be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1e80:	4d29      	ldr	r5, [pc, #164]	; (1f28 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1dc>)
    1e82:	4604      	mov	r4, r0
    1e84:	7828      	ldrb	r0, [r5, #0]
    1e86:	2801      	cmp	r0, #1
    1e88:	d004      	beq.n	1e94 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x148>
    1e8a:	f240 416b 	movw	r1, #1131	; 0x46b
    1e8e:	2027      	movs	r0, #39	; 0x27
    1e90:	f7fe fd8e 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1e94:	7c20      	ldrb	r0, [r4, #16]
    1e96:	2700      	movs	r7, #0
    1e98:	2601      	movs	r6, #1
    1e9a:	b128      	cbz	r0, 1ea8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15c>
    1e9c:	7427      	strb	r7, [r4, #16]
    1e9e:	2100      	movs	r1, #0
    1ea0:	2004      	movs	r0, #4
    1ea2:	f7ff fe91 	bl	1bc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    1ea6:	74a6      	strb	r6, [r4, #18]
    1ea8:	6a29      	ldr	r1, [r5, #32]
    1eaa:	7808      	ldrb	r0, [r1, #0]
    1eac:	43c0      	mvns	r0, r0
    1eae:	0780      	lsls	r0, r0, #30
    1eb0:	d109      	bne.n	1ec6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x17a>
    1eb2:	7da0      	ldrb	r0, [r4, #22]
    1eb4:	bb88      	cbnz	r0, 1f1a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ce>
    1eb6:	2002      	movs	r0, #2
    1eb8:	f7ff fe86 	bl	1bc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    1ebc:	6a28      	ldr	r0, [r5, #32]
    1ebe:	7800      	ldrb	r0, [r0, #0]
    1ec0:	43c0      	mvns	r0, r0
    1ec2:	0780      	lsls	r0, r0, #30
    1ec4:	d029      	beq.n	1f1a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ce>
    1ec6:	6a28      	ldr	r0, [r5, #32]
    1ec8:	7840      	ldrb	r0, [r0, #1]
    1eca:	b110      	cbz	r0, 1ed2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x186>
    1ecc:	2002      	movs	r0, #2
    1ece:	75a0      	strb	r0, [r4, #22]
    1ed0:	e000      	b.n	1ed4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x188>
    1ed2:	75a6      	strb	r6, [r4, #22]
    1ed4:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    1ed8:	b198      	cbz	r0, 1f02 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b6>
    1eda:	f7ff fe7d 	bl	1bd8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    1ede:	4913      	ldr	r1, [pc, #76]	; (1f2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e0>)
    1ee0:	7a2d      	ldrb	r5, [r5, #8]
    1ee2:	760e      	strb	r6, [r1, #24]
    1ee4:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
    1ee8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1eec:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    1ef0:	f00b fcb5 	bl	d85e <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
    1ef4:	4603      	mov	r3, r0
    1ef6:	462a      	mov	r2, r5
    1ef8:	490c      	ldr	r1, [pc, #48]	; (1f2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e0>)
    1efa:	4630      	mov	r0, r6
    1efc:	9700      	str	r7, [sp, #0]
    1efe:	f005 fbdf 	bl	76c0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1f02:	ea38 0009 	bics.w	r0, r8, r9
    1f06:	d004      	beq.n	1f12 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c6>
    1f08:	2100      	movs	r1, #0
    1f0a:	4608      	mov	r0, r1
    1f0c:	f7ff fe76 	bl	1bfc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    1f10:	b128      	cbz	r0, 1f1e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d2>
    1f12:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1f16:	f000 b80b 	b.w	1f30 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e4>
    1f1a:	2003      	movs	r0, #3
    1f1c:	e7d7      	b.n	1ece <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x182>
    1f1e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1f22:	2000      	movs	r0, #0
    1f24:	f000 b8f6 	b.w	2114 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c8>
    1f28:	20000084 	.word	0x20000084
    1f2c:	20000ae8 	.word	0x20000ae8
    1f30:	b510      	push	{r4, lr}
    1f32:	f005 fd33 	bl	799c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1f36:	f005 fc57 	bl	77e8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1f3a:	4c0d      	ldr	r4, [pc, #52]	; (1f70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x224>)
    1f3c:	89e0      	ldrh	r0, [r4, #14]
    1f3e:	f7ff fe57 	bl	1bf0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    1f42:	480c      	ldr	r0, [pc, #48]	; (1f74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x228>)
    1f44:	7f00      	ldrb	r0, [r0, #28]
    1f46:	b158      	cbz	r0, 1f60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x214>
    1f48:	490a      	ldr	r1, [pc, #40]	; (1f74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x228>)
    1f4a:	220e      	movs	r2, #14
    1f4c:	f101 000e 	add.w	r0, r1, #14
    1f50:	f00e fcb5 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1f54:	4807      	ldr	r0, [pc, #28]	; (1f74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x228>)
    1f56:	2202      	movs	r2, #2
    1f58:	4907      	ldr	r1, [pc, #28]	; (1f78 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x22c>)
    1f5a:	301d      	adds	r0, #29
    1f5c:	f00c f8b0 	bl	e0c0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    1f60:	69e2      	ldr	r2, [r4, #28]
    1f62:	7921      	ldrb	r1, [r4, #4]
    1f64:	7860      	ldrb	r0, [r4, #1]
    1f66:	4790      	blx	r2
    1f68:	2000      	movs	r0, #0
    1f6a:	7020      	strb	r0, [r4, #0]
    1f6c:	bd10      	pop	{r4, pc}
    1f6e:	0000      	.short	0x0000
    1f70:	20000084 	.word	0x20000084
    1f74:	20000b32 	.word	0x20000b32
    1f78:	00001bb1 	.word	0x00001bb1
    1f7c:	4808      	ldr	r0, [pc, #32]	; (1fa0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x254>)
    1f7e:	b510      	push	{r4, lr}
    1f80:	7800      	ldrb	r0, [r0, #0]
    1f82:	2802      	cmp	r0, #2
    1f84:	d004      	beq.n	1f90 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x244>
    1f86:	f240 2149 	movw	r1, #585	; 0x249
    1f8a:	2027      	movs	r0, #39	; 0x27
    1f8c:	f7fe fd10 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1f90:	4904      	ldr	r1, [pc, #16]	; (1fa4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x258>)
    1f92:	2001      	movs	r0, #1
    1f94:	7308      	strb	r0, [r1, #12]
    1f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1f9a:	f7ff bfc9 	b.w	1f30 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e4>
    1f9e:	0000      	.short	0x0000
    1fa0:	20000084 	.word	0x20000084
    1fa4:	20000b32 	.word	0x20000b32
    1fa8:	b430      	push	{r4, r5}
    1faa:	4604      	mov	r4, r0
    1fac:	480c      	ldr	r0, [pc, #48]	; (1fe0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x294>)
    1fae:	7a00      	ldrb	r0, [r0, #8]
    1fb0:	b10b      	cbz	r3, 1fb6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26a>
    1fb2:	1d00      	adds	r0, r0, #4
    1fb4:	b2c0      	uxtb	r0, r0
    1fb6:	b93a      	cbnz	r2, 1fc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x27c>
    1fb8:	28ff      	cmp	r0, #255	; 0xff
    1fba:	d105      	bne.n	1fc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x27c>
    1fbc:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
    1fc0:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    1fc4:	429a      	cmp	r2, r3
    1fc6:	d009      	beq.n	1fdc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x290>
    1fc8:	b121      	cbz	r1, 1fd4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x288>
    1fca:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    1fce:	bc30      	pop	{r4, r5}
    1fd0:	f006 b820 	b.w	8014 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    1fd4:	20ff      	movs	r0, #255	; 0xff
    1fd6:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    1fda:	e7f8      	b.n	1fce <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x282>
    1fdc:	bc30      	pop	{r4, r5}
    1fde:	4770      	bx	lr
    1fe0:	20000084 	.word	0x20000084
    1fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1fe8:	4607      	mov	r7, r0
    1fea:	f7ff fdfb 	bl	1be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1fee:	4c21      	ldr	r4, [pc, #132]	; (2074 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x328>)
    1ff0:	4605      	mov	r5, r0
    1ff2:	2601      	movs	r6, #1
    1ff4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1ff6:	7808      	ldrb	r0, [r1, #0]
    1ff8:	f000 0003 	and.w	r0, r0, #3
    1ffc:	2801      	cmp	r0, #1
    1ffe:	d00c      	beq.n	201a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2ce>
    2000:	2802      	cmp	r0, #2
    2002:	d00a      	beq.n	201a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2ce>
    2004:	2803      	cmp	r0, #3
    2006:	d11b      	bne.n	2040 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f4>
    2008:	742e      	strb	r6, [r5, #16]
    200a:	89e0      	ldrh	r0, [r4, #14]
    200c:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    2010:	81e0      	strh	r0, [r4, #14]
    2012:	2001      	movs	r0, #1
    2014:	f7ff fdd8 	bl	1bc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    2018:	e012      	b.n	2040 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f4>
    201a:	7848      	ldrb	r0, [r1, #1]
    201c:	b180      	cbz	r0, 2040 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f4>
    201e:	89e1      	ldrh	r1, [r4, #14]
    2020:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    2024:	81e1      	strh	r1, [r4, #14]
    2026:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    2028:	2900      	cmp	r1, #0
    202a:	d018      	beq.n	205e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x312>
    202c:	28fb      	cmp	r0, #251	; 0xfb
    202e:	d818      	bhi.n	2062 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x316>
    2030:	7960      	ldrb	r0, [r4, #5]
    2032:	b120      	cbz	r0, 203e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f2>
    2034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2038:	2020      	movs	r0, #32
    203a:	f7ff bdd9 	b.w	1bf0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    203e:	703e      	strb	r6, [r7, #0]
    2040:	7e28      	ldrb	r0, [r5, #24]
    2042:	2801      	cmp	r0, #1
    2044:	d012      	beq.n	206c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x320>
    2046:	762e      	strb	r6, [r5, #24]
    2048:	6a60      	ldr	r0, [r4, #36]	; 0x24
    204a:	7840      	ldrb	r0, [r0, #1]
    204c:	2800      	cmp	r0, #0
    204e:	d006      	beq.n	205e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x312>
    2050:	e9f5 0120 	ldrd	r0, r1, [r5, #128]!	; 0x80
    2054:	1c40      	adds	r0, r0, #1
    2056:	f141 0100 	adc.w	r1, r1, #0
    205a:	e9c5 0100 	strd	r0, r1, [r5]
    205e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2062:	7920      	ldrb	r0, [r4, #4]
    2064:	f040 0010 	orr.w	r0, r0, #16
    2068:	7120      	strb	r0, [r4, #4]
    206a:	e7f8      	b.n	205e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x312>
    206c:	2000      	movs	r0, #0
    206e:	7628      	strb	r0, [r5, #24]
    2070:	e7ea      	b.n	2048 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2fc>
    2072:	0000      	.short	0x0000
    2074:	20000084 	.word	0x20000084
    2078:	b570      	push	{r4, r5, r6, lr}
    207a:	4605      	mov	r5, r0
    207c:	f7ff fdb2 	bl	1be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    2080:	4604      	mov	r4, r0
    2082:	7d80      	ldrb	r0, [r0, #22]
    2084:	2800      	cmp	r0, #0
    2086:	d02d      	beq.n	20e4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x398>
    2088:	2802      	cmp	r0, #2
    208a:	d10c      	bne.n	20a6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x35a>
    208c:	481b      	ldr	r0, [pc, #108]	; (20fc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3b0>)
    208e:	4629      	mov	r1, r5
    2090:	6b40      	ldr	r0, [r0, #52]	; 0x34
    2092:	f00a ff73 	bl	cf7c <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    2096:	b330      	cbz	r0, 20e6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x39a>
    2098:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    209c:	1c40      	adds	r0, r0, #1
    209e:	f141 0100 	adc.w	r1, r1, #0
    20a2:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    20a6:	2500      	movs	r5, #0
    20a8:	75a5      	strb	r5, [r4, #22]
    20aa:	7ca0      	ldrb	r0, [r4, #18]
    20ac:	b120      	cbz	r0, 20b8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36c>
    20ae:	74a5      	strb	r5, [r4, #18]
    20b0:	2100      	movs	r1, #0
    20b2:	2010      	movs	r0, #16
    20b4:	f7ff fd88 	bl	1bc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    20b8:	7c60      	ldrb	r0, [r4, #17]
    20ba:	b170      	cbz	r0, 20da <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38e>
    20bc:	7465      	strb	r5, [r4, #17]
    20be:	f7ff fb65 	bl	178c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    20c2:	b198      	cbz	r0, 20ec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3a0>
    20c4:	2100      	movs	r1, #0
    20c6:	2008      	movs	r0, #8
    20c8:	f7ff fd7e 	bl	1bc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    20cc:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    20d0:	1c40      	adds	r0, r0, #1
    20d2:	f141 0100 	adc.w	r1, r1, #0
    20d6:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    20da:	7de0      	ldrb	r0, [r4, #23]
    20dc:	2801      	cmp	r0, #1
    20de:	d00a      	beq.n	20f6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3aa>
    20e0:	2001      	movs	r0, #1
    20e2:	75e0      	strb	r0, [r4, #23]
    20e4:	bd70      	pop	{r4, r5, r6, pc}
    20e6:	f240 31da 	movw	r1, #986	; 0x3da
    20ea:	e001      	b.n	20f0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3a4>
    20ec:	f240 31f1 	movw	r1, #1009	; 0x3f1
    20f0:	2027      	movs	r0, #39	; 0x27
    20f2:	f7fe fc5d 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    20f6:	75e5      	strb	r5, [r4, #23]
    20f8:	bd70      	pop	{r4, r5, r6, pc}
    20fa:	0000      	.short	0x0000
    20fc:	20000084 	.word	0x20000084
    2100:	4803      	ldr	r0, [pc, #12]	; (2110 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c4>)
    2102:	7800      	ldrb	r0, [r0, #0]
    2104:	2800      	cmp	r0, #0
    2106:	d001      	beq.n	210c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c0>
    2108:	f7ff bf12 	b.w	1f30 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e4>
    210c:	4770      	bx	lr
    210e:	0000      	.short	0x0000
    2110:	20000084 	.word	0x20000084
    2114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2118:	4606      	mov	r6, r0
    211a:	f7ff fd5d 	bl	1bd8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    211e:	4680      	mov	r8, r0
    2120:	f7ff fd60 	bl	1be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    2124:	4c18      	ldr	r4, [pc, #96]	; (2188 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x43c>)
    2126:	4605      	mov	r5, r0
    2128:	4632      	mov	r2, r6
    212a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    212c:	6260      	str	r0, [r4, #36]	; 0x24
    212e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    2132:	2101      	movs	r1, #1
    2134:	4640      	mov	r0, r8
    2136:	f7ff ff37 	bl	1fa8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x25c>
    213a:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
    213e:	2700      	movs	r7, #0
    2140:	b170      	cbz	r0, 2160 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x414>
    2142:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2144:	f005 fe9c 	bl	7e80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2148:	4810      	ldr	r0, [pc, #64]	; (218c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x440>)
    214a:	2101      	movs	r1, #1
    214c:	7601      	strb	r1, [r0, #24]
    214e:	e9d5 1220 	ldrd	r1, r2, [r5, #128]	; 0x80
    2152:	e9c0 1204 	strd	r1, r2, [r0, #16]
    2156:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2158:	6a60      	ldr	r0, [r4, #36]	; 0x24
    215a:	f005 fb03 	bl	7764 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    215e:	e004      	b.n	216a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x41e>
    2160:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2162:	f005 fe8d 	bl	7e80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2166:	f005 fb3f 	bl	77e8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    216a:	b916      	cbnz	r6, 2172 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x426>
    216c:	4638      	mov	r0, r7
    216e:	f005 fd37 	bl	7be0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    2172:	2100      	movs	r1, #0
    2174:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    2178:	4608      	mov	r0, r1
    217a:	f005 ff09 	bl	7f90 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    217e:	2002      	movs	r0, #2
    2180:	7020      	strb	r0, [r4, #0]
    2182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2186:	0000      	.short	0x0000
    2188:	20000084 	.word	0x20000084
    218c:	20000ae8 	.word	0x20000ae8
    2190:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    2194:	4604      	mov	r4, r0
    2196:	f7ff fd25 	bl	1be4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    219a:	4605      	mov	r5, r0
    219c:	f7ff fd1c 	bl	1bd8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    21a0:	2700      	movs	r7, #0
    21a2:	f88d 7000 	strb.w	r7, [sp]
    21a6:	4606      	mov	r6, r0
    21a8:	f8df 9164 	ldr.w	r9, [pc, #356]	; 2310 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5c4>
    21ac:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    21b0:	4622      	mov	r2, r4
    21b2:	4639      	mov	r1, r7
    21b4:	f7ff fef8 	bl	1fa8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x25c>
    21b8:	7da8      	ldrb	r0, [r5, #22]
    21ba:	f04f 0801 	mov.w	r8, #1
    21be:	f1a9 0420 	sub.w	r4, r9, #32
    21c2:	b140      	cbz	r0, 21d6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48a>
    21c4:	2801      	cmp	r0, #1
    21c6:	d020      	beq.n	220a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4be>
    21c8:	2802      	cmp	r0, #2
    21ca:	d02f      	beq.n	222c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4e0>
    21cc:	2803      	cmp	r0, #3
    21ce:	d03b      	beq.n	2248 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4fc>
    21d0:	f240 21fb 	movw	r1, #763	; 0x2fb
    21d4:	e057      	b.n	2286 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x53a>
    21d6:	79a0      	ldrb	r0, [r4, #6]
    21d8:	2150      	movs	r1, #80	; 0x50
    21da:	f8ad 0004 	strh.w	r0, [sp, #4]
    21de:	5388      	strh	r0, [r1, r6]
    21e0:	4648      	mov	r0, r9
    21e2:	f7ff fafd 	bl	17e0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    21e6:	b130      	cbz	r0, 21f6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4aa>
    21e8:	2080      	movs	r0, #128	; 0x80
    21ea:	6a21      	ldr	r1, [r4, #32]
    21ec:	f7ff fcec 	bl	1bc8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    21f0:	f885 8011 	strb.w	r8, [r5, #17]
    21f4:	e02c      	b.n	2250 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x504>
    21f6:	466a      	mov	r2, sp
    21f8:	a901      	add	r1, sp, #4
    21fa:	6b60      	ldr	r0, [r4, #52]	; 0x34
    21fc:	f00b fb47 	bl	d88e <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x48>
    2200:	6220      	str	r0, [r4, #32]
    2202:	b110      	cbz	r0, 220a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4be>
    2204:	f895 105b 	ldrb.w	r1, [r5, #91]	; 0x5b
    2208:	b111      	cbz	r1, 2210 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4c4>
    220a:	4842      	ldr	r0, [pc, #264]	; (2314 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5c8>)
    220c:	6220      	str	r0, [r4, #32]
    220e:	e01f      	b.n	2250 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x504>
    2210:	f89d 1000 	ldrb.w	r1, [sp]
    2214:	b921      	cbnz	r1, 2220 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4d4>
    2216:	8007      	strh	r7, [r0, #0]
    2218:	7087      	strb	r7, [r0, #2]
    221a:	2101      	movs	r1, #1
    221c:	f00b feb5 	bl	df8a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    2220:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2224:	6a20      	ldr	r0, [r4, #32]
    2226:	f00b fe38 	bl	de9a <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
    222a:	e011      	b.n	2250 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x504>
    222c:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    2230:	f8ad 0004 	strh.w	r0, [sp, #4]
    2234:	466a      	mov	r2, sp
    2236:	a901      	add	r1, sp, #4
    2238:	6b60      	ldr	r0, [r4, #52]	; 0x34
    223a:	f00b fb28 	bl	d88e <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x48>
    223e:	6220      	str	r0, [r4, #32]
    2240:	b930      	cbnz	r0, 2250 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x504>
    2242:	f240 21e5 	movw	r1, #741	; 0x2e5
    2246:	e01e      	b.n	2286 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x53a>
    2248:	4648      	mov	r0, r9
    224a:	f7ff fac9 	bl	17e0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    224e:	b1c0      	cbz	r0, 2282 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x536>
    2250:	6a20      	ldr	r0, [r4, #32]
    2252:	2308      	movs	r3, #8
    2254:	7801      	ldrb	r1, [r0, #0]
    2256:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    225a:	7001      	strb	r1, [r0, #0]
    225c:	7dea      	ldrb	r2, [r5, #23]
    225e:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    2262:	4311      	orrs	r1, r2
    2264:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    2268:	7001      	strb	r1, [r0, #0]
    226a:	7e2a      	ldrb	r2, [r5, #24]
    226c:	2304      	movs	r3, #4
    226e:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    2272:	4311      	orrs	r1, r2
    2274:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    2278:	7001      	strb	r1, [r0, #0]
    227a:	43c9      	mvns	r1, r1
    227c:	0789      	lsls	r1, r1, #30
    227e:	d005      	beq.n	228c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x540>
    2280:	e007      	b.n	2292 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x546>
    2282:	f240 21ee 	movw	r1, #750	; 0x2ee
    2286:	2027      	movs	r0, #39	; 0x27
    2288:	f7fe fb92 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    228c:	78c0      	ldrb	r0, [r0, #3]
    228e:	2802      	cmp	r0, #2
    2290:	d00f      	beq.n	22b2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x566>
    2292:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2294:	f00a ff70 	bl	d178 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    2298:	b108      	cbz	r0, 229e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x552>
    229a:	2101      	movs	r1, #1
    229c:	e00a      	b.n	22b4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x568>
    229e:	6a20      	ldr	r0, [r4, #32]
    22a0:	7800      	ldrb	r0, [r0, #0]
    22a2:	43c0      	mvns	r0, r0
    22a4:	0780      	lsls	r0, r0, #30
    22a6:	d004      	beq.n	22b2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x566>
    22a8:	f7ff fa58 	bl	175c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    22ac:	f080 0101 	eor.w	r1, r0, #1
    22b0:	e000      	b.n	22b4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x568>
    22b2:	2100      	movs	r1, #0
    22b4:	6a20      	ldr	r0, [r4, #32]
    22b6:	7802      	ldrb	r2, [r0, #0]
    22b8:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    22bc:	7001      	strb	r1, [r0, #0]
    22be:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    22c2:	b181      	cbz	r1, 22e6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x59a>
    22c4:	7841      	ldrb	r1, [r0, #1]
    22c6:	b171      	cbz	r1, 22e6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x59a>
    22c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    22ca:	f005 fdd9 	bl	7e80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    22ce:	4811      	ldr	r0, [pc, #68]	; (2314 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5c8>)
    22d0:	3828      	subs	r0, #40	; 0x28
    22d2:	7607      	strb	r7, [r0, #24]
    22d4:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    22d8:	e9c0 1204 	strd	r1, r2, [r0, #16]
    22dc:	6a21      	ldr	r1, [r4, #32]
    22de:	6b20      	ldr	r0, [r4, #48]	; 0x30
    22e0:	f005 fa40 	bl	7764 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    22e4:	e003      	b.n	22ee <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5a2>
    22e6:	f005 fdcb 	bl	7e80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    22ea:	f005 fa7d 	bl	77e8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    22ee:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    22f2:	2101      	movs	r1, #1
    22f4:	2000      	movs	r0, #0
    22f6:	f005 fe4b 	bl	7f90 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    22fa:	f884 8003 	strb.w	r8, [r4, #3]
    22fe:	6a21      	ldr	r1, [r4, #32]
    2300:	880a      	ldrh	r2, [r1, #0]
    2302:	8222      	strh	r2, [r4, #16]
    2304:	7889      	ldrb	r1, [r1, #2]
    2306:	74a1      	strb	r1, [r4, #18]
    2308:	f884 8000 	strb.w	r8, [r4]
    230c:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    2310:	200000a4 	.word	0x200000a4
    2314:	20000b10 	.word	0x20000b10
    2318:	00001f7d 	.word	0x00001f7d
    231c:	00001cc5 	.word	0x00001cc5
    2320:	00001e75 	.word	0x00001e75
    2324:	00002101 	.word	0x00002101

00002328 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    2328:	4800      	ldr	r0, [pc, #0]	; (232c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    232a:	4770      	bx	lr
    232c:	20001420 	.word	0x20001420

00002330 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    2330:	4904      	ldr	r1, [pc, #16]	; (2344 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    2332:	784a      	ldrb	r2, [r1, #1]
    2334:	4282      	cmp	r2, r0
    2336:	d903      	bls.n	2340 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    2338:	4408      	add	r0, r1
    233a:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    233e:	4770      	bx	lr
    2340:	2000      	movs	r0, #0
    2342:	4770      	bx	lr
    2344:	20001296 	.word	0x20001296

00002348 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    2348:	4904      	ldr	r1, [pc, #16]	; (235c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    234a:	784a      	ldrb	r2, [r1, #1]
    234c:	4282      	cmp	r2, r0
    234e:	d903      	bls.n	2358 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    2350:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2354:	3082      	adds	r0, #130	; 0x82
    2356:	4770      	bx	lr
    2358:	2000      	movs	r0, #0
    235a:	4770      	bx	lr
    235c:	20001296 	.word	0x20001296

00002360 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    2360:	4a05      	ldr	r2, [pc, #20]	; (2378 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    2362:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2366:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    236a:	6802      	ldr	r2, [r0, #0]
    236c:	f8c1 210a 	str.w	r2, [r1, #266]	; 0x10a
    2370:	8880      	ldrh	r0, [r0, #4]
    2372:	f8a1 010e 	strh.w	r0, [r1, #270]	; 0x10e
    2376:	4770      	bx	lr
    2378:	20001296 	.word	0x20001296

0000237c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    237c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2380:	460e      	mov	r6, r1
    2382:	4607      	mov	r7, r0
    2384:	4615      	mov	r5, r2
    2386:	2106      	movs	r1, #6
    2388:	4630      	mov	r0, r6
    238a:	f00b fc49 	bl	dc20 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    238e:	4c0d      	ldr	r4, [pc, #52]	; (23c4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    2390:	b160      	cbz	r0, 23ac <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    2392:	2000      	movs	r0, #0
    2394:	e004      	b.n	23a0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    2396:	1821      	adds	r1, r4, r0
    2398:	1c40      	adds	r0, r0, #1
    239a:	f881 513a 	strb.w	r5, [r1, #314]	; 0x13a
    239e:	b2c0      	uxtb	r0, r0
    23a0:	7861      	ldrb	r1, [r4, #1]
    23a2:	4281      	cmp	r1, r0
    23a4:	d8f7      	bhi.n	2396 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    23a6:	2001      	movs	r0, #1
    23a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    23ac:	4631      	mov	r1, r6
    23ae:	4638      	mov	r0, r7
    23b0:	f00b fa7c 	bl	d8ac <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    23b4:	2808      	cmp	r0, #8
    23b6:	d003      	beq.n	23c0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    23b8:	4420      	add	r0, r4
    23ba:	f880 513a 	strb.w	r5, [r0, #314]	; 0x13a
    23be:	e7f2      	b.n	23a6 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    23c0:	2000      	movs	r0, #0
    23c2:	e7f1      	b.n	23a8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    23c4:	20001296 	.word	0x20001296

000023c8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    23c8:	4904      	ldr	r1, [pc, #16]	; (23dc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    23ca:	784a      	ldrb	r2, [r1, #1]
    23cc:	4282      	cmp	r2, r0
    23ce:	d903      	bls.n	23d8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    23d0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    23d4:	1c80      	adds	r0, r0, #2
    23d6:	4770      	bx	lr
    23d8:	2000      	movs	r0, #0
    23da:	4770      	bx	lr
    23dc:	20001296 	.word	0x20001296

000023e0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    23e0:	b510      	push	{r4, lr}
    23e2:	f44f 72c5 	mov.w	r2, #394	; 0x18a
    23e6:	2100      	movs	r1, #0
    23e8:	4805      	ldr	r0, [pc, #20]	; (2400 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x20>)
    23ea:	f00e fae2 	bl	109b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    23ee:	4805      	ldr	r0, [pc, #20]	; (2404 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x24>)
    23f0:	2100      	movs	r1, #0
    23f2:	7001      	strb	r1, [r0, #0]
    23f4:	7041      	strb	r1, [r0, #1]
    23f6:	f44f 7161 	mov.w	r1, #900	; 0x384
    23fa:	8041      	strh	r1, [r0, #2]
    23fc:	bd10      	pop	{r4, pc}
    23fe:	0000      	.short	0x0000
    2400:	20001296 	.word	0x20001296
    2404:	20000358 	.word	0x20000358

00002408 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    2408:	4901      	ldr	r1, [pc, #4]	; (2410 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    240a:	7008      	strb	r0, [r1, #0]
    240c:	4770      	bx	lr
    240e:	0000      	.short	0x0000
    2410:	20000358 	.word	0x20000358

00002414 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    2414:	4801      	ldr	r0, [pc, #4]	; (241c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    2416:	7800      	ldrb	r0, [r0, #0]
    2418:	4770      	bx	lr
    241a:	0000      	.short	0x0000
    241c:	20000358 	.word	0x20000358

00002420 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    2420:	4b0b      	ldr	r3, [pc, #44]	; (2450 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    2422:	b510      	push	{r4, lr}
    2424:	785c      	ldrb	r4, [r3, #1]
    2426:	4284      	cmp	r4, r0
    2428:	d910      	bls.n	244c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2c>
    242a:	4418      	add	r0, r3
    242c:	f890 0102 	ldrb.w	r0, [r0, #258]	; 0x102
    2430:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2434:	4418      	add	r0, r3
    2436:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
    243a:	700b      	strb	r3, [r1, #0]
    243c:	f8d0 1153 	ldr.w	r1, [r0, #339]	; 0x153
    2440:	6011      	str	r1, [r2, #0]
    2442:	f8b0 0157 	ldrh.w	r0, [r0, #343]	; 0x157
    2446:	8090      	strh	r0, [r2, #4]
    2448:	2001      	movs	r0, #1
    244a:	bd10      	pop	{r4, pc}
    244c:	2000      	movs	r0, #0
    244e:	bd10      	pop	{r4, pc}
    2450:	20001296 	.word	0x20001296

00002454 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    2454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2458:	4698      	mov	r8, r3
    245a:	4691      	mov	r9, r2
    245c:	460f      	mov	r7, r1
    245e:	4606      	mov	r6, r0
    2460:	f000 f8b0 	bl	25c4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    2464:	4604      	mov	r4, r0
    2466:	2808      	cmp	r0, #8
    2468:	d006      	beq.n	2478 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    246a:	f000 f897 	bl	259c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    246e:	2808      	cmp	r0, #8
    2470:	d002      	beq.n	2478 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    2472:	2012      	movs	r0, #18
    2474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2478:	4d1f      	ldr	r5, [pc, #124]	; (24f8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0xa4>)
    247a:	7868      	ldrb	r0, [r5, #1]
    247c:	2808      	cmp	r0, #8
    247e:	d238      	bcs.n	24f2 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x9e>
    2480:	2c08      	cmp	r4, #8
    2482:	d113      	bne.n	24ac <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x58>
    2484:	782c      	ldrb	r4, [r5, #0]
    2486:	1c60      	adds	r0, r4, #1
    2488:	7028      	strb	r0, [r5, #0]
    248a:	2c08      	cmp	r4, #8
    248c:	d303      	bcc.n	2496 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x42>
    248e:	2144      	movs	r1, #68	; 0x44
    2490:	2028      	movs	r0, #40	; 0x28
    2492:	f7fe fa8d 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2496:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    249a:	4428      	add	r0, r5
    249c:	6839      	ldr	r1, [r7, #0]
    249e:	f8c0 1153 	str.w	r1, [r0, #339]	; 0x153
    24a2:	88b9      	ldrh	r1, [r7, #4]
    24a4:	f8a0 1157 	strh.w	r1, [r0, #343]	; 0x157
    24a8:	f880 6152 	strb.w	r6, [r0, #338]	; 0x152
    24ac:	786e      	ldrb	r6, [r5, #1]
    24ae:	2210      	movs	r2, #16
    24b0:	1c70      	adds	r0, r6, #1
    24b2:	7068      	strb	r0, [r5, #1]
    24b4:	eb05 1706 	add.w	r7, r5, r6, lsl #4
    24b8:	1cb8      	adds	r0, r7, #2
    24ba:	4649      	mov	r1, r9
    24bc:	f00b fb42 	bl	db44 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    24c0:	f107 0082 	add.w	r0, r7, #130	; 0x82
    24c4:	2210      	movs	r2, #16
    24c6:	4641      	mov	r1, r8
    24c8:	f00b fb3c 	bl	db44 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    24cc:	2110      	movs	r1, #16
    24ce:	4640      	mov	r0, r8
    24d0:	f00b fba6 	bl	dc20 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    24d4:	4435      	add	r5, r6
    24d6:	2110      	movs	r1, #16
    24d8:	f885 0142 	strb.w	r0, [r5, #322]	; 0x142
    24dc:	4648      	mov	r0, r9
    24de:	f205 152b 	addw	r5, r5, #299	; 0x12b
    24e2:	f00b fb9d 	bl	dc20 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    24e6:	77e8      	strb	r0, [r5, #31]
    24e8:	f805 4c29 	strb.w	r4, [r5, #-41]
    24ec:	2000      	movs	r0, #0
    24ee:	73e8      	strb	r0, [r5, #15]
    24f0:	e7c0      	b.n	2474 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    24f2:	2007      	movs	r0, #7
    24f4:	e7be      	b.n	2474 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    24f6:	0000      	.short	0x0000
    24f8:	20001296 	.word	0x20001296

000024fc <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    24fc:	4806      	ldr	r0, [pc, #24]	; (2518 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    24fe:	b510      	push	{r4, lr}
    2500:	7840      	ldrb	r0, [r0, #1]
    2502:	1e40      	subs	r0, r0, #1
    2504:	b244      	sxtb	r4, r0
    2506:	e004      	b.n	2512 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    2508:	b2e0      	uxtb	r0, r4
    250a:	f000 f8bd 	bl	2688 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x128>
    250e:	1e64      	subs	r4, r4, #1
    2510:	b264      	sxtb	r4, r4
    2512:	2c00      	cmp	r4, #0
    2514:	daf8      	bge.n	2508 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    2516:	bd10      	pop	{r4, pc}
    2518:	20001296 	.word	0x20001296

0000251c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    251c:	4801      	ldr	r0, [pc, #4]	; (2524 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    251e:	8840      	ldrh	r0, [r0, #2]
    2520:	4770      	bx	lr
    2522:	0000      	.short	0x0000
    2524:	20000358 	.word	0x20000358

00002528 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    2528:	b138      	cbz	r0, 253a <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    252a:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    252e:	4288      	cmp	r0, r1
    2530:	d803      	bhi.n	253a <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    2532:	4903      	ldr	r1, [pc, #12]	; (2540 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    2534:	8048      	strh	r0, [r1, #2]
    2536:	2001      	movs	r0, #1
    2538:	4770      	bx	lr
    253a:	2000      	movs	r0, #0
    253c:	4770      	bx	lr
    253e:	0000      	.short	0x0000
    2540:	20000358 	.word	0x20000358

00002544 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    2544:	4905      	ldr	r1, [pc, #20]	; (255c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    2546:	784a      	ldrb	r2, [r1, #1]
    2548:	4282      	cmp	r2, r0
    254a:	d903      	bls.n	2554 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    254c:	4408      	add	r0, r1
    254e:	f890 013a 	ldrb.w	r0, [r0, #314]	; 0x13a
    2552:	b108      	cbz	r0, 2558 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    2554:	2000      	movs	r0, #0
    2556:	4770      	bx	lr
    2558:	2001      	movs	r0, #1
    255a:	4770      	bx	lr
    255c:	20001296 	.word	0x20001296

00002560 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
    2560:	4901      	ldr	r1, [pc, #4]	; (2568 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
    2562:	7048      	strb	r0, [r1, #1]
    2564:	4770      	bx	lr
    2566:	0000      	.short	0x0000
    2568:	20000358 	.word	0x20000358
    256c:	4602      	mov	r2, r0
    256e:	4809      	ldr	r0, [pc, #36]	; (2594 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x34>)
    2570:	b510      	push	{r4, lr}
    2572:	7800      	ldrb	r0, [r0, #0]
    2574:	460b      	mov	r3, r1
    2576:	b158      	cbz	r0, 2590 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    2578:	4807      	ldr	r0, [pc, #28]	; (2598 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    257a:	7841      	ldrb	r1, [r0, #1]
    257c:	b141      	cbz	r1, 2590 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    257e:	b10b      	cbz	r3, 2584 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x24>
    2580:	1c80      	adds	r0, r0, #2
    2582:	e001      	b.n	2588 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x28>
    2584:	4804      	ldr	r0, [pc, #16]	; (2598 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    2586:	3082      	adds	r0, #130	; 0x82
    2588:	f004 fff4 	bl	7574 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    258c:	2001      	movs	r0, #1
    258e:	bd10      	pop	{r4, pc}
    2590:	2000      	movs	r0, #0
    2592:	bd10      	pop	{r4, pc}
    2594:	20000358 	.word	0x20000358
    2598:	20001296 	.word	0x20001296
    259c:	4908      	ldr	r1, [pc, #32]	; (25c0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x60>)
    259e:	b510      	push	{r4, lr}
    25a0:	4603      	mov	r3, r0
    25a2:	2000      	movs	r0, #0
    25a4:	784a      	ldrb	r2, [r1, #1]
    25a6:	e006      	b.n	25b6 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x56>
    25a8:	180c      	adds	r4, r1, r0
    25aa:	f894 4102 	ldrb.w	r4, [r4, #258]	; 0x102
    25ae:	429c      	cmp	r4, r3
    25b0:	d004      	beq.n	25bc <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x5c>
    25b2:	1c40      	adds	r0, r0, #1
    25b4:	b2c0      	uxtb	r0, r0
    25b6:	4282      	cmp	r2, r0
    25b8:	d8f6      	bhi.n	25a8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x48>
    25ba:	2008      	movs	r0, #8
    25bc:	bd10      	pop	{r4, pc}
    25be:	0000      	.short	0x0000
    25c0:	20001296 	.word	0x20001296
    25c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    25c6:	4c1a      	ldr	r4, [pc, #104]	; (2630 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xd0>)
    25c8:	4603      	mov	r3, r0
    25ca:	2000      	movs	r0, #0
    25cc:	7825      	ldrb	r5, [r4, #0]
    25ce:	e02b      	b.n	2628 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc8>
    25d0:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    25d4:	4422      	add	r2, r4
    25d6:	780f      	ldrb	r7, [r1, #0]
    25d8:	f892 c153 	ldrb.w	ip, [r2, #339]	; 0x153
    25dc:	f892 6152 	ldrb.w	r6, [r2, #338]	; 0x152
    25e0:	ea87 070c 	eor.w	r7, r7, ip
    25e4:	405e      	eors	r6, r3
    25e6:	443e      	add	r6, r7
    25e8:	784f      	ldrb	r7, [r1, #1]
    25ea:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    25ee:	ea87 070c 	eor.w	r7, r7, ip
    25f2:	443e      	add	r6, r7
    25f4:	788f      	ldrb	r7, [r1, #2]
    25f6:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    25fa:	ea87 070c 	eor.w	r7, r7, ip
    25fe:	443e      	add	r6, r7
    2600:	78cf      	ldrb	r7, [r1, #3]
    2602:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    2606:	ea87 070c 	eor.w	r7, r7, ip
    260a:	443e      	add	r6, r7
    260c:	790f      	ldrb	r7, [r1, #4]
    260e:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    2612:	f892 2158 	ldrb.w	r2, [r2, #344]	; 0x158
    2616:	ea87 070c 	eor.w	r7, r7, ip
    261a:	443e      	add	r6, r7
    261c:	794f      	ldrb	r7, [r1, #5]
    261e:	4057      	eors	r7, r2
    2620:	42f7      	cmn	r7, r6
    2622:	d004      	beq.n	262e <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xce>
    2624:	1c40      	adds	r0, r0, #1
    2626:	b2c0      	uxtb	r0, r0
    2628:	4285      	cmp	r5, r0
    262a:	d8d1      	bhi.n	25d0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x70>
    262c:	2008      	movs	r0, #8
    262e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2630:	20001296 	.word	0x20001296
    2634:	b570      	push	{r4, r5, r6, lr}
    2636:	4605      	mov	r5, r0
    2638:	f7ff ffb0 	bl	259c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    263c:	2808      	cmp	r0, #8
    263e:	d120      	bne.n	2682 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x122>
    2640:	4c10      	ldr	r4, [pc, #64]	; (2684 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x124>)
    2642:	7820      	ldrb	r0, [r4, #0]
    2644:	1e40      	subs	r0, r0, #1
    2646:	b2c0      	uxtb	r0, r0
    2648:	7020      	strb	r0, [r4, #0]
    264a:	42a8      	cmp	r0, r5
    264c:	d019      	beq.n	2682 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x122>
    264e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2652:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
    2656:	4420      	add	r0, r4
    2658:	4421      	add	r1, r4
    265a:	f500 72ab 	add.w	r2, r0, #342	; 0x156
    265e:	f8d0 0152 	ldr.w	r0, [r0, #338]	; 0x152
    2662:	f8c1 0152 	str.w	r0, [r1, #338]	; 0x152
    2666:	8810      	ldrh	r0, [r2, #0]
    2668:	f8a1 0156 	strh.w	r0, [r1, #342]	; 0x156
    266c:	7890      	ldrb	r0, [r2, #2]
    266e:	f881 0158 	strb.w	r0, [r1, #344]	; 0x158
    2672:	7820      	ldrb	r0, [r4, #0]
    2674:	f7ff ff92 	bl	259c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    2678:	2808      	cmp	r0, #8
    267a:	d002      	beq.n	2682 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x122>
    267c:	4420      	add	r0, r4
    267e:	f880 5102 	strb.w	r5, [r0, #258]	; 0x102
    2682:	bd70      	pop	{r4, r5, r6, pc}
    2684:	20001296 	.word	0x20001296
    2688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    268c:	4c1d      	ldr	r4, [pc, #116]	; (2704 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x1a4>)
    268e:	4606      	mov	r6, r0
    2690:	19a7      	adds	r7, r4, r6
    2692:	7860      	ldrb	r0, [r4, #1]
    2694:	1e40      	subs	r0, r0, #1
    2696:	b2c5      	uxtb	r5, r0
    2698:	7065      	strb	r5, [r4, #1]
    269a:	f897 a102 	ldrb.w	sl, [r7, #258]	; 0x102
    269e:	42ae      	cmp	r6, r5
    26a0:	d02a      	beq.n	26f8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x198>
    26a2:	eb04 1905 	add.w	r9, r4, r5, lsl #4
    26a6:	eb04 1806 	add.w	r8, r4, r6, lsl #4
    26aa:	f109 0102 	add.w	r1, r9, #2
    26ae:	f108 0002 	add.w	r0, r8, #2
    26b2:	2210      	movs	r2, #16
    26b4:	f00e f903 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    26b8:	f109 0182 	add.w	r1, r9, #130	; 0x82
    26bc:	f108 0082 	add.w	r0, r8, #130	; 0x82
    26c0:	2210      	movs	r2, #16
    26c2:	f00e f8fc 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    26c6:	1960      	adds	r0, r4, r5
    26c8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    26cc:	f890 1102 	ldrb.w	r1, [r0, #258]	; 0x102
    26d0:	f887 1102 	strb.w	r1, [r7, #258]	; 0x102
    26d4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    26d8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    26dc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    26e0:	f8d2 310a 	ldr.w	r3, [r2, #266]	; 0x10a
    26e4:	f8c1 310a 	str.w	r3, [r1, #266]	; 0x10a
    26e8:	f8b2 210e 	ldrh.w	r2, [r2, #270]	; 0x10e
    26ec:	f8a1 210e 	strh.w	r2, [r1, #270]	; 0x10e
    26f0:	f890 013a 	ldrb.w	r0, [r0, #314]	; 0x13a
    26f4:	f887 013a 	strb.w	r0, [r7, #314]	; 0x13a
    26f8:	4650      	mov	r0, sl
    26fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    26fe:	f7ff bf99 	b.w	2634 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xd4>
    2702:	0000      	.short	0x0000
    2704:	20001296 	.word	0x20001296

00002708 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    2708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    270c:	4604      	mov	r4, r0
    270e:	f100 0580 	add.w	r5, r0, #128	; 0x80
    2712:	f04f 0901 	mov.w	r9, #1
    2716:	b171      	cbz	r1, 2736 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    2718:	f104 07a6 	add.w	r7, r4, #166	; 0xa6
    271c:	1e7e      	subs	r6, r7, #1
    271e:	2901      	cmp	r1, #1
    2720:	d029      	beq.n	2776 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6e>
    2722:	2902      	cmp	r1, #2
    2724:	d04e      	beq.n	27c4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xbc>
    2726:	2903      	cmp	r1, #3
    2728:	d123      	bne.n	2772 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    272a:	4639      	mov	r1, r7
    272c:	4630      	mov	r0, r6
    272e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2732:	f00b bad7 	b.w	dce4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    2736:	f44f 723e 	mov.w	r2, #760	; 0x2f8
    273a:	2100      	movs	r1, #0
    273c:	f00e f939 	bl	109b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2740:	f885 9025 	strb.w	r9, [r5, #37]	; 0x25
    2744:	4924      	ldr	r1, [pc, #144]	; (27d8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd0>)
    2746:	66e9      	str	r1, [r5, #108]	; 0x6c
    2748:	4620      	mov	r0, r4
    274a:	2107      	movs	r1, #7
    274c:	6729      	str	r1, [r5, #112]	; 0x70
    274e:	f810 1fec 	ldrb.w	r1, [r0, #236]!
    2752:	f021 0104 	bic.w	r1, r1, #4
    2756:	7001      	strb	r1, [r0, #0]
    2758:	20fe      	movs	r0, #254	; 0xfe
    275a:	f885 00a6 	strb.w	r0, [r5, #166]	; 0xa6
    275e:	207f      	movs	r0, #127	; 0x7f
    2760:	7668      	strb	r0, [r5, #25]
    2762:	481e      	ldr	r0, [pc, #120]	; (27dc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd4>)
    2764:	60a8      	str	r0, [r5, #8]
    2766:	2000      	movs	r0, #0
    2768:	e9c5 0000 	strd	r0, r0, [r5]
    276c:	2020      	movs	r0, #32
    276e:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    2772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2776:	f04f 0800 	mov.w	r8, #0
    277a:	f8a4 8236 	strh.w	r8, [r4, #566]	; 0x236
    277e:	f884 822b 	strb.w	r8, [r4, #555]	; 0x22b
    2782:	6921      	ldr	r1, [r4, #16]
    2784:	4816      	ldr	r0, [pc, #88]	; (27e0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd8>)
    2786:	460a      	mov	r2, r1
    2788:	4408      	add	r0, r1
    278a:	fbb0 f0f1 	udiv	r0, r0, r1
    278e:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    2792:	f640 30b8 	movw	r0, #3000	; 0xbb8
    2796:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    279a:	8b63      	ldrh	r3, [r4, #26]
    279c:	4628      	mov	r0, r5
    279e:	f000 f821 	bl	27e4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xdc>
    27a2:	4639      	mov	r1, r7
    27a4:	4630      	mov	r0, r6
    27a6:	f00b fa9d 	bl	dce4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    27aa:	f00e f80a 	bl	107c2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    27ae:	b118      	cbz	r0, 27b8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb0>
    27b0:	6960      	ldr	r0, [r4, #20]
    27b2:	f000 fbbd 	bl	2f30 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    27b6:	b110      	cbz	r0, 27be <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb6>
    27b8:	f884 821a 	strb.w	r8, [r4, #538]	; 0x21a
    27bc:	e7d9      	b.n	2772 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    27be:	f884 921a 	strb.w	r9, [r4, #538]	; 0x21a
    27c2:	e7d6      	b.n	2772 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    27c4:	6901      	ldr	r1, [r0, #16]
    27c6:	f8b4 32da 	ldrh.w	r3, [r4, #730]	; 0x2da
    27ca:	f8d4 22d4 	ldr.w	r2, [r4, #724]	; 0x2d4
    27ce:	4628      	mov	r0, r5
    27d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    27d4:	f000 b806 	b.w	27e4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xdc>
    27d8:	c404492f 	.word	0xc404492f
    27dc:	fffce000 	.word	0xfffce000
    27e0:	01c9c37f 	.word	0x01c9c37f
    27e4:	b510      	push	{r4, lr}
    27e6:	2400      	movs	r4, #0
    27e8:	f8a0 404c 	strh.w	r4, [r0, #76]	; 0x4c
    27ec:	f830 4f50 	ldrh.w	r4, [r0, #80]!
    27f0:	434c      	muls	r4, r1
    27f2:	fbb4 f4f2 	udiv	r4, r4, r2
    27f6:	f820 4910 	strh.w	r4, [r0], #-16
    27fa:	f240 2471 	movw	r4, #625	; 0x271
    27fe:	4363      	muls	r3, r4
    2800:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    2804:	1e5b      	subs	r3, r3, #1
    2806:	fbb3 f3f2 	udiv	r3, r3, r2
    280a:	81c3      	strh	r3, [r0, #14]
    280c:	4b09      	ldr	r3, [pc, #36]	; (2834 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x12c>)
    280e:	fbb3 f3f2 	udiv	r3, r3, r2
    2812:	1c5b      	adds	r3, r3, #1
    2814:	8283      	strh	r3, [r0, #20]
    2816:	8903      	ldrh	r3, [r0, #8]
    2818:	4363      	muls	r3, r4
    281a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    281e:	1e5b      	subs	r3, r3, #1
    2820:	fbb3 f3f2 	udiv	r3, r3, r2
    2824:	6043      	str	r3, [r0, #4]
    2826:	6803      	ldr	r3, [r0, #0]
    2828:	434b      	muls	r3, r1
    282a:	fbb3 f1f2 	udiv	r1, r3, r2
    282e:	6001      	str	r1, [r0, #0]
    2830:	bd10      	pop	{r4, pc}
    2832:	0000      	.short	0x0000
    2834:	02625a00 	.word	0x02625a00

00002838 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    2838:	4902      	ldr	r1, [pc, #8]	; (2844 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    283a:	f991 1000 	ldrsb.w	r1, [r1]
    283e:	f00b ba02 	b.w	dc46 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    2842:	0000      	.short	0x0000
    2844:	20000370 	.word	0x20000370

00002848 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    2848:	b508      	push	{r3, lr}
    284a:	207f      	movs	r0, #127	; 0x7f
    284c:	f88d 0000 	strb.w	r0, [sp]
    2850:	4668      	mov	r0, sp
    2852:	f005 fbc3 	bl	7fdc <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    2856:	b140      	cbz	r0, 286a <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    2858:	4805      	ldr	r0, [pc, #20]	; (2870 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    285a:	7840      	ldrb	r0, [r0, #1]
    285c:	4240      	negs	r0, r0
    285e:	b241      	sxtb	r1, r0
    2860:	f99d 0000 	ldrsb.w	r0, [sp]
    2864:	f00b f9ef 	bl	dc46 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    2868:	bd08      	pop	{r3, pc}
    286a:	f99d 0000 	ldrsb.w	r0, [sp]
    286e:	bd08      	pop	{r3, pc}
    2870:	20000370 	.word	0x20000370

00002874 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>:
    2874:	4a01      	ldr	r2, [pc, #4]	; (287c <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8>)
    2876:	7010      	strb	r0, [r2, #0]
    2878:	7051      	strb	r1, [r2, #1]
    287a:	4770      	bx	lr
    287c:	20000370 	.word	0x20000370
    2880:	b570      	push	{r4, r5, r6, lr}
    2882:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
    2886:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    288a:	2401      	movs	r4, #1
    288c:	fb03 2101 	mla	r1, r3, r1, r2
    2890:	2225      	movs	r2, #37	; 0x25
    2892:	fbb1 f3f2 	udiv	r3, r1, r2
    2896:	fb02 1113 	mls	r1, r2, r3, r1
    289a:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    289e:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
    28a2:	f001 0307 	and.w	r3, r1, #7
    28a6:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
    28aa:	fa04 f303 	lsl.w	r3, r4, r3
    28ae:	421a      	tst	r2, r3
    28b0:	d004      	beq.n	28bc <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x48>
    28b2:	bf00      	nop
    28b4:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
    28b8:	2000      	movs	r0, #0
    28ba:	bd70      	pop	{r4, r5, r6, pc}
    28bc:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    28c0:	fbb1 f3f2 	udiv	r3, r1, r2
    28c4:	fb02 1113 	mls	r1, r2, r3, r1
    28c8:	1c49      	adds	r1, r1, #1
    28ca:	b2c9      	uxtb	r1, r1
    28cc:	2300      	movs	r3, #0
    28ce:	18c5      	adds	r5, r0, r3
    28d0:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
    28d4:	428a      	cmp	r2, r1
    28d6:	d312      	bcc.n	28fe <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8a>
    28d8:	f895 5026 	ldrb.w	r5, [r5, #38]	; 0x26
    28dc:	2200      	movs	r2, #0
    28de:	bf00      	nop
    28e0:	fa04 f602 	lsl.w	r6, r4, r2
    28e4:	4235      	tst	r5, r6
    28e6:	d001      	beq.n	28ec <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x78>
    28e8:	1e49      	subs	r1, r1, #1
    28ea:	b2c9      	uxtb	r1, r1
    28ec:	b121      	cbz	r1, 28f8 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x84>
    28ee:	1c52      	adds	r2, r2, #1
    28f0:	b2d2      	uxtb	r2, r2
    28f2:	2a08      	cmp	r2, #8
    28f4:	d3f4      	bcc.n	28e0 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x6c>
    28f6:	e004      	b.n	2902 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8e>
    28f8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    28fc:	e7da      	b.n	28b4 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x40>
    28fe:	1a89      	subs	r1, r1, r2
    2900:	b2c9      	uxtb	r1, r1
    2902:	1c5b      	adds	r3, r3, #1
    2904:	b2db      	uxtb	r3, r3
    2906:	2b05      	cmp	r3, #5
    2908:	d3e1      	bcc.n	28ce <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x5a>
    290a:	201f      	movs	r0, #31
    290c:	bd70      	pop	{r4, r5, r6, pc}
    290e:	0000      	movs	r0, r0
    2910:	b570      	push	{r4, r5, r6, lr}
    2912:	1c49      	adds	r1, r1, #1
    2914:	2300      	movs	r3, #0
    2916:	b2c9      	uxtb	r1, r1
    2918:	2401      	movs	r4, #1
    291a:	18c5      	adds	r5, r0, r3
    291c:	79aa      	ldrb	r2, [r5, #6]
    291e:	428a      	cmp	r2, r1
    2920:	d312      	bcc.n	2948 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xd4>
    2922:	f895 5001 	ldrb.w	r5, [r5, #1]
    2926:	2200      	movs	r2, #0
    2928:	fa04 f602 	lsl.w	r6, r4, r2
    292c:	4235      	tst	r5, r6
    292e:	d001      	beq.n	2934 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xc0>
    2930:	1e49      	subs	r1, r1, #1
    2932:	b2c9      	uxtb	r1, r1
    2934:	b121      	cbz	r1, 2940 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xcc>
    2936:	1c52      	adds	r2, r2, #1
    2938:	b2d2      	uxtb	r2, r2
    293a:	2a08      	cmp	r2, #8
    293c:	d3f4      	bcc.n	2928 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xb4>
    293e:	e005      	b.n	294c <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xd8>
    2940:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    2944:	b2c0      	uxtb	r0, r0
    2946:	bd70      	pop	{r4, r5, r6, pc}
    2948:	1a89      	subs	r1, r1, r2
    294a:	b2c9      	uxtb	r1, r1
    294c:	1c5b      	adds	r3, r3, #1
    294e:	b2db      	uxtb	r3, r3
    2950:	2b05      	cmp	r3, #5
    2952:	d3e2      	bcc.n	291a <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xa6>
    2954:	219d      	movs	r1, #157	; 0x9d
    2956:	2046      	movs	r0, #70	; 0x46
    2958:	f7fe f82a 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000295c <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
    295c:	7841      	ldrb	r1, [r0, #1]
    295e:	b141      	cbz	r1, 2972 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    2960:	78c0      	ldrb	r0, [r0, #3]
    2962:	282b      	cmp	r0, #43	; 0x2b
    2964:	d203      	bcs.n	296e <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
    2966:	4a04      	ldr	r2, [pc, #16]	; (2978 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
    2968:	5c10      	ldrb	r0, [r2, r0]
    296a:	4288      	cmp	r0, r1
    296c:	d101      	bne.n	2972 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    296e:	2001      	movs	r0, #1
    2970:	4770      	bx	lr
    2972:	2000      	movs	r0, #0
    2974:	4770      	bx	lr
    2976:	0000      	.short	0x0000
    2978:	00010afc 	.word	0x00010afc

0000297c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
    297c:	b510      	push	{r4, lr}
    297e:	2201      	movs	r2, #1
    2980:	70c1      	strb	r1, [r0, #3]
    2982:	292b      	cmp	r1, #43	; 0x2b
    2984:	d202      	bcs.n	298c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x10>
    2986:	4a06      	ldr	r2, [pc, #24]	; (29a0 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
    2988:	5c52      	ldrb	r2, [r2, r1]
    298a:	e006      	b.n	299a <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    298c:	29ff      	cmp	r1, #255	; 0xff
    298e:	d004      	beq.n	299a <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    2990:	f240 4174 	movw	r1, #1140	; 0x474
    2994:	202a      	movs	r0, #42	; 0x2a
    2996:	f7fe f80b 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    299a:	7042      	strb	r2, [r0, #1]
    299c:	bd10      	pop	{r4, pc}
    299e:	0000      	.short	0x0000
    29a0:	00010afc 	.word	0x00010afc

000029a4 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    29a4:	4904      	ldr	r1, [pc, #16]	; (29b8 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    29a6:	7c89      	ldrb	r1, [r1, #18]
    29a8:	0749      	lsls	r1, r1, #29
    29aa:	d400      	bmi.n	29ae <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    29ac:	b108      	cbz	r0, 29b2 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    29ae:	2000      	movs	r0, #0
    29b0:	4770      	bx	lr
    29b2:	2001      	movs	r0, #1
    29b4:	4770      	bx	lr
    29b6:	0000      	.short	0x0000
    29b8:	20001198 	.word	0x20001198

000029bc <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    29bc:	4803      	ldr	r0, [pc, #12]	; (29cc <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    29be:	7c80      	ldrb	r0, [r0, #18]
    29c0:	0780      	lsls	r0, r0, #30
    29c2:	d401      	bmi.n	29c8 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    29c4:	2001      	movs	r0, #1
    29c6:	4770      	bx	lr
    29c8:	2000      	movs	r0, #0
    29ca:	4770      	bx	lr
    29cc:	20001198 	.word	0x20001198

000029d0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    29d0:	4803      	ldr	r0, [pc, #12]	; (29e0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    29d2:	7c80      	ldrb	r0, [r0, #18]
    29d4:	07c0      	lsls	r0, r0, #31
    29d6:	d001      	beq.n	29dc <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    29d8:	2000      	movs	r0, #0
    29da:	4770      	bx	lr
    29dc:	2001      	movs	r0, #1
    29de:	4770      	bx	lr
    29e0:	20001198 	.word	0x20001198
    29e4:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    29e8:	4688      	mov	r8, r1
    29ea:	4699      	mov	r9, r3
    29ec:	4615      	mov	r5, r2
    29ee:	4604      	mov	r4, r0
    29f0:	4669      	mov	r1, sp
    29f2:	f00a ff92 	bl	d91a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    29f6:	bbe0      	cbnz	r0, 2a72 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    29f8:	9e01      	ldr	r6, [sp, #4]
    29fa:	2700      	movs	r7, #0
    29fc:	3680      	adds	r6, #128	; 0x80
    29fe:	b17d      	cbz	r5, 2a20 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x50>
    2a00:	4620      	mov	r0, r4
    2a02:	f7fe fcad 	bl	1360 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    2a06:	0004      	movs	r4, r0
    2a08:	d00e      	beq.n	2a28 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x58>
    2a0a:	4629      	mov	r1, r5
    2a0c:	f00a fb86 	bl	d11c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    2a10:	b118      	cbz	r0, 2a1a <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4a>
    2a12:	491b      	ldr	r1, [pc, #108]	; (2a80 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xb0>)
    2a14:	8849      	ldrh	r1, [r1, #2]
    2a16:	42a9      	cmp	r1, r5
    2a18:	d208      	bcs.n	2a2c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x5c>
    2a1a:	2000      	movs	r0, #0
    2a1c:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    2a20:	2001      	movs	r0, #1
    2a22:	f886 0024 	strb.w	r0, [r6, #36]	; 0x24
    2a26:	e024      	b.n	2a72 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    2a28:	2167      	movs	r1, #103	; 0x67
    2a2a:	e025      	b.n	2a78 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa8>
    2a2c:	4601      	mov	r1, r0
    2a2e:	aa02      	add	r2, sp, #8
    2a30:	4620      	mov	r0, r4
    2a32:	f00a fb6c 	bl	d10e <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    2a36:	9802      	ldr	r0, [sp, #8]
    2a38:	8007      	strh	r7, [r0, #0]
    2a3a:	7087      	strb	r7, [r0, #2]
    2a3c:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    2a40:	b109      	cbz	r1, 2a46 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x76>
    2a42:	f04f 0802 	mov.w	r8, #2
    2a46:	4641      	mov	r1, r8
    2a48:	f00b fa9f 	bl	df8a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    2a4c:	9802      	ldr	r0, [sp, #8]
    2a4e:	462a      	mov	r2, r5
    2a50:	4649      	mov	r1, r9
    2a52:	1cc0      	adds	r0, r0, #3
    2a54:	f00d ff33 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2a58:	4620      	mov	r0, r4
    2a5a:	4629      	mov	r1, r5
    2a5c:	f00a fb15 	bl	d08a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    2a60:	b148      	cbz	r0, 2a76 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa6>
    2a62:	4668      	mov	r0, sp
    2a64:	f00b faec 	bl	e040 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    2a68:	9801      	ldr	r0, [sp, #4]
    2a6a:	f8a0 7222 	strh.w	r7, [r0, #546]	; 0x222
    2a6e:	f886 7024 	strb.w	r7, [r6, #36]	; 0x24
    2a72:	2001      	movs	r0, #1
    2a74:	e7d2      	b.n	2a1c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4c>
    2a76:	217c      	movs	r1, #124	; 0x7c
    2a78:	202b      	movs	r0, #43	; 0x2b
    2a7a:	f7fd ff99 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2a7e:	0000      	.short	0x0000
    2a80:	20001198 	.word	0x20001198

00002a84 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    2a84:	4809      	ldr	r0, [pc, #36]	; (2aac <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    2a86:	b082      	sub	sp, #8
    2a88:	7a00      	ldrb	r0, [r0, #8]
    2a8a:	f88d 0000 	strb.w	r0, [sp]
    2a8e:	9800      	ldr	r0, [sp, #0]
    2a90:	9000      	str	r0, [sp, #0]
    2a92:	f89d 0000 	ldrb.w	r0, [sp]
    2a96:	2800      	cmp	r0, #0
    2a98:	d105      	bne.n	2aa6 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x22>
    2a9a:	2202      	movs	r2, #2
    2a9c:	4904      	ldr	r1, [pc, #16]	; (2ab0 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x2c>)
    2a9e:	4803      	ldr	r0, [pc, #12]	; (2aac <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    2aa0:	b002      	add	sp, #8
    2aa2:	f00b baf9 	b.w	e098 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2aa6:	b002      	add	sp, #8
    2aa8:	4770      	bx	lr
    2aaa:	0000      	.short	0x0000
    2aac:	200011b0 	.word	0x200011b0
    2ab0:	0000e0df 	.word	0x0000e0df

00002ab4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    2ab4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ab8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 2c34 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x180>
    2abc:	4f5e      	ldr	r7, [pc, #376]	; (2c38 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x184>)
    2abe:	4683      	mov	fp, r0
    2ac0:	f04f 0a01 	mov.w	sl, #1
    2ac4:	2600      	movs	r6, #0
    2ac6:	6878      	ldr	r0, [r7, #4]
    2ac8:	4635      	mov	r5, r6
    2aca:	7a00      	ldrb	r0, [r0, #8]
    2acc:	f88d 0000 	strb.w	r0, [sp]
    2ad0:	9800      	ldr	r0, [sp, #0]
    2ad2:	9000      	str	r0, [sp, #0]
    2ad4:	f89d 1000 	ldrb.w	r1, [sp]
    2ad8:	2910      	cmp	r1, #16
    2ada:	d106      	bne.n	2aea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    2adc:	f899 1013 	ldrb.w	r1, [r9, #19]
    2ae0:	b119      	cbz	r1, 2aea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    2ae2:	f8b9 0014 	ldrh.w	r0, [r9, #20]
    2ae6:	2800      	cmp	r0, #0
    2ae8:	d073      	beq.n	2bd2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    2aea:	f88d 6000 	strb.w	r6, [sp]
    2aee:	4668      	mov	r0, sp
    2af0:	f000 f906 	bl	2d00 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb4>
    2af4:	f89d 1000 	ldrb.w	r1, [sp]
    2af8:	2900      	cmp	r1, #0
    2afa:	d1f8      	bne.n	2aee <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3a>
    2afc:	2800      	cmp	r0, #0
    2afe:	d068      	beq.n	2bd2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    2b00:	4604      	mov	r4, r0
    2b02:	7a00      	ldrb	r0, [r0, #8]
    2b04:	f88d 0000 	strb.w	r0, [sp]
    2b08:	9800      	ldr	r0, [sp, #0]
    2b0a:	9000      	str	r0, [sp, #0]
    2b0c:	f89d 8000 	ldrb.w	r8, [sp]
    2b10:	f104 0008 	add.w	r0, r4, #8
    2b14:	2105      	movs	r1, #5
    2b16:	9000      	str	r0, [sp, #0]
    2b18:	7001      	strb	r1, [r0, #0]
    2b1a:	4640      	mov	r0, r8
    2b1c:	f1b8 0f08 	cmp.w	r8, #8
    2b20:	d042      	beq.n	2ba8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf4>
    2b22:	dc07      	bgt.n	2b34 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x80>
    2b24:	2802      	cmp	r0, #2
    2b26:	d00d      	beq.n	2b44 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    2b28:	2803      	cmp	r0, #3
    2b2a:	d017      	beq.n	2b5c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    2b2c:	f1b8 0f04 	cmp.w	r8, #4
    2b30:	d105      	bne.n	2b3e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8a>
    2b32:	e01d      	b.n	2b70 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xbc>
    2b34:	280f      	cmp	r0, #15
    2b36:	d052      	beq.n	2bde <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12a>
    2b38:	f1b8 0f10 	cmp.w	r8, #16
    2b3c:	d059      	beq.n	2bf2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13e>
    2b3e:	f240 214a 	movw	r1, #586	; 0x24a
    2b42:	e065      	b.n	2c10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    2b44:	6862      	ldr	r2, [r4, #4]
    2b46:	b132      	cbz	r2, 2b56 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa2>
    2b48:	4659      	mov	r1, fp
    2b4a:	4620      	mov	r0, r4
    2b4c:	4790      	blx	r2
    2b4e:	2004      	movs	r0, #4
    2b50:	f360 0507 	bfi	r5, r0, #0, #8
    2b54:	e010      	b.n	2b78 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
    2b56:	f240 11c3 	movw	r1, #451	; 0x1c3
    2b5a:	e059      	b.n	2c10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    2b5c:	6862      	ldr	r2, [r4, #4]
    2b5e:	b122      	cbz	r2, 2b6a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb6>
    2b60:	4659      	mov	r1, fp
    2b62:	4620      	mov	r0, r4
    2b64:	4790      	blx	r2
    2b66:	4605      	mov	r5, r0
    2b68:	e006      	b.n	2b78 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
    2b6a:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    2b6e:	e04f      	b.n	2c10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    2b70:	6861      	ldr	r1, [r4, #4]
    2b72:	b1b1      	cbz	r1, 2ba2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xee>
    2b74:	4620      	mov	r0, r4
    2b76:	4788      	blx	r1
    2b78:	f3c5 2007 	ubfx	r0, r5, #8, #8
    2b7c:	2801      	cmp	r0, #1
    2b7e:	d04a      	beq.n	2c16 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x162>
    2b80:	f3ef 8110 	mrs	r1, PRIMASK
    2b84:	b672      	cpsid	i
    2b86:	7a20      	ldrb	r0, [r4, #8]
    2b88:	f88d 0000 	strb.w	r0, [sp]
    2b8c:	9800      	ldr	r0, [sp, #0]
    2b8e:	9000      	str	r0, [sp, #0]
    2b90:	f89d 0000 	ldrb.w	r0, [sp]
    2b94:	2805      	cmp	r0, #5
    2b96:	d042      	beq.n	2c1e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    2b98:	b3b0      	cbz	r0, 2c08 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x154>
    2b9a:	f366 0507 	bfi	r5, r6, #0, #8
    2b9e:	b3a1      	cbz	r1, 2c0a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x156>
    2ba0:	e041      	b.n	2c26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
    2ba2:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    2ba6:	e033      	b.n	2c10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    2ba8:	6860      	ldr	r0, [r4, #4]
    2baa:	465d      	mov	r5, fp
    2bac:	b198      	cbz	r0, 2bd6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    2bae:	8804      	ldrh	r4, [r0, #0]
    2bb0:	4620      	mov	r0, r4
    2bb2:	f7fe fbd5 	bl	1360 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    2bb6:	b180      	cbz	r0, 2bda <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    2bb8:	706e      	strb	r6, [r5, #1]
    2bba:	210d      	movs	r1, #13
    2bbc:	7029      	strb	r1, [r5, #0]
    2bbe:	80ec      	strh	r4, [r5, #6]
    2bc0:	f8a5 a008 	strh.w	sl, [r5, #8]
    2bc4:	f885 a004 	strb.w	sl, [r5, #4]
    2bc8:	4631      	mov	r1, r6
    2bca:	f00a fb3e 	bl	d24a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    2bce:	2004      	movs	r0, #4
    2bd0:	613e      	str	r6, [r7, #16]
    2bd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bd6:	21e5      	movs	r1, #229	; 0xe5
    2bd8:	e01a      	b.n	2c10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    2bda:	21c5      	movs	r1, #197	; 0xc5
    2bdc:	e018      	b.n	2c10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    2bde:	f88b 6001 	strb.w	r6, [fp, #1]
    2be2:	2116      	movs	r1, #22
    2be4:	f88b 1000 	strb.w	r1, [fp]
    2be8:	f8d4 1009 	ldr.w	r1, [r4, #9]
    2bec:	f8cb 1004 	str.w	r1, [fp, #4]
    2bf0:	e7ad      	b.n	2b4e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    2bf2:	4812      	ldr	r0, [pc, #72]	; (2c3c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>)
    2bf4:	6802      	ldr	r2, [r0, #0]
    2bf6:	b122      	cbz	r2, 2c02 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14e>
    2bf8:	6860      	ldr	r0, [r4, #4]
    2bfa:	b138      	cbz	r0, 2c0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x158>
    2bfc:	8800      	ldrh	r0, [r0, #0]
    2bfe:	4659      	mov	r1, fp
    2c00:	4790      	blx	r2
    2c02:	2002      	movs	r0, #2
    2c04:	613e      	str	r6, [r7, #16]
    2c06:	e7e4      	b.n	2bd2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    2c08:	e009      	b.n	2c1e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    2c0a:	e00b      	b.n	2c24 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x170>
    2c0c:	f44f 7110 	mov.w	r1, #576	; 0x240
    2c10:	2010      	movs	r0, #16
    2c12:	f7fd fecd 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2c16:	9800      	ldr	r0, [sp, #0]
    2c18:	4641      	mov	r1, r8
    2c1a:	7001      	strb	r1, [r0, #0]
    2c1c:	e003      	b.n	2c26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
    2c1e:	7226      	strb	r6, [r4, #8]
    2c20:	613e      	str	r6, [r7, #16]
    2c22:	e7bc      	b.n	2b9e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    2c24:	b662      	cpsie	i
    2c26:	f015 0fff 	tst.w	r5, #255	; 0xff
    2c2a:	f43f af4c 	beq.w	2ac6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12>
    2c2e:	b2e8      	uxtb	r0, r5
    2c30:	e7cf      	b.n	2bd2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    2c32:	0000      	.short	0x0000
    2c34:	20001198 	.word	0x20001198
    2c38:	200011c4 	.word	0x200011c4
    2c3c:	200000c8 	.word	0x200000c8

00002c40 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    2c40:	4901      	ldr	r1, [pc, #4]	; (2c48 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    2c42:	7008      	strb	r0, [r1, #0]
    2c44:	f000 b8be 	b.w	2dc4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x178>
    2c48:	20000372 	.word	0x20000372

00002c4c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    2c4c:	4902      	ldr	r1, [pc, #8]	; (2c58 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc>)
    2c4e:	4801      	ldr	r0, [pc, #4]	; (2c54 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8>)
    2c50:	6008      	str	r0, [r1, #0]
    2c52:	4770      	bx	lr
    2c54:	00002c5d 	.word	0x00002c5d
    2c58:	200000c8 	.word	0x200000c8
    2c5c:	b538      	push	{r3, r4, r5, lr}
    2c5e:	000d      	movs	r5, r1
    2c60:	d014      	beq.n	2c8c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x40>
    2c62:	80a8      	strh	r0, [r5, #4]
    2c64:	2100      	movs	r1, #0
    2c66:	7269      	strb	r1, [r5, #9]
    2c68:	f7fe fb64 	bl	1334 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    2c6c:	4604      	mov	r4, r0
    2c6e:	f00a fa30 	bl	d0d2 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    2c72:	b170      	cbz	r0, 2c92 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x46>
    2c74:	4601      	mov	r1, r0
    2c76:	466a      	mov	r2, sp
    2c78:	4620      	mov	r0, r4
    2c7a:	f00a fa48 	bl	d10e <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    2c7e:	80e8      	strh	r0, [r5, #6]
    2c80:	b150      	cbz	r0, 2c98 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x4c>
    2c82:	28fb      	cmp	r0, #251	; 0xfb
    2c84:	d90b      	bls.n	2c9e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x52>
    2c86:	f240 1123 	movw	r1, #291	; 0x123
    2c8a:	e033      	b.n	2cf4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2c8c:	f240 1113 	movw	r1, #275	; 0x113
    2c90:	e030      	b.n	2cf4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2c92:	f44f 718e 	mov.w	r1, #284	; 0x11c
    2c96:	e02d      	b.n	2cf4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2c98:	f240 1121 	movw	r1, #289	; 0x121
    2c9c:	e02a      	b.n	2cf4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2c9e:	9800      	ldr	r0, [sp, #0]
    2ca0:	f00b f91f 	bl	dee2 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
    2ca4:	2801      	cmp	r0, #1
    2ca6:	d004      	beq.n	2cb2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x66>
    2ca8:	2802      	cmp	r0, #2
    2caa:	d002      	beq.n	2cb2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x66>
    2cac:	f240 1133 	movw	r1, #307	; 0x133
    2cb0:	e020      	b.n	2cf4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2cb2:	7228      	strb	r0, [r5, #8]
    2cb4:	6828      	ldr	r0, [r5, #0]
    2cb6:	b1a8      	cbz	r0, 2ce4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x98>
    2cb8:	9900      	ldr	r1, [sp, #0]
    2cba:	88ea      	ldrh	r2, [r5, #6]
    2cbc:	1cc9      	adds	r1, r1, #3
    2cbe:	f00d fdfe 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2cc2:	4620      	mov	r0, r4
    2cc4:	f00a f9cd 	bl	d062 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    2cc8:	b178      	cbz	r0, 2cea <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x9e>
    2cca:	4620      	mov	r0, r4
    2ccc:	2100      	movs	r1, #0
    2cce:	f00a fabc 	bl	d24a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    2cd2:	b168      	cbz	r0, 2cf0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa4>
    2cd4:	4809      	ldr	r0, [pc, #36]	; (2cfc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb0>)
    2cd6:	7cc1      	ldrb	r1, [r0, #19]
    2cd8:	2900      	cmp	r1, #0
    2cda:	d002      	beq.n	2ce2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x96>
    2cdc:	8a81      	ldrh	r1, [r0, #20]
    2cde:	1e49      	subs	r1, r1, #1
    2ce0:	8281      	strh	r1, [r0, #20]
    2ce2:	bd38      	pop	{r3, r4, r5, pc}
    2ce4:	f44f 719d 	mov.w	r1, #314	; 0x13a
    2ce8:	e004      	b.n	2cf4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2cea:	f240 113f 	movw	r1, #319	; 0x13f
    2cee:	e001      	b.n	2cf4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2cf0:	f44f 71a2 	mov.w	r1, #324	; 0x144
    2cf4:	2010      	movs	r0, #16
    2cf6:	f7fd fe5b 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2cfa:	0000      	.short	0x0000
    2cfc:	20001198 	.word	0x20001198
    2d00:	b538      	push	{r3, r4, r5, lr}
    2d02:	4603      	mov	r3, r0
    2d04:	4917      	ldr	r1, [pc, #92]	; (2d64 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x118>)
    2d06:	2000      	movs	r0, #0
    2d08:	7018      	strb	r0, [r3, #0]
    2d0a:	6908      	ldr	r0, [r1, #16]
    2d0c:	2401      	movs	r4, #1
    2d0e:	b140      	cbz	r0, 2d22 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd6>
    2d10:	7a02      	ldrb	r2, [r0, #8]
    2d12:	f88d 2000 	strb.w	r2, [sp]
    2d16:	9a00      	ldr	r2, [sp, #0]
    2d18:	9200      	str	r2, [sp, #0]
    2d1a:	f89d 5000 	ldrb.w	r5, [sp]
    2d1e:	2d00      	cmp	r5, #0
    2d20:	d111      	bne.n	2d46 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfa>
    2d22:	6848      	ldr	r0, [r1, #4]
    2d24:	7a02      	ldrb	r2, [r0, #8]
    2d26:	f88d 2000 	strb.w	r2, [sp]
    2d2a:	9a00      	ldr	r2, [sp, #0]
    2d2c:	9200      	str	r2, [sp, #0]
    2d2e:	f89d 5000 	ldrb.w	r5, [sp]
    2d32:	2d01      	cmp	r5, #1
    2d34:	d006      	beq.n	2d44 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf8>
    2d36:	f3ef 8210 	mrs	r2, PRIMASK
    2d3a:	b672      	cpsid	i
    2d3c:	6805      	ldr	r5, [r0, #0]
    2d3e:	604d      	str	r5, [r1, #4]
    2d40:	b112      	cbz	r2, 2d48 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfc>
    2d42:	e002      	b.n	2d4a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfe>
    2d44:	2000      	movs	r0, #0
    2d46:	bd38      	pop	{r3, r4, r5, pc}
    2d48:	b662      	cpsie	i
    2d4a:	7a02      	ldrb	r2, [r0, #8]
    2d4c:	f88d 2000 	strb.w	r2, [sp]
    2d50:	9a00      	ldr	r2, [sp, #0]
    2d52:	9200      	str	r2, [sp, #0]
    2d54:	f89d 5000 	ldrb.w	r5, [sp]
    2d58:	b10d      	cbz	r5, 2d5e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x112>
    2d5a:	6108      	str	r0, [r1, #16]
    2d5c:	bd38      	pop	{r3, r4, r5, pc}
    2d5e:	701c      	strb	r4, [r3, #0]
    2d60:	bd38      	pop	{r3, r4, r5, pc}
    2d62:	0000      	.short	0x0000
    2d64:	200011c4 	.word	0x200011c4
    2d68:	b538      	push	{r3, r4, r5, lr}
    2d6a:	b1d0      	cbz	r0, 2da2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x156>
    2d6c:	6041      	str	r1, [r0, #4]
    2d6e:	f100 0108 	add.w	r1, r0, #8
    2d72:	700a      	strb	r2, [r1, #0]
    2d74:	f3ef 8310 	mrs	r3, PRIMASK
    2d78:	b672      	cpsid	i
    2d7a:	4c10      	ldr	r4, [pc, #64]	; (2dbc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x170>)
    2d7c:	6004      	str	r4, [r0, #0]
    2d7e:	1f21      	subs	r1, r4, #4
    2d80:	684a      	ldr	r2, [r1, #4]
    2d82:	b14a      	cbz	r2, 2d98 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14c>
    2d84:	7a12      	ldrb	r2, [r2, #8]
    2d86:	f88d 2000 	strb.w	r2, [sp]
    2d8a:	9a00      	ldr	r2, [sp, #0]
    2d8c:	9200      	str	r2, [sp, #0]
    2d8e:	f89d 5000 	ldrb.w	r5, [sp]
    2d92:	2d01      	cmp	r5, #1
    2d94:	d100      	bne.n	2d98 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14c>
    2d96:	600c      	str	r4, [r1, #0]
    2d98:	680a      	ldr	r2, [r1, #0]
    2d9a:	6010      	str	r0, [r2, #0]
    2d9c:	6008      	str	r0, [r1, #0]
    2d9e:	b12b      	cbz	r3, 2dac <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x160>
    2da0:	e005      	b.n	2dae <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x162>
    2da2:	f240 2175 	movw	r1, #629	; 0x275
    2da6:	2010      	movs	r0, #16
    2da8:	f7fd fe02 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2dac:	b662      	cpsie	i
    2dae:	4804      	ldr	r0, [pc, #16]	; (2dc0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x174>)
    2db0:	7800      	ldrb	r0, [r0, #0]
    2db2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2db6:	f009 ba7f 	b.w	c2b8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2dba:	0000      	.short	0x0000
    2dbc:	200011c8 	.word	0x200011c8
    2dc0:	20000372 	.word	0x20000372
    2dc4:	b510      	push	{r4, lr}
    2dc6:	2214      	movs	r2, #20
    2dc8:	2100      	movs	r1, #0
    2dca:	4808      	ldr	r0, [pc, #32]	; (2dec <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
    2dcc:	f00d fdf1 	bl	109b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2dd0:	4806      	ldr	r0, [pc, #24]	; (2dec <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
    2dd2:	2212      	movs	r2, #18
    2dd4:	2100      	movs	r1, #0
    2dd6:	3814      	subs	r0, #20
    2dd8:	f00d fdeb 	bl	109b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2ddc:	4803      	ldr	r0, [pc, #12]	; (2dec <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
    2dde:	2101      	movs	r1, #1
    2de0:	7301      	strb	r1, [r0, #12]
    2de2:	1d01      	adds	r1, r0, #4
    2de4:	6041      	str	r1, [r0, #4]
    2de6:	6001      	str	r1, [r0, #0]
    2de8:	bd10      	pop	{r4, pc}
    2dea:	0000      	.short	0x0000
    2dec:	200011c4 	.word	0x200011c4

00002df0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    2df0:	b4f0      	push	{r4, r5, r6, r7}
    2df2:	8150      	strh	r0, [r2, #10]
    2df4:	890c      	ldrh	r4, [r1, #8]
    2df6:	8194      	strh	r4, [r2, #12]
    2df8:	898b      	ldrh	r3, [r1, #12]
    2dfa:	81d3      	strh	r3, [r2, #14]
    2dfc:	8948      	ldrh	r0, [r1, #10]
    2dfe:	8210      	strh	r0, [r2, #16]
    2e00:	89cd      	ldrh	r5, [r1, #14]
    2e02:	8255      	strh	r5, [r2, #18]
    2e04:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    2e06:	42ae      	cmp	r6, r5
    2e08:	d108      	bne.n	2e1c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    2e0a:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    2e0c:	4285      	cmp	r5, r0
    2e0e:	d105      	bne.n	2e1c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    2e10:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    2e12:	429d      	cmp	r5, r3
    2e14:	d102      	bne.n	2e1c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    2e16:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    2e18:	42a3      	cmp	r3, r4
    2e1a:	d001      	beq.n	2e20 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    2e1c:	2301      	movs	r3, #1
    2e1e:	e000      	b.n	2e22 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    2e20:	2300      	movs	r3, #0
    2e22:	7513      	strb	r3, [r2, #20]
    2e24:	8548      	strh	r0, [r1, #42]	; 0x2a
    2e26:	8a50      	ldrh	r0, [r2, #18]
    2e28:	85c8      	strh	r0, [r1, #46]	; 0x2e
    2e2a:	8990      	ldrh	r0, [r2, #12]
    2e2c:	8588      	strh	r0, [r1, #44]	; 0x2c
    2e2e:	89d0      	ldrh	r0, [r2, #14]
    2e30:	8608      	strh	r0, [r1, #48]	; 0x30
    2e32:	bcf0      	pop	{r4, r5, r6, r7}
    2e34:	4901      	ldr	r1, [pc, #4]	; (2e3c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x4c>)
    2e36:	4610      	mov	r0, r2
    2e38:	f00b b928 	b.w	e08c <sym_43BYC3K4M44JBPOX4EUJM44GYCCY2C3C4SYEF6I>
    2e3c:	00002e61 	.word	0x00002e61

00002e40 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    2e40:	8150      	strh	r0, [r2, #10]
    2e42:	8a88      	ldrh	r0, [r1, #20]
    2e44:	8190      	strh	r0, [r2, #12]
    2e46:	8ac8      	ldrh	r0, [r1, #22]
    2e48:	81d0      	strh	r0, [r2, #14]
    2e4a:	8b08      	ldrh	r0, [r1, #24]
    2e4c:	8210      	strh	r0, [r2, #16]
    2e4e:	8b48      	ldrh	r0, [r1, #26]
    2e50:	8250      	strh	r0, [r2, #18]
    2e52:	4902      	ldr	r1, [pc, #8]	; (2e5c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x1c>)
    2e54:	4610      	mov	r0, r2
    2e56:	f00b b916 	b.w	e086 <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>
    2e5a:	0000      	.short	0x0000
    2e5c:	00002ea1 	.word	0x00002ea1
    2e60:	b538      	push	{r3, r4, r5, lr}
    2e62:	f1a0 0418 	sub.w	r4, r0, #24
    2e66:	7d00      	ldrb	r0, [r0, #20]
    2e68:	460d      	mov	r5, r1
    2e6a:	f000 0001 	and.w	r0, r0, #1
    2e6e:	f7ff fd99 	bl	29a4 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    2e72:	2100      	movs	r1, #0
    2e74:	b108      	cbz	r0, 2e7a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    2e76:	9100      	str	r1, [sp, #0]
    2e78:	e00c      	b.n	2e94 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    2e7a:	7069      	strb	r1, [r5, #1]
    2e7c:	2013      	movs	r0, #19
    2e7e:	7028      	strb	r0, [r5, #0]
    2e80:	f854 0f22 	ldr.w	r0, [r4, #34]!
    2e84:	6068      	str	r0, [r5, #4]
    2e86:	6860      	ldr	r0, [r4, #4]
    2e88:	60a8      	str	r0, [r5, #8]
    2e8a:	68a0      	ldr	r0, [r4, #8]
    2e8c:	60e8      	str	r0, [r5, #12]
    2e8e:	4803      	ldr	r0, [pc, #12]	; (2e9c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5c>)
    2e90:	6840      	ldr	r0, [r0, #4]
    2e92:	9000      	str	r0, [sp, #0]
    2e94:	f8bd 0000 	ldrh.w	r0, [sp]
    2e98:	bd38      	pop	{r3, r4, r5, pc}
    2e9a:	0000      	.short	0x0000
    2e9c:	00002f28 	.word	0x00002f28
    2ea0:	b570      	push	{r4, r5, r6, lr}
    2ea2:	b086      	sub	sp, #24
    2ea4:	460e      	mov	r6, r1
    2ea6:	4604      	mov	r4, r0
    2ea8:	f7ff fd88 	bl	29bc <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    2eac:	2500      	movs	r5, #0
    2eae:	b358      	cbz	r0, 2f08 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc8>
    2eb0:	f5a4 70bc 	sub.w	r0, r4, #376	; 0x178
    2eb4:	7225      	strb	r5, [r4, #8]
    2eb6:	8804      	ldrh	r4, [r0, #0]
    2eb8:	a903      	add	r1, sp, #12
    2eba:	4620      	mov	r0, r4
    2ebc:	f00c fe84 	bl	fbc8 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    2ec0:	b108      	cbz	r0, 2ec6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    2ec2:	21fe      	movs	r1, #254	; 0xfe
    2ec4:	e017      	b.n	2ef6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    2ec6:	f8ad 4000 	strh.w	r4, [sp]
    2eca:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    2ece:	f8ad 0002 	strh.w	r0, [sp, #2]
    2ed2:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    2ed6:	f8ad 0004 	strh.w	r0, [sp, #4]
    2eda:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    2ede:	f8ad 0006 	strh.w	r0, [sp, #6]
    2ee2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    2ee6:	f8ad 0008 	strh.w	r0, [sp, #8]
    2eea:	4668      	mov	r0, sp
    2eec:	f00c fea8 	bl	fc40 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    2ef0:	b120      	cbz	r0, 2efc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xbc>
    2ef2:	f240 1107 	movw	r1, #263	; 0x107
    2ef6:	202c      	movs	r0, #44	; 0x2c
    2ef8:	f7fd fd5a 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2efc:	f8cd 5000 	str.w	r5, [sp]
    2f00:	f8bd 0000 	ldrh.w	r0, [sp]
    2f04:	b006      	add	sp, #24
    2f06:	bd70      	pop	{r4, r5, r6, pc}
    2f08:	201b      	movs	r0, #27
    2f0a:	7030      	strb	r0, [r6, #0]
    2f0c:	7075      	strb	r5, [r6, #1]
    2f0e:	f854 0f0a 	ldr.w	r0, [r4, #10]!
    2f12:	6070      	str	r0, [r6, #4]
    2f14:	6860      	ldr	r0, [r4, #4]
    2f16:	60b0      	str	r0, [r6, #8]
    2f18:	8920      	ldrh	r0, [r4, #8]
    2f1a:	81b0      	strh	r0, [r6, #12]
    2f1c:	4801      	ldr	r0, [pc, #4]	; (2f24 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe4>)
    2f1e:	6800      	ldr	r0, [r0, #0]
    2f20:	9000      	str	r0, [sp, #0]
    2f22:	e7ed      	b.n	2f00 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc0>
    2f24:	00002f28 	.word	0x00002f28
    2f28:	00000004 	.word	0x00000004
    2f2c:	00000004 	.word	0x00000004

00002f30 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    2f30:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f32:	f06f 021f 	mvn.w	r2, #31
    2f36:	0c01      	lsrs	r1, r0, #16
    2f38:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    2f3c:	251f      	movs	r5, #31
    2f3e:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2f42:	3854      	subs	r0, #84	; 0x54
    2f44:	d00d      	beq.n	2f62 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2f46:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2f4a:	3855      	subs	r0, #85	; 0x55
    2f4c:	d009      	beq.n	2f62 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2f4e:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    2f52:	38aa      	subs	r0, #170	; 0xaa
    2f54:	d005      	beq.n	2f62 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2f56:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    2f5a:	38aa      	subs	r0, #170	; 0xaa
    2f5c:	d001      	beq.n	2f62 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2f5e:	2001      	movs	r0, #1
    2f60:	e000      	b.n	2f64 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    2f62:	2000      	movs	r0, #0
    2f64:	2200      	movs	r2, #0
    2f66:	4613      	mov	r3, r2
    2f68:	ea4f 0402 	mov.w	r4, r2
    2f6c:	ea82 0701 	eor.w	r7, r2, r1
    2f70:	43ff      	mvns	r7, r7
    2f72:	431f      	orrs	r7, r3
    2f74:	1c7f      	adds	r7, r7, #1
    2f76:	d00f      	beq.n	2f98 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    2f78:	f006 0701 	and.w	r7, r6, #1
    2f7c:	0852      	lsrs	r2, r2, #1
    2f7e:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    2f82:	f005 0701 	and.w	r7, r5, #1
    2f86:	085b      	lsrs	r3, r3, #1
    2f88:	0876      	lsrs	r6, r6, #1
    2f8a:	086d      	lsrs	r5, r5, #1
    2f8c:	1c64      	adds	r4, r4, #1
    2f8e:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    2f92:	2c16      	cmp	r4, #22
    2f94:	d3ea      	bcc.n	2f6c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    2f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f98:	2000      	movs	r0, #0
    2f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002f9c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    2f9c:	b510      	push	{r4, lr}
    2f9e:	4804      	ldr	r0, [pc, #16]	; (2fb0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2fa0:	f00b f995 	bl	e2ce <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf4>
    2fa4:	4802      	ldr	r0, [pc, #8]	; (2fb0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2faa:	3008      	adds	r0, #8
    2fac:	f00b b98f 	b.w	e2ce <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf4>
    2fb0:	200000cc 	.word	0x200000cc

00002fb4 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    2fb4:	4801      	ldr	r0, [pc, #4]	; (2fbc <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    2fb6:	f000 b809 	b.w	2fcc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    2fba:	0000      	.short	0x0000
    2fbc:	200000cc 	.word	0x200000cc

00002fc0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    2fc0:	4801      	ldr	r0, [pc, #4]	; (2fc8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    2fc2:	f000 b803 	b.w	2fcc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    2fc6:	0000      	.short	0x0000
    2fc8:	200000d4 	.word	0x200000d4
    2fcc:	b510      	push	{r4, lr}
    2fce:	e9d0 2100 	ldrd	r2, r1, [r0]
    2fd2:	4b09      	ldr	r3, [pc, #36]	; (2ff8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    2fd4:	4c09      	ldr	r4, [pc, #36]	; (2ffc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    2fd6:	4353      	muls	r3, r2
    2fd8:	4354      	muls	r4, r2
    2fda:	4051      	eors	r1, r2
    2fdc:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    2fe0:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    2fe4:	ea4f 41f1 	mov.w	r1, r1, ror #19
    2fe8:	e9c0 2100 	strd	r2, r1, [r0]
    2fec:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    2ff0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2ff4:	4618      	mov	r0, r3
    2ff6:	bd10      	pop	{r4, pc}
    2ff8:	c6ef3760 	.word	0xc6ef3760
    2ffc:	9e3779bb 	.word	0x9e3779bb

00003000 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
    3000:	b570      	push	{r4, r5, r6, lr}
    3002:	6844      	ldr	r4, [r0, #4]
    3004:	1d09      	adds	r1, r1, #4
    3006:	2500      	movs	r5, #0
    3008:	f894 008c 	ldrb.w	r0, [r4, #140]	; 0x8c
    300c:	3480      	adds	r4, #128	; 0x80
    300e:	07c0      	lsls	r0, r0, #31
    3010:	d001      	beq.n	3016 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x16>
    3012:	2001      	movs	r0, #1
    3014:	bd70      	pop	{r4, r5, r6, pc}
    3016:	6848      	ldr	r0, [r1, #4]
    3018:	6809      	ldr	r1, [r1, #0]
    301a:	4b0c      	ldr	r3, [pc, #48]	; (304c <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x4c>)
    301c:	f641 0207 	movw	r2, #6151	; 0x1807
    3020:	4019      	ands	r1, r3
    3022:	66e1      	str	r1, [r4, #108]	; 0x6c
    3024:	4010      	ands	r0, r2
    3026:	6720      	str	r0, [r4, #112]	; 0x70
    3028:	211b      	movs	r1, #27
    302a:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    302e:	f00b fa74 	bl	e51a <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY+0x22>
    3032:	f8a4 5058 	strh.w	r5, [r4, #88]	; 0x58
    3036:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    303a:	1c40      	adds	r0, r0, #1
    303c:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    3040:	68e0      	ldr	r0, [r4, #12]
    3042:	f040 0001 	orr.w	r0, r0, #1
    3046:	60e0      	str	r0, [r4, #12]
    3048:	2000      	movs	r0, #0
    304a:	bd70      	pop	{r4, r5, r6, pc}
    304c:	f704492f 	.word	0xf704492f

00003050 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
    3050:	b510      	push	{r4, lr}
    3052:	1d04      	adds	r4, r0, #4
    3054:	f004 fa04 	bl	7460 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    3058:	4b03      	ldr	r3, [pc, #12]	; (3068 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
    305a:	f641 0207 	movw	r2, #6151	; 0x1807
    305e:	4018      	ands	r0, r3
    3060:	4011      	ands	r1, r2
    3062:	6020      	str	r0, [r4, #0]
    3064:	6061      	str	r1, [r4, #4]
    3066:	bd10      	pop	{r4, pc}
    3068:	f704492f 	.word	0xf704492f

0000306c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
    306c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3070:	7803      	ldrb	r3, [r0, #0]
    3072:	6840      	ldr	r0, [r0, #4]
    3074:	1d0f      	adds	r7, r1, #4
    3076:	f100 0580 	add.w	r5, r0, #128	; 0x80
    307a:	f500 74a5 	add.w	r4, r0, #330	; 0x14a
    307e:	4606      	mov	r6, r0
    3080:	f04f 0800 	mov.w	r8, #0
    3084:	7f6a      	ldrb	r2, [r5, #29]
    3086:	2107      	movs	r1, #7
    3088:	4628      	mov	r0, r5
    308a:	f00a fc5d 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    308e:	b1e0      	cbz	r0, 30ca <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x5e>
    3090:	6839      	ldr	r1, [r7, #0]
    3092:	4b18      	ldr	r3, [pc, #96]	; (30f4 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x88>)
    3094:	6878      	ldr	r0, [r7, #4]
    3096:	4019      	ands	r1, r3
    3098:	f641 0207 	movw	r2, #6151	; 0x1807
    309c:	66e9      	str	r1, [r5, #108]	; 0x6c
    309e:	4010      	ands	r0, r2
    30a0:	6728      	str	r0, [r5, #112]	; 0x70
    30a2:	211b      	movs	r1, #27
    30a4:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    30a8:	f00b fa37 	bl	e51a <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY+0x22>
    30ac:	f885 8056 	strb.w	r8, [r5, #86]	; 0x56
    30b0:	f885 801d 	strb.w	r8, [r5, #29]
    30b4:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    30b8:	4640      	mov	r0, r8
    30ba:	f88d 1000 	strb.w	r1, [sp]
    30be:	9900      	ldr	r1, [sp, #0]
    30c0:	9100      	str	r1, [sp, #0]
    30c2:	f89d 1000 	ldrb.w	r1, [sp]
    30c6:	b991      	cbnz	r1, 30ee <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x82>
    30c8:	e002      	b.n	30d0 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x64>
    30ca:	2001      	movs	r0, #1
    30cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    30d0:	8831      	ldrh	r1, [r6, #0]
    30d2:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    30d6:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    30da:	6839      	ldr	r1, [r7, #0]
    30dc:	66e1      	str	r1, [r4, #108]	; 0x6c
    30de:	6879      	ldr	r1, [r7, #4]
    30e0:	6721      	str	r1, [r4, #112]	; 0x70
    30e2:	2202      	movs	r2, #2
    30e4:	4904      	ldr	r1, [pc, #16]	; (30f8 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x8c>)
    30e6:	f104 0060 	add.w	r0, r4, #96	; 0x60
    30ea:	f00a ffd5 	bl	e098 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    30ee:	2000      	movs	r0, #0
    30f0:	e7ec      	b.n	30cc <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x60>
    30f2:	0000      	.short	0x0000
    30f4:	f704492f 	.word	0xf704492f
    30f8:	0000e587 	.word	0x0000e587

000030fc <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
    30fc:	b570      	push	{r4, r5, r6, lr}
    30fe:	1d0d      	adds	r5, r1, #4
    3100:	6844      	ldr	r4, [r0, #4]
    3102:	f004 f9ad 	bl	7460 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    3106:	f641 0207 	movw	r2, #6151	; 0x1807
    310a:	4b05      	ldr	r3, [pc, #20]	; (3120 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x24>)
    310c:	4011      	ands	r1, r2
    310e:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
    3112:	4018      	ands	r0, r3
    3114:	4002      	ands	r2, r0
    3116:	f362 0007 	bfi	r0, r2, #0, #8
    311a:	6028      	str	r0, [r5, #0]
    311c:	6069      	str	r1, [r5, #4]
    311e:	bd70      	pop	{r4, r5, r6, pc}
    3120:	f704492f 	.word	0xf704492f

00003124 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>:
    3124:	6841      	ldr	r1, [r0, #4]
    3126:	b082      	sub	sp, #8
    3128:	f501 70a5 	add.w	r0, r1, #330	; 0x14a
    312c:	f891 21b2 	ldrb.w	r2, [r1, #434]	; 0x1b2
    3130:	f88d 2000 	strb.w	r2, [sp]
    3134:	9a00      	ldr	r2, [sp, #0]
    3136:	9200      	str	r2, [sp, #0]
    3138:	f89d 2000 	ldrb.w	r2, [sp]
    313c:	2a00      	cmp	r2, #0
    313e:	d10b      	bne.n	3158 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x34>
    3140:	8809      	ldrh	r1, [r1, #0]
    3142:	f8a0 106a 	strh.w	r1, [r0, #106]	; 0x6a
    3146:	211a      	movs	r1, #26
    3148:	f880 1069 	strb.w	r1, [r0, #105]	; 0x69
    314c:	2202      	movs	r2, #2
    314e:	4903      	ldr	r1, [pc, #12]	; (315c <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x38>)
    3150:	3060      	adds	r0, #96	; 0x60
    3152:	b002      	add	sp, #8
    3154:	f00a bfa0 	b.w	e098 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3158:	b002      	add	sp, #8
    315a:	4770      	bx	lr
    315c:	0000e587 	.word	0x0000e587

00003160 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>:
    3160:	b570      	push	{r4, r5, r6, lr}
    3162:	6844      	ldr	r4, [r0, #4]
    3164:	460d      	mov	r5, r1
    3166:	7803      	ldrb	r3, [r0, #0]
    3168:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    316c:	3480      	adds	r4, #128	; 0x80
    316e:	2600      	movs	r6, #0
    3170:	2108      	movs	r1, #8
    3172:	4620      	mov	r0, r4
    3174:	f00a fbe8 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    3178:	b920      	cbnz	r0, 3184 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
    317a:	7b20      	ldrb	r0, [r4, #12]
    317c:	0780      	lsls	r0, r0, #30
    317e:	d501      	bpl.n	3184 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
    3180:	2001      	movs	r0, #1
    3182:	bd70      	pop	{r4, r5, r6, pc}
    3184:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    3188:	0780      	lsls	r0, r0, #30
    318a:	d419      	bmi.n	31c0 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x60>
    318c:	4628      	mov	r0, r5
    318e:	f00a ff16 	bl	dfbe <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
    3192:	f884 0067 	strb.w	r0, [r4, #103]	; 0x67
    3196:	f835 0f05 	ldrh.w	r0, [r5, #5]!
    319a:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    319e:	8868      	ldrh	r0, [r5, #2]
    31a0:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    31a4:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    31a8:	f040 0002 	orr.w	r0, r0, #2
    31ac:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    31b0:	07c0      	lsls	r0, r0, #31
    31b2:	d009      	beq.n	31c8 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x68>
    31b4:	2202      	movs	r2, #2
    31b6:	4911      	ldr	r1, [pc, #68]	; (31fc <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x9c>)
    31b8:	f104 005e 	add.w	r0, r4, #94	; 0x5e
    31bc:	f00a ff80 	bl	e0c0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    31c0:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    31c4:	07c0      	lsls	r0, r0, #31
    31c6:	d110      	bne.n	31ea <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x8a>
    31c8:	68e0      	ldr	r0, [r4, #12]
    31ca:	0781      	lsls	r1, r0, #30
    31cc:	d503      	bpl.n	31d6 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x76>
    31ce:	214f      	movs	r1, #79	; 0x4f
    31d0:	2040      	movs	r0, #64	; 0x40
    31d2:	f7fd fbed 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    31d6:	f040 0002 	orr.w	r0, r0, #2
    31da:	60e0      	str	r0, [r4, #12]
    31dc:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    31e0:	1c40      	adds	r0, r0, #1
    31e2:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    31e6:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    31ea:	7f60      	ldrb	r0, [r4, #29]
    31ec:	2801      	cmp	r0, #1
    31ee:	d102      	bne.n	31f6 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x96>
    31f0:	7766      	strb	r6, [r4, #29]
    31f2:	f884 6056 	strb.w	r6, [r4, #86]	; 0x56
    31f6:	2000      	movs	r0, #0
    31f8:	bd70      	pop	{r4, r5, r6, pc}
    31fa:	0000      	.short	0x0000
    31fc:	0000e635 	.word	0x0000e635

00003200 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>:
    3200:	4a04      	ldr	r2, [pc, #16]	; (3214 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ+0x14>)
    3202:	6892      	ldr	r2, [r2, #8]
    3204:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
    3208:	434b      	muls	r3, r1
    320a:	4342      	muls	r2, r0
    320c:	eb03 3022 	add.w	r0, r3, r2, asr #12
    3210:	4770      	bx	lr
    3212:	0000      	.short	0x0000
    3214:	200000dc 	.word	0x200000dc

00003218 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
    3218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    321a:	6844      	ldr	r4, [r0, #4]
    321c:	4606      	mov	r6, r0
    321e:	f104 0580 	add.w	r5, r4, #128	; 0x80
    3222:	f000 f87b 	bl	331c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x104>
    3226:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    322a:	2901      	cmp	r1, #1
    322c:	d11a      	bne.n	3264 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    322e:	2800      	cmp	r0, #0
    3230:	d018      	beq.n	3264 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    3232:	6870      	ldr	r0, [r6, #4]
    3234:	f890 1152 	ldrb.w	r1, [r0, #338]	; 0x152
    3238:	f88d 1000 	strb.w	r1, [sp]
    323c:	9900      	ldr	r1, [sp, #0]
    323e:	9100      	str	r1, [sp, #0]
    3240:	f89d 1000 	ldrb.w	r1, [sp]
    3244:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    3248:	2900      	cmp	r1, #0
    324a:	d10b      	bne.n	3264 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    324c:	8821      	ldrh	r1, [r4, #0]
    324e:	8141      	strh	r1, [r0, #10]
    3250:	7e69      	ldrb	r1, [r5, #25]
    3252:	7301      	strb	r1, [r0, #12]
    3254:	7ea9      	ldrb	r1, [r5, #26]
    3256:	7341      	strb	r1, [r0, #13]
    3258:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    325c:	2202      	movs	r2, #2
    325e:	4902      	ldr	r1, [pc, #8]	; (3268 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>)
    3260:	f00a bf1a 	b.w	e098 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3266:	0000      	.short	0x0000
    3268:	0000e6bd 	.word	0x0000e6bd
    326c:	f500 6100 	add.w	r1, r0, #2048	; 0x800
    3270:	4a0d      	ldr	r2, [pc, #52]	; (32a8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x90>)
    3272:	b510      	push	{r4, lr}
    3274:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    3278:	1309      	asrs	r1, r1, #12
    327a:	1300      	asrs	r0, r0, #12
    327c:	b24b      	sxtb	r3, r1
    327e:	f992 4000 	ldrsb.w	r4, [r2]
    3282:	4240      	negs	r0, r0
    3284:	2100      	movs	r1, #0
    3286:	b240      	sxtb	r0, r0
    3288:	42a3      	cmp	r3, r4
    328a:	da02      	bge.n	3292 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x7a>
    328c:	f992 1002 	ldrsb.w	r1, [r2, #2]
    3290:	e005      	b.n	329e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x86>
    3292:	f992 4001 	ldrsb.w	r4, [r2, #1]
    3296:	42a3      	cmp	r3, r4
    3298:	dd04      	ble.n	32a4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x8c>
    329a:	f992 1003 	ldrsb.w	r1, [r2, #3]
    329e:	4408      	add	r0, r1
    32a0:	f300 0107 	ssat	r1, #8, r0
    32a4:	4608      	mov	r0, r1
    32a6:	bd10      	pop	{r4, pc}
    32a8:	200000dc 	.word	0x200000dc
    32ac:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    32b0:	f5a0 75fa 	sub.w	r5, r0, #500	; 0x1f4
    32b4:	f5a0 74ba 	sub.w	r4, r0, #372	; 0x174
    32b8:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    32bc:	f00c f8b6 	bl	f42c <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    32c0:	4606      	mov	r6, r0
    32c2:	68a0      	ldr	r0, [r4, #8]
    32c4:	f7ff ffd2 	bl	326c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    32c8:	0007      	movs	r7, r0
    32ca:	d021      	beq.n	3310 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    32cc:	4620      	mov	r0, r4
    32ce:	f00b f9fd 	bl	e6cc <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
    32d2:	2800      	cmp	r0, #0
    32d4:	d01c      	beq.n	3310 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    32d6:	8828      	ldrh	r0, [r5, #0]
    32d8:	4669      	mov	r1, sp
    32da:	f00a fb1e 	bl	d91a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    32de:	b118      	cbz	r0, 32e8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xd0>
    32e0:	2185      	movs	r1, #133	; 0x85
    32e2:	207a      	movs	r0, #122	; 0x7a
    32e4:	f7fd fb64 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    32e8:	1c76      	adds	r6, r6, #1
    32ea:	b2f1      	uxtb	r1, r6
    32ec:	2302      	movs	r3, #2
    32ee:	463a      	mov	r2, r7
    32f0:	4668      	mov	r0, sp
    32f2:	f00c f8ba 	bl	f46a <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>
    32f6:	2800      	cmp	r0, #0
    32f8:	d10a      	bne.n	3310 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    32fa:	4806      	ldr	r0, [pc, #24]	; (3314 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfc>)
    32fc:	4906      	ldr	r1, [pc, #24]	; (3318 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x100>)
    32fe:	7900      	ldrb	r0, [r0, #4]
    3300:	fba0 6501 	umull	r6, r5, r0, r1
    3304:	f00d f949 	bl	1059a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    3308:	1980      	adds	r0, r0, r6
    330a:	4169      	adcs	r1, r5
    330c:	e9c4 0100 	strd	r0, r1, [r4]
    3310:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    3314:	200000dc 	.word	0x200000dc
    3318:	000f4240 	.word	0x000f4240
    331c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3320:	4607      	mov	r7, r0
    3322:	f7ff fa91 	bl	2848 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3326:	687c      	ldr	r4, [r7, #4]
    3328:	4605      	mov	r5, r0
    332a:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    332e:	3480      	adds	r4, #128	; 0x80
    3330:	287f      	cmp	r0, #127	; 0x7f
    3332:	d042      	beq.n	33ba <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a2>
    3334:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    3338:	687e      	ldr	r6, [r7, #4]
    333a:	76a0      	strb	r0, [r4, #26]
    333c:	4629      	mov	r1, r5
    333e:	68a0      	ldr	r0, [r4, #8]
    3340:	f7ff ff5e 	bl	3200 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>
    3344:	60a0      	str	r0, [r4, #8]
    3346:	481e      	ldr	r0, [pc, #120]	; (33c0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a8>)
    3348:	7940      	ldrb	r0, [r0, #5]
    334a:	b1c0      	cbz	r0, 337e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    334c:	6878      	ldr	r0, [r7, #4]
    334e:	f100 0880 	add.w	r8, r0, #128	; 0x80
    3352:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    3356:	f7ff ff89 	bl	326c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    335a:	b180      	cbz	r0, 337e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    335c:	4640      	mov	r0, r8
    335e:	f00b f9b5 	bl	e6cc <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
    3362:	b160      	cbz	r0, 337e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    3364:	6878      	ldr	r0, [r7, #4]
    3366:	f500 78a5 	add.w	r8, r0, #330	; 0x14a
    336a:	4607      	mov	r7, r0
    336c:	f004 fca2 	bl	7cb4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    3370:	f887 006b 	strb.w	r0, [r7, #107]	; 0x6b
    3374:	4913      	ldr	r1, [pc, #76]	; (33c4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1ac>)
    3376:	f108 00aa 	add.w	r0, r8, #170	; 0xaa
    337a:	f00a fe8a 	bl	e092 <sym_OHZGE3PRU72NL3TJSLCEUVROHETUDPWEUAQ7GMA>
    337e:	f994 001b 	ldrsb.w	r0, [r4, #27]
    3382:	2100      	movs	r1, #0
    3384:	1a28      	subs	r0, r5, r0
    3386:	d500      	bpl.n	338a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x172>
    3388:	4240      	negs	r0, r0
    338a:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
    338e:	4282      	cmp	r2, r0
    3390:	dc10      	bgt.n	33b4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    3392:	2aff      	cmp	r2, #255	; 0xff
    3394:	d00e      	beq.n	33b4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    3396:	7f20      	ldrb	r0, [r4, #28]
    3398:	1c40      	adds	r0, r0, #1
    339a:	b2c0      	uxtb	r0, r0
    339c:	7720      	strb	r0, [r4, #28]
    339e:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
    33a2:	4290      	cmp	r0, r2
    33a4:	d802      	bhi.n	33ac <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x194>
    33a6:	7ee0      	ldrb	r0, [r4, #27]
    33a8:	287f      	cmp	r0, #127	; 0x7f
    33aa:	d103      	bne.n	33b4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    33ac:	2000      	movs	r0, #0
    33ae:	76e5      	strb	r5, [r4, #27]
    33b0:	7720      	strb	r0, [r4, #28]
    33b2:	2101      	movs	r1, #1
    33b4:	4608      	mov	r0, r1
    33b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    33ba:	2000      	movs	r0, #0
    33bc:	e7fb      	b.n	33b6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19e>
    33be:	0000      	.short	0x0000
    33c0:	200000dc 	.word	0x200000dc
    33c4:	000032ad 	.word	0x000032ad

000033c8 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>:
    33c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33ca:	f00b f99b 	bl	e704 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    33ce:	4604      	mov	r4, r0
    33d0:	460d      	mov	r5, r1
    33d2:	466a      	mov	r2, sp
    33d4:	f000 f862 	bl	349c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    33d8:	b108      	cbz	r0, 33de <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x16>
    33da:	2001      	movs	r0, #1
    33dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33de:	480f      	ldr	r0, [pc, #60]	; (341c <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x54>)
    33e0:	7803      	ldrb	r3, [r0, #0]
    33e2:	7841      	ldrb	r1, [r0, #1]
    33e4:	428b      	cmp	r3, r1
    33e6:	d101      	bne.n	33ec <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x24>
    33e8:	2000      	movs	r0, #0
    33ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33ec:	461a      	mov	r2, r3
    33ee:	6841      	ldr	r1, [r0, #4]
    33f0:	e008      	b.n	3404 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x3c>
    33f2:	bf00      	nop
    33f4:	eb01 06c2 	add.w	r6, r1, r2, lsl #3
    33f8:	1e52      	subs	r2, r2, #1
    33fa:	e956 7c02 	ldrd	r7, ip, [r6, #-8]
    33fe:	e9c6 7c00 	strd	r7, ip, [r6]
    3402:	b2d2      	uxtb	r2, r2
    3404:	f89d 6000 	ldrb.w	r6, [sp]
    3408:	42b2      	cmp	r2, r6
    340a:	d8f3      	bhi.n	33f4 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x2c>
    340c:	b2f2      	uxtb	r2, r6
    340e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    3412:	1c5b      	adds	r3, r3, #1
    3414:	e9c1 4500 	strd	r4, r5, [r1]
    3418:	7003      	strb	r3, [r0, #0]
    341a:	e7de      	b.n	33da <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x12>
    341c:	200000e8 	.word	0x200000e8

00003420 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>:
    3420:	b510      	push	{r4, lr}
    3422:	0742      	lsls	r2, r0, #29
    3424:	d003      	beq.n	342e <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0xe>
    3426:	2163      	movs	r1, #99	; 0x63
    3428:	2048      	movs	r0, #72	; 0x48
    342a:	f7fd fac1 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    342e:	b120      	cbz	r0, 343a <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x1a>
    3430:	4a03      	ldr	r2, [pc, #12]	; (3440 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x20>)
    3432:	7051      	strb	r1, [r2, #1]
    3434:	6050      	str	r0, [r2, #4]
    3436:	2000      	movs	r0, #0
    3438:	7010      	strb	r0, [r2, #0]
    343a:	00c8      	lsls	r0, r1, #3
    343c:	bd10      	pop	{r4, pc}
    343e:	0000      	.short	0x0000
    3440:	200000e8 	.word	0x200000e8

00003444 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>:
    3444:	b538      	push	{r3, r4, r5, lr}
    3446:	f00b f95d 	bl	e704 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    344a:	466a      	mov	r2, sp
    344c:	f000 f826 	bl	349c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    3450:	2800      	cmp	r0, #0
    3452:	d014      	beq.n	347e <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3a>
    3454:	4a0a      	ldr	r2, [pc, #40]	; (3480 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3c>)
    3456:	7810      	ldrb	r0, [r2, #0]
    3458:	1e40      	subs	r0, r0, #1
    345a:	b2c1      	uxtb	r1, r0
    345c:	7011      	strb	r1, [r2, #0]
    345e:	f89d 0000 	ldrb.w	r0, [sp]
    3462:	6852      	ldr	r2, [r2, #4]
    3464:	e008      	b.n	3478 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x34>
    3466:	bf00      	nop
    3468:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
    346c:	1c40      	adds	r0, r0, #1
    346e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    3472:	e9c3 4500 	strd	r4, r5, [r3]
    3476:	b2c0      	uxtb	r0, r0
    3478:	4288      	cmp	r0, r1
    347a:	d3f5      	bcc.n	3468 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x24>
    347c:	2001      	movs	r0, #1
    347e:	bd38      	pop	{r3, r4, r5, pc}
    3480:	200000e8 	.word	0x200000e8

00003484 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>:
    3484:	4901      	ldr	r1, [pc, #4]	; (348c <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ+0x8>)
    3486:	2000      	movs	r0, #0
    3488:	7008      	strb	r0, [r1, #0]
    348a:	4770      	bx	lr
    348c:	200000e8 	.word	0x200000e8

00003490 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>:
    3490:	4801      	ldr	r0, [pc, #4]	; (3498 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8>)
    3492:	7840      	ldrb	r0, [r0, #1]
    3494:	4770      	bx	lr
    3496:	0000      	.short	0x0000
    3498:	200000e8 	.word	0x200000e8
    349c:	b5f0      	push	{r4, r5, r6, r7, lr}
    349e:	4d20      	ldr	r5, [pc, #128]	; (3520 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x90>)
    34a0:	2300      	movs	r3, #0
    34a2:	7013      	strb	r3, [r2, #0]
    34a4:	782b      	ldrb	r3, [r5, #0]
    34a6:	b323      	cbz	r3, 34f2 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x62>
    34a8:	2400      	movs	r4, #0
    34aa:	1e5b      	subs	r3, r3, #1
    34ac:	b2db      	uxtb	r3, r3
    34ae:	f8d5 c004 	ldr.w	ip, [r5, #4]
    34b2:	e00b      	b.n	34cc <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    34b4:	18e5      	adds	r5, r4, r3
    34b6:	086d      	lsrs	r5, r5, #1
    34b8:	eb0c 06c5 	add.w	r6, ip, r5, lsl #3
    34bc:	e9d6 7600 	ldrd	r7, r6, [r6]
    34c0:	1a3f      	subs	r7, r7, r0
    34c2:	418e      	sbcs	r6, r1
    34c4:	d201      	bcs.n	34ca <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3a>
    34c6:	462c      	mov	r4, r5
    34c8:	e000      	b.n	34cc <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    34ca:	462b      	mov	r3, r5
    34cc:	1b1d      	subs	r5, r3, r4
    34ce:	2d01      	cmp	r5, #1
    34d0:	dcf0      	bgt.n	34b4 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x24>
    34d2:	eb0c 06c4 	add.w	r6, ip, r4, lsl #3
    34d6:	e9d6 5600 	ldrd	r5, r6, [r6]
    34da:	ea80 0705 	eor.w	r7, r0, r5
    34de:	ea81 0e06 	eor.w	lr, r1, r6
    34e2:	ea57 070e 	orrs.w	r7, r7, lr
    34e6:	d005      	beq.n	34f4 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x64>
    34e8:	1b45      	subs	r5, r0, r5
    34ea:	eb71 0506 	sbcs.w	r5, r1, r6
    34ee:	d203      	bcs.n	34f8 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x68>
    34f0:	7014      	strb	r4, [r2, #0]
    34f2:	e010      	b.n	3516 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x86>
    34f4:	7014      	strb	r4, [r2, #0]
    34f6:	e011      	b.n	351c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8c>
    34f8:	eb0c 05c3 	add.w	r5, ip, r3, lsl #3
    34fc:	e9d5 4500 	ldrd	r4, r5, [r5]
    3500:	ea80 0604 	eor.w	r6, r0, r4
    3504:	ea81 0705 	eor.w	r7, r1, r5
    3508:	433e      	orrs	r6, r7
    350a:	d006      	beq.n	351a <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8a>
    350c:	1b00      	subs	r0, r0, r4
    350e:	41a9      	sbcs	r1, r5
    3510:	d300      	bcc.n	3514 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x84>
    3512:	1c5b      	adds	r3, r3, #1
    3514:	7013      	strb	r3, [r2, #0]
    3516:	2000      	movs	r0, #0
    3518:	bdf0      	pop	{r4, r5, r6, r7, pc}
    351a:	7013      	strb	r3, [r2, #0]
    351c:	2001      	movs	r0, #1
    351e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3520:	200000e8 	.word	0x200000e8

00003524 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    3524:	b570      	push	{r4, r5, r6, lr}
    3526:	4604      	mov	r4, r0
    3528:	7c00      	ldrb	r0, [r0, #16]
    352a:	b300      	cbz	r0, 356e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    352c:	2802      	cmp	r0, #2
    352e:	d01e      	beq.n	356e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    3530:	f05f 0001 	movs.w	r0, #1
    3534:	f104 0151 	add.w	r1, r4, #81	; 0x51
    3538:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    353c:	460d      	mov	r5, r1
    353e:	b1c0      	cbz	r0, 3572 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    3540:	7de0      	ldrb	r0, [r4, #23]
    3542:	b1f0      	cbz	r0, 3582 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    3544:	f8d4 0011 	ldr.w	r0, [r4, #17]
    3548:	f8c4 0051 	str.w	r0, [r4, #81]	; 0x51
    354c:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    3550:	f8a4 0055 	strh.w	r0, [r4, #85]	; 0x55
    3554:	7c20      	ldrb	r0, [r4, #16]
    3556:	f00b f905 	bl	e764 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    355a:	7620      	strb	r0, [r4, #24]
    355c:	2008      	movs	r0, #8
    355e:	7660      	strb	r0, [r4, #25]
    3560:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3564:	4629      	mov	r1, r5
    3566:	f00b f8e9 	bl	e73c <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    356a:	b9a8      	cbnz	r0, 3598 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    356c:	e00e      	b.n	358c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    356e:	2000      	movs	r0, #0
    3570:	e7e0      	b.n	3534 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    3572:	2000      	movs	r0, #0
    3574:	f7fe f980 	bl	1878 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    3578:	2800      	cmp	r0, #0
    357a:	d1eb      	bne.n	3554 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    357c:	f240 41ba 	movw	r1, #1210	; 0x4ba
    3580:	e001      	b.n	3586 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    3582:	f240 41be 	movw	r1, #1214	; 0x4be
    3586:	202d      	movs	r0, #45	; 0x2d
    3588:	f7fd fa12 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    358c:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3590:	4629      	mov	r1, r5
    3592:	f00b f8dc 	bl	e74e <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    3596:	b100      	cbz	r0, 359a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    3598:	2001      	movs	r0, #1
    359a:	76a0      	strb	r0, [r4, #26]
    359c:	7e20      	ldrb	r0, [r4, #24]
    359e:	b130      	cbz	r0, 35ae <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    35a0:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    35a4:	f104 0158 	add.w	r1, r4, #88	; 0x58
    35a8:	f00a f980 	bl	d8ac <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    35ac:	7660      	strb	r0, [r4, #25]
    35ae:	f7fe ffb5 	bl	251c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    35b2:	490c      	ldr	r1, [pc, #48]	; (35e4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    35b4:	fba0 2301 	umull	r2, r3, r0, r1
    35b8:	f104 0048 	add.w	r0, r4, #72	; 0x48
    35bc:	f00b fa44 	bl	ea48 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x12e>
    35c0:	2100      	movs	r1, #0
    35c2:	4620      	mov	r0, r4
    35c4:	f00b f9f9 	bl	e9ba <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa0>
    35c8:	2000      	movs	r0, #0
    35ca:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    35ce:	78a0      	ldrb	r0, [r4, #2]
    35d0:	0740      	lsls	r0, r0, #29
    35d2:	d505      	bpl.n	35e0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    35d4:	4620      	mov	r0, r4
    35d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    35da:	2100      	movs	r1, #0
    35dc:	f000 bdf0 	b.w	41c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c0>
    35e0:	bd70      	pop	{r4, r5, r6, pc}
    35e2:	0000      	.short	0x0000
    35e4:	000f4240 	.word	0x000f4240

000035e8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    35e8:	b530      	push	{r4, r5, lr}
    35ea:	460c      	mov	r4, r1
    35ec:	b08d      	sub	sp, #52	; 0x34
    35ee:	4605      	mov	r5, r0
    35f0:	4601      	mov	r1, r0
    35f2:	2224      	movs	r2, #36	; 0x24
    35f4:	a802      	add	r0, sp, #8
    35f6:	f00d f962 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    35fa:	a80b      	add	r0, sp, #44	; 0x2c
    35fc:	f00b fa81 	bl	eb02 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    3600:	7aa0      	ldrb	r0, [r4, #10]
    3602:	f88d 0018 	strb.w	r0, [sp, #24]
    3606:	7820      	ldrb	r0, [r4, #0]
    3608:	f88d 0008 	strb.w	r0, [sp, #8]
    360c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    3610:	f8ad 0000 	strh.w	r0, [sp]
    3614:	f89d 0000 	ldrb.w	r0, [sp]
    3618:	f000 0101 	and.w	r1, r0, #1
    361c:	f3c0 0240 	ubfx	r2, r0, #1, #1
    3620:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    3624:	f3c0 0280 	ubfx	r2, r0, #2, #1
    3628:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    362c:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    3630:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    3634:	f3c0 1200 	ubfx	r2, r0, #4, #1
    3638:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    363c:	f3c0 1240 	ubfx	r2, r0, #5, #1
    3640:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    3644:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3648:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    364c:	f8ad 000a 	strh.w	r0, [sp, #10]
    3650:	7d20      	ldrb	r0, [r4, #20]
    3652:	2801      	cmp	r0, #1
    3654:	d006      	beq.n	3664 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    3656:	2802      	cmp	r0, #2
    3658:	d004      	beq.n	3664 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    365a:	f240 21e9 	movw	r1, #745	; 0x2e9
    365e:	2006      	movs	r0, #6
    3660:	f7fd f9a6 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3664:	f88d 000c 	strb.w	r0, [sp, #12]
    3668:	7a61      	ldrb	r1, [r4, #9]
    366a:	a80b      	add	r0, sp, #44	; 0x2c
    366c:	f00b fa30 	bl	ead0 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    3670:	7d20      	ldrb	r0, [r4, #20]
    3672:	2101      	movs	r1, #1
    3674:	2802      	cmp	r0, #2
    3676:	d102      	bne.n	367e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    3678:	7d60      	ldrb	r0, [r4, #21]
    367a:	1c40      	adds	r0, r0, #1
    367c:	b2c1      	uxtb	r1, r0
    367e:	7ea0      	ldrb	r0, [r4, #26]
    3680:	1c40      	adds	r0, r0, #1
    3682:	b2c2      	uxtb	r2, r0
    3684:	a80b      	add	r0, sp, #44	; 0x2c
    3686:	f00b f9ea 	bl	ea5e <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    368a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    368e:	0700      	lsls	r0, r0, #28
    3690:	d501      	bpl.n	3696 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    3692:	2000      	movs	r0, #0
    3694:	e020      	b.n	36d8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    3696:	a80b      	add	r0, sp, #44	; 0x2c
    3698:	f00b f9f3 	bl	ea82 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    369c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    36a0:	2228      	movs	r2, #40	; 0x28
    36a2:	f000 fe31 	bl	4308 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    36a6:	f240 2171 	movw	r1, #625	; 0x271
    36aa:	f200 20db 	addw	r0, r0, #731	; 0x2db
    36ae:	fbb0 f0f1 	udiv	r0, r0, r1
    36b2:	4348      	muls	r0, r1
    36b4:	f8d4 1002 	ldr.w	r1, [r4, #2]
    36b8:	f240 2371 	movw	r3, #625	; 0x271
    36bc:	0a0a      	lsrs	r2, r1, #8
    36be:	f240 2171 	movw	r1, #625	; 0x271
    36c2:	434a      	muls	r2, r1
    36c4:	f8d4 1005 	ldr.w	r1, [r4, #5]
    36c8:	0a09      	lsrs	r1, r1, #8
    36ca:	4359      	muls	r1, r3
    36cc:	4290      	cmp	r0, r2
    36ce:	d801      	bhi.n	36d4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    36d0:	9204      	str	r2, [sp, #16]
    36d2:	e004      	b.n	36de <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    36d4:	4288      	cmp	r0, r1
    36d6:	d801      	bhi.n	36dc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    36d8:	9004      	str	r0, [sp, #16]
    36da:	e000      	b.n	36de <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    36dc:	9104      	str	r1, [sp, #16]
    36de:	7ca0      	ldrb	r0, [r4, #18]
    36e0:	f88d 0017 	strb.w	r0, [sp, #23]
    36e4:	7e20      	ldrb	r0, [r4, #24]
    36e6:	2801      	cmp	r0, #1
    36e8:	d000      	beq.n	36ec <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    36ea:	2000      	movs	r0, #0
    36ec:	f88d 0014 	strb.w	r0, [sp, #20]
    36f0:	6b68      	ldr	r0, [r5, #52]	; 0x34
    36f2:	f009 ff43 	bl	d57c <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    36f6:	6b68      	ldr	r0, [r5, #52]	; 0x34
    36f8:	f009 ffe8 	bl	d6cc <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    36fc:	2224      	movs	r2, #36	; 0x24
    36fe:	a902      	add	r1, sp, #8
    3700:	4628      	mov	r0, r5
    3702:	f00d f8dc 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3706:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3708:	62a8      	str	r0, [r5, #40]	; 0x28
    370a:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    370e:	85a8      	strh	r0, [r5, #44]	; 0x2c
    3710:	7ae0      	ldrb	r0, [r4, #11]
    3712:	b168      	cbz	r0, 3730 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    3714:	2802      	cmp	r0, #2
    3716:	d00b      	beq.n	3730 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    3718:	f05f 0001 	movs.w	r0, #1
    371c:	f885 0057 	strb.w	r0, [r5, #87]	; 0x57
    3720:	68e0      	ldr	r0, [r4, #12]
    3722:	65a8      	str	r0, [r5, #88]	; 0x58
    3724:	8a20      	ldrh	r0, [r4, #16]
    3726:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    372a:	b00d      	add	sp, #52	; 0x34
    372c:	2000      	movs	r0, #0
    372e:	bd30      	pop	{r4, r5, pc}
    3730:	2000      	movs	r0, #0
    3732:	e7f3      	b.n	371c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00003734 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    3734:	4a0a      	ldr	r2, [pc, #40]	; (3760 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    3736:	b510      	push	{r4, lr}
    3738:	2100      	movs	r1, #0
    373a:	7011      	strb	r1, [r2, #0]
    373c:	4c09      	ldr	r4, [pc, #36]	; (3764 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    373e:	6060      	str	r0, [r4, #4]
    3740:	f000 f822 	bl	3788 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    3744:	b110      	cbz	r0, 374c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    3746:	f240 312e 	movw	r1, #814	; 0x32e
    374a:	e004      	b.n	3756 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    374c:	68a0      	ldr	r0, [r4, #8]
    374e:	2800      	cmp	r0, #0
    3750:	d104      	bne.n	375c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    3752:	f240 3131 	movw	r1, #817	; 0x331
    3756:	202d      	movs	r0, #45	; 0x2d
    3758:	f7fd f92a 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    375c:	bd10      	pop	{r4, pc}
    375e:	0000      	.short	0x0000
    3760:	200011d8 	.word	0x200011d8
    3764:	200000f0 	.word	0x200000f0

00003768 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    3768:	4902      	ldr	r1, [pc, #8]	; (3774 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    376a:	4801      	ldr	r0, [pc, #4]	; (3770 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    376c:	6088      	str	r0, [r1, #8]
    376e:	4770      	bx	lr
    3770:	000042f0 	.word	0x000042f0
    3774:	200000f0 	.word	0x200000f0

00003778 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    3778:	4902      	ldr	r1, [pc, #8]	; (3784 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    377a:	6008      	str	r0, [r1, #0]
    377c:	6889      	ldr	r1, [r1, #8]
    377e:	6809      	ldr	r1, [r1, #0]
    3780:	4708      	bx	r1
    3782:	0000      	.short	0x0000
    3784:	200000f0 	.word	0x200000f0

00003788 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    3788:	4808      	ldr	r0, [pc, #32]	; (37ac <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    378a:	b510      	push	{r4, lr}
    378c:	7800      	ldrb	r0, [r0, #0]
    378e:	b110      	cbz	r0, 3796 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    3790:	240c      	movs	r4, #12
    3792:	4620      	mov	r0, r4
    3794:	bd10      	pop	{r4, pc}
    3796:	2400      	movs	r4, #0
    3798:	2218      	movs	r2, #24
    379a:	4621      	mov	r1, r4
    379c:	4803      	ldr	r0, [pc, #12]	; (37ac <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    379e:	f00d f908 	bl	109b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    37a2:	f004 f8d9 	bl	7958 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    37a6:	f003 fefd 	bl	75a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    37aa:	e7f2      	b.n	3792 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    37ac:	200011d8 	.word	0x200011d8

000037b0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    37b0:	4904      	ldr	r1, [pc, #16]	; (37c4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    37b2:	b510      	push	{r4, lr}
    37b4:	7809      	ldrb	r1, [r1, #0]
    37b6:	2901      	cmp	r1, #1
    37b8:	d101      	bne.n	37be <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    37ba:	f000 fbd5 	bl	3f68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    37be:	2000      	movs	r0, #0
    37c0:	bd10      	pop	{r4, pc}
    37c2:	0000      	.short	0x0000
    37c4:	200011d8 	.word	0x200011d8

000037c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    37c8:	4902      	ldr	r1, [pc, #8]	; (37d4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    37ca:	4801      	ldr	r0, [pc, #4]	; (37d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    37cc:	6008      	str	r0, [r1, #0]
    37ce:	4770      	bx	lr
    37d0:	00004095 	.word	0x00004095
    37d4:	200000fc 	.word	0x200000fc

000037d8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    37d8:	b510      	push	{r4, lr}
    37da:	4604      	mov	r4, r0
    37dc:	7880      	ldrb	r0, [r0, #2]
    37de:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    37e2:	b158      	cbz	r0, 37fc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    37e4:	233c      	movs	r3, #60	; 0x3c
    37e6:	22ff      	movs	r2, #255	; 0xff
    37e8:	4620      	mov	r0, r4
    37ea:	69e1      	ldr	r1, [r4, #28]
    37ec:	f000 fbe2 	bl	3fb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a0>
    37f0:	2202      	movs	r2, #2
    37f2:	4904      	ldr	r1, [pc, #16]	; (3804 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2c>)
    37f4:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    37f8:	f00a fc4e 	bl	e098 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    37fc:	2001      	movs	r0, #1
    37fe:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    3802:	bd10      	pop	{r4, pc}
    3804:	0000e953 	.word	0x0000e953
    3808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    380c:	000f      	movs	r7, r1
    380e:	4604      	mov	r4, r0
    3810:	d023      	beq.n	385a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x82>
    3812:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3816:	4605      	mov	r5, r0
    3818:	f00b f95c 	bl	ead4 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    381c:	b9b0      	cbnz	r0, 384c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x74>
    381e:	78a0      	ldrb	r0, [r4, #2]
    3820:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3824:	b350      	cbz	r0, 387c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa4>
    3826:	4628      	mov	r0, r5
    3828:	f00b f92b 	bl	ea82 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    382c:	4606      	mov	r6, r0
    382e:	4628      	mov	r0, r5
    3830:	f00b f950 	bl	ead4 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    3834:	1a30      	subs	r0, r6, r0
    3836:	b2c0      	uxtb	r0, r0
    3838:	f00b f9a1 	bl	eb7e <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    383c:	4601      	mov	r1, r0
    383e:	4835      	ldr	r0, [pc, #212]	; (3914 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x13c>)
    3840:	6842      	ldr	r2, [r0, #4]
    3842:	4411      	add	r1, r2
    3844:	6041      	str	r1, [r0, #4]
    3846:	4628      	mov	r0, r5
    3848:	f00b f962 	bl	eb10 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    384c:	4628      	mov	r0, r5
    384e:	f00b f924 	bl	ea9a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    3852:	4601      	mov	r1, r0
    3854:	4620      	mov	r0, r4
    3856:	f00b f8ec 	bl	ea32 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x118>
    385a:	4d2f      	ldr	r5, [pc, #188]	; (3918 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x140>)
    385c:	f894 605e 	ldrb.w	r6, [r4, #94]	; 0x5e
    3860:	2100      	movs	r1, #0
    3862:	6868      	ldr	r0, [r5, #4]
    3864:	8001      	strh	r1, [r0, #0]
    3866:	f00b f85d 	bl	e924 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    386a:	8860      	ldrh	r0, [r4, #2]
    386c:	2813      	cmp	r0, #19
    386e:	d013      	beq.n	3898 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xc0>
    3870:	dc09      	bgt.n	3886 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xae>
    3872:	2810      	cmp	r0, #16
    3874:	d036      	beq.n	38e4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10c>
    3876:	2812      	cmp	r0, #18
    3878:	d109      	bne.n	388e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb6>
    387a:	e031      	b.n	38e0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x108>
    387c:	4620      	mov	r0, r4
    387e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3882:	f000 bb71 	b.w	3f68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    3886:	2815      	cmp	r0, #21
    3888:	d00f      	beq.n	38aa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    388a:	281d      	cmp	r0, #29
    388c:	d00d      	beq.n	38aa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    388e:	f240 6173 	movw	r1, #1651	; 0x673
    3892:	202d      	movs	r0, #45	; 0x2d
    3894:	f7fd f88c 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3898:	2100      	movs	r1, #0
    389a:	6868      	ldr	r0, [r5, #4]
    389c:	f00a fa7a 	bl	dd94 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    38a0:	2101      	movs	r1, #1
    38a2:	6868      	ldr	r0, [r5, #4]
    38a4:	f00b f83e 	bl	e924 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    38a8:	e020      	b.n	38ec <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    38aa:	2101      	movs	r1, #1
    38ac:	6868      	ldr	r0, [r5, #4]
    38ae:	f00a fa71 	bl	dd94 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    38b2:	2101      	movs	r1, #1
    38b4:	6868      	ldr	r0, [r5, #4]
    38b6:	f00b f835 	bl	e924 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    38ba:	b136      	cbz	r6, 38ca <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xf2>
    38bc:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    38c0:	6868      	ldr	r0, [r5, #4]
    38c2:	f00a fa82 	bl	ddca <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    38c6:	2101      	movs	r1, #1
    38c8:	e006      	b.n	38d8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x100>
    38ca:	f104 0158 	add.w	r1, r4, #88	; 0x58
    38ce:	6868      	ldr	r0, [r5, #4]
    38d0:	f00a fa7b 	bl	ddca <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    38d4:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
    38d8:	6868      	ldr	r0, [r5, #4]
    38da:	f00a fa7c 	bl	ddd6 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    38de:	e005      	b.n	38ec <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    38e0:	2106      	movs	r1, #6
    38e2:	e000      	b.n	38e6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10e>
    38e4:	2102      	movs	r1, #2
    38e6:	6868      	ldr	r0, [r5, #4]
    38e8:	f00a fa54 	bl	dd94 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    38ec:	4620      	mov	r0, r4
    38ee:	f000 fcdd 	bl	42ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ac>
    38f2:	8860      	ldrh	r0, [r4, #2]
    38f4:	281d      	cmp	r0, #29
    38f6:	d007      	beq.n	3908 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    38f8:	2815      	cmp	r0, #21
    38fa:	d005      	beq.n	3908 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    38fc:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    3900:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    3902:	6868      	ldr	r0, [r5, #4]
    3904:	f00a fa36 	bl	dd74 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
    3908:	4639      	mov	r1, r7
    390a:	4620      	mov	r0, r4
    390c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3910:	f000 b9f4 	b.w	3cfc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e8>
    3914:	200011d8 	.word	0x200011d8
    3918:	200000f0 	.word	0x200000f0
    391c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3920:	4d2f      	ldr	r5, [pc, #188]	; (39e0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x208>)
    3922:	4680      	mov	r8, r0
    3924:	7828      	ldrb	r0, [r5, #0]
    3926:	2802      	cmp	r0, #2
    3928:	d005      	beq.n	3936 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    392a:	7828      	ldrb	r0, [r5, #0]
    392c:	2803      	cmp	r0, #3
    392e:	d002      	beq.n	3936 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    3930:	f640 512d 	movw	r1, #3373	; 0xd2d
    3934:	e02b      	b.n	398e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1b6>
    3936:	4c2b      	ldr	r4, [pc, #172]	; (39e4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x20c>)
    3938:	6826      	ldr	r6, [r4, #0]
    393a:	7b30      	ldrb	r0, [r6, #12]
    393c:	b118      	cbz	r0, 3946 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x16e>
    393e:	f7fe ff83 	bl	2848 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3942:	f886 002e 	strb.w	r0, [r6, #46]	; 0x2e
    3946:	f8d4 c004 	ldr.w	ip, [r4, #4]
    394a:	2700      	movs	r7, #0
    394c:	f1b8 0f00 	cmp.w	r8, #0
    3950:	f89c 0000 	ldrb.w	r0, [ip]
    3954:	f000 060f 	and.w	r6, r0, #15
    3958:	d027      	beq.n	39aa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    395a:	6821      	ldr	r1, [r4, #0]
    395c:	09c0      	lsrs	r0, r0, #7
    395e:	f101 0351 	add.w	r3, r1, #81	; 0x51
    3962:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    3966:	f10c 0109 	add.w	r1, ip, #9
    396a:	f009 ff07 	bl	d77c <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    396e:	b1e0      	cbz	r0, 39aa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    3970:	4639      	mov	r1, r7
    3972:	6860      	ldr	r0, [r4, #4]
    3974:	f00a f9ee 	bl	dd54 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
    3978:	b1b8      	cbz	r0, 39aa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    397a:	782a      	ldrb	r2, [r5, #0]
    397c:	6820      	ldr	r0, [r4, #0]
    397e:	4631      	mov	r1, r6
    3980:	2a02      	cmp	r2, #2
    3982:	d007      	beq.n	3994 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    3984:	782a      	ldrb	r2, [r5, #0]
    3986:	2a03      	cmp	r2, #3
    3988:	d004      	beq.n	3994 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    398a:	f640 5106 	movw	r1, #3334	; 0xd06
    398e:	202d      	movs	r0, #45	; 0x2d
    3990:	f7fd f80e 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3994:	68a2      	ldr	r2, [r4, #8]
    3996:	782b      	ldrb	r3, [r5, #0]
    3998:	6952      	ldr	r2, [r2, #20]
    399a:	f06f 0607 	mvn.w	r6, #7
    399e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    39a2:	58d2      	ldr	r2, [r2, r3]
    39a4:	4790      	blx	r2
    39a6:	4606      	mov	r6, r0
    39a8:	e000      	b.n	39ac <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d4>
    39aa:	2601      	movs	r6, #1
    39ac:	7ba8      	ldrb	r0, [r5, #14]
    39ae:	b118      	cbz	r0, 39b8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e0>
    39b0:	f003 ffd2 	bl	7958 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    39b4:	f003 fdf6 	bl	75a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    39b8:	2e00      	cmp	r6, #0
    39ba:	d00f      	beq.n	39dc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x204>
    39bc:	6820      	ldr	r0, [r4, #0]
    39be:	f00b f8f4 	bl	ebaa <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    39c2:	b130      	cbz	r0, 39d2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1fa>
    39c4:	f003 ffea 	bl	799c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    39c8:	68a0      	ldr	r0, [r4, #8]
    39ca:	6880      	ldr	r0, [r0, #8]
    39cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    39d0:	4700      	bx	r0
    39d2:	6820      	ldr	r0, [r4, #0]
    39d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    39d8:	f000 bac6 	b.w	3f68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    39dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39e0:	200011d8 	.word	0x200011d8
    39e4:	200000f0 	.word	0x200000f0
    39e8:	b510      	push	{r4, lr}
    39ea:	2903      	cmp	r1, #3
    39ec:	d002      	beq.n	39f4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x21c>
    39ee:	2905      	cmp	r1, #5
    39f0:	d10a      	bne.n	3a08 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
    39f2:	e002      	b.n	39fa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x222>
    39f4:	f000 fbb2 	bl	415c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x15c>
    39f8:	e003      	b.n	3a02 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22a>
    39fa:	4904      	ldr	r1, [pc, #16]	; (3a0c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x234>)
    39fc:	6809      	ldr	r1, [r1, #0]
    39fe:	b109      	cbz	r1, 3a04 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22c>
    3a00:	4788      	blx	r1
    3a02:	b108      	cbz	r0, 3a08 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
    3a04:	2000      	movs	r0, #0
    3a06:	bd10      	pop	{r4, pc}
    3a08:	2001      	movs	r0, #1
    3a0a:	bd10      	pop	{r4, pc}
    3a0c:	200000fc 	.word	0x200000fc
    3a10:	4a09      	ldr	r2, [pc, #36]	; (3a38 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x260>)
    3a12:	0003      	movs	r3, r0
    3a14:	6810      	ldr	r0, [r2, #0]
    3a16:	d001      	beq.n	3a1c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x244>
    3a18:	f000 baa6 	b.w	3f68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    3a1c:	2900      	cmp	r1, #0
    3a1e:	d009      	beq.n	3a34 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x25c>
    3a20:	6891      	ldr	r1, [r2, #8]
    3a22:	4a06      	ldr	r2, [pc, #24]	; (3a3c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x264>)
    3a24:	6909      	ldr	r1, [r1, #16]
    3a26:	7812      	ldrb	r2, [r2, #0]
    3a28:	f06f 030f 	mvn.w	r3, #15
    3a2c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3a30:	5889      	ldr	r1, [r1, r2]
    3a32:	4708      	bx	r1
    3a34:	4770      	bx	lr
    3a36:	0000      	.short	0x0000
    3a38:	200000f0 	.word	0x200000f0
    3a3c:	200011d8 	.word	0x200011d8
    3a40:	b570      	push	{r4, r5, r6, lr}
    3a42:	4604      	mov	r4, r0
    3a44:	8840      	ldrh	r0, [r0, #2]
    3a46:	2810      	cmp	r0, #16
    3a48:	d019      	beq.n	3a7e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2a6>
    3a4a:	4d10      	ldr	r5, [pc, #64]	; (3a8c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2b4>)
    3a4c:	7ba8      	ldrb	r0, [r5, #14]
    3a4e:	b120      	cbz	r0, 3a5a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x282>
    3a50:	f003 fdc8 	bl	75e4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    3a54:	2040      	movs	r0, #64	; 0x40
    3a56:	f003 ff8d 	bl	7974 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    3a5a:	480d      	ldr	r0, [pc, #52]	; (3a90 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2b8>)
    3a5c:	6840      	ldr	r0, [r0, #4]
    3a5e:	f004 fa0f 	bl	7e80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3a62:	78a0      	ldrb	r0, [r4, #2]
    3a64:	0740      	lsls	r0, r0, #29
    3a66:	d404      	bmi.n	3a72 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x29a>
    3a68:	2100      	movs	r1, #0
    3a6a:	7922      	ldrb	r2, [r4, #4]
    3a6c:	4608      	mov	r0, r1
    3a6e:	f004 fa8f 	bl	7f90 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    3a72:	2000      	movs	r0, #0
    3a74:	f004 f8b4 	bl	7be0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    3a78:	2002      	movs	r0, #2
    3a7a:	7028      	strb	r0, [r5, #0]
    3a7c:	bd70      	pop	{r4, r5, r6, pc}
    3a7e:	4620      	mov	r0, r4
    3a80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3a84:	2101      	movs	r1, #1
    3a86:	f7ff bebf 	b.w	3808 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    3a8a:	0000      	.short	0x0000
    3a8c:	200011d8 	.word	0x200011d8
    3a90:	200000f0 	.word	0x200000f0
    3a94:	b510      	push	{r4, lr}
    3a96:	4c12      	ldr	r4, [pc, #72]	; (3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>)
    3a98:	6820      	ldr	r0, [r4, #0]
    3a9a:	f000 f825 	bl	3ae8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50>
    3a9e:	6820      	ldr	r0, [r4, #0]
    3aa0:	f00b f883 	bl	ebaa <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    3aa4:	2800      	cmp	r0, #0
    3aa6:	6820      	ldr	r0, [r4, #0]
    3aa8:	d00b      	beq.n	3ac2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a>
    3aaa:	490e      	ldr	r1, [pc, #56]	; (3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>)
    3aac:	780a      	ldrb	r2, [r1, #0]
    3aae:	2a02      	cmp	r2, #2
    3ab0:	d00b      	beq.n	3aca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32>
    3ab2:	780a      	ldrb	r2, [r1, #0]
    3ab4:	2a03      	cmp	r2, #3
    3ab6:	d008      	beq.n	3aca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32>
    3ab8:	f640 4137 	movw	r1, #3127	; 0xc37
    3abc:	202d      	movs	r0, #45	; 0x2d
    3abe:	f7fc ff77 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ac6:	f000 ba4f 	b.w	3f68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    3aca:	68a2      	ldr	r2, [r4, #8]
    3acc:	7809      	ldrb	r1, [r1, #0]
    3ace:	68d2      	ldr	r2, [r2, #12]
    3ad0:	f06f 0307 	mvn.w	r3, #7
    3ad4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3ad8:	5851      	ldr	r1, [r2, r1]
    3ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ade:	4708      	bx	r1
    3ae0:	200000f0 	.word	0x200000f0
    3ae4:	200011d8 	.word	0x200011d8
    3ae8:	b510      	push	{r4, lr}
    3aea:	7b01      	ldrb	r1, [r0, #12]
    3aec:	b121      	cbz	r1, 3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>
    3aee:	4604      	mov	r4, r0
    3af0:	f7fe feaa 	bl	2848 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3af4:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3af8:	4805      	ldr	r0, [pc, #20]	; (3b10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x78>)
    3afa:	7b80      	ldrb	r0, [r0, #14]
    3afc:	2800      	cmp	r0, #0
    3afe:	d005      	beq.n	3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>
    3b00:	f003 ff2a 	bl	7958 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3b08:	f003 bd4c 	b.w	75a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3b0c:	bd10      	pop	{r4, pc}
    3b0e:	0000      	.short	0x0000
    3b10:	200011d8 	.word	0x200011d8

00003b14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    3b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b18:	4d5c      	ldr	r5, [pc, #368]	; (3c8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>)
    3b1a:	4604      	mov	r4, r0
    3b1c:	b086      	sub	sp, #24
    3b1e:	7828      	ldrb	r0, [r5, #0]
    3b20:	bbe8      	cbnz	r0, 3b9e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8a>
    3b22:	7820      	ldrb	r0, [r4, #0]
    3b24:	28ff      	cmp	r0, #255	; 0xff
    3b26:	d04b      	beq.n	3bc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
    3b28:	f04f 0800 	mov.w	r8, #0
    3b2c:	f8a5 800c 	strh.w	r8, [r5, #12]
    3b30:	f8c5 8004 	str.w	r8, [r5, #4]
    3b34:	f885 8001 	strb.w	r8, [r5, #1]
    3b38:	f885 8002 	strb.w	r8, [r5, #2]
    3b3c:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
    3b40:	4b53      	ldr	r3, [pc, #332]	; (3c90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>)
    3b42:	4e54      	ldr	r6, [pc, #336]	; (3c94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>)
    3b44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3b46:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    3b4a:	68b0      	ldr	r0, [r6, #8]
    3b4c:	6840      	ldr	r0, [r0, #4]
    3b4e:	9003      	str	r0, [sp, #12]
    3b50:	4668      	mov	r0, sp
    3b52:	f004 f819 	bl	7b88 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    3b56:	f004 f8ed 	bl	7d34 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    3b5a:	f003 fefd 	bl	7958 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3b5e:	f003 fd21 	bl	75a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3b62:	484d      	ldr	r0, [pc, #308]	; (3c98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    3b64:	f004 fa46 	bl	7ff4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    3b68:	484c      	ldr	r0, [pc, #304]	; (3c9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>)
    3b6a:	f004 fa4d 	bl	8008 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    3b6e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3b72:	4607      	mov	r7, r0
    3b74:	f00a ffcc 	bl	eb10 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    3b78:	4638      	mov	r0, r7
    3b7a:	f00a ff8e 	bl	ea9a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    3b7e:	4601      	mov	r1, r0
    3b80:	4620      	mov	r0, r4
    3b82:	f00a ff56 	bl	ea32 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x118>
    3b86:	f994 000e 	ldrsb.w	r0, [r4, #14]
    3b8a:	f004 f957 	bl	7e3c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    3b8e:	7921      	ldrb	r1, [r4, #4]
    3b90:	2000      	movs	r0, #0
    3b92:	f003 ff8d 	bl	7ab0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    3b96:	2101      	movs	r1, #1
    3b98:	60a8      	str	r0, [r5, #8]
    3b9a:	b1a8      	cbz	r0, 3bc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb4>
    3b9c:	e000      	b.n	3ba0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    3b9e:	e00f      	b.n	3bc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
    3ba0:	f104 0138 	add.w	r1, r4, #56	; 0x38
    3ba4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    3ba6:	f009 fd58 	bl	d65a <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    3baa:	4607      	mov	r7, r0
    3bac:	f104 0140 	add.w	r1, r4, #64	; 0x40
    3bb0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    3bb2:	f009 fd55 	bl	d660 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    3bb6:	b14f      	cbz	r7, 3bcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb8>
    3bb8:	f894 1020 	ldrb.w	r1, [r4, #32]
    3bbc:	b951      	cbnz	r1, 3bd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc0>
    3bbe:	e005      	b.n	3bcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb8>
    3bc0:	200c      	movs	r0, #12
    3bc2:	b006      	add	sp, #24
    3bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3bc8:	7029      	strb	r1, [r5, #0]
    3bca:	e05c      	b.n	3c86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    3bcc:	b120      	cbz	r0, 3bd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
    3bce:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    3bd2:	b108      	cbz	r0, 3bd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
    3bd4:	2701      	movs	r7, #1
    3bd6:	e000      	b.n	3bda <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    3bd8:	2700      	movs	r7, #0
    3bda:	7ea0      	ldrb	r0, [r4, #26]
    3bdc:	b920      	cbnz	r0, 3be8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd4>
    3bde:	7e20      	ldrb	r0, [r4, #24]
    3be0:	b910      	cbnz	r0, 3be8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd4>
    3be2:	78a0      	ldrb	r0, [r4, #2]
    3be4:	0740      	lsls	r0, r0, #29
    3be6:	d523      	bpl.n	3c30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    3be8:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
    3bec:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    3bf0:	4050      	eors	r0, r2
    3bf2:	ea70 0101 	orns	r1, r0, r1
    3bf6:	d006      	beq.n	3c06 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf2>
    3bf8:	f00c fccf 	bl	1059a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    3bfc:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    3c00:	1a80      	subs	r0, r0, r2
    3c02:	4199      	sbcs	r1, r3
    3c04:	d200      	bcs.n	3c08 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf4>
    3c06:	b19f      	cbz	r7, 3c30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    3c08:	f7fe fc88 	bl	251c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    3c0c:	4924      	ldr	r1, [pc, #144]	; (3ca0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x18c>)
    3c0e:	fba0 2301 	umull	r2, r3, r0, r1
    3c12:	f104 0048 	add.w	r0, r4, #72	; 0x48
    3c16:	f00a ff17 	bl	ea48 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x12e>
    3c1a:	2101      	movs	r1, #1
    3c1c:	4620      	mov	r0, r4
    3c1e:	f00a fecc 	bl	e9ba <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa0>
    3c22:	78a0      	ldrb	r0, [r4, #2]
    3c24:	0740      	lsls	r0, r0, #29
    3c26:	d503      	bpl.n	3c30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    3c28:	2101      	movs	r1, #1
    3c2a:	4620      	mov	r0, r4
    3c2c:	f000 fac8 	bl	41c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c0>
    3c30:	6870      	ldr	r0, [r6, #4]
    3c32:	1cc0      	adds	r0, r0, #3
    3c34:	f009 fe2d 	bl	d892 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    3c38:	73a8      	strb	r0, [r5, #14]
    3c3a:	78a0      	ldrb	r0, [r4, #2]
    3c3c:	07c0      	lsls	r0, r0, #31
    3c3e:	d022      	beq.n	3c86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    3c40:	f8cd 8010 	str.w	r8, [sp, #16]
    3c44:	20ff      	movs	r0, #255	; 0xff
    3c46:	f8cd 8014 	str.w	r8, [sp, #20]
    3c4a:	73e8      	strb	r0, [r5, #15]
    3c4c:	69e6      	ldr	r6, [r4, #28]
    3c4e:	f106 070a 	add.w	r7, r6, #10
    3c52:	e013      	b.n	3c7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    3c54:	9c04      	ldr	r4, [sp, #16]
    3c56:	42b4      	cmp	r4, r6
    3c58:	d010      	beq.n	3c7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    3c5a:	7a72      	ldrb	r2, [r6, #9]
    3c5c:	7a60      	ldrb	r0, [r4, #9]
    3c5e:	463b      	mov	r3, r7
    3c60:	f104 010a 	add.w	r1, r4, #10
    3c64:	f009 fd8a 	bl	d77c <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    3c68:	b140      	cbz	r0, 3c7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    3c6a:	78a0      	ldrb	r0, [r4, #2]
    3c6c:	73e8      	strb	r0, [r5, #15]
    3c6e:	f8d4 0003 	ldr.w	r0, [r4, #3]
    3c72:	6128      	str	r0, [r5, #16]
    3c74:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    3c78:	82a8      	strh	r0, [r5, #20]
    3c7a:	e004      	b.n	3c86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    3c7c:	a804      	add	r0, sp, #16
    3c7e:	f7fd fa17 	bl	10b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    3c82:	2800      	cmp	r0, #0
    3c84:	d0e6      	beq.n	3c54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x140>
    3c86:	2000      	movs	r0, #0
    3c88:	e79b      	b.n	3bc2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    3c8a:	0000      	.short	0x0000
    3c8c:	200011d8 	.word	0x200011d8
    3c90:	000042d0 	.word	0x000042d0
    3c94:	200000f0 	.word	0x200000f0
    3c98:	8e89bed6 	.word	0x8e89bed6
    3c9c:	00555555 	.word	0x00555555
    3ca0:	000f4240 	.word	0x000f4240
    3ca4:	b510      	push	{r4, lr}
    3ca6:	4604      	mov	r4, r0
    3ca8:	f7ff ff34 	bl	3b14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    3cac:	2800      	cmp	r0, #0
    3cae:	d108      	bne.n	3cc2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ae>
    3cb0:	4804      	ldr	r0, [pc, #16]	; (3cc4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b0>)
    3cb2:	7800      	ldrb	r0, [r0, #0]
    3cb4:	2801      	cmp	r0, #1
    3cb6:	d003      	beq.n	3cc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ac>
    3cb8:	2100      	movs	r1, #0
    3cba:	4620      	mov	r0, r4
    3cbc:	f7ff fda4 	bl	3808 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    3cc0:	2000      	movs	r0, #0
    3cc2:	bd10      	pop	{r4, pc}
    3cc4:	200011d8 	.word	0x200011d8
    3cc8:	480a      	ldr	r0, [pc, #40]	; (3cf4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e0>)
    3cca:	b510      	push	{r4, lr}
    3ccc:	490a      	ldr	r1, [pc, #40]	; (3cf8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e4>)
    3cce:	6804      	ldr	r4, [r0, #0]
    3cd0:	7808      	ldrb	r0, [r1, #0]
    3cd2:	2800      	cmp	r0, #0
    3cd4:	d00d      	beq.n	3cf2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1de>
    3cd6:	7808      	ldrb	r0, [r1, #0]
    3cd8:	2802      	cmp	r0, #2
    3cda:	d002      	beq.n	3ce2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ce>
    3cdc:	7808      	ldrb	r0, [r1, #0]
    3cde:	2803      	cmp	r0, #3
    3ce0:	d102      	bne.n	3ce8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    3ce2:	4620      	mov	r0, r4
    3ce4:	f7ff ff00 	bl	3ae8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50>
    3ce8:	4620      	mov	r0, r4
    3cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3cee:	f000 b93b 	b.w	3f68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    3cf2:	bd10      	pop	{r4, pc}
    3cf4:	200000f0 	.word	0x200000f0
    3cf8:	200011d8 	.word	0x200011d8
    3cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d00:	4604      	mov	r4, r0
    3d02:	4829      	ldr	r0, [pc, #164]	; (3da8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x294>)
    3d04:	460d      	mov	r5, r1
    3d06:	6840      	ldr	r0, [r0, #4]
    3d08:	f004 f8ba 	bl	7e80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3d0c:	4e27      	ldr	r6, [pc, #156]	; (3dac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>)
    3d0e:	2004      	movs	r0, #4
    3d10:	7030      	strb	r0, [r6, #0]
    3d12:	b355      	cbz	r5, 3d6a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    3d14:	8860      	ldrh	r0, [r4, #2]
    3d16:	2810      	cmp	r0, #16
    3d18:	d023      	beq.n	3d62 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    3d1a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3d1e:	4680      	mov	r8, r0
    3d20:	68b5      	ldr	r5, [r6, #8]
    3d22:	f00a feae 	bl	ea82 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    3d26:	4607      	mov	r7, r0
    3d28:	4640      	mov	r0, r8
    3d2a:	f00a fed3 	bl	ead4 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    3d2e:	1a38      	subs	r0, r7, r0
    3d30:	1e40      	subs	r0, r0, #1
    3d32:	b2c0      	uxtb	r0, r0
    3d34:	8861      	ldrh	r1, [r4, #2]
    3d36:	2228      	movs	r2, #40	; 0x28
    3d38:	f000 fb06 	bl	4348 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    3d3c:	4405      	add	r5, r0
    3d3e:	78a0      	ldrb	r0, [r4, #2]
    3d40:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3d44:	b130      	cbz	r0, 3d54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x240>
    3d46:	6870      	ldr	r0, [r6, #4]
    3d48:	4405      	add	r5, r0
    3d4a:	f00a ff1c 	bl	eb86 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    3d4e:	4428      	add	r0, r5
    3d50:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    3d54:	7922      	ldrb	r2, [r4, #4]
    3d56:	4629      	mov	r1, r5
    3d58:	2000      	movs	r0, #0
    3d5a:	f004 f8a7 	bl	7eac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    3d5e:	b920      	cbnz	r0, 3d6a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    3d60:	e00c      	b.n	3d7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    3d62:	7921      	ldrb	r1, [r4, #4]
    3d64:	2000      	movs	r0, #0
    3d66:	f003 fe69 	bl	7a3c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    3d6a:	8860      	ldrh	r0, [r4, #2]
    3d6c:	2813      	cmp	r0, #19
    3d6e:	d011      	beq.n	3d94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    3d70:	dc07      	bgt.n	3d82 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x26e>
    3d72:	2810      	cmp	r0, #16
    3d74:	d015      	beq.n	3da2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28e>
    3d76:	2812      	cmp	r0, #18
    3d78:	d107      	bne.n	3d8a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x276>
    3d7a:	e00b      	b.n	3d94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    3d7c:	f640 51a8 	movw	r1, #3496	; 0xda8
    3d80:	e005      	b.n	3d8e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27a>
    3d82:	2815      	cmp	r0, #21
    3d84:	d006      	beq.n	3d94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    3d86:	281d      	cmp	r0, #29
    3d88:	d004      	beq.n	3d94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    3d8a:	f640 51bc 	movw	r1, #3516	; 0xdbc
    3d8e:	202d      	movs	r0, #45	; 0x2d
    3d90:	f7fc fe0e 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3d94:	7922      	ldrb	r2, [r4, #4]
    3d96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3d9a:	2101      	movs	r1, #1
    3d9c:	2000      	movs	r0, #0
    3d9e:	f004 b8f7 	b.w	7f90 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    3da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3da6:	0000      	.short	0x0000
    3da8:	200000f0 	.word	0x200000f0
    3dac:	200011d8 	.word	0x200011d8
    3db0:	b538      	push	{r3, r4, r5, lr}
    3db2:	4604      	mov	r4, r0
    3db4:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
    3db8:	460b      	mov	r3, r1
    3dba:	f88d 0000 	strb.w	r0, [sp]
    3dbe:	9800      	ldr	r0, [sp, #0]
    3dc0:	9000      	str	r0, [sp, #0]
    3dc2:	f89d 0000 	ldrb.w	r0, [sp]
    3dc6:	2800      	cmp	r0, #0
    3dc8:	d13a      	bne.n	3e40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32c>
    3dca:	7820      	ldrb	r0, [r4, #0]
    3dcc:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    3dd0:	2bff      	cmp	r3, #255	; 0xff
    3dd2:	d010      	beq.n	3df6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e2>
    3dd4:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
    3dd8:	1e51      	subs	r1, r2, #1
    3dda:	4618      	mov	r0, r3
    3ddc:	f7fe fb20 	bl	2420 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    3de0:	b130      	cbz	r0, 3df0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2dc>
    3de2:	f894 00be 	ldrb.w	r0, [r4, #190]	; 0xbe
    3de6:	f040 0002 	orr.w	r0, r0, #2
    3dea:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
    3dee:	e011      	b.n	3e14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>
    3df0:	f241 0118 	movw	r1, #4120	; 0x1018
    3df4:	e021      	b.n	3e3a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x326>
    3df6:	4813      	ldr	r0, [pc, #76]	; (3e44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>)
    3df8:	6840      	ldr	r0, [r0, #4]
    3dfa:	7801      	ldrb	r1, [r0, #0]
    3dfc:	f3c1 1180 	ubfx	r1, r1, #6, #1
    3e00:	f884 10be 	strb.w	r1, [r4, #190]	; 0xbe
    3e04:	f8d0 1003 	ldr.w	r1, [r0, #3]
    3e08:	f8c4 10bf 	str.w	r1, [r4, #191]	; 0xbf
    3e0c:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    3e10:	f8a4 00c3 	strh.w	r0, [r4, #195]	; 0xc3
    3e14:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
    3e18:	287f      	cmp	r0, #127	; 0x7f
    3e1a:	d00c      	beq.n	3e36 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x322>
    3e1c:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5
    3e20:	207f      	movs	r0, #127	; 0x7f
    3e22:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3e26:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    3e2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3e2e:	2202      	movs	r2, #2
    3e30:	4905      	ldr	r1, [pc, #20]	; (3e48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x334>)
    3e32:	f00a b931 	b.w	e098 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3e36:	f640 616c 	movw	r1, #3692	; 0xe6c
    3e3a:	202d      	movs	r0, #45	; 0x2d
    3e3c:	f7fc fdb8 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e40:	bd38      	pop	{r3, r4, r5, pc}
    3e42:	0000      	.short	0x0000
    3e44:	200000f0 	.word	0x200000f0
    3e48:	0000e9a3 	.word	0x0000e9a3
    3e4c:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    3e50:	4616      	mov	r6, r2
    3e52:	4604      	mov	r4, r0
    3e54:	2903      	cmp	r1, #3
    3e56:	d004      	beq.n	3e62 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    3e58:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    3e5c:	b108      	cbz	r0, 3e62 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    3e5e:	2001      	movs	r0, #1
    3e60:	e000      	b.n	3e64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x350>
    3e62:	2000      	movs	r0, #0
    3e64:	2500      	movs	r5, #0
    3e66:	2903      	cmp	r1, #3
    3e68:	d003      	beq.n	3e72 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
    3e6a:	2701      	movs	r7, #1
    3e6c:	2905      	cmp	r1, #5
    3e6e:	d005      	beq.n	3e7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x368>
    3e70:	e008      	b.n	3e84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x370>
    3e72:	78a1      	ldrb	r1, [r4, #2]
    3e74:	2702      	movs	r7, #2
    3e76:	f3c1 0140 	ubfx	r1, r1, #1, #1
    3e7a:	e001      	b.n	3e80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36c>
    3e7c:	78a1      	ldrb	r1, [r4, #2]
    3e7e:	07c9      	lsls	r1, r1, #31
    3e80:	2900      	cmp	r1, #0
    3e82:	d06b      	beq.n	3f5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    3e84:	2800      	cmp	r0, #0
    3e86:	d169      	bne.n	3f5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    3e88:	4835      	ldr	r0, [pc, #212]	; (3f60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x44c>)
    3e8a:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 3f64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x450>
    3e8e:	7b80      	ldrb	r0, [r0, #14]
    3e90:	b180      	cbz	r0, 3eb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a0>
    3e92:	f009 fd01 	bl	d898 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    3e96:	7030      	strb	r0, [r6, #0]
    3e98:	28ff      	cmp	r0, #255	; 0xff
    3e9a:	d014      	beq.n	3ec6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    3e9c:	b2c0      	uxtb	r0, r0
    3e9e:	466a      	mov	r2, sp
    3ea0:	a902      	add	r1, sp, #8
    3ea2:	f7fe fabd 	bl	2420 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    3ea6:	b148      	cbz	r0, 3ebc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    3ea8:	4669      	mov	r1, sp
    3eaa:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3eae:	f00a fc22 	bl	e6f6 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    3eb2:	4605      	mov	r5, r0
    3eb4:	7830      	ldrb	r0, [r6, #0]
    3eb6:	28ff      	cmp	r0, #255	; 0xff
    3eb8:	d005      	beq.n	3ec6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    3eba:	e00d      	b.n	3ed8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c4>
    3ebc:	f640 719b 	movw	r1, #3995	; 0xf9b
    3ec0:	202d      	movs	r0, #45	; 0x2d
    3ec2:	f7fc fd75 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ec6:	f8d9 1004 	ldr.w	r1, [r9, #4]
    3eca:	f811 0b03 	ldrb.w	r0, [r1], #3
    3ece:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3ed2:	f00a fc10 	bl	e6f6 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    3ed6:	4605      	mov	r5, r0
    3ed8:	f8d9 1004 	ldr.w	r1, [r9, #4]
    3edc:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
    3ee0:	f104 0358 	add.w	r3, r4, #88	; 0x58
    3ee4:	f811 0b03 	ldrb.w	r0, [r1], #3
    3ee8:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3eec:	f009 fc46 	bl	d77c <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    3ef0:	f8d9 1004 	ldr.w	r1, [r9, #4]
    3ef4:	4680      	mov	r8, r0
    3ef6:	f811 0b03 	ldrb.w	r0, [r1], #3
    3efa:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3efe:	f009 fcd5 	bl	d8ac <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    3f02:	4681      	mov	r9, r0
    3f04:	f7fe fb1e 	bl	2544 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    3f08:	b138      	cbz	r0, 3f1a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    3f0a:	4648      	mov	r0, r9
    3f0c:	f7fe fa5c 	bl	23c8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    3f10:	b118      	cbz	r0, 3f1a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    3f12:	2110      	movs	r1, #16
    3f14:	f009 fe84 	bl	dc20 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    3f18:	b138      	cbz	r0, 3f2a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x416>
    3f1a:	2100      	movs	r1, #0
    3f1c:	7830      	ldrb	r0, [r6, #0]
    3f1e:	28ff      	cmp	r0, #255	; 0xff
    3f20:	d00c      	beq.n	3f3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x428>
    3f22:	f1b8 0f00 	cmp.w	r8, #0
    3f26:	d105      	bne.n	3f34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x420>
    3f28:	e001      	b.n	3f2e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x41a>
    3f2a:	2101      	movs	r1, #1
    3f2c:	e7f6      	b.n	3f1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x408>
    3f2e:	7e62      	ldrb	r2, [r4, #25]
    3f30:	4282      	cmp	r2, r0
    3f32:	d101      	bne.n	3f38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
    3f34:	2001      	movs	r0, #1
    3f36:	e003      	b.n	3f40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    3f38:	2000      	movs	r0, #0
    3f3a:	e001      	b.n	3f40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    3f3c:	ea28 0001 	bic.w	r0, r8, r1
    3f40:	78a2      	ldrb	r2, [r4, #2]
    3f42:	0752      	lsls	r2, r2, #29
    3f44:	d501      	bpl.n	3f4a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x436>
    3f46:	b930      	cbnz	r0, 3f56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    3f48:	e008      	b.n	3f5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    3f4a:	b939      	cbnz	r1, 3f5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    3f4c:	b91d      	cbnz	r5, 3f56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    3f4e:	7be0      	ldrb	r0, [r4, #15]
    3f50:	b108      	cbz	r0, 3f56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    3f52:	42b8      	cmp	r0, r7
    3f54:	d102      	bne.n	3f5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    3f56:	2001      	movs	r0, #1
    3f58:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    3f5c:	2000      	movs	r0, #0
    3f5e:	e7fb      	b.n	3f58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x444>
    3f60:	200011d8 	.word	0x200011d8
    3f64:	200000f0 	.word	0x200000f0
    3f68:	b570      	push	{r4, r5, r6, lr}
    3f6a:	4604      	mov	r4, r0
    3f6c:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    3f6e:	4d10      	ldr	r5, [pc, #64]	; (3fb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49c>)
    3f70:	1c40      	adds	r0, r0, #1
    3f72:	8620      	strh	r0, [r4, #48]	; 0x30
    3f74:	7ba8      	ldrb	r0, [r5, #14]
    3f76:	2600      	movs	r6, #0
    3f78:	b120      	cbz	r0, 3f84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x470>
    3f7a:	f003 fced 	bl	7958 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3f7e:	f003 fb11 	bl	75a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3f82:	73ae      	strb	r6, [r5, #14]
    3f84:	702e      	strb	r6, [r5, #0]
    3f86:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
    3f8a:	b108      	cbz	r0, 3f90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x47c>
    3f8c:	2101      	movs	r1, #1
    3f8e:	e00a      	b.n	3fa6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x492>
    3f90:	7b60      	ldrb	r0, [r4, #13]
    3f92:	b138      	cbz	r0, 3fa4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x490>
    3f94:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    3f96:	4288      	cmp	r0, r1
    3f98:	d804      	bhi.n	3fa4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x490>
    3f9a:	2101      	movs	r1, #1
    3f9c:	4620      	mov	r0, r4
    3f9e:	f00a fe16 	bl	ebce <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    3fa2:	bd70      	pop	{r4, r5, r6, pc}
    3fa4:	2100      	movs	r1, #0
    3fa6:	4620      	mov	r0, r4
    3fa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3fac:	f00a be0f 	b.w	ebce <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    3fb0:	200011d8 	.word	0x200011d8
    3fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3fb8:	4604      	mov	r4, r0
    3fba:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    3fbe:	8808      	ldrh	r0, [r1, #0]
    3fc0:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    3fc4:	20ff      	movs	r0, #255	; 0xff
    3fc6:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93
    3fca:	f64f 70ff 	movw	r0, #65535	; 0xffff
    3fce:	4616      	mov	r6, r2
    3fd0:	460d      	mov	r5, r1
    3fd2:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    3fd6:	2b00      	cmp	r3, #0
    3fd8:	d14b      	bne.n	4072 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x72>
    3fda:	6928      	ldr	r0, [r5, #16]
    3fdc:	f009 fcae 	bl	d93c <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    3fe0:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
    3fe4:	8b28      	ldrh	r0, [r5, #24]
    3fe6:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    3fea:	8b68      	ldrh	r0, [r5, #26]
    3fec:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    3ff0:	f895 021b 	ldrb.w	r0, [r5, #539]	; 0x21b
    3ff4:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    3ff8:	7e20      	ldrb	r0, [r4, #24]
    3ffa:	f104 0151 	add.w	r1, r4, #81	; 0x51
    3ffe:	460f      	mov	r7, r1
    4000:	2500      	movs	r5, #0
    4002:	b120      	cbz	r0, 400e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe>
    4004:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    4008:	f00a fba1 	bl	e74e <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    400c:	b940      	cbnz	r0, 4020 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x20>
    400e:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    4012:	b170      	cbz	r0, 4032 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x32>
    4014:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    4018:	4639      	mov	r1, r7
    401a:	f00a fb8f 	bl	e73c <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    401e:	b140      	cbz	r0, 4032 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x32>
    4020:	f8d4 0051 	ldr.w	r0, [r4, #81]	; 0x51
    4024:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    4028:	f8b4 0055 	ldrh.w	r0, [r4, #85]	; 0x55
    402c:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    4030:	e003      	b.n	403a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3a>
    4032:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    4036:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
    403a:	4815      	ldr	r0, [pc, #84]	; (4090 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x90>)
    403c:	2eff      	cmp	r6, #255	; 0xff
    403e:	6840      	ldr	r0, [r0, #4]
    4040:	7801      	ldrb	r1, [r0, #0]
    4042:	f3c1 1180 	ubfx	r1, r1, #6, #1
    4046:	f884 1079 	strb.w	r1, [r4, #121]	; 0x79
    404a:	f850 1f03 	ldr.w	r1, [r0, #3]!
    404e:	d017      	beq.n	4080 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x80>
    4050:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
    4054:	8880      	ldrh	r0, [r0, #4]
    4056:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    405a:	f104 027a 	add.w	r2, r4, #122	; 0x7a
    405e:	1e51      	subs	r1, r2, #1
    4060:	4630      	mov	r0, r6
    4062:	f7fe f9dd 	bl	2420 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    4066:	b130      	cbz	r0, 4076 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x76>
    4068:	f814 0f79 	ldrb.w	r0, [r4, #121]!
    406c:	f040 0002 	orr.w	r0, r0, #2
    4070:	7020      	strb	r0, [r4, #0]
    4072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4076:	f640 418b 	movw	r1, #3211	; 0xc8b
    407a:	202d      	movs	r0, #45	; 0x2d
    407c:	f7fc fc98 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4080:	f844 1f7a 	str.w	r1, [r4, #122]!
    4084:	8880      	ldrh	r0, [r0, #4]
    4086:	80a0      	strh	r0, [r4, #4]
    4088:	60e5      	str	r5, [r4, #12]
    408a:	8225      	strh	r5, [r4, #16]
    408c:	e7f1      	b.n	4072 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x72>
    408e:	0000      	.short	0x0000
    4090:	200000f0 	.word	0x200000f0
    4094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4096:	4604      	mov	r4, r0
    4098:	20ff      	movs	r0, #255	; 0xff
    409a:	f88d 0000 	strb.w	r0, [sp]
    409e:	2601      	movs	r6, #1
    40a0:	466a      	mov	r2, sp
    40a2:	2105      	movs	r1, #5
    40a4:	4620      	mov	r0, r4
    40a6:	f7ff fed1 	bl	3e4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>
    40aa:	b160      	cbz	r0, 40c6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc6>
    40ac:	4d28      	ldr	r5, [pc, #160]	; (4150 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x150>)
    40ae:	4f27      	ldr	r7, [pc, #156]	; (414c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14c>)
    40b0:	6869      	ldr	r1, [r5, #4]
    40b2:	7bfa      	ldrb	r2, [r7, #15]
    40b4:	f107 0310 	add.w	r3, r7, #16
    40b8:	f811 0b03 	ldrb.w	r0, [r1], #3
    40bc:	f3c0 1080 	ubfx	r0, r0, #6, #1
    40c0:	f009 fb5c 	bl	d77c <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    40c4:	b110      	cbz	r0, 40cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xcc>
    40c6:	2600      	movs	r6, #0
    40c8:	4630      	mov	r0, r6
    40ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40cc:	686a      	ldr	r2, [r5, #4]
    40ce:	69e0      	ldr	r0, [r4, #28]
    40d0:	7812      	ldrb	r2, [r2, #0]
    40d2:	f810 1fa5 	ldrb.w	r1, [r0, #165]!
    40d6:	f3c2 1240 	ubfx	r2, r2, #5, #1
    40da:	4011      	ands	r1, r2
    40dc:	7001      	strb	r1, [r0, #0]
    40de:	2201      	movs	r2, #1
    40e0:	4620      	mov	r0, r4
    40e2:	69e1      	ldr	r1, [r4, #28]
    40e4:	f000 f89a 	bl	421c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x21c>
    40e8:	2300      	movs	r3, #0
    40ea:	f89d 2000 	ldrb.w	r2, [sp]
    40ee:	4620      	mov	r0, r4
    40f0:	69e1      	ldr	r1, [r4, #28]
    40f2:	f7ff ff5f 	bl	3fb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a0>
    40f6:	2202      	movs	r2, #2
    40f8:	4916      	ldr	r1, [pc, #88]	; (4154 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x154>)
    40fa:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    40fe:	f009 ffcb 	bl	e098 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    4102:	69e0      	ldr	r0, [r4, #28]
    4104:	2202      	movs	r2, #2
    4106:	8801      	ldrh	r1, [r0, #0]
    4108:	f8a4 10b0 	strh.w	r1, [r4, #176]	; 0xb0
    410c:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    4110:	f884 00b2 	strb.w	r0, [r4, #178]	; 0xb2
    4114:	4910      	ldr	r1, [pc, #64]	; (4158 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x158>)
    4116:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    411a:	f009 ffbd 	bl	e098 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    411e:	2100      	movs	r1, #0
    4120:	69e0      	ldr	r0, [r4, #28]
    4122:	7039      	strb	r1, [r7, #0]
    4124:	460a      	mov	r2, r1
    4126:	4621      	mov	r1, r4
    4128:	f000 fa7a 	bl	4620 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    412c:	6868      	ldr	r0, [r5, #4]
    412e:	69e1      	ldr	r1, [r4, #28]
    4130:	f8d0 2003 	ldr.w	r2, [r0, #3]
    4134:	f841 2f03 	str.w	r2, [r1, #3]!
    4138:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    413c:	808a      	strh	r2, [r1, #4]
    413e:	7800      	ldrb	r0, [r0, #0]
    4140:	69e1      	ldr	r1, [r4, #28]
    4142:	f3c0 1080 	ubfx	r0, r0, #6, #1
    4146:	7088      	strb	r0, [r1, #2]
    4148:	e7be      	b.n	40c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc8>
    414a:	0000      	.short	0x0000
    414c:	200011d8 	.word	0x200011d8
    4150:	200000f0 	.word	0x200000f0
    4154:	0000e953 	.word	0x0000e953
    4158:	0000e943 	.word	0x0000e943
    415c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    415e:	4604      	mov	r4, r0
    4160:	20ff      	movs	r0, #255	; 0xff
    4162:	f88d 0000 	strb.w	r0, [sp]
    4166:	2501      	movs	r5, #1
    4168:	466a      	mov	r2, sp
    416a:	2103      	movs	r1, #3
    416c:	4620      	mov	r0, r4
    416e:	f7ff fe6d 	bl	3e4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>
    4172:	b1e8      	cbz	r0, 41b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b0>
    4174:	7b20      	ldrb	r0, [r4, #12]
    4176:	b120      	cbz	r0, 4182 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x182>
    4178:	f89d 1000 	ldrb.w	r1, [sp]
    417c:	4620      	mov	r0, r4
    417e:	f7ff fe17 	bl	3db0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x29c>
    4182:	4e0d      	ldr	r6, [pc, #52]	; (41b8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b8>)
    4184:	2100      	movs	r1, #0
    4186:	6870      	ldr	r0, [r6, #4]
    4188:	8001      	strh	r1, [r0, #0]
    418a:	2104      	movs	r1, #4
    418c:	f009 fe02 	bl	dd94 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    4190:	4620      	mov	r0, r4
    4192:	f000 f88b 	bl	42ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ac>
    4196:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    419a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    419c:	6870      	ldr	r0, [r6, #4]
    419e:	f009 fe30 	bl	de02 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
    41a2:	4906      	ldr	r1, [pc, #24]	; (41bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1bc>)
    41a4:	2005      	movs	r0, #5
    41a6:	7008      	strb	r0, [r1, #0]
    41a8:	6870      	ldr	r0, [r6, #4]
    41aa:	f003 fe69 	bl	7e80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    41ae:	e000      	b.n	41b2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b2>
    41b0:	2500      	movs	r5, #0
    41b2:	4628      	mov	r0, r5
    41b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41b6:	0000      	.short	0x0000
    41b8:	200000f0 	.word	0x200000f0
    41bc:	200011d8 	.word	0x200011d8
    41c0:	b570      	push	{r4, r5, r6, lr}
    41c2:	4604      	mov	r4, r0
    41c4:	460e      	mov	r6, r1
    41c6:	7e40      	ldrb	r0, [r0, #25]
    41c8:	f7fe f8fe 	bl	23c8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    41cc:	0005      	movs	r5, r0
    41ce:	d019      	beq.n	4204 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x204>
    41d0:	2110      	movs	r1, #16
    41d2:	f009 fd25 	bl	dc20 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    41d6:	2800      	cmp	r0, #0
    41d8:	d114      	bne.n	4204 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x204>
    41da:	2001      	movs	r0, #1
    41dc:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    41e0:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    41e4:	4632      	mov	r2, r6
    41e6:	460c      	mov	r4, r1
    41e8:	4628      	mov	r0, r5
    41ea:	f009 faf7 	bl	d7dc <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    41ee:	4621      	mov	r1, r4
    41f0:	4c05      	ldr	r4, [pc, #20]	; (4208 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x208>)
    41f2:	6860      	ldr	r0, [r4, #4]
    41f4:	f009 fde9 	bl	ddca <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    41f8:	6860      	ldr	r0, [r4, #4]
    41fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    41fe:	2101      	movs	r1, #1
    4200:	f009 bde9 	b.w	ddd6 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    4204:	bd70      	pop	{r4, r5, r6, pc}
    4206:	0000      	.short	0x0000
    4208:	200000f0 	.word	0x200000f0
    420c:	4802      	ldr	r0, [pc, #8]	; (4218 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x218>)
    420e:	2101      	movs	r1, #1
    4210:	6800      	ldr	r0, [r0, #0]
    4212:	f7ff baf9 	b.w	3808 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    4216:	0000      	.short	0x0000
    4218:	200000f0 	.word	0x200000f0
    421c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4220:	4e21      	ldr	r6, [pc, #132]	; (42a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2a8>)
    4222:	4680      	mov	r8, r0
    4224:	460c      	mov	r4, r1
    4226:	6870      	ldr	r0, [r6, #4]
    4228:	4615      	mov	r5, r2
    422a:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    422e:	6161      	str	r1, [r4, #20]
    4230:	6841      	ldr	r1, [r0, #4]
    4232:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    4236:	61e1      	str	r1, [r4, #28]
    4238:	8940      	ldrh	r0, [r0, #10]
    423a:	f009 fb7b 	bl	d934 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    423e:	4607      	mov	r7, r0
    4240:	6120      	str	r0, [r4, #16]
    4242:	6870      	ldr	r0, [r6, #4]
    4244:	4639      	mov	r1, r7
    4246:	7d80      	ldrb	r0, [r0, #22]
    4248:	f009 fce1 	bl	dc0e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    424c:	84a0      	strh	r0, [r4, #36]	; 0x24
    424e:	6870      	ldr	r0, [r6, #4]
    4250:	4639      	mov	r1, r7
    4252:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    4256:	f009 fcd6 	bl	dc06 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    425a:	6220      	str	r0, [r4, #32]
    425c:	6870      	ldr	r0, [r6, #4]
    425e:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    4262:	8321      	strh	r1, [r4, #24]
    4264:	8841      	ldrh	r1, [r0, #2]
    4266:	8361      	strh	r1, [r4, #26]
    4268:	6841      	ldr	r1, [r0, #4]
    426a:	f8c4 10a6 	str.w	r1, [r4, #166]	; 0xa6
    426e:	7a01      	ldrb	r1, [r0, #8]
    4270:	f884 10aa 	strb.w	r1, [r4, #170]	; 0xaa
    4274:	7a41      	ldrb	r1, [r0, #9]
    4276:	f001 011f 	and.w	r1, r1, #31
    427a:	f884 10b1 	strb.w	r1, [r4, #177]	; 0xb1
    427e:	7a40      	ldrb	r0, [r0, #9]
    4280:	0940      	lsrs	r0, r0, #5
    4282:	f884 021b 	strb.w	r0, [r4, #539]	; 0x21b
    4286:	f104 0062 	add.w	r0, r4, #98	; 0x62
    428a:	7205      	strb	r5, [r0, #8]
    428c:	7245      	strb	r5, [r0, #9]
    428e:	21ff      	movs	r1, #255	; 0xff
    4290:	7281      	strb	r1, [r0, #10]
    4292:	2100      	movs	r1, #0
    4294:	3836      	subs	r0, #54	; 0x36
    4296:	f009 ff72 	bl	e17e <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    429a:	f998 100e 	ldrsb.w	r1, [r8, #14]
    429e:	4620      	mov	r0, r4
    42a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    42a4:	f009 bc1a 	b.w	dadc <sym_AIEQYZJFZQBQ5LEMJNMQV56TMLIGCBAC63QLHGI>
    42a8:	200000f0 	.word	0x200000f0
    42ac:	b570      	push	{r4, r5, r6, lr}
    42ae:	4d07      	ldr	r5, [pc, #28]	; (42cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2cc>)
    42b0:	4604      	mov	r4, r0
    42b2:	f100 0151 	add.w	r1, r0, #81	; 0x51
    42b6:	6868      	ldr	r0, [r5, #4]
    42b8:	f009 fd94 	bl	dde4 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    42bc:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
    42c0:	6868      	ldr	r0, [r5, #4]
    42c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    42c6:	f009 bd93 	b.w	ddf0 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    42ca:	0000      	.short	0x0000
    42cc:	200000f0 	.word	0x200000f0
    42d0:	00003a95 	.word	0x00003a95
    42d4:	0000391d 	.word	0x0000391d
    42d8:	00003a11 	.word	0x00003a11
    42dc:	00000000 	.word	0x00000000
    42e0:	000039e9 	.word	0x000039e9
    42e4:	00003a41 	.word	0x00003a41
    42e8:	0000e937 	.word	0x0000e937
    42ec:	0000e93d 	.word	0x0000e93d
    42f0:	00003ca5 	.word	0x00003ca5
    42f4:	00003cc9 	.word	0x00003cc9
    42f8:	0000420d 	.word	0x0000420d
    42fc:	000042ec 	.word	0x000042ec
    4300:	000042e4 	.word	0x000042e4
    4304:	000042e0 	.word	0x000042e0

00004308 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    4308:	b510      	push	{r4, lr}
    430a:	1e42      	subs	r2, r0, #1
    430c:	2a02      	cmp	r2, #2
    430e:	d901      	bls.n	4314 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    4310:	21ca      	movs	r1, #202	; 0xca
    4312:	e009      	b.n	4328 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    4314:	1e40      	subs	r0, r0, #1
    4316:	2910      	cmp	r1, #16
    4318:	d009      	beq.n	432e <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    431a:	2912      	cmp	r1, #18
    431c:	d00c      	beq.n	4338 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    431e:	2913      	cmp	r1, #19
    4320:	d00a      	beq.n	4338 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    4322:	2915      	cmp	r1, #21
    4324:	d005      	beq.n	4332 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    4326:	21d8      	movs	r1, #216	; 0xd8
    4328:	202f      	movs	r0, #47	; 0x2f
    432a:	f7fc fb41 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    432e:	4905      	ldr	r1, [pc, #20]	; (4344 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    4330:	e004      	b.n	433c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    4332:	4904      	ldr	r1, [pc, #16]	; (4344 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    4334:	1d89      	adds	r1, r1, #6
    4336:	e001      	b.n	433c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    4338:	4902      	ldr	r1, [pc, #8]	; (4344 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    433a:	1f89      	subs	r1, r1, #6
    433c:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4340:	bd10      	pop	{r4, pc}
    4342:	0000      	.short	0x0000
    4344:	0000eb9e 	.word	0x0000eb9e

00004348 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    4348:	1e42      	subs	r2, r0, #1
    434a:	b510      	push	{r4, lr}
    434c:	b2d2      	uxtb	r2, r2
    434e:	2a01      	cmp	r2, #1
    4350:	d903      	bls.n	435a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    4352:	291d      	cmp	r1, #29
    4354:	d001      	beq.n	435a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    4356:	21ee      	movs	r1, #238	; 0xee
    4358:	e00d      	b.n	4376 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    435a:	2913      	cmp	r1, #19
    435c:	d013      	beq.n	4386 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    435e:	dc04      	bgt.n	436a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    4360:	2910      	cmp	r1, #16
    4362:	d00b      	beq.n	437c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    4364:	2912      	cmp	r1, #18
    4366:	d104      	bne.n	4372 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    4368:	e00d      	b.n	4386 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    436a:	2915      	cmp	r1, #21
    436c:	d008      	beq.n	4380 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    436e:	291d      	cmp	r1, #29
    4370:	d00e      	beq.n	4390 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    4372:	f44f 7181 	mov.w	r1, #258	; 0x102
    4376:	202f      	movs	r0, #47	; 0x2f
    4378:	f7fc fb1a 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    437c:	4807      	ldr	r0, [pc, #28]	; (439c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    437e:	e004      	b.n	438a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    4380:	4806      	ldr	r0, [pc, #24]	; (439c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    4382:	3008      	adds	r0, #8
    4384:	e001      	b.n	438a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    4386:	4805      	ldr	r0, [pc, #20]	; (439c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    4388:	1d00      	adds	r0, r0, #4
    438a:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    438e:	bd10      	pop	{r4, pc}
    4390:	f240 315a 	movw	r1, #858	; 0x35a
    4394:	fb10 f001 	smulbb	r0, r0, r1
    4398:	bd10      	pop	{r4, pc}
    439a:	0000      	.short	0x0000
    439c:	0000eb8c 	.word	0x0000eb8c

000043a0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    43a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43a4:	4604      	mov	r4, r0
    43a6:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    43aa:	4616      	mov	r6, r2
    43ac:	460f      	mov	r7, r1
    43ae:	2800      	cmp	r0, #0
    43b0:	d15e      	bne.n	4470 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    43b2:	4621      	mov	r1, r4
    43b4:	484d      	ldr	r0, [pc, #308]	; (44ec <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>)
    43b6:	f006 fb89 	bl	aacc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    43ba:	4605      	mov	r5, r0
    43bc:	2820      	cmp	r0, #32
    43be:	d057      	beq.n	4470 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    43c0:	2250      	movs	r2, #80	; 0x50
    43c2:	2100      	movs	r1, #0
    43c4:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    43c8:	f00c faf3 	bl	109b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    43cc:	f884 50c8 	strb.w	r5, [r4, #200]	; 0xc8
    43d0:	2501      	movs	r5, #1
    43d2:	f8c4 70cc 	str.w	r7, [r4, #204]	; 0xcc
    43d6:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
    43da:	b137      	cbz	r7, 43ea <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    43dc:	f7fe fdf0 	bl	2fc0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    43e0:	f000 0007 	and.w	r0, r0, #7
    43e4:	1c40      	adds	r0, r0, #1
    43e6:	f887 024c 	strb.w	r0, [r7, #588]	; 0x24c
    43ea:	4620      	mov	r0, r4
    43ec:	f00a fd9c 	bl	ef28 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2da>
    43f0:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    43f4:	2002      	movs	r0, #2
    43f6:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    43fa:	46a8      	mov	r8, r5
    43fc:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    4400:	2500      	movs	r5, #0
    4402:	f804 5fe8 	strb.w	r5, [r4, #232]!
    4406:	f007 fcc7 	bl	bd98 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    440a:	4607      	mov	r7, r0
    440c:	f00c f8bc 	bl	10588 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    4410:	8921      	ldrh	r1, [r4, #8]
    4412:	3ce8      	subs	r4, #232	; 0xe8
    4414:	4288      	cmp	r0, r1
    4416:	d800      	bhi.n	441a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    4418:	4608      	mov	r0, r1
    441a:	4438      	add	r0, r7
    441c:	30ce      	adds	r0, #206	; 0xce
    441e:	b287      	uxth	r7, r0
    4420:	4620      	mov	r0, r4
    4422:	f00a fa47 	bl	e8b4 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    4426:	b330      	cbz	r0, 4476 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    4428:	f00b ffd0 	bl	103cc <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    442c:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    4430:	b281      	uxth	r1, r0
    4432:	4630      	mov	r0, r6
    4434:	f007 fdd0 	bl	bfd8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4438:	4430      	add	r0, r6
    443a:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    443e:	3490      	adds	r4, #144	; 0x90
    4440:	f00c f8ab 	bl	1059a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4444:	19c0      	adds	r0, r0, r7
    4446:	4169      	adcs	r1, r5
    4448:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    444c:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
    4450:	f824 5c6e 	strh.w	r5, [r4, #-110]
    4454:	2001      	movs	r0, #1
    4456:	f00a fb92 	bl	eb7e <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    445a:	f200 1015 	addw	r0, r0, #277	; 0x115
    445e:	1a30      	subs	r0, r6, r0
    4460:	6460      	str	r0, [r4, #68]	; 0x44
    4462:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4466:	0841      	lsrs	r1, r0, #1
    4468:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    446c:	3c90      	subs	r4, #144	; 0x90
    446e:	e025      	b.n	44bc <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>
    4470:	200c      	movs	r0, #12
    4472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4476:	2100      	movs	r1, #0
    4478:	4620      	mov	r0, r4
    447a:	f00a fca9 	bl	edd0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    447e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 44f0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x150>
    4482:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    4486:	2000      	movs	r0, #0
    4488:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    448c:	b149      	cbz	r1, 44a2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    448e:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    4490:	b139      	cbz	r1, 44a2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    4492:	f7fe fd95 	bl	2fc0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    4496:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    449a:	fbb0 f2f1 	udiv	r2, r0, r1
    449e:	fb01 0012 	mls	r0, r1, r2, r0
    44a2:	4407      	add	r7, r0
    44a4:	f00c f879 	bl	1059a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    44a8:	19c0      	adds	r0, r0, r7
    44aa:	4169      	adcs	r1, r5
    44ac:	e9c4 013e 	strd	r0, r1, [r4, #248]	; 0xf8
    44b0:	b19e      	cbz	r6, 44da <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x13a>
    44b2:	1980      	adds	r0, r0, r6
    44b4:	eb51 0105 	adcs.w	r1, r1, r5
    44b8:	e9c4 0142 	strd	r0, r1, [r4, #264]	; 0x108
    44bc:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    44c0:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    44c4:	f00a fd2e 	bl	ef24 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    44c8:	b158      	cbz	r0, 44e2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x142>
    44ca:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    44ce:	2100      	movs	r1, #0
    44d0:	4620      	mov	r0, r4
    44d2:	f00a fa1f 	bl	e914 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    44d6:	2000      	movs	r0, #0
    44d8:	e7cb      	b.n	4472 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    44da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    44de:	0841      	lsrs	r1, r0, #1
    44e0:	e7ea      	b.n	44b8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x118>
    44e2:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
    44e6:	2030      	movs	r0, #48	; 0x30
    44e8:	f7fc fa62 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44ec:	0000f009 	.word	0x0000f009
    44f0:	20000100 	.word	0x20000100

000044f4 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
    44f4:	4901      	ldr	r1, [pc, #4]	; (44fc <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
    44f6:	8088      	strh	r0, [r1, #4]
    44f8:	4770      	bx	lr
    44fa:	0000      	.short	0x0000
    44fc:	20000100 	.word	0x20000100

00004500 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    4500:	4805      	ldr	r0, [pc, #20]	; (4518 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
    4502:	2100      	movs	r1, #0
    4504:	7001      	strb	r1, [r0, #0]
    4506:	2201      	movs	r2, #1
    4508:	7082      	strb	r2, [r0, #2]
    450a:	7041      	strb	r1, [r0, #1]
    450c:	f242 7110 	movw	r1, #10000	; 0x2710
    4510:	8081      	strh	r1, [r0, #4]
    4512:	f000 b803 	b.w	451c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    4516:	0000      	.short	0x0000
    4518:	20000100 	.word	0x20000100

0000451c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    451c:	b51c      	push	{r2, r3, r4, lr}
    451e:	4909      	ldr	r1, [pc, #36]	; (4544 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x28>)
    4520:	e9d1 0100 	ldrd	r0, r1, [r1]
    4524:	e9cd 0100 	strd	r0, r1, [sp]
    4528:	e002      	b.n	4530 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x14>
    452a:	9800      	ldr	r0, [sp, #0]
    452c:	f00a fb63 	bl	ebf6 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    4530:	4668      	mov	r0, sp
    4532:	f7fc fdbd 	bl	10b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4536:	2800      	cmp	r0, #0
    4538:	d0f7      	beq.n	452a <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xe>
    453a:	f000 f8c7 	bl	46cc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xac>
    453e:	2000      	movs	r0, #0
    4540:	bd1c      	pop	{r2, r3, r4, pc}
    4542:	0000      	.short	0x0000
    4544:	00004e64 	.word	0x00004e64

00004548 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    4548:	4901      	ldr	r1, [pc, #4]	; (4550 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    454a:	7008      	strb	r0, [r1, #0]
    454c:	4770      	bx	lr
    454e:	0000      	.short	0x0000
    4550:	20000100 	.word	0x20000100

00004554 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    4554:	4908      	ldr	r1, [pc, #32]	; (4578 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    4556:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    455a:	fbb1 f1f2 	udiv	r1, r1, r2
    455e:	b510      	push	{r4, lr}
    4560:	f501 7128 	add.w	r1, r1, #672	; 0x2a0
    4564:	f009 fe24 	bl	e1b0 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    4568:	f640 0148 	movw	r1, #2120	; 0x848
    456c:	4288      	cmp	r0, r1
    456e:	d300      	bcc.n	4572 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x1e>
    4570:	4608      	mov	r0, r1
    4572:	b280      	uxth	r0, r0
    4574:	bd10      	pop	{r4, pc}
    4576:	0000      	.short	0x0000
    4578:	0001527d 	.word	0x0001527d

0000457c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    457c:	b510      	push	{r4, lr}
    457e:	f003 fb93 	bl	7ca8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    4582:	4905      	ldr	r1, [pc, #20]	; (4598 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x1c>)
    4584:	688a      	ldr	r2, [r1, #8]
    4586:	4290      	cmp	r0, r2
    4588:	d801      	bhi.n	458e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x12>
    458a:	7848      	ldrb	r0, [r1, #1]
    458c:	b108      	cbz	r0, 4592 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x16>
    458e:	2000      	movs	r0, #0
    4590:	bd10      	pop	{r4, pc}
    4592:	2001      	movs	r0, #1
    4594:	bd10      	pop	{r4, pc}
    4596:	0000      	.short	0x0000
    4598:	20000100 	.word	0x20000100

0000459c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    459c:	b510      	push	{r4, lr}
    459e:	4604      	mov	r4, r0
    45a0:	2906      	cmp	r1, #6
    45a2:	d238      	bcs.n	4616 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7a>
    45a4:	e8df f001 	tbb	[pc, r1]
    45a8:	14031105 	.word	0x14031105
    45ac:	3215      	.short	0x3215
    45ae:	2100      	movs	r1, #0
    45b0:	e006      	b.n	45c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24>
    45b2:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    45b6:	b110      	cbz	r0, 45be <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22>
    45b8:	4620      	mov	r0, r4
    45ba:	f00a fc46 	bl	ee4a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1fc>
    45be:	2101      	movs	r1, #1
    45c0:	4620      	mov	r0, r4
    45c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    45c6:	f000 b97f 	b.w	48c8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2a8>
    45ca:	2003      	movs	r0, #3
    45cc:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    45d0:	bd10      	pop	{r4, pc}
    45d2:	f003 fb75 	bl	7cc0 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    45d6:	f8c4 02ac 	str.w	r0, [r4, #684]	; 0x2ac
    45da:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    45de:	f003 fc33 	bl	7e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    45e2:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    45e6:	4288      	cmp	r0, r1
    45e8:	d904      	bls.n	45f4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x58>
    45ea:	f240 31e3 	movw	r1, #995	; 0x3e3
    45ee:	2030      	movs	r0, #48	; 0x30
    45f0:	f7fc f9de 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45f4:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    45f8:	f003 fc26 	bl	7e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    45fc:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    4600:	1a08      	subs	r0, r1, r0
    4602:	4906      	ldr	r1, [pc, #24]	; (461c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x80>)
    4604:	688a      	ldr	r2, [r1, #8]
    4606:	4410      	add	r0, r2
    4608:	6088      	str	r0, [r1, #8]
    460a:	bd10      	pop	{r4, pc}
    460c:	4620      	mov	r0, r4
    460e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4612:	f00a bc07 	b.w	ee24 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
    4616:	f240 7199 	movw	r1, #1945	; 0x799
    461a:	e7e8      	b.n	45ee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x52>
    461c:	20000100 	.word	0x20000100

00004620 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    4620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4624:	460c      	mov	r4, r1
    4626:	4680      	mov	r8, r0
    4628:	b112      	cbz	r2, 4630 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x10>
    462a:	f240 71c3 	movw	r1, #1987	; 0x7c3
    462e:	e037      	b.n	46a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x80>
    4630:	f003 fb3a 	bl	7ca8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    4634:	4607      	mov	r7, r0
    4636:	2000      	movs	r0, #0
    4638:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
    463c:	e9d4 563e 	ldrd	r5, r6, [r4, #248]	; 0xf8
    4640:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    4644:	2001      	movs	r0, #1
    4646:	f884 00e1 	strb.w	r0, [r4, #225]	; 0xe1
    464a:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    464e:	2101      	movs	r1, #1
    4650:	34c8      	adds	r4, #200	; 0xc8
    4652:	f7fe f859 	bl	2708 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    4656:	f854 0f04 	ldr.w	r0, [r4, #4]!
    465a:	f8c0 5290 	str.w	r5, [r0, #656]	; 0x290
    465e:	f8c0 6294 	str.w	r6, [r0, #660]	; 0x294
    4662:	6821      	ldr	r1, [r4, #0]
    4664:	f814 0c04 	ldrb.w	r0, [r4, #-4]
    4668:	f881 02a4 	strb.w	r0, [r1, #676]	; 0x2a4
    466c:	6820      	ldr	r0, [r4, #0]
    466e:	f8c0 72a8 	str.w	r7, [r0, #680]	; 0x2a8
    4672:	6820      	ldr	r0, [r4, #0]
    4674:	e9c0 56a6 	strd	r5, r6, [r0, #664]	; 0x298
    4678:	f854 09cc 	ldr.w	r0, [r4], #-204
    467c:	f00a fd6d 	bl	f15a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x50c>
    4680:	b110      	cbz	r0, 4688 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x68>
    4682:	f44f 61ea 	mov.w	r1, #1872	; 0x750
    4686:	e00b      	b.n	46a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x80>
    4688:	f00a fbd8 	bl	ee3c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    468c:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    4690:	4642      	mov	r2, r8
    4692:	4906      	ldr	r1, [pc, #24]	; (46ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>)
    4694:	f006 f8d2 	bl	a83c <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    4698:	2800      	cmp	r0, #0
    469a:	d104      	bne.n	46a6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x86>
    469c:	f240 71ac 	movw	r1, #1964	; 0x7ac
    46a0:	2030      	movs	r0, #48	; 0x30
    46a2:	f7fc f985 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    46aa:	0000      	.short	0x0000
    46ac:	0000f075 	.word	0x0000f075
    46b0:	b510      	push	{r4, lr}
    46b2:	280c      	cmp	r0, #12
    46b4:	d304      	bcc.n	46c0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa0>
    46b6:	f240 318a 	movw	r1, #906	; 0x38a
    46ba:	2006      	movs	r0, #6
    46bc:	f7fc f978 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46c0:	4901      	ldr	r1, [pc, #4]	; (46c8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa8>)
    46c2:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    46c6:	bd10      	pop	{r4, pc}
    46c8:	00004e80 	.word	0x00004e80
    46cc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    46d0:	4d16      	ldr	r5, [pc, #88]	; (472c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x10c>)
    46d2:	2001      	movs	r0, #1
    46d4:	7068      	strb	r0, [r5, #1]
    46d6:	2400      	movs	r4, #0
    46d8:	f64f 76ff 	movw	r6, #65535	; 0xffff
    46dc:	e00b      	b.n	46f6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xd6>
    46de:	2100      	movs	r1, #0
    46e0:	f7fc fc94 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    46e4:	0007      	movs	r7, r0
    46e6:	d009      	beq.n	46fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xdc>
    46e8:	f897 02a4 	ldrb.w	r0, [r7, #676]	; 0x2a4
    46ec:	f006 f8d6 	bl	a89c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    46f0:	4638      	mov	r0, r7
    46f2:	f00a fc7c 	bl	efee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3a0>
    46f6:	9400      	str	r4, [sp, #0]
    46f8:	9401      	str	r4, [sp, #4]
    46fa:	e00e      	b.n	471a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xfa>
    46fc:	f44f 7191 	mov.w	r1, #290	; 0x122
    4700:	2030      	movs	r0, #48	; 0x30
    4702:	f7fc f955 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4706:	9800      	ldr	r0, [sp, #0]
    4708:	b138      	cbz	r0, 471a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xfa>
    470a:	f890 12a4 	ldrb.w	r1, [r0, #676]	; 0x2a4
    470e:	2920      	cmp	r1, #32
    4710:	d003      	beq.n	471a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xfa>
    4712:	8800      	ldrh	r0, [r0, #0]
    4714:	42b0      	cmp	r0, r6
    4716:	d1e2      	bne.n	46de <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xbe>
    4718:	e004      	b.n	4724 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x104>
    471a:	4668      	mov	r0, sp
    471c:	f7fc fcc8 	bl	10b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4720:	2800      	cmp	r0, #0
    4722:	d0f0      	beq.n	4706 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe6>
    4724:	706c      	strb	r4, [r5, #1]
    4726:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    472a:	0000      	.short	0x0000
    472c:	20000100 	.word	0x20000100
    4730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4734:	4604      	mov	r4, r0
    4736:	4839      	ldr	r0, [pc, #228]	; (481c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1fc>)
    4738:	461e      	mov	r6, r3
    473a:	4690      	mov	r8, r2
    473c:	7880      	ldrb	r0, [r0, #2]
    473e:	4689      	mov	r9, r1
    4740:	2500      	movs	r5, #0
    4742:	2800      	cmp	r0, #0
    4744:	d063      	beq.n	480e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    4746:	f007 fbfd 	bl	bf44 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    474a:	b3e0      	cbz	r0, 47c6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a6>
    474c:	f8b4 0248 	ldrh.w	r0, [r4, #584]	; 0x248
    4750:	2802      	cmp	r0, #2
    4752:	d35c      	bcc.n	480e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    4754:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4758:	2802      	cmp	r0, #2
    475a:	d058      	beq.n	480e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    475c:	f894 0272 	ldrb.w	r0, [r4, #626]	; 0x272
    4760:	bb88      	cbnz	r0, 47c6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a6>
    4762:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    4766:	f7ff ffa3 	bl	46b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    476a:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    476e:	b281      	uxth	r1, r0
    4770:	8031      	strh	r1, [r6, #0]
    4772:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4776:	2700      	movs	r7, #0
    4778:	2801      	cmp	r0, #1
    477a:	d00d      	beq.n	4798 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x178>
    477c:	6920      	ldr	r0, [r4, #16]
    477e:	f007 fc2b 	bl	bfd8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4782:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
    4786:	4442      	add	r2, r8
    4788:	eba2 0109 	sub.w	r1, r2, r9
    478c:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    4790:	1a82      	subs	r2, r0, r2
    4792:	fb01 7502 	mla	r5, r1, r2, r7
    4796:	e035      	b.n	4804 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1e4>
    4798:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
    479c:	2803      	cmp	r0, #3
    479e:	d039      	beq.n	4814 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>
    47a0:	2101      	movs	r1, #1
    47a2:	2000      	movs	r0, #0
    47a4:	f009 f988 	bl	dab8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    47a8:	6a21      	ldr	r1, [r4, #32]
    47aa:	1847      	adds	r7, r0, r1
    47ac:	8831      	ldrh	r1, [r6, #0]
    47ae:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    47b2:	f007 fc11 	bl	bfd8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    47b6:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    47ba:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
    47be:	1a82      	subs	r2, r0, r2
    47c0:	fb01 5502 	mla	r5, r1, r2, r5
    47c4:	e000      	b.n	47c8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a8>
    47c6:	e022      	b.n	480e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    47c8:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    47cc:	8831      	ldrh	r1, [r6, #0]
    47ce:	4638      	mov	r0, r7
    47d0:	f007 fc02 	bl	bfd8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    47d4:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    47d8:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    47dc:	1a41      	subs	r1, r0, r1
    47de:	440d      	add	r5, r1
    47e0:	8831      	ldrh	r1, [r6, #0]
    47e2:	6920      	ldr	r0, [r4, #16]
    47e4:	f007 fbf8 	bl	bfd8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    47e8:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
    47ec:	4442      	add	r2, r8
    47ee:	eba2 0109 	sub.w	r1, r2, r9
    47f2:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
    47f6:	1a89      	subs	r1, r1, r2
    47f8:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    47fc:	1a82      	subs	r2, r0, r2
    47fe:	1e49      	subs	r1, r1, #1
    4800:	fb01 5502 	mla	r5, r1, r2, r5
    4804:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4808:	2001      	movs	r0, #1
    480a:	f884 0272 	strb.w	r0, [r4, #626]	; 0x272
    480e:	4628      	mov	r0, r5
    4810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4814:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4818:	e7c6      	b.n	47a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x188>
    481a:	0000      	.short	0x0000
    481c:	20000100 	.word	0x20000100
    4820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4824:	4605      	mov	r5, r0
    4826:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    482a:	2128      	movs	r1, #40	; 0x28
    482c:	f00a fa76 	bl	ed1c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    4830:	f500 782c 	add.w	r8, r0, #688	; 0x2b0
    4834:	f00b fea8 	bl	10588 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    4838:	2869      	cmp	r0, #105	; 0x69
    483a:	d800      	bhi.n	483e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x21e>
    483c:	2069      	movs	r0, #105	; 0x69
    483e:	f8d5 1264 	ldr.w	r1, [r5, #612]	; 0x264
    4842:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
    4846:	692a      	ldr	r2, [r5, #16]
    4848:	440b      	add	r3, r1
    484a:	429a      	cmp	r2, r3
    484c:	d903      	bls.n	4856 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
    484e:	1a51      	subs	r1, r2, r1
    4850:	1a0c      	subs	r4, r1, r0
    4852:	3469      	adds	r4, #105	; 0x69
    4854:	e000      	b.n	4858 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x238>
    4856:	2400      	movs	r4, #0
    4858:	4f1a      	ldr	r7, [pc, #104]	; (48c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2a4>)
    485a:	7838      	ldrb	r0, [r7, #0]
    485c:	b918      	cbnz	r0, 4866 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x246>
    485e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    4860:	42a0      	cmp	r0, r4
    4862:	d800      	bhi.n	4866 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x246>
    4864:	4604      	mov	r4, r0
    4866:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    486a:	f009 fcac 	bl	e1c6 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    486e:	4606      	mov	r6, r0
    4870:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    4874:	f00a fc64 	bl	f140 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4f2>
    4878:	f8d5 1230 	ldr.w	r1, [r5, #560]	; 0x230
    487c:	4430      	add	r0, r6
    487e:	1846      	adds	r6, r0, r1
    4880:	1ba4      	subs	r4, r4, r6
    4882:	2c00      	cmp	r4, #0
    4884:	dc00      	bgt.n	4888 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x268>
    4886:	2400      	movs	r4, #0
    4888:	2002      	movs	r0, #2
    488a:	f005 f8f1 	bl	9a70 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    488e:	4284      	cmp	r4, r0
    4890:	d300      	bcc.n	4894 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x274>
    4892:	4604      	mov	r4, r0
    4894:	2102      	movs	r1, #2
    4896:	4620      	mov	r0, r4
    4898:	f004 fffa 	bl	9890 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    489c:	b900      	cbnz	r0, 48a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x280>
    489e:	4426      	add	r6, r4
    48a0:	4642      	mov	r2, r8
    48a2:	4631      	mov	r1, r6
    48a4:	4628      	mov	r0, r5
    48a6:	f009 fc2f 	bl	e108 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    48aa:	60b8      	str	r0, [r7, #8]
    48ac:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    48b0:	f00a fc46 	bl	f140 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4f2>
    48b4:	1a30      	subs	r0, r6, r0
    48b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    48ba:	f5a0 70b7 	sub.w	r0, r0, #366	; 0x16e
    48be:	f006 ba05 	b.w	accc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    48c2:	0000      	.short	0x0000
    48c4:	20000100 	.word	0x20000100
    48c8:	b538      	push	{r3, r4, r5, lr}
    48ca:	2500      	movs	r5, #0
    48cc:	4604      	mov	r4, r0
    48ce:	2901      	cmp	r1, #1
    48d0:	d102      	bne.n	48d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2b8>
    48d2:	4810      	ldr	r0, [pc, #64]	; (4914 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f4>)
    48d4:	7840      	ldrb	r0, [r0, #1]
    48d6:	b170      	cbz	r0, 48f6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2d6>
    48d8:	2004      	movs	r0, #4
    48da:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    48de:	bf00      	nop
    48e0:	f00a faac 	bl	ee3c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    48e4:	f8a4 52a2 	strh.w	r5, [r4, #674]	; 0x2a2
    48e8:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    48ec:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    48f0:	f884 5271 	strb.w	r5, [r4, #625]	; 0x271
    48f4:	bd38      	pop	{r3, r4, r5, pc}
    48f6:	9500      	str	r5, [sp, #0]
    48f8:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    48fc:	2301      	movs	r3, #1
    48fe:	2200      	movs	r2, #0
    4900:	4620      	mov	r0, r4
    4902:	f000 f809 	bl	4918 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    4906:	2800      	cmp	r0, #0
    4908:	d0ea      	beq.n	48e0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2c0>
    490a:	f240 710e 	movw	r1, #1806	; 0x70e
    490e:	2030      	movs	r0, #48	; 0x30
    4910:	f7fc f84e 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4914:	20000100 	.word	0x20000100
    4918:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    491c:	b08b      	sub	sp, #44	; 0x2c
    491e:	4604      	mov	r4, r0
    4920:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    4924:	4699      	mov	r9, r3
    4926:	460f      	mov	r7, r1
    4928:	9307      	str	r3, [sp, #28]
    492a:	9005      	str	r0, [sp, #20]
    492c:	f00b fd4e 	bl	103cc <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    4930:	4605      	mov	r5, r0
    4932:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    4936:	f7ff febb 	bl	46b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    493a:	4428      	add	r0, r5
    493c:	f8ad 0004 	strh.w	r0, [sp, #4]
    4940:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    4944:	280d      	cmp	r0, #13
    4946:	d004      	beq.n	4952 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x332>
    4948:	2000      	movs	r0, #0
    494a:	9008      	str	r0, [sp, #32]
    494c:	980d      	ldr	r0, [sp, #52]	; 0x34
    494e:	b110      	cbz	r0, 4956 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x336>
    4950:	e02e      	b.n	49b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    4952:	2001      	movs	r0, #1
    4954:	e7f9      	b.n	494a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x32a>
    4956:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    495a:	2803      	cmp	r0, #3
    495c:	d128      	bne.n	49b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    495e:	9808      	ldr	r0, [sp, #32]
    4960:	b330      	cbz	r0, 49b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    4962:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
    4966:	42b8      	cmp	r0, r7
    4968:	d122      	bne.n	49b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    496a:	f8d4 0264 	ldr.w	r0, [r4, #612]	; 0x264
    496e:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    4972:	6920      	ldr	r0, [r4, #16]
    4974:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    4978:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
    497c:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    4980:	4408      	add	r0, r1
    4982:	f8c4 0258 	str.w	r0, [r4, #600]	; 0x258
    4986:	4620      	mov	r0, r4
    4988:	f000 fa86 	bl	4e98 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    498c:	f8d4 02d0 	ldr.w	r0, [r4, #720]	; 0x2d0
    4990:	6220      	str	r0, [r4, #32]
    4992:	f8b4 02ce 	ldrh.w	r0, [r4, #718]	; 0x2ce
    4996:	84a0      	strh	r0, [r4, #36]	; 0x24
    4998:	f8d4 02d4 	ldr.w	r0, [r4, #724]	; 0x2d4
    499c:	6120      	str	r0, [r4, #16]
    499e:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
    49a2:	8320      	strh	r0, [r4, #24]
    49a4:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
    49a8:	8360      	strh	r0, [r4, #26]
    49aa:	2002      	movs	r0, #2
    49ac:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    49b0:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    49b4:	f504 751e 	add.w	r5, r4, #632	; 0x278
    49b8:	1a38      	subs	r0, r7, r0
    49ba:	fa0f fa80 	sxth.w	sl, r0
    49be:	f8b4 02a0 	ldrh.w	r0, [r4, #672]	; 0x2a0
    49c2:	1a38      	subs	r0, r7, r0
    49c4:	fa0f f880 	sxth.w	r8, r0
    49c8:	f1b8 0f00 	cmp.w	r8, #0
    49cc:	da08      	bge.n	49e0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c0>
    49ce:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
    49d2:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
    49d6:	46d0      	mov	r8, sl
    49d8:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
    49dc:	2001      	movs	r0, #1
    49de:	9007      	str	r0, [sp, #28]
    49e0:	ab01      	add	r3, sp, #4
    49e2:	4652      	mov	r2, sl
    49e4:	4641      	mov	r1, r8
    49e6:	4620      	mov	r0, r4
    49e8:	f7ff fea2 	bl	4730 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x110>
    49ec:	9004      	str	r0, [sp, #16]
    49ee:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    49f2:	f8df b334 	ldr.w	fp, [pc, #820]	; 4d28 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x708>
    49f6:	b140      	cbz	r0, 4a0a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3ea>
    49f8:	2801      	cmp	r0, #1
    49fa:	d07d      	beq.n	4af8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4d8>
    49fc:	2802      	cmp	r0, #2
    49fe:	d051      	beq.n	4aa4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x484>
    4a00:	2803      	cmp	r0, #3
    4a02:	d07a      	beq.n	4afa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    4a04:	f240 518e 	movw	r1, #1422	; 0x58e
    4a08:	e18a      	b.n	4d20 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x700>
    4a0a:	2101      	movs	r1, #1
    4a0c:	2000      	movs	r0, #0
    4a0e:	f009 f853 	bl	dab8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    4a12:	4606      	mov	r6, r0
    4a14:	6a20      	ldr	r0, [r4, #32]
    4a16:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4a1a:	4430      	add	r0, r6
    4a1c:	f007 fadc 	bl	bfd8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4a20:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    4a24:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4a28:	6920      	ldr	r0, [r4, #16]
    4a2a:	f007 fad5 	bl	bfd8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4a2e:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4a32:	a907      	add	r1, sp, #28
    4a34:	a806      	add	r0, sp, #24
    4a36:	f003 f89f 	bl	7b78 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    4a3a:	e9d4 01a6 	ldrd	r0, r1, [r4, #664]	; 0x298
    4a3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    4a42:	f006 fa15 	bl	ae70 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    4a46:	4682      	mov	sl, r0
    4a48:	4620      	mov	r0, r4
    4a4a:	f00a f9eb 	bl	ee24 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
    4a4e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4a52:	f8d4 82a8 	ldr.w	r8, [r4, #680]	; 0x2a8
    4a56:	f003 fa23 	bl	7ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4a5a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4a5e:	4401      	add	r1, r0
    4a60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4a64:	fbb1 f0f0 	udiv	r0, r1, r0
    4a68:	6a21      	ldr	r1, [r4, #32]
    4a6a:	f8d4 2260 	ldr.w	r2, [r4, #608]	; 0x260
    4a6e:	4431      	add	r1, r6
    4a70:	1a08      	subs	r0, r1, r0
    4a72:	1a81      	subs	r1, r0, r2
    4a74:	4441      	add	r1, r8
    4a76:	3920      	subs	r1, #32
    4a78:	eba1 060a 	sub.w	r6, r1, sl
    4a7c:	0050      	lsls	r0, r2, #1
    4a7e:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    4a80:	3060      	adds	r0, #96	; 0x60
    4a82:	4401      	add	r1, r0
    4a84:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4a88:	f00a fa3a 	bl	ef00 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b2>
    4a8c:	3022      	adds	r0, #34	; 0x22
    4a8e:	f8cb 000c 	str.w	r0, [fp, #12]
    4a92:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
    4a96:	1a30      	subs	r0, r6, r0
    4a98:	f5b0 7fe4 	cmp.w	r0, #456	; 0x1c8
    4a9c:	d258      	bcs.n	4b50 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x530>
    4a9e:	f240 5127 	movw	r1, #1319	; 0x527
    4aa2:	e13d      	b.n	4d20 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x700>
    4aa4:	6a21      	ldr	r1, [r4, #32]
    4aa6:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4aaa:	4408      	add	r0, r1
    4aac:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4ab0:	f007 fa92 	bl	bfd8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4ab4:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    4ab8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4abc:	6920      	ldr	r0, [r4, #16]
    4abe:	f007 fa8b 	bl	bfd8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4ac2:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4ac6:	4620      	mov	r0, r4
    4ac8:	f00a f9ac 	bl	ee24 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
    4acc:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
    4ad0:	bb10      	cbnz	r0, 4b18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
    4ad2:	f1b9 0f00 	cmp.w	r9, #0
    4ad6:	d01f      	beq.n	4b18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
    4ad8:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
    4adc:	4640      	mov	r0, r8
    4ade:	f003 f9df 	bl	7ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4ae2:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4ae6:	4401      	add	r1, r0
    4ae8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4aec:	fbb1 f0f0 	udiv	r0, r1, r0
    4af0:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    4af4:	4408      	add	r0, r1
    4af6:	e001      	b.n	4afc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4dc>
    4af8:	e02b      	b.n	4b52 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x532>
    4afa:	e047      	b.n	4b8c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x56c>
    4afc:	6a22      	ldr	r2, [r4, #32]
    4afe:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    4b02:	4411      	add	r1, r2
    4b04:	1a0e      	subs	r6, r1, r0
    4b06:	4640      	mov	r0, r8
    4b08:	f003 f99e 	bl	7e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    4b0c:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    4b10:	1a08      	subs	r0, r1, r0
    4b12:	4406      	add	r6, r0
    4b14:	3e20      	subs	r6, #32
    4b16:	e006      	b.n	4b26 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x506>
    4b18:	6a21      	ldr	r1, [r4, #32]
    4b1a:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4b1e:	4408      	add	r0, r1
    4b20:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    4b24:	1a46      	subs	r6, r0, r1
    4b26:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
    4b2a:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
    4b2e:	f8d4 0260 	ldr.w	r0, [r4, #608]	; 0x260
    4b32:	fb01 0002 	mla	r0, r1, r2, r0
    4b36:	0040      	lsls	r0, r0, #1
    4b38:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    4b3a:	3060      	adds	r0, #96	; 0x60
    4b3c:	4401      	add	r1, r0
    4b3e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4b42:	f00a f9dd 	bl	ef00 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b2>
    4b46:	f8cb 000c 	str.w	r0, [fp, #12]
    4b4a:	2001      	movs	r0, #1
    4b4c:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4b50:	e061      	b.n	4c16 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f6>
    4b52:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    4b56:	6920      	ldr	r0, [r4, #16]
    4b58:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    4b5c:	1a86      	subs	r6, r0, r2
    4b5e:	eb01 000a 	add.w	r0, r1, sl
    4b62:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
    4b66:	f8d4 c250 	ldr.w	ip, [r4, #592]	; 0x250
    4b6a:	1a40      	subs	r0, r0, r1
    4b6c:	f8d4 3260 	ldr.w	r3, [r4, #608]	; 0x260
    4b70:	1e40      	subs	r0, r0, #1
    4b72:	fb0c 3101 	mla	r1, ip, r1, r3
    4b76:	fb00 1002 	mla	r0, r0, r2, r1
    4b7a:	0040      	lsls	r0, r0, #1
    4b7c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    4b7e:	3060      	adds	r0, #96	; 0x60
    4b80:	4401      	add	r1, r0
    4b82:	fb06 f608 	mul.w	r6, r6, r8
    4b86:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4b8a:	e040      	b.n	4c0e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ee>
    4b8c:	6920      	ldr	r0, [r4, #16]
    4b8e:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    4b92:	fb00 f008 	mul.w	r0, r0, r8
    4b96:	fb08 0611 	mls	r6, r8, r1, r0
    4b9a:	f894 009d 	ldrb.w	r0, [r4, #157]	; 0x9d
    4b9e:	2825      	cmp	r0, #37	; 0x25
    4ba0:	d003      	beq.n	4baa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58a>
    4ba2:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    4ba6:	2825      	cmp	r0, #37	; 0x25
    4ba8:	d109      	bne.n	4bbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    4baa:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
    4bae:	1a38      	subs	r0, r7, r0
    4bb0:	b200      	sxth	r0, r0
    4bb2:	2800      	cmp	r0, #0
    4bb4:	db03      	blt.n	4bbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    4bb6:	f894 02cf 	ldrb.w	r0, [r4, #719]	; 0x2cf
    4bba:	b100      	cbz	r0, 4bbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    4bbc:	9005      	str	r0, [sp, #20]
    4bbe:	9807      	ldr	r0, [sp, #28]
    4bc0:	b1d8      	cbz	r0, 4bfa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5da>
    4bc2:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
    4bc6:	b9c0      	cbnz	r0, 4bfa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5da>
    4bc8:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    4bcc:	2800      	cmp	r0, #0
    4bce:	d07d      	beq.n	4ccc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ac>
    4bd0:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4bd4:	f003 f964 	bl	7ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4bd8:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4bdc:	4401      	add	r1, r0
    4bde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4be2:	fbb1 f0f0 	udiv	r0, r1, r0
    4be6:	1a36      	subs	r6, r6, r0
    4be8:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4bec:	f003 f92c 	bl	7e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    4bf0:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    4bf4:	1a08      	subs	r0, r1, r0
    4bf6:	4406      	add	r6, r0
    4bf8:	3e20      	subs	r6, #32
    4bfa:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    4bfe:	eb01 000a 	add.w	r0, r1, sl
    4c02:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    4c06:	4348      	muls	r0, r1
    4c08:	0041      	lsls	r1, r0, #1
    4c0a:	3160      	adds	r1, #96	; 0x60
    4c0c:	9805      	ldr	r0, [sp, #20]
    4c0e:	f00a f977 	bl	ef00 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b2>
    4c12:	f8cb 000c 	str.w	r0, [fp, #12]
    4c16:	9804      	ldr	r0, [sp, #16]
    4c18:	f8db 200c 	ldr.w	r2, [fp, #12]
    4c1c:	1a31      	subs	r1, r6, r0
    4c1e:	f8d4 6264 	ldr.w	r6, [r4, #612]	; 0x264
    4c22:	6920      	ldr	r0, [r4, #16]
    4c24:	1b80      	subs	r0, r0, r6
    4c26:	f2a0 2052 	subw	r0, r0, #594	; 0x252
    4c2a:	f8cb 0010 	str.w	r0, [fp, #16]
    4c2e:	4282      	cmp	r2, r0
    4c30:	d800      	bhi.n	4c34 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x614>
    4c32:	4610      	mov	r0, r2
    4c34:	f8c4 0230 	str.w	r0, [r4, #560]	; 0x230
    4c38:	2600      	movs	r6, #0
    4c3a:	702e      	strb	r6, [r5, #0]
    4c3c:	2069      	movs	r0, #105	; 0x69
    4c3e:	8128      	strh	r0, [r5, #8]
    4c40:	e9d4 20a6 	ldrd	r2, r0, [r4, #664]	; 0x298
    4c44:	1851      	adds	r1, r2, r1
    4c46:	4170      	adcs	r0, r6
    4c48:	e9c5 1004 	strd	r1, r0, [r5, #16]
    4c4c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    4c50:	f009 fab9 	bl	e1c6 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    4c54:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
    4c58:	4408      	add	r0, r1
    4c5a:	6068      	str	r0, [r5, #4]
    4c5c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    4c60:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
    4c64:	f8a4 72a0 	strh.w	r7, [r4, #672]	; 0x2a0
    4c68:	72ae      	strb	r6, [r5, #10]
    4c6a:	f8b4 0220 	ldrh.w	r0, [r4, #544]	; 0x220
    4c6e:	1bc0      	subs	r0, r0, r7
    4c70:	b200      	sxth	r0, r0
    4c72:	2800      	cmp	r0, #0
    4c74:	dd01      	ble.n	4c7a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x65a>
    4c76:	2002      	movs	r0, #2
    4c78:	72a8      	strb	r0, [r5, #10]
    4c7a:	9808      	ldr	r0, [sp, #32]
    4c7c:	b338      	cbz	r0, 4cce <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ae>
    4c7e:	f1b9 0f00 	cmp.w	r9, #0
    4c82:	d01c      	beq.n	4cbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    4c84:	f8b4 1248 	ldrh.w	r1, [r4, #584]	; 0x248
    4c88:	b3f1      	cbz	r1, 4d08 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6e8>
    4c8a:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    4c8e:	bf00      	nop
    4c90:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    4c94:	f894 224c 	ldrb.w	r2, [r4, #588]	; 0x24c
    4c98:	1c40      	adds	r0, r0, #1
    4c9a:	4342      	muls	r2, r0
    4c9c:	428a      	cmp	r2, r1
    4c9e:	d20e      	bcs.n	4cbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    4ca0:	7aa8      	ldrb	r0, [r5, #10]
    4ca2:	b160      	cbz	r0, 4cbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    4ca4:	72ae      	strb	r6, [r5, #10]
    4ca6:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    4caa:	1c40      	adds	r0, r0, #1
    4cac:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    4cb0:	f7fe f980 	bl	2fb4 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    4cb4:	f000 0007 	and.w	r0, r0, #7
    4cb8:	1c40      	adds	r0, r0, #1
    4cba:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    4cbe:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    4cc2:	4629      	mov	r1, r5
    4cc4:	f00a f92e 	bl	ef24 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    4cc8:	b340      	cbz	r0, 4d1c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6fc>
    4cca:	e001      	b.n	4cd0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6b0>
    4ccc:	e009      	b.n	4ce2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6c2>
    4cce:	e00b      	b.n	4ce8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6c8>
    4cd0:	980d      	ldr	r0, [sp, #52]	; 0x34
    4cd2:	f080 0001 	eor.w	r0, r0, #1
    4cd6:	f884 0270 	strb.w	r0, [r4, #624]	; 0x270
    4cda:	2000      	movs	r0, #0
    4cdc:	b00f      	add	sp, #60	; 0x3c
    4cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ce2:	f240 5179 	movw	r1, #1401	; 0x579
    4ce6:	e01b      	b.n	4d20 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x700>
    4ce8:	f1b9 0f00 	cmp.w	r9, #0
    4cec:	d1ca      	bne.n	4c84 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x664>
    4cee:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4cf2:	2800      	cmp	r0, #0
    4cf4:	d0e3      	beq.n	4cbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    4cf6:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    4cfa:	6920      	ldr	r0, [r4, #16]
    4cfc:	1a41      	subs	r1, r0, r1
    4cfe:	4628      	mov	r0, r5
    4d00:	f008 fef0 	bl	dae4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    4d04:	0400      	lsls	r0, r0, #16
    4d06:	e000      	b.n	4d0a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ea>
    4d08:	e006      	b.n	4d18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6f8>
    4d0a:	0c00      	lsrs	r0, r0, #16
    4d0c:	d0d7      	beq.n	4cbe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    4d0e:	9918      	ldr	r1, [sp, #96]	; 0x60
    4d10:	b101      	cbz	r1, 4d14 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6f4>
    4d12:	8008      	strh	r0, [r1, #0]
    4d14:	2001      	movs	r0, #1
    4d16:	e7e1      	b.n	4cdc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6bc>
    4d18:	2000      	movs	r0, #0
    4d1a:	e7b9      	b.n	4c90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x670>
    4d1c:	f240 51d7 	movw	r1, #1495	; 0x5d7
    4d20:	2030      	movs	r0, #48	; 0x30
    4d22:	f7fb fe45 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d26:	0000      	.short	0x0000
    4d28:	20000100 	.word	0x20000100
    4d2c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    4d2e:	4604      	mov	r4, r0
    4d30:	f00b fc33 	bl	1059a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4d34:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    4d38:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
    4d3c:	1ac0      	subs	r0, r0, r3
    4d3e:	eb61 0102 	sbc.w	r1, r1, r2
    4d42:	2200      	movs	r2, #0
    4d44:	4613      	mov	r3, r2
    4d46:	1a12      	subs	r2, r2, r0
    4d48:	418b      	sbcs	r3, r1
    4d4a:	db02      	blt.n	4d52 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x732>
    4d4c:	f240 6154 	movw	r1, #1620	; 0x654
    4d50:	e04d      	b.n	4dee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7ce>
    4d52:	1c42      	adds	r2, r0, #1
    4d54:	f171 0100 	sbcs.w	r1, r1, #0
    4d58:	db02      	blt.n	4d60 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x740>
    4d5a:	f240 6155 	movw	r1, #1621	; 0x655
    4d5e:	e046      	b.n	4dee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7ce>
    4d60:	6922      	ldr	r2, [r4, #16]
    4d62:	2100      	movs	r1, #0
    4d64:	b10a      	cbz	r2, 4d6a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x74a>
    4d66:	fbb0 f1f2 	udiv	r1, r0, r2
    4d6a:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    4d6e:	280d      	cmp	r0, #13
    4d70:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    4d74:	d01b      	beq.n	4dae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x78e>
    4d76:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
    4d7a:	1853      	adds	r3, r2, r1
    4d7c:	1ac3      	subs	r3, r0, r3
    4d7e:	b21b      	sxth	r3, r3
    4d80:	2b00      	cmp	r3, #0
    4d82:	db01      	blt.n	4d88 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x768>
    4d84:	1c40      	adds	r0, r0, #1
    4d86:	e001      	b.n	4d8c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x76c>
    4d88:	1c49      	adds	r1, r1, #1
    4d8a:	1850      	adds	r0, r2, r1
    4d8c:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    4d90:	f894 0271 	ldrb.w	r0, [r4, #625]	; 0x271
    4d94:	f88d 0000 	strb.w	r0, [sp]
    4d98:	9800      	ldr	r0, [sp, #0]
    4d9a:	9000      	str	r0, [sp, #0]
    4d9c:	f89d 0000 	ldrb.w	r0, [sp]
    4da0:	b940      	cbnz	r0, 4db4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x794>
    4da2:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    4da6:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    4daa:	4288      	cmp	r0, r1
    4dac:	d102      	bne.n	4db4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x794>
    4dae:	1c40      	adds	r0, r0, #1
    4db0:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    4db4:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
    4db8:	1c40      	adds	r0, r0, #1
    4dba:	f8a4 02a2 	strh.w	r0, [r4, #674]	; 0x2a2
    4dbe:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
    4dc2:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    4dc6:	1a40      	subs	r0, r0, r1
    4dc8:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    4dcc:	1e40      	subs	r0, r0, #1
    4dce:	4408      	add	r0, r1
    4dd0:	b285      	uxth	r5, r0
    4dd2:	e026      	b.n	4e22 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x802>
    4dd4:	a801      	add	r0, sp, #4
    4dd6:	2300      	movs	r3, #0
    4dd8:	9000      	str	r0, [sp, #0]
    4dda:	461a      	mov	r2, r3
    4ddc:	4620      	mov	r0, r4
    4dde:	f7ff fd9b 	bl	4918 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    4de2:	2800      	cmp	r0, #0
    4de4:	d03a      	beq.n	4e5c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x83c>
    4de6:	2801      	cmp	r0, #1
    4de8:	d004      	beq.n	4df4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7d4>
    4dea:	f240 6194 	movw	r1, #1684	; 0x694
    4dee:	2030      	movs	r0, #48	; 0x30
    4df0:	f7fb fdde 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4df4:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    4df8:	f8b4 1220 	ldrh.w	r1, [r4, #544]	; 0x220
    4dfc:	1a42      	subs	r2, r0, r1
    4dfe:	b212      	sxth	r2, r2
    4e00:	2a00      	cmp	r2, #0
    4e02:	da09      	bge.n	4e18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7f8>
    4e04:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    4e08:	4402      	add	r2, r0
    4e0a:	1aaa      	subs	r2, r5, r2
    4e0c:	b212      	sxth	r2, r2
    4e0e:	2a00      	cmp	r2, #0
    4e10:	da02      	bge.n	4e18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7f8>
    4e12:	f8a4 126e 	strh.w	r1, [r4, #622]	; 0x26e
    4e16:	e004      	b.n	4e22 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x802>
    4e18:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4e1c:	4408      	add	r0, r1
    4e1e:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    4e22:	f8b4 126e 	ldrh.w	r1, [r4, #622]	; 0x26e
    4e26:	1a68      	subs	r0, r5, r1
    4e28:	b200      	sxth	r0, r0
    4e2a:	2800      	cmp	r0, #0
    4e2c:	dad2      	bge.n	4dd4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7b4>
    4e2e:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
    4e32:	b188      	cbz	r0, 4e58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x838>
    4e34:	f05f 0008 	movs.w	r0, #8
    4e38:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    4e3c:	2202      	movs	r2, #2
    4e3e:	4908      	ldr	r1, [pc, #32]	; (4e60 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x840>)
    4e40:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    4e44:	f009 f928 	bl	e098 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    4e48:	4620      	mov	r0, r4
    4e4a:	f00a f9fc 	bl	f246 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    4e4e:	4620      	mov	r0, r4
    4e50:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    4e54:	f00a b8cb 	b.w	efee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3a0>
    4e58:	203e      	movs	r0, #62	; 0x3e
    4e5a:	e7ed      	b.n	4e38 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x818>
    4e5c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    4e5e:	0000      	.short	0x0000
    4e60:	0000e355 	.word	0x0000e355
    4e64:	00000000 	.word	0x00000000
    4e68:	00010000 	.word	0x00010000
    4e6c:	00000000 	.word	0x00000000
    4e70:	00010000 	.word	0x00010000
    4e74:	00000000 	.word	0x00000000
    4e78:	00001e14 	.word	0x00001e14
    4e7c:	00001130 	.word	0x00001130
    4e80:	00fa01f4 	.word	0x00fa01f4
    4e84:	00640096 	.word	0x00640096
    4e88:	0032004b 	.word	0x0032004b
    4e8c:	0014001e 	.word	0x0014001e
    4e90:	0005000a 	.word	0x0005000a
    4e94:	00010002 	.word	0x00010002

00004e98 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    4e98:	b510      	push	{r4, lr}
    4e9a:	4604      	mov	r4, r0
    4e9c:	f8d0 02d4 	ldr.w	r0, [r0, #724]	; 0x2d4
    4ea0:	6921      	ldr	r1, [r4, #16]
    4ea2:	4288      	cmp	r0, r1
    4ea4:	d109      	bne.n	4eba <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    4ea6:	f8b4 12d8 	ldrh.w	r1, [r4, #728]	; 0x2d8
    4eaa:	8b22      	ldrh	r2, [r4, #24]
    4eac:	4291      	cmp	r1, r2
    4eae:	d104      	bne.n	4eba <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    4eb0:	f8b4 12da 	ldrh.w	r1, [r4, #730]	; 0x2da
    4eb4:	8b62      	ldrh	r2, [r4, #26]
    4eb6:	4291      	cmp	r1, r2
    4eb8:	d014      	beq.n	4ee4 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4c>
    4eba:	8821      	ldrh	r1, [r4, #0]
    4ebc:	f8a4 11ca 	strh.w	r1, [r4, #458]	; 0x1ca
    4ec0:	f008 fd3c 	bl	d93c <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    4ec4:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    4ec8:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
    4ecc:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    4ed0:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
    4ed4:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    4ed8:	2202      	movs	r2, #2
    4eda:	4907      	ldr	r1, [pc, #28]	; (4ef8 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x60>)
    4edc:	f504 70df 	add.w	r0, r4, #446	; 0x1be
    4ee0:	f009 f8ee 	bl	e0c0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    4ee4:	2102      	movs	r1, #2
    4ee6:	4620      	mov	r0, r4
    4ee8:	f7fd fc0e 	bl	2708 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    4eec:	2000      	movs	r0, #0
    4eee:	f804 0f9e 	strb.w	r0, [r4, #158]!
    4ef2:	2003      	movs	r0, #3
    4ef4:	70e0      	strb	r0, [r4, #3]
    4ef6:	bd10      	pop	{r4, pc}
    4ef8:	0000e3e3 	.word	0x0000e3e3

00004efc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    4efc:	4806      	ldr	r0, [pc, #24]	; (4f18 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    4efe:	4905      	ldr	r1, [pc, #20]	; (4f14 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    4f00:	6501      	str	r1, [r0, #80]	; 0x50
    4f02:	4906      	ldr	r1, [pc, #24]	; (4f1c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    4f04:	6541      	str	r1, [r0, #84]	; 0x54
    4f06:	4807      	ldr	r0, [pc, #28]	; (4f24 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    4f08:	4905      	ldr	r1, [pc, #20]	; (4f20 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    4f0a:	6501      	str	r1, [r0, #80]	; 0x50
    4f0c:	4906      	ldr	r1, [pc, #24]	; (4f28 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    4f0e:	6541      	str	r1, [r0, #84]	; 0x54
    4f10:	4770      	bx	lr
    4f12:	0000      	.short	0x0000
    4f14:	000061f5 	.word	0x000061f5
    4f18:	2000012c 	.word	0x2000012c
    4f1c:	000062dd 	.word	0x000062dd
    4f20:	0000e405 	.word	0x0000e405
    4f24:	200001d8 	.word	0x200001d8
    4f28:	0000672d 	.word	0x0000672d

00004f2c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    4f2c:	481e      	ldr	r0, [pc, #120]	; (4fa8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    4f2e:	491d      	ldr	r1, [pc, #116]	; (4fa4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    4f30:	6081      	str	r1, [r0, #8]
    4f32:	491e      	ldr	r1, [pc, #120]	; (4fac <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    4f34:	6041      	str	r1, [r0, #4]
    4f36:	491e      	ldr	r1, [pc, #120]	; (4fb0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    4f38:	6001      	str	r1, [r0, #0]
    4f3a:	491e      	ldr	r1, [pc, #120]	; (4fb4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    4f3c:	6281      	str	r1, [r0, #40]	; 0x28
    4f3e:	491e      	ldr	r1, [pc, #120]	; (4fb8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    4f40:	62c1      	str	r1, [r0, #44]	; 0x2c
    4f42:	491e      	ldr	r1, [pc, #120]	; (4fbc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    4f44:	60c1      	str	r1, [r0, #12]
    4f46:	491e      	ldr	r1, [pc, #120]	; (4fc0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    4f48:	6181      	str	r1, [r0, #24]
    4f4a:	491e      	ldr	r1, [pc, #120]	; (4fc4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    4f4c:	6301      	str	r1, [r0, #48]	; 0x30
    4f4e:	491e      	ldr	r1, [pc, #120]	; (4fc8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    4f50:	6201      	str	r1, [r0, #32]
    4f52:	491e      	ldr	r1, [pc, #120]	; (4fcc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    4f54:	64c1      	str	r1, [r0, #76]	; 0x4c
    4f56:	491e      	ldr	r1, [pc, #120]	; (4fd0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    4f58:	6481      	str	r1, [r0, #72]	; 0x48
    4f5a:	491e      	ldr	r1, [pc, #120]	; (4fd4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    4f5c:	6441      	str	r1, [r0, #68]	; 0x44
    4f5e:	491e      	ldr	r1, [pc, #120]	; (4fd8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    4f60:	6341      	str	r1, [r0, #52]	; 0x34
    4f62:	491e      	ldr	r1, [pc, #120]	; (4fdc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    4f64:	61c1      	str	r1, [r0, #28]
    4f66:	491e      	ldr	r1, [pc, #120]	; (4fe0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    4f68:	6241      	str	r1, [r0, #36]	; 0x24
    4f6a:	481f      	ldr	r0, [pc, #124]	; (4fe8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    4f6c:	491d      	ldr	r1, [pc, #116]	; (4fe4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    4f6e:	6081      	str	r1, [r0, #8]
    4f70:	491e      	ldr	r1, [pc, #120]	; (4fec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    4f72:	61c1      	str	r1, [r0, #28]
    4f74:	491e      	ldr	r1, [pc, #120]	; (4ff0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    4f76:	6241      	str	r1, [r0, #36]	; 0x24
    4f78:	491e      	ldr	r1, [pc, #120]	; (4ff4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    4f7a:	62c1      	str	r1, [r0, #44]	; 0x2c
    4f7c:	491e      	ldr	r1, [pc, #120]	; (4ff8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    4f7e:	6101      	str	r1, [r0, #16]
    4f80:	491e      	ldr	r1, [pc, #120]	; (4ffc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    4f82:	6141      	str	r1, [r0, #20]
    4f84:	491e      	ldr	r1, [pc, #120]	; (5000 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    4f86:	6441      	str	r1, [r0, #68]	; 0x44
    4f88:	491e      	ldr	r1, [pc, #120]	; (5004 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    4f8a:	6341      	str	r1, [r0, #52]	; 0x34
    4f8c:	491e      	ldr	r1, [pc, #120]	; (5008 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    4f8e:	6181      	str	r1, [r0, #24]
    4f90:	491e      	ldr	r1, [pc, #120]	; (500c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    4f92:	6301      	str	r1, [r0, #48]	; 0x30
    4f94:	491e      	ldr	r1, [pc, #120]	; (5010 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    4f96:	6481      	str	r1, [r0, #72]	; 0x48
    4f98:	491e      	ldr	r1, [pc, #120]	; (5014 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
    4f9a:	64c1      	str	r1, [r0, #76]	; 0x4c
    4f9c:	491e      	ldr	r1, [pc, #120]	; (5018 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
    4f9e:	6381      	str	r1, [r0, #56]	; 0x38
    4fa0:	4770      	bx	lr
    4fa2:	0000      	.short	0x0000
    4fa4:	00006641 	.word	0x00006641
    4fa8:	2000012c 	.word	0x2000012c
    4fac:	00005fdd 	.word	0x00005fdd
    4fb0:	00006049 	.word	0x00006049
    4fb4:	000062e9 	.word	0x000062e9
    4fb8:	0000f2bf 	.word	0x0000f2bf
    4fbc:	00006109 	.word	0x00006109
    4fc0:	00006619 	.word	0x00006619
    4fc4:	000066d9 	.word	0x000066d9
    4fc8:	000061a9 	.word	0x000061a9
    4fcc:	0000e5fd 	.word	0x0000e5fd
    4fd0:	0000e5b5 	.word	0x0000e5b5
    4fd4:	00006591 	.word	0x00006591
    4fd8:	000065c5 	.word	0x000065c5
    4fdc:	0000664d 	.word	0x0000664d
    4fe0:	000061b5 	.word	0x000061b5
    4fe4:	0000e3c5 	.word	0x0000e3c5
    4fe8:	200001d8 	.word	0x200001d8
    4fec:	00006819 	.word	0x00006819
    4ff0:	0000f38d 	.word	0x0000f38d
    4ff4:	0000f391 	.word	0x0000f391
    4ff8:	0000f367 	.word	0x0000f367
    4ffc:	0000f3f9 	.word	0x0000f3f9
    5000:	0000676d 	.word	0x0000676d
    5004:	0000f3d7 	.word	0x0000f3d7
    5008:	000067a5 	.word	0x000067a5
    500c:	0000f417 	.word	0x0000f417
    5010:	0000e5d9 	.word	0x0000e5d9
    5014:	0000e623 	.word	0x0000e623
    5018:	0000f3f5 	.word	0x0000f3f5

0000501c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    501c:	4806      	ldr	r0, [pc, #24]	; (5038 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    501e:	4905      	ldr	r1, [pc, #20]	; (5034 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    5020:	6581      	str	r1, [r0, #88]	; 0x58
    5022:	4906      	ldr	r1, [pc, #24]	; (503c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    5024:	6601      	str	r1, [r0, #96]	; 0x60
    5026:	4807      	ldr	r0, [pc, #28]	; (5044 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    5028:	4905      	ldr	r1, [pc, #20]	; (5040 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    502a:	6581      	str	r1, [r0, #88]	; 0x58
    502c:	4906      	ldr	r1, [pc, #24]	; (5048 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    502e:	65c1      	str	r1, [r0, #92]	; 0x5c
    5030:	4770      	bx	lr
    5032:	0000      	.short	0x0000
    5034:	00006339 	.word	0x00006339
    5038:	2000012c 	.word	0x2000012c
    503c:	0000641d 	.word	0x0000641d
    5040:	00010401 	.word	0x00010401
    5044:	200001d8 	.word	0x200001d8
    5048:	0000f3b7 	.word	0x0000f3b7

0000504c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    504c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    504e:	4c7c      	ldr	r4, [pc, #496]	; (5240 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>)
    5050:	2101      	movs	r1, #1
    5052:	f1a4 0610 	sub.w	r6, r4, #16
    5056:	7021      	strb	r1, [r4, #0]
    5058:	2500      	movs	r5, #0
    505a:	6060      	str	r0, [r4, #4]
    505c:	8075      	strh	r5, [r6, #2]
    505e:	7075      	strb	r5, [r6, #1]
    5060:	7035      	strb	r5, [r6, #0]
    5062:	f880 122b 	strb.w	r1, [r0, #555]	; 0x22b
    5066:	8800      	ldrh	r0, [r0, #0]
    5068:	f7fc f97a 	bl	1360 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    506c:	b180      	cbz	r0, 5090 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44>
    506e:	6860      	ldr	r0, [r4, #4]
    5070:	8800      	ldrh	r0, [r0, #0]
    5072:	f7fc fbdd 	bl	1830 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    5076:	6860      	ldr	r0, [r4, #4]
    5078:	8800      	ldrh	r0, [r0, #0]
    507a:	f7fc fb81 	bl	1780 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    507e:	6860      	ldr	r0, [r4, #4]
    5080:	f8b0 1222 	ldrh.w	r1, [r0, #546]	; 0x222
    5084:	b1c9      	cbz	r1, 50ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    5086:	3080      	adds	r0, #128	; 0x80
    5088:	f00a f8ec 	bl	f264 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    508c:	b118      	cbz	r0, 5096 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a>
    508e:	e014      	b.n	50ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    5090:	f640 419f 	movw	r1, #3231	; 0xc9f
    5094:	e06c      	b.n	5170 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124>
    5096:	6860      	ldr	r0, [r4, #4]
    5098:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    509c:	f88d 1000 	strb.w	r1, [sp]
    50a0:	9900      	ldr	r1, [sp, #0]
    50a2:	9100      	str	r1, [sp, #0]
    50a4:	f89d 1000 	ldrb.w	r1, [sp]
    50a8:	b139      	cbz	r1, 50ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    50aa:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    50ae:	2301      	movs	r3, #1
    50b0:	4619      	mov	r1, r3
    50b2:	3080      	adds	r0, #128	; 0x80
    50b4:	f008 fc48 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    50b8:	b180      	cbz	r0, 50dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    50ba:	6860      	ldr	r0, [r4, #4]
    50bc:	3080      	adds	r0, #128	; 0x80
    50be:	f00a f8d1 	bl	f264 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    50c2:	b128      	cbz	r0, 50d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    50c4:	6860      	ldr	r0, [r4, #4]
    50c6:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    50ca:	bf00      	nop
    50cc:	f000 fb84 	bl	57d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78c>
    50d0:	6860      	ldr	r0, [r4, #4]
    50d2:	f890 122d 	ldrb.w	r1, [r0, #557]	; 0x22d
    50d6:	b189      	cbz	r1, 50fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    50d8:	80b5      	strh	r5, [r6, #4]
    50da:	e01e      	b.n	511a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    50dc:	6860      	ldr	r0, [r4, #4]
    50de:	f8a0 50d0 	strh.w	r5, [r0, #208]	; 0xd0
    50e2:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
    50e6:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    50ea:	2100      	movs	r1, #0
    50ec:	2002      	movs	r0, #2
    50ee:	f000 fe39 	bl	5d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    50f2:	6860      	ldr	r0, [r4, #4]
    50f4:	f880 522a 	strb.w	r5, [r0, #554]	; 0x22a
    50f8:	2002      	movs	r0, #2
    50fa:	e7e7      	b.n	50cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    50fc:	f890 11c6 	ldrb.w	r1, [r0, #454]	; 0x1c6
    5100:	f88d 1000 	strb.w	r1, [sp]
    5104:	9900      	ldr	r1, [sp, #0]
    5106:	9100      	str	r1, [sp, #0]
    5108:	f89d 1000 	ldrb.w	r1, [sp]
    510c:	b919      	cbnz	r1, 5116 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    510e:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
    5110:	8b02      	ldrh	r2, [r0, #24]
    5112:	4291      	cmp	r1, r2
    5114:	d800      	bhi.n	5118 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc>
    5116:	8b01      	ldrh	r1, [r0, #24]
    5118:	80b1      	strh	r1, [r6, #4]
    511a:	f8b0 1226 	ldrh.w	r1, [r0, #550]	; 0x226
    511e:	1e49      	subs	r1, r1, #1
    5120:	b28f      	uxth	r7, r1
    5122:	f8b0 1228 	ldrh.w	r1, [r0, #552]	; 0x228
    5126:	4439      	add	r1, r7
    5128:	f8a0 1228 	strh.w	r1, [r0, #552]	; 0x228
    512c:	f830 1fcc 	ldrh.w	r1, [r0, #204]!
    5130:	4439      	add	r1, r7
    5132:	8001      	strh	r1, [r0, #0]
    5134:	f001 fba0 	bl	6878 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    5138:	b120      	cbz	r0, 5144 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8>
    513a:	6860      	ldr	r0, [r4, #4]
    513c:	f850 1fc0 	ldr.w	r1, [r0, #192]!
    5140:	4439      	add	r1, r7
    5142:	6001      	str	r1, [r0, #0]
    5144:	6861      	ldr	r1, [r4, #4]
    5146:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
    514a:	2801      	cmp	r0, #1
    514c:	d802      	bhi.n	5154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    514e:	1c40      	adds	r0, r0, #1
    5150:	f8a1 0222 	strh.w	r0, [r1, #546]	; 0x222
    5154:	b10f      	cbz	r7, 515a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e>
    5156:	f881 5234 	strb.w	r5, [r1, #564]	; 0x234
    515a:	f881 522a 	strb.w	r5, [r1, #554]	; 0x22a
    515e:	f8b1 2226 	ldrh.w	r2, [r1, #550]	; 0x226
    5162:	f101 0080 	add.w	r0, r1, #128	; 0x80
    5166:	f008 fd9b 	bl	dca0 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    516a:	b120      	cbz	r0, 5176 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a>
    516c:	f640 41e6 	movw	r1, #3302	; 0xce6
    5170:	2031      	movs	r0, #49	; 0x31
    5172:	f7fb fc1d 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5176:	6860      	ldr	r0, [r4, #4]
    5178:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    517c:	290a      	cmp	r1, #10
    517e:	d001      	beq.n	5184 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138>
    5180:	290b      	cmp	r1, #11
    5182:	d119      	bne.n	51b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    5184:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
    5188:	f8b0 32cc 	ldrh.w	r3, [r0, #716]	; 0x2cc
    518c:	1ad2      	subs	r2, r2, r3
    518e:	b212      	sxth	r2, r2
    5190:	2a00      	cmp	r2, #0
    5192:	db11      	blt.n	51b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    5194:	f8d0 12ce 	ldr.w	r1, [r0, #718]	; 0x2ce
    5198:	f8c0 10a6 	str.w	r1, [r0, #166]	; 0xa6
    519c:	f890 12d2 	ldrb.w	r1, [r0, #722]	; 0x2d2
    51a0:	f880 10aa 	strb.w	r1, [r0, #170]	; 0xaa
    51a4:	2103      	movs	r1, #3
    51a6:	f7fd faaf 	bl	2708 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    51aa:	6860      	ldr	r0, [r4, #4]
    51ac:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    51b0:	21ff      	movs	r1, #255	; 0xff
    51b2:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
    51b6:	e026      	b.n	5206 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    51b8:	2925      	cmp	r1, #37	; 0x25
    51ba:	d111      	bne.n	51e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    51bc:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    51c0:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
    51c4:	1a89      	subs	r1, r1, r2
    51c6:	b209      	sxth	r1, r1
    51c8:	2900      	cmp	r1, #0
    51ca:	db09      	blt.n	51e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    51cc:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    51d0:	f000 fe82 	bl	5ed8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    51d4:	2800      	cmp	r0, #0
    51d6:	6860      	ldr	r0, [r4, #4]
    51d8:	f880 513c 	strb.w	r5, [r0, #316]	; 0x13c
    51dc:	d029      	beq.n	5232 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    51de:	e012      	b.n	5206 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    51e0:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    51e4:	2925      	cmp	r1, #37	; 0x25
    51e6:	d001      	beq.n	51ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    51e8:	2927      	cmp	r1, #39	; 0x27
    51ea:	d10c      	bne.n	5206 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    51ec:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    51f0:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
    51f4:	1a89      	subs	r1, r1, r2
    51f6:	b209      	sxth	r1, r1
    51f8:	2900      	cmp	r1, #0
    51fa:	db04      	blt.n	5206 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    51fc:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    5200:	f000 fe6a 	bl	5ed8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    5204:	b1a8      	cbz	r0, 5232 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    5206:	480f      	ldr	r0, [pc, #60]	; (5244 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    5208:	9000      	str	r0, [sp, #0]
    520a:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    520e:	4b0e      	ldr	r3, [pc, #56]	; (5248 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    5210:	4a0e      	ldr	r2, [pc, #56]	; (524c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    5212:	f7fc fb9b 	bl	194c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA>
    5216:	6860      	ldr	r0, [r4, #4]
    5218:	2301      	movs	r3, #1
    521a:	2105      	movs	r1, #5
    521c:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5220:	3080      	adds	r0, #128	; 0x80
    5222:	f008 fb91 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5226:	2800      	cmp	r0, #0
    5228:	d009      	beq.n	523e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    522a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    522e:	f7fc bb87 	b.w	1940 <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q>
    5232:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5236:	2100      	movs	r1, #0
    5238:	4608      	mov	r0, r1
    523a:	f000 bb9f 	b.w	597c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x930>
    523e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5240:	20000124 	.word	0x20000124
    5244:	0000597d 	.word	0x0000597d
    5248:	000054cd 	.word	0x000054cd
    524c:	00005e25 	.word	0x00005e25
    5250:	491d      	ldr	r1, [pc, #116]	; (52c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27c>)
    5252:	b508      	push	{r3, lr}
    5254:	6849      	ldr	r1, [r1, #4]
    5256:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    525a:	b1c0      	cbz	r0, 528e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x242>
    525c:	2a11      	cmp	r2, #17
    525e:	d006      	beq.n	526e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x222>
    5260:	2a15      	cmp	r2, #21
    5262:	d007      	beq.n	5274 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    5264:	2a16      	cmp	r2, #22
    5266:	d009      	beq.n	527c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x230>
    5268:	2a1c      	cmp	r2, #28
    526a:	d128      	bne.n	52be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    526c:	e009      	b.n	5282 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x236>
    526e:	2101      	movs	r1, #1
    5270:	200b      	movs	r0, #11
    5272:	e008      	b.n	5286 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    5274:	4814      	ldr	r0, [pc, #80]	; (52c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27c>)
    5276:	f00a f82e 	bl	f2d6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x90>
    527a:	e006      	b.n	528a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23e>
    527c:	f000 fd90 	bl	5da0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd54>
    5280:	e003      	b.n	528a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23e>
    5282:	2101      	movs	r1, #1
    5284:	2006      	movs	r0, #6
    5286:	f000 fd6d 	bl	5d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    528a:	2001      	movs	r0, #1
    528c:	bd08      	pop	{r3, pc}
    528e:	2a22      	cmp	r2, #34	; 0x22
    5290:	d004      	beq.n	529c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    5292:	2a2f      	cmp	r2, #47	; 0x2f
    5294:	d113      	bne.n	52be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    5296:	2101      	movs	r1, #1
    5298:	2011      	movs	r0, #17
    529a:	e7f4      	b.n	5286 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    529c:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    52a0:	2802      	cmp	r0, #2
    52a2:	d00e      	beq.n	52c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    52a4:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    52a8:	2801      	cmp	r0, #1
    52aa:	d108      	bne.n	52be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    52ac:	f891 013d 	ldrb.w	r0, [r1, #317]	; 0x13d
    52b0:	f88d 0000 	strb.w	r0, [sp]
    52b4:	9800      	ldr	r0, [sp, #0]
    52b6:	9000      	str	r0, [sp, #0]
    52b8:	f89d 0000 	ldrb.w	r0, [sp]
    52bc:	b108      	cbz	r0, 52c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    52be:	2000      	movs	r0, #0
    52c0:	bd08      	pop	{r3, pc}
    52c2:	2101      	movs	r1, #1
    52c4:	2017      	movs	r0, #23
    52c6:	e7de      	b.n	5286 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    52c8:	20000124 	.word	0x20000124
    52cc:	b538      	push	{r3, r4, r5, lr}
    52ce:	2800      	cmp	r0, #0
    52d0:	d173      	bne.n	53ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    52d2:	4c3b      	ldr	r4, [pc, #236]	; (53c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x374>)
    52d4:	6860      	ldr	r0, [r4, #4]
    52d6:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
    52da:	07ca      	lsls	r2, r1, #31
    52dc:	d002      	beq.n	52e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x298>
    52de:	2101      	movs	r1, #1
    52e0:	2009      	movs	r0, #9
    52e2:	e066      	b.n	53b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    52e4:	078a      	lsls	r2, r1, #30
    52e6:	d50a      	bpl.n	52fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    52e8:	2101      	movs	r1, #1
    52ea:	200c      	movs	r0, #12
    52ec:	f000 fd3a 	bl	5d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    52f0:	6860      	ldr	r0, [r4, #4]
    52f2:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
    52f6:	f041 0101 	orr.w	r1, r1, #1
    52fa:	7001      	strb	r1, [r0, #0]
    52fc:	e05b      	b.n	53b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36a>
    52fe:	074a      	lsls	r2, r1, #29
    5300:	d502      	bpl.n	5308 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    5302:	2101      	movs	r1, #1
    5304:	2013      	movs	r0, #19
    5306:	e054      	b.n	53b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    5308:	070a      	lsls	r2, r1, #28
    530a:	d506      	bpl.n	531a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ce>
    530c:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    5310:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5314:	2101      	movs	r1, #1
    5316:	2007      	movs	r0, #7
    5318:	e04b      	b.n	53b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    531a:	f011 0f30 	tst.w	r1, #48	; 0x30
    531e:	d044      	beq.n	53aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35e>
    5320:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    5324:	f88d 1000 	strb.w	r1, [sp]
    5328:	9900      	ldr	r1, [sp, #0]
    532a:	9100      	str	r1, [sp, #0]
    532c:	f89d 1000 	ldrb.w	r1, [sp]
    5330:	bbc1      	cbnz	r1, 53a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x358>
    5332:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    5336:	2500      	movs	r5, #0
    5338:	f88d 1000 	strb.w	r1, [sp]
    533c:	9900      	ldr	r1, [sp, #0]
    533e:	9100      	str	r1, [sp, #0]
    5340:	f89d 1000 	ldrb.w	r1, [sp]
    5344:	b1c1      	cbz	r1, 5378 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x32c>
    5346:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    534a:	2925      	cmp	r1, #37	; 0x25
    534c:	d02b      	beq.n	53a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35a>
    534e:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5352:	2925      	cmp	r1, #37	; 0x25
    5354:	d027      	beq.n	53a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35a>
    5356:	2300      	movs	r3, #0
    5358:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
    535c:	f500 7199 	add.w	r1, r0, #306	; 0x132
    5360:	f008 fec4 	bl	e0ec <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    5364:	6860      	ldr	r0, [r4, #4]
    5366:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    536a:	f021 0120 	bic.w	r1, r1, #32
    536e:	f041 0110 	orr.w	r1, r1, #16
    5372:	6001      	str	r1, [r0, #0]
    5374:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    5378:	6860      	ldr	r0, [r4, #4]
    537a:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    537e:	06c9      	lsls	r1, r1, #27
    5380:	d51b      	bpl.n	53ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    5382:	f008 fece 	bl	e122 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    5386:	480e      	ldr	r0, [pc, #56]	; (53c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x374>)
    5388:	f009 f88c 	bl	e4a4 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    538c:	6861      	ldr	r1, [r4, #4]
    538e:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    5392:	8bc2      	ldrh	r2, [r0, #30]
    5394:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
    5398:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    539a:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
    539e:	2101      	movs	r1, #1
    53a0:	2015      	movs	r0, #21
    53a2:	e006      	b.n	53b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    53a4:	e009      	b.n	53ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    53a6:	2301      	movs	r3, #1
    53a8:	e7d6      	b.n	5358 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30c>
    53aa:	0648      	lsls	r0, r1, #25
    53ac:	d505      	bpl.n	53ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    53ae:	2101      	movs	r1, #1
    53b0:	2024      	movs	r0, #36	; 0x24
    53b2:	f000 fcd7 	bl	5d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    53b6:	2001      	movs	r0, #1
    53b8:	bd38      	pop	{r3, r4, r5, pc}
    53ba:	2000      	movs	r0, #0
    53bc:	bd38      	pop	{r3, r4, r5, pc}
    53be:	0000      	.short	0x0000
    53c0:	20000124 	.word	0x20000124
    53c4:	b570      	push	{r4, r5, r6, lr}
    53c6:	460d      	mov	r5, r1
    53c8:	4606      	mov	r6, r0
    53ca:	f008 fdc4 	bl	df56 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    53ce:	4604      	mov	r4, r0
    53d0:	4630      	mov	r0, r6
    53d2:	f008 fdc2 	bl	df5a <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    53d6:	4629      	mov	r1, r5
    53d8:	f000 f81e 	bl	5418 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3cc>
    53dc:	b1b8      	cbz	r0, 540e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c2>
    53de:	4620      	mov	r0, r4
    53e0:	f008 fb5c 	bl	da9c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    53e4:	0001      	movs	r1, r0
    53e6:	d00d      	beq.n	5404 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b8>
    53e8:	480a      	ldr	r0, [pc, #40]	; (5414 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>)
    53ea:	6840      	ldr	r0, [r0, #4]
    53ec:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    53f0:	428a      	cmp	r2, r1
    53f2:	d007      	beq.n	5404 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b8>
    53f4:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    53f8:	2901      	cmp	r1, #1
    53fa:	d005      	beq.n	5408 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3bc>
    53fc:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    5400:	4220      	tst	r0, r4
    5402:	d004      	beq.n	540e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c2>
    5404:	2001      	movs	r0, #1
    5406:	bd70      	pop	{r4, r5, r6, pc}
    5408:	f890 013f 	ldrb.w	r0, [r0, #319]	; 0x13f
    540c:	e7f8      	b.n	5400 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b4>
    540e:	2000      	movs	r0, #0
    5410:	bd70      	pop	{r4, r5, r6, pc}
    5412:	0000      	.short	0x0000
    5414:	20000124 	.word	0x20000124
    5418:	b570      	push	{r4, r5, r6, lr}
    541a:	460d      	mov	r5, r1
    541c:	4604      	mov	r4, r0
    541e:	f008 fb3d 	bl	da9c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    5422:	b350      	cbz	r0, 547a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    5424:	4916      	ldr	r1, [pc, #88]	; (5480 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x434>)
    5426:	6849      	ldr	r1, [r1, #4]
    5428:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    542c:	4282      	cmp	r2, r0
    542e:	d024      	beq.n	547a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    5430:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
    5434:	2b01      	cmp	r3, #1
    5436:	d005      	beq.n	5444 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f8>
    5438:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
    543c:	4223      	tst	r3, r4
    543e:	d013      	beq.n	5468 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41c>
    5440:	b11d      	cbz	r5, 544a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fe>
    5442:	e01a      	b.n	547a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    5444:	f891 313e 	ldrb.w	r3, [r1, #318]	; 0x13e
    5448:	e7f8      	b.n	543c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f0>
    544a:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    544e:	4221      	tst	r1, r4
    5450:	d113      	bne.n	547a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    5452:	b15a      	cbz	r2, 546c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
    5454:	2a04      	cmp	r2, #4
    5456:	d00e      	beq.n	5476 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    5458:	2804      	cmp	r0, #4
    545a:	d00c      	beq.n	5476 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    545c:	2a08      	cmp	r2, #8
    545e:	d00a      	beq.n	5476 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    5460:	2808      	cmp	r0, #8
    5462:	d008      	beq.n	5476 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    5464:	4282      	cmp	r2, r0
    5466:	d908      	bls.n	547a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    5468:	2000      	movs	r0, #0
    546a:	bd70      	pop	{r4, r5, r6, pc}
    546c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    5470:	2006      	movs	r0, #6
    5472:	f7fb fa9d 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5476:	4282      	cmp	r2, r0
    5478:	d3f6      	bcc.n	5468 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41c>
    547a:	2001      	movs	r0, #1
    547c:	bd70      	pop	{r4, r5, r6, pc}
    547e:	0000      	.short	0x0000
    5480:	20000124 	.word	0x20000124
    5484:	b510      	push	{r4, lr}
    5486:	4c10      	ldr	r4, [pc, #64]	; (54c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x47c>)
    5488:	2301      	movs	r3, #1
    548a:	2100      	movs	r1, #0
    548c:	6860      	ldr	r0, [r4, #4]
    548e:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5492:	3080      	adds	r0, #128	; 0x80
    5494:	f008 fa58 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5498:	b140      	cbz	r0, 54ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x460>
    549a:	6860      	ldr	r0, [r4, #4]
    549c:	2301      	movs	r3, #1
    549e:	2104      	movs	r1, #4
    54a0:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    54a4:	3080      	adds	r0, #128	; 0x80
    54a6:	f008 fa4f 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    54aa:	b108      	cbz	r0, 54b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x464>
    54ac:	2000      	movs	r0, #0
    54ae:	bd10      	pop	{r4, pc}
    54b0:	6860      	ldr	r0, [r4, #4]
    54b2:	f890 00ca 	ldrb.w	r0, [r0, #202]	; 0xca
    54b6:	2800      	cmp	r0, #0
    54b8:	d0f9      	beq.n	54ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
    54ba:	2100      	movs	r1, #0
    54bc:	2012      	movs	r0, #18
    54be:	f000 fc51 	bl	5d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    54c2:	2001      	movs	r0, #1
    54c4:	bd10      	pop	{r4, pc}
    54c6:	0000      	.short	0x0000
    54c8:	20000124 	.word	0x20000124
    54cc:	490d      	ldr	r1, [pc, #52]	; (5504 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b8>)
    54ce:	4602      	mov	r2, r0
    54d0:	7848      	ldrb	r0, [r1, #1]
    54d2:	b9a0      	cbnz	r0, 54fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
    54d4:	f101 0010 	add.w	r0, r1, #16
    54d8:	6840      	ldr	r0, [r0, #4]
    54da:	b142      	cbz	r2, 54ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a2>
    54dc:	7889      	ldrb	r1, [r1, #2]
    54de:	0709      	lsls	r1, r1, #28
    54e0:	d503      	bpl.n	54ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
    54e2:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    54e6:	2807      	cmp	r0, #7
    54e8:	d009      	beq.n	54fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
    54ea:	2001      	movs	r0, #1
    54ec:	4770      	bx	lr
    54ee:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    54f2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    54f4:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    54f6:	428a      	cmp	r2, r1
    54f8:	d801      	bhi.n	54fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
    54fa:	f7ff b83f 	b.w	457c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    54fe:	2000      	movs	r0, #0
    5500:	4770      	bx	lr
    5502:	0000      	.short	0x0000
    5504:	20000114 	.word	0x20000114
    5508:	b538      	push	{r3, r4, r5, lr}
    550a:	4c32      	ldr	r4, [pc, #200]	; (55d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x588>)
    550c:	4605      	mov	r5, r0
    550e:	6860      	ldr	r0, [r4, #4]
    5510:	3080      	adds	r0, #128	; 0x80
    5512:	f009 fea7 	bl	f264 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5516:	2800      	cmp	r0, #0
    5518:	d15b      	bne.n	55d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    551a:	2d00      	cmp	r5, #0
    551c:	d159      	bne.n	55d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    551e:	6860      	ldr	r0, [r4, #4]
    5520:	2301      	movs	r3, #1
    5522:	4619      	mov	r1, r3
    5524:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    5528:	3080      	adds	r0, #128	; 0x80
    552a:	f008 fa0d 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    552e:	2800      	cmp	r0, #0
    5530:	d14f      	bne.n	55d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5532:	6860      	ldr	r0, [r4, #4]
    5534:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    5538:	f88d 1000 	strb.w	r1, [sp]
    553c:	9900      	ldr	r1, [sp, #0]
    553e:	9100      	str	r1, [sp, #0]
    5540:	f89d 2000 	ldrb.w	r2, [sp]
    5544:	2100      	movs	r1, #0
    5546:	b142      	cbz	r2, 555a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x50e>
    5548:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
    554c:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
    5550:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5554:	2100      	movs	r1, #0
    5556:	2002      	movs	r0, #2
    5558:	e030      	b.n	55bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x570>
    555a:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    555e:	2301      	movs	r3, #1
    5560:	2104      	movs	r1, #4
    5562:	3080      	adds	r0, #128	; 0x80
    5564:	f008 f9f0 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5568:	4605      	mov	r5, r0
    556a:	f7ff feaf 	bl	52cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x280>
    556e:	2800      	cmp	r0, #0
    5570:	d12f      	bne.n	55d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5572:	4628      	mov	r0, r5
    5574:	f7ff fe6c 	bl	5250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    5578:	2800      	cmp	r0, #0
    557a:	d12a      	bne.n	55d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    557c:	f7ff ff82 	bl	5484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x438>
    5580:	2800      	cmp	r0, #0
    5582:	d126      	bne.n	55d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5584:	6860      	ldr	r0, [r4, #4]
    5586:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    558a:	2909      	cmp	r1, #9
    558c:	d01a      	beq.n	55c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x578>
    558e:	2d00      	cmp	r5, #0
    5590:	d11f      	bne.n	55d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5592:	f000 fb13 	bl	5bbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb70>
    5596:	2800      	cmp	r0, #0
    5598:	d11b      	bne.n	55d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    559a:	6860      	ldr	r0, [r4, #4]
    559c:	2301      	movs	r3, #1
    559e:	2100      	movs	r1, #0
    55a0:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    55a4:	3080      	adds	r0, #128	; 0x80
    55a6:	f008 f9cf 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    55aa:	2800      	cmp	r0, #0
    55ac:	d011      	beq.n	55d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    55ae:	6860      	ldr	r0, [r4, #4]
    55b0:	f890 02c4 	ldrb.w	r0, [r0, #708]	; 0x2c4
    55b4:	2800      	cmp	r0, #0
    55b6:	d00c      	beq.n	55d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    55b8:	2100      	movs	r1, #0
    55ba:	20ff      	movs	r0, #255	; 0xff
    55bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    55c0:	f000 bbd0 	b.w	5d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    55c4:	f890 1121 	ldrb.w	r1, [r0, #289]	; 0x121
    55c8:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    55cc:	2100      	movs	r1, #0
    55ce:	2007      	movs	r0, #7
    55d0:	e7f4      	b.n	55bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x570>
    55d2:	bd38      	pop	{r3, r4, r5, pc}
    55d4:	20000124 	.word	0x20000124
    55d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55da:	4d2b      	ldr	r5, [pc, #172]	; (5688 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
    55dc:	0006      	movs	r6, r0
    55de:	f105 0410 	add.w	r4, r5, #16
    55e2:	d133      	bne.n	564c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    55e4:	f000 f8aa 	bl	573c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f0>
    55e8:	f000 f852 	bl	5690 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    55ec:	0006      	movs	r6, r0
    55ee:	d12d      	bne.n	564c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    55f0:	8869      	ldrh	r1, [r5, #2]
    55f2:	0748      	lsls	r0, r1, #29
    55f4:	d506      	bpl.n	5604 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b8>
    55f6:	6860      	ldr	r0, [r4, #4]
    55f8:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    55fc:	2806      	cmp	r0, #6
    55fe:	d101      	bne.n	5604 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b8>
    5600:	2001      	movs	r0, #1
    5602:	7028      	strb	r0, [r5, #0]
    5604:	0788      	lsls	r0, r1, #30
    5606:	d516      	bpl.n	5636 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ea>
    5608:	68a8      	ldr	r0, [r5, #8]
    560a:	78c0      	ldrb	r0, [r0, #3]
    560c:	282b      	cmp	r0, #43	; 0x2b
    560e:	d207      	bcs.n	5620 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    5610:	491e      	ldr	r1, [pc, #120]	; (568c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x640>)
    5612:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    5616:	b119      	cbz	r1, 5620 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    5618:	481b      	ldr	r0, [pc, #108]	; (5688 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
    561a:	3010      	adds	r0, #16
    561c:	4788      	blx	r1
    561e:	e00a      	b.n	5636 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ea>
    5620:	28ff      	cmp	r0, #255	; 0xff
    5622:	d004      	beq.n	562e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e2>
    5624:	f640 0148 	movw	r1, #2120	; 0x848
    5628:	2031      	movs	r0, #49	; 0x31
    562a:	f7fb f9c1 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    562e:	4816      	ldr	r0, [pc, #88]	; (5688 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
    5630:	3010      	adds	r0, #16
    5632:	f009 fe8f 	bl	f354 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10e>
    5636:	78a8      	ldrb	r0, [r5, #2]
    5638:	06c0      	lsls	r0, r0, #27
    563a:	d507      	bpl.n	564c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    563c:	6860      	ldr	r0, [r4, #4]
    563e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5642:	290a      	cmp	r1, #10
    5644:	d102      	bne.n	564c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    5646:	210b      	movs	r1, #11
    5648:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    564c:	7868      	ldrb	r0, [r5, #1]
    564e:	0700      	lsls	r0, r0, #28
    5650:	d518      	bpl.n	5684 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
    5652:	6860      	ldr	r0, [r4, #4]
    5654:	2301      	movs	r3, #1
    5656:	2105      	movs	r1, #5
    5658:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    565c:	3080      	adds	r0, #128	; 0x80
    565e:	f008 f973 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5662:	b108      	cbz	r0, 5668 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x61c>
    5664:	2608      	movs	r6, #8
    5666:	e00d      	b.n	5684 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
    5668:	2500      	movs	r5, #0
    566a:	4669      	mov	r1, sp
    566c:	2003      	movs	r0, #3
    566e:	9500      	str	r5, [sp, #0]
    5670:	f7fc fa2e 	bl	1ad0 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>
    5674:	9800      	ldr	r0, [sp, #0]
    5676:	b128      	cbz	r0, 5684 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
    5678:	7205      	strb	r5, [r0, #8]
    567a:	2210      	movs	r2, #16
    567c:	6861      	ldr	r1, [r4, #4]
    567e:	9800      	ldr	r0, [sp, #0]
    5680:	f008 fd0a 	bl	e098 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5684:	4630      	mov	r0, r6
    5686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5688:	20000114 	.word	0x20000114
    568c:	200001d8 	.word	0x200001d8
    5690:	b570      	push	{r4, r5, r6, lr}
    5692:	4d28      	ldr	r5, [pc, #160]	; (5734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
    5694:	2000      	movs	r0, #0
    5696:	78a9      	ldrb	r1, [r5, #2]
    5698:	07c9      	lsls	r1, r1, #31
    569a:	d017      	beq.n	56cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x680>
    569c:	68e8      	ldr	r0, [r5, #12]
    569e:	f105 0410 	add.w	r4, r5, #16
    56a2:	2301      	movs	r3, #1
    56a4:	78c6      	ldrb	r6, [r0, #3]
    56a6:	6860      	ldr	r0, [r4, #4]
    56a8:	2105      	movs	r1, #5
    56aa:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    56ae:	3080      	adds	r0, #128	; 0x80
    56b0:	f008 f94a 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    56b4:	b158      	cbz	r0, 56ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x682>
    56b6:	1eb6      	subs	r6, r6, #2
    56b8:	2e0a      	cmp	r6, #10
    56ba:	d206      	bcs.n	56ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x67e>
    56bc:	e8df f006 	tbb	[pc, r6]
    56c0:	05050707 	.word	0x05050707
    56c4:	05050707 	.word	0x05050707
    56c8:	0707      	.short	0x0707
    56ca:	2008      	movs	r0, #8
    56cc:	bd70      	pop	{r4, r5, r6, pc}
    56ce:	68e8      	ldr	r0, [r5, #12]
    56d0:	f7fd f944 	bl	295c <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
    56d4:	b338      	cbz	r0, 5726 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    56d6:	68e8      	ldr	r0, [r5, #12]
    56d8:	78c5      	ldrb	r5, [r0, #3]
    56da:	b11d      	cbz	r5, 56e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    56dc:	2d01      	cmp	r5, #1
    56de:	d001      	beq.n	56e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    56e0:	2d16      	cmp	r5, #22
    56e2:	d113      	bne.n	570c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
    56e4:	6860      	ldr	r0, [r4, #4]
    56e6:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    56ea:	f008 f985 	bl	d9f8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    56ee:	b168      	cbz	r0, 570c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
    56f0:	6861      	ldr	r1, [r4, #4]
    56f2:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
    56f6:	2820      	cmp	r0, #32
    56f8:	d008      	beq.n	570c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
    56fa:	2821      	cmp	r0, #33	; 0x21
    56fc:	d003      	beq.n	5706 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ba>
    56fe:	2d16      	cmp	r5, #22
    5700:	d00f      	beq.n	5722 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6d6>
    5702:	2002      	movs	r0, #2
    5704:	bd70      	pop	{r4, r5, r6, pc}
    5706:	202e      	movs	r0, #46	; 0x2e
    5708:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    570c:	2d2b      	cmp	r5, #43	; 0x2b
    570e:	d20a      	bcs.n	5726 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    5710:	4809      	ldr	r0, [pc, #36]	; (5738 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ec>)
    5712:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    5716:	b131      	cbz	r1, 5726 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    5718:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    571c:	4805      	ldr	r0, [pc, #20]	; (5734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
    571e:	3010      	adds	r0, #16
    5720:	4708      	bx	r1
    5722:	2020      	movs	r0, #32
    5724:	bd70      	pop	{r4, r5, r6, pc}
    5726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    572a:	4802      	ldr	r0, [pc, #8]	; (5734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
    572c:	3010      	adds	r0, #16
    572e:	f000 bd47 	b.w	61c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    5732:	0000      	.short	0x0000
    5734:	20000114 	.word	0x20000114
    5738:	2000012c 	.word	0x2000012c
    573c:	b570      	push	{r4, r5, r6, lr}
    573e:	4e25      	ldr	r6, [pc, #148]	; (57d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>)
    5740:	78b0      	ldrb	r0, [r6, #2]
    5742:	0700      	lsls	r0, r0, #28
    5744:	d545      	bpl.n	57d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x786>
    5746:	f106 0410 	add.w	r4, r6, #16
    574a:	6860      	ldr	r0, [r4, #4]
    574c:	3080      	adds	r0, #128	; 0x80
    574e:	f009 fd89 	bl	f264 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5752:	b148      	cbz	r0, 5768 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x71c>
    5754:	6860      	ldr	r0, [r4, #4]
    5756:	21fe      	movs	r1, #254	; 0xfe
    5758:	2500      	movs	r5, #0
    575a:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
    575e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5762:	291a      	cmp	r1, #26
    5764:	d10e      	bne.n	5784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x738>
    5766:	e004      	b.n	5772 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
    5768:	f640 0154 	movw	r1, #2132	; 0x854
    576c:	2031      	movs	r0, #49	; 0x31
    576e:	f7fb f91f 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5772:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
    5776:	4817      	ldr	r0, [pc, #92]	; (57d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>)
    5778:	3010      	adds	r0, #16
    577a:	f008 fdce 	bl	e31a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    577e:	6860      	ldr	r0, [r4, #4]
    5780:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    5784:	6860      	ldr	r0, [r4, #4]
    5786:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    578a:	2920      	cmp	r1, #32
    578c:	d002      	beq.n	5794 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x748>
    578e:	2931      	cmp	r1, #49	; 0x31
    5790:	d116      	bne.n	57c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x774>
    5792:	e00e      	b.n	57b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x766>
    5794:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5798:	2301      	movs	r3, #1
    579a:	210b      	movs	r1, #11
    579c:	3080      	adds	r0, #128	; 0x80
    579e:	f008 f8d3 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    57a2:	b108      	cbz	r0, 57a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75c>
    57a4:	202e      	movs	r0, #46	; 0x2e
    57a6:	e000      	b.n	57aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75e>
    57a8:	2021      	movs	r0, #33	; 0x21
    57aa:	6861      	ldr	r1, [r4, #4]
    57ac:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    57b0:	e006      	b.n	57c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x774>
    57b2:	2101      	movs	r1, #1
    57b4:	f880 12c5 	strb.w	r1, [r0, #709]	; 0x2c5
    57b8:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    57bc:	f880 50d6 	strb.w	r5, [r0, #214]	; 0xd6
    57c0:	6860      	ldr	r0, [r4, #4]
    57c2:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    57c6:	2907      	cmp	r1, #7
    57c8:	d103      	bne.n	57d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x786>
    57ca:	2102      	movs	r1, #2
    57cc:	7031      	strb	r1, [r6, #0]
    57ce:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
    57d2:	bd70      	pop	{r4, r5, r6, pc}
    57d4:	20000114 	.word	0x20000114
    57d8:	b538      	push	{r3, r4, r5, lr}
    57da:	4605      	mov	r5, r0
    57dc:	4668      	mov	r0, sp
    57de:	f7fc f811 	bl	1804 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    57e2:	b308      	cbz	r0, 5828 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7dc>
    57e4:	2222      	movs	r2, #34	; 0x22
    57e6:	2100      	movs	r1, #0
    57e8:	9800      	ldr	r0, [sp, #0]
    57ea:	f00b f8e2 	bl	109b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    57ee:	2103      	movs	r1, #3
    57f0:	9800      	ldr	r0, [sp, #0]
    57f2:	f008 fbca 	bl	df8a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    57f6:	9800      	ldr	r0, [sp, #0]
    57f8:	7801      	ldrb	r1, [r0, #0]
    57fa:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    57fe:	7001      	strb	r1, [r0, #0]
    5800:	4629      	mov	r1, r5
    5802:	f7fd f8bb 	bl	297c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
    5806:	4c5b      	ldr	r4, [pc, #364]	; (5974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
    5808:	2d11      	cmp	r5, #17
    580a:	d032      	beq.n	5872 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x826>
    580c:	dc0f      	bgt.n	582e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e2>
    580e:	f1a5 0502 	sub.w	r5, r5, #2
    5812:	2d0d      	cmp	r5, #13
    5814:	d21f      	bcs.n	5856 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80a>
    5816:	e8df f005 	tbb	[pc, r5]
    581a:	1e21      	.short	0x1e21
    581c:	26a3a355 	.word	0x26a3a355
    5820:	a31e621e 	.word	0xa31e621e
    5824:	0090393f 	.word	0x0090393f
    5828:	f640 21fe 	movw	r1, #2814	; 0xafe
    582c:	e09e      	b.n	596c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x920>
    582e:	2d17      	cmp	r5, #23
    5830:	d075      	beq.n	591e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d2>
    5832:	dc08      	bgt.n	5846 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7fa>
    5834:	f1a5 0512 	sub.w	r5, r5, #18
    5838:	2d05      	cmp	r5, #5
    583a:	d20c      	bcs.n	5856 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80a>
    583c:	e8df f005 	tbb	[pc, r5]
    5840:	54549090 	.word	0x54549090
    5844:	0038      	.short	0x0038
    5846:	2d23      	cmp	r5, #35	; 0x23
    5848:	d07b      	beq.n	5942 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    584a:	2d24      	cmp	r5, #36	; 0x24
    584c:	d079      	beq.n	5942 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    584e:	2d25      	cmp	r5, #37	; 0x25
    5850:	d077      	beq.n	5942 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    5852:	2dff      	cmp	r5, #255	; 0xff
    5854:	d07c      	beq.n	5950 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x904>
    5856:	f640 31aa 	movw	r1, #2986	; 0xbaa
    585a:	e087      	b.n	596c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x920>
    585c:	6861      	ldr	r1, [r4, #4]
    585e:	9800      	ldr	r0, [sp, #0]
    5860:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
    5864:	e016      	b.n	5894 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x848>
    5866:	6860      	ldr	r0, [r4, #4]
    5868:	9900      	ldr	r1, [sp, #0]
    586a:	f890 0128 	ldrb.w	r0, [r0, #296]	; 0x128
    586e:	7108      	strb	r0, [r1, #4]
    5870:	e076      	b.n	5960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5872:	6860      	ldr	r0, [r4, #4]
    5874:	f890 1123 	ldrb.w	r1, [r0, #291]	; 0x123
    5878:	9800      	ldr	r0, [sp, #0]
    587a:	f008 fb72 	bl	df62 <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    587e:	6860      	ldr	r0, [r4, #4]
    5880:	f890 1122 	ldrb.w	r1, [r0, #290]	; 0x122
    5884:	9800      	ldr	r0, [sp, #0]
    5886:	f008 fb70 	bl	df6a <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
    588a:	e069      	b.n	5960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    588c:	6861      	ldr	r1, [r4, #4]
    588e:	9800      	ldr	r0, [sp, #0]
    5890:	f891 1122 	ldrb.w	r1, [r1, #290]	; 0x122
    5894:	7101      	strb	r1, [r0, #4]
    5896:	e063      	b.n	5960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5898:	9800      	ldr	r0, [sp, #0]
    589a:	210d      	movs	r1, #13
    589c:	7101      	strb	r1, [r0, #4]
    589e:	2159      	movs	r1, #89	; 0x59
    58a0:	7141      	strb	r1, [r0, #5]
    58a2:	2100      	movs	r1, #0
    58a4:	7181      	strb	r1, [r0, #6]
    58a6:	2177      	movs	r1, #119	; 0x77
    58a8:	71c1      	strb	r1, [r0, #7]
    58aa:	2110      	movs	r1, #16
    58ac:	7201      	strb	r1, [r0, #8]
    58ae:	e057      	b.n	5960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    58b0:	9800      	ldr	r0, [sp, #0]
    58b2:	6861      	ldr	r1, [r4, #4]
    58b4:	f891 113e 	ldrb.w	r1, [r1, #318]	; 0x13e
    58b8:	7101      	strb	r1, [r0, #4]
    58ba:	6861      	ldr	r1, [r4, #4]
    58bc:	f891 113f 	ldrb.w	r1, [r1, #319]	; 0x13f
    58c0:	7141      	strb	r1, [r0, #5]
    58c2:	e04d      	b.n	5960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    58c4:	6861      	ldr	r1, [r4, #4]
    58c6:	9800      	ldr	r0, [sp, #0]
    58c8:	f501 7110 	add.w	r1, r1, #576	; 0x240
    58cc:	f008 fb04 	bl	ded8 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>
    58d0:	6861      	ldr	r1, [r4, #4]
    58d2:	9800      	ldr	r0, [sp, #0]
    58d4:	f501 718e 	add.w	r1, r1, #284	; 0x11c
    58d8:	f008 fafb 	bl	ded2 <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>
    58dc:	e040      	b.n	5960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    58de:	4825      	ldr	r0, [pc, #148]	; (5974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
    58e0:	9900      	ldr	r1, [sp, #0]
    58e2:	f7fd fc0b 	bl	30fc <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
    58e6:	e03b      	b.n	5960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    58e8:	6860      	ldr	r0, [r4, #4]
    58ea:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    58ee:	9800      	ldr	r0, [sp, #0]
    58f0:	f008 fb53 	bl	df9a <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
    58f4:	6860      	ldr	r0, [r4, #4]
    58f6:	f8b0 112a 	ldrh.w	r1, [r0, #298]	; 0x12a
    58fa:	9800      	ldr	r0, [sp, #0]
    58fc:	f008 fb51 	bl	dfa2 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
    5900:	6860      	ldr	r0, [r4, #4]
    5902:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    5906:	9800      	ldr	r0, [sp, #0]
    5908:	f008 fb4f 	bl	dfaa <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
    590c:	6860      	ldr	r0, [r4, #4]
    590e:	f8b0 1128 	ldrh.w	r1, [r0, #296]	; 0x128
    5912:	9800      	ldr	r0, [sp, #0]
    5914:	f008 fb4d 	bl	dfb2 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
    5918:	e022      	b.n	5960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    591a:	e000      	b.n	591e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d2>
    591c:	e011      	b.n	5942 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    591e:	6861      	ldr	r1, [r4, #4]
    5920:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    5924:	2801      	cmp	r0, #1
    5926:	9800      	ldr	r0, [sp, #0]
    5928:	d0c4      	beq.n	58b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x868>
    592a:	f891 1066 	ldrb.w	r1, [r1, #102]	; 0x66
    592e:	7101      	strb	r1, [r0, #4]
    5930:	6861      	ldr	r1, [r4, #4]
    5932:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    5936:	e7c3      	b.n	58c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x874>
    5938:	e00a      	b.n	5950 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x904>
    593a:	9800      	ldr	r0, [sp, #0]
    593c:	f7fd fb88 	bl	3050 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
    5940:	e00e      	b.n	5960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5942:	4b0d      	ldr	r3, [pc, #52]	; (5978 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x92c>)
    5944:	4a0b      	ldr	r2, [pc, #44]	; (5974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
    5946:	4628      	mov	r0, r5
    5948:	681b      	ldr	r3, [r3, #0]
    594a:	9900      	ldr	r1, [sp, #0]
    594c:	4798      	blx	r3
    594e:	e007      	b.n	5960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5950:	6860      	ldr	r0, [r4, #4]
    5952:	f890 22c7 	ldrb.w	r2, [r0, #711]	; 0x2c7
    5956:	f8d0 12c8 	ldr.w	r1, [r0, #712]	; 0x2c8
    595a:	9800      	ldr	r0, [sp, #0]
    595c:	f008 fb07 	bl	df6e <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>
    5960:	f7fb ff2a 	bl	17b8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    5964:	2800      	cmp	r0, #0
    5966:	d104      	bne.n	5972 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x926>
    5968:	f640 31ae 	movw	r1, #2990	; 0xbae
    596c:	2031      	movs	r0, #49	; 0x31
    596e:	f7fb f81f 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5972:	bd38      	pop	{r3, r4, r5, pc}
    5974:	20000124 	.word	0x20000124
    5978:	20000284 	.word	0x20000284
    597c:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5980:	4e8c      	ldr	r6, [pc, #560]	; (5bb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb68>)
    5982:	468a      	mov	sl, r1
    5984:	6870      	ldr	r0, [r6, #4]
    5986:	8800      	ldrh	r0, [r0, #0]
    5988:	f7fb fcea 	bl	1360 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    598c:	0007      	movs	r7, r0
    598e:	d00c      	beq.n	59aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
    5990:	f1a6 0510 	sub.w	r5, r6, #16
    5994:	f04f 0400 	mov.w	r4, #0
    5998:	8868      	ldrh	r0, [r5, #2]
    599a:	05c0      	lsls	r0, r0, #23
    599c:	d50a      	bpl.n	59b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x968>
    599e:	6870      	ldr	r0, [r6, #4]
    59a0:	f8a0 40cc 	strh.w	r4, [r0, #204]	; 0xcc
    59a4:	f880 4234 	strb.w	r4, [r0, #564]	; 0x234
    59a8:	e009      	b.n	59be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x972>
    59aa:	f640 6189 	movw	r1, #3721	; 0xe89
    59ae:	2031      	movs	r0, #49	; 0x31
    59b0:	f7fa fffe 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    59b4:	6871      	ldr	r1, [r6, #4]
    59b6:	f831 0fcc 	ldrh.w	r0, [r1, #204]!
    59ba:	1c40      	adds	r0, r0, #1
    59bc:	8008      	strh	r0, [r1, #0]
    59be:	f000 ff5b 	bl	6878 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    59c2:	f04f 0901 	mov.w	r9, #1
    59c6:	b340      	cbz	r0, 5a1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
    59c8:	8868      	ldrh	r0, [r5, #2]
    59ca:	0500      	lsls	r0, r0, #20
    59cc:	d506      	bpl.n	59dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
    59ce:	6870      	ldr	r0, [r6, #4]
    59d0:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
    59d4:	b111      	cbz	r1, 59dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
    59d6:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
    59da:	e01e      	b.n	5a1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
    59dc:	6870      	ldr	r0, [r6, #4]
    59de:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    59e2:	1c49      	adds	r1, r1, #1
    59e4:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
    59e8:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    59ec:	428a      	cmp	r2, r1
    59ee:	d301      	bcc.n	59f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9a8>
    59f0:	1a53      	subs	r3, r2, r1
    59f2:	e000      	b.n	59f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9aa>
    59f4:	2300      	movs	r3, #0
    59f6:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    59fa:	f10c 0c05 	add.w	ip, ip, #5
    59fe:	4563      	cmp	r3, ip
    5a00:	d801      	bhi.n	5a06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ba>
    5a02:	f880 90ca 	strb.w	r9, [r0, #202]	; 0xca
    5a06:	4291      	cmp	r1, r2
    5a08:	d307      	bcc.n	5a1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
    5a0a:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
    5a0e:	2202      	movs	r2, #2
    5a10:	4969      	ldr	r1, [pc, #420]	; (5bb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>)
    5a12:	f500 70ac 	add.w	r0, r0, #344	; 0x158
    5a16:	f008 fb53 	bl	e0c0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    5a1a:	8868      	ldrh	r0, [r5, #2]
    5a1c:	f04f 0b02 	mov.w	fp, #2
    5a20:	f410 7f40 	tst.w	r0, #768	; 0x300
    5a24:	d00e      	beq.n	5a44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    5a26:	6870      	ldr	r0, [r6, #4]
    5a28:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    5a2c:	b111      	cbz	r1, 5a34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9e8>
    5a2e:	2903      	cmp	r1, #3
    5a30:	d108      	bne.n	5a44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    5a32:	e002      	b.n	5a3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ee>
    5a34:	f880 90a1 	strb.w	r9, [r0, #161]	; 0xa1
    5a38:	e001      	b.n	5a3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f2>
    5a3a:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
    5a3e:	2101      	movs	r1, #1
    5a40:	f7fe fdac 	bl	459c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    5a44:	6870      	ldr	r0, [r6, #4]
    5a46:	46b0      	mov	r8, r6
    5a48:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    5a4c:	2901      	cmp	r1, #1
    5a4e:	d104      	bne.n	5a5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    5a50:	8869      	ldrh	r1, [r5, #2]
    5a52:	0549      	lsls	r1, r1, #21
    5a54:	d501      	bpl.n	5a5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    5a56:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
    5a5a:	9900      	ldr	r1, [sp, #0]
    5a5c:	2900      	cmp	r1, #0
    5a5e:	d179      	bne.n	5b54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb08>
    5a60:	78a9      	ldrb	r1, [r5, #2]
    5a62:	0649      	lsls	r1, r1, #25
    5a64:	d502      	bpl.n	5a6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa20>
    5a66:	f8a0 4248 	strh.w	r4, [r0, #584]	; 0x248
    5a6a:	e004      	b.n	5a76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2a>
    5a6c:	f8b0 1248 	ldrh.w	r1, [r0, #584]	; 0x248
    5a70:	1c49      	adds	r1, r1, #1
    5a72:	f8a0 1248 	strh.w	r1, [r0, #584]	; 0x248
    5a76:	4650      	mov	r0, sl
    5a78:	f7ff fdae 	bl	55d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x58c>
    5a7c:	ea40 000a 	orr.w	r0, r0, sl
    5a80:	4682      	mov	sl, r0
    5a82:	f7ff fd41 	bl	5508 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4bc>
    5a86:	f8d8 6004 	ldr.w	r6, [r8, #4]
    5a8a:	f8b6 0228 	ldrh.w	r0, [r6, #552]	; 0x228
    5a8e:	1c40      	adds	r0, r0, #1
    5a90:	f8a6 0228 	strh.w	r0, [r6, #552]	; 0x228
    5a94:	f896 022c 	ldrb.w	r0, [r6, #556]	; 0x22c
    5a98:	b128      	cbz	r0, 5aa6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
    5a9a:	f7fc f857 	bl	1b4c <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI>
    5a9e:	b1b0      	cbz	r0, 5ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    5aa0:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    5aa4:	e013      	b.n	5ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    5aa6:	f7fb ff2f 	bl	1908 <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY>
    5aaa:	b108      	cbz	r0, 5ab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa64>
    5aac:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    5ab0:	f7fb ff24 	bl	18fc <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA>
    5ab4:	b158      	cbz	r0, 5ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    5ab6:	f896 0234 	ldrb.w	r0, [r6, #564]	; 0x234
    5aba:	1c40      	adds	r0, r0, #1
    5abc:	b2c0      	uxtb	r0, r0
    5abe:	f886 0234 	strb.w	r0, [r6, #564]	; 0x234
    5ac2:	2802      	cmp	r0, #2
    5ac4:	d903      	bls.n	5ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    5ac6:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    5aca:	f886 4234 	strb.w	r4, [r6, #564]	; 0x234
    5ace:	f8d8 0004 	ldr.w	r0, [r8, #4]
    5ad2:	4646      	mov	r6, r8
    5ad4:	2301      	movs	r3, #1
    5ad6:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5ada:	2100      	movs	r1, #0
    5adc:	3080      	adds	r0, #128	; 0x80
    5ade:	f007 ff33 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5ae2:	b920      	cbnz	r0, 5aee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaa2>
    5ae4:	6870      	ldr	r0, [r6, #4]
    5ae6:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    5aea:	280b      	cmp	r0, #11
    5aec:	d15f      	bne.n	5bae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    5aee:	6870      	ldr	r0, [r6, #4]
    5af0:	2301      	movs	r3, #1
    5af2:	2100      	movs	r1, #0
    5af4:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5af8:	3080      	adds	r0, #128	; 0x80
    5afa:	f007 ff25 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5afe:	b350      	cbz	r0, 5b56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    5b00:	6870      	ldr	r0, [r6, #4]
    5b02:	2301      	movs	r3, #1
    5b04:	2100      	movs	r1, #0
    5b06:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    5b0a:	3080      	adds	r0, #128	; 0x80
    5b0c:	f007 ff1c 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5b10:	b308      	cbz	r0, 5b56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    5b12:	6870      	ldr	r0, [r6, #4]
    5b14:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    5b18:	2902      	cmp	r1, #2
    5b1a:	d148      	bne.n	5bae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    5b1c:	f890 0234 	ldrb.w	r0, [r0, #564]	; 0x234
    5b20:	b9c8      	cbnz	r0, 5b56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    5b22:	4638      	mov	r0, r7
    5b24:	f007 fa22 	bl	cf6c <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    5b28:	b1a8      	cbz	r0, 5b56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    5b2a:	6870      	ldr	r0, [r6, #4]
    5b2c:	3080      	adds	r0, #128	; 0x80
    5b2e:	f009 fb99 	bl	f264 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5b32:	b980      	cbnz	r0, 5b56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    5b34:	6871      	ldr	r1, [r6, #4]
    5b36:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
    5b3a:	2801      	cmp	r0, #1
    5b3c:	d937      	bls.n	5bae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    5b3e:	f881 922a 	strb.w	r9, [r1, #554]	; 0x22a
    5b42:	f8b1 20ce 	ldrh.w	r2, [r1, #206]	; 0xce
    5b46:	f8b1 00cc 	ldrh.w	r0, [r1, #204]	; 0xcc
    5b4a:	1e93      	subs	r3, r2, #2
    5b4c:	4298      	cmp	r0, r3
    5b4e:	db03      	blt.n	5b58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0c>
    5b50:	2001      	movs	r0, #1
    5b52:	e004      	b.n	5b5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb12>
    5b54:	e01c      	b.n	5b90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb44>
    5b56:	e02a      	b.n	5bae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    5b58:	1a10      	subs	r0, r2, r0
    5b5a:	1e40      	subs	r0, r0, #1
    5b5c:	b280      	uxth	r0, r0
    5b5e:	f8b1 3228 	ldrh.w	r3, [r1, #552]	; 0x228
    5b62:	88aa      	ldrh	r2, [r5, #4]
    5b64:	4293      	cmp	r3, r2
    5b66:	d301      	bcc.n	5b6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb20>
    5b68:	2201      	movs	r2, #1
    5b6a:	e002      	b.n	5b72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb26>
    5b6c:	1ad2      	subs	r2, r2, r3
    5b6e:	1c52      	adds	r2, r2, #1
    5b70:	b292      	uxth	r2, r2
    5b72:	4290      	cmp	r0, r2
    5b74:	d900      	bls.n	5b78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb2c>
    5b76:	4610      	mov	r0, r2
    5b78:	2801      	cmp	r0, #1
    5b7a:	d101      	bne.n	5b80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb34>
    5b7c:	f881 422a 	strb.w	r4, [r1, #554]	; 0x22a
    5b80:	6871      	ldr	r1, [r6, #4]
    5b82:	f8b1 2094 	ldrh.w	r2, [r1, #148]	; 0x94
    5b86:	4410      	add	r0, r2
    5b88:	f8a1 0224 	strh.w	r0, [r1, #548]	; 0x224
    5b8c:	f000 ff8e 	bl	6aac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a60>
    5b90:	78a8      	ldrb	r0, [r5, #2]
    5b92:	4652      	mov	r2, sl
    5b94:	f3c0 1180 	ubfx	r1, r0, #6, #1
    5b98:	9800      	ldr	r0, [sp, #0]
    5b9a:	f000 fe81 	bl	68a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1854>
    5b9e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    5ba2:	f880 422b 	strb.w	r4, [r0, #555]	; 0x22b
    5ba6:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5baa:	f7fb bdef 	b.w	178c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    5bae:	2001      	movs	r0, #1
    5bb0:	6871      	ldr	r1, [r6, #4]
    5bb2:	e7e3      	b.n	5b7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb30>
    5bb4:	20000124 	.word	0x20000124
    5bb8:	0000e5a3 	.word	0x0000e5a3
    5bbc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    5bbe:	4c68      	ldr	r4, [pc, #416]	; (5d60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd14>)
    5bc0:	2301      	movs	r3, #1
    5bc2:	2100      	movs	r1, #0
    5bc4:	6860      	ldr	r0, [r4, #4]
    5bc6:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5bca:	3080      	adds	r0, #128	; 0x80
    5bcc:	f007 febc 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5bd0:	2800      	cmp	r0, #0
    5bd2:	d07a      	beq.n	5cca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc7e>
    5bd4:	6860      	ldr	r0, [r4, #4]
    5bd6:	f890 1143 	ldrb.w	r1, [r0, #323]	; 0x143
    5bda:	2500      	movs	r5, #0
    5bdc:	b139      	cbz	r1, 5bee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba2>
    5bde:	2100      	movs	r1, #0
    5be0:	200e      	movs	r0, #14
    5be2:	f000 f8bf 	bl	5d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5be6:	6860      	ldr	r0, [r4, #4]
    5be8:	f880 5143 	strb.w	r5, [r0, #323]	; 0x143
    5bec:	e0b5      	b.n	5d5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    5bee:	f890 1142 	ldrb.w	r1, [r0, #322]	; 0x142
    5bf2:	b119      	cbz	r1, 5bfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb0>
    5bf4:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
    5bf8:	0789      	lsls	r1, r1, #30
    5bfa:	d016      	beq.n	5c2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbde>
    5bfc:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    5c00:	f88d 1004 	strb.w	r1, [sp, #4]
    5c04:	9901      	ldr	r1, [sp, #4]
    5c06:	9101      	str	r1, [sp, #4]
    5c08:	f89d 1004 	ldrb.w	r1, [sp, #4]
    5c0c:	b141      	cbz	r1, 5c20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbd4>
    5c0e:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    5c12:	f88d 1000 	strb.w	r1, [sp]
    5c16:	9900      	ldr	r1, [sp, #0]
    5c18:	9100      	str	r1, [sp, #0]
    5c1a:	f89d 1000 	ldrb.w	r1, [sp]
    5c1e:	b189      	cbz	r1, 5c44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbf8>
    5c20:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    5c24:	2901      	cmp	r1, #1
    5c26:	d030      	beq.n	5c8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3e>
    5c28:	e040      	b.n	5cac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    5c2a:	2100      	movs	r1, #0
    5c2c:	200c      	movs	r0, #12
    5c2e:	f000 f899 	bl	5d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5c32:	6860      	ldr	r0, [r4, #4]
    5c34:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
    5c38:	f041 0101 	orr.w	r1, r1, #1
    5c3c:	7001      	strb	r1, [r0, #0]
    5c3e:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
    5c42:	e08a      	b.n	5d5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    5c44:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5c48:	2925      	cmp	r1, #37	; 0x25
    5c4a:	d01c      	beq.n	5c86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3a>
    5c4c:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5c50:	2925      	cmp	r1, #37	; 0x25
    5c52:	d018      	beq.n	5c86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3a>
    5c54:	f05f 0300 	movs.w	r3, #0
    5c58:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
    5c5c:	f500 7199 	add.w	r1, r0, #306	; 0x132
    5c60:	f008 fa44 	bl	e0ec <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    5c64:	6860      	ldr	r0, [r4, #4]
    5c66:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    5c6a:	2100      	movs	r1, #0
    5c6c:	2014      	movs	r0, #20
    5c6e:	f000 f879 	bl	5d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5c72:	6861      	ldr	r1, [r4, #4]
    5c74:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    5c78:	8bc2      	ldrh	r2, [r0, #30]
    5c7a:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
    5c7e:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    5c80:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
    5c84:	e069      	b.n	5d5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    5c86:	2301      	movs	r3, #1
    5c88:	e7e6      	b.n	5c58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc0c>
    5c8a:	f890 113d 	ldrb.w	r1, [r0, #317]	; 0x13d
    5c8e:	f88d 1000 	strb.w	r1, [sp]
    5c92:	9900      	ldr	r1, [sp, #0]
    5c94:	9100      	str	r1, [sp, #0]
    5c96:	f89d 1000 	ldrb.w	r1, [sp]
    5c9a:	b939      	cbnz	r1, 5cac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    5c9c:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5ca0:	2301      	movs	r3, #1
    5ca2:	210b      	movs	r1, #11
    5ca4:	3080      	adds	r0, #128	; 0x80
    5ca6:	f007 fe4f 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5caa:	b178      	cbz	r0, 5ccc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc80>
    5cac:	6860      	ldr	r0, [r4, #4]
    5cae:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
    5cb2:	f88d 1000 	strb.w	r1, [sp]
    5cb6:	9900      	ldr	r1, [sp, #0]
    5cb8:	9100      	str	r1, [sp, #0]
    5cba:	f89d 1000 	ldrb.w	r1, [sp]
    5cbe:	b3b9      	cbz	r1, 5d30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce4>
    5cc0:	2100      	movs	r1, #0
    5cc2:	2023      	movs	r0, #35	; 0x23
    5cc4:	f000 f84e 	bl	5d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5cc8:	e047      	b.n	5d5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    5cca:	e030      	b.n	5d2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
    5ccc:	6860      	ldr	r0, [r4, #4]
    5cce:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    5cd2:	f009 facf 	bl	f274 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    5cd6:	4605      	mov	r5, r0
    5cd8:	6860      	ldr	r0, [r4, #4]
    5cda:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    5cde:	f009 fac9 	bl	f274 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    5ce2:	4606      	mov	r6, r0
    5ce4:	6860      	ldr	r0, [r4, #4]
    5ce6:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    5cea:	4628      	mov	r0, r5
    5cec:	f009 facd 	bl	f28a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    5cf0:	b150      	cbz	r0, 5d08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcbc>
    5cf2:	6860      	ldr	r0, [r4, #4]
    5cf4:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    5cf8:	4630      	mov	r0, r6
    5cfa:	f009 fac6 	bl	f28a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    5cfe:	b118      	cbz	r0, 5d08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcbc>
    5d00:	2000      	movs	r0, #0
    5d02:	f000 f943 	bl	5f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    5d06:	e011      	b.n	5d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>
    5d08:	6860      	ldr	r0, [r4, #4]
    5d0a:	2301      	movs	r3, #1
    5d0c:	2103      	movs	r1, #3
    5d0e:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5d12:	3080      	adds	r0, #128	; 0x80
    5d14:	f007 fe18 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5d18:	b940      	cbnz	r0, 5d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>
    5d1a:	6860      	ldr	r0, [r4, #4]
    5d1c:	2301      	movs	r3, #1
    5d1e:	2102      	movs	r1, #2
    5d20:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5d24:	3080      	adds	r0, #128	; 0x80
    5d26:	f007 fe0f 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5d2a:	b110      	cbz	r0, 5d32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce6>
    5d2c:	2000      	movs	r0, #0
    5d2e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    5d30:	e002      	b.n	5d38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcec>
    5d32:	2100      	movs	r1, #0
    5d34:	2016      	movs	r0, #22
    5d36:	e7c5      	b.n	5cc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc78>
    5d38:	f890 0146 	ldrb.w	r0, [r0, #326]	; 0x146
    5d3c:	f88d 0000 	strb.w	r0, [sp]
    5d40:	9800      	ldr	r0, [sp, #0]
    5d42:	9000      	str	r0, [sp, #0]
    5d44:	f89d 0000 	ldrb.w	r0, [sp]
    5d48:	2800      	cmp	r0, #0
    5d4a:	d0f0      	beq.n	5d2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
    5d4c:	2100      	movs	r1, #0
    5d4e:	2025      	movs	r0, #37	; 0x25
    5d50:	f000 f808 	bl	5d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5d54:	6860      	ldr	r0, [r4, #4]
    5d56:	f880 5146 	strb.w	r5, [r0, #326]	; 0x146
    5d5a:	2001      	movs	r0, #1
    5d5c:	e7e7      	b.n	5d2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
    5d5e:	0000      	.short	0x0000
    5d60:	20000124 	.word	0x20000124
    5d64:	b570      	push	{r4, r5, r6, lr}
    5d66:	4c0d      	ldr	r4, [pc, #52]	; (5d9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd50>)
    5d68:	4606      	mov	r6, r0
    5d6a:	460d      	mov	r5, r1
    5d6c:	6860      	ldr	r0, [r4, #4]
    5d6e:	3080      	adds	r0, #128	; 0x80
    5d70:	f009 fa78 	bl	f264 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5d74:	b120      	cbz	r0, 5d80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd34>
    5d76:	f640 31b3 	movw	r1, #2995	; 0xbb3
    5d7a:	2031      	movs	r0, #49	; 0x31
    5d7c:	f7fa fe18 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d80:	6862      	ldr	r2, [r4, #4]
    5d82:	2000      	movs	r0, #0
    5d84:	2d01      	cmp	r5, #1
    5d86:	f882 6126 	strb.w	r6, [r2, #294]	; 0x126
    5d8a:	d004      	beq.n	5d96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4a>
    5d8c:	f822 0fd2 	strh.w	r0, [r2, #210]!
    5d90:	2001      	movs	r0, #1
    5d92:	7110      	strb	r0, [r2, #4]
    5d94:	bd70      	pop	{r4, r5, r6, pc}
    5d96:	f8a2 00d8 	strh.w	r0, [r2, #216]	; 0xd8
    5d9a:	bd70      	pop	{r4, r5, r6, pc}
    5d9c:	20000124 	.word	0x20000124
    5da0:	b538      	push	{r3, r4, r5, lr}
    5da2:	4c1f      	ldr	r4, [pc, #124]	; (5e20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd4>)
    5da4:	2500      	movs	r5, #0
    5da6:	6860      	ldr	r0, [r4, #4]
    5da8:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    5dac:	2901      	cmp	r1, #1
    5dae:	d00a      	beq.n	5dc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd7a>
    5db0:	2902      	cmp	r1, #2
    5db2:	d133      	bne.n	5e1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    5db4:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
    5db8:	b1d9      	cbz	r1, 5df2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xda6>
    5dba:	2106      	movs	r1, #6
    5dbc:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5dc0:	2101      	movs	r1, #1
    5dc2:	2002      	movs	r0, #2
    5dc4:	e025      	b.n	5e12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
    5dc6:	f890 1212 	ldrb.w	r1, [r0, #530]	; 0x212
    5dca:	f88d 1000 	strb.w	r1, [sp]
    5dce:	9900      	ldr	r1, [sp, #0]
    5dd0:	9100      	str	r1, [sp, #0]
    5dd2:	f89d 1000 	ldrb.w	r1, [sp]
    5dd6:	2900      	cmp	r1, #0
    5dd8:	d120      	bne.n	5e1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    5dda:	f500 7384 	add.w	r3, r0, #264	; 0x108
    5dde:	f500 710e 	add.w	r1, r0, #568	; 0x238
    5de2:	2200      	movs	r2, #0
    5de4:	f200 20b1 	addw	r0, r0, #689	; 0x2b1
    5de8:	f007 fd79 	bl	d8de <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    5dec:	2101      	movs	r1, #1
    5dee:	2005      	movs	r0, #5
    5df0:	e00f      	b.n	5e12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
    5df2:	2103      	movs	r1, #3
    5df4:	2206      	movs	r2, #6
    5df6:	480a      	ldr	r0, [pc, #40]	; (5e20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd4>)
    5df8:	f008 fa9d 	bl	e336 <sym_2UM6LVQLLMOP7WZDJLNUGNNDXOSOGAIT6WB627Q>
    5dfc:	6860      	ldr	r0, [r4, #4]
    5dfe:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
    5e02:	0880      	lsrs	r0, r0, #2
    5e04:	f010 0f01 	tst.w	r0, #1
    5e08:	d001      	beq.n	5e0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc2>
    5e0a:	2011      	movs	r0, #17
    5e0c:	e000      	b.n	5e10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc4>
    5e0e:	200d      	movs	r0, #13
    5e10:	2101      	movs	r1, #1
    5e12:	f7ff ffa7 	bl	5d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5e16:	6860      	ldr	r0, [r4, #4]
    5e18:	f880 52b0 	strb.w	r5, [r0, #688]	; 0x2b0
    5e1c:	bd38      	pop	{r3, r4, r5, pc}
    5e1e:	0000      	.short	0x0000
    5e20:	20000124 	.word	0x20000124
    5e24:	b570      	push	{r4, r5, r6, lr}
    5e26:	4b2b      	ldr	r3, [pc, #172]	; (5ed4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe88>)
    5e28:	4602      	mov	r2, r0
    5e2a:	8858      	ldrh	r0, [r3, #2]
    5e2c:	4310      	orrs	r0, r2
    5e2e:	8058      	strh	r0, [r3, #2]
    5e30:	f103 0010 	add.w	r0, r3, #16
    5e34:	2a40      	cmp	r2, #64	; 0x40
    5e36:	6840      	ldr	r0, [r0, #4]
    5e38:	d00d      	beq.n	5e56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe0a>
    5e3a:	0796      	lsls	r6, r2, #30
    5e3c:	f04f 0500 	mov.w	r5, #0
    5e40:	f04f 0401 	mov.w	r4, #1
    5e44:	ea4f 76c2 	mov.w	r6, r2, lsl #31
    5e48:	d50c      	bpl.n	5e64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe18>
    5e4a:	b14e      	cbz	r6, 5e60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe14>
    5e4c:	f640 51f6 	movw	r1, #3574	; 0xdf6
    5e50:	2031      	movs	r0, #49	; 0x31
    5e52:	f7fa fdad 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5e5a:	2104      	movs	r1, #4
    5e5c:	f7fe bb9e 	b.w	459c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    5e60:	6099      	str	r1, [r3, #8]
    5e62:	e01c      	b.n	5e9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
    5e64:	b1c6      	cbz	r6, 5e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    5e66:	60d9      	str	r1, [r3, #12]
    5e68:	78c9      	ldrb	r1, [r1, #3]
    5e6a:	2906      	cmp	r1, #6
    5e6c:	d002      	beq.n	5e74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe28>
    5e6e:	290b      	cmp	r1, #11
    5e70:	d112      	bne.n	5e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    5e72:	e009      	b.n	5e88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe3c>
    5e74:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5e78:	2918      	cmp	r1, #24
    5e7a:	d10d      	bne.n	5e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    5e7c:	2100      	movs	r1, #0
    5e7e:	e9c0 113e 	strd	r1, r1, [r0, #248]	; 0xf8
    5e82:	f880 40a2 	strb.w	r4, [r0, #162]	; 0xa2
    5e86:	e007      	b.n	5e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    5e88:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5e8c:	2912      	cmp	r1, #18
    5e8e:	d103      	bne.n	5e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    5e90:	f880 50a2 	strb.w	r5, [r0, #162]	; 0xa2
    5e94:	f880 40dc 	strb.w	r4, [r0, #220]	; 0xdc
    5e98:	0791      	lsls	r1, r2, #30
    5e9a:	d516      	bpl.n	5eca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    5e9c:	6899      	ldr	r1, [r3, #8]
    5e9e:	78c9      	ldrb	r1, [r1, #3]
    5ea0:	2905      	cmp	r1, #5
    5ea2:	d002      	beq.n	5eaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5e>
    5ea4:	290b      	cmp	r1, #11
    5ea6:	d110      	bne.n	5eca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    5ea8:	e009      	b.n	5ebe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe72>
    5eaa:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5eae:	2916      	cmp	r1, #22
    5eb0:	d10b      	bne.n	5eca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    5eb2:	2100      	movs	r1, #0
    5eb4:	e9c0 1140 	strd	r1, r1, [r0, #256]	; 0x100
    5eb8:	f880 40a3 	strb.w	r4, [r0, #163]	; 0xa3
    5ebc:	e005      	b.n	5eca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    5ebe:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5ec2:	2911      	cmp	r1, #17
    5ec4:	d101      	bne.n	5eca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    5ec6:	f880 50a3 	strb.w	r5, [r0, #163]	; 0xa3
    5eca:	0690      	lsls	r0, r2, #26
    5ecc:	d501      	bpl.n	5ed2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe86>
    5ece:	2008      	movs	r0, #8
    5ed0:	7058      	strb	r0, [r3, #1]
    5ed2:	bd70      	pop	{r4, r5, r6, pc}
    5ed4:	20000114 	.word	0x20000114
    5ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5edc:	4c29      	ldr	r4, [pc, #164]	; (5f84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>)
    5ede:	2501      	movs	r5, #1
    5ee0:	6862      	ldr	r2, [r4, #4]
    5ee2:	f892 12ce 	ldrb.w	r1, [r2, #718]	; 0x2ce
    5ee6:	b109      	cbz	r1, 5eec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    5ee8:	2701      	movs	r7, #1
    5eea:	e000      	b.n	5eee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea2>
    5eec:	2700      	movs	r7, #0
    5eee:	f892 02cf 	ldrb.w	r0, [r2, #719]	; 0x2cf
    5ef2:	b108      	cbz	r0, 5ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    5ef4:	2601      	movs	r6, #1
    5ef6:	e000      	b.n	5efa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeae>
    5ef8:	2600      	movs	r6, #0
    5efa:	b90f      	cbnz	r7, 5f00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb4>
    5efc:	f892 106a 	ldrb.w	r1, [r2, #106]	; 0x6a
    5f00:	b90e      	cbnz	r6, 5f06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeba>
    5f02:	f892 006b 	ldrb.w	r0, [r2, #107]	; 0x6b
    5f06:	f102 0362 	add.w	r3, r2, #98	; 0x62
    5f0a:	7219      	strb	r1, [r3, #8]
    5f0c:	7258      	strb	r0, [r3, #9]
    5f0e:	20ff      	movs	r0, #255	; 0xff
    5f10:	7298      	strb	r0, [r3, #10]
    5f12:	481d      	ldr	r0, [pc, #116]	; (5f88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf3c>)
    5f14:	6803      	ldr	r3, [r0, #0]
    5f16:	b10b      	cbz	r3, 5f1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed0>
    5f18:	4610      	mov	r0, r2
    5f1a:	4798      	blx	r3
    5f1c:	6860      	ldr	r0, [r4, #4]
    5f1e:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    5f22:	2801      	cmp	r0, #1
    5f24:	d001      	beq.n	5f2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    5f26:	b907      	cbnz	r7, 5f2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    5f28:	b116      	cbz	r6, 5f30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee4>
    5f2a:	2000      	movs	r0, #0
    5f2c:	f000 f82e 	bl	5f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    5f30:	6860      	ldr	r0, [r4, #4]
    5f32:	302c      	adds	r0, #44	; 0x2c
    5f34:	f008 f947 	bl	e1c6 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    5f38:	4606      	mov	r6, r0
    5f3a:	6860      	ldr	r0, [r4, #4]
    5f3c:	f008 f8f1 	bl	e122 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    5f40:	b130      	cbz	r0, 5f50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf04>
    5f42:	6861      	ldr	r1, [r4, #4]
    5f44:	f501 72b1 	add.w	r2, r1, #354	; 0x162
    5f48:	f831 0b2c 	ldrh.w	r0, [r1], #44
    5f4c:	f7fc ff50 	bl	2df0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    5f50:	2105      	movs	r1, #5
    5f52:	6860      	ldr	r0, [r4, #4]
    5f54:	f7fe fb22 	bl	459c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    5f58:	6860      	ldr	r0, [r4, #4]
    5f5a:	302c      	adds	r0, #44	; 0x2c
    5f5c:	f008 f933 	bl	e1c6 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    5f60:	4604      	mov	r4, r0
    5f62:	42a6      	cmp	r6, r4
    5f64:	d20a      	bcs.n	5f7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf30>
    5f66:	f003 fdcd 	bl	9b04 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    5f6a:	4601      	mov	r1, r0
    5f6c:	1ba0      	subs	r0, r4, r6
    5f6e:	2867      	cmp	r0, #103	; 0x67
    5f70:	d200      	bcs.n	5f74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    5f72:	2067      	movs	r0, #103	; 0x67
    5f74:	f003 fc8c 	bl	9890 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    5f78:	b100      	cbz	r0, 5f7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf30>
    5f7a:	2500      	movs	r5, #0
    5f7c:	4628      	mov	r0, r5
    5f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f82:	0000      	.short	0x0000
    5f84:	20000124 	.word	0x20000124
    5f88:	2000028c 	.word	0x2000028c
    5f8c:	4601      	mov	r1, r0
    5f8e:	4801      	ldr	r0, [pc, #4]	; (5f94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf48>)
    5f90:	f001 ba96 	b.w	74c0 <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA>
    5f94:	20000124 	.word	0x20000124
    5f98:	b570      	push	{r4, r5, r6, lr}
    5f9a:	4d0f      	ldr	r5, [pc, #60]	; (5fd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8c>)
    5f9c:	686c      	ldr	r4, [r5, #4]
    5f9e:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
    5fa2:	2921      	cmp	r1, #33	; 0x21
    5fa4:	d002      	beq.n	5fac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf60>
    5fa6:	292e      	cmp	r1, #46	; 0x2e
    5fa8:	d003      	beq.n	5fb2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf66>
    5faa:	e011      	b.n	5fd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf84>
    5fac:	f7ff ffee 	bl	5f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    5fb0:	e008      	b.n	5fc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf78>
    5fb2:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
    5fb6:	f104 0080 	add.w	r0, r4, #128	; 0x80
    5fba:	2301      	movs	r3, #1
    5fbc:	210b      	movs	r1, #11
    5fbe:	f007 fcc3 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5fc2:	b138      	cbz	r0, 5fd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf88>
    5fc4:	6869      	ldr	r1, [r5, #4]
    5fc6:	2000      	movs	r0, #0
    5fc8:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    5fcc:	f881 00d6 	strb.w	r0, [r1, #214]	; 0xd6
    5fd0:	2000      	movs	r0, #0
    5fd2:	bd70      	pop	{r4, r5, r6, pc}
    5fd4:	202a      	movs	r0, #42	; 0x2a
    5fd6:	e7e9      	b.n	5fac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf60>
    5fd8:	20000124 	.word	0x20000124
    5fdc:	b570      	push	{r4, r5, r6, lr}
    5fde:	4604      	mov	r4, r0
    5fe0:	6840      	ldr	r0, [r0, #4]
    5fe2:	2301      	movs	r3, #1
    5fe4:	2100      	movs	r1, #0
    5fe6:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5fea:	3080      	adds	r0, #128	; 0x80
    5fec:	f007 fcac 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5ff0:	b1b8      	cbz	r0, 6022 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd6>
    5ff2:	4d13      	ldr	r5, [pc, #76]	; (6040 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff4>)
    5ff4:	68e8      	ldr	r0, [r5, #12]
    5ff6:	f007 ff1a 	bl	de2e <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>
    5ffa:	6861      	ldr	r1, [r4, #4]
    5ffc:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    6000:	6861      	ldr	r1, [r4, #4]
    6002:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    6006:	f009 f94e 	bl	f2a6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    600a:	b160      	cbz	r0, 6026 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfda>
    600c:	6861      	ldr	r1, [r4, #4]
    600e:	2028      	movs	r0, #40	; 0x28
    6010:	2202      	movs	r2, #2
    6012:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    6016:	6860      	ldr	r0, [r4, #4]
    6018:	490a      	ldr	r1, [pc, #40]	; (6044 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff8>)
    601a:	30b4      	adds	r0, #180	; 0xb4
    601c:	f008 f83c 	bl	e098 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6020:	e00b      	b.n	603a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfee>
    6022:	2001      	movs	r0, #1
    6024:	bd70      	pop	{r4, r5, r6, pc}
    6026:	6861      	ldr	r1, [r4, #4]
    6028:	68e8      	ldr	r0, [r5, #12]
    602a:	f201 21ce 	addw	r1, r1, #718	; 0x2ce
    602e:	f007 fef9 	bl	de24 <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>
    6032:	6861      	ldr	r1, [r4, #4]
    6034:	200a      	movs	r0, #10
    6036:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    603a:	2000      	movs	r0, #0
    603c:	bd70      	pop	{r4, r5, r6, pc}
    603e:	0000      	.short	0x0000
    6040:	20000114 	.word	0x20000114
    6044:	0000e355 	.word	0x0000e355
    6048:	b570      	push	{r4, r5, r6, lr}
    604a:	4604      	mov	r4, r0
    604c:	6840      	ldr	r0, [r0, #4]
    604e:	2301      	movs	r3, #1
    6050:	2100      	movs	r1, #0
    6052:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6056:	3080      	adds	r0, #128	; 0x80
    6058:	f007 fc76 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    605c:	b1e0      	cbz	r0, 6098 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x104c>
    605e:	4d28      	ldr	r5, [pc, #160]	; (6100 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b4>)
    6060:	2100      	movs	r1, #0
    6062:	68e8      	ldr	r0, [r5, #12]
    6064:	f007 fee6 	bl	de34 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>
    6068:	b1c0      	cbz	r0, 609c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1050>
    606a:	68e8      	ldr	r0, [r5, #12]
    606c:	6861      	ldr	r1, [r4, #4]
    606e:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    6072:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    6076:	6861      	ldr	r1, [r4, #4]
    6078:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    607c:	f009 f913 	bl	f2a6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    6080:	b188      	cbz	r0, 60a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x105a>
    6082:	6861      	ldr	r1, [r4, #4]
    6084:	2028      	movs	r0, #40	; 0x28
    6086:	2202      	movs	r2, #2
    6088:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    608c:	6860      	ldr	r0, [r4, #4]
    608e:	491d      	ldr	r1, [pc, #116]	; (6104 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b8>)
    6090:	30b4      	adds	r0, #180	; 0xb4
    6092:	f008 f801 	bl	e098 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6096:	e030      	b.n	60fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ae>
    6098:	2001      	movs	r0, #1
    609a:	bd70      	pop	{r4, r5, r6, pc}
    609c:	4620      	mov	r0, r4
    609e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    60a2:	f000 b88d 	b.w	61c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    60a6:	68e8      	ldr	r0, [r5, #12]
    60a8:	f007 feee 	bl	de88 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>
    60ac:	f007 fc42 	bl	d934 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    60b0:	4606      	mov	r6, r0
    60b2:	6860      	ldr	r0, [r4, #4]
    60b4:	4631      	mov	r1, r6
    60b6:	f8c0 62d4 	str.w	r6, [r0, #724]	; 0x2d4
    60ba:	68e8      	ldr	r0, [r5, #12]
    60bc:	7900      	ldrb	r0, [r0, #4]
    60be:	f007 fda6 	bl	dc0e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    60c2:	6861      	ldr	r1, [r4, #4]
    60c4:	f8a1 02ce 	strh.w	r0, [r1, #718]	; 0x2ce
    60c8:	68e8      	ldr	r0, [r5, #12]
    60ca:	4631      	mov	r1, r6
    60cc:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    60d0:	f007 fd99 	bl	dc06 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    60d4:	6861      	ldr	r1, [r4, #4]
    60d6:	f8c1 02d0 	str.w	r0, [r1, #720]	; 0x2d0
    60da:	68e8      	ldr	r0, [r5, #12]
    60dc:	f007 fed7 	bl	de8e <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>
    60e0:	6861      	ldr	r1, [r4, #4]
    60e2:	f8a1 02d8 	strh.w	r0, [r1, #728]	; 0x2d8
    60e6:	68e8      	ldr	r0, [r5, #12]
    60e8:	f007 fed4 	bl	de94 <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>
    60ec:	6861      	ldr	r1, [r4, #4]
    60ee:	f8a1 02da 	strh.w	r0, [r1, #730]	; 0x2da
    60f2:	6861      	ldr	r1, [r4, #4]
    60f4:	200d      	movs	r0, #13
    60f6:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    60fa:	2000      	movs	r0, #0
    60fc:	bd70      	pop	{r4, r5, r6, pc}
    60fe:	0000      	.short	0x0000
    6100:	20000114 	.word	0x20000114
    6104:	0000e355 	.word	0x0000e355
    6108:	b570      	push	{r4, r5, r6, lr}
    610a:	4604      	mov	r4, r0
    610c:	6840      	ldr	r0, [r0, #4]
    610e:	2301      	movs	r3, #1
    6110:	2100      	movs	r1, #0
    6112:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6116:	3080      	adds	r0, #128	; 0x80
    6118:	f007 fc16 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    611c:	b970      	cbnz	r0, 613c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10f0>
    611e:	6860      	ldr	r0, [r4, #4]
    6120:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6124:	2a13      	cmp	r2, #19
    6126:	d009      	beq.n	613c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10f0>
    6128:	2301      	movs	r3, #1
    612a:	2105      	movs	r1, #5
    612c:	3080      	adds	r0, #128	; 0x80
    612e:	f007 fc0b 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6132:	b108      	cbz	r0, 6138 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ec>
    6134:	2008      	movs	r0, #8
    6136:	bd70      	pop	{r4, r5, r6, pc}
    6138:	2001      	movs	r0, #1
    613a:	bd70      	pop	{r4, r5, r6, pc}
    613c:	6860      	ldr	r0, [r4, #4]
    613e:	f890 00dc 	ldrb.w	r0, [r0, #220]	; 0xdc
    6142:	b910      	cbnz	r0, 614a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10fe>
    6144:	4816      	ldr	r0, [pc, #88]	; (61a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1154>)
    6146:	f008 f8e0 	bl	e30a <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    614a:	4d15      	ldr	r5, [pc, #84]	; (61a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1154>)
    614c:	6861      	ldr	r1, [r4, #4]
    614e:	3d10      	subs	r5, #16
    6150:	f501 710e 	add.w	r1, r1, #568	; 0x238
    6154:	68e8      	ldr	r0, [r5, #12]
    6156:	f007 feb6 	bl	dec6 <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>
    615a:	6861      	ldr	r1, [r4, #4]
    615c:	68e8      	ldr	r0, [r5, #12]
    615e:	f501 718c 	add.w	r1, r1, #280	; 0x118
    6162:	f007 fea7 	bl	deb4 <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>
    6166:	6860      	ldr	r0, [r4, #4]
    6168:	8801      	ldrh	r1, [r0, #0]
    616a:	f8a0 12e6 	strh.w	r1, [r0, #742]	; 0x2e6
    616e:	6861      	ldr	r1, [r4, #4]
    6170:	68e8      	ldr	r0, [r5, #12]
    6172:	f501 713a 	add.w	r1, r1, #744	; 0x2e8
    6176:	f007 fea1 	bl	debc <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>
    617a:	6861      	ldr	r1, [r4, #4]
    617c:	68e8      	ldr	r0, [r5, #12]
    617e:	f501 713c 	add.w	r1, r1, #752	; 0x2f0
    6182:	f007 fe94 	bl	deae <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>
    6186:	6860      	ldr	r0, [r4, #4]
    6188:	2202      	movs	r2, #2
    618a:	4906      	ldr	r1, [pc, #24]	; (61a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1158>)
    618c:	f500 7037 	add.w	r0, r0, #732	; 0x2dc
    6190:	f007 ff82 	bl	e098 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6194:	6861      	ldr	r1, [r4, #4]
    6196:	2015      	movs	r0, #21
    6198:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    619c:	2000      	movs	r0, #0
    619e:	bd70      	pop	{r4, r5, r6, pc}
    61a0:	20000124 	.word	0x20000124
    61a4:	0000e4f9 	.word	0x0000e4f9
    61a8:	4901      	ldr	r1, [pc, #4]	; (61b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1164>)
    61aa:	68c9      	ldr	r1, [r1, #12]
    61ac:	f7fc bf28 	b.w	3000 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
    61b0:	20000114 	.word	0x20000114
    61b4:	4901      	ldr	r1, [pc, #4]	; (61bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1170>)
    61b6:	68c9      	ldr	r1, [r1, #12]
    61b8:	f7fc bf58 	b.w	306c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
    61bc:	20000114 	.word	0x20000114
    61c0:	b510      	push	{r4, lr}
    61c2:	6842      	ldr	r2, [r0, #4]
    61c4:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
    61c8:	070b      	lsls	r3, r1, #28
    61ca:	d501      	bpl.n	61d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1184>
    61cc:	2001      	movs	r0, #1
    61ce:	bd10      	pop	{r4, pc}
    61d0:	f041 0108 	orr.w	r1, r1, #8
    61d4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
    61d8:	4905      	ldr	r1, [pc, #20]	; (61f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a4>)
    61da:	6840      	ldr	r0, [r0, #4]
    61dc:	68c9      	ldr	r1, [r1, #12]
    61de:	78c9      	ldrb	r1, [r1, #3]
    61e0:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
    61e4:	4802      	ldr	r0, [pc, #8]	; (61f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a4>)
    61e6:	3010      	adds	r0, #16
    61e8:	f008 f88f 	bl	e30a <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    61ec:	2000      	movs	r0, #0
    61ee:	bd10      	pop	{r4, pc}
    61f0:	20000114 	.word	0x20000114
    61f4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    61f8:	4605      	mov	r5, r0
    61fa:	6840      	ldr	r0, [r0, #4]
    61fc:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
    6200:	f010 0f30 	tst.w	r0, #48	; 0x30
    6204:	d002      	beq.n	620c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>
    6206:	2001      	movs	r0, #1
    6208:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    620c:	4c32      	ldr	r4, [pc, #200]	; (62d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
    620e:	68e0      	ldr	r0, [r4, #12]
    6210:	f007 fe73 	bl	defa <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    6214:	b330      	cbz	r0, 6264 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>
    6216:	68e0      	ldr	r0, [r4, #12]
    6218:	f007 fe69 	bl	deee <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    621c:	4680      	mov	r8, r0
    621e:	68e0      	ldr	r0, [r4, #12]
    6220:	f007 fe69 	bl	def6 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    6224:	4607      	mov	r7, r0
    6226:	68e0      	ldr	r0, [r4, #12]
    6228:	f007 fe5f 	bl	deea <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    622c:	4606      	mov	r6, r0
    622e:	68e0      	ldr	r0, [r4, #12]
    6230:	f007 fe5f 	bl	def2 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    6234:	4601      	mov	r1, r0
    6236:	f8cd 8000 	str.w	r8, [sp]
    623a:	6868      	ldr	r0, [r5, #4]
    623c:	463b      	mov	r3, r7
    623e:	4632      	mov	r2, r6
    6240:	302c      	adds	r0, #44	; 0x2c
    6242:	f007 ffca 	bl	e1da <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    6246:	78a0      	ldrb	r0, [r4, #2]
    6248:	0781      	lsls	r1, r0, #30
    624a:	f04f 0001 	mov.w	r0, #1
    624e:	d503      	bpl.n	6258 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x120c>
    6250:	68a1      	ldr	r1, [r4, #8]
    6252:	78c9      	ldrb	r1, [r1, #3]
    6254:	2914      	cmp	r1, #20
    6256:	d00a      	beq.n	626e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1222>
    6258:	6869      	ldr	r1, [r5, #4]
    625a:	f891 109d 	ldrb.w	r1, [r1, #157]	; 0x9d
    625e:	291d      	cmp	r1, #29
    6260:	d005      	beq.n	626e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1222>
    6262:	e007      	b.n	6274 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1228>
    6264:	4628      	mov	r0, r5
    6266:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    626a:	f7ff bfa9 	b.w	61c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    626e:	6869      	ldr	r1, [r5, #4]
    6270:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    6274:	6868      	ldr	r0, [r5, #4]
    6276:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    627a:	2901      	cmp	r1, #1
    627c:	d011      	beq.n	62a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1256>
    627e:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    6282:	f88d 1004 	strb.w	r1, [sp, #4]
    6286:	9901      	ldr	r1, [sp, #4]
    6288:	9101      	str	r1, [sp, #4]
    628a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    628e:	b941      	cbnz	r1, 62a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1256>
    6290:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    6294:	f88d 1000 	strb.w	r1, [sp]
    6298:	9900      	ldr	r1, [sp, #0]
    629a:	9100      	str	r1, [sp, #0]
    629c:	f89d 1000 	ldrb.w	r1, [sp]
    62a0:	b151      	cbz	r1, 62b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x126c>
    62a2:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    62a6:	f041 0110 	orr.w	r1, r1, #16
    62aa:	6001      	str	r1, [r0, #0]
    62ac:	480a      	ldr	r0, [pc, #40]	; (62d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
    62ae:	3010      	adds	r0, #16
    62b0:	f008 f82b 	bl	e30a <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    62b4:	2000      	movs	r0, #0
    62b6:	e7a7      	b.n	6208 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11bc>
    62b8:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    62bc:	f041 0120 	orr.w	r1, r1, #32
    62c0:	6001      	str	r1, [r0, #0]
    62c2:	4805      	ldr	r0, [pc, #20]	; (62d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
    62c4:	3010      	adds	r0, #16
    62c6:	6843      	ldr	r3, [r0, #4]
    62c8:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    62cc:	8818      	ldrh	r0, [r3, #0]
    62ce:	f503 72bc 	add.w	r2, r3, #376	; 0x178
    62d2:	f7fc fdb5 	bl	2e40 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    62d6:	e7e9      	b.n	62ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1260>
    62d8:	20000114 	.word	0x20000114
    62dc:	4901      	ldr	r1, [pc, #4]	; (62e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1298>)
    62de:	68c9      	ldr	r1, [r1, #12]
    62e0:	f008 b8a2 	b.w	e428 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA>
    62e4:	20000114 	.word	0x20000114
    62e8:	b510      	push	{r4, lr}
    62ea:	4604      	mov	r4, r0
    62ec:	6840      	ldr	r0, [r0, #4]
    62ee:	2301      	movs	r3, #1
    62f0:	2100      	movs	r1, #0
    62f2:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    62f6:	3080      	adds	r0, #128	; 0x80
    62f8:	f007 fb26 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    62fc:	2800      	cmp	r0, #0
    62fe:	6860      	ldr	r0, [r4, #4]
    6300:	d00c      	beq.n	631c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d0>
    6302:	f890 00a3 	ldrb.w	r0, [r0, #163]	; 0xa3
    6306:	2800      	cmp	r0, #0
    6308:	d007      	beq.n	631a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12ce>
    630a:	480a      	ldr	r0, [pc, #40]	; (6334 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e8>)
    630c:	f007 fffd 	bl	e30a <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    6310:	6861      	ldr	r1, [r4, #4]
    6312:	2011      	movs	r0, #17
    6314:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    6318:	2000      	movs	r0, #0
    631a:	bd10      	pop	{r4, pc}
    631c:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6320:	2301      	movs	r3, #1
    6322:	2105      	movs	r1, #5
    6324:	3080      	adds	r0, #128	; 0x80
    6326:	f007 fb0f 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    632a:	b108      	cbz	r0, 6330 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e4>
    632c:	2008      	movs	r0, #8
    632e:	bd10      	pop	{r4, pc}
    6330:	2001      	movs	r0, #1
    6332:	bd10      	pop	{r4, pc}
    6334:	20000124 	.word	0x20000124
    6338:	b538      	push	{r3, r4, r5, lr}
    633a:	4604      	mov	r4, r0
    633c:	6840      	ldr	r0, [r0, #4]
    633e:	2301      	movs	r3, #1
    6340:	210b      	movs	r1, #11
    6342:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6346:	3080      	adds	r0, #128	; 0x80
    6348:	f007 fafe 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    634c:	bb60      	cbnz	r0, 63a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x135c>
    634e:	6860      	ldr	r0, [r4, #4]
    6350:	2301      	movs	r3, #1
    6352:	2100      	movs	r1, #0
    6354:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6358:	3080      	adds	r0, #128	; 0x80
    635a:	f007 faf5 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    635e:	b308      	cbz	r0, 63a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1358>
    6360:	6860      	ldr	r0, [r4, #4]
    6362:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    6366:	2825      	cmp	r0, #37	; 0x25
    6368:	d01e      	beq.n	63a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x135c>
    636a:	4d2a      	ldr	r5, [pc, #168]	; (6414 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
    636c:	68e8      	ldr	r0, [r5, #12]
    636e:	f007 fdd6 	bl	df1e <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
    6372:	b1d8      	cbz	r0, 63ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1360>
    6374:	68e8      	ldr	r0, [r5, #12]
    6376:	6862      	ldr	r2, [r4, #4]
    6378:	7941      	ldrb	r1, [r0, #5]
    637a:	f001 0107 	and.w	r1, r1, #7
    637e:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
    6382:	7900      	ldrb	r0, [r0, #4]
    6384:	f000 0207 	and.w	r2, r0, #7
    6388:	6860      	ldr	r0, [r4, #4]
    638a:	f880 2062 	strb.w	r2, [r0, #98]	; 0x62
    638e:	6860      	ldr	r0, [r4, #4]
    6390:	f890 113d 	ldrb.w	r1, [r0, #317]	; 0x13d
    6394:	f88d 1000 	strb.w	r1, [sp]
    6398:	9900      	ldr	r1, [sp, #0]
    639a:	9100      	str	r1, [sp, #0]
    639c:	f89d 1000 	ldrb.w	r1, [sp]
    63a0:	bb71      	cbnz	r1, 6400 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    63a2:	e008      	b.n	63b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x136a>
    63a4:	2001      	movs	r0, #1
    63a6:	bd38      	pop	{r3, r4, r5, pc}
    63a8:	2020      	movs	r0, #32
    63aa:	bd38      	pop	{r3, r4, r5, pc}
    63ac:	4620      	mov	r0, r4
    63ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    63b2:	f7ff bf05 	b.w	61c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    63b6:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    63ba:	2901      	cmp	r1, #1
    63bc:	d020      	beq.n	6400 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    63be:	f100 016a 	add.w	r1, r0, #106	; 0x6a
    63c2:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
    63c6:	784d      	ldrb	r5, [r1, #1]
    63c8:	4295      	cmp	r5, r2
    63ca:	d106      	bne.n	63da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138e>
    63cc:	7809      	ldrb	r1, [r1, #0]
    63ce:	4299      	cmp	r1, r3
    63d0:	d103      	bne.n	63da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138e>
    63d2:	2102      	movs	r1, #2
    63d4:	f880 113c 	strb.w	r1, [r0, #316]	; 0x13c
    63d8:	e012      	b.n	6400 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    63da:	480e      	ldr	r0, [pc, #56]	; (6414 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
    63dc:	3010      	adds	r0, #16
    63de:	6841      	ldr	r1, [r0, #4]
    63e0:	f501 70cb 	add.w	r0, r1, #406	; 0x196
    63e4:	880a      	ldrh	r2, [r1, #0]
    63e6:	f820 2b02 	strh.w	r2, [r0], #2
    63ea:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    63ee:	f800 2b01 	strb.w	r2, [r0], #1
    63f2:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    63f6:	f800 190d 	strb.w	r1, [r0], #-13
    63fa:	4907      	ldr	r1, [pc, #28]	; (6418 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13cc>)
    63fc:	f007 fe43 	bl	e086 <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>
    6400:	6861      	ldr	r1, [r4, #4]
    6402:	2022      	movs	r0, #34	; 0x22
    6404:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    6408:	4802      	ldr	r0, [pc, #8]	; (6414 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
    640a:	3010      	adds	r0, #16
    640c:	f007 ff7d 	bl	e30a <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    6410:	2000      	movs	r0, #0
    6412:	bd38      	pop	{r3, r4, r5, pc}
    6414:	20000114 	.word	0x20000114
    6418:	00007501 	.word	0x00007501
    641c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6420:	6845      	ldr	r5, [r0, #4]
    6422:	4604      	mov	r4, r0
    6424:	f895 009d 	ldrb.w	r0, [r5, #157]	; 0x9d
    6428:	2821      	cmp	r0, #33	; 0x21
    642a:	d008      	beq.n	643e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f2>
    642c:	f05f 0600 	movs.w	r6, #0
    6430:	f895 009e 	ldrb.w	r0, [r5, #158]	; 0x9e
    6434:	2823      	cmp	r0, #35	; 0x23
    6436:	d004      	beq.n	6442 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f6>
    6438:	b35e      	cbz	r6, 6492 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1446>
    643a:	359d      	adds	r5, #157	; 0x9d
    643c:	e002      	b.n	6444 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f8>
    643e:	2601      	movs	r6, #1
    6440:	e7f6      	b.n	6430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13e4>
    6442:	359e      	adds	r5, #158	; 0x9e
    6444:	f8df 8140 	ldr.w	r8, [pc, #320]	; 6588 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>
    6448:	f8d8 000c 	ldr.w	r0, [r8, #12]
    644c:	f007 fd73 	bl	df36 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>
    6450:	2700      	movs	r7, #0
    6452:	b308      	cbz	r0, 6498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x144c>
    6454:	4631      	mov	r1, r6
    6456:	f8d8 000c 	ldr.w	r0, [r8, #12]
    645a:	f7fe ffb3 	bl	53c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x378>
    645e:	b1d8      	cbz	r0, 6498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x144c>
    6460:	466a      	mov	r2, sp
    6462:	4646      	mov	r6, r8
    6464:	6860      	ldr	r0, [r4, #4]
    6466:	f8d8 100c 	ldr.w	r1, [r8, #12]
    646a:	f007 fb86 	bl	db7a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    646e:	b388      	cbz	r0, 64d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1488>
    6470:	68f0      	ldr	r0, [r6, #12]
    6472:	f007 fd5e 	bl	df32 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    6476:	6861      	ldr	r1, [r4, #4]
    6478:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    647c:	6861      	ldr	r1, [r4, #4]
    647e:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    6482:	f008 ff10 	bl	f2a6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    6486:	b3e8      	cbz	r0, 6504 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b8>
    6488:	6861      	ldr	r1, [r4, #4]
    648a:	2028      	movs	r0, #40	; 0x28
    648c:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    6490:	e06e      	b.n	6570 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1524>
    6492:	2002      	movs	r0, #2
    6494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6498:	6860      	ldr	r0, [r4, #4]
    649a:	f04f 0900 	mov.w	r9, #0
    649e:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    64a2:	2901      	cmp	r1, #1
    64a4:	d017      	beq.n	64d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x148a>
    64a6:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
    64aa:	b306      	cbz	r6, 64ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a2>
    64ac:	f8d8 000c 	ldr.w	r0, [r8, #12]
    64b0:	6861      	ldr	r1, [r4, #4]
    64b2:	2201      	movs	r2, #1
    64b4:	78c0      	ldrb	r0, [r0, #3]
    64b6:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
    64ba:	4082      	lsls	r2, r0
    64bc:	6861      	ldr	r1, [r4, #4]
    64be:	f3c2 6000 	ubfx	r0, r2, #24, #1
    64c2:	b160      	cbz	r0, 64de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1492>
    64c4:	2009      	movs	r0, #9
    64c6:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    64ca:	6860      	ldr	r0, [r4, #4]
    64cc:	f890 00d6 	ldrb.w	r0, [r0, #214]	; 0xd6
    64d0:	b9b0      	cbnz	r0, 6500 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b4>
    64d2:	e007      	b.n	64e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1498>
    64d4:	e017      	b.n	6506 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ba>
    64d6:	201e      	movs	r0, #30
    64d8:	f7ff fd58 	bl	5f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    64dc:	e7e5      	b.n	64aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x145e>
    64de:	f240 414b 	movw	r1, #1099	; 0x44b
    64e2:	e001      	b.n	64e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149c>
    64e4:	f240 4153 	movw	r1, #1107	; 0x453
    64e8:	2031      	movs	r0, #49	; 0x31
    64ea:	f7fa fa61 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    64ee:	4826      	ldr	r0, [pc, #152]	; (6588 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>)
    64f0:	702f      	strb	r7, [r5, #0]
    64f2:	3010      	adds	r0, #16
    64f4:	f007 ff11 	bl	e31a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    64f8:	4620      	mov	r0, r4
    64fa:	f7ff fe61 	bl	61c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    64fe:	4681      	mov	r9, r0
    6500:	4648      	mov	r0, r9
    6502:	e7c7      	b.n	6494 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1448>
    6504:	e013      	b.n	652e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e2>
    6506:	6860      	ldr	r0, [r4, #4]
    6508:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    650c:	2901      	cmp	r1, #1
    650e:	d009      	beq.n	6524 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14d8>
    6510:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
    6514:	6860      	ldr	r0, [r4, #4]
    6516:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    651a:	42a9      	cmp	r1, r5
    651c:	d11b      	bne.n	6556 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    651e:	f880 709e 	strb.w	r7, [r0, #158]	; 0x9e
    6522:	e018      	b.n	6556 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    6524:	2000      	movs	r0, #0
    6526:	f7ff fd31 	bl	5f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    652a:	702f      	strb	r7, [r5, #0]
    652c:	e7f2      	b.n	6514 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>
    652e:	6860      	ldr	r0, [r4, #4]
    6530:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6534:	290d      	cmp	r1, #13
    6536:	d018      	beq.n	656a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
    6538:	290b      	cmp	r1, #11
    653a:	d016      	beq.n	656a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
    653c:	290a      	cmp	r1, #10
    653e:	d014      	beq.n	656a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
    6540:	f89d 1000 	ldrb.w	r1, [sp]
    6544:	f880 12ce 	strb.w	r1, [r0, #718]	; 0x2ce
    6548:	6861      	ldr	r1, [r4, #4]
    654a:	f89d 0001 	ldrb.w	r0, [sp, #1]
    654e:	f881 02cf 	strb.w	r0, [r1, #719]	; 0x2cf
    6552:	2025      	movs	r0, #37	; 0x25
    6554:	7028      	strb	r0, [r5, #0]
    6556:	6860      	ldr	r0, [r4, #4]
    6558:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    655c:	42a9      	cmp	r1, r5
    655e:	d10e      	bne.n	657e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1532>
    6560:	4809      	ldr	r0, [pc, #36]	; (6588 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>)
    6562:	3010      	adds	r0, #16
    6564:	f007 fed9 	bl	e31a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6568:	e00b      	b.n	6582 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1536>
    656a:	212a      	movs	r1, #42	; 0x2a
    656c:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    6570:	6860      	ldr	r0, [r4, #4]
    6572:	2202      	movs	r2, #2
    6574:	4905      	ldr	r1, [pc, #20]	; (658c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1540>)
    6576:	30b4      	adds	r0, #180	; 0xb4
    6578:	f007 fd8e 	bl	e098 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    657c:	e7eb      	b.n	6556 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    657e:	f880 70d6 	strb.w	r7, [r0, #214]	; 0xd6
    6582:	2000      	movs	r0, #0
    6584:	e786      	b.n	6494 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1448>
    6586:	0000      	.short	0x0000
    6588:	20000114 	.word	0x20000114
    658c:	0000e355 	.word	0x0000e355
    6590:	b570      	push	{r4, r5, r6, lr}
    6592:	4604      	mov	r4, r0
    6594:	6840      	ldr	r0, [r0, #4]
    6596:	4d0a      	ldr	r5, [pc, #40]	; (65c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1574>)
    6598:	f810 1fec 	ldrb.w	r1, [r0, #236]!
    659c:	f041 0104 	orr.w	r1, r1, #4
    65a0:	7001      	strb	r1, [r0, #0]
    65a2:	68e8      	ldr	r0, [r5, #12]
    65a4:	f007 fcdb 	bl	df5e <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
    65a8:	4606      	mov	r6, r0
    65aa:	68e8      	ldr	r0, [r5, #12]
    65ac:	f007 fcdb 	bl	df66 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
    65b0:	4601      	mov	r1, r0
    65b2:	4622      	mov	r2, r4
    65b4:	4630      	mov	r0, r6
    65b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    65ba:	f000 b893 	b.w	66e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1698>
    65be:	0000      	.short	0x0000
    65c0:	20000114 	.word	0x20000114
    65c4:	4602      	mov	r2, r0
    65c6:	4813      	ldr	r0, [pc, #76]	; (6614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    65c8:	68c0      	ldr	r0, [r0, #12]
    65ca:	7901      	ldrb	r1, [r0, #4]
    65cc:	4811      	ldr	r0, [pc, #68]	; (6614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    65ce:	3010      	adds	r0, #16
    65d0:	6843      	ldr	r3, [r0, #4]
    65d2:	f893 009d 	ldrb.w	r0, [r3, #157]	; 0x9d
    65d6:	2821      	cmp	r0, #33	; 0x21
    65d8:	d010      	beq.n	65fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    65da:	282e      	cmp	r0, #46	; 0x2e
    65dc:	d00e      	beq.n	65fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    65de:	2828      	cmp	r0, #40	; 0x28
    65e0:	d00e      	beq.n	6600 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b4>
    65e2:	2804      	cmp	r0, #4
    65e4:	d00e      	beq.n	6604 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b8>
    65e6:	280f      	cmp	r0, #15
    65e8:	d00e      	beq.n	6608 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15bc>
    65ea:	281d      	cmp	r0, #29
    65ec:	d00e      	beq.n	660c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
    65ee:	f893 009e 	ldrb.w	r0, [r3, #158]	; 0x9e
    65f2:	2823      	cmp	r0, #35	; 0x23
    65f4:	d00c      	beq.n	6610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
    65f6:	20fe      	movs	r0, #254	; 0xfe
    65f8:	f000 b874 	b.w	66e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1698>
    65fc:	2016      	movs	r0, #22
    65fe:	e7fb      	b.n	65f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6600:	2023      	movs	r0, #35	; 0x23
    6602:	e7f9      	b.n	65f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6604:	200e      	movs	r0, #14
    6606:	e7f7      	b.n	65f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6608:	2012      	movs	r0, #18
    660a:	e7f5      	b.n	65f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    660c:	2014      	movs	r0, #20
    660e:	e7f3      	b.n	65f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6610:	2017      	movs	r0, #23
    6612:	e7f1      	b.n	65f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6614:	20000114 	.word	0x20000114
    6618:	b510      	push	{r4, lr}
    661a:	4604      	mov	r4, r0
    661c:	6840      	ldr	r0, [r0, #4]
    661e:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    6622:	2818      	cmp	r0, #24
    6624:	d001      	beq.n	662a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15de>
    6626:	2002      	movs	r0, #2
    6628:	bd10      	pop	{r4, pc}
    662a:	4804      	ldr	r0, [pc, #16]	; (663c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f0>)
    662c:	f007 fe75 	bl	e31a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6630:	6861      	ldr	r1, [r4, #4]
    6632:	201c      	movs	r0, #28
    6634:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    6638:	2000      	movs	r0, #0
    663a:	bd10      	pop	{r4, pc}
    663c:	20000124 	.word	0x20000124
    6640:	4901      	ldr	r1, [pc, #4]	; (6648 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15fc>)
    6642:	68c9      	ldr	r1, [r1, #12]
    6644:	f007 bea8 	b.w	e398 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA>
    6648:	20000114 	.word	0x20000114
    664c:	b570      	push	{r4, r5, r6, lr}
    664e:	4604      	mov	r4, r0
    6650:	481f      	ldr	r0, [pc, #124]	; (66d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1684>)
    6652:	2500      	movs	r5, #0
    6654:	68c0      	ldr	r0, [r0, #12]
    6656:	7903      	ldrb	r3, [r0, #4]
    6658:	6860      	ldr	r0, [r4, #4]
    665a:	2b16      	cmp	r3, #22
    665c:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    6660:	d013      	beq.n	668a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x163e>
    6662:	dc06      	bgt.n	6672 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1626>
    6664:	2b0e      	cmp	r3, #14
    6666:	d009      	beq.n	667c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    6668:	2b12      	cmp	r3, #18
    666a:	d007      	beq.n	667c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    666c:	2b14      	cmp	r3, #20
    666e:	d12c      	bne.n	66ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6670:	e004      	b.n	667c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    6672:	2b17      	cmp	r3, #23
    6674:	d002      	beq.n	667c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    6676:	2b23      	cmp	r3, #35	; 0x23
    6678:	d127      	bne.n	66ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    667a:	e01f      	b.n	66bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1670>
    667c:	4622      	mov	r2, r4
    667e:	2101      	movs	r1, #1
    6680:	4618      	mov	r0, r3
    6682:	f000 f9c5 	bl	6a10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c4>
    6686:	4605      	mov	r5, r0
    6688:	e01f      	b.n	66ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    668a:	2821      	cmp	r0, #33	; 0x21
    668c:	d001      	beq.n	6692 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1646>
    668e:	282e      	cmp	r0, #46	; 0x2e
    6690:	d11b      	bne.n	66ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6692:	4620      	mov	r0, r4
    6694:	f007 fe55 	bl	e342 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    6698:	6860      	ldr	r0, [r4, #4]
    669a:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    669e:	2922      	cmp	r1, #34	; 0x22
    66a0:	d013      	beq.n	66ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    66a2:	2108      	movs	r1, #8
    66a4:	30ec      	adds	r0, #236	; 0xec
    66a6:	f008 fdaa 	bl	f1fe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
    66aa:	6860      	ldr	r0, [r4, #4]
    66ac:	210b      	movs	r1, #11
    66ae:	30ec      	adds	r0, #236	; 0xec
    66b0:	f008 fda5 	bl	f1fe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
    66b4:	201a      	movs	r0, #26
    66b6:	f7ff fc69 	bl	5f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    66ba:	e006      	b.n	66ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    66bc:	2828      	cmp	r0, #40	; 0x28
    66be:	d104      	bne.n	66ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    66c0:	4804      	ldr	r0, [pc, #16]	; (66d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1688>)
    66c2:	6801      	ldr	r1, [r0, #0]
    66c4:	b109      	cbz	r1, 66ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    66c6:	4620      	mov	r0, r4
    66c8:	4788      	blx	r1
    66ca:	4628      	mov	r0, r5
    66cc:	bd70      	pop	{r4, r5, r6, pc}
    66ce:	0000      	.short	0x0000
    66d0:	20000114 	.word	0x20000114
    66d4:	20000290 	.word	0x20000290
    66d8:	4901      	ldr	r1, [pc, #4]	; (66e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1694>)
    66da:	68c9      	ldr	r1, [r1, #12]
    66dc:	f7fc bd40 	b.w	3160 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>
    66e0:	20000114 	.word	0x20000114
    66e4:	4603      	mov	r3, r0
    66e6:	2000      	movs	r0, #0
    66e8:	2b17      	cmp	r3, #23
    66ea:	d017      	beq.n	671c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    66ec:	dc0a      	bgt.n	6704 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16b8>
    66ee:	2b0e      	cmp	r3, #14
    66f0:	d014      	beq.n	671c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    66f2:	2b12      	cmp	r3, #18
    66f4:	d012      	beq.n	671c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    66f6:	2b14      	cmp	r3, #20
    66f8:	d010      	beq.n	671c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    66fa:	2b16      	cmp	r3, #22
    66fc:	d112      	bne.n	6724 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
    66fe:	4608      	mov	r0, r1
    6700:	f7ff bc4a 	b.w	5f98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf4c>
    6704:	2b23      	cmp	r3, #35	; 0x23
    6706:	d003      	beq.n	6710 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c4>
    6708:	2b24      	cmp	r3, #36	; 0x24
    670a:	d001      	beq.n	6710 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c4>
    670c:	2b25      	cmp	r3, #37	; 0x25
    670e:	d109      	bne.n	6724 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
    6710:	4a05      	ldr	r2, [pc, #20]	; (6728 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16dc>)
    6712:	6812      	ldr	r2, [r2, #0]
    6714:	2a00      	cmp	r2, #0
    6716:	d005      	beq.n	6724 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
    6718:	4618      	mov	r0, r3
    671a:	4710      	bx	r2
    671c:	2100      	movs	r1, #0
    671e:	4618      	mov	r0, r3
    6720:	f000 b976 	b.w	6a10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c4>
    6724:	4770      	bx	lr
    6726:	0000      	.short	0x0000
    6728:	20000288 	.word	0x20000288
    672c:	b510      	push	{r4, lr}
    672e:	6841      	ldr	r1, [r0, #4]
    6730:	4604      	mov	r4, r0
    6732:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    6736:	06c2      	lsls	r2, r0, #27
    6738:	d402      	bmi.n	6740 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f4>
    673a:	f240 71db 	movw	r1, #2011	; 0x7db
    673e:	e003      	b.n	6748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16fc>
    6740:	0682      	lsls	r2, r0, #26
    6742:	d504      	bpl.n	674e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1702>
    6744:	f240 71dc 	movw	r1, #2012	; 0x7dc
    6748:	2031      	movs	r0, #49	; 0x31
    674a:	f7fa f931 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    674e:	f020 0010 	bic.w	r0, r0, #16
    6752:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
    6756:	4804      	ldr	r0, [pc, #16]	; (6768 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x171c>)
    6758:	f007 fddf 	bl	e31a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    675c:	6860      	ldr	r0, [r4, #4]
    675e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6762:	2105      	movs	r1, #5
    6764:	f7fd bf1a 	b.w	459c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6768:	20000124 	.word	0x20000124
    676c:	b510      	push	{r4, lr}
    676e:	6840      	ldr	r0, [r0, #4]
    6770:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6774:	292f      	cmp	r1, #47	; 0x2f
    6776:	d006      	beq.n	6786 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x173a>
    6778:	2916      	cmp	r1, #22
    677a:	d00c      	beq.n	6796 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174a>
    677c:	f240 71a5 	movw	r1, #1957	; 0x7a5
    6780:	2031      	movs	r0, #49	; 0x31
    6782:	f7fa f915 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6786:	2100      	movs	r1, #0
    6788:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    678c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6790:	4803      	ldr	r0, [pc, #12]	; (67a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1754>)
    6792:	f007 bdc2 	b.w	e31a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6796:	211a      	movs	r1, #26
    6798:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    679c:	bd10      	pop	{r4, pc}
    679e:	0000      	.short	0x0000
    67a0:	20000124 	.word	0x20000124
    67a4:	b570      	push	{r4, r5, r6, lr}
    67a6:	4604      	mov	r4, r0
    67a8:	6840      	ldr	r0, [r0, #4]
    67aa:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    67ae:	291c      	cmp	r1, #28
    67b0:	d004      	beq.n	67bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1770>
    67b2:	f240 71b6 	movw	r1, #1974	; 0x7b6
    67b6:	2031      	movs	r0, #49	; 0x31
    67b8:	f7fa f8fa 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    67bc:	2500      	movs	r5, #0
    67be:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
    67c2:	6860      	ldr	r0, [r4, #4]
    67c4:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
    67c8:	b161      	cbz	r1, 67e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1798>
    67ca:	f880 50dc 	strb.w	r5, [r0, #220]	; 0xdc
    67ce:	6860      	ldr	r0, [r4, #4]
    67d0:	2202      	movs	r2, #2
    67d2:	8801      	ldrh	r1, [r0, #0]
    67d4:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    67d8:	6860      	ldr	r0, [r4, #4]
    67da:	490d      	ldr	r1, [pc, #52]	; (6810 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c4>)
    67dc:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
    67e0:	6860      	ldr	r0, [r4, #4]
    67e2:	e00c      	b.n	67fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b2>
    67e4:	8801      	ldrh	r1, [r0, #0]
    67e6:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    67ea:	6860      	ldr	r0, [r4, #4]
    67ec:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
    67f0:	6861      	ldr	r1, [r4, #4]
    67f2:	2001      	movs	r0, #1
    67f4:	2202      	movs	r2, #2
    67f6:	f881 0218 	strb.w	r0, [r1, #536]	; 0x218
    67fa:	4906      	ldr	r1, [pc, #24]	; (6814 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c8>)
    67fc:	6860      	ldr	r0, [r4, #4]
    67fe:	f200 200a 	addw	r0, r0, #522	; 0x20a
    6802:	f007 fc49 	bl	e098 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6806:	6860      	ldr	r0, [r4, #4]
    6808:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    680c:	bd70      	pop	{r4, r5, r6, pc}
    680e:	0000      	.short	0x0000
    6810:	0000e4e3 	.word	0x0000e4e3
    6814:	0000e4c5 	.word	0x0000e4c5
    6818:	4916      	ldr	r1, [pc, #88]	; (6874 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>)
    681a:	b510      	push	{r4, lr}
    681c:	6889      	ldr	r1, [r1, #8]
    681e:	790a      	ldrb	r2, [r1, #4]
    6820:	6841      	ldr	r1, [r0, #4]
    6822:	f891 309d 	ldrb.w	r3, [r1, #157]	; 0x9d
    6826:	2b09      	cmp	r3, #9
    6828:	d10a      	bne.n	6840 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f4>
    682a:	f891 3121 	ldrb.w	r3, [r1, #289]	; 0x121
    682e:	4293      	cmp	r3, r2
    6830:	d106      	bne.n	6840 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f4>
    6832:	2200      	movs	r2, #0
    6834:	f881 209d 	strb.w	r2, [r1, #157]	; 0x9d
    6838:	6840      	ldr	r0, [r0, #4]
    683a:	f880 20d6 	strb.w	r2, [r0, #214]	; 0xd6
    683e:	bd10      	pop	{r4, pc}
    6840:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    6844:	071c      	lsls	r4, r3, #28
    6846:	d509      	bpl.n	685c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1810>
    6848:	f023 0008 	bic.w	r0, r3, #8
    684c:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
    6850:	4808      	ldr	r0, [pc, #32]	; (6874 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>)
    6852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6856:	3010      	adds	r0, #16
    6858:	f007 bd5f 	b.w	e31a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    685c:	2aff      	cmp	r2, #255	; 0xff
    685e:	d004      	beq.n	686a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x181e>
    6860:	f240 7151 	movw	r1, #1873	; 0x751
    6864:	2031      	movs	r0, #49	; 0x31
    6866:	f7fa f8a3 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    686a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    686e:	f008 bd71 	b.w	f354 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10e>
    6872:	0000      	.short	0x0000
    6874:	20000114 	.word	0x20000114
    6878:	4808      	ldr	r0, [pc, #32]	; (689c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1850>)
    687a:	b510      	push	{r4, lr}
    687c:	6840      	ldr	r0, [r0, #4]
    687e:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
    6882:	b941      	cbnz	r1, 6896 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184a>
    6884:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6888:	2301      	movs	r3, #1
    688a:	2106      	movs	r1, #6
    688c:	3080      	adds	r0, #128	; 0x80
    688e:	f007 f85b 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6892:	2800      	cmp	r0, #0
    6894:	d000      	beq.n	6898 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184c>
    6896:	2001      	movs	r0, #1
    6898:	bd10      	pop	{r4, pc}
    689a:	0000      	.short	0x0000
    689c:	20000124 	.word	0x20000124
    68a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    68a2:	4c59      	ldr	r4, [pc, #356]	; (6a08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19bc>)
    68a4:	4606      	mov	r6, r0
    68a6:	4615      	mov	r5, r2
    68a8:	6860      	ldr	r0, [r4, #4]
    68aa:	2200      	movs	r2, #0
    68ac:	b111      	cbz	r1, 68b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1868>
    68ae:	f8a0 2236 	strh.w	r2, [r0, #566]	; 0x236
    68b2:	e006      	b.n	68c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1876>
    68b4:	f8b0 1236 	ldrh.w	r1, [r0, #566]	; 0x236
    68b8:	f8b0 2226 	ldrh.w	r2, [r0, #550]	; 0x226
    68bc:	4411      	add	r1, r2
    68be:	f8a0 1236 	strh.w	r1, [r0, #566]	; 0x236
    68c2:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    68c6:	f88d 1000 	strb.w	r1, [sp]
    68ca:	9900      	ldr	r1, [sp, #0]
    68cc:	9100      	str	r1, [sp, #0]
    68ce:	f89d 1000 	ldrb.w	r1, [sp]
    68d2:	b939      	cbnz	r1, 68e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1898>
    68d4:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    68d8:	2301      	movs	r3, #1
    68da:	4619      	mov	r1, r3
    68dc:	3080      	adds	r0, #128	; 0x80
    68de:	f007 f833 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    68e2:	b130      	cbz	r0, 68f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a6>
    68e4:	6860      	ldr	r0, [r4, #4]
    68e6:	f830 1fd0 	ldrh.w	r1, [r0, #208]!
    68ea:	f8b0 2156 	ldrh.w	r2, [r0, #342]	; 0x156
    68ee:	4411      	add	r1, r2
    68f0:	8001      	strh	r1, [r0, #0]
    68f2:	6860      	ldr	r0, [r4, #4]
    68f4:	f890 20d6 	ldrb.w	r2, [r0, #214]	; 0xd6
    68f8:	b132      	cbz	r2, 6908 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18bc>
    68fa:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
    68fe:	f8b0 3226 	ldrh.w	r3, [r0, #550]	; 0x226
    6902:	4419      	add	r1, r3
    6904:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    6908:	f990 30da 	ldrsb.w	r3, [r0, #218]	; 0xda
    690c:	2b00      	cmp	r3, #0
    690e:	dd06      	ble.n	691e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18d2>
    6910:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    6914:	f8b0 7226 	ldrh.w	r7, [r0, #550]	; 0x226
    6918:	4439      	add	r1, r7
    691a:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
    691e:	f890 10bd 	ldrb.w	r1, [r0, #189]	; 0xbd
    6922:	bb09      	cbnz	r1, 6968 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191c>
    6924:	b9be      	cbnz	r6, 6956 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190a>
    6926:	4938      	ldr	r1, [pc, #224]	; (6a08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19bc>)
    6928:	3910      	subs	r1, #16
    692a:	7809      	ldrb	r1, [r1, #0]
    692c:	2902      	cmp	r1, #2
    692e:	d006      	beq.n	693e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f2>
    6930:	2901      	cmp	r1, #1
    6932:	d00a      	beq.n	694a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18fe>
    6934:	b1f5      	cbz	r5, 6974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1928>
    6936:	06e9      	lsls	r1, r5, #27
    6938:	d50b      	bpl.n	6952 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1906>
    693a:	211e      	movs	r1, #30
    693c:	e042      	b.n	69c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    693e:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    6942:	2906      	cmp	r1, #6
    6944:	d03e      	beq.n	69c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6946:	2116      	movs	r1, #22
    6948:	e03c      	b.n	69c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    694a:	f890 10a0 	ldrb.w	r1, [r0, #160]	; 0xa0
    694e:	b959      	cbnz	r1, 6968 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191c>
    6950:	e054      	b.n	69fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    6952:	0729      	lsls	r1, r5, #28
    6954:	d501      	bpl.n	695a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190e>
    6956:	213d      	movs	r1, #61	; 0x3d
    6958:	e034      	b.n	69c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    695a:	06a9      	lsls	r1, r5, #26
    695c:	d501      	bpl.n	6962 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1916>
    695e:	2123      	movs	r1, #35	; 0x23
    6960:	e030      	b.n	69c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6962:	07a9      	lsls	r1, r5, #30
    6964:	d001      	beq.n	696a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191e>
    6966:	212a      	movs	r1, #42	; 0x2a
    6968:	e02c      	b.n	69c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    696a:	f640 51a3 	movw	r1, #3491	; 0xda3
    696e:	2031      	movs	r0, #49	; 0x31
    6970:	f7fa f81e 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6974:	b12a      	cbz	r2, 6982 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1936>
    6976:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
    697a:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
    697e:	4291      	cmp	r1, r2
    6980:	d216      	bcs.n	69b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1964>
    6982:	2b00      	cmp	r3, #0
    6984:	dd05      	ble.n	6992 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1946>
    6986:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    698a:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
    698e:	4291      	cmp	r1, r2
    6990:	d20e      	bcs.n	69b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1964>
    6992:	f8b0 20d0 	ldrh.w	r2, [r0, #208]	; 0xd0
    6996:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
    699a:	428a      	cmp	r2, r1
    699c:	d30a      	bcc.n	69b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1968>
    699e:	f890 2130 	ldrb.w	r2, [r0, #304]	; 0x130
    69a2:	f88d 2000 	strb.w	r2, [sp]
    69a6:	9a00      	ldr	r2, [sp, #0]
    69a8:	9200      	str	r2, [sp, #0]
    69aa:	f89d 2000 	ldrb.w	r2, [sp]
    69ae:	b10a      	cbz	r2, 69b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1968>
    69b0:	2122      	movs	r1, #34	; 0x22
    69b2:	e007      	b.n	69c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    69b4:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
    69b8:	b172      	cbz	r2, 69d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>
    69ba:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
    69be:	428a      	cmp	r2, r1
    69c0:	d31c      	bcc.n	69fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    69c2:	2108      	movs	r1, #8
    69c4:	f890 20bc 	ldrb.w	r2, [r0, #188]	; 0xbc
    69c8:	f88d 2000 	strb.w	r2, [sp]
    69cc:	9a00      	ldr	r2, [sp, #0]
    69ce:	9200      	str	r2, [sp, #0]
    69d0:	f89d 2000 	ldrb.w	r2, [sp]
    69d4:	b96a      	cbnz	r2, 69f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a6>
    69d6:	e005      	b.n	69e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1998>
    69d8:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
    69dc:	2906      	cmp	r1, #6
    69de:	d30d      	bcc.n	69fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    69e0:	213e      	movs	r1, #62	; 0x3e
    69e2:	e7ef      	b.n	69c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    69e4:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    69e8:	2202      	movs	r2, #2
    69ea:	4908      	ldr	r1, [pc, #32]	; (6a0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c0>)
    69ec:	30b4      	adds	r0, #180	; 0xb4
    69ee:	f007 fb53 	bl	e098 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    69f2:	6860      	ldr	r0, [r4, #4]
    69f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    69f8:	f008 bc25 	b.w	f246 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    69fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6a00:	2100      	movs	r1, #0
    6a02:	f7fd bdcb 	b.w	459c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6a06:	0000      	.short	0x0000
    6a08:	20000124 	.word	0x20000124
    6a0c:	0000e355 	.word	0x0000e355
    6a10:	b570      	push	{r4, r5, r6, lr}
    6a12:	4614      	mov	r4, r2
    6a14:	460e      	mov	r6, r1
    6a16:	6861      	ldr	r1, [r4, #4]
    6a18:	4602      	mov	r2, r0
    6a1a:	2500      	movs	r5, #0
    6a1c:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
    6a20:	2a0e      	cmp	r2, #14
    6a22:	d00a      	beq.n	6a3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ee>
    6a24:	2a12      	cmp	r2, #18
    6a26:	d011      	beq.n	6a4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a00>
    6a28:	2a14      	cmp	r2, #20
    6a2a:	d016      	beq.n	6a5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0e>
    6a2c:	2a17      	cmp	r2, #23
    6a2e:	d023      	beq.n	6a78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a2c>
    6a30:	f240 31dd 	movw	r1, #989	; 0x3dd
    6a34:	2031      	movs	r0, #49	; 0x31
    6a36:	f7f9 ffbb 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a3a:	2804      	cmp	r0, #4
    6a3c:	d131      	bne.n	6aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6a3e:	4620      	mov	r0, r4
    6a40:	f007 fc7f 	bl	e342 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    6a44:	4620      	mov	r0, r4
    6a46:	f7fc fb6d 	bl	3124 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>
    6a4a:	e02a      	b.n	6aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6a4c:	280f      	cmp	r0, #15
    6a4e:	d128      	bne.n	6aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6a50:	4620      	mov	r0, r4
    6a52:	f007 fdd3 	bl	e5fc <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ>
    6a56:	4605      	mov	r5, r0
    6a58:	e023      	b.n	6aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6a5a:	281d      	cmp	r0, #29
    6a5c:	d121      	bne.n	6aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6a5e:	4620      	mov	r0, r4
    6a60:	f007 fc6f 	bl	e342 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    6a64:	b126      	cbz	r6, 6a70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a24>
    6a66:	6860      	ldr	r0, [r4, #4]
    6a68:	2105      	movs	r1, #5
    6a6a:	30ec      	adds	r0, #236	; 0xec
    6a6c:	f008 fbc7 	bl	f1fe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
    6a70:	480d      	ldr	r0, [pc, #52]	; (6aa8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a5c>)
    6a72:	f007 fd17 	bl	e4a4 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    6a76:	e014      	b.n	6aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6a78:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    6a7c:	2823      	cmp	r0, #35	; 0x23
    6a7e:	d110      	bne.n	6aa2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6a80:	2600      	movs	r6, #0
    6a82:	f881 609e 	strb.w	r6, [r1, #158]	; 0x9e
    6a86:	4808      	ldr	r0, [pc, #32]	; (6aa8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a5c>)
    6a88:	f007 fc47 	bl	e31a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6a8c:	6860      	ldr	r0, [r4, #4]
    6a8e:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    6a92:	2801      	cmp	r0, #1
    6a94:	d102      	bne.n	6a9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a50>
    6a96:	2000      	movs	r0, #0
    6a98:	f7ff fa78 	bl	5f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    6a9c:	6860      	ldr	r0, [r4, #4]
    6a9e:	f880 613c 	strb.w	r6, [r0, #316]	; 0x13c
    6aa2:	4628      	mov	r0, r5
    6aa4:	bd70      	pop	{r4, r5, r6, pc}
    6aa6:	0000      	.short	0x0000
    6aa8:	20000124 	.word	0x20000124
    6aac:	b570      	push	{r4, r5, r6, lr}
    6aae:	4d2e      	ldr	r5, [pc, #184]	; (6b68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b1c>)
    6ab0:	6868      	ldr	r0, [r5, #4]
    6ab2:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    6ab6:	b151      	cbz	r1, 6ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a82>
    6ab8:	2901      	cmp	r1, #1
    6aba:	d008      	beq.n	6ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a82>
    6abc:	2902      	cmp	r1, #2
    6abe:	d009      	beq.n	6ad4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a88>
    6ac0:	2903      	cmp	r1, #3
    6ac2:	d007      	beq.n	6ad4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a88>
    6ac4:	f640 4118 	movw	r1, #3096	; 0xc18
    6ac8:	2031      	movs	r0, #49	; 0x31
    6aca:	f7f9 ff71 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ace:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
    6ad2:	e037      	b.n	6b44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af8>
    6ad4:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    6ad8:	2907      	cmp	r1, #7
    6ada:	d036      	beq.n	6b4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1afe>
    6adc:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
    6ae0:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
    6ae4:	2400      	movs	r4, #0
    6ae6:	1c93      	adds	r3, r2, #2
    6ae8:	4299      	cmp	r1, r3
    6aea:	d306      	bcc.n	6afa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aae>
    6aec:	1a89      	subs	r1, r1, r2
    6aee:	1e89      	subs	r1, r1, #2
    6af0:	040c      	lsls	r4, r1, #16
    6af2:	0c24      	lsrs	r4, r4, #16
    6af4:	d001      	beq.n	6afa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aae>
    6af6:	1e64      	subs	r4, r4, #1
    6af8:	b2a4      	uxth	r4, r4
    6afa:	f890 10ca 	ldrb.w	r1, [r0, #202]	; 0xca
    6afe:	b139      	cbz	r1, 6b10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ac4>
    6b00:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    6b04:	2301      	movs	r3, #1
    6b06:	2109      	movs	r1, #9
    6b08:	3080      	adds	r0, #128	; 0x80
    6b0a:	f006 ff1d 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6b0e:	b340      	cbz	r0, 6b62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b16>
    6b10:	f7ff feb2 	bl	6878 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    6b14:	b178      	cbz	r0, 6b36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aea>
    6b16:	686a      	ldr	r2, [r5, #4]
    6b18:	2000      	movs	r0, #0
    6b1a:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
    6b1e:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
    6b22:	1c93      	adds	r3, r2, #2
    6b24:	4299      	cmp	r1, r3
    6b26:	d303      	bcc.n	6b30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae4>
    6b28:	1a88      	subs	r0, r1, r2
    6b2a:	1e80      	subs	r0, r0, #2
    6b2c:	d000      	beq.n	6b30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae4>
    6b2e:	1e40      	subs	r0, r0, #1
    6b30:	42a0      	cmp	r0, r4
    6b32:	d200      	bcs.n	6b36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aea>
    6b34:	b284      	uxth	r4, r0
    6b36:	b10c      	cbz	r4, 6b3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af0>
    6b38:	1e64      	subs	r4, r4, #1
    6b3a:	b2a4      	uxth	r4, r4
    6b3c:	6868      	ldr	r0, [r5, #4]
    6b3e:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
    6b42:	4421      	add	r1, r4
    6b44:	f8a0 1220 	strh.w	r1, [r0, #544]	; 0x220
    6b48:	bd70      	pop	{r4, r5, r6, pc}
    6b4a:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
    6b4e:	2903      	cmp	r1, #3
    6b50:	d3bd      	bcc.n	6ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a82>
    6b52:	f830 1f94 	ldrh.w	r1, [r0, #148]!
    6b56:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    6b58:	4411      	add	r1, r2
    6b5a:	1c49      	adds	r1, r1, #1
    6b5c:	f8a0 118c 	strh.w	r1, [r0, #396]	; 0x18c
    6b60:	bd70      	pop	{r4, r5, r6, pc}
    6b62:	2400      	movs	r4, #0
    6b64:	e7ea      	b.n	6b3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af0>
    6b66:	0000      	.short	0x0000
    6b68:	20000124 	.word	0x20000124

00006b6c <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    6b6c:	b570      	push	{r4, r5, r6, lr}
    6b6e:	6844      	ldr	r4, [r0, #4]
    6b70:	220d      	movs	r2, #13
    6b72:	f504 7598 	add.w	r5, r4, #304	; 0x130
    6b76:	2100      	movs	r1, #0
    6b78:	f104 006f 	add.w	r0, r4, #111	; 0x6f
    6b7c:	f009 ff19 	bl	109b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6b80:	f44f 70a3 	mov.w	r0, #326	; 0x146
    6b84:	2100      	movs	r1, #0
    6b86:	f8a4 1144 	strh.w	r1, [r4, #324]	; 0x144
    6b8a:	5501      	strb	r1, [r0, r4]
    6b8c:	f8a5 1017 	strh.w	r1, [r5, #23]
    6b90:	7669      	strb	r1, [r5, #25]
    6b92:	4608      	mov	r0, r1
    6b94:	f05f 017f 	movs.w	r1, #127	; 0x7f
    6b98:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    6b9c:	1c40      	adds	r0, r0, #1
    6b9e:	b2c0      	uxtb	r0, r0
    6ba0:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
    6ba4:	2802      	cmp	r0, #2
    6ba6:	d3f7      	bcc.n	6b98 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x2c>
    6ba8:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    6bac:	4620      	mov	r0, r4
    6bae:	f008 fc91 	bl	f4d4 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    6bb2:	2000      	movs	r0, #0
    6bb4:	21ff      	movs	r1, #255	; 0xff
    6bb6:	1822      	adds	r2, r4, r0
    6bb8:	1c40      	adds	r0, r0, #1
    6bba:	b2c0      	uxtb	r0, r0
    6bbc:	f882 1077 	strb.w	r1, [r2, #119]	; 0x77
    6bc0:	2802      	cmp	r0, #2
    6bc2:	d3f8      	bcc.n	6bb6 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x4a>
    6bc4:	bd70      	pop	{r4, r5, r6, pc}
	...

00006bc8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    6bc8:	4903      	ldr	r1, [pc, #12]	; (6bd8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    6bca:	884a      	ldrh	r2, [r1, #2]
    6bcc:	8002      	strh	r2, [r0, #0]
    6bce:	7809      	ldrb	r1, [r1, #0]
    6bd0:	7081      	strb	r1, [r0, #2]
    6bd2:	2000      	movs	r0, #0
    6bd4:	4770      	bx	lr
    6bd6:	0000      	.short	0x0000
    6bd8:	20001198 	.word	0x20001198

00006bdc <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    6bdc:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    6bde:	460c      	mov	r4, r1
    6be0:	4605      	mov	r5, r0
    6be2:	8800      	ldrh	r0, [r0, #0]
    6be4:	4669      	mov	r1, sp
    6be6:	f006 fe98 	bl	d91a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6bea:	2200      	movs	r2, #0
    6bec:	b128      	cbz	r0, 6bfa <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    6bee:	f8c4 2002 	str.w	r2, [r4, #2]
    6bf2:	71a2      	strb	r2, [r4, #6]
    6bf4:	8022      	strh	r2, [r4, #0]
    6bf6:	2002      	movs	r0, #2
    6bf8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    6bfa:	9901      	ldr	r1, [sp, #4]
    6bfc:	f111 0180 	adds.w	r1, r1, #128	; 0x80
    6c00:	f881 2074 	strb.w	r2, [r1, #116]	; 0x74
    6c04:	f8d1 0026 	ldr.w	r0, [r1, #38]	; 0x26
    6c08:	f8c4 0002 	str.w	r0, [r4, #2]
    6c0c:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
    6c10:	71a0      	strb	r0, [r4, #6]
    6c12:	8828      	ldrh	r0, [r5, #0]
    6c14:	8020      	strh	r0, [r4, #0]
    6c16:	f891 0074 	ldrb.w	r0, [r1, #116]	; 0x74
    6c1a:	f88d 0008 	strb.w	r0, [sp, #8]
    6c1e:	9802      	ldr	r0, [sp, #8]
    6c20:	9002      	str	r0, [sp, #8]
    6c22:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6c26:	2800      	cmp	r0, #0
    6c28:	d1ea      	bne.n	6c00 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    6c2a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00006c2c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    6c2c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    6c2e:	460d      	mov	r5, r1
    6c30:	4606      	mov	r6, r0
    6c32:	8800      	ldrh	r0, [r0, #0]
    6c34:	4669      	mov	r1, sp
    6c36:	f006 fe70 	bl	d91a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6c3a:	2800      	cmp	r0, #0
    6c3c:	d11a      	bne.n	6c74 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    6c3e:	f8dd 4004 	ldr.w	r4, [sp, #4]
    6c42:	2700      	movs	r7, #0
    6c44:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    6c48:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    6c4c:	f009 f9bf 	bl	ffce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    6c50:	70a8      	strb	r0, [r5, #2]
    6c52:	7860      	ldrb	r0, [r4, #1]
    6c54:	f009 f9bb 	bl	ffce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    6c58:	70e8      	strb	r0, [r5, #3]
    6c5a:	78a0      	ldrb	r0, [r4, #2]
    6c5c:	f88d 0008 	strb.w	r0, [sp, #8]
    6c60:	9802      	ldr	r0, [sp, #8]
    6c62:	9002      	str	r0, [sp, #8]
    6c64:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6c68:	3c6a      	subs	r4, #106	; 0x6a
    6c6a:	2800      	cmp	r0, #0
    6c6c:	d1ea      	bne.n	6c44 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    6c6e:	8830      	ldrh	r0, [r6, #0]
    6c70:	8028      	strh	r0, [r5, #0]
    6c72:	2000      	movs	r0, #0
    6c74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00006c78 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    6c78:	4903      	ldr	r1, [pc, #12]	; (6c88 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    6c7a:	888a      	ldrh	r2, [r1, #4]
    6c7c:	8002      	strh	r2, [r0, #0]
    6c7e:	88c9      	ldrh	r1, [r1, #6]
    6c80:	8041      	strh	r1, [r0, #2]
    6c82:	2000      	movs	r0, #0
    6c84:	4770      	bx	lr
    6c86:	0000      	.short	0x0000
    6c88:	2000029c 	.word	0x2000029c

00006c8c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    6c8c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    6c8e:	2400      	movs	r4, #0
    6c90:	a902      	add	r1, sp, #8
    6c92:	f88d 4004 	strb.w	r4, [sp, #4]
    6c96:	f88d 4008 	strb.w	r4, [sp, #8]
    6c9a:	9100      	str	r1, [sp, #0]
    6c9c:	7882      	ldrb	r2, [r0, #2]
    6c9e:	7841      	ldrb	r1, [r0, #1]
    6ca0:	7800      	ldrb	r0, [r0, #0]
    6ca2:	ab01      	add	r3, sp, #4
    6ca4:	f009 fb0e 	bl	102c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x324>
    6ca8:	2800      	cmp	r0, #0
    6caa:	d112      	bne.n	6cd2 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    6cac:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6cb0:	f009 fa41 	bl	10136 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    6cb4:	b170      	cbz	r0, 6cd4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    6cb6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6cba:	f009 fa3c 	bl	10136 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    6cbe:	b148      	cbz	r0, 6cd4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    6cc0:	4805      	ldr	r0, [pc, #20]	; (6cd8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    6cc2:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6cc6:	7381      	strb	r1, [r0, #14]
    6cc8:	f89d 1008 	ldrb.w	r1, [sp, #8]
    6ccc:	73c1      	strb	r1, [r0, #15]
    6cce:	8204      	strh	r4, [r0, #16]
    6cd0:	2000      	movs	r0, #0
    6cd2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    6cd4:	2011      	movs	r0, #17
    6cd6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    6cd8:	20001198 	.word	0x20001198

00006cdc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    6cdc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    6ce0:	460f      	mov	r7, r1
    6ce2:	4605      	mov	r5, r0
    6ce4:	7806      	ldrb	r6, [r0, #0]
    6ce6:	f009 f9d9 	bl	1009c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xfc>
    6cea:	2800      	cmp	r0, #0
    6cec:	d10e      	bne.n	6d0c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    6cee:	4628      	mov	r0, r5
    6cf0:	f009 f9ae 	bl	10050 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb0>
    6cf4:	2800      	cmp	r0, #0
    6cf6:	d109      	bne.n	6d0c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    6cf8:	2101      	movs	r1, #1
    6cfa:	4630      	mov	r0, r6
    6cfc:	f7fa f986 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6d00:	0004      	movs	r4, r0
    6d02:	d005      	beq.n	6d10 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x34>
    6d04:	f007 ffa0 	bl	ec48 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    6d08:	b170      	cbz	r0, 6d28 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x4c>
    6d0a:	200c      	movs	r0, #12
    6d0c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    6d10:	2101      	movs	r1, #1
    6d12:	4630      	mov	r0, r6
    6d14:	f7fa f942 	bl	f9c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    6d18:	0004      	movs	r4, r0
    6d1a:	d013      	beq.n	6d44 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x68>
    6d1c:	4817      	ldr	r0, [pc, #92]	; (6d7c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa0>)
    6d1e:	f990 1000 	ldrsb.w	r1, [r0]
    6d22:	4620      	mov	r0, r4
    6d24:	f007 fd65 	bl	e7f2 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    6d28:	4620      	mov	r0, r4
    6d2a:	f007 fdcd 	bl	e8c8 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    6d2e:	7038      	strb	r0, [r7, #0]
    6d30:	74e8      	strb	r0, [r5, #19]
    6d32:	4629      	mov	r1, r5
    6d34:	4620      	mov	r0, r4
    6d36:	f7fc fc57 	bl	35e8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    6d3a:	4606      	mov	r6, r0
    6d3c:	7e68      	ldrb	r0, [r5, #25]
    6d3e:	b1d0      	cbz	r0, 6d76 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9a>
    6d40:	b12e      	cbz	r6, 6d4e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x72>
    6d42:	e018      	b.n	6d76 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9a>
    6d44:	f241 512e 	movw	r1, #5422	; 0x152e
    6d48:	2039      	movs	r0, #57	; 0x39
    6d4a:	f7f9 fe31 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d4e:	2200      	movs	r2, #0
    6d50:	4668      	mov	r0, sp
    6d52:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6d54:	f006 fc15 	bl	d582 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    6d58:	2200      	movs	r2, #0
    6d5a:	2101      	movs	r1, #1
    6d5c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6d5e:	f006 fc8a 	bl	d676 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    6d62:	2204      	movs	r2, #4
    6d64:	4668      	mov	r0, sp
    6d66:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6d68:	f006 fc0b 	bl	d582 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    6d6c:	2200      	movs	r2, #0
    6d6e:	4611      	mov	r1, r2
    6d70:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6d72:	f006 fc80 	bl	d676 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    6d76:	4630      	mov	r0, r6
    6d78:	e7c8      	b.n	6d0c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    6d7a:	0000      	.short	0x0000
    6d7c:	20000294 	.word	0x20000294

00006d80 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    6d80:	7801      	ldrb	r1, [r0, #0]
    6d82:	b171      	cbz	r1, 6da2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6d84:	7841      	ldrb	r1, [r0, #1]
    6d86:	b161      	cbz	r1, 6da2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6d88:	8841      	ldrh	r1, [r0, #2]
    6d8a:	291b      	cmp	r1, #27
    6d8c:	d309      	bcc.n	6da2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6d8e:	8881      	ldrh	r1, [r0, #4]
    6d90:	291b      	cmp	r1, #27
    6d92:	d306      	bcc.n	6da2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6d94:	4904      	ldr	r1, [pc, #16]	; (6da8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    6d96:	6802      	ldr	r2, [r0, #0]
    6d98:	600a      	str	r2, [r1, #0]
    6d9a:	8880      	ldrh	r0, [r0, #4]
    6d9c:	8088      	strh	r0, [r1, #4]
    6d9e:	2000      	movs	r0, #0
    6da0:	4770      	bx	lr
    6da2:	2012      	movs	r0, #18
    6da4:	4770      	bx	lr
    6da6:	0000      	.short	0x0000
    6da8:	20001198 	.word	0x20001198

00006dac <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    6dac:	6800      	ldr	r0, [r0, #0]
    6dae:	f240 41e2 	movw	r1, #1250	; 0x4e2
    6db2:	4288      	cmp	r0, r1
    6db4:	d303      	bcc.n	6dbe <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    6db6:	4903      	ldr	r1, [pc, #12]	; (6dc4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    6db8:	6088      	str	r0, [r1, #8]
    6dba:	2000      	movs	r0, #0
    6dbc:	4770      	bx	lr
    6dbe:	2012      	movs	r0, #18
    6dc0:	4770      	bx	lr
    6dc2:	0000      	.short	0x0000
    6dc4:	20001198 	.word	0x20001198

00006dc8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    6dc8:	4a03      	ldr	r2, [pc, #12]	; (6dd8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    6dca:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
    6dce:	6001      	str	r1, [r0, #0]
    6dd0:	6042      	str	r2, [r0, #4]
    6dd2:	2000      	movs	r0, #0
    6dd4:	4770      	bx	lr
    6dd6:	0000      	.short	0x0000
    6dd8:	00007324 	.word	0x00007324

00006ddc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    6ddc:	b50e      	push	{r1, r2, r3, lr}
    6dde:	8800      	ldrh	r0, [r0, #0]
    6de0:	4669      	mov	r1, sp
    6de2:	f006 fd9a 	bl	d91a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6de6:	b960      	cbnz	r0, 6e02 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    6de8:	9801      	ldr	r0, [sp, #4]
    6dea:	f009 fa20 	bl	1022e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    6dee:	b140      	cbz	r0, 6e02 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    6df0:	9801      	ldr	r0, [sp, #4]
    6df2:	4601      	mov	r1, r0
    6df4:	f890 2142 	ldrb.w	r2, [r0, #322]	; 0x142
    6df8:	3080      	adds	r0, #128	; 0x80
    6dfa:	f501 71a1 	add.w	r1, r1, #322	; 0x142
    6dfe:	b962      	cbnz	r2, 6e1a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
    6e00:	e001      	b.n	6e06 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2a>
    6e02:	2002      	movs	r0, #2
    6e04:	bd0e      	pop	{r1, r2, r3, pc}
    6e06:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
    6e0a:	f88d 2008 	strb.w	r2, [sp, #8]
    6e0e:	9a02      	ldr	r2, [sp, #8]
    6e10:	9202      	str	r2, [sp, #8]
    6e12:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6e16:	2201      	movs	r2, #1
    6e18:	b10b      	cbz	r3, 6e1e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
    6e1a:	203a      	movs	r0, #58	; 0x3a
    6e1c:	bd0e      	pop	{r1, r2, r3, pc}
    6e1e:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
    6e22:	079b      	lsls	r3, r3, #30
    6e24:	d006      	beq.n	6e34 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>
    6e26:	2202      	movs	r2, #2
    6e28:	4905      	ldr	r1, [pc, #20]	; (6e40 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x64>)
    6e2a:	305e      	adds	r0, #94	; 0x5e
    6e2c:	f007 f948 	bl	e0c0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    6e30:	2000      	movs	r0, #0
    6e32:	bd0e      	pop	{r1, r2, r3, pc}
    6e34:	700a      	strb	r2, [r1, #0]
    6e36:	4668      	mov	r0, sp
    6e38:	f007 f902 	bl	e040 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    6e3c:	e7f8      	b.n	6e30 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x54>
    6e3e:	0000      	.short	0x0000
    6e40:	0000e635 	.word	0x0000e635

00006e44 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ>:
    6e44:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    6e48:	4613      	mov	r3, r2
    6e4a:	4a33      	ldr	r2, [pc, #204]	; (6f18 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xd4>)
    6e4c:	460f      	mov	r7, r1
    6e4e:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
    6e52:	8814      	ldrh	r4, [r2, #0]
    6e54:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
    6e58:	428c      	cmp	r4, r1
    6e5a:	d200      	bcs.n	6e5e <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x1a>
    6e5c:	4621      	mov	r1, r4
    6e5e:	4688      	mov	r8, r1
    6e60:	8891      	ldrh	r1, [r2, #4]
    6e62:	42b1      	cmp	r1, r6
    6e64:	d200      	bcs.n	6e68 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x24>
    6e66:	460e      	mov	r6, r1
    6e68:	8851      	ldrh	r1, [r2, #2]
    6e6a:	f640 0448 	movw	r4, #2120	; 0x848
    6e6e:	42a1      	cmp	r1, r4
    6e70:	d300      	bcc.n	6e74 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x30>
    6e72:	4621      	mov	r1, r4
    6e74:	88d5      	ldrh	r5, [r2, #6]
    6e76:	42a5      	cmp	r5, r4
    6e78:	d300      	bcc.n	6e7c <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x38>
    6e7a:	4625      	mov	r5, r4
    6e7c:	42a1      	cmp	r1, r4
    6e7e:	d200      	bcs.n	6e82 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x3e>
    6e80:	460c      	mov	r4, r1
    6e82:	f44f 72a4 	mov.w	r2, #328	; 0x148
    6e86:	2e1b      	cmp	r6, #27
    6e88:	d001      	beq.n	6e8e <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x4a>
    6e8a:	4295      	cmp	r5, r2
    6e8c:	d104      	bne.n	6e98 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x54>
    6e8e:	f1b8 0f1b 	cmp.w	r8, #27
    6e92:	d03e      	beq.n	6f12 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    6e94:	4294      	cmp	r4, r2
    6e96:	d03c      	beq.n	6f12 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    6e98:	466a      	mov	r2, sp
    6e9a:	4619      	mov	r1, r3
    6e9c:	f009 f96e 	bl	1017c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    6ea0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    6ea4:	4641      	mov	r1, r8
    6ea6:	4540      	cmp	r0, r8
    6ea8:	d900      	bls.n	6eac <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x68>
    6eaa:	4608      	mov	r0, r1
    6eac:	80f8      	strh	r0, [r7, #6]
    6eae:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    6eb2:	42a1      	cmp	r1, r4
    6eb4:	d800      	bhi.n	6eb8 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x74>
    6eb6:	460c      	mov	r4, r1
    6eb8:	813c      	strh	r4, [r7, #8]
    6eba:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    6ebe:	42b1      	cmp	r1, r6
    6ec0:	d800      	bhi.n	6ec4 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x80>
    6ec2:	460e      	mov	r6, r1
    6ec4:	807e      	strh	r6, [r7, #2]
    6ec6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6eca:	42a9      	cmp	r1, r5
    6ecc:	d800      	bhi.n	6ed0 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x8c>
    6ece:	460d      	mov	r5, r1
    6ed0:	80bd      	strh	r5, [r7, #4]
    6ed2:	21ff      	movs	r1, #255	; 0xff
    6ed4:	7039      	strb	r1, [r7, #0]
    6ed6:	381b      	subs	r0, #27
    6ed8:	28e0      	cmp	r0, #224	; 0xe0
    6eda:	d902      	bls.n	6ee2 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x9e>
    6edc:	f44f 61b6 	mov.w	r1, #1456	; 0x5b0
    6ee0:	e014      	b.n	6f0c <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    6ee2:	3e1b      	subs	r6, #27
    6ee4:	2ee0      	cmp	r6, #224	; 0xe0
    6ee6:	d902      	bls.n	6eee <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xaa>
    6ee8:	f240 51b2 	movw	r1, #1458	; 0x5b2
    6eec:	e00e      	b.n	6f0c <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    6eee:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    6ef2:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    6ef6:	4284      	cmp	r4, r0
    6ef8:	d902      	bls.n	6f00 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xbc>
    6efa:	f240 51b4 	movw	r1, #1460	; 0x5b4
    6efe:	e005      	b.n	6f0c <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    6f00:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    6f04:	4285      	cmp	r5, r0
    6f06:	d904      	bls.n	6f12 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    6f08:	f240 51b6 	movw	r1, #1462	; 0x5b6
    6f0c:	2039      	movs	r0, #57	; 0x39
    6f0e:	f7f9 fd4f 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f12:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    6f16:	0000      	.short	0x0000
    6f18:	2000029c 	.word	0x2000029c

00006f1c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A>:
    6f1c:	b570      	push	{r4, r5, r6, lr}
    6f1e:	b086      	sub	sp, #24
    6f20:	4604      	mov	r4, r0
    6f22:	f000 fa9d 	bl	7460 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6f26:	0940      	lsrs	r0, r0, #5
    6f28:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    6f2c:	4e2d      	ldr	r6, [pc, #180]	; (6fe4 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc8>)
    6f2e:	07c0      	lsls	r0, r0, #31
    6f30:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    6f34:	d002      	beq.n	6f3c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x20>
    6f36:	8871      	ldrh	r1, [r6, #2]
    6f38:	88b0      	ldrh	r0, [r6, #4]
    6f3a:	e001      	b.n	6f40 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x24>
    6f3c:	211b      	movs	r1, #27
    6f3e:	4608      	mov	r0, r1
    6f40:	84e9      	strh	r1, [r5, #38]	; 0x26
    6f42:	8528      	strh	r0, [r5, #40]	; 0x28
    6f44:	f000 fa8c 	bl	7460 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6f48:	0788      	lsls	r0, r1, #30
    6f4a:	f04f 0501 	mov.w	r5, #1
    6f4e:	d505      	bpl.n	6f5c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x40>
    6f50:	f88d 5000 	strb.w	r5, [sp]
    6f54:	4668      	mov	r0, sp
    6f56:	9401      	str	r4, [sp, #4]
    6f58:	f7ff fe08 	bl	6b6c <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    6f5c:	68b0      	ldr	r0, [r6, #8]
    6f5e:	62e0      	str	r0, [r4, #44]	; 0x2c
    6f60:	f641 514c 	movw	r1, #7500	; 0x1d4c
    6f64:	6121      	str	r1, [r4, #16]
    6f66:	8821      	ldrh	r1, [r4, #0]
    6f68:	f8ad 1004 	strh.w	r1, [sp, #4]
    6f6c:	7bb1      	ldrb	r1, [r6, #14]
    6f6e:	f88d 1006 	strb.w	r1, [sp, #6]
    6f72:	7bf1      	ldrb	r1, [r6, #15]
    6f74:	f88d 1007 	strb.w	r1, [sp, #7]
    6f78:	8a31      	ldrh	r1, [r6, #16]
    6f7a:	f8ad 1008 	strh.w	r1, [sp, #8]
    6f7e:	a904      	add	r1, sp, #16
    6f80:	9100      	str	r1, [sp, #0]
    6f82:	4628      	mov	r0, r5
    6f84:	ab03      	add	r3, sp, #12
    6f86:	aa01      	add	r2, sp, #4
    6f88:	4621      	mov	r1, r4
    6f8a:	f009 f92d 	bl	101e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
    6f8e:	b138      	cbz	r0, 6fa0 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x84>
    6f90:	8820      	ldrh	r0, [r4, #0]
    6f92:	2100      	movs	r1, #0
    6f94:	f7fa f8dc 	bl	1150 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6f98:	b308      	cbz	r0, 6fde <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc2>
    6f9a:	f240 517d 	movw	r1, #1405	; 0x57d
    6f9e:	e01b      	b.n	6fd8 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xbc>
    6fa0:	f89d 000c 	ldrb.w	r0, [sp, #12]
    6fa4:	f88d 0014 	strb.w	r0, [sp, #20]
    6fa8:	f89d 0010 	ldrb.w	r0, [sp, #16]
    6fac:	f88d 0015 	strb.w	r0, [sp, #21]
    6fb0:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    6fb4:	f8ad 0016 	strh.w	r0, [sp, #22]
    6fb8:	a905      	add	r1, sp, #20
    6fba:	4620      	mov	r0, r4
    6fbc:	f006 fd6a 	bl	da94 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    6fc0:	7870      	ldrb	r0, [r6, #1]
    6fc2:	9000      	str	r0, [sp, #0]
    6fc4:	7833      	ldrb	r3, [r6, #0]
    6fc6:	88b2      	ldrh	r2, [r6, #4]
    6fc8:	8871      	ldrh	r1, [r6, #2]
    6fca:	8820      	ldrh	r0, [r4, #0]
    6fcc:	f7fa f8f2 	bl	11b4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    6fd0:	2800      	cmp	r0, #0
    6fd2:	d005      	beq.n	6fe0 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc4>
    6fd4:	f44f 61b1 	mov.w	r1, #1416	; 0x588
    6fd8:	2039      	movs	r0, #57	; 0x39
    6fda:	f7f9 fce9 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6fde:	2009      	movs	r0, #9
    6fe0:	b006      	add	sp, #24
    6fe2:	bd70      	pop	{r4, r5, r6, pc}
    6fe4:	20001198 	.word	0x20001198

00006fe8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
    6fe8:	b510      	push	{r4, lr}
    6fea:	2005      	movs	r0, #5
    6fec:	f000 fa2c 	bl	7448 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    6ff0:	f7fd ff84 	bl	4efc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    6ff4:	4902      	ldr	r1, [pc, #8]	; (7000 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x18>)
    6ff6:	4801      	ldr	r0, [pc, #4]	; (6ffc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
    6ff8:	6048      	str	r0, [r1, #4]
    6ffa:	bd10      	pop	{r4, pc}
    6ffc:	00006e45 	.word	0x00006e45
    7000:	20000294 	.word	0x20000294
    7004:	b51c      	push	{r2, r3, r4, lr}
    7006:	4909      	ldr	r1, [pc, #36]	; (702c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x44>)
    7008:	e9d1 0100 	ldrd	r0, r1, [r1]
    700c:	e9cd 0100 	strd	r0, r1, [sp]
    7010:	e005      	b.n	701e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    7012:	9800      	ldr	r0, [sp, #0]
    7014:	f007 fe18 	bl	ec48 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    7018:	b108      	cbz	r0, 701e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    701a:	2001      	movs	r0, #1
    701c:	bd1c      	pop	{r2, r3, r4, pc}
    701e:	4668      	mov	r0, sp
    7020:	f7fa f846 	bl	10b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7024:	2800      	cmp	r0, #0
    7026:	d0f4      	beq.n	7012 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x2a>
    7028:	2000      	movs	r0, #0
    702a:	bd1c      	pop	{r2, r3, r4, pc}
    702c:	00007324 	.word	0x00007324
    7030:	b510      	push	{r4, lr}
    7032:	480d      	ldr	r0, [pc, #52]	; (7068 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x80>)
    7034:	2100      	movs	r1, #0
    7036:	4b0d      	ldr	r3, [pc, #52]	; (706c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x84>)
    7038:	74c1      	strb	r1, [r0, #19]
    703a:	8281      	strh	r1, [r0, #20]
    703c:	221b      	movs	r2, #27
    703e:	801a      	strh	r2, [r3, #0]
    7040:	f44f 74a4 	mov.w	r4, #328	; 0x148
    7044:	805c      	strh	r4, [r3, #2]
    7046:	809a      	strh	r2, [r3, #4]
    7048:	80dc      	strh	r4, [r3, #6]
    704a:	7381      	strb	r1, [r0, #14]
    704c:	73c1      	strb	r1, [r0, #15]
    704e:	2303      	movs	r3, #3
    7050:	7003      	strb	r3, [r0, #0]
    7052:	2302      	movs	r3, #2
    7054:	7043      	strb	r3, [r0, #1]
    7056:	8042      	strh	r2, [r0, #2]
    7058:	8082      	strh	r2, [r0, #4]
    705a:	f640 62a6 	movw	r2, #3750	; 0xea6
    705e:	6082      	str	r2, [r0, #8]
    7060:	7481      	strb	r1, [r0, #18]
    7062:	7301      	strb	r1, [r0, #12]
    7064:	bd10      	pop	{r4, pc}
    7066:	0000      	.short	0x0000
    7068:	20001198 	.word	0x20001198
    706c:	2000029c 	.word	0x2000029c
    7070:	b510      	push	{r4, lr}
    7072:	2101      	movs	r1, #1
    7074:	2000      	movs	r0, #0
    7076:	f7f9 ffc9 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    707a:	0004      	movs	r4, r0
    707c:	d10a      	bne.n	7094 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xac>
    707e:	2101      	movs	r1, #1
    7080:	f7f9 ff8c 	bl	f9c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    7084:	0004      	movs	r4, r0
    7086:	d007      	beq.n	7098 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xb0>
    7088:	4806      	ldr	r0, [pc, #24]	; (70a4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xbc>)
    708a:	f990 1000 	ldrsb.w	r1, [r0]
    708e:	4620      	mov	r0, r4
    7090:	f007 fbaf 	bl	e7f2 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    7094:	4620      	mov	r0, r4
    7096:	bd10      	pop	{r4, pc}
    7098:	f240 3113 	movw	r1, #787	; 0x313
    709c:	2039      	movs	r0, #57	; 0x39
    709e:	f7f9 fc87 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    70a2:	0000      	.short	0x0000
    70a4:	20000294 	.word	0x20000294

000070a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    70a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    70aa:	460c      	mov	r4, r1
    70ac:	4605      	mov	r5, r0
    70ae:	f007 fc0e 	bl	e8ce <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    70b2:	b158      	cbz	r0, 70cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24>
    70b4:	4628      	mov	r0, r5
    70b6:	f007 fbfd 	bl	e8b4 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    70ba:	b148      	cbz	r0, 70d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    70bc:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    70c0:	2112      	movs	r1, #18
    70c2:	b108      	cbz	r0, 70c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    70c4:	2880      	cmp	r0, #128	; 0x80
    70c6:	d903      	bls.n	70d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    70c8:	4608      	mov	r0, r1
    70ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    70cc:	2142      	movs	r1, #66	; 0x42
    70ce:	e7fb      	b.n	70c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    70d0:	4628      	mov	r0, r5
    70d2:	f007 fbe0 	bl	e896 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>
    70d6:	b120      	cbz	r0, 70e2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    70d8:	4628      	mov	r0, r5
    70da:	f007 fb4b 	bl	e774 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    70de:	b110      	cbz	r0, 70e6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3e>
    70e0:	e005      	b.n	70ee <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x46>
    70e2:	210c      	movs	r1, #12
    70e4:	e7f0      	b.n	70c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    70e6:	4628      	mov	r0, r5
    70e8:	f007 fbde 	bl	e8a8 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    70ec:	b120      	cbz	r0, 70f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x50>
    70ee:	4628      	mov	r0, r5
    70f0:	f007 fdaa 	bl	ec48 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    70f4:	b930      	cbnz	r0, 7104 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5c>
    70f6:	e001      	b.n	70fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x54>
    70f8:	2012      	movs	r0, #18
    70fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    70fc:	4628      	mov	r0, r5
    70fe:	f007 fb54 	bl	e7aa <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    7102:	b108      	cbz	r0, 7108 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x60>
    7104:	200c      	movs	r0, #12
    7106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7108:	4628      	mov	r0, r5
    710a:	f7fc fa0b 	bl	3524 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    710e:	f8b4 6001 	ldrh.w	r6, [r4, #1]
    7112:	f242 7010 	movw	r0, #10000	; 0x2710
    7116:	4346      	muls	r6, r0
    7118:	78e1      	ldrb	r1, [r4, #3]
    711a:	4628      	mov	r0, r5
    711c:	f007 fbb2 	bl	e884 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    7120:	4628      	mov	r0, r5
    7122:	f007 fbc3 	bl	e8ac <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    7126:	b1a8      	cbz	r0, 7154 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xac>
    7128:	2100      	movs	r1, #0
    712a:	4668      	mov	r0, sp
    712c:	f7f9 ffe2 	bl	10f4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    7130:	0004      	movs	r4, r0
    7132:	d019      	beq.n	7168 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc0>
    7134:	2100      	movs	r1, #0
    7136:	f7fb fae7 	bl	2708 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    713a:	f8bd 0000 	ldrh.w	r0, [sp]
    713e:	8020      	strh	r0, [r4, #0]
    7140:	4621      	mov	r1, r4
    7142:	4628      	mov	r0, r5
    7144:	f007 fbda 	bl	e8fc <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    7148:	4628      	mov	r0, r5
    714a:	f007 fbb7 	bl	e8bc <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    714e:	b168      	cbz	r0, 716c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    7150:	2001      	movs	r0, #1
    7152:	e00e      	b.n	7172 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xca>
    7154:	4632      	mov	r2, r6
    7156:	2100      	movs	r1, #0
    7158:	4628      	mov	r0, r5
    715a:	f7fd f921 	bl	43a0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    715e:	2800      	cmp	r0, #0
    7160:	d0d1      	beq.n	7106 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5e>
    7162:	f241 7168 	movw	r1, #5992	; 0x1768
    7166:	e012      	b.n	718e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe6>
    7168:	200d      	movs	r0, #13
    716a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    716c:	4628      	mov	r0, r5
    716e:	f007 fbc3 	bl	e8f8 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    7172:	4601      	mov	r1, r0
    7174:	4620      	mov	r0, r4
    7176:	f7ff fed1 	bl	6f1c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A>
    717a:	2800      	cmp	r0, #0
    717c:	d1f5      	bne.n	716a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    717e:	4632      	mov	r2, r6
    7180:	4621      	mov	r1, r4
    7182:	4628      	mov	r0, r5
    7184:	f7fd f90c 	bl	43a0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    7188:	b120      	cbz	r0, 7194 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xec>
    718a:	f241 718b 	movw	r1, #6027	; 0x178b
    718e:	2039      	movs	r0, #57	; 0x39
    7190:	f7f9 fc0e 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7194:	4804      	ldr	r0, [pc, #16]	; (71a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x100>)
    7196:	6843      	ldr	r3, [r0, #4]
    7198:	b123      	cbz	r3, 71a4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfc>
    719a:	2200      	movs	r2, #0
    719c:	f504 7199 	add.w	r1, r4, #306	; 0x132
    71a0:	4620      	mov	r0, r4
    71a2:	4798      	blx	r3
    71a4:	2000      	movs	r0, #0
    71a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    71a8:	20000294 	.word	0x20000294
    71ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71b0:	b088      	sub	sp, #32
    71b2:	4604      	mov	r4, r0
    71b4:	8800      	ldrh	r0, [r0, #0]
    71b6:	a906      	add	r1, sp, #24
    71b8:	f006 fbaf 	bl	d91a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    71bc:	2800      	cmp	r0, #0
    71be:	d147      	bne.n	7250 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    71c0:	9807      	ldr	r0, [sp, #28]
    71c2:	f890 1180 	ldrb.w	r1, [r0, #384]	; 0x180
    71c6:	f88d 1008 	strb.w	r1, [sp, #8]
    71ca:	9902      	ldr	r1, [sp, #8]
    71cc:	9102      	str	r1, [sp, #8]
    71ce:	f89d 1008 	ldrb.w	r1, [sp, #8]
    71d2:	3080      	adds	r0, #128	; 0x80
    71d4:	b101      	cbz	r1, 71d8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x130>
    71d6:	2101      	movs	r1, #1
    71d8:	f88d 100c 	strb.w	r1, [sp, #12]
    71dc:	7b01      	ldrb	r1, [r0, #12]
    71de:	f04f 0800 	mov.w	r8, #0
    71e2:	0689      	lsls	r1, r1, #26
    71e4:	d502      	bpl.n	71ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x144>
    71e6:	f89d 100c 	ldrb.w	r1, [sp, #12]
    71ea:	b149      	cbz	r1, 7200 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x158>
    71ec:	f05f 0100 	movs.w	r1, #0
    71f0:	f88d 1004 	strb.w	r1, [sp, #4]
    71f4:	2105      	movs	r1, #5
    71f6:	306c      	adds	r0, #108	; 0x6c
    71f8:	f008 f9bd 	bl	f576 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
    71fc:	b110      	cbz	r0, 7204 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x15c>
    71fe:	e004      	b.n	720a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x162>
    7200:	2101      	movs	r1, #1
    7202:	e7f5      	b.n	71f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x148>
    7204:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7208:	b308      	cbz	r0, 724e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a6>
    720a:	8921      	ldrh	r1, [r4, #8]
    720c:	88e0      	ldrh	r0, [r4, #6]
    720e:	f008 ffa7 	bl	10160 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    7212:	2800      	cmp	r0, #0
    7214:	d11c      	bne.n	7250 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    7216:	88a1      	ldrh	r1, [r4, #4]
    7218:	8860      	ldrh	r0, [r4, #2]
    721a:	f008 ffa1 	bl	10160 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    721e:	2800      	cmp	r0, #0
    7220:	d116      	bne.n	7250 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    7222:	8921      	ldrh	r1, [r4, #8]
    7224:	88e0      	ldrh	r0, [r4, #6]
    7226:	f008 ff91 	bl	1014c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    722a:	2800      	cmp	r0, #0
    722c:	d110      	bne.n	7250 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    722e:	88a1      	ldrh	r1, [r4, #4]
    7230:	8860      	ldrh	r0, [r4, #2]
    7232:	f008 ff8b 	bl	1014c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    7236:	0006      	movs	r6, r0
    7238:	d10a      	bne.n	7250 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    723a:	9807      	ldr	r0, [sp, #28]
    723c:	f500 7599 	add.w	r5, r0, #306	; 0x132
    7240:	27ff      	movs	r7, #255	; 0xff
    7242:	706f      	strb	r7, [r5, #1]
    7244:	f89d 100c 	ldrb.w	r1, [sp, #12]
    7248:	b129      	cbz	r1, 7256 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ae>
    724a:	263a      	movs	r6, #58	; 0x3a
    724c:	e02e      	b.n	72ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x204>
    724e:	201a      	movs	r0, #26
    7250:	b008      	add	sp, #32
    7252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7256:	4641      	mov	r1, r8
    7258:	aa03      	add	r2, sp, #12
    725a:	f008 ff8f 	bl	1017c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    725e:	8861      	ldrh	r1, [r4, #2]
    7260:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    7264:	4281      	cmp	r1, r0
    7266:	d200      	bcs.n	726a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c2>
    7268:	4608      	mov	r0, r1
    726a:	80e8      	strh	r0, [r5, #6]
    726c:	88a1      	ldrh	r1, [r4, #4]
    726e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    7272:	4281      	cmp	r1, r0
    7274:	d200      	bcs.n	7278 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d0>
    7276:	4608      	mov	r0, r1
    7278:	8128      	strh	r0, [r5, #8]
    727a:	88e2      	ldrh	r2, [r4, #6]
    727c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    7280:	428a      	cmp	r2, r1
    7282:	d200      	bcs.n	7286 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1de>
    7284:	4611      	mov	r1, r2
    7286:	8069      	strh	r1, [r5, #2]
    7288:	8922      	ldrh	r2, [r4, #8]
    728a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    728e:	428a      	cmp	r2, r1
    7290:	d200      	bcs.n	7294 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    7292:	4611      	mov	r1, r2
    7294:	f640 0248 	movw	r2, #2120	; 0x848
    7298:	80a9      	strh	r1, [r5, #4]
    729a:	4291      	cmp	r1, r2
    729c:	d300      	bcc.n	72a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f8>
    729e:	4611      	mov	r1, r2
    72a0:	80a9      	strh	r1, [r5, #4]
    72a2:	4290      	cmp	r0, r2
    72a4:	d200      	bcs.n	72a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x200>
    72a6:	4602      	mov	r2, r0
    72a8:	812a      	strh	r2, [r5, #8]
    72aa:	702f      	strb	r7, [r5, #0]
    72ac:	f885 8001 	strb.w	r8, [r5, #1]
    72b0:	4630      	mov	r0, r6
    72b2:	e7cd      	b.n	7250 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    72b4:	b51c      	push	{r2, r3, r4, lr}
    72b6:	490c      	ldr	r1, [pc, #48]	; (72e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>)
    72b8:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    72bc:	e9cd 0100 	strd	r0, r1, [sp]
    72c0:	e00a      	b.n	72d8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    72c2:	9c00      	ldr	r4, [sp, #0]
    72c4:	4620      	mov	r0, r4
    72c6:	f007 fcbf 	bl	ec48 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    72ca:	b128      	cbz	r0, 72d8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    72cc:	4620      	mov	r0, r4
    72ce:	f007 fb24 	bl	e91a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    72d2:	b108      	cbz	r0, 72d8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    72d4:	2001      	movs	r0, #1
    72d6:	bd1c      	pop	{r2, r3, r4, pc}
    72d8:	4668      	mov	r0, sp
    72da:	f7f9 fee9 	bl	10b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    72de:	2800      	cmp	r0, #0
    72e0:	d0ef      	beq.n	72c2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x21a>
    72e2:	2000      	movs	r0, #0
    72e4:	bd1c      	pop	{r2, r3, r4, pc}
    72e6:	0000      	.short	0x0000
    72e8:	00007324 	.word	0x00007324
    72ec:	b510      	push	{r4, lr}
    72ee:	4604      	mov	r4, r0
    72f0:	88c1      	ldrh	r1, [r0, #6]
    72f2:	8880      	ldrh	r0, [r0, #4]
    72f4:	f008 ff34 	bl	10160 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    72f8:	2800      	cmp	r0, #0
    72fa:	d10f      	bne.n	731c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x274>
    72fc:	8861      	ldrh	r1, [r4, #2]
    72fe:	8820      	ldrh	r0, [r4, #0]
    7300:	f008 ff2e 	bl	10160 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    7304:	2800      	cmp	r0, #0
    7306:	d109      	bne.n	731c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x274>
    7308:	4805      	ldr	r0, [pc, #20]	; (7320 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x278>)
    730a:	88a1      	ldrh	r1, [r4, #4]
    730c:	8081      	strh	r1, [r0, #4]
    730e:	8821      	ldrh	r1, [r4, #0]
    7310:	8001      	strh	r1, [r0, #0]
    7312:	88e1      	ldrh	r1, [r4, #6]
    7314:	80c1      	strh	r1, [r0, #6]
    7316:	8861      	ldrh	r1, [r4, #2]
    7318:	8041      	strh	r1, [r0, #2]
    731a:	2000      	movs	r0, #0
    731c:	bd10      	pop	{r4, pc}
    731e:	0000      	.short	0x0000
    7320:	2000029c 	.word	0x2000029c
    7324:	00000000 	.word	0x00000000
    7328:	00010000 	.word	0x00010000
    732c:	00000000 	.word	0x00000000
    7330:	00010000 	.word	0x00010000
    7334:	0d10770d 	.word	0x0d10770d
    7338:	10770059 	.word	0x10770059
    733c:	00000000 	.word	0x00000000
    7340:	00010000 	.word	0x00010000
    7344:	00000000 	.word	0x00000000
    7348:	00010000 	.word	0x00010000

0000734c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    734c:	b510      	push	{r4, lr}
    734e:	f7fb fc77 	bl	2c40 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    7352:	4c05      	ldr	r4, [pc, #20]	; (7368 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    7354:	6860      	ldr	r0, [r4, #4]
    7356:	f009 f812 	bl	1037e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3de>
    735a:	f008 fda6 	bl	feaa <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    735e:	f7fb fe1d 	bl	2f9c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    7362:	2001      	movs	r0, #1
    7364:	7020      	strb	r0, [r4, #0]
    7366:	bd10      	pop	{r4, pc}
    7368:	200002a4 	.word	0x200002a4

0000736c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    736c:	4801      	ldr	r0, [pc, #4]	; (7374 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    736e:	7800      	ldrb	r0, [r0, #0]
    7370:	4770      	bx	lr
    7372:	0000      	.short	0x0000
    7374:	200002a4 	.word	0x200002a4

00007378 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    7378:	b510      	push	{r4, lr}
    737a:	4c06      	ldr	r4, [pc, #24]	; (7394 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    737c:	68a0      	ldr	r0, [r4, #8]
    737e:	f008 fffe 	bl	1037e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3de>
    7382:	68e0      	ldr	r0, [r4, #12]
    7384:	f008 fffb 	bl	1037e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3de>
    7388:	f008 fdf9 	bl	ff7e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    738c:	2000      	movs	r0, #0
    738e:	7020      	strb	r0, [r4, #0]
    7390:	bd10      	pop	{r4, pc}
    7392:	0000      	.short	0x0000
    7394:	200002a4 	.word	0x200002a4

00007398 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    7398:	b510      	push	{r4, lr}
    739a:	4905      	ldr	r1, [pc, #20]	; (73b0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    739c:	4805      	ldr	r0, [pc, #20]	; (73b4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    739e:	f008 ffe1 	bl	10364 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c4>
    73a2:	4804      	ldr	r0, [pc, #16]	; (73b4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    73a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    73a8:	4903      	ldr	r1, [pc, #12]	; (73b8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    73aa:	1d00      	adds	r0, r0, #4
    73ac:	f008 bfda 	b.w	10364 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c4>
    73b0:	200002b4 	.word	0x200002b4
    73b4:	200002a8 	.word	0x200002a8
    73b8:	200002bc 	.word	0x200002bc

000073bc <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    73bc:	b510      	push	{r4, lr}
    73be:	4908      	ldr	r1, [pc, #32]	; (73e0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    73c0:	4808      	ldr	r0, [pc, #32]	; (73e4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    73c2:	f008 ffcf 	bl	10364 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c4>
    73c6:	4807      	ldr	r0, [pc, #28]	; (73e4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    73c8:	4907      	ldr	r1, [pc, #28]	; (73e8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    73ca:	1d00      	adds	r0, r0, #4
    73cc:	f008 ffca 	bl	10364 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c4>
    73d0:	4804      	ldr	r0, [pc, #16]	; (73e4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    73d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    73d6:	4905      	ldr	r1, [pc, #20]	; (73ec <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    73d8:	3008      	adds	r0, #8
    73da:	f008 bfc3 	b.w	10364 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c4>
    73de:	0000      	.short	0x0000
    73e0:	200002cc 	.word	0x200002cc
    73e4:	200002a8 	.word	0x200002a8
    73e8:	200002d4 	.word	0x200002d4
    73ec:	200002c4 	.word	0x200002c4

000073f0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    73f0:	4801      	ldr	r0, [pc, #4]	; (73f8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    73f2:	7840      	ldrb	r0, [r0, #1]
    73f4:	4770      	bx	lr
    73f6:	0000      	.short	0x0000
    73f8:	200002a4 	.word	0x200002a4
    73fc:	b510      	push	{r4, lr}
    73fe:	f7fc f9b3 	bl	3768 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    7402:	f7fd f87d 	bl	4500 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    7406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    740a:	4801      	ldr	r0, [pc, #4]	; (7410 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x20>)
    740c:	f7fc b992 	b.w	3734 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    7410:	20001430 	.word	0x20001430
    7414:	490a      	ldr	r1, [pc, #40]	; (7440 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    7416:	b510      	push	{r4, lr}
    7418:	2001      	movs	r0, #1
    741a:	7048      	strb	r0, [r1, #1]
    741c:	f7fc f9d4 	bl	37c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    7420:	f7fd fd84 	bl	4f2c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    7424:	f006 f9a8 	bl	d778 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    7428:	4906      	ldr	r1, [pc, #24]	; (7444 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    742a:	f5a1 7081 	sub.w	r0, r1, #258	; 0x102
    742e:	f7fa fa71 	bl	1914 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY>
    7432:	2000      	movs	r0, #0
    7434:	f005 ffee 	bl	d414 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    7438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    743c:	f7fb bc06 	b.w	2c4c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    7440:	200002a4 	.word	0x200002a4
    7444:	20001532 	.word	0x20001532

00007448 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    7448:	4a04      	ldr	r2, [pc, #16]	; (745c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    744a:	08c1      	lsrs	r1, r0, #3
    744c:	f000 0307 	and.w	r3, r0, #7
    7450:	2001      	movs	r0, #1
    7452:	4098      	lsls	r0, r3
    7454:	5c53      	ldrb	r3, [r2, r1]
    7456:	4303      	orrs	r3, r0
    7458:	5453      	strb	r3, [r2, r1]
    745a:	4770      	bx	lr
    745c:	20000020 	.word	0x20000020

00007460 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    7460:	4901      	ldr	r1, [pc, #4]	; (7468 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    7462:	e9d1 0100 	ldrd	r0, r1, [r1]
    7466:	4770      	bx	lr
    7468:	20000020 	.word	0x20000020

0000746c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    746c:	4806      	ldr	r0, [pc, #24]	; (7488 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    746e:	8801      	ldrh	r1, [r0, #0]
    7470:	7900      	ldrb	r0, [r0, #4]
    7472:	0602      	lsls	r2, r0, #24
    7474:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    7478:	f000 0001 	and.w	r0, r0, #1
    747c:	1800      	adds	r0, r0, r0
    747e:	b2c0      	uxtb	r0, r0
    7480:	f040 0001 	orr.w	r0, r0, #1
    7484:	4770      	bx	lr
    7486:	0000      	.short	0x0000
    7488:	20000020 	.word	0x20000020

0000748c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    748c:	b510      	push	{r4, lr}
    748e:	f004 fd35 	bl	befc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    7492:	2200      	movs	r2, #0
    7494:	4b08      	ldr	r3, [pc, #32]	; (74b8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    7496:	4611      	mov	r1, r2
    7498:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    749c:	4284      	cmp	r4, r0
    749e:	d303      	bcc.n	74a8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    74a0:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    74a4:	7882      	ldrb	r2, [r0, #2]
    74a6:	e003      	b.n	74b0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    74a8:	1c49      	adds	r1, r1, #1
    74aa:	b2c9      	uxtb	r1, r1
    74ac:	290c      	cmp	r1, #12
    74ae:	d3f3      	bcc.n	7498 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    74b0:	4802      	ldr	r0, [pc, #8]	; (74bc <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    74b2:	7002      	strb	r2, [r0, #0]
    74b4:	bd10      	pop	{r4, pc}
    74b6:	0000      	.short	0x0000
    74b8:	000103d0 	.word	0x000103d0
    74bc:	20000373 	.word	0x20000373

000074c0 <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA>:
    74c0:	b570      	push	{r4, r5, r6, lr}
    74c2:	6845      	ldr	r5, [r0, #4]
    74c4:	f505 76d3 	add.w	r6, r5, #422	; 0x1a6
    74c8:	8828      	ldrh	r0, [r5, #0]
    74ca:	f826 0902 	strh.w	r0, [r6], #-2
    74ce:	f505 7498 	add.w	r4, r5, #304	; 0x130
    74d2:	7031      	strb	r1, [r6, #0]
    74d4:	f895 006a 	ldrb.w	r0, [r5, #106]	; 0x6a
    74d8:	f008 ffae 	bl	10438 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x14>
    74dc:	7130      	strb	r0, [r6, #4]
    74de:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    74e2:	f008 ffa9 	bl	10438 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x14>
    74e6:	f806 0f05 	strb.w	r0, [r6, #5]!
    74ea:	2202      	movs	r2, #2
    74ec:	4903      	ldr	r1, [pc, #12]	; (74fc <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA+0x3c>)
    74ee:	f1a6 000f 	sub.w	r0, r6, #15
    74f2:	f006 fde5 	bl	e0c0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    74f6:	2000      	movs	r0, #0
    74f8:	7320      	strb	r0, [r4, #12]
    74fa:	bd70      	pop	{r4, r5, r6, pc}
    74fc:	00010425 	.word	0x00010425

00007500 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY>:
    7500:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7502:	460e      	mov	r6, r1
    7504:	4604      	mov	r4, r0
    7506:	f7fb fa63 	bl	29d0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    750a:	2500      	movs	r5, #0
    750c:	b320      	cbz	r0, 7558 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x58>
    750e:	f5a4 74c6 	sub.w	r4, r4, #396	; 0x18c
    7512:	a902      	add	r1, sp, #8
    7514:	8820      	ldrh	r0, [r4, #0]
    7516:	f8ad 0000 	strh.w	r0, [sp]
    751a:	f006 f9fe 	bl	d91a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    751e:	b108      	cbz	r0, 7524 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x24>
    7520:	2126      	movs	r1, #38	; 0x26
    7522:	e010      	b.n	7546 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x46>
    7524:	9803      	ldr	r0, [sp, #12]
    7526:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    752a:	f88d 1002 	strb.w	r1, [sp, #2]
    752e:	7841      	ldrb	r1, [r0, #1]
    7530:	f88d 1003 	strb.w	r1, [sp, #3]
    7534:	8840      	ldrh	r0, [r0, #2]
    7536:	f8ad 0004 	strh.w	r0, [sp, #4]
    753a:	2102      	movs	r1, #2
    753c:	4668      	mov	r0, sp
    753e:	f008 fcb6 	bl	feae <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    7542:	b118      	cbz	r0, 754c <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4c>
    7544:	213c      	movs	r1, #60	; 0x3c
    7546:	207e      	movs	r0, #126	; 0x7e
    7548:	f7f9 fa32 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    754c:	f8cd 5000 	str.w	r5, [sp]
    7550:	f8bd 0000 	ldrh.w	r0, [sp]
    7554:	b004      	add	sp, #16
    7556:	bd70      	pop	{r4, r5, r6, pc}
    7558:	201c      	movs	r0, #28
    755a:	7030      	strb	r0, [r6, #0]
    755c:	7075      	strb	r5, [r6, #1]
    755e:	f8d4 000a 	ldr.w	r0, [r4, #10]
    7562:	6070      	str	r0, [r6, #4]
    7564:	4801      	ldr	r0, [pc, #4]	; (756c <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x6c>)
    7566:	6800      	ldr	r0, [r0, #0]
    7568:	9000      	str	r0, [sp, #0]
    756a:	e7f1      	b.n	7550 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x50>
    756c:	00007570 	.word	0x00007570
    7570:	00000004 	.word	0x00000004

00007574 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    7574:	b570      	push	{r4, r5, r6, lr}
    7576:	4605      	mov	r5, r0
    7578:	4616      	mov	r6, r2
    757a:	460c      	mov	r4, r1
    757c:	2002      	movs	r0, #2
    757e:	f000 f9b7 	bl	78f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7582:	4906      	ldr	r1, [pc, #24]	; (759c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    7584:	2001      	movs	r0, #1
    7586:	1ef6      	subs	r6, r6, #3
    7588:	7008      	strb	r0, [r1, #0]
    758a:	4805      	ldr	r0, [pc, #20]	; (75a0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    758c:	6006      	str	r6, [r0, #0]
    758e:	4804      	ldr	r0, [pc, #16]	; (75a0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    7590:	3808      	subs	r0, #8
    7592:	6005      	str	r5, [r0, #0]
    7594:	1f00      	subs	r0, r0, #4
    7596:	6004      	str	r4, [r0, #0]
    7598:	bd70      	pop	{r4, r5, r6, pc}
    759a:	0000      	.short	0x0000
    759c:	20000374 	.word	0x20000374
    75a0:	4000f510 	.word	0x4000f510

000075a4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    75a4:	b510      	push	{r4, lr}
    75a6:	4c0c      	ldr	r4, [pc, #48]	; (75d8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    75a8:	7820      	ldrb	r0, [r4, #0]
    75aa:	b180      	cbz	r0, 75ce <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    75ac:	490b      	ldr	r1, [pc, #44]	; (75dc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    75ae:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    75b2:	6008      	str	r0, [r1, #0]
    75b4:	f000 f86a 	bl	768c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    75b8:	2100      	movs	r1, #0
    75ba:	b120      	cbz	r0, 75c6 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    75bc:	2001      	movs	r0, #1
    75be:	7060      	strb	r0, [r4, #1]
    75c0:	4807      	ldr	r0, [pc, #28]	; (75e0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    75c2:	6800      	ldr	r0, [r0, #0]
    75c4:	e001      	b.n	75ca <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    75c6:	7061      	strb	r1, [r4, #1]
    75c8:	2010      	movs	r0, #16
    75ca:	70a0      	strb	r0, [r4, #2]
    75cc:	7021      	strb	r1, [r4, #0]
    75ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    75d2:	2000      	movs	r0, #0
    75d4:	f000 b98c 	b.w	78f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    75d8:	20000374 	.word	0x20000374
    75dc:	4001f508 	.word	0x4001f508
    75e0:	4000f400 	.word	0x4000f400

000075e4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    75e4:	b510      	push	{r4, lr}
    75e6:	2002      	movs	r0, #2
    75e8:	f000 f982 	bl	78f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    75ec:	4904      	ldr	r1, [pc, #16]	; (7600 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    75ee:	2001      	movs	r0, #1
    75f0:	7008      	strb	r0, [r1, #0]
    75f2:	f000 f859 	bl	76a8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    75f6:	4903      	ldr	r1, [pc, #12]	; (7604 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    75f8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    75fc:	6008      	str	r0, [r1, #0]
    75fe:	bd10      	pop	{r4, pc}
    7600:	20000374 	.word	0x20000374
    7604:	4001f504 	.word	0x4001f504

00007608 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    7608:	4803      	ldr	r0, [pc, #12]	; (7618 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    760a:	2100      	movs	r1, #0
    760c:	7001      	strb	r1, [r0, #0]
    760e:	7041      	strb	r1, [r0, #1]
    7610:	2110      	movs	r1, #16
    7612:	7081      	strb	r1, [r0, #2]
    7614:	4770      	bx	lr
    7616:	0000      	.short	0x0000
    7618:	20000374 	.word	0x20000374

0000761c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    761c:	4807      	ldr	r0, [pc, #28]	; (763c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    761e:	b510      	push	{r4, lr}
    7620:	7801      	ldrb	r1, [r0, #0]
    7622:	b141      	cbz	r1, 7636 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    7624:	f000 f832 	bl	768c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    7628:	b118      	cbz	r0, 7632 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    762a:	4805      	ldr	r0, [pc, #20]	; (7640 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    762c:	6800      	ldr	r0, [r0, #0]
    762e:	b2c0      	uxtb	r0, r0
    7630:	bd10      	pop	{r4, pc}
    7632:	2010      	movs	r0, #16
    7634:	bd10      	pop	{r4, pc}
    7636:	7880      	ldrb	r0, [r0, #2]
    7638:	bd10      	pop	{r4, pc}
    763a:	0000      	.short	0x0000
    763c:	20000374 	.word	0x20000374
    7640:	4000f400 	.word	0x4000f400

00007644 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    7644:	4808      	ldr	r0, [pc, #32]	; (7668 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    7646:	b510      	push	{r4, lr}
    7648:	7801      	ldrb	r1, [r0, #0]
    764a:	b159      	cbz	r1, 7664 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    764c:	4807      	ldr	r0, [pc, #28]	; (766c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    764e:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7652:	b128      	cbz	r0, 7660 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    7654:	f000 f80c 	bl	7670 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    7658:	2800      	cmp	r0, #0
    765a:	d000      	beq.n	765e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    765c:	2001      	movs	r0, #1
    765e:	bd10      	pop	{r4, pc}
    7660:	2002      	movs	r0, #2
    7662:	bd10      	pop	{r4, pc}
    7664:	7840      	ldrb	r0, [r0, #1]
    7666:	bd10      	pop	{r4, pc}
    7668:	20000374 	.word	0x20000374
    766c:	4000f000 	.word	0x4000f000
    7670:	4805      	ldr	r0, [pc, #20]	; (7688 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    7672:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    7676:	b111      	cbz	r1, 767e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    7678:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    767c:	b108      	cbz	r0, 7682 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    767e:	2000      	movs	r0, #0
    7680:	4770      	bx	lr
    7682:	2001      	movs	r0, #1
    7684:	4770      	bx	lr
    7686:	0000      	.short	0x0000
    7688:	4000f000 	.word	0x4000f000
    768c:	4805      	ldr	r0, [pc, #20]	; (76a4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    768e:	b510      	push	{r4, lr}
    7690:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7694:	b120      	cbz	r0, 76a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    7696:	f7ff ffeb 	bl	7670 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    769a:	b108      	cbz	r0, 76a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    769c:	2001      	movs	r0, #1
    769e:	bd10      	pop	{r4, pc}
    76a0:	2000      	movs	r0, #0
    76a2:	bd10      	pop	{r4, pc}
    76a4:	4000f000 	.word	0x4000f000
    76a8:	4804      	ldr	r0, [pc, #16]	; (76bc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    76aa:	2100      	movs	r1, #0
    76ac:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    76b0:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    76b4:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    76b8:	4770      	bx	lr
    76ba:	0000      	.short	0x0000
    76bc:	4000f000 	.word	0x4000f000

000076c0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    76c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    76c4:	4604      	mov	r4, r0
    76c6:	461e      	mov	r6, r3
    76c8:	4690      	mov	r8, r2
    76ca:	460f      	mov	r7, r1
    76cc:	2001      	movs	r0, #1
    76ce:	f000 f90f 	bl	78f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    76d2:	4d1e      	ldr	r5, [pc, #120]	; (774c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    76d4:	481e      	ldr	r0, [pc, #120]	; (7750 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    76d6:	f004 0103 	and.w	r1, r4, #3
    76da:	712e      	strb	r6, [r5, #4]
    76dc:	6800      	ldr	r0, [r0, #0]
    76de:	0432      	lsls	r2, r6, #16
    76e0:	f361 0007 	bfi	r0, r1, #0, #8
    76e4:	f366 200f 	bfi	r0, r6, #8, #8
    76e8:	0c00      	lsrs	r0, r0, #16
    76ea:	4e1a      	ldr	r6, [pc, #104]	; (7754 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    76ec:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    76f0:	4308      	orrs	r0, r1
    76f2:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    76f6:	4818      	ldr	r0, [pc, #96]	; (7758 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    76f8:	6007      	str	r7, [r0, #0]
    76fa:	f009 f846 	bl	1078a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    76fe:	b938      	cbnz	r0, 7710 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    7700:	4815      	ldr	r0, [pc, #84]	; (7758 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7702:	3010      	adds	r0, #16
    7704:	6801      	ldr	r1, [r0, #0]
    7706:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    770a:	ea41 0108 	orr.w	r1, r1, r8
    770e:	6001      	str	r1, [r0, #0]
    7710:	f000 f8e4 	bl	78dc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7714:	b10c      	cbz	r4, 771a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    7716:	2c04      	cmp	r4, #4
    7718:	d107      	bne.n	772a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    771a:	4811      	ldr	r0, [pc, #68]	; (7760 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    771c:	490d      	ldr	r1, [pc, #52]	; (7754 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    771e:	4a0f      	ldr	r2, [pc, #60]	; (775c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    7720:	1d09      	adds	r1, r1, #4
    7722:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    7726:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    772a:	2001      	movs	r0, #1
    772c:	7068      	strb	r0, [r5, #1]
    772e:	70ec      	strb	r4, [r5, #3]
    7730:	b11c      	cbz	r4, 773a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7732:	2c01      	cmp	r4, #1
    7734:	d001      	beq.n	773a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7736:	2c02      	cmp	r4, #2
    7738:	d106      	bne.n	7748 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    773a:	7028      	strb	r0, [r5, #0]
    773c:	2100      	movs	r1, #0
    773e:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    7742:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    7746:	6030      	str	r0, [r6, #0]
    7748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    774c:	20000377 	.word	0x20000377
    7750:	000078ec 	.word	0x000078ec
    7754:	4000f000 	.word	0x4000f000
    7758:	4000f508 	.word	0x4000f508
    775c:	4000f100 	.word	0x4000f100
    7760:	4001f088 	.word	0x4001f088

00007764 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    7764:	b570      	push	{r4, r5, r6, lr}
    7766:	4a1c      	ldr	r2, [pc, #112]	; (77d8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    7768:	7853      	ldrb	r3, [r2, #1]
    776a:	b1a3      	cbz	r3, 7796 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    776c:	4b1b      	ldr	r3, [pc, #108]	; (77dc <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    776e:	6019      	str	r1, [r3, #0]
    7770:	1d19      	adds	r1, r3, #4
    7772:	6008      	str	r0, [r1, #0]
    7774:	2501      	movs	r5, #1
    7776:	7095      	strb	r5, [r2, #2]
    7778:	4610      	mov	r0, r2
    777a:	78d6      	ldrb	r6, [r2, #3]
    777c:	4b18      	ldr	r3, [pc, #96]	; (77e0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    777e:	7800      	ldrb	r0, [r0, #0]
    7780:	4c18      	ldr	r4, [pc, #96]	; (77e4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    7782:	2100      	movs	r1, #0
    7784:	b156      	cbz	r6, 779c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    7786:	2e04      	cmp	r6, #4
    7788:	d01b      	beq.n	77c2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    778a:	b308      	cbz	r0, 77d0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    778c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7790:	0668      	lsls	r0, r5, #25
    7792:	6018      	str	r0, [r3, #0]
    7794:	bd70      	pop	{r4, r5, r6, pc}
    7796:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    779a:	e01a      	b.n	77d2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    779c:	b178      	cbz	r0, 77be <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    779e:	4620      	mov	r0, r4
    77a0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    77a4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    77a8:	601e      	str	r6, [r3, #0]
    77aa:	1271      	asrs	r1, r6, #9
    77ac:	f008 fe6c 	bl	10488 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    77b0:	2800      	cmp	r0, #0
    77b2:	d0ef      	beq.n	7794 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    77b4:	6065      	str	r5, [r4, #4]
    77b6:	480a      	ldr	r0, [pc, #40]	; (77e0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    77b8:	1d00      	adds	r0, r0, #4
    77ba:	6006      	str	r6, [r0, #0]
    77bc:	bd70      	pop	{r4, r5, r6, pc}
    77be:	21d5      	movs	r1, #213	; 0xd5
    77c0:	e007      	b.n	77d2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    77c2:	7015      	strb	r5, [r2, #0]
    77c4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    77c8:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    77cc:	6025      	str	r5, [r4, #0]
    77ce:	bd70      	pop	{r4, r5, r6, pc}
    77d0:	21e8      	movs	r1, #232	; 0xe8
    77d2:	203c      	movs	r0, #60	; 0x3c
    77d4:	f7f9 f8ec 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    77d8:	20000377 	.word	0x20000377
    77dc:	4000f50c 	.word	0x4000f50c
    77e0:	4001f504 	.word	0x4001f504
    77e4:	4000f000 	.word	0x4000f000

000077e8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    77e8:	b570      	push	{r4, r5, r6, lr}
    77ea:	4d05      	ldr	r5, [pc, #20]	; (7800 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    77ec:	2400      	movs	r4, #0
    77ee:	7828      	ldrb	r0, [r5, #0]
    77f0:	b110      	cbz	r0, 77f8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    77f2:	f000 f873 	bl	78dc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    77f6:	702c      	strb	r4, [r5, #0]
    77f8:	706c      	strb	r4, [r5, #1]
    77fa:	70ac      	strb	r4, [r5, #2]
    77fc:	bd70      	pop	{r4, r5, r6, pc}
    77fe:	0000      	.short	0x0000
    7800:	20000377 	.word	0x20000377

00007804 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    7804:	4802      	ldr	r0, [pc, #8]	; (7810 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    7806:	2100      	movs	r1, #0
    7808:	7001      	strb	r1, [r0, #0]
    780a:	7041      	strb	r1, [r0, #1]
    780c:	7081      	strb	r1, [r0, #2]
    780e:	4770      	bx	lr
    7810:	20000377 	.word	0x20000377

00007814 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    7814:	480b      	ldr	r0, [pc, #44]	; (7844 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    7816:	b510      	push	{r4, lr}
    7818:	7800      	ldrb	r0, [r0, #0]
    781a:	b158      	cbz	r0, 7834 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    781c:	f44f 7182 	mov.w	r1, #260	; 0x104
    7820:	4809      	ldr	r0, [pc, #36]	; (7848 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    7822:	f008 fe31 	bl	10488 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7826:	b140      	cbz	r0, 783a <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    7828:	4808      	ldr	r0, [pc, #32]	; (784c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    782a:	6800      	ldr	r0, [r0, #0]
    782c:	2800      	cmp	r0, #0
    782e:	d000      	beq.n	7832 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    7830:	2001      	movs	r0, #1
    7832:	bd10      	pop	{r4, pc}
    7834:	f240 215e 	movw	r1, #606	; 0x25e
    7838:	e001      	b.n	783e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    783a:	f240 215f 	movw	r1, #607	; 0x25f
    783e:	203c      	movs	r0, #60	; 0x3c
    7840:	f7f9 f8b6 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7844:	20000377 	.word	0x20000377
    7848:	4000f000 	.word	0x4000f000
    784c:	4000f400 	.word	0x4000f400

00007850 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    7850:	4801      	ldr	r0, [pc, #4]	; (7858 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    7852:	2101      	movs	r1, #1
    7854:	6081      	str	r1, [r0, #8]
    7856:	4770      	bx	lr
    7858:	4000f000 	.word	0x4000f000

0000785c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    785c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7860:	481b      	ldr	r0, [pc, #108]	; (78d0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    7862:	7800      	ldrb	r0, [r0, #0]
    7864:	b1d8      	cbz	r0, 789e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    7866:	f8df 806c 	ldr.w	r8, [pc, #108]	; 78d4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    786a:	f44f 7682 	mov.w	r6, #260	; 0x104
    786e:	4631      	mov	r1, r6
    7870:	4640      	mov	r0, r8
    7872:	f008 fe09 	bl	10488 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7876:	2800      	cmp	r0, #0
    7878:	d128      	bne.n	78cc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    787a:	2002      	movs	r0, #2
    787c:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    7880:	4c15      	ldr	r4, [pc, #84]	; (78d8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    7882:	6820      	ldr	r0, [r4, #0]
    7884:	43c0      	mvns	r0, r0
    7886:	f340 1500 	sbfx	r5, r0, #4, #1
    788a:	6820      	ldr	r0, [r4, #0]
    788c:	f040 0010 	orr.w	r0, r0, #16
    7890:	6020      	str	r0, [r4, #0]
    7892:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    7896:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    789a:	1c6d      	adds	r5, r5, #1
    789c:	e008      	b.n	78b0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    789e:	f240 216a 	movw	r1, #618	; 0x26a
    78a2:	203c      	movs	r0, #60	; 0x3c
    78a4:	f7f9 f884 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    78a8:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    78ac:	f008 ffad 	bl	1080a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    78b0:	4631      	mov	r1, r6
    78b2:	4640      	mov	r0, r8
    78b4:	f008 fde8 	bl	10488 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    78b8:	2800      	cmp	r0, #0
    78ba:	d0f5      	beq.n	78a8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    78bc:	b91d      	cbnz	r5, 78c6 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    78be:	6820      	ldr	r0, [r4, #0]
    78c0:	f020 0010 	bic.w	r0, r0, #16
    78c4:	6020      	str	r0, [r4, #0]
    78c6:	2002      	movs	r0, #2
    78c8:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    78cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    78d0:	20000377 	.word	0x20000377
    78d4:	4000f000 	.word	0x4000f000
    78d8:	e000ed10 	.word	0xe000ed10
    78dc:	4902      	ldr	r1, [pc, #8]	; (78e8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    78de:	4801      	ldr	r0, [pc, #4]	; (78e4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    78e0:	6008      	str	r0, [r1, #0]
    78e2:	4770      	bx	lr
    78e4:	02020000 	.word	0x02020000
    78e8:	4001f508 	.word	0x4001f508
    78ec:	00010000 	.word	0x00010000

000078f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    78f0:	b510      	push	{r4, lr}
    78f2:	4604      	mov	r4, r0
    78f4:	f000 f820 	bl	7938 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    78f8:	2c00      	cmp	r4, #0
    78fa:	d00e      	beq.n	791a <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    78fc:	4a0b      	ldr	r2, [pc, #44]	; (792c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    78fe:	480b      	ldr	r0, [pc, #44]	; (792c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7900:	490b      	ldr	r1, [pc, #44]	; (7930 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    7902:	3214      	adds	r2, #20
    7904:	2c01      	cmp	r4, #1
    7906:	d005      	beq.n	7914 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    7908:	2c02      	cmp	r4, #2
    790a:	d007      	beq.n	791c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    790c:	2182      	movs	r1, #130	; 0x82
    790e:	203d      	movs	r0, #61	; 0x3d
    7910:	f7f9 f84e 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7914:	2302      	movs	r3, #2
    7916:	6003      	str	r3, [r0, #0]
    7918:	6011      	str	r1, [r2, #0]
    791a:	bd10      	pop	{r4, pc}
    791c:	2303      	movs	r3, #3
    791e:	6003      	str	r3, [r0, #0]
    7920:	6011      	str	r1, [r2, #0]
    7922:	4904      	ldr	r1, [pc, #16]	; (7934 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    7924:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7928:	6008      	str	r0, [r1, #0]
    792a:	bd10      	pop	{r4, pc}
    792c:	4000f500 	.word	0x4000f500
    7930:	20001634 	.word	0x20001634
    7934:	4001f504 	.word	0x4001f504
    7938:	4805      	ldr	r0, [pc, #20]	; (7950 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    793a:	b510      	push	{r4, lr}
    793c:	2100      	movs	r1, #0
    793e:	6001      	str	r1, [r0, #0]
    7940:	6001      	str	r1, [r0, #0]
    7942:	f7ff ff51 	bl	77e8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    7946:	4903      	ldr	r1, [pc, #12]	; (7954 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    7948:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    794c:	6008      	str	r0, [r1, #0]
    794e:	bd10      	pop	{r4, pc}
    7950:	4000f500 	.word	0x4000f500
    7954:	4001f508 	.word	0x4001f508

00007958 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    7958:	4805      	ldr	r0, [pc, #20]	; (7970 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    795a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    795e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    7962:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7966:	2100      	movs	r1, #0
    7968:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    796c:	4770      	bx	lr
    796e:	0000      	.short	0x0000
    7970:	40001000 	.word	0x40001000

00007974 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    7974:	4904      	ldr	r1, [pc, #16]	; (7988 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    7976:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    797a:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    797e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    7982:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    7986:	4770      	bx	lr
    7988:	40001000 	.word	0x40001000

0000798c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    798c:	4902      	ldr	r1, [pc, #8]	; (7998 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    798e:	5c08      	ldrb	r0, [r1, r0]
    7990:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    7994:	4770      	bx	lr
    7996:	0000      	.short	0x0000
    7998:	0000862e 	.word	0x0000862e

0000799c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    799c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    799e:	4c24      	ldr	r4, [pc, #144]	; (7a30 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    79a0:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    79a4:	f010 0f10 	tst.w	r0, #16
    79a8:	d001      	beq.n	79ae <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    79aa:	2701      	movs	r7, #1
    79ac:	e000      	b.n	79b0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    79ae:	2700      	movs	r7, #0
    79b0:	2010      	movs	r0, #16
    79b2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    79b6:	2002      	movs	r0, #2
    79b8:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    79bc:	481d      	ldr	r0, [pc, #116]	; (7a34 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    79be:	2500      	movs	r5, #0
    79c0:	491d      	ldr	r1, [pc, #116]	; (7a38 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    79c2:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
    79c6:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    79ca:	6008      	str	r0, [r1, #0]
    79cc:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    79d0:	f44f 7688 	mov.w	r6, #272	; 0x110
    79d4:	f010 0fff 	tst.w	r0, #255	; 0xff
    79d8:	d019      	beq.n	7a0e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    79da:	20ff      	movs	r0, #255	; 0xff
    79dc:	f88d 0000 	strb.w	r0, [sp]
    79e0:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    79e4:	2001      	movs	r0, #1
    79e6:	6120      	str	r0, [r4, #16]
    79e8:	e005      	b.n	79f6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    79ea:	bf00      	nop
    79ec:	f89d 0000 	ldrb.w	r0, [sp]
    79f0:	1e40      	subs	r0, r0, #1
    79f2:	f88d 0000 	strb.w	r0, [sp]
    79f6:	f89d 0000 	ldrb.w	r0, [sp]
    79fa:	b128      	cbz	r0, 7a08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    79fc:	4631      	mov	r1, r6
    79fe:	4620      	mov	r0, r4
    7a00:	f008 fd71 	bl	104e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7a04:	2800      	cmp	r0, #0
    7a06:	d0f1      	beq.n	79ec <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    7a08:	f89d 0000 	ldrb.w	r0, [sp]
    7a0c:	b158      	cbz	r0, 7a26 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    7a0e:	f000 fc23 	bl	8258 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    7a12:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7a16:	f000 fd8b 	bl	8530 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    7a1a:	2f00      	cmp	r7, #0
    7a1c:	d002      	beq.n	7a24 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    7a1e:	2010      	movs	r0, #16
    7a20:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a26:	f640 0194 	movw	r1, #2196	; 0x894
    7a2a:	203e      	movs	r0, #62	; 0x3e
    7a2c:	f7f8 ffc0 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a30:	40001000 	.word	0x40001000
    7a34:	20001200 	.word	0x20001200
    7a38:	4001f508 	.word	0x4001f508

00007a3c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    7a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a40:	4d18      	ldr	r5, [pc, #96]	; (7aa4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    7a42:	4607      	mov	r7, r0
    7a44:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
    7a48:	07c2      	lsls	r2, r0, #31
    7a4a:	d00f      	beq.n	7a6c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    7a4c:	4c16      	ldr	r4, [pc, #88]	; (7aa8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    7a4e:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    7a52:	f042 0201 	orr.w	r2, r2, #1
    7a56:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    7a5a:	f040 0002 	orr.w	r0, r0, #2
    7a5e:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    7a62:	2601      	movs	r6, #1
    7a64:	b13f      	cbz	r7, 7a76 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    7a66:	2f01      	cmp	r7, #1
    7a68:	d00b      	beq.n	7a82 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    7a6a:	e010      	b.n	7a8e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7a6c:	f240 716f 	movw	r1, #1903	; 0x76f
    7a70:	203e      	movs	r0, #62	; 0x3e
    7a72:	f7f8 ff9d 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a76:	4608      	mov	r0, r1
    7a78:	f000 fdb4 	bl	85e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    7a7c:	726e      	strb	r6, [r5, #9]
    7a7e:	6026      	str	r6, [r4, #0]
    7a80:	e005      	b.n	7a8e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7a82:	4608      	mov	r0, r1
    7a84:	f000 fd94 	bl	85b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    7a88:	2002      	movs	r0, #2
    7a8a:	7268      	strb	r0, [r5, #9]
    7a8c:	6066      	str	r6, [r4, #4]
    7a8e:	4807      	ldr	r0, [pc, #28]	; (7aac <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7a90:	64c6      	str	r6, [r0, #76]	; 0x4c
    7a92:	4806      	ldr	r0, [pc, #24]	; (7aac <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7a94:	300c      	adds	r0, #12
    7a96:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    7a9a:	4638      	mov	r0, r7
    7a9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7aa0:	f000 bd18 	b.w	84d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    7aa4:	20001200 	.word	0x20001200
    7aa8:	40001000 	.word	0x40001000
    7aac:	40008000 	.word	0x40008000

00007ab0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    7ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7ab4:	4c2c      	ldr	r4, [pc, #176]	; (7b68 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    7ab6:	0006      	movs	r6, r0
    7ab8:	4d2c      	ldr	r5, [pc, #176]	; (7b6c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    7aba:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    7abe:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 7b70 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    7ac2:	f040 0002 	orr.w	r0, r0, #2
    7ac6:	4689      	mov	r9, r1
    7ac8:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    7acc:	f04f 0700 	mov.w	r7, #0
    7ad0:	d002      	beq.n	7ad8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    7ad2:	2e01      	cmp	r6, #1
    7ad4:	d020      	beq.n	7b18 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    7ad6:	e036      	b.n	7b46 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    7ad8:	4608      	mov	r0, r1
    7ada:	f000 fd83 	bl	85e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    7ade:	2001      	movs	r0, #1
    7ae0:	7260      	strb	r0, [r4, #9]
    7ae2:	79e0      	ldrb	r0, [r4, #7]
    7ae4:	2801      	cmp	r0, #1
    7ae6:	d105      	bne.n	7af4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    7ae8:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7aec:	f040 0008 	orr.w	r0, r0, #8
    7af0:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7af4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7af6:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    7afa:	6260      	str	r0, [r4, #36]	; 0x24
    7afc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    7b00:	f8c8 0000 	str.w	r0, [r8]
    7b04:	491b      	ldr	r1, [pc, #108]	; (7b74 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    7b06:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    7b0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7b0e:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    7b12:	fbb0 f7f1 	udiv	r7, r0, r1
    7b16:	e016      	b.n	7b46 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    7b18:	4608      	mov	r0, r1
    7b1a:	f000 fd49 	bl	85b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    7b1e:	2002      	movs	r0, #2
    7b20:	7260      	strb	r0, [r4, #9]
    7b22:	79e0      	ldrb	r0, [r4, #7]
    7b24:	2801      	cmp	r0, #1
    7b26:	d105      	bne.n	7b34 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    7b28:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7b2c:	f040 0004 	orr.w	r0, r0, #4
    7b30:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7b34:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7b36:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    7b3a:	6260      	str	r0, [r4, #36]	; 0x24
    7b3c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    7b40:	f8c8 0000 	str.w	r0, [r8]
    7b44:	2729      	movs	r7, #41	; 0x29
    7b46:	f000 fbf3 	bl	8330 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    7b4a:	f008 fd14 	bl	10576 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    7b4e:	b120      	cbz	r0, 7b5a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    7b50:	f7ff ff24 	bl	799c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7b54:	2000      	movs	r0, #0
    7b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7b5a:	2100      	movs	r1, #0
    7b5c:	4630      	mov	r0, r6
    7b5e:	f000 fcb9 	bl	84d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    7b62:	4638      	mov	r0, r7
    7b64:	e7f7      	b.n	7b56 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    7b66:	0000      	.short	0x0000
    7b68:	20001200 	.word	0x20001200
    7b6c:	40001000 	.word	0x40001000
    7b70:	4001f504 	.word	0x4001f504
    7b74:	00008628 	.word	0x00008628

00007b78 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    7b78:	4a02      	ldr	r2, [pc, #8]	; (7b84 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    7b7a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    7b7c:	6003      	str	r3, [r0, #0]
    7b7e:	6b10      	ldr	r0, [r2, #48]	; 0x30
    7b80:	6008      	str	r0, [r1, #0]
    7b82:	4770      	bx	lr
    7b84:	20001200 	.word	0x20001200

00007b88 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    7b88:	b510      	push	{r4, lr}
    7b8a:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    7b8c:	4901      	ldr	r1, [pc, #4]	; (7b94 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    7b8e:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    7b92:	bd10      	pop	{r4, pc}
    7b94:	200011f0 	.word	0x200011f0

00007b98 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    7b98:	490f      	ldr	r1, [pc, #60]	; (7bd8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    7b9a:	b510      	push	{r4, lr}
    7b9c:	69ca      	ldr	r2, [r1, #28]
    7b9e:	4282      	cmp	r2, r0
    7ba0:	d302      	bcc.n	7ba8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    7ba2:	f640 1124 	movw	r1, #2340	; 0x924
    7ba6:	e00b      	b.n	7bc0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    7ba8:	2201      	movs	r2, #1
    7baa:	730a      	strb	r2, [r1, #12]
    7bac:	6108      	str	r0, [r1, #16]
    7bae:	490b      	ldr	r1, [pc, #44]	; (7bdc <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    7bb0:	644a      	str	r2, [r1, #68]	; 0x44
    7bb2:	1d0a      	adds	r2, r1, #4
    7bb4:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    7bb8:	4283      	cmp	r3, r0
    7bba:	d304      	bcc.n	7bc6 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    7bbc:	f640 112d 	movw	r1, #2349	; 0x92d
    7bc0:	203e      	movs	r0, #62	; 0x3e
    7bc2:	f7f8 fef5 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bc6:	2300      	movs	r3, #0
    7bc8:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    7bcc:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    7bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7bd4:	f000 bc52 	b.w	847c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>
    7bd8:	20001200 	.word	0x20001200
    7bdc:	40008000 	.word	0x40008000

00007be0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    7be0:	b570      	push	{r4, r5, r6, lr}
    7be2:	4c0f      	ldr	r4, [pc, #60]	; (7c20 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    7be4:	4603      	mov	r3, r0
    7be6:	2002      	movs	r0, #2
    7be8:	7320      	strb	r0, [r4, #12]
    7bea:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    7bee:	2096      	movs	r0, #150	; 0x96
    7bf0:	f894 1020 	ldrb.w	r1, [r4, #32]
    7bf4:	7d22      	ldrb	r2, [r4, #20]
    7bf6:	2d01      	cmp	r5, #1
    7bf8:	d00e      	beq.n	7c18 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    7bfa:	f000 fd51 	bl	86a0 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    7bfe:	6120      	str	r0, [r4, #16]
    7c00:	4808      	ldr	r0, [pc, #32]	; (7c24 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    7c02:	2100      	movs	r1, #0
    7c04:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    7c08:	6921      	ldr	r1, [r4, #16]
    7c0a:	69e0      	ldr	r0, [r4, #28]
    7c0c:	4408      	add	r0, r1
    7c0e:	4905      	ldr	r1, [pc, #20]	; (7c24 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    7c10:	1d09      	adds	r1, r1, #4
    7c12:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7c16:	bd70      	pop	{r4, r5, r6, pc}
    7c18:	f000 fd60 	bl	86dc <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    7c1c:	e7ef      	b.n	7bfe <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    7c1e:	0000      	.short	0x0000
    7c20:	20001200 	.word	0x20001200
    7c24:	40008000 	.word	0x40008000

00007c28 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    7c28:	b510      	push	{r4, lr}
    7c2a:	f008 fdca 	bl	107c2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    7c2e:	2800      	cmp	r0, #0
    7c30:	d006      	beq.n	7c40 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    7c32:	4804      	ldr	r0, [pc, #16]	; (7c44 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    7c34:	6801      	ldr	r1, [r0, #0]
    7c36:	f021 0101 	bic.w	r1, r1, #1
    7c3a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    7c3e:	6001      	str	r1, [r0, #0]
    7c40:	bd10      	pop	{r4, pc}
    7c42:	0000      	.short	0x0000
    7c44:	40001774 	.word	0x40001774

00007c48 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    7c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7c4c:	2234      	movs	r2, #52	; 0x34
    7c4e:	2100      	movs	r1, #0
    7c50:	4813      	ldr	r0, [pc, #76]	; (7ca0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    7c52:	f008 feae 	bl	109b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7c56:	f000 fc6b 	bl	8530 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    7c5a:	f008 fd6b 	bl	10734 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    7c5e:	4d11      	ldr	r5, [pc, #68]	; (7ca4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7c60:	4e10      	ldr	r6, [pc, #64]	; (7ca4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7c62:	2400      	movs	r4, #0
    7c64:	4f0f      	ldr	r7, [pc, #60]	; (7ca4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7c66:	3508      	adds	r5, #8
    7c68:	3610      	adds	r6, #16
    7c6a:	b928      	cbnz	r0, 7c78 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    7c6c:	f008 fd79 	bl	10762 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    7c70:	b910      	cbnz	r0, 7c78 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    7c72:	f008 fd80 	bl	10776 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    7c76:	b108      	cbz	r0, 7c7c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    7c78:	2224      	movs	r2, #36	; 0x24
    7c7a:	e006      	b.n	7c8a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    7c7c:	f008 fdbb 	bl	107f6 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    7c80:	b910      	cbnz	r0, 7c88 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    7c82:	f008 fdae 	bl	107e2 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    7c86:	b140      	cbz	r0, 7c9a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    7c88:	2240      	movs	r2, #64	; 0x40
    7c8a:	21ff      	movs	r1, #255	; 0xff
    7c8c:	4638      	mov	r0, r7
    7c8e:	f008 fe90 	bl	109b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7c92:	602c      	str	r4, [r5, #0]
    7c94:	6034      	str	r4, [r6, #0]
    7c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c9a:	2238      	movs	r2, #56	; 0x38
    7c9c:	e7f5      	b.n	7c8a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    7c9e:	0000      	.short	0x0000
    7ca0:	20001200 	.word	0x20001200
    7ca4:	40000e00 	.word	0x40000e00

00007ca8 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    7ca8:	4801      	ldr	r0, [pc, #4]	; (7cb0 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    7caa:	69c0      	ldr	r0, [r0, #28]
    7cac:	4770      	bx	lr
    7cae:	0000      	.short	0x0000
    7cb0:	20001200 	.word	0x20001200

00007cb4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    7cb4:	4801      	ldr	r0, [pc, #4]	; (7cbc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x8>)
    7cb6:	f890 0020 	ldrb.w	r0, [r0, #32]
    7cba:	4770      	bx	lr
    7cbc:	20001200 	.word	0x20001200

00007cc0 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    7cc0:	4801      	ldr	r0, [pc, #4]	; (7cc8 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    7cc2:	6980      	ldr	r0, [r0, #24]
    7cc4:	4770      	bx	lr
    7cc6:	0000      	.short	0x0000
    7cc8:	20001200 	.word	0x20001200

00007ccc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    7ccc:	b510      	push	{r4, lr}
    7cce:	f000 fbe3 	bl	8498 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>
    7cd2:	f7ff fe63 	bl	799c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7cd6:	f004 fbab 	bl	c430 <mpsl_fem_disable>
    7cda:	b130      	cbz	r0, 7cea <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    7cdc:	1c40      	adds	r0, r0, #1
    7cde:	d004      	beq.n	7cea <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    7ce0:	f240 5165 	movw	r1, #1381	; 0x565
    7ce4:	203e      	movs	r0, #62	; 0x3e
    7ce6:	f7f8 fe63 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7cea:	480f      	ldr	r0, [pc, #60]	; (7d28 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    7cec:	4a0f      	ldr	r2, [pc, #60]	; (7d2c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    7cee:	6a41      	ldr	r1, [r0, #36]	; 0x24
    7cf0:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    7cf4:	6011      	str	r1, [r2, #0]
    7cf6:	2400      	movs	r4, #0
    7cf8:	6244      	str	r4, [r0, #36]	; 0x24
    7cfa:	7304      	strb	r4, [r0, #12]
    7cfc:	61c4      	str	r4, [r0, #28]
    7cfe:	6184      	str	r4, [r0, #24]
    7d00:	f000 fbca 	bl	8498 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>
    7d04:	480a      	ldr	r0, [pc, #40]	; (7d30 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    7d06:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    7d0a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    7d0e:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    7d12:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    7d16:	2001      	movs	r0, #1
    7d18:	f008 fbd4 	bl	104c4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    7d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7d20:	2001      	movs	r0, #1
    7d22:	f008 bbc2 	b.w	104aa <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    7d26:	0000      	.short	0x0000
    7d28:	20001200 	.word	0x20001200
    7d2c:	4001f508 	.word	0x4001f508
    7d30:	40008000 	.word	0x40008000

00007d34 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    7d34:	b570      	push	{r4, r5, r6, lr}
    7d36:	2001      	movs	r0, #1
    7d38:	f008 fbc4 	bl	104c4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    7d3c:	4c37      	ldr	r4, [pc, #220]	; (7e1c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    7d3e:	2000      	movs	r0, #0
    7d40:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    7d44:	2001      	movs	r0, #1
    7d46:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    7d4a:	f008 fd2a 	bl	107a2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    7d4e:	4d34      	ldr	r5, [pc, #208]	; (7e20 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    7d50:	b118      	cbz	r0, 7d5a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    7d52:	6828      	ldr	r0, [r5, #0]
    7d54:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    7d58:	6028      	str	r0, [r5, #0]
    7d5a:	f008 fd16 	bl	1078a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7d5e:	b128      	cbz	r0, 7d6c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    7d60:	6828      	ldr	r0, [r5, #0]
    7d62:	4930      	ldr	r1, [pc, #192]	; (7e24 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    7d64:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    7d68:	4308      	orrs	r0, r1
    7d6a:	6028      	str	r0, [r5, #0]
    7d6c:	f008 fd29 	bl	107c2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    7d70:	b138      	cbz	r0, 7d82 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    7d72:	482b      	ldr	r0, [pc, #172]	; (7e20 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    7d74:	1d00      	adds	r0, r0, #4
    7d76:	6801      	ldr	r1, [r0, #0]
    7d78:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    7d7c:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    7d80:	6001      	str	r1, [r0, #0]
    7d82:	4927      	ldr	r1, [pc, #156]	; (7e20 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    7d84:	4828      	ldr	r0, [pc, #160]	; (7e28 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    7d86:	313c      	adds	r1, #60	; 0x3c
    7d88:	6008      	str	r0, [r1, #0]
    7d8a:	f004 fb8b 	bl	c4a4 <mpsl_fem_device_config_254_apply_get>
    7d8e:	b140      	cbz	r0, 7da2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    7d90:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    7d94:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    7d98:	1c41      	adds	r1, r0, #1
    7d9a:	d002      	beq.n	7da2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    7d9c:	4920      	ldr	r1, [pc, #128]	; (7e20 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    7d9e:	3110      	adds	r1, #16
    7da0:	6008      	str	r0, [r1, #0]
    7da2:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    7da6:	6e00      	ldr	r0, [r0, #96]	; 0x60
    7da8:	1c41      	adds	r1, r0, #1
    7daa:	d004      	beq.n	7db6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    7dac:	491f      	ldr	r1, [pc, #124]	; (7e2c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    7dae:	680a      	ldr	r2, [r1, #0]
    7db0:	f360 4217 	bfi	r2, r0, #16, #8
    7db4:	600a      	str	r2, [r1, #0]
    7db6:	f240 1103 	movw	r1, #259	; 0x103
    7dba:	f240 605b 	movw	r0, #1627	; 0x65b
    7dbe:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    7dc2:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    7dc6:	2001      	movs	r0, #1
    7dc8:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    7dcc:	f000 f842 	bl	7e54 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    7dd0:	f240 2001 	movw	r0, #513	; 0x201
    7dd4:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    7dd8:	2002      	movs	r0, #2
    7dda:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    7dde:	4914      	ldr	r1, [pc, #80]	; (7e30 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    7de0:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    7de4:	6008      	str	r0, [r1, #0]
    7de6:	4913      	ldr	r1, [pc, #76]	; (7e34 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    7de8:	2000      	movs	r0, #0
    7dea:	8608      	strh	r0, [r1, #48]	; 0x30
    7dec:	3110      	adds	r1, #16
    7dee:	61c8      	str	r0, [r1, #28]
    7df0:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
    7df4:	2001      	movs	r0, #1
    7df6:	f008 fb58 	bl	104aa <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    7dfa:	2010      	movs	r0, #16
    7dfc:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7e00:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    7e04:	2002      	movs	r0, #2
    7e06:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    7e0a:	480b      	ldr	r0, [pc, #44]	; (7e38 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    7e0c:	6800      	ldr	r0, [r0, #0]
    7e0e:	2800      	cmp	r0, #0
    7e10:	d002      	beq.n	7e18 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    7e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7e16:	4700      	bx	r0
    7e18:	bd70      	pop	{r4, r5, r6, pc}
    7e1a:	0000      	.short	0x0000
    7e1c:	40001000 	.word	0x40001000
    7e20:	4000173c 	.word	0x4000173c
    7e24:	80000096 	.word	0x80000096
    7e28:	8900002c 	.word	0x8900002c
    7e2c:	4000158c 	.word	0x4000158c
    7e30:	4001f504 	.word	0x4001f504
    7e34:	200011f0 	.word	0x200011f0
    7e38:	200002dc 	.word	0x200002dc

00007e3c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    7e3c:	4901      	ldr	r1, [pc, #4]	; (7e44 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    7e3e:	7548      	strb	r0, [r1, #21]
    7e40:	4770      	bx	lr
    7e42:	0000      	.short	0x0000
    7e44:	20001200 	.word	0x20001200

00007e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    7e48:	4901      	ldr	r1, [pc, #4]	; (7e50 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    7e4a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    7e4e:	4770      	bx	lr
    7e50:	0000867c 	.word	0x0000867c

00007e54 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    7e54:	4908      	ldr	r1, [pc, #32]	; (7e78 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    7e56:	b510      	push	{r4, lr}
    7e58:	7508      	strb	r0, [r1, #20]
    7e5a:	4908      	ldr	r1, [pc, #32]	; (7e7c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    7e5c:	2801      	cmp	r0, #1
    7e5e:	d006      	beq.n	7e6e <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    7e60:	2802      	cmp	r0, #2
    7e62:	d006      	beq.n	7e72 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    7e64:	f640 516c 	movw	r1, #3436	; 0xd6c
    7e68:	203e      	movs	r0, #62	; 0x3e
    7e6a:	f7f8 fda1 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e6e:	2003      	movs	r0, #3
    7e70:	e000      	b.n	7e74 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    7e72:	2004      	movs	r0, #4
    7e74:	6008      	str	r0, [r1, #0]
    7e76:	bd10      	pop	{r4, pc}
    7e78:	20001200 	.word	0x20001200
    7e7c:	40001510 	.word	0x40001510

00007e80 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    7e80:	4905      	ldr	r1, [pc, #20]	; (7e98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    7e82:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    7e86:	4805      	ldr	r0, [pc, #20]	; (7e9c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    7e88:	f810 1f28 	ldrb.w	r1, [r0, #40]!
    7e8c:	f041 0101 	orr.w	r1, r1, #1
    7e90:	7001      	strb	r1, [r0, #0]
    7e92:	f000 ba13 	b.w	82bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    7e96:	0000      	.short	0x0000
    7e98:	40001000 	.word	0x40001000
    7e9c:	20001200 	.word	0x20001200

00007ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    7ea0:	4901      	ldr	r1, [pc, #4]	; (7ea8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    7ea2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    7ea6:	4770      	bx	lr
    7ea8:	00008688 	.word	0x00008688

00007eac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    7eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7eb0:	4e30      	ldr	r6, [pc, #192]	; (7f74 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    7eb2:	4c31      	ldr	r4, [pc, #196]	; (7f78 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    7eb4:	4688      	mov	r8, r1
    7eb6:	0007      	movs	r7, r0
    7eb8:	4615      	mov	r5, r2
    7eba:	f04f 0901 	mov.w	r9, #1
    7ebe:	d006      	beq.n	7ece <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    7ec0:	2f01      	cmp	r7, #1
    7ec2:	d012      	beq.n	7eea <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    7ec4:	f640 0117 	movw	r1, #2071	; 0x817
    7ec8:	203e      	movs	r0, #62	; 0x3e
    7eca:	f7f8 fd71 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ece:	4610      	mov	r0, r2
    7ed0:	f000 fb88 	bl	85e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    7ed4:	4829      	ldr	r0, [pc, #164]	; (7f7c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    7ed6:	f884 9009 	strb.w	r9, [r4, #9]
    7eda:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    7ede:	4640      	mov	r0, r8
    7ee0:	f000 fb2e 	bl	8540 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4cc>
    7ee4:	4605      	mov	r5, r0
    7ee6:	4630      	mov	r0, r6
    7ee8:	e00c      	b.n	7f04 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    7eea:	4610      	mov	r0, r2
    7eec:	f000 fb60 	bl	85b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    7ef0:	2002      	movs	r0, #2
    7ef2:	7260      	strb	r0, [r4, #9]
    7ef4:	f649 71ba 	movw	r1, #40890	; 0x9fba
    7ef8:	4640      	mov	r0, r8
    7efa:	f000 fb21 	bl	8540 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4cc>
    7efe:	4605      	mov	r5, r0
    7f00:	481c      	ldr	r0, [pc, #112]	; (7f74 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    7f02:	1d00      	adds	r0, r0, #4
    7f04:	f000 fada 	bl	84bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x448>
    7f08:	f8df 8074 	ldr.w	r8, [pc, #116]	; 7f80 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    7f0c:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    7f10:	f8df a074 	ldr.w	sl, [pc, #116]	; 7f88 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    7f14:	481b      	ldr	r0, [pc, #108]	; (7f84 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    7f16:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    7f1a:	2010      	movs	r0, #16
    7f1c:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    7f20:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7f22:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    7f26:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    7f2a:	6260      	str	r0, [r4, #36]	; 0x24
    7f2c:	4817      	ldr	r0, [pc, #92]	; (7f8c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    7f2e:	6006      	str	r6, [r0, #0]
    7f30:	f000 f9fe 	bl	8330 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    7f34:	4641      	mov	r1, r8
    7f36:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    7f3a:	4811      	ldr	r0, [pc, #68]	; (7f80 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    7f3c:	300c      	adds	r0, #12
    7f3e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    7f42:	42a8      	cmp	r0, r5
    7f44:	d310      	bcc.n	7f68 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    7f46:	2000      	movs	r0, #0
    7f48:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7f4c:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    7f50:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7f52:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    7f56:	6260      	str	r0, [r4, #36]	; 0x24
    7f58:	480c      	ldr	r0, [pc, #48]	; (7f8c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    7f5a:	1d00      	adds	r0, r0, #4
    7f5c:	6006      	str	r6, [r0, #0]
    7f5e:	f7ff fd1d 	bl	799c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7f62:	2000      	movs	r0, #0
    7f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7f68:	4629      	mov	r1, r5
    7f6a:	4638      	mov	r0, r7
    7f6c:	f000 fab2 	bl	84d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    7f70:	2001      	movs	r0, #1
    7f72:	e7f7      	b.n	7f64 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    7f74:	40001000 	.word	0x40001000
    7f78:	20001200 	.word	0x20001200
    7f7c:	00008628 	.word	0x00008628
    7f80:	40008000 	.word	0x40008000
    7f84:	40008140 	.word	0x40008140
    7f88:	4001f098 	.word	0x4001f098
    7f8c:	4001f504 	.word	0x4001f504

00007f90 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    7f90:	4b0d      	ldr	r3, [pc, #52]	; (7fc8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    7f92:	b510      	push	{r4, lr}
    7f94:	71d8      	strb	r0, [r3, #7]
    7f96:	729a      	strb	r2, [r3, #10]
    7f98:	b151      	cbz	r1, 7fb0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    7f9a:	2002      	movs	r0, #2
    7f9c:	7218      	strb	r0, [r3, #8]
    7f9e:	2801      	cmp	r0, #1
    7fa0:	d008      	beq.n	7fb4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    7fa2:	2802      	cmp	r0, #2
    7fa4:	d00f      	beq.n	7fc6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    7fa6:	f640 2144 	movw	r1, #2628	; 0xa44
    7faa:	203e      	movs	r0, #62	; 0x3e
    7fac:	f7f8 fd00 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fb0:	2001      	movs	r0, #1
    7fb2:	e7f3      	b.n	7f9c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    7fb4:	7a58      	ldrb	r0, [r3, #9]
    7fb6:	2802      	cmp	r0, #2
    7fb8:	d105      	bne.n	7fc6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    7fba:	f000 f943 	bl	8244 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    7fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7fc2:	f000 ba51 	b.w	8468 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f4>
    7fc6:	bd10      	pop	{r4, pc}
    7fc8:	20001200 	.word	0x20001200

00007fcc <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    7fcc:	4902      	ldr	r1, [pc, #8]	; (7fd8 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    7fce:	2000      	movs	r0, #0
    7fd0:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7fd4:	4770      	bx	lr
    7fd6:	0000      	.short	0x0000
    7fd8:	40008000 	.word	0x40008000

00007fdc <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    7fdc:	4904      	ldr	r1, [pc, #16]	; (7ff0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    7fde:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    7fe2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    7fe6:	4249      	negs	r1, r1
    7fe8:	7001      	strb	r1, [r0, #0]
    7fea:	2001      	movs	r0, #1
    7fec:	4770      	bx	lr
    7fee:	0000      	.short	0x0000
    7ff0:	40001000 	.word	0x40001000

00007ff4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    7ff4:	4903      	ldr	r1, [pc, #12]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7ff6:	0e02      	lsrs	r2, r0, #24
    7ff8:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    7ffc:	0200      	lsls	r0, r0, #8
    7ffe:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    8002:	4770      	bx	lr
    8004:	40001000 	.word	0x40001000

00008008 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    8008:	4901      	ldr	r1, [pc, #4]	; (8010 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    800a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    800e:	4770      	bx	lr
    8010:	40001000 	.word	0x40001000

00008014 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    8014:	b510      	push	{r4, lr}
    8016:	2200      	movs	r2, #0
    8018:	2901      	cmp	r1, #1
    801a:	d006      	beq.n	802a <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    801c:	2902      	cmp	r1, #2
    801e:	d002      	beq.n	8026 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    8020:	f240 21d2 	movw	r1, #722	; 0x2d2
    8024:	e014      	b.n	8050 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    8026:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    802a:	490b      	ldr	r1, [pc, #44]	; (8058 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    802c:	430a      	orrs	r2, r1
    802e:	490b      	ldr	r1, [pc, #44]	; (805c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    8030:	600a      	str	r2, [r1, #0]
    8032:	490b      	ldr	r1, [pc, #44]	; (8060 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    8034:	4308      	orrs	r0, r1
    8036:	4909      	ldr	r1, [pc, #36]	; (805c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    8038:	1d09      	adds	r1, r1, #4
    803a:	6008      	str	r0, [r1, #0]
    803c:	4809      	ldr	r0, [pc, #36]	; (8064 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    803e:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    8042:	b2c0      	uxtb	r0, r0
    8044:	2803      	cmp	r0, #3
    8046:	d001      	beq.n	804c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    8048:	280b      	cmp	r0, #11
    804a:	d104      	bne.n	8056 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    804c:	f240 21ea 	movw	r1, #746	; 0x2ea
    8050:	203e      	movs	r0, #62	; 0x3e
    8052:	f7f8 fcad 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8056:	bd10      	pop	{r4, pc}
    8058:	00100108 	.word	0x00100108
    805c:	40001514 	.word	0x40001514
    8060:	02030000 	.word	0x02030000
    8064:	40001000 	.word	0x40001000

00008068 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    8068:	4901      	ldr	r1, [pc, #4]	; (8070 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    806a:	7588      	strb	r0, [r1, #22]
    806c:	4770      	bx	lr
    806e:	0000      	.short	0x0000
    8070:	20001200 	.word	0x20001200

00008074 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    8074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8078:	4851      	ldr	r0, [pc, #324]	; (81c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    807a:	f04f 0a01 	mov.w	sl, #1
    807e:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    8082:	484f      	ldr	r0, [pc, #316]	; (81c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    8084:	300c      	adds	r0, #12
    8086:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    808a:	f008 fa72 	bl	10572 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    808e:	4c4d      	ldr	r4, [pc, #308]	; (81c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    8090:	e9c4 070b 	strd	r0, r7, [r4, #44]	; 0x2c
    8094:	f000 f8e0 	bl	8258 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    8098:	494b      	ldr	r1, [pc, #300]	; (81c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    809a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    809c:	6008      	str	r0, [r1, #0]
    809e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 81cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>
    80a2:	2000      	movs	r0, #0
    80a4:	6260      	str	r0, [r4, #36]	; 0x24
    80a6:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    80aa:	f240 131d 	movw	r3, #285	; 0x11d
    80ae:	439a      	bics	r2, r3
    80b0:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    80b4:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    80b8:	f000 f94e 	bl	8358 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e4>
    80bc:	4605      	mov	r5, r0
    80be:	4840      	ldr	r0, [pc, #256]	; (81c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    80c0:	3008      	adds	r0, #8
    80c2:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    80c6:	4e3e      	ldr	r6, [pc, #248]	; (81c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    80c8:	61e0      	str	r0, [r4, #28]
    80ca:	1d36      	adds	r6, r6, #4
    80cc:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    80d0:	61a0      	str	r0, [r4, #24]
    80d2:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    80d6:	7d21      	ldrb	r1, [r4, #20]
    80d8:	f884 1020 	strb.w	r1, [r4, #32]
    80dc:	7a61      	ldrb	r1, [r4, #9]
    80de:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    80e2:	46a1      	mov	r9, r4
    80e4:	2400      	movs	r4, #0
    80e6:	4639      	mov	r1, r7
    80e8:	4628      	mov	r0, r5
    80ea:	f000 f983 	bl	83f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x380>
    80ee:	b910      	cbnz	r0, 80f6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    80f0:	f8c8 a010 	str.w	sl, [r8, #16]
    80f4:	2401      	movs	r4, #1
    80f6:	4f33      	ldr	r7, [pc, #204]	; (81c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    80f8:	07e8      	lsls	r0, r5, #31
    80fa:	f1a7 0710 	sub.w	r7, r7, #16
    80fe:	d120      	bne.n	8142 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    8100:	07a8      	lsls	r0, r5, #30
    8102:	d527      	bpl.n	8154 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe0>
    8104:	f008 fb5d 	bl	107c2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8108:	b9f0      	cbnz	r0, 8148 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    810a:	f008 fb4a 	bl	107a2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    810e:	b9d8      	cbnz	r0, 8148 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    8110:	482f      	ldr	r0, [pc, #188]	; (81d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    8112:	6800      	ldr	r0, [r0, #0]
    8114:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    8118:	f3c0 6300 	ubfx	r3, r0, #24, #1
    811c:	f000 020f 	and.w	r2, r0, #15
    8120:	f3c0 1103 	ubfx	r1, r0, #4, #4
    8124:	f3c0 2803 	ubfx	r8, r0, #8, #4
    8128:	b173      	cbz	r3, 8148 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    812a:	b11a      	cbz	r2, 8134 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    812c:	b111      	cbz	r1, 8134 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    812e:	f1b8 0f00 	cmp.w	r8, #0
    8132:	d109      	bne.n	8148 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    8134:	f3c0 4004 	ubfx	r0, r0, #16, #5
    8138:	2801      	cmp	r0, #1
    813a:	d105      	bne.n	8148 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    813c:	f1bc 0f03 	cmp.w	ip, #3
    8140:	d202      	bcs.n	8148 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    8142:	6838      	ldr	r0, [r7, #0]
    8144:	4780      	blx	r0
    8146:	e00e      	b.n	8166 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    8148:	f345 0080 	sbfx	r0, r5, #2, #1
    814c:	4621      	mov	r1, r4
    814e:	1c40      	adds	r0, r0, #1
    8150:	687a      	ldr	r2, [r7, #4]
    8152:	e007      	b.n	8164 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf0>
    8154:	f015 0f28 	tst.w	r5, #40	; 0x28
    8158:	d005      	beq.n	8166 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    815a:	f345 1140 	sbfx	r1, r5, #5, #1
    815e:	68ba      	ldr	r2, [r7, #8]
    8160:	4620      	mov	r0, r4
    8162:	1c49      	adds	r1, r1, #1
    8164:	4790      	blx	r2
    8166:	06e8      	lsls	r0, r5, #27
    8168:	d501      	bpl.n	816e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    816a:	68f8      	ldr	r0, [r7, #12]
    816c:	4780      	blx	r0
    816e:	f899 1009 	ldrb.w	r1, [r9, #9]
    8172:	4648      	mov	r0, r9
    8174:	2902      	cmp	r1, #2
    8176:	d120      	bne.n	81ba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    8178:	7b01      	ldrb	r1, [r0, #12]
    817a:	2900      	cmp	r1, #0
    817c:	d01d      	beq.n	81ba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    817e:	2902      	cmp	r1, #2
    8180:	d004      	beq.n	818c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x118>
    8182:	2901      	cmp	r1, #1
    8184:	d009      	beq.n	819a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x126>
    8186:	f640 4156 	movw	r1, #3158	; 0xc56
    818a:	e00d      	b.n	81a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x134>
    818c:	69c1      	ldr	r1, [r0, #28]
    818e:	f8d9 0010 	ldr.w	r0, [r9, #16]
    8192:	4408      	add	r0, r1
    8194:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    8198:	e00b      	b.n	81b2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    819a:	6901      	ldr	r1, [r0, #16]
    819c:	f8d9 001c 	ldr.w	r0, [r9, #28]
    81a0:	4281      	cmp	r1, r0
    81a2:	d804      	bhi.n	81ae <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    81a4:	f640 4157 	movw	r1, #3159	; 0xc57
    81a8:	203e      	movs	r0, #62	; 0x3e
    81aa:	f7f8 fc01 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    81ae:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    81b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    81b6:	f000 b961 	b.w	847c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>
    81ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    81be:	0000      	.short	0x0000
    81c0:	40008000 	.word	0x40008000
    81c4:	20001200 	.word	0x20001200
    81c8:	4001f508 	.word	0x4001f508
    81cc:	40001000 	.word	0x40001000
    81d0:	40001450 	.word	0x40001450
    81d4:	480b      	ldr	r0, [pc, #44]	; (8204 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x190>)
    81d6:	7d81      	ldrb	r1, [r0, #22]
    81d8:	480b      	ldr	r0, [pc, #44]	; (8208 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x194>)
    81da:	5c40      	ldrb	r0, [r0, r1]
    81dc:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    81e0:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    81e4:	d204      	bcs.n	81f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17c>
    81e6:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    81ea:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    81ee:	e001      	b.n	81f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x180>
    81f0:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    81f4:	4a05      	ldr	r2, [pc, #20]	; (820c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x198>)
    81f6:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    81fa:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    81fe:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    8202:	4770      	bx	lr
    8204:	20001200 	.word	0x20001200
    8208:	0000862e 	.word	0x0000862e
    820c:	40001000 	.word	0x40001000
    8210:	b508      	push	{r3, lr}
    8212:	490b      	ldr	r1, [pc, #44]	; (8240 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
    8214:	466b      	mov	r3, sp
    8216:	f991 2015 	ldrsb.w	r2, [r1, #21]
    821a:	7d89      	ldrb	r1, [r1, #22]
    821c:	f000 faaa 	bl	8774 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    8220:	f99d 0000 	ldrsb.w	r0, [sp]
    8224:	f000 fa7a 	bl	871c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    8228:	f10d 0001 	add.w	r0, sp, #1
    822c:	f004 f924 	bl	c478 <mpsl_fem_pa_gain_set>
    8230:	2800      	cmp	r0, #0
    8232:	d004      	beq.n	823e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ca>
    8234:	f240 51e6 	movw	r1, #1510	; 0x5e6
    8238:	203e      	movs	r0, #62	; 0x3e
    823a:	f7f8 fbb9 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    823e:	bd08      	pop	{r3, pc}
    8240:	20001200 	.word	0x20001200
    8244:	4803      	ldr	r0, [pc, #12]	; (8254 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    8246:	7a01      	ldrb	r1, [r0, #8]
    8248:	2901      	cmp	r1, #1
    824a:	d102      	bne.n	8252 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1de>
    824c:	7a80      	ldrb	r0, [r0, #10]
    824e:	f7ff bfdf 	b.w	8210 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    8252:	4770      	bx	lr
    8254:	20001200 	.word	0x20001200
    8258:	480d      	ldr	r0, [pc, #52]	; (8290 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21c>)
    825a:	b510      	push	{r4, lr}
    825c:	7a40      	ldrb	r0, [r0, #9]
    825e:	2801      	cmp	r0, #1
    8260:	d00c      	beq.n	827c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x208>
    8262:	2802      	cmp	r0, #2
    8264:	d113      	bne.n	828e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    8266:	f004 f8e9 	bl	c43c <mpsl_fem_lna_configuration_clear>
    826a:	2800      	cmp	r0, #0
    826c:	d00f      	beq.n	828e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    826e:	1c40      	adds	r0, r0, #1
    8270:	d00d      	beq.n	828e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    8272:	f640 01ab 	movw	r1, #2219	; 0x8ab
    8276:	203e      	movs	r0, #62	; 0x3e
    8278:	f7f8 fb9a 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    827c:	f004 f8f0 	bl	c460 <mpsl_fem_pa_configuration_clear>
    8280:	2800      	cmp	r0, #0
    8282:	d004      	beq.n	828e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    8284:	1c40      	adds	r0, r0, #1
    8286:	d002      	beq.n	828e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    8288:	f640 01a5 	movw	r1, #2213	; 0x8a5
    828c:	e7f3      	b.n	8276 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x202>
    828e:	bd10      	pop	{r4, pc}
    8290:	20001200 	.word	0x20001200
    8294:	4808      	ldr	r0, [pc, #32]	; (82b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x244>)
    8296:	2100      	movs	r1, #0
    8298:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    829c:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    82a0:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    82a4:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    82a8:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    82ac:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    82b0:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    82b4:	4770      	bx	lr
    82b6:	0000      	.short	0x0000
    82b8:	40001000 	.word	0x40001000
    82bc:	4818      	ldr	r0, [pc, #96]	; (8320 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ac>)
    82be:	b510      	push	{r4, lr}
    82c0:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    82c4:	07c1      	lsls	r1, r0, #31
    82c6:	d029      	beq.n	831c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    82c8:	0781      	lsls	r1, r0, #30
    82ca:	d514      	bpl.n	82f6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x282>
    82cc:	4815      	ldr	r0, [pc, #84]	; (8324 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    82ce:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    82d2:	f041 0101 	orr.w	r1, r1, #1
    82d6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    82da:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    82de:	b2c0      	uxtb	r0, r0
    82e0:	280b      	cmp	r0, #11
    82e2:	d005      	beq.n	82f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    82e4:	280a      	cmp	r0, #10
    82e6:	d003      	beq.n	82f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    82e8:	2803      	cmp	r0, #3
    82ea:	d001      	beq.n	82f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    82ec:	2802      	cmp	r0, #2
    82ee:	d115      	bne.n	831c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    82f0:	f240 610f 	movw	r1, #1551	; 0x60f
    82f4:	e00f      	b.n	8316 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a2>
    82f6:	0740      	lsls	r0, r0, #29
    82f8:	d510      	bpl.n	831c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    82fa:	480a      	ldr	r0, [pc, #40]	; (8324 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    82fc:	490a      	ldr	r1, [pc, #40]	; (8328 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b4>)
    82fe:	3008      	adds	r0, #8
    8300:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    8304:	f44f 71a0 	mov.w	r1, #320	; 0x140
    8308:	4808      	ldr	r0, [pc, #32]	; (832c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b8>)
    830a:	f008 f8f1 	bl	104f0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    830e:	2800      	cmp	r0, #0
    8310:	d004      	beq.n	831c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    8312:	f240 6117 	movw	r1, #1559	; 0x617
    8316:	203e      	movs	r0, #62	; 0x3e
    8318:	f7f8 fb4a 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    831c:	bd10      	pop	{r4, pc}
    831e:	0000      	.short	0x0000
    8320:	20001200 	.word	0x20001200
    8324:	40001000 	.word	0x40001000
    8328:	4001f098 	.word	0x4001f098
    832c:	40008000 	.word	0x40008000
    8330:	4808      	ldr	r0, [pc, #32]	; (8354 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e0>)
    8332:	4601      	mov	r1, r0
    8334:	79c2      	ldrb	r2, [r0, #7]
    8336:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    833a:	b112      	cbz	r2, 8342 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ce>
    833c:	2a01      	cmp	r2, #1
    833e:	d003      	beq.n	8348 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d4>
    8340:	e006      	b.n	8350 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2dc>
    8342:	f041 0102 	orr.w	r1, r1, #2
    8346:	e001      	b.n	834c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d8>
    8348:	f041 0104 	orr.w	r1, r1, #4
    834c:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    8350:	f7ff bfb4 	b.w	82bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    8354:	20001200 	.word	0x20001200
    8358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    835c:	4d22      	ldr	r5, [pc, #136]	; (83e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x374>)
    835e:	2400      	movs	r4, #0
    8360:	7b28      	ldrb	r0, [r5, #12]
    8362:	b138      	cbz	r0, 8374 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    8364:	f44f 71a2 	mov.w	r1, #324	; 0x144
    8368:	4820      	ldr	r0, [pc, #128]	; (83ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x378>)
    836a:	f008 f8c1 	bl	104f0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    836e:	b108      	cbz	r0, 8374 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    8370:	2701      	movs	r7, #1
    8372:	e000      	b.n	8376 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x302>
    8374:	2700      	movs	r7, #0
    8376:	7a68      	ldrb	r0, [r5, #9]
    8378:	4e1d      	ldr	r6, [pc, #116]	; (83f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x37c>)
    837a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    837e:	2801      	cmp	r0, #1
    8380:	d002      	beq.n	8388 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x314>
    8382:	2802      	cmp	r0, #2
    8384:	d006      	beq.n	8394 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x320>
    8386:	e016      	b.n	83b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    8388:	4630      	mov	r0, r6
    838a:	f008 f8ac 	bl	104e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    838e:	b190      	cbz	r0, 83b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    8390:	2408      	movs	r4, #8
    8392:	e010      	b.n	83b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    8394:	4630      	mov	r0, r6
    8396:	f008 f8a6 	bl	104e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    839a:	b100      	cbz	r0, 839e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x32a>
    839c:	2402      	movs	r4, #2
    839e:	f8d6 0400 	ldr.w	r0, [r6, #1024]	; 0x400
    83a2:	43c0      	mvns	r0, r0
    83a4:	f340 0000 	sbfx	r0, r0, #0, #1
    83a8:	1c40      	adds	r0, r0, #1
    83aa:	d101      	bne.n	83b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x33c>
    83ac:	f044 0404 	orr.w	r4, r4, #4
    83b0:	b10f      	cbz	r7, 83b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    83b2:	f044 0401 	orr.w	r4, r4, #1
    83b6:	f014 0f0b 	tst.w	r4, #11
    83ba:	d107      	bne.n	83cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
    83bc:	f44f 7188 	mov.w	r1, #272	; 0x110
    83c0:	4630      	mov	r0, r6
    83c2:	f008 f890 	bl	104e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    83c6:	b108      	cbz	r0, 83cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
    83c8:	f044 0410 	orr.w	r4, r4, #16
    83cc:	f7ff ff62 	bl	8294 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x220>
    83d0:	06e0      	lsls	r0, r4, #27
    83d2:	d506      	bpl.n	83e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    83d4:	0720      	lsls	r0, r4, #28
    83d6:	d404      	bmi.n	83e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    83d8:	7a68      	ldrb	r0, [r5, #9]
    83da:	2801      	cmp	r0, #1
    83dc:	d101      	bne.n	83e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    83de:	f044 0420 	orr.w	r4, r4, #32
    83e2:	4620      	mov	r0, r4
    83e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    83e8:	20001200 	.word	0x20001200
    83ec:	40008000 	.word	0x40008000
    83f0:	40001000 	.word	0x40001000
    83f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    83f8:	4c1a      	ldr	r4, [pc, #104]	; (8464 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f0>)
    83fa:	460d      	mov	r5, r1
    83fc:	7a21      	ldrb	r1, [r4, #8]
    83fe:	b129      	cbz	r1, 840c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x398>
    8400:	f010 0f11 	tst.w	r0, #17
    8404:	d007      	beq.n	8416 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3a2>
    8406:	f7ff fac9 	bl	799c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    840a:	e024      	b.n	8456 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e2>
    840c:	f000 f890 	bl	8530 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    8410:	2000      	movs	r0, #0
    8412:	7320      	strb	r0, [r4, #12]
    8414:	e01f      	b.n	8456 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e2>
    8416:	2901      	cmp	r1, #1
    8418:	d001      	beq.n	841e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3aa>
    841a:	2601      	movs	r6, #1
    841c:	e000      	b.n	8420 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ac>
    841e:	2600      	movs	r6, #0
    8420:	79e0      	ldrb	r0, [r4, #7]
    8422:	2801      	cmp	r0, #1
    8424:	d00e      	beq.n	8444 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d0>
    8426:	2700      	movs	r7, #0
    8428:	f000 f882 	bl	8530 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    842c:	2196      	movs	r1, #150	; 0x96
    842e:	4630      	mov	r0, r6
    8430:	f000 f894 	bl	855c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e8>
    8434:	4601      	mov	r1, r0
    8436:	b14f      	cbz	r7, 844c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d8>
    8438:	353b      	adds	r5, #59	; 0x3b
    843a:	428d      	cmp	r5, r1
    843c:	d904      	bls.n	8448 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d4>
    843e:	2000      	movs	r0, #0
    8440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8444:	2701      	movs	r7, #1
    8446:	e7ef      	b.n	8428 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b4>
    8448:	2001      	movs	r0, #1
    844a:	71e0      	strb	r0, [r4, #7]
    844c:	7aa2      	ldrb	r2, [r4, #10]
    844e:	4630      	mov	r0, r6
    8450:	f7ff fd2c 	bl	7eac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    8454:	b108      	cbz	r0, 845a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e6>
    8456:	2001      	movs	r0, #1
    8458:	e7f2      	b.n	8440 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3cc>
    845a:	f640 21a5 	movw	r1, #2725	; 0xaa5
    845e:	203e      	movs	r0, #62	; 0x3e
    8460:	f7f8 faa6 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8464:	20001200 	.word	0x20001200
    8468:	4803      	ldr	r0, [pc, #12]	; (8478 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x404>)
    846a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    846e:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    8472:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    8476:	4770      	bx	lr
    8478:	40001000 	.word	0x40001000
    847c:	4804      	ldr	r0, [pc, #16]	; (8490 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
    847e:	6a41      	ldr	r1, [r0, #36]	; 0x24
    8480:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    8484:	6241      	str	r1, [r0, #36]	; 0x24
    8486:	4903      	ldr	r1, [pc, #12]	; (8494 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x420>)
    8488:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    848c:	6008      	str	r0, [r1, #0]
    848e:	4770      	bx	lr
    8490:	20001200 	.word	0x20001200
    8494:	4001f504 	.word	0x4001f504
    8498:	4a07      	ldr	r2, [pc, #28]	; (84b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    849a:	2000      	movs	r0, #0
    849c:	3208      	adds	r2, #8
    849e:	4906      	ldr	r1, [pc, #24]	; (84b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    84a0:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    84a4:	1d0a      	adds	r2, r1, #4
    84a6:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    84aa:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    84ae:	4902      	ldr	r1, [pc, #8]	; (84b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    84b0:	310c      	adds	r1, #12
    84b2:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    84b6:	4770      	bx	lr
    84b8:	40008000 	.word	0x40008000
    84bc:	4903      	ldr	r1, [pc, #12]	; (84cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x458>)
    84be:	79c9      	ldrb	r1, [r1, #7]
    84c0:	2900      	cmp	r1, #0
    84c2:	d102      	bne.n	84ca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x456>
    84c4:	4902      	ldr	r1, [pc, #8]	; (84d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45c>)
    84c6:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    84ca:	4770      	bx	lr
    84cc:	20001200 	.word	0x20001200
    84d0:	4001f098 	.word	0x4001f098
    84d4:	b510      	push	{r4, lr}
    84d6:	4a14      	ldr	r2, [pc, #80]	; (8528 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    84d8:	b120      	cbz	r0, 84e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x470>
    84da:	2801      	cmp	r0, #1
    84dc:	d011      	beq.n	8502 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x48e>
    84de:	f240 7153 	movw	r1, #1875	; 0x753
    84e2:	e01c      	b.n	851e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4aa>
    84e4:	f101 0028 	add.w	r0, r1, #40	; 0x28
    84e8:	e9c2 1002 	strd	r1, r0, [r2, #8]
    84ec:	490f      	ldr	r1, [pc, #60]	; (852c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b8>)
    84ee:	480e      	ldr	r0, [pc, #56]	; (8528 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    84f0:	f003 ffbc 	bl	c46c <mpsl_fem_pa_configuration_set>
    84f4:	2800      	cmp	r0, #0
    84f6:	d015      	beq.n	8524 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    84f8:	1c40      	adds	r0, r0, #1
    84fa:	d013      	beq.n	8524 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    84fc:	f240 7142 	movw	r1, #1858	; 0x742
    8500:	e00d      	b.n	851e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4aa>
    8502:	f101 0029 	add.w	r0, r1, #41	; 0x29
    8506:	e9c2 1002 	strd	r1, r0, [r2, #8]
    850a:	4908      	ldr	r1, [pc, #32]	; (852c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b8>)
    850c:	4806      	ldr	r0, [pc, #24]	; (8528 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    850e:	f003 ff9b 	bl	c448 <mpsl_fem_lna_configuration_set>
    8512:	2800      	cmp	r0, #0
    8514:	d006      	beq.n	8524 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    8516:	1c40      	adds	r0, r0, #1
    8518:	d004      	beq.n	8524 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    851a:	f240 714f 	movw	r1, #1871	; 0x74f
    851e:	203e      	movs	r0, #62	; 0x3e
    8520:	f7f8 fa46 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8524:	bd10      	pop	{r4, pc}
    8526:	0000      	.short	0x0000
    8528:	200002e0 	.word	0x200002e0
    852c:	00008658 	.word	0x00008658
    8530:	4802      	ldr	r0, [pc, #8]	; (853c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4c8>)
    8532:	2100      	movs	r1, #0
    8534:	71c1      	strb	r1, [r0, #7]
    8536:	7201      	strb	r1, [r0, #8]
    8538:	7241      	strb	r1, [r0, #9]
    853a:	4770      	bx	lr
    853c:	20001200 	.word	0x20001200
    8540:	4a05      	ldr	r2, [pc, #20]	; (8558 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e4>)
    8542:	79d2      	ldrb	r2, [r2, #7]
    8544:	2a01      	cmp	r2, #1
    8546:	d006      	beq.n	8556 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e2>
    8548:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    854c:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    8550:	fbb1 f1f2 	udiv	r1, r1, r2
    8554:	1a40      	subs	r0, r0, r1
    8556:	4770      	bx	lr
    8558:	20001200 	.word	0x20001200
    855c:	b570      	push	{r4, r5, r6, lr}
    855e:	4c13      	ldr	r4, [pc, #76]	; (85ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x538>)
    8560:	4603      	mov	r3, r0
    8562:	460d      	mov	r5, r1
    8564:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    8568:	2000      	movs	r0, #0
    856a:	b15a      	cbz	r2, 8584 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x510>
    856c:	4621      	mov	r1, r4
    856e:	f891 1020 	ldrb.w	r1, [r1, #32]
    8572:	b163      	cbz	r3, 858e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x51a>
    8574:	2b01      	cmp	r3, #1
    8576:	d111      	bne.n	859c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x528>
    8578:	2a01      	cmp	r2, #1
    857a:	4628      	mov	r0, r5
    857c:	d012      	beq.n	85a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x530>
    857e:	f007 ffbc 	bl	104fa <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    8582:	e009      	b.n	8598 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    8584:	f640 0158 	movw	r1, #2136	; 0x858
    8588:	203e      	movs	r0, #62	; 0x3e
    858a:	f7f8 fa11 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    858e:	2a01      	cmp	r2, #1
    8590:	4628      	mov	r0, r5
    8592:	d004      	beq.n	859e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x52a>
    8594:	f007 ffbf 	bl	10516 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    8598:	69e1      	ldr	r1, [r4, #28]
    859a:	4408      	add	r0, r1
    859c:	bd70      	pop	{r4, r5, r6, pc}
    859e:	f000 f8d1 	bl	8744 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    85a2:	e7f9      	b.n	8598 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    85a4:	f000 f8c0 	bl	8728 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    85a8:	e7f6      	b.n	8598 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    85aa:	0000      	.short	0x0000
    85ac:	20001200 	.word	0x20001200
    85b0:	b510      	push	{r4, lr}
    85b2:	f7ff fc4f 	bl	7e54 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    85b6:	f7ff fe0d 	bl	81d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    85ba:	f7ff fe43 	bl	8244 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    85be:	f7ff ff53 	bl	8468 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f4>
    85c2:	f008 f8fe 	bl	107c2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    85c6:	2800      	cmp	r0, #0
    85c8:	d108      	bne.n	85dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x568>
    85ca:	f008 f8ea 	bl	107a2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    85ce:	2800      	cmp	r0, #0
    85d0:	d104      	bne.n	85dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x568>
    85d2:	4803      	ldr	r0, [pc, #12]	; (85e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x56c>)
    85d4:	6801      	ldr	r1, [r0, #0]
    85d6:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    85da:	6001      	str	r1, [r0, #0]
    85dc:	bd10      	pop	{r4, pc}
    85de:	0000      	.short	0x0000
    85e0:	40001568 	.word	0x40001568
    85e4:	b510      	push	{r4, lr}
    85e6:	4604      	mov	r4, r0
    85e8:	f7ff fc34 	bl	7e54 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    85ec:	f7ff fdf2 	bl	81d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    85f0:	4620      	mov	r0, r4
    85f2:	f7ff fe0d 	bl	8210 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    85f6:	f008 f8e4 	bl	107c2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    85fa:	2800      	cmp	r0, #0
    85fc:	d00d      	beq.n	861a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a6>
    85fe:	4a09      	ldr	r2, [pc, #36]	; (8624 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5b0>)
    8600:	6811      	ldr	r1, [r2, #0]
    8602:	0650      	lsls	r0, r2, #25
    8604:	2c02      	cmp	r4, #2
    8606:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    860a:	d007      	beq.n	861c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a8>
    860c:	f3c0 2006 	ubfx	r0, r0, #8, #7
    8610:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    8614:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    8618:	6010      	str	r0, [r2, #0]
    861a:	bd10      	pop	{r4, pc}
    861c:	f3c0 6006 	ubfx	r0, r0, #24, #7
    8620:	e7f6      	b.n	8610 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x59c>
    8622:	0000      	.short	0x0000
    8624:	40001588 	.word	0x40001588
    8628:	a62c0000 	.word	0xa62c0000
    862c:	0604a1e0 	.word	0x0604a1e0
    8630:	0e0c0a08 	.word	0x0e0c0a08
    8634:	16141210 	.word	0x16141210
    8638:	201e1c18 	.word	0x201e1c18
    863c:	28262422 	.word	0x28262422
    8640:	302e2c2a 	.word	0x302e2c2a
    8644:	38363432 	.word	0x38363432
    8648:	403e3c3a 	.word	0x403e3c3a
    864c:	48464442 	.word	0x48464442
    8650:	024e4c4a 	.word	0x024e4c4a
    8654:	0000501a 	.word	0x0000501a
    8658:	00000001 	.word	0x00000001
    865c:	40001110 	.word	0x40001110
	...
    8674:	00001e14 	.word	0x00001e14
    8678:	00001130 	.word	0x00001130
    867c:	00000000 	.word	0x00000000
    8680:	00000028 	.word	0x00000028
    8684:	00000018 	.word	0x00000018
    8688:	00000000 	.word	0x00000000
    868c:	00001e14 	.word	0x00001e14
    8690:	00001130 	.word	0x00001130
    8694:	00000000 	.word	0x00000000
    8698:	00001770 	.word	0x00001770
    869c:	00000fa0 	.word	0x00000fa0

000086a0 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    86a0:	b570      	push	{r4, r5, r6, lr}
    86a2:	4605      	mov	r5, r0
    86a4:	4614      	mov	r4, r2
    86a6:	4608      	mov	r0, r1
    86a8:	f7ff fbfa 	bl	7ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    86ac:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    86b0:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    86b4:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    86b8:	4807      	ldr	r0, [pc, #28]	; (86d8 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    86ba:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    86be:	4408      	add	r0, r1
    86c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    86c4:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    86c8:	fbb0 f5f1 	udiv	r5, r0, r1
    86cc:	4620      	mov	r0, r4
    86ce:	f7ff fbbb 	bl	7e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    86d2:	4428      	add	r0, r5
    86d4:	1d40      	adds	r0, r0, #5
    86d6:	bd70      	pop	{r4, r5, r6, pc}
    86d8:	00008768 	.word	0x00008768

000086dc <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    86dc:	b570      	push	{r4, r5, r6, lr}
    86de:	4d0e      	ldr	r5, [pc, #56]	; (8718 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    86e0:	461c      	mov	r4, r3
    86e2:	3d08      	subs	r5, #8
    86e4:	4b0c      	ldr	r3, [pc, #48]	; (8718 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    86e6:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    86ea:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    86ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    86f2:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    86f6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    86fa:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    86fe:	4418      	add	r0, r3
    8700:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8704:	fbb0 f5f1 	udiv	r5, r0, r1
    8708:	4610      	mov	r0, r2
    870a:	f7ff fb9d 	bl	7e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    870e:	4428      	add	r0, r5
    8710:	4420      	add	r0, r4
    8712:	1d40      	adds	r0, r0, #5
    8714:	bd70      	pop	{r4, r5, r6, pc}
    8716:	0000      	.short	0x0000
    8718:	00008768 	.word	0x00008768

0000871c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    871c:	4901      	ldr	r1, [pc, #4]	; (8724 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    871e:	b2c0      	uxtb	r0, r0
    8720:	6008      	str	r0, [r1, #0]
    8722:	4770      	bx	lr
    8724:	4000150c 	.word	0x4000150c

00008728 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    8728:	4a05      	ldr	r2, [pc, #20]	; (8740 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    872a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    872e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8732:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    8736:	fbb1 f1f2 	udiv	r1, r1, r2
    873a:	4408      	add	r0, r1
    873c:	1e80      	subs	r0, r0, #2
    873e:	4770      	bx	lr
    8740:	00008760 	.word	0x00008760

00008744 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    8744:	4a05      	ldr	r2, [pc, #20]	; (875c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    8746:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    874a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    874e:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    8752:	fbb1 f1f2 	udiv	r1, r1, r2
    8756:	4408      	add	r0, r1
    8758:	4770      	bx	lr
    875a:	0000      	.short	0x0000
    875c:	00008760 	.word	0x00008760
    8760:	05dc0000 	.word	0x05dc0000
    8764:	000003e8 	.word	0x000003e8
    8768:	00000000 	.word	0x00000000
    876c:	00001e14 	.word	0x00001e14
    8770:	00001130 	.word	0x00001130

00008774 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    8774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8778:	461e      	mov	r6, r3
    877a:	4617      	mov	r7, r2
    877c:	460c      	mov	r4, r1
    877e:	4605      	mov	r5, r0
    8780:	f000 f856 	bl	8830 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    8784:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 882c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    8788:	4680      	mov	r8, r0
    878a:	f899 0000 	ldrb.w	r0, [r9]
    878e:	42a8      	cmp	r0, r5
    8790:	d110      	bne.n	87b4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8792:	f899 1001 	ldrb.w	r1, [r9, #1]
    8796:	4648      	mov	r0, r9
    8798:	42a1      	cmp	r1, r4
    879a:	d10b      	bne.n	87b4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    879c:	f990 1002 	ldrsb.w	r1, [r0, #2]
    87a0:	42b9      	cmp	r1, r7
    87a2:	d107      	bne.n	87b4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    87a4:	78c2      	ldrb	r2, [r0, #3]
    87a6:	4542      	cmp	r2, r8
    87a8:	d104      	bne.n	87b4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    87aa:	8881      	ldrh	r1, [r0, #4]
    87ac:	8031      	strh	r1, [r6, #0]
    87ae:	7980      	ldrb	r0, [r0, #6]
    87b0:	70b0      	strb	r0, [r6, #2]
    87b2:	e037      	b.n	8824 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    87b4:	463a      	mov	r2, r7
    87b6:	4621      	mov	r1, r4
    87b8:	2d01      	cmp	r5, #1
    87ba:	d009      	beq.n	87d0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    87bc:	2d02      	cmp	r5, #2
    87be:	d009      	beq.n	87d4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    87c0:	2d04      	cmp	r5, #4
    87c2:	d009      	beq.n	87d8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    87c4:	2d08      	cmp	r5, #8
    87c6:	d009      	beq.n	87dc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    87c8:	f240 4161 	movw	r1, #1121	; 0x461
    87cc:	2006      	movs	r0, #6
    87ce:	e00c      	b.n	87ea <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    87d0:	2000      	movs	r0, #0
    87d2:	e004      	b.n	87de <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    87d4:	2001      	movs	r0, #1
    87d6:	e002      	b.n	87de <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    87d8:	2003      	movs	r0, #3
    87da:	e000      	b.n	87de <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    87dc:	2002      	movs	r0, #2
    87de:	466b      	mov	r3, sp
    87e0:	f000 f89e 	bl	8920 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    87e4:	b118      	cbz	r0, 87ee <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    87e6:	213d      	movs	r1, #61	; 0x3d
    87e8:	2075      	movs	r0, #117	; 0x75
    87ea:	f7f8 f8e1 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87ee:	4620      	mov	r0, r4
    87f0:	f7ff f8cc 	bl	798c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    87f4:	4602      	mov	r2, r0
    87f6:	2300      	movs	r3, #0
    87f8:	4631      	mov	r1, r6
    87fa:	f99d 0000 	ldrsb.w	r0, [sp]
    87fe:	f003 fe47 	bl	c490 <mpsl_fem_tx_power_split>
    8802:	4601      	mov	r1, r0
    8804:	f889 1007 	strb.w	r1, [r9, #7]
    8808:	8831      	ldrh	r1, [r6, #0]
    880a:	f8a9 1004 	strh.w	r1, [r9, #4]
    880e:	78b1      	ldrb	r1, [r6, #2]
    8810:	f889 1006 	strb.w	r1, [r9, #6]
    8814:	f889 5000 	strb.w	r5, [r9]
    8818:	f889 4001 	strb.w	r4, [r9, #1]
    881c:	f889 7002 	strb.w	r7, [r9, #2]
    8820:	f889 8003 	strb.w	r8, [r9, #3]
    8824:	f999 0007 	ldrsb.w	r0, [r9, #7]
    8828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    882c:	2000037c 	.word	0x2000037c

00008830 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    8830:	4801      	ldr	r0, [pc, #4]	; (8838 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    8832:	7800      	ldrb	r0, [r0, #0]
    8834:	4770      	bx	lr
    8836:	0000      	.short	0x0000
    8838:	200002f8 	.word	0x200002f8

0000883c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    883c:	b570      	push	{r4, r5, r6, lr}
    883e:	4c17      	ldr	r4, [pc, #92]	; (889c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    8840:	7860      	ldrb	r0, [r4, #1]
    8842:	2800      	cmp	r0, #0
    8844:	d123      	bne.n	888e <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    8846:	2001      	movs	r0, #1
    8848:	7060      	strb	r0, [r4, #1]
    884a:	f007 ff94 	bl	10776 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    884e:	f06f 0527 	mvn.w	r5, #39	; 0x27
    8852:	b928      	cbnz	r0, 8860 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8854:	f007 ffc5 	bl	107e2 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    8858:	b910      	cbnz	r0, 8860 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    885a:	f007 ffcc 	bl	107f6 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    885e:	b120      	cbz	r0, 886a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    8860:	480f      	ldr	r0, [pc, #60]	; (88a0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8862:	6060      	str	r0, [r4, #4]
    8864:	70a5      	strb	r5, [r4, #2]
    8866:	2008      	movs	r0, #8
    8868:	e010      	b.n	888c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    886a:	f007 ff59 	bl	10720 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    886e:	b940      	cbnz	r0, 8882 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8870:	f007 ff60 	bl	10734 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    8874:	b928      	cbnz	r0, 8882 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8876:	f007 ff74 	bl	10762 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    887a:	b910      	cbnz	r0, 8882 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    887c:	f007 ff85 	bl	1078a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8880:	b130      	cbz	r0, 8890 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    8882:	4807      	ldr	r0, [pc, #28]	; (88a0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8884:	3031      	adds	r0, #49	; 0x31
    8886:	6060      	str	r0, [r4, #4]
    8888:	70a5      	strb	r5, [r4, #2]
    888a:	2004      	movs	r0, #4
    888c:	70e0      	strb	r0, [r4, #3]
    888e:	bd70      	pop	{r4, r5, r6, pc}
    8890:	f240 113f 	movw	r1, #319	; 0x13f
    8894:	2074      	movs	r0, #116	; 0x74
    8896:	f003 fc3d 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    889a:	0000      	.short	0x0000
    889c:	200002f8 	.word	0x200002f8
    88a0:	00010b35 	.word	0x00010b35

000088a4 <mpsl_tx_power_radio_supported_power_adjust>:
    88a4:	4a06      	ldr	r2, [pc, #24]	; (88c0 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    88a6:	b500      	push	{lr}
    88a8:	f992 2003 	ldrsb.w	r2, [r2, #3]
    88ac:	4290      	cmp	r0, r2
    88ae:	db01      	blt.n	88b4 <mpsl_tx_power_radio_supported_power_adjust+0x10>
    88b0:	4610      	mov	r0, r2
    88b2:	bd00      	pop	{pc}
    88b4:	f000 f808 	bl	88c8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    88b8:	4902      	ldr	r1, [pc, #8]	; (88c4 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    88ba:	5608      	ldrsb	r0, [r1, r0]
    88bc:	bd00      	pop	{pc}
    88be:	0000      	.short	0x0000
    88c0:	200002f8 	.word	0x200002f8
    88c4:	00010b27 	.word	0x00010b27

000088c8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    88c8:	4602      	mov	r2, r0
    88ca:	4813      	ldr	r0, [pc, #76]	; (8918 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    88cc:	b510      	push	{r4, lr}
    88ce:	f990 3003 	ldrsb.w	r3, [r0, #3]
    88d2:	429a      	cmp	r2, r3
    88d4:	db01      	blt.n	88da <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    88d6:	200d      	movs	r0, #13
    88d8:	bd10      	pop	{r4, pc}
    88da:	f990 3002 	ldrsb.w	r3, [r0, #2]
    88de:	429a      	cmp	r2, r3
    88e0:	dc01      	bgt.n	88e6 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    88e2:	2000      	movs	r0, #0
    88e4:	bd10      	pop	{r4, pc}
    88e6:	b101      	cbz	r1, 88ea <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    88e8:	2101      	movs	r1, #1
    88ea:	1ad4      	subs	r4, r2, r3
    88ec:	6843      	ldr	r3, [r0, #4]
    88ee:	5d18      	ldrb	r0, [r3, r4]
    88f0:	4c0a      	ldr	r4, [pc, #40]	; (891c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    88f2:	5624      	ldrsb	r4, [r4, r0]
    88f4:	4294      	cmp	r4, r2
    88f6:	d0f5      	beq.n	88e4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    88f8:	4c08      	ldr	r4, [pc, #32]	; (891c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    88fa:	4408      	add	r0, r1
    88fc:	343f      	adds	r4, #63	; 0x3f
    88fe:	b2c0      	uxtb	r0, r0
    8900:	b2d2      	uxtb	r2, r2
    8902:	42a3      	cmp	r3, r4
    8904:	d1ee      	bne.n	88e4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8906:	2900      	cmp	r1, #0
    8908:	d0ec      	beq.n	88e4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    890a:	2a01      	cmp	r2, #1
    890c:	d001      	beq.n	8912 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    890e:	2a02      	cmp	r2, #2
    8910:	d1e8      	bne.n	88e4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8912:	1c40      	adds	r0, r0, #1
    8914:	b2c0      	uxtb	r0, r0
    8916:	bd10      	pop	{r4, pc}
    8918:	200002f8 	.word	0x200002f8
    891c:	00010b27 	.word	0x00010b27

00008920 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    8920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8924:	461c      	mov	r4, r3
    8926:	4690      	mov	r8, r2
    8928:	460d      	mov	r5, r1
    892a:	4606      	mov	r6, r0
    892c:	f06f 0715 	mvn.w	r7, #21
    8930:	2804      	cmp	r0, #4
    8932:	d804      	bhi.n	893e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8934:	b11c      	cbz	r4, 893e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8936:	f007 fdf9 	bl	1052c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    893a:	42a8      	cmp	r0, r5
    893c:	d802      	bhi.n	8944 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    893e:	4638      	mov	r0, r7
    8940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8944:	4805      	ldr	r0, [pc, #20]	; (895c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    8946:	4642      	mov	r2, r8
    8948:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    894c:	b118      	cbz	r0, 8956 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    894e:	5740      	ldrsb	r0, [r0, r5]
    8950:	4282      	cmp	r2, r0
    8952:	dd00      	ble.n	8956 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8954:	4602      	mov	r2, r0
    8956:	7022      	strb	r2, [r4, #0]
    8958:	2000      	movs	r0, #0
    895a:	e7f1      	b.n	8940 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    895c:	20001234 	.word	0x20001234

00008960 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    8960:	4801      	ldr	r0, [pc, #4]	; (8968 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    8962:	7800      	ldrb	r0, [r0, #0]
    8964:	4770      	bx	lr
    8966:	0000      	.short	0x0000
    8968:	20000300 	.word	0x20000300

0000896c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    896c:	4905      	ldr	r1, [pc, #20]	; (8984 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    896e:	780a      	ldrb	r2, [r1, #0]
    8970:	4290      	cmp	r0, r2
    8972:	d301      	bcc.n	8978 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    8974:	2000      	movs	r0, #0
    8976:	4770      	bx	lr
    8978:	6849      	ldr	r1, [r1, #4]
    897a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    897e:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    8982:	4770      	bx	lr
    8984:	20000300 	.word	0x20000300

00008988 <MPSL_IRQ_RADIO_Handler>:
    8988:	490d      	ldr	r1, [pc, #52]	; (89c0 <MPSL_IRQ_RADIO_Handler+0x38>)
    898a:	b510      	push	{r4, lr}
    898c:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    8990:	2820      	cmp	r0, #32
    8992:	d00f      	beq.n	89b4 <MPSL_IRQ_RADIO_Handler+0x2c>
    8994:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    8998:	f5a1 6290 	sub.w	r2, r1, #1152	; 0x480
    899c:	eb02 1040 	add.w	r0, r2, r0, lsl #5
    89a0:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    89a4:	6840      	ldr	r0, [r0, #4]
    89a6:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    89aa:	680a      	ldr	r2, [r1, #0]
    89ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    89b0:	2104      	movs	r1, #4
    89b2:	4710      	bx	r2
    89b4:	f640 017f 	movw	r1, #2175	; 0x87f
    89b8:	2070      	movs	r0, #112	; 0x70
    89ba:	f003 fbab 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    89be:	0000      	.short	0x0000
    89c0:	20000fd8 	.word	0x20000fd8
    89c4:	b570      	push	{r4, r5, r6, lr}
    89c6:	4605      	mov	r5, r0
    89c8:	2a20      	cmp	r2, #32
    89ca:	d028      	beq.n	8a1e <MPSL_IRQ_RADIO_Handler+0x96>
    89cc:	4819      	ldr	r0, [pc, #100]	; (8a34 <MPSL_IRQ_RADIO_Handler+0xac>)
    89ce:	4c1a      	ldr	r4, [pc, #104]	; (8a38 <MPSL_IRQ_RADIO_Handler+0xb0>)
    89d0:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    89d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    89d8:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    89dc:	4423      	add	r3, r4
    89de:	2920      	cmp	r1, #32
    89e0:	d022      	beq.n	8a28 <MPSL_IRQ_RADIO_Handler+0xa0>
    89e2:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    89e6:	7840      	ldrb	r0, [r0, #1]
    89e8:	784c      	ldrb	r4, [r1, #1]
    89ea:	7048      	strb	r0, [r1, #1]
    89ec:	4620      	mov	r0, r4
    89ee:	4601      	mov	r1, r0
    89f0:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    89f4:	4291      	cmp	r1, r2
    89f6:	7005      	strb	r5, [r0, #0]
    89f8:	7840      	ldrb	r0, [r0, #1]
    89fa:	d1f8      	bne.n	89ee <MPSL_IRQ_RADIO_Handler+0x66>
    89fc:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    8a00:	2a20      	cmp	r2, #32
    8a02:	bf1a      	itte	ne
    8a04:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    8a08:	7054      	strbne	r4, [r2, #1]
    8a0a:	f883 4029 	strbeq.w	r4, [r3, #41]	; 0x29
    8a0e:	2220      	movs	r2, #32
    8a10:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    8a14:	f88c 2001 	strb.w	r2, [ip, #1]
    8a18:	f883 102a 	strb.w	r1, [r3, #42]	; 0x2a
    8a1c:	bd70      	pop	{r4, r5, r6, pc}
    8a1e:	f240 2186 	movw	r1, #646	; 0x286
    8a22:	2070      	movs	r0, #112	; 0x70
    8a24:	f003 fb76 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8a28:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
    8a2c:	7840      	ldrb	r0, [r0, #1]
    8a2e:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    8a32:	e7db      	b.n	89ec <MPSL_IRQ_RADIO_Handler+0x64>
    8a34:	20000f58 	.word	0x20000f58
    8a38:	20000fd8 	.word	0x20000fd8
    8a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a40:	b08f      	sub	sp, #60	; 0x3c
    8a42:	4615      	mov	r5, r2
    8a44:	461e      	mov	r6, r3
    8a46:	460c      	mov	r4, r1
    8a48:	f002 fab4 	bl	afb4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    8a4c:	1828      	adds	r0, r5, r0
    8a4e:	f146 0100 	adc.w	r1, r6, #0
    8a52:	e9cd 1001 	strd	r1, r0, [sp, #4]
    8a56:	e9d4 2300 	ldrd	r2, r3, [r4]
    8a5a:	1a80      	subs	r0, r0, r2
    8a5c:	eb71 0003 	sbcs.w	r0, r1, r3
    8a60:	f0c0 80e5 	bcc.w	8c2e <MPSL_IRQ_RADIO_Handler+0x2a6>
    8a64:	a808      	add	r0, sp, #32
    8a66:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
    8a6a:	900a      	str	r0, [sp, #40]	; 0x28
    8a6c:	48bc      	ldr	r0, [pc, #752]	; (8d60 <MPSL_IRQ_RADIO_Handler+0x3d8>)
    8a6e:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    8a72:	4408      	add	r0, r1
    8a74:	9009      	str	r0, [sp, #36]	; 0x24
    8a76:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    8a7a:	2020      	movs	r0, #32
    8a7c:	f10d 091c 	add.w	r9, sp, #28
    8a80:	f88d 001c 	strb.w	r0, [sp, #28]
    8a84:	2d20      	cmp	r5, #32
    8a86:	d036      	beq.n	8af6 <MPSL_IRQ_RADIO_Handler+0x16e>
    8a88:	48b6      	ldr	r0, [pc, #728]	; (8d64 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    8a8a:	2600      	movs	r6, #0
    8a8c:	eb00 1b8a 	add.w	fp, r0, sl, lsl #6
    8a90:	48b5      	ldr	r0, [pc, #724]	; (8d68 <MPSL_IRQ_RADIO_Handler+0x3e0>)
    8a92:	e9d4 7300 	ldrd	r7, r3, [r4]
    8a96:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    8a9a:	f850 8f08 	ldr.w	r8, [r0, #8]!
    8a9e:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
    8aa2:	eb18 0101 	adds.w	r1, r8, r1
    8aa6:	4172      	adcs	r2, r6
    8aa8:	1a79      	subs	r1, r7, r1
    8aaa:	eb73 0102 	sbcs.w	r1, r3, r2
    8aae:	d322      	bcc.n	8af6 <MPSL_IRQ_RADIO_Handler+0x16e>
    8ab0:	89e1      	ldrh	r1, [r4, #14]
    8ab2:	b1c9      	cbz	r1, 8ae8 <MPSL_IRQ_RADIO_Handler+0x160>
    8ab4:	89c0      	ldrh	r0, [r0, #14]
    8ab6:	b9b8      	cbnz	r0, 8ae8 <MPSL_IRQ_RADIO_Handler+0x160>
    8ab8:	f003 f96e 	bl	bd98 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8abc:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8ac0:	bf08      	it	eq
    8ac2:	200d      	moveq	r0, #13
    8ac4:	d00b      	beq.n	8ade <MPSL_IRQ_RADIO_Handler+0x156>
    8ac6:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8aca:	3856      	subs	r0, #86	; 0x56
    8acc:	bf08      	it	eq
    8ace:	201c      	moveq	r0, #28
    8ad0:	d005      	beq.n	8ade <MPSL_IRQ_RADIO_Handler+0x156>
    8ad2:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8ad6:	389f      	subs	r0, #159	; 0x9f
    8ad8:	bf14      	ite	ne
    8ada:	4630      	movne	r0, r6
    8adc:	2032      	moveq	r0, #50	; 0x32
    8ade:	1c40      	adds	r0, r0, #1
    8ae0:	ebb7 0108 	subs.w	r1, r7, r8
    8ae4:	4281      	cmp	r1, r0
    8ae6:	db06      	blt.n	8af6 <MPSL_IRQ_RADIO_Handler+0x16e>
    8ae8:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    8aec:	f889 5000 	strb.w	r5, [r9]
    8af0:	7845      	ldrb	r5, [r0, #1]
    8af2:	2d20      	cmp	r5, #32
    8af4:	d1cc      	bne.n	8a90 <MPSL_IRQ_RADIO_Handler+0x108>
    8af6:	980a      	ldr	r0, [sp, #40]	; 0x28
    8af8:	f899 1000 	ldrb.w	r1, [r9]
    8afc:	2d20      	cmp	r5, #32
    8afe:	7001      	strb	r1, [r0, #0]
    8b00:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    8b04:	f000 8128 	beq.w	8d58 <MPSL_IRQ_RADIO_Handler+0x3d0>
    8b08:	4896      	ldr	r0, [pc, #600]	; (8d64 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    8b0a:	4f97      	ldr	r7, [pc, #604]	; (8d68 <MPSL_IRQ_RADIO_Handler+0x3e0>)
    8b0c:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    8b10:	2600      	movs	r6, #0
    8b12:	9004      	str	r0, [sp, #16]
    8b14:	eb07 1a45 	add.w	sl, r7, r5, lsl #5
    8b18:	f10a 0008 	add.w	r0, sl, #8
    8b1c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    8b20:	f8d4 b000 	ldr.w	fp, [r4]
    8b24:	e9d0 8300 	ldrd	r8, r3, [r0]
    8b28:	eb1b 0202 	adds.w	r2, fp, r2
    8b2c:	4171      	adcs	r1, r6
    8b2e:	ebb8 0202 	subs.w	r2, r8, r2
    8b32:	eb73 0101 	sbcs.w	r1, r3, r1
    8b36:	d320      	bcc.n	8b7a <MPSL_IRQ_RADIO_Handler+0x1f2>
    8b38:	89c0      	ldrh	r0, [r0, #14]
    8b3a:	2800      	cmp	r0, #0
    8b3c:	f000 810c 	beq.w	8d58 <MPSL_IRQ_RADIO_Handler+0x3d0>
    8b40:	89e0      	ldrh	r0, [r4, #14]
    8b42:	2800      	cmp	r0, #0
    8b44:	f040 8108 	bne.w	8d58 <MPSL_IRQ_RADIO_Handler+0x3d0>
    8b48:	f003 f926 	bl	bd98 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8b4c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8b50:	bf08      	it	eq
    8b52:	200d      	moveq	r0, #13
    8b54:	d00b      	beq.n	8b6e <MPSL_IRQ_RADIO_Handler+0x1e6>
    8b56:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8b5a:	3856      	subs	r0, #86	; 0x56
    8b5c:	bf08      	it	eq
    8b5e:	201c      	moveq	r0, #28
    8b60:	d005      	beq.n	8b6e <MPSL_IRQ_RADIO_Handler+0x1e6>
    8b62:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8b66:	389f      	subs	r0, #159	; 0x9f
    8b68:	bf14      	ite	ne
    8b6a:	4630      	movne	r0, r6
    8b6c:	2032      	moveq	r0, #50	; 0x32
    8b6e:	1c41      	adds	r1, r0, #1
    8b70:	ebb8 000b 	subs.w	r0, r8, fp
    8b74:	4288      	cmp	r0, r1
    8b76:	f280 80ef 	bge.w	8d58 <MPSL_IRQ_RADIO_Handler+0x3d0>
    8b7a:	f889 5000 	strb.w	r5, [r9]
    8b7e:	f89a 0018 	ldrb.w	r0, [sl, #24]
    8b82:	7c21      	ldrb	r1, [r4, #16]
    8b84:	4281      	cmp	r1, r0
    8b86:	d207      	bcs.n	8b98 <MPSL_IRQ_RADIO_Handler+0x210>
    8b88:	9804      	ldr	r0, [sp, #16]
    8b8a:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    8b8e:	7845      	ldrb	r5, [r0, #1]
    8b90:	2d20      	cmp	r5, #32
    8b92:	d1bf      	bne.n	8b14 <MPSL_IRQ_RADIO_Handler+0x18c>
    8b94:	f000 b8e0 	b.w	8d58 <MPSL_IRQ_RADIO_Handler+0x3d0>
    8b98:	f89d 0020 	ldrb.w	r0, [sp, #32]
    8b9c:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    8ba0:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    8ba4:	f8d0 9008 	ldr.w	r9, [r0, #8]
    8ba8:	8ac0      	ldrh	r0, [r0, #22]
    8baa:	eb19 0502 	adds.w	r5, r9, r2
    8bae:	eb41 0806 	adc.w	r8, r1, r6
    8bb2:	bbb0      	cbnz	r0, 8c22 <MPSL_IRQ_RADIO_Handler+0x29a>
    8bb4:	89e0      	ldrh	r0, [r4, #14]
    8bb6:	b3a0      	cbz	r0, 8c22 <MPSL_IRQ_RADIO_Handler+0x29a>
    8bb8:	f003 f8ee 	bl	bd98 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8bbc:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8bc0:	bf08      	it	eq
    8bc2:	200d      	moveq	r0, #13
    8bc4:	d00b      	beq.n	8bde <MPSL_IRQ_RADIO_Handler+0x256>
    8bc6:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8bca:	3856      	subs	r0, #86	; 0x56
    8bcc:	bf08      	it	eq
    8bce:	201c      	moveq	r0, #28
    8bd0:	d005      	beq.n	8bde <MPSL_IRQ_RADIO_Handler+0x256>
    8bd2:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8bd6:	389f      	subs	r0, #159	; 0x9f
    8bd8:	bf14      	ite	ne
    8bda:	4630      	movne	r0, r6
    8bdc:	2032      	moveq	r0, #50	; 0x32
    8bde:	1c41      	adds	r1, r0, #1
    8be0:	ebb5 0009 	subs.w	r0, r5, r9
    8be4:	4288      	cmp	r0, r1
    8be6:	da1c      	bge.n	8c22 <MPSL_IRQ_RADIO_Handler+0x29a>
    8be8:	f003 f8d6 	bl	bd98 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8bec:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8bf0:	bf08      	it	eq
    8bf2:	200d      	moveq	r0, #13
    8bf4:	d00b      	beq.n	8c0e <MPSL_IRQ_RADIO_Handler+0x286>
    8bf6:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8bfa:	3856      	subs	r0, #86	; 0x56
    8bfc:	bf08      	it	eq
    8bfe:	201c      	moveq	r0, #28
    8c00:	d005      	beq.n	8c0e <MPSL_IRQ_RADIO_Handler+0x286>
    8c02:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8c06:	389f      	subs	r0, #159	; 0x9f
    8c08:	bf14      	ite	ne
    8c0a:	4630      	movne	r0, r6
    8c0c:	2032      	moveq	r0, #50	; 0x32
    8c0e:	f89d 1020 	ldrb.w	r1, [sp, #32]
    8c12:	1c40      	adds	r0, r0, #1
    8c14:	eb07 1141 	add.w	r1, r7, r1, lsl #5
    8c18:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    8c1c:	1815      	adds	r5, r2, r0
    8c1e:	eb43 0806 	adc.w	r8, r3, r6
    8c22:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
    8c26:	1b49      	subs	r1, r1, r5
    8c28:	eb70 0008 	sbcs.w	r0, r0, r8
    8c2c:	d203      	bcs.n	8c36 <MPSL_IRQ_RADIO_Handler+0x2ae>
    8c2e:	b00f      	add	sp, #60	; 0x3c
    8c30:	2000      	movs	r0, #0
    8c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c36:	e9c4 5800 	strd	r5, r8, [r4]
    8c3a:	9818      	ldr	r0, [sp, #96]	; 0x60
    8c3c:	900b      	str	r0, [sp, #44]	; 0x2c
    8c3e:	a808      	add	r0, sp, #32
    8c40:	900a      	str	r0, [sp, #40]	; 0x28
    8c42:	9809      	ldr	r0, [sp, #36]	; 0x24
    8c44:	f10d 0a1c 	add.w	sl, sp, #28
    8c48:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    8c4c:	2020      	movs	r0, #32
    8c4e:	f88d 001c 	strb.w	r0, [sp, #28]
    8c52:	2d20      	cmp	r5, #32
    8c54:	d037      	beq.n	8cc6 <MPSL_IRQ_RADIO_Handler+0x33e>
    8c56:	4843      	ldr	r0, [pc, #268]	; (8d64 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    8c58:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8c5a:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    8c5e:	bf00      	nop
    8c60:	eb07 1045 	add.w	r0, r7, r5, lsl #5
    8c64:	e9d4 8300 	ldrd	r8, r3, [r4]
    8c68:	f850 9f08 	ldr.w	r9, [r0, #8]!
    8c6c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    8c70:	eb19 0202 	adds.w	r2, r9, r2
    8c74:	4171      	adcs	r1, r6
    8c76:	ebb8 0202 	subs.w	r2, r8, r2
    8c7a:	eb73 0101 	sbcs.w	r1, r3, r1
    8c7e:	d322      	bcc.n	8cc6 <MPSL_IRQ_RADIO_Handler+0x33e>
    8c80:	89e1      	ldrh	r1, [r4, #14]
    8c82:	b1c9      	cbz	r1, 8cb8 <MPSL_IRQ_RADIO_Handler+0x330>
    8c84:	89c0      	ldrh	r0, [r0, #14]
    8c86:	b9b8      	cbnz	r0, 8cb8 <MPSL_IRQ_RADIO_Handler+0x330>
    8c88:	f003 f886 	bl	bd98 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8c8c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8c90:	bf08      	it	eq
    8c92:	200d      	moveq	r0, #13
    8c94:	d00b      	beq.n	8cae <MPSL_IRQ_RADIO_Handler+0x326>
    8c96:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8c9a:	3856      	subs	r0, #86	; 0x56
    8c9c:	bf08      	it	eq
    8c9e:	201c      	moveq	r0, #28
    8ca0:	d005      	beq.n	8cae <MPSL_IRQ_RADIO_Handler+0x326>
    8ca2:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8ca6:	389f      	subs	r0, #159	; 0x9f
    8ca8:	bf14      	ite	ne
    8caa:	4630      	movne	r0, r6
    8cac:	2032      	moveq	r0, #50	; 0x32
    8cae:	1c41      	adds	r1, r0, #1
    8cb0:	ebb8 0009 	subs.w	r0, r8, r9
    8cb4:	4288      	cmp	r0, r1
    8cb6:	db06      	blt.n	8cc6 <MPSL_IRQ_RADIO_Handler+0x33e>
    8cb8:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    8cbc:	f88a 5000 	strb.w	r5, [sl]
    8cc0:	7845      	ldrb	r5, [r0, #1]
    8cc2:	2d20      	cmp	r5, #32
    8cc4:	d1cc      	bne.n	8c60 <MPSL_IRQ_RADIO_Handler+0x2d8>
    8cc6:	980a      	ldr	r0, [sp, #40]	; 0x28
    8cc8:	f89a 1000 	ldrb.w	r1, [sl]
    8ccc:	2d20      	cmp	r5, #32
    8cce:	7001      	strb	r1, [r0, #0]
    8cd0:	e9dd 800a 	ldrd	r8, r0, [sp, #40]	; 0x28
    8cd4:	d040      	beq.n	8d58 <MPSL_IRQ_RADIO_Handler+0x3d0>
    8cd6:	4923      	ldr	r1, [pc, #140]	; (8d64 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    8cd8:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    8cdc:	f8cd 000c 	str.w	r0, [sp, #12]
    8ce0:	eb07 1945 	add.w	r9, r7, r5, lsl #5
    8ce4:	f109 0008 	add.w	r0, r9, #8
    8ce8:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    8cec:	f8d4 b000 	ldr.w	fp, [r4]
    8cf0:	e9d0 a300 	ldrd	sl, r3, [r0]
    8cf4:	eb1b 0202 	adds.w	r2, fp, r2
    8cf8:	4171      	adcs	r1, r6
    8cfa:	ebba 0202 	subs.w	r2, sl, r2
    8cfe:	eb73 0101 	sbcs.w	r1, r3, r1
    8d02:	d31b      	bcc.n	8d3c <MPSL_IRQ_RADIO_Handler+0x3b4>
    8d04:	89c0      	ldrh	r0, [r0, #14]
    8d06:	b338      	cbz	r0, 8d58 <MPSL_IRQ_RADIO_Handler+0x3d0>
    8d08:	89e0      	ldrh	r0, [r4, #14]
    8d0a:	bb28      	cbnz	r0, 8d58 <MPSL_IRQ_RADIO_Handler+0x3d0>
    8d0c:	f003 f844 	bl	bd98 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8d10:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8d14:	bf08      	it	eq
    8d16:	200d      	moveq	r0, #13
    8d18:	d00b      	beq.n	8d32 <MPSL_IRQ_RADIO_Handler+0x3aa>
    8d1a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8d1e:	3856      	subs	r0, #86	; 0x56
    8d20:	bf08      	it	eq
    8d22:	201c      	moveq	r0, #28
    8d24:	d005      	beq.n	8d32 <MPSL_IRQ_RADIO_Handler+0x3aa>
    8d26:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8d2a:	389f      	subs	r0, #159	; 0x9f
    8d2c:	bf14      	ite	ne
    8d2e:	4630      	movne	r0, r6
    8d30:	2032      	moveq	r0, #50	; 0x32
    8d32:	1c41      	adds	r1, r0, #1
    8d34:	ebba 000b 	subs.w	r0, sl, fp
    8d38:	4288      	cmp	r0, r1
    8d3a:	da0d      	bge.n	8d58 <MPSL_IRQ_RADIO_Handler+0x3d0>
    8d3c:	f888 5000 	strb.w	r5, [r8]
    8d40:	f899 1018 	ldrb.w	r1, [r9, #24]
    8d44:	7c20      	ldrb	r0, [r4, #16]
    8d46:	4288      	cmp	r0, r1
    8d48:	f4bf af26 	bcs.w	8b98 <MPSL_IRQ_RADIO_Handler+0x210>
    8d4c:	9803      	ldr	r0, [sp, #12]
    8d4e:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    8d52:	7845      	ldrb	r5, [r0, #1]
    8d54:	2d20      	cmp	r5, #32
    8d56:	d1c3      	bne.n	8ce0 <MPSL_IRQ_RADIO_Handler+0x358>
    8d58:	b00f      	add	sp, #60	; 0x3c
    8d5a:	2001      	movs	r0, #1
    8d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8d60:	20000fd8 	.word	0x20000fd8
    8d64:	20000f58 	.word	0x20000f58
    8d68:	20000b58 	.word	0x20000b58
    8d6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8d70:	b083      	sub	sp, #12
    8d72:	4691      	mov	r9, r2
    8d74:	4604      	mov	r4, r0
    8d76:	460d      	mov	r5, r1
    8d78:	4698      	mov	r8, r3
    8d7a:	aa01      	add	r2, sp, #4
    8d7c:	4669      	mov	r1, sp
    8d7e:	4618      	mov	r0, r3
    8d80:	f002 f934 	bl	afec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    8d84:	f002 fe30 	bl	b9e8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    8d88:	f002 f914 	bl	afb4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    8d8c:	4607      	mov	r7, r0
    8d8e:	481e      	ldr	r0, [pc, #120]	; (8e08 <MPSL_IRQ_RADIO_Handler+0x480>)
    8d90:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
    8d94:	2600      	movs	r6, #0
    8d96:	2920      	cmp	r1, #32
    8d98:	d009      	beq.n	8dae <MPSL_IRQ_RADIO_Handler+0x426>
    8d9a:	6882      	ldr	r2, [r0, #8]
    8d9c:	68c1      	ldr	r1, [r0, #12]
    8d9e:	6900      	ldr	r0, [r0, #16]
    8da0:	1d83      	adds	r3, r0, #6
    8da2:	f146 0000 	adc.w	r0, r6, #0
    8da6:	18d4      	adds	r4, r2, r3
    8da8:	eb41 0500 	adc.w	r5, r1, r0
    8dac:	e026      	b.n	8dfc <MPSL_IRQ_RADIO_Handler+0x474>
    8dae:	340a      	adds	r4, #10
    8db0:	f145 0500 	adc.w	r5, r5, #0
    8db4:	f1b8 0f00 	cmp.w	r8, #0
    8db8:	d017      	beq.n	8dea <MPSL_IRQ_RADIO_Handler+0x462>
    8dba:	f003 f933 	bl	c024 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    8dbe:	b9a0      	cbnz	r0, 8dea <MPSL_IRQ_RADIO_Handler+0x462>
    8dc0:	f002 ffea 	bl	bd98 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8dc4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8dc8:	bf08      	it	eq
    8dca:	200d      	moveq	r0, #13
    8dcc:	d00b      	beq.n	8de6 <MPSL_IRQ_RADIO_Handler+0x45e>
    8dce:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8dd2:	3856      	subs	r0, #86	; 0x56
    8dd4:	bf08      	it	eq
    8dd6:	201c      	moveq	r0, #28
    8dd8:	d005      	beq.n	8de6 <MPSL_IRQ_RADIO_Handler+0x45e>
    8dda:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8dde:	389f      	subs	r0, #159	; 0x9f
    8de0:	bf14      	ite	ne
    8de2:	4630      	movne	r0, r6
    8de4:	2032      	moveq	r0, #50	; 0x32
    8de6:	1904      	adds	r4, r0, r4
    8de8:	4175      	adcs	r5, r6
    8dea:	f1b9 0f00 	cmp.w	r9, #0
    8dee:	d105      	bne.n	8dfc <MPSL_IRQ_RADIO_Handler+0x474>
    8df0:	9800      	ldr	r0, [sp, #0]
    8df2:	4287      	cmp	r7, r0
    8df4:	d902      	bls.n	8dfc <MPSL_IRQ_RADIO_Handler+0x474>
    8df6:	1a38      	subs	r0, r7, r0
    8df8:	1904      	adds	r4, r0, r4
    8dfa:	4175      	adcs	r5, r6
    8dfc:	b003      	add	sp, #12
    8dfe:	4620      	mov	r0, r4
    8e00:	4629      	mov	r1, r5
    8e02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8e06:	0000      	.short	0x0000
    8e08:	20000fd8 	.word	0x20000fd8
    8e0c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e10:	b081      	sub	sp, #4
    8e12:	4605      	mov	r5, r0
    8e14:	9802      	ldr	r0, [sp, #8]
    8e16:	494a      	ldr	r1, [pc, #296]	; (8f40 <MPSL_IRQ_RADIO_Handler+0x5b8>)
    8e18:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8e1c:	4408      	add	r0, r1
    8e1e:	2600      	movs	r6, #0
    8e20:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    8e24:	2020      	movs	r0, #32
    8e26:	4692      	mov	sl, r2
    8e28:	7010      	strb	r0, [r2, #0]
    8e2a:	f5a1 6990 	sub.w	r9, r1, #1152	; 0x480
    8e2e:	2c20      	cmp	r4, #32
    8e30:	d036      	beq.n	8ea0 <MPSL_IRQ_RADIO_Handler+0x518>
    8e32:	9902      	ldr	r1, [sp, #8]
    8e34:	f509 6080 	add.w	r0, r9, #1024	; 0x400
    8e38:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    8e3c:	eb09 1044 	add.w	r0, r9, r4, lsl #5
    8e40:	e9d5 7300 	ldrd	r7, r3, [r5]
    8e44:	f850 8f08 	ldr.w	r8, [r0, #8]!
    8e48:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    8e4c:	eb18 0202 	adds.w	r2, r8, r2
    8e50:	4171      	adcs	r1, r6
    8e52:	1aba      	subs	r2, r7, r2
    8e54:	eb73 0101 	sbcs.w	r1, r3, r1
    8e58:	d322      	bcc.n	8ea0 <MPSL_IRQ_RADIO_Handler+0x518>
    8e5a:	89e9      	ldrh	r1, [r5, #14]
    8e5c:	b1c9      	cbz	r1, 8e92 <MPSL_IRQ_RADIO_Handler+0x50a>
    8e5e:	89c0      	ldrh	r0, [r0, #14]
    8e60:	b9b8      	cbnz	r0, 8e92 <MPSL_IRQ_RADIO_Handler+0x50a>
    8e62:	f002 ff99 	bl	bd98 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8e66:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8e6a:	bf08      	it	eq
    8e6c:	200d      	moveq	r0, #13
    8e6e:	d00b      	beq.n	8e88 <MPSL_IRQ_RADIO_Handler+0x500>
    8e70:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8e74:	3856      	subs	r0, #86	; 0x56
    8e76:	bf08      	it	eq
    8e78:	201c      	moveq	r0, #28
    8e7a:	d005      	beq.n	8e88 <MPSL_IRQ_RADIO_Handler+0x500>
    8e7c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8e80:	389f      	subs	r0, #159	; 0x9f
    8e82:	bf14      	ite	ne
    8e84:	4630      	movne	r0, r6
    8e86:	2032      	moveq	r0, #50	; 0x32
    8e88:	1c41      	adds	r1, r0, #1
    8e8a:	ebb7 0008 	subs.w	r0, r7, r8
    8e8e:	4288      	cmp	r0, r1
    8e90:	db06      	blt.n	8ea0 <MPSL_IRQ_RADIO_Handler+0x518>
    8e92:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    8e96:	f88a 4000 	strb.w	r4, [sl]
    8e9a:	7844      	ldrb	r4, [r0, #1]
    8e9c:	2c20      	cmp	r4, #32
    8e9e:	d1cd      	bne.n	8e3c <MPSL_IRQ_RADIO_Handler+0x4b4>
    8ea0:	9804      	ldr	r0, [sp, #16]
    8ea2:	f89a 1000 	ldrb.w	r1, [sl]
    8ea6:	2c20      	cmp	r4, #32
    8ea8:	7001      	strb	r1, [r0, #0]
    8eaa:	9f04      	ldr	r7, [sp, #16]
    8eac:	9802      	ldr	r0, [sp, #8]
    8eae:	d042      	beq.n	8f36 <MPSL_IRQ_RADIO_Handler+0x5ae>
    8eb0:	4924      	ldr	r1, [pc, #144]	; (8f44 <MPSL_IRQ_RADIO_Handler+0x5bc>)
    8eb2:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    8eb6:	9000      	str	r0, [sp, #0]
    8eb8:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
    8ebc:	f8d5 b000 	ldr.w	fp, [r5]
    8ec0:	eb09 1844 	add.w	r8, r9, r4, lsl #5
    8ec4:	f108 0008 	add.w	r0, r8, #8
    8ec8:	eb1b 0201 	adds.w	r2, fp, r1
    8ecc:	eb43 0106 	adc.w	r1, r3, r6
    8ed0:	e9d0 a300 	ldrd	sl, r3, [r0]
    8ed4:	ebba 0202 	subs.w	r2, sl, r2
    8ed8:	eb73 0101 	sbcs.w	r1, r3, r1
    8edc:	d31b      	bcc.n	8f16 <MPSL_IRQ_RADIO_Handler+0x58e>
    8ede:	89c0      	ldrh	r0, [r0, #14]
    8ee0:	b348      	cbz	r0, 8f36 <MPSL_IRQ_RADIO_Handler+0x5ae>
    8ee2:	89e8      	ldrh	r0, [r5, #14]
    8ee4:	bb38      	cbnz	r0, 8f36 <MPSL_IRQ_RADIO_Handler+0x5ae>
    8ee6:	f002 ff57 	bl	bd98 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8eea:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8eee:	bf08      	it	eq
    8ef0:	200d      	moveq	r0, #13
    8ef2:	d00b      	beq.n	8f0c <MPSL_IRQ_RADIO_Handler+0x584>
    8ef4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8ef8:	3856      	subs	r0, #86	; 0x56
    8efa:	bf08      	it	eq
    8efc:	201c      	moveq	r0, #28
    8efe:	d005      	beq.n	8f0c <MPSL_IRQ_RADIO_Handler+0x584>
    8f00:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8f04:	389f      	subs	r0, #159	; 0x9f
    8f06:	bf14      	ite	ne
    8f08:	4630      	movne	r0, r6
    8f0a:	2032      	moveq	r0, #50	; 0x32
    8f0c:	1c41      	adds	r1, r0, #1
    8f0e:	ebba 000b 	subs.w	r0, sl, fp
    8f12:	4288      	cmp	r0, r1
    8f14:	da0f      	bge.n	8f36 <MPSL_IRQ_RADIO_Handler+0x5ae>
    8f16:	703c      	strb	r4, [r7, #0]
    8f18:	f898 1018 	ldrb.w	r1, [r8, #24]
    8f1c:	7c28      	ldrb	r0, [r5, #16]
    8f1e:	4288      	cmp	r0, r1
    8f20:	d303      	bcc.n	8f2a <MPSL_IRQ_RADIO_Handler+0x5a2>
    8f22:	b005      	add	sp, #20
    8f24:	2000      	movs	r0, #0
    8f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8f2a:	9800      	ldr	r0, [sp, #0]
    8f2c:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    8f30:	7844      	ldrb	r4, [r0, #1]
    8f32:	2c20      	cmp	r4, #32
    8f34:	d1c0      	bne.n	8eb8 <MPSL_IRQ_RADIO_Handler+0x530>
    8f36:	b005      	add	sp, #20
    8f38:	2001      	movs	r0, #1
    8f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8f3e:	0000      	.short	0x0000
    8f40:	20000fd8 	.word	0x20000fd8
    8f44:	20000f58 	.word	0x20000f58
    8f48:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    8f4c:	b09c      	sub	sp, #112	; 0x70
    8f4e:	461f      	mov	r7, r3
    8f50:	f002 fa9c 	bl	b48c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    8f54:	4604      	mov	r4, r0
    8f56:	460d      	mov	r5, r1
    8f58:	f002 fd46 	bl	b9e8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    8f5c:	4606      	mov	r6, r0
    8f5e:	981e      	ldr	r0, [sp, #120]	; 0x78
    8f60:	2801      	cmp	r0, #1
    8f62:	bf18      	it	ne
    8f64:	2802      	cmpne	r0, #2
    8f66:	d005      	beq.n	8f74 <MPSL_IRQ_RADIO_Handler+0x5ec>
    8f68:	f640 1156 	movw	r1, #2390	; 0x956
    8f6c:	f04f 0070 	mov.w	r0, #112	; 0x70
    8f70:	f003 f8d0 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8f74:	49fe      	ldr	r1, [pc, #1016]	; (9370 <MPSL_IRQ_RADIO_Handler+0x9e8>)
    8f76:	2001      	movs	r0, #1
    8f78:	6008      	str	r0, [r1, #0]
    8f7a:	49fe      	ldr	r1, [pc, #1016]	; (9374 <MPSL_IRQ_RADIO_Handler+0x9ec>)
    8f7c:	6889      	ldr	r1, [r1, #8]
    8f7e:	6008      	str	r0, [r1, #0]
    8f80:	2000      	movs	r0, #0
    8f82:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
    8f86:	900c      	str	r0, [sp, #48]	; 0x30
    8f88:	1e40      	subs	r0, r0, #1
    8f8a:	900d      	str	r0, [sp, #52]	; 0x34
    8f8c:	48fa      	ldr	r0, [pc, #1000]	; (9378 <MPSL_IRQ_RADIO_Handler+0x9f0>)
    8f8e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    8f92:	eb00 1047 	add.w	r0, r0, r7, lsl #5
    8f96:	f100 0108 	add.w	r1, r0, #8
    8f9a:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    8f9e:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    8fa2:	e9d0 1006 	ldrd	r1, r0, [r0, #24]
    8fa6:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
    8faa:	980e      	ldr	r0, [sp, #56]	; 0x38
    8fac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8fb0:	f007 faf5 	bl	1059e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    8fb4:	4602      	mov	r2, r0
    8fb6:	f8bd 8046 	ldrh.w	r8, [sp, #70]	; 0x46
    8fba:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    8fbe:	4bef      	ldr	r3, [pc, #956]	; (937c <MPSL_IRQ_RADIO_Handler+0x9f4>)
    8fc0:	4440      	add	r0, r8
    8fc2:	1c41      	adds	r1, r0, #1
    8fc4:	1850      	adds	r0, r2, r1
    8fc6:	429a      	cmp	r2, r3
    8fc8:	d856      	bhi.n	9078 <MPSL_IRQ_RADIO_Handler+0x6f0>
    8fca:	4aed      	ldr	r2, [pc, #948]	; (9380 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    8fcc:	4291      	cmp	r1, r2
    8fce:	dc5b      	bgt.n	9088 <MPSL_IRQ_RADIO_Handler+0x700>
    8fd0:	4252      	negs	r2, r2
    8fd2:	4291      	cmp	r1, r2
    8fd4:	db60      	blt.n	9098 <MPSL_IRQ_RADIO_Handler+0x710>
    8fd6:	1c59      	adds	r1, r3, #1
    8fd8:	4281      	cmp	r1, r0
    8fda:	bfdc      	itt	le
    8fdc:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    8fe0:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    8fe4:	dd05      	ble.n	8ff2 <MPSL_IRQ_RADIO_Handler+0x66a>
    8fe6:	2800      	cmp	r0, #0
    8fe8:	bfbc      	itt	lt
    8fea:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    8fee:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    8ff2:	9017      	str	r0, [sp, #92]	; 0x5c
    8ff4:	48e3      	ldr	r0, [pc, #908]	; (9384 <MPSL_IRQ_RADIO_Handler+0x9fc>)
    8ff6:	f1b8 0f00 	cmp.w	r8, #0
    8ffa:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
    8ffe:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
    9002:	bf14      	ite	ne
    9004:	f04f 0a01 	movne.w	sl, #1
    9008:	f04f 0a00 	moveq.w	sl, #0
    900c:	f003 f80a 	bl	c024 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9010:	9019      	str	r0, [sp, #100]	; 0x64
    9012:	f1ba 0f00 	cmp.w	sl, #0
    9016:	d00b      	beq.n	9030 <MPSL_IRQ_RADIO_Handler+0x6a8>
    9018:	49db      	ldr	r1, [pc, #876]	; (9388 <MPSL_IRQ_RADIO_Handler+0xa00>)
    901a:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
    901e:	ea6f 0200 	mvn.w	r2, r0
    9022:	ea72 0001 	orns	r0, r2, r1
    9026:	bf02      	ittt	eq
    9028:	9819      	ldreq	r0, [sp, #100]	; 0x64
    902a:	2800      	cmpeq	r0, #0
    902c:	2701      	moveq	r7, #1
    902e:	d001      	beq.n	9034 <MPSL_IRQ_RADIO_Handler+0x6ac>
    9030:	f04f 0700 	mov.w	r7, #0
    9034:	f002 feb0 	bl	bd98 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9038:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    903c:	bf08      	it	eq
    903e:	200d      	moveq	r0, #13
    9040:	d00b      	beq.n	905a <MPSL_IRQ_RADIO_Handler+0x6d2>
    9042:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9046:	3856      	subs	r0, #86	; 0x56
    9048:	bf08      	it	eq
    904a:	201c      	moveq	r0, #28
    904c:	d005      	beq.n	905a <MPSL_IRQ_RADIO_Handler+0x6d2>
    904e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9052:	389f      	subs	r0, #159	; 0x9f
    9054:	bf14      	ite	ne
    9056:	2000      	movne	r0, #0
    9058:	2032      	moveq	r0, #50	; 0x32
    905a:	f04f 0900 	mov.w	r9, #0
    905e:	46cb      	mov	fp, r9
    9060:	9016      	str	r0, [sp, #88]	; 0x58
    9062:	4546      	cmp	r6, r8
    9064:	d936      	bls.n	90d4 <MPSL_IRQ_RADIO_Handler+0x74c>
    9066:	9917      	ldr	r1, [sp, #92]	; 0x5c
    9068:	43f3      	mvns	r3, r6
    906a:	f8df c310 	ldr.w	ip, [pc, #784]	; 937c <MPSL_IRQ_RADIO_Handler+0x9f4>
    906e:	18c8      	adds	r0, r1, r3
    9070:	46e9      	mov	r9, sp
    9072:	aa1a      	add	r2, sp, #104	; 0x68
    9074:	4561      	cmp	r1, ip
    9076:	d904      	bls.n	9082 <MPSL_IRQ_RADIO_Handler+0x6fa>
    9078:	f240 517f 	movw	r1, #1407	; 0x57f
    907c:	2070      	movs	r0, #112	; 0x70
    907e:	f003 f849 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9082:	49bf      	ldr	r1, [pc, #764]	; (9380 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    9084:	428b      	cmp	r3, r1
    9086:	dd04      	ble.n	9092 <MPSL_IRQ_RADIO_Handler+0x70a>
    9088:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    908c:	2070      	movs	r0, #112	; 0x70
    908e:	f003 f841 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9092:	49be      	ldr	r1, [pc, #760]	; (938c <MPSL_IRQ_RADIO_Handler+0xa04>)
    9094:	428b      	cmp	r3, r1
    9096:	da04      	bge.n	90a2 <MPSL_IRQ_RADIO_Handler+0x71a>
    9098:	f240 5181 	movw	r1, #1409	; 0x581
    909c:	2070      	movs	r0, #112	; 0x70
    909e:	f003 f839 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    90a2:	49bb      	ldr	r1, [pc, #748]	; (9390 <MPSL_IRQ_RADIO_Handler+0xa08>)
    90a4:	4281      	cmp	r1, r0
    90a6:	bfdc      	itt	le
    90a8:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    90ac:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    90b0:	dd05      	ble.n	90be <MPSL_IRQ_RADIO_Handler+0x736>
    90b2:	2800      	cmp	r0, #0
    90b4:	bfbc      	itt	lt
    90b6:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    90ba:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    90be:	4649      	mov	r1, r9
    90c0:	f001 ff94 	bl	afec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    90c4:	9800      	ldr	r0, [sp, #0]
    90c6:	990e      	ldr	r1, [sp, #56]	; 0x38
    90c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    90cc:	9000      	str	r0, [sp, #0]
    90ce:	1a08      	subs	r0, r1, r0
    90d0:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    90d4:	2f00      	cmp	r7, #0
    90d6:	bf18      	it	ne
    90d8:	f8dd b058 	ldrne.w	fp, [sp, #88]	; 0x58
    90dc:	d105      	bne.n	90ea <MPSL_IRQ_RADIO_Handler+0x762>
    90de:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    90e2:	2800      	cmp	r0, #0
    90e4:	bf18      	it	ne
    90e6:	f04f 0b02 	movne.w	fp, #2
    90ea:	43e0      	mvns	r0, r4
    90ec:	ea70 0005 	orns	r0, r0, r5
    90f0:	d022      	beq.n	9138 <MPSL_IRQ_RADIO_Handler+0x7b0>
    90f2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    90f6:	1a22      	subs	r2, r4, r0
    90f8:	eb75 0201 	sbcs.w	r2, r5, r1
    90fc:	d20c      	bcs.n	9118 <MPSL_IRQ_RADIO_Handler+0x790>
    90fe:	1b02      	subs	r2, r0, r4
    9100:	eb61 0105 	sbc.w	r1, r1, r5
    9104:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    9108:	f171 0100 	sbcs.w	r1, r1, #0
    910c:	d311      	bcc.n	9132 <MPSL_IRQ_RADIO_Handler+0x7aa>
    910e:	f640 1195 	movw	r1, #2453	; 0x995
    9112:	2070      	movs	r0, #112	; 0x70
    9114:	f002 fffe 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9118:	1a22      	subs	r2, r4, r0
    911a:	eb65 0101 	sbc.w	r1, r5, r1
    911e:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    9122:	f171 0100 	sbcs.w	r1, r1, #0
    9126:	d304      	bcc.n	9132 <MPSL_IRQ_RADIO_Handler+0x7aa>
    9128:	f640 1199 	movw	r1, #2457	; 0x999
    912c:	2070      	movs	r0, #112	; 0x70
    912e:	f002 fff1 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9132:	1b00      	subs	r0, r0, r4
    9134:	2801      	cmp	r0, #1
    9136:	da03      	bge.n	9140 <MPSL_IRQ_RADIO_Handler+0x7b8>
    9138:	981c      	ldr	r0, [sp, #112]	; 0x70
    913a:	901a      	str	r0, [sp, #104]	; 0x68
    913c:	2003      	movs	r0, #3
    913e:	e00d      	b.n	915c <MPSL_IRQ_RADIO_Handler+0x7d4>
    9140:	b157      	cbz	r7, 9158 <MPSL_IRQ_RADIO_Handler+0x7d0>
    9142:	4891      	ldr	r0, [pc, #580]	; (9388 <MPSL_IRQ_RADIO_Handler+0xa00>)
    9144:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    9148:	b130      	cbz	r0, 9158 <MPSL_IRQ_RADIO_Handler+0x7d0>
    914a:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    914e:	f110 0b00 	adds.w	fp, r0, #0
    9152:	bf18      	it	ne
    9154:	f04f 0b02 	movne.w	fp, #2
    9158:	2000      	movs	r0, #0
    915a:	941a      	str	r4, [sp, #104]	; 0x68
    915c:	4483      	add	fp, r0
    915e:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    9162:	ebb0 0009 	subs.w	r0, r0, r9
    9166:	f162 0100 	sbc.w	r1, r2, #0
    916a:	1e42      	subs	r2, r0, #1
    916c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    916e:	f141 3eff 	adc.w	lr, r1, #4294967295	; 0xffffffff
    9172:	1ad3      	subs	r3, r2, r3
    9174:	455b      	cmp	r3, fp
    9176:	db08      	blt.n	918a <MPSL_IRQ_RADIO_Handler+0x802>
    9178:	f1b9 0f00 	cmp.w	r9, #0
    917c:	d032      	beq.n	91e4 <MPSL_IRQ_RADIO_Handler+0x85c>
    917e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9180:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    9184:	444b      	add	r3, r9
    9186:	9310      	str	r3, [sp, #64]	; 0x40
    9188:	e02c      	b.n	91e4 <MPSL_IRQ_RADIO_Handler+0x85c>
    918a:	f1b9 0f00 	cmp.w	r9, #0
    918e:	d005      	beq.n	919c <MPSL_IRQ_RADIO_Handler+0x814>
    9190:	f89d 0051 	ldrb.w	r0, [sp, #81]	; 0x51
    9194:	b920      	cbnz	r0, 91a0 <MPSL_IRQ_RADIO_Handler+0x818>
    9196:	f002 fc1d 	bl	b9d4 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    919a:	b108      	cbz	r0, 91a0 <MPSL_IRQ_RADIO_Handler+0x818>
    919c:	b9af      	cbnz	r7, 91ca <MPSL_IRQ_RADIO_Handler+0x842>
    919e:	e00c      	b.n	91ba <MPSL_IRQ_RADIO_Handler+0x832>
    91a0:	b92f      	cbnz	r7, 91ae <MPSL_IRQ_RADIO_Handler+0x826>
    91a2:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    91a6:	2800      	cmp	r0, #0
    91a8:	bf18      	it	ne
    91aa:	f1ab 0b02 	subne.w	fp, fp, #2
    91ae:	f04f 0900 	mov.w	r9, #0
    91b2:	f88d 9050 	strb.w	r9, [sp, #80]	; 0x50
    91b6:	464e      	mov	r6, r9
    91b8:	e007      	b.n	91ca <MPSL_IRQ_RADIO_Handler+0x842>
    91ba:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    91be:	b120      	cbz	r0, 91ca <MPSL_IRQ_RADIO_Handler+0x842>
    91c0:	2000      	movs	r0, #0
    91c2:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    91c6:	f1ab 0b02 	sub.w	fp, fp, #2
    91ca:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    91ce:	ebb0 0009 	subs.w	r0, r0, r9
    91d2:	f162 0100 	sbc.w	r1, r2, #0
    91d6:	1e42      	subs	r2, r0, #1
    91d8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    91da:	f141 3eff 	adc.w	lr, r1, #4294967295	; 0xffffffff
    91de:	1ad3      	subs	r3, r2, r3
    91e0:	455b      	cmp	r3, fp
    91e2:	db7d      	blt.n	92e0 <MPSL_IRQ_RADIO_Handler+0x958>
    91e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    91e6:	b99b      	cbnz	r3, 9210 <MPSL_IRQ_RADIO_Handler+0x888>
    91e8:	4b67      	ldr	r3, [pc, #412]	; (9388 <MPSL_IRQ_RADIO_Handler+0xa00>)
    91ea:	e9d3 c30e 	ldrd	ip, r3, [r3, #56]	; 0x38
    91ee:	ea6f 090c 	mvn.w	r9, ip
    91f2:	ea79 0903 	orns	r9, r9, r3
    91f6:	d00b      	beq.n	9210 <MPSL_IRQ_RADIO_Handler+0x888>
    91f8:	ebb0 0c0c 	subs.w	ip, r0, ip
    91fc:	9816      	ldr	r0, [sp, #88]	; 0x58
    91fe:	eb61 0303 	sbc.w	r3, r1, r3
    9202:	ebbc 0000 	subs.w	r0, ip, r0
    9206:	f173 0000 	sbcs.w	r0, r3, #0
    920a:	bf38      	it	cc
    920c:	2000      	movcc	r0, #0
    920e:	d300      	bcc.n	9212 <MPSL_IRQ_RADIO_Handler+0x88a>
    9210:	2001      	movs	r0, #1
    9212:	ea3a 0000 	bics.w	r0, sl, r0
    9216:	d163      	bne.n	92e0 <MPSL_IRQ_RADIO_Handler+0x958>
    9218:	e9dd 101c 	ldrd	r1, r0, [sp, #112]	; 0x70
    921c:	e9cd 0107 	strd	r0, r1, [sp, #28]
    9220:	981e      	ldr	r0, [sp, #120]	; 0x78
    9222:	4691      	mov	r9, r2
    9224:	e9cd 7018 	strd	r7, r0, [sp, #96]	; 0x60
    9228:	46f3      	mov	fp, lr
    922a:	2700      	movs	r7, #0
    922c:	f002 fdb4 	bl	bd98 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9230:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9234:	bf08      	it	eq
    9236:	200d      	moveq	r0, #13
    9238:	d00b      	beq.n	9252 <MPSL_IRQ_RADIO_Handler+0x8ca>
    923a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    923e:	3856      	subs	r0, #86	; 0x56
    9240:	bf08      	it	eq
    9242:	201c      	moveq	r0, #28
    9244:	d005      	beq.n	9252 <MPSL_IRQ_RADIO_Handler+0x8ca>
    9246:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    924a:	389f      	subs	r0, #159	; 0x9f
    924c:	bf14      	ite	ne
    924e:	4638      	movne	r0, r7
    9250:	2032      	moveq	r0, #50	; 0x32
    9252:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    9256:	300b      	adds	r0, #11
    9258:	ebb9 0202 	subs.w	r2, r9, r2
    925c:	eb6b 0303 	sbc.w	r3, fp, r3
    9260:	1a10      	subs	r0, r2, r0
    9262:	f173 0000 	sbcs.w	r0, r3, #0
    9266:	d22a      	bcs.n	92be <MPSL_IRQ_RADIO_Handler+0x936>
    9268:	9819      	ldr	r0, [sp, #100]	; 0x64
    926a:	2801      	cmp	r0, #1
    926c:	d002      	beq.n	9274 <MPSL_IRQ_RADIO_Handler+0x8ec>
    926e:	9818      	ldr	r0, [sp, #96]	; 0x60
    9270:	b148      	cbz	r0, 9286 <MPSL_IRQ_RADIO_Handler+0x8fe>
    9272:	e017      	b.n	92a4 <MPSL_IRQ_RADIO_Handler+0x91c>
    9274:	43e0      	mvns	r0, r4
    9276:	ea70 0005 	orns	r0, r0, r5
    927a:	d127      	bne.n	92cc <MPSL_IRQ_RADIO_Handler+0x944>
    927c:	f640 01d7 	movw	r1, #2263	; 0x8d7
    9280:	2070      	movs	r0, #112	; 0x70
    9282:	f002 ff47 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9286:	43e0      	mvns	r0, r4
    9288:	ea70 0005 	orns	r0, r0, r5
    928c:	d00a      	beq.n	92a4 <MPSL_IRQ_RADIO_Handler+0x91c>
    928e:	d01d      	beq.n	92cc <MPSL_IRQ_RADIO_Handler+0x944>
    9290:	ebb4 0009 	subs.w	r0, r4, r9
    9294:	eb65 010b 	sbc.w	r1, r5, fp
    9298:	2300      	movs	r3, #0
    929a:	f1d0 0204 	rsbs	r2, r0, #4
    929e:	eb73 0201 	sbcs.w	r2, r3, r1
    92a2:	da06      	bge.n	92b2 <MPSL_IRQ_RADIO_Handler+0x92a>
    92a4:	464c      	mov	r4, r9
    92a6:	465d      	mov	r5, fp
    92a8:	4620      	mov	r0, r4
    92aa:	4629      	mov	r1, r5
    92ac:	f001 ffce 	bl	b24c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    92b0:	e00c      	b.n	92cc <MPSL_IRQ_RADIO_Handler+0x944>
    92b2:	2200      	movs	r2, #0
    92b4:	1a10      	subs	r0, r2, r0
    92b6:	eb72 0001 	sbcs.w	r0, r2, r1
    92ba:	db11      	blt.n	92e0 <MPSL_IRQ_RADIO_Handler+0x958>
    92bc:	e006      	b.n	92cc <MPSL_IRQ_RADIO_Handler+0x944>
    92be:	464c      	mov	r4, r9
    92c0:	465d      	mov	r5, fp
    92c2:	4620      	mov	r0, r4
    92c4:	4629      	mov	r1, r5
    92c6:	f001 ffc1 	bl	b24c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    92ca:	4657      	mov	r7, sl
    92cc:	43e1      	mvns	r1, r4
    92ce:	ea71 0005 	orns	r0, r1, r5
    92d2:	d071      	beq.n	93b8 <MPSL_IRQ_RADIO_Handler+0xa30>
    92d4:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    92d8:	f04f 0b00 	mov.w	fp, #0
    92dc:	990e      	ldr	r1, [sp, #56]	; 0x38
    92de:	e000      	b.n	92e2 <MPSL_IRQ_RADIO_Handler+0x95a>
    92e0:	e06f      	b.n	93c2 <MPSL_IRQ_RADIO_Handler+0xa3a>
    92e2:	1a0b      	subs	r3, r1, r0
    92e4:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    92e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    92ec:	eb11 010c 	adds.w	r1, r1, ip
    92f0:	1a08      	subs	r0, r1, r0
    92f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    92f6:	2b01      	cmp	r3, #1
    92f8:	d363      	bcc.n	93c2 <MPSL_IRQ_RADIO_Handler+0xa3a>
    92fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    92fe:	bf98      	it	ls
    9300:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    9304:	d85d      	bhi.n	93c2 <MPSL_IRQ_RADIO_Handler+0xa3a>
    9306:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    930a:	f007 f948 	bl	1059e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    930e:	9917      	ldr	r1, [sp, #92]	; 0x5c
    9310:	4a1b      	ldr	r2, [pc, #108]	; (9380 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    9312:	1a0d      	subs	r5, r1, r0
    9314:	1aaa      	subs	r2, r5, r2
    9316:	f17b 0200 	sbcs.w	r2, fp, #0
    931a:	d316      	bcc.n	934a <MPSL_IRQ_RADIO_Handler+0x9c2>
    931c:	4b18      	ldr	r3, [pc, #96]	; (9380 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    931e:	1a42      	subs	r2, r0, r1
    9320:	1ad3      	subs	r3, r2, r3
    9322:	f17b 0300 	sbcs.w	r3, fp, #0
    9326:	d310      	bcc.n	934a <MPSL_IRQ_RADIO_Handler+0x9c2>
    9328:	4b14      	ldr	r3, [pc, #80]	; (937c <MPSL_IRQ_RADIO_Handler+0x9f4>)
    932a:	42ab      	cmp	r3, r5
    932c:	bf3e      	ittt	cc
    932e:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    9332:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    9336:	1845      	addcc	r5, r0, r1
    9338:	d307      	bcc.n	934a <MPSL_IRQ_RADIO_Handler+0x9c2>
    933a:	4293      	cmp	r3, r2
    933c:	d245      	bcs.n	93ca <MPSL_IRQ_RADIO_Handler+0xa42>
    933e:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    9342:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    9346:	4408      	add	r0, r1
    9348:	4245      	negs	r5, r0
    934a:	f8df 903c 	ldr.w	r9, [pc, #60]	; 9388 <MPSL_IRQ_RADIO_Handler+0xa00>
    934e:	f899 0022 	ldrb.w	r0, [r9, #34]	; 0x22
    9352:	b378      	cbz	r0, 93b4 <MPSL_IRQ_RADIO_Handler+0xa2c>
    9354:	981e      	ldr	r0, [sp, #120]	; 0x78
    9356:	2801      	cmp	r0, #1
    9358:	d005      	beq.n	9366 <MPSL_IRQ_RADIO_Handler+0x9de>
    935a:	2002      	movs	r0, #2
    935c:	f002 fa02 	bl	b764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9360:	2001      	movs	r0, #1
    9362:	f002 f9ff 	bl	b764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9366:	45b0      	cmp	r8, r6
    9368:	d240      	bcs.n	93ec <MPSL_IRQ_RADIO_Handler+0xa64>
    936a:	eba5 0106 	sub.w	r1, r5, r6
    936e:	e011      	b.n	9394 <MPSL_IRQ_RADIO_Handler+0xa0c>
    9370:	40000508 	.word	0x40000508
    9374:	20000308 	.word	0x20000308
    9378:	20000b58 	.word	0x20000b58
    937c:	1e847fff 	.word	0x1e847fff
    9380:	0f424000 	.word	0x0f424000
    9384:	20000f58 	.word	0x20000f58
    9388:	20000fd8 	.word	0x20000fd8
    938c:	f0bdc000 	.word	0xf0bdc000
    9390:	1e848000 	.word	0x1e848000
    9394:	f04f 0002 	mov.w	r0, #2
    9398:	f002 f92a 	bl	b5f0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    939c:	b398      	cbz	r0, 9406 <MPSL_IRQ_RADIO_Handler+0xa7e>
    939e:	f1b8 0f00 	cmp.w	r8, #0
    93a2:	bf1c      	itt	ne
    93a4:	eba5 0108 	subne.w	r1, r5, r8
    93a8:	2001      	movne	r0, #1
    93aa:	d035      	beq.n	9418 <MPSL_IRQ_RADIO_Handler+0xa90>
    93ac:	f002 f920 	bl	b5f0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    93b0:	b348      	cbz	r0, 9406 <MPSL_IRQ_RADIO_Handler+0xa7e>
    93b2:	e031      	b.n	9418 <MPSL_IRQ_RADIO_Handler+0xa90>
    93b4:	e00e      	b.n	93d4 <MPSL_IRQ_RADIO_Handler+0xa4c>
    93b6:	e7ff      	b.n	93b8 <MPSL_IRQ_RADIO_Handler+0xa30>
    93b8:	f640 2103 	movw	r1, #2563	; 0xa03
    93bc:	2070      	movs	r0, #112	; 0x70
    93be:	f002 fea9 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    93c2:	b020      	add	sp, #128	; 0x80
    93c4:	2000      	movs	r0, #0
    93c6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    93ca:	f640 21d7 	movw	r1, #2775	; 0xad7
    93ce:	2070      	movs	r0, #112	; 0x70
    93d0:	f002 fea0 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    93d4:	45b0      	cmp	r8, r6
    93d6:	bf34      	ite	cc
    93d8:	4630      	movcc	r0, r6
    93da:	4640      	movcs	r0, r8
    93dc:	301e      	adds	r0, #30
    93de:	42a8      	cmp	r0, r5
    93e0:	dbb8      	blt.n	9354 <MPSL_IRQ_RADIO_Handler+0x9cc>
    93e2:	f640 2117 	movw	r1, #2583	; 0xa17
    93e6:	2070      	movs	r0, #112	; 0x70
    93e8:	f002 fe94 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    93ec:	d90c      	bls.n	9408 <MPSL_IRQ_RADIO_Handler+0xa80>
    93ee:	eba5 0108 	sub.w	r1, r5, r8
    93f2:	2001      	movs	r0, #1
    93f4:	f002 f8fc 	bl	b5f0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    93f8:	b128      	cbz	r0, 9406 <MPSL_IRQ_RADIO_Handler+0xa7e>
    93fa:	2e00      	cmp	r6, #0
    93fc:	bf1c      	itt	ne
    93fe:	1ba9      	subne	r1, r5, r6
    9400:	2002      	movne	r0, #2
    9402:	d009      	beq.n	9418 <MPSL_IRQ_RADIO_Handler+0xa90>
    9404:	e7d2      	b.n	93ac <MPSL_IRQ_RADIO_Handler+0xa24>
    9406:	e034      	b.n	9472 <MPSL_IRQ_RADIO_Handler+0xaea>
    9408:	ea56 0008 	orrs.w	r0, r6, r8
    940c:	d004      	beq.n	9418 <MPSL_IRQ_RADIO_Handler+0xa90>
    940e:	f640 113a 	movw	r1, #2362	; 0x93a
    9412:	2070      	movs	r0, #112	; 0x70
    9414:	f002 fe7e 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9418:	4629      	mov	r1, r5
    941a:	2000      	movs	r0, #0
    941c:	f002 f8e8 	bl	b5f0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9420:	b338      	cbz	r0, 9472 <MPSL_IRQ_RADIO_Handler+0xaea>
    9422:	2601      	movs	r6, #1
    9424:	f1ba 0f00 	cmp.w	sl, #0
    9428:	bf04      	itt	eq
    942a:	f899 0040 	ldrbeq.w	r0, [r9, #64]	; 0x40
    942e:	2800      	cmpeq	r0, #0
    9430:	d000      	beq.n	9434 <MPSL_IRQ_RADIO_Handler+0xaac>
    9432:	b347      	cbz	r7, 9486 <MPSL_IRQ_RADIO_Handler+0xafe>
    9434:	e9d9 100e 	ldrd	r1, r0, [r9, #56]	; 0x38
    9438:	ea6f 0101 	mvn.w	r1, r1
    943c:	ea71 0000 	orns	r0, r1, r0
    9440:	d006      	beq.n	9450 <MPSL_IRQ_RADIO_Handler+0xac8>
    9442:	f002 fcaf 	bl	bda4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    9446:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    944a:	4601      	mov	r1, r0
    944c:	e9c9 010e 	strd	r0, r1, [r9, #56]	; 0x38
    9450:	b1ff      	cbz	r7, 9492 <MPSL_IRQ_RADIO_Handler+0xb0a>
    9452:	9816      	ldr	r0, [sp, #88]	; 0x58
    9454:	1a20      	subs	r0, r4, r0
    9456:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    945a:	f04f 0005 	mov.w	r0, #5
    945e:	f002 f8c7 	bl	b5f0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9462:	b370      	cbz	r0, 94c2 <MPSL_IRQ_RADIO_Handler+0xb3a>
    9464:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    9468:	2800      	cmp	r0, #0
    946a:	bf08      	it	eq
    946c:	f889 6040 	strbeq.w	r6, [r9, #64]	; 0x40
    9470:	e017      	b.n	94a2 <MPSL_IRQ_RADIO_Handler+0xb1a>
    9472:	2002      	movs	r0, #2
    9474:	f002 f976 	bl	b764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9478:	2001      	movs	r0, #1
    947a:	f002 f973 	bl	b764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    947e:	b020      	add	sp, #128	; 0x80
    9480:	2000      	movs	r0, #0
    9482:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9486:	e9d9 010e 	ldrd	r0, r1, [r9, #56]	; 0x38
    948a:	43c0      	mvns	r0, r0
    948c:	ea70 0001 	orns	r0, r0, r1
    9490:	d012      	beq.n	94b8 <MPSL_IRQ_RADIO_Handler+0xb30>
    9492:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    9496:	b120      	cbz	r0, 94a2 <MPSL_IRQ_RADIO_Handler+0xb1a>
    9498:	2005      	movs	r0, #5
    949a:	f002 f963 	bl	b764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    949e:	f889 b040 	strb.w	fp, [r9, #64]	; 0x40
    94a2:	eba5 0008 	sub.w	r0, r5, r8
    94a6:	f1a0 0119 	sub.w	r1, r0, #25
    94aa:	2900      	cmp	r1, #0
    94ac:	dc0f      	bgt.n	94ce <MPSL_IRQ_RADIO_Handler+0xb46>
    94ae:	f44f 6124 	mov.w	r1, #2624	; 0xa40
    94b2:	2070      	movs	r0, #112	; 0x70
    94b4:	f002 fe2e 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    94b8:	f002 fc90 	bl	bddc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    94bc:	f002 f876 	bl	b5ac <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    94c0:	e7c4      	b.n	944c <MPSL_IRQ_RADIO_Handler+0xac4>
    94c2:	e7ff      	b.n	94c4 <MPSL_IRQ_RADIO_Handler+0xb3c>
    94c4:	f240 21e6 	movw	r1, #742	; 0x2e6
    94c8:	2070      	movs	r0, #112	; 0x70
    94ca:	f002 fe23 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    94ce:	2003      	movs	r0, #3
    94d0:	f002 f88e 	bl	b5f0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    94d4:	b338      	cbz	r0, 9526 <MPSL_IRQ_RADIO_Handler+0xb9e>
    94d6:	4816      	ldr	r0, [pc, #88]	; (9530 <MPSL_IRQ_RADIO_Handler+0xba8>)
    94d8:	6880      	ldr	r0, [r0, #8]
    94da:	f8c0 b000 	str.w	fp, [r0]
    94de:	4815      	ldr	r0, [pc, #84]	; (9534 <MPSL_IRQ_RADIO_Handler+0xbac>)
    94e0:	f8c0 b000 	str.w	fp, [r0]
    94e4:	ac0c      	add	r4, sp, #48	; 0x30
    94e6:	4814      	ldr	r0, [pc, #80]	; (9538 <MPSL_IRQ_RADIO_Handler+0xbb0>)
    94e8:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    94ec:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    94f0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    94f4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    94f8:	f8c0 c08c 	str.w	ip, [r0, #140]	; 0x8c
    94fc:	ac10      	add	r4, sp, #64	; 0x40
    94fe:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    9502:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
    9506:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    950a:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    950e:	f8c0 c09c 	str.w	ip, [r0, #156]	; 0x9c
    9512:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
    9516:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    951a:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
    951e:	b020      	add	sp, #128	; 0x80
    9520:	2001      	movs	r0, #1
    9522:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9526:	f640 2148 	movw	r1, #2632	; 0xa48
    952a:	2070      	movs	r0, #112	; 0x70
    952c:	f002 fdf2 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9530:	20000308 	.word	0x20000308
    9534:	40000508 	.word	0x40000508
    9538:	20000f58 	.word	0x20000f58
    953c:	b570      	push	{r4, r5, r6, lr}
    953e:	4d1d      	ldr	r5, [pc, #116]	; (95b4 <MPSL_IRQ_RADIO_Handler+0xc2c>)
    9540:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    9544:	2820      	cmp	r0, #32
    9546:	bf18      	it	ne
    9548:	bd70      	popne	{r4, r5, r6, pc}
    954a:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    954e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    9552:	4428      	add	r0, r5
    9554:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    9558:	2c20      	cmp	r4, #32
    955a:	d026      	beq.n	95aa <MPSL_IRQ_RADIO_Handler+0xc22>
    955c:	4b16      	ldr	r3, [pc, #88]	; (95b8 <MPSL_IRQ_RADIO_Handler+0xc30>)
    955e:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    9562:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    9566:	7849      	ldrb	r1, [r1, #1]
    9568:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    956c:	20ff      	movs	r0, #255	; 0xff
    956e:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    9572:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
    9576:	4621      	mov	r1, r4
    9578:	2002      	movs	r0, #2
    957a:	f000 f88b 	bl	9694 <MPSL_IRQ_RADIO_Handler+0xd0c>
    957e:	2000      	movs	r0, #0
    9580:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
    9584:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    9588:	480c      	ldr	r0, [pc, #48]	; (95bc <MPSL_IRQ_RADIO_Handler+0xc34>)
    958a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    958e:	7e00      	ldrb	r0, [r0, #24]
    9590:	2800      	cmp	r0, #0
    9592:	bf08      	it	eq
    9594:	f002 ff26 	bleq	c3e4 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    9598:	2000      	movs	r0, #0
    959a:	4909      	ldr	r1, [pc, #36]	; (95c0 <MPSL_IRQ_RADIO_Handler+0xc38>)
    959c:	6849      	ldr	r1, [r1, #4]
    959e:	2900      	cmp	r1, #0
    95a0:	bf08      	it	eq
    95a2:	bd70      	popeq	{r4, r5, r6, pc}
    95a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    95a8:	4708      	bx	r1
    95aa:	f240 311d 	movw	r1, #797	; 0x31d
    95ae:	2070      	movs	r0, #112	; 0x70
    95b0:	f002 fdb0 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    95b4:	20000fd8 	.word	0x20000fd8
    95b8:	20000f58 	.word	0x20000f58
    95bc:	20000b58 	.word	0x20000b58
    95c0:	20000308 	.word	0x20000308
    95c4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    95c8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 9684 <MPSL_IRQ_RADIO_Handler+0xcfc>
    95cc:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    95d0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    95d4:	4440      	add	r0, r8
    95d6:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    95da:	2c20      	cmp	r4, #32
    95dc:	bf08      	it	eq
    95de:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    95e2:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 9688 <MPSL_IRQ_RADIO_Handler+0xd00>
    95e6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 968c <MPSL_IRQ_RADIO_Handler+0xd04>
    95ea:	f5a9 6a80 	sub.w	sl, r9, #1024	; 0x400
    95ee:	eb09 1785 	add.w	r7, r9, r5, lsl #6
    95f2:	2607      	movs	r6, #7
    95f4:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    95f8:	2801      	cmp	r0, #1
    95fa:	d00e      	beq.n	961a <MPSL_IRQ_RADIO_Handler+0xc92>
    95fc:	2804      	cmp	r0, #4
    95fe:	bf08      	it	eq
    9600:	2602      	moveq	r6, #2
    9602:	d00a      	beq.n	961a <MPSL_IRQ_RADIO_Handler+0xc92>
    9604:	2805      	cmp	r0, #5
    9606:	bf0c      	ite	eq
    9608:	2603      	moveq	r6, #3
    960a:	2806      	cmpne	r0, #6
    960c:	d005      	beq.n	961a <MPSL_IRQ_RADIO_Handler+0xc92>
    960e:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    9612:	f04f 0070 	mov.w	r0, #112	; 0x70
    9616:	f002 fd7d 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    961a:	f1bb 0f00 	cmp.w	fp, #0
    961e:	bf18      	it	ne
    9620:	f3af 8000 	nopne.w
    9624:	f3ef 8010 	mrs	r0, PRIMASK
    9628:	b672      	cpsid	i
    962a:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    962e:	784a      	ldrb	r2, [r1, #1]
    9630:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    9634:	4441      	add	r1, r8
    9636:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
    963a:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
    963e:	42a2      	cmp	r2, r4
    9640:	bf04      	itt	eq
    9642:	2220      	moveq	r2, #32
    9644:	f881 202a 	strbeq.w	r2, [r1, #42]	; 0x2a
    9648:	b1a8      	cbz	r0, 9676 <MPSL_IRQ_RADIO_Handler+0xcee>
    964a:	462a      	mov	r2, r5
    964c:	4621      	mov	r1, r4
    964e:	2001      	movs	r0, #1
    9650:	f000 f820 	bl	9694 <MPSL_IRQ_RADIO_Handler+0xd0c>
    9654:	eb0a 1144 	add.w	r1, sl, r4, lsl #5
    9658:	e9d1 2000 	ldrd	r2, r0, [r1]
    965c:	4631      	mov	r1, r6
    965e:	4790      	blx	r2
    9660:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    9664:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9668:	4440      	add	r0, r8
    966a:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    966e:	2c20      	cmp	r4, #32
    9670:	d1bd      	bne.n	95ee <MPSL_IRQ_RADIO_Handler+0xc66>
    9672:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9676:	4806      	ldr	r0, [pc, #24]	; (9690 <MPSL_IRQ_RADIO_Handler+0xd08>)
    9678:	2800      	cmp	r0, #0
    967a:	bf18      	it	ne
    967c:	f3af 8000 	nopne.w
    9680:	b662      	cpsie	i
    9682:	e7e2      	b.n	964a <MPSL_IRQ_RADIO_Handler+0xcc2>
    9684:	20000fd8 	.word	0x20000fd8
    9688:	00000000 	.word	0x00000000
    968c:	20000f58 	.word	0x20000f58
    9690:	00000000 	.word	0x00000000
    9694:	f8df c058 	ldr.w	ip, [pc, #88]	; 96f0 <MPSL_IRQ_RADIO_Handler+0xd68>
    9698:	b510      	push	{r4, lr}
    969a:	2300      	movs	r3, #0
    969c:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    96a0:	2807      	cmp	r0, #7
    96a2:	d21f      	bcs.n	96e4 <MPSL_IRQ_RADIO_Handler+0xd5c>
    96a4:	e8df f000 	tbb	[pc, r0]
    96a8:	05050505 	.word	0x05050505
    96ac:	00040404 	.word	0x00040404
    96b0:	2301      	movs	r3, #1
    96b2:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    96b6:	2b00      	cmp	r3, #0
    96b8:	bf08      	it	eq
    96ba:	bd10      	popeq	{r4, pc}
    96bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    96c0:	480c      	ldr	r0, [pc, #48]	; (96f4 <MPSL_IRQ_RADIO_Handler+0xd6c>)
    96c2:	4402      	add	r2, r0
    96c4:	f892 002a 	ldrb.w	r0, [r2, #42]	; 0x2a
    96c8:	2820      	cmp	r0, #32
    96ca:	bf0e      	itee	eq
    96cc:	f882 1029 	strbeq.w	r1, [r2, #41]	; 0x29
    96d0:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    96d4:	7041      	strbne	r1, [r0, #1]
    96d6:	2020      	movs	r0, #32
    96d8:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    96dc:	7058      	strb	r0, [r3, #1]
    96de:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
    96e2:	bd10      	pop	{r4, pc}
    96e4:	f44f 7117 	mov.w	r1, #604	; 0x25c
    96e8:	2070      	movs	r0, #112	; 0x70
    96ea:	f002 fd13 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    96ee:	0000      	.short	0x0000
    96f0:	20000f58 	.word	0x20000f58
    96f4:	20000fd8 	.word	0x20000fd8
    96f8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    96fc:	460f      	mov	r7, r1
    96fe:	4680      	mov	r8, r0
    9700:	f8df b154 	ldr.w	fp, [pc, #340]	; 9858 <MPSL_IRQ_RADIO_Handler+0xed0>
    9704:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    9708:	4458      	add	r0, fp
    970a:	f1b8 0f01 	cmp.w	r8, #1
    970e:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    9712:	4625      	mov	r5, r4
    9714:	bf18      	it	ne
    9716:	f1b8 0f02 	cmpne.w	r8, #2
    971a:	d005      	beq.n	9728 <MPSL_IRQ_RADIO_Handler+0xda0>
    971c:	f640 217e 	movw	r1, #2686	; 0xa7e
    9720:	f04f 0070 	mov.w	r0, #112	; 0x70
    9724:	f002 fcf6 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9728:	2d20      	cmp	r5, #32
    972a:	d041      	beq.n	97b0 <MPSL_IRQ_RADIO_Handler+0xe28>
    972c:	f89b 0022 	ldrb.w	r0, [fp, #34]	; 0x22
    9730:	2600      	movs	r6, #0
    9732:	2800      	cmp	r0, #0
    9734:	bf08      	it	eq
    9736:	2602      	moveq	r6, #2
    9738:	f001 fd82 	bl	b240 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    973c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 985c <MPSL_IRQ_RADIO_Handler+0xed4>
    9740:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    9744:	6899      	ldr	r1, [r3, #8]
    9746:	691b      	ldr	r3, [r3, #16]
    9748:	1a0a      	subs	r2, r1, r0
    974a:	18c9      	adds	r1, r1, r3
    974c:	1a09      	subs	r1, r1, r0
    974e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9752:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9756:	4296      	cmp	r6, r2
    9758:	bf99      	ittee	ls
    975a:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    975e:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9762:	4a3f      	ldrhi	r2, [pc, #252]	; (9860 <MPSL_IRQ_RADIO_Handler+0xed8>)
    9764:	eb02 1a87 	addhi.w	sl, r2, r7, lsl #6
    9768:	d920      	bls.n	97ac <MPSL_IRQ_RADIO_Handler+0xe24>
    976a:	4622      	mov	r2, r4
    976c:	eb0a 0142 	add.w	r1, sl, r2, lsl #1
    9770:	784c      	ldrb	r4, [r1, #1]
    9772:	2c20      	cmp	r4, #32
    9774:	d012      	beq.n	979c <MPSL_IRQ_RADIO_Handler+0xe14>
    9776:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    977a:	6899      	ldr	r1, [r3, #8]
    977c:	691b      	ldr	r3, [r3, #16]
    977e:	ebb1 0c00 	subs.w	ip, r1, r0
    9782:	18c9      	adds	r1, r1, r3
    9784:	1a09      	subs	r1, r1, r0
    9786:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    978a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    978e:	4566      	cmp	r6, ip
    9790:	bf9c      	itt	ls
    9792:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    9796:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    979a:	d8e6      	bhi.n	976a <MPSL_IRQ_RADIO_Handler+0xde2>
    979c:	2a20      	cmp	r2, #32
    979e:	d005      	beq.n	97ac <MPSL_IRQ_RADIO_Handler+0xe24>
    97a0:	463b      	mov	r3, r7
    97a2:	2120      	movs	r1, #32
    97a4:	2004      	movs	r0, #4
    97a6:	f7ff f90d 	bl	89c4 <MPSL_IRQ_RADIO_Handler+0x3c>
    97aa:	4604      	mov	r4, r0
    97ac:	42ac      	cmp	r4, r5
    97ae:	d113      	bne.n	97d8 <MPSL_IRQ_RADIO_Handler+0xe50>
    97b0:	482c      	ldr	r0, [pc, #176]	; (9864 <MPSL_IRQ_RADIO_Handler+0xedc>)
    97b2:	2800      	cmp	r0, #0
    97b4:	bf18      	it	ne
    97b6:	f3af 8000 	nopne.w
    97ba:	f001 fef7 	bl	b5ac <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    97be:	f89b 2043 	ldrb.w	r2, [fp, #67]	; 0x43
    97c2:	2a20      	cmp	r2, #32
    97c4:	d00b      	beq.n	97de <MPSL_IRQ_RADIO_Handler+0xe56>
    97c6:	e9db 3202 	ldrd	r3, r2, [fp, #8]
    97ca:	1c84      	adds	r4, r0, #2
    97cc:	f141 0c00 	adc.w	ip, r1, #0
    97d0:	1b1b      	subs	r3, r3, r4
    97d2:	eb72 020c 	sbcs.w	r2, r2, ip
    97d6:	d202      	bcs.n	97de <MPSL_IRQ_RADIO_Handler+0xe56>
    97d8:	2000      	movs	r0, #0
    97da:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    97de:	2d20      	cmp	r5, #32
    97e0:	d013      	beq.n	980a <MPSL_IRQ_RADIO_Handler+0xe82>
    97e2:	462b      	mov	r3, r5
    97e4:	4642      	mov	r2, r8
    97e6:	f7ff fbaf 	bl	8f48 <MPSL_IRQ_RADIO_Handler+0x5c0>
    97ea:	2800      	cmp	r0, #0
    97ec:	bf1e      	ittt	ne
    97ee:	f88b 5043 	strbne.w	r5, [fp, #67]	; 0x43
    97f2:	2002      	movne	r0, #2
    97f4:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    97f8:	463b      	mov	r3, r7
    97fa:	462a      	mov	r2, r5
    97fc:	2120      	movs	r1, #32
    97fe:	2004      	movs	r0, #4
    9800:	f7ff f8e0 	bl	89c4 <MPSL_IRQ_RADIO_Handler+0x3c>
    9804:	2000      	movs	r0, #0
    9806:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    980a:	e9db 010e 	ldrd	r0, r1, [fp, #56]	; 0x38
    980e:	43c0      	mvns	r0, r0
    9810:	ea70 0001 	orns	r0, r0, r1
    9814:	d005      	beq.n	9822 <MPSL_IRQ_RADIO_Handler+0xe9a>
    9816:	f002 fac5 	bl	bda4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    981a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    981e:	e9cb 000e 	strd	r0, r0, [fp, #56]	; 0x38
    9822:	f89b 0040 	ldrb.w	r0, [fp, #64]	; 0x40
    9826:	b128      	cbz	r0, 9834 <MPSL_IRQ_RADIO_Handler+0xeac>
    9828:	2005      	movs	r0, #5
    982a:	f001 ff9b 	bl	b764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    982e:	2000      	movs	r0, #0
    9830:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    9834:	2004      	movs	r0, #4
    9836:	f001 ff95 	bl	b764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    983a:	f001 fffb 	bl	b834 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    983e:	490a      	ldr	r1, [pc, #40]	; (9868 <MPSL_IRQ_RADIO_Handler+0xee0>)
    9840:	2020      	movs	r0, #32
    9842:	f88b 0043 	strb.w	r0, [fp, #67]	; 0x43
    9846:	6889      	ldr	r1, [r1, #8]
    9848:	2000      	movs	r0, #0
    984a:	6008      	str	r0, [r1, #0]
    984c:	4907      	ldr	r1, [pc, #28]	; (986c <MPSL_IRQ_RADIO_Handler+0xee4>)
    984e:	6008      	str	r0, [r1, #0]
    9850:	2001      	movs	r0, #1
    9852:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9856:	0000      	.short	0x0000
    9858:	20000fd8 	.word	0x20000fd8
    985c:	20000b58 	.word	0x20000b58
    9860:	20000f58 	.word	0x20000f58
    9864:	00000000 	.word	0x00000000
    9868:	20000308 	.word	0x20000308
    986c:	40000508 	.word	0x40000508

00009870 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    9870:	4906      	ldr	r1, [pc, #24]	; (988c <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    9872:	b510      	push	{r4, lr}
    9874:	f891 2042 	ldrb.w	r2, [r1, #66]	; 0x42
    9878:	2a20      	cmp	r2, #32
    987a:	bf1c      	itt	ne
    987c:	f881 0022 	strbne.w	r0, [r1, #34]	; 0x22
    9880:	bd10      	popne	{r4, pc}
    9882:	f240 3177 	movw	r1, #887	; 0x377
    9886:	2070      	movs	r0, #112	; 0x70
    9888:	f002 fc44 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    988c:	20000fd8 	.word	0x20000fd8

00009890 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    9890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9894:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 9a5c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>
    9898:	4606      	mov	r6, r0
    989a:	b08f      	sub	sp, #60	; 0x3c
    989c:	f89b 0042 	ldrb.w	r0, [fp, #66]	; 0x42
    98a0:	468a      	mov	sl, r1
    98a2:	2820      	cmp	r0, #32
    98a4:	d061      	beq.n	996a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xda>
    98a6:	f89b 1042 	ldrb.w	r1, [fp, #66]	; 0x42
    98aa:	f10b 0408 	add.w	r4, fp, #8
    98ae:	f5ab 6890 	sub.w	r8, fp, #1152	; 0x480
    98b2:	eb08 1941 	add.w	r9, r8, r1, lsl #5
    98b6:	2120      	movs	r1, #32
    98b8:	f88d 1018 	strb.w	r1, [sp, #24]
    98bc:	f89b 1041 	ldrb.w	r1, [fp, #65]	; 0x41
    98c0:	f8db 2008 	ldr.w	r2, [fp, #8]
    98c4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    98c8:	4459      	add	r1, fp
    98ca:	2700      	movs	r7, #0
    98cc:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
    98d0:	f8db 1010 	ldr.w	r1, [fp, #16]
    98d4:	1851      	adds	r1, r2, r1
    98d6:	910a      	str	r1, [sp, #40]	; 0x28
    98d8:	f8db 0000 	ldr.w	r0, [fp]
    98dc:	aa09      	add	r2, sp, #36	; 0x24
    98de:	4430      	add	r0, r6
    98e0:	a907      	add	r1, sp, #28
    98e2:	f001 fb83 	bl	afec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    98e6:	f8d9 0010 	ldr.w	r0, [r9, #16]
    98ea:	9907      	ldr	r1, [sp, #28]
    98ec:	f8d9 2008 	ldr.w	r2, [r9, #8]
    98f0:	1840      	adds	r0, r0, r1
    98f2:	1810      	adds	r0, r2, r0
    98f4:	2e67      	cmp	r6, #103	; 0x67
    98f6:	d33d      	bcc.n	9974 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    98f8:	4959      	ldr	r1, [pc, #356]	; (9a60 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d0>)
    98fa:	2200      	movs	r2, #0
    98fc:	1b89      	subs	r1, r1, r6
    98fe:	eb72 0107 	sbcs.w	r1, r2, r7
    9902:	d337      	bcc.n	9974 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    9904:	6821      	ldr	r1, [r4, #0]
    9906:	4694      	mov	ip, r2
    9908:	1a40      	subs	r0, r0, r1
    990a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    990e:	f5d1 0100 	rsbs	r1, r1, #8388608	; 0x800000
    9912:	eb7c 010c 	sbcs.w	r1, ip, ip
    9916:	d32d      	bcc.n	9974 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    9918:	60a0      	str	r0, [r4, #8]
    991a:	f508 6090 	add.w	r0, r8, #1152	; 0x480
    991e:	f884 a010 	strb.w	sl, [r4, #16]
    9922:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    9926:	f10d 0b18 	add.w	fp, sp, #24
    992a:	2d20      	cmp	r5, #32
    992c:	d055      	beq.n	99da <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    992e:	f508 6180 	add.w	r1, r8, #1024	; 0x400
    9932:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    9936:	9001      	str	r0, [sp, #4]
    9938:	484a      	ldr	r0, [pc, #296]	; (9a64 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d4>)
    993a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    993e:	f8d4 a000 	ldr.w	sl, [r4]
    9942:	eb00 1845 	add.w	r8, r0, r5, lsl #5
    9946:	f108 0008 	add.w	r0, r8, #8
    994a:	eb1a 0201 	adds.w	r2, sl, r1
    994e:	eb43 0107 	adc.w	r1, r3, r7
    9952:	e9d0 9300 	ldrd	r9, r3, [r0]
    9956:	ebb9 0202 	subs.w	r2, r9, r2
    995a:	eb73 0101 	sbcs.w	r1, r3, r1
    995e:	d325      	bcc.n	99ac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x11c>
    9960:	89c0      	ldrh	r0, [r0, #14]
    9962:	b398      	cbz	r0, 99cc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13c>
    9964:	89e0      	ldrh	r0, [r4, #14]
    9966:	b148      	cbz	r0, 997c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xec>
    9968:	e037      	b.n	99da <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    996a:	f640 3135 	movw	r1, #2869	; 0xb35
    996e:	2070      	movs	r0, #112	; 0x70
    9970:	f002 fbd0 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9974:	b00f      	add	sp, #60	; 0x3c
    9976:	2001      	movs	r0, #1
    9978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    997c:	f002 fa0c 	bl	bd98 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9980:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9984:	bf08      	it	eq
    9986:	200d      	moveq	r0, #13
    9988:	d00b      	beq.n	99a2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    998a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    998e:	3856      	subs	r0, #86	; 0x56
    9990:	bf08      	it	eq
    9992:	201c      	moveq	r0, #28
    9994:	d005      	beq.n	99a2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    9996:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    999a:	389f      	subs	r0, #159	; 0x9f
    999c:	bf14      	ite	ne
    999e:	4638      	movne	r0, r7
    99a0:	2032      	moveq	r0, #50	; 0x32
    99a2:	1c41      	adds	r1, r0, #1
    99a4:	ebb9 000a 	subs.w	r0, r9, sl
    99a8:	4288      	cmp	r0, r1
    99aa:	da16      	bge.n	99da <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    99ac:	f88b 5000 	strb.w	r5, [fp]
    99b0:	f898 0018 	ldrb.w	r0, [r8, #24]
    99b4:	7c21      	ldrb	r1, [r4, #16]
    99b6:	4281      	cmp	r1, r0
    99b8:	d309      	bcc.n	99ce <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13e>
    99ba:	6821      	ldr	r1, [r4, #0]
    99bc:	980a      	ldr	r0, [sp, #40]	; 0x28
    99be:	1a40      	subs	r0, r0, r1
    99c0:	60a0      	str	r0, [r4, #8]
    99c2:	b00f      	add	sp, #60	; 0x3c
    99c4:	f04f 0002 	mov.w	r0, #2
    99c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99cc:	e005      	b.n	99da <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    99ce:	9801      	ldr	r0, [sp, #4]
    99d0:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    99d4:	7845      	ldrb	r5, [r0, #1]
    99d6:	2d20      	cmp	r5, #32
    99d8:	d1ae      	bne.n	9938 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xa8>
    99da:	2005      	movs	r0, #5
    99dc:	f001 fec2 	bl	b764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    99e0:	4d1e      	ldr	r5, [pc, #120]	; (9a5c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>)
    99e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    99e6:	6068      	str	r0, [r5, #4]
    99e8:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    99ec:	f89d 2018 	ldrb.w	r2, [sp, #24]
    99f0:	2120      	movs	r1, #32
    99f2:	2a20      	cmp	r2, #32
    99f4:	d003      	beq.n	99fe <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16e>
    99f6:	2005      	movs	r0, #5
    99f8:	f7fe ffe4 	bl	89c4 <MPSL_IRQ_RADIO_Handler+0x3c>
    99fc:	e004      	b.n	9a08 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>
    99fe:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    9a02:	4428      	add	r0, r5
    9a04:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    9a08:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    9a0c:	4916      	ldr	r1, [pc, #88]	; (9a68 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d8>)
    9a0e:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    9a12:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
    9a16:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    9a1a:	7048      	strb	r0, [r1, #1]
    9a1c:	6828      	ldr	r0, [r5, #0]
    9a1e:	4430      	add	r0, r6
    9a20:	6028      	str	r0, [r5, #0]
    9a22:	20ff      	movs	r0, #255	; 0xff
    9a24:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    9a28:	7e68      	ldrb	r0, [r5, #25]
    9a2a:	2801      	cmp	r0, #1
    9a2c:	d10a      	bne.n	9a44 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>
    9a2e:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
    9a32:	6823      	ldr	r3, [r4, #0]
    9a34:	1818      	adds	r0, r3, r0
    9a36:	f142 0100 	adc.w	r1, r2, #0
    9a3a:	1e40      	subs	r0, r0, #1
    9a3c:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    9a40:	f001 fcb2 	bl	b3a8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    9a44:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9a48:	2820      	cmp	r0, #32
    9a4a:	d003      	beq.n	9a54 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1c4>
    9a4c:	4807      	ldr	r0, [pc, #28]	; (9a6c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1dc>)
    9a4e:	7840      	ldrb	r0, [r0, #1]
    9a50:	f002 fc32 	bl	c2b8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9a54:	b00f      	add	sp, #60	; 0x3c
    9a56:	2000      	movs	r0, #0
    9a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9a5c:	20000fd8 	.word	0x20000fd8
    9a60:	0f424000 	.word	0x0f424000
    9a64:	20000b58 	.word	0x20000b58
    9a68:	20000f58 	.word	0x20000f58
    9a6c:	20000308 	.word	0x20000308

00009a70 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    9a70:	b570      	push	{r4, r5, r6, lr}
    9a72:	4a23      	ldr	r2, [pc, #140]	; (9b00 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    9a74:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    9a78:	2920      	cmp	r1, #32
    9a7a:	d039      	beq.n	9af0 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    9a7c:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    9a80:	f5a2 6390 	sub.w	r3, r2, #1152	; 0x480
    9a84:	eb03 1c41 	add.w	ip, r3, r1, lsl #5
    9a88:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
    9a8c:	f892 4041 	ldrb.w	r4, [r2, #65]	; 0x41
    9a90:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    9a94:	4411      	add	r1, r2
    9a96:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    9a9a:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    9a9e:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    9aa2:	2920      	cmp	r1, #32
    9aa4:	d029      	beq.n	9afa <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    9aa6:	eb03 1541 	add.w	r5, r3, r1, lsl #5
    9aaa:	7e2d      	ldrb	r5, [r5, #24]
    9aac:	42a8      	cmp	r0, r5
    9aae:	bf3c      	itt	cc
    9ab0:	eb04 0141 	addcc.w	r1, r4, r1, lsl #1
    9ab4:	7849      	ldrbcc	r1, [r1, #1]
    9ab6:	d3f4      	bcc.n	9aa2 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x32>
    9ab8:	e9dc 6003 	ldrd	r6, r0, [ip, #12]
    9abc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    9ac0:	f8dc 5008 	ldr.w	r5, [ip, #8]
    9ac4:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
    9ac8:	6814      	ldr	r4, [r2, #0]
    9aca:	1828      	adds	r0, r5, r0
    9acc:	f146 0200 	adc.w	r2, r6, #0
    9ad0:	ebb1 0c00 	subs.w	ip, r1, r0
    9ad4:	eb73 0202 	sbcs.w	r2, r3, r2
    9ad8:	d308      	bcc.n	9aec <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    9ada:	1a08      	subs	r0, r1, r0
    9adc:	f006 fd5f 	bl	1059e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9ae0:	f104 0167 	add.w	r1, r4, #103	; 0x67
    9ae4:	4281      	cmp	r1, r0
    9ae6:	bf9c      	itt	ls
    9ae8:	1b00      	subls	r0, r0, r4
    9aea:	bd70      	popls	{r4, r5, r6, pc}
    9aec:	2000      	movs	r0, #0
    9aee:	bd70      	pop	{r4, r5, r6, pc}
    9af0:	f640 3108 	movw	r1, #2824	; 0xb08
    9af4:	2070      	movs	r0, #112	; 0x70
    9af6:	f002 fb0d 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9afa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9afe:	bd70      	pop	{r4, r5, r6, pc}
    9b00:	20000fd8 	.word	0x20000fd8

00009b04 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    9b04:	4806      	ldr	r0, [pc, #24]	; (9b20 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    9b06:	b510      	push	{r4, lr}
    9b08:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
    9b0c:	2920      	cmp	r1, #32
    9b0e:	bf1c      	itt	ne
    9b10:	7e00      	ldrbne	r0, [r0, #24]
    9b12:	bd10      	popne	{r4, pc}
    9b14:	f640 312f 	movw	r1, #2863	; 0xb2f
    9b18:	2070      	movs	r0, #112	; 0x70
    9b1a:	f002 fafb 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b1e:	0000      	.short	0x0000
    9b20:	20000fd8 	.word	0x20000fd8

00009b24 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    9b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9b26:	4d6f      	ldr	r5, [pc, #444]	; (9ce4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    9b28:	2600      	movs	r6, #0
    9b2a:	f505 6490 	add.w	r4, r5, #1152	; 0x480
    9b2e:	2701      	movs	r7, #1
    9b30:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	; 0x38
    9b34:	4b6c      	ldr	r3, [pc, #432]	; (9ce8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    9b36:	2808      	cmp	r0, #8
    9b38:	d273      	bcs.n	9c22 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfe>
    9b3a:	e8df f000 	tbb	[pc, r0]
    9b3e:	7804      	.short	0x7804
    9b40:	47ceb3a0 	.word	0x47ceb3a0
    9b44:	bdb8      	.short	0xbdb8
    9b46:	43c8      	mvns	r0, r1
    9b48:	ea70 0002 	orns	r0, r0, r2
    9b4c:	d105      	bne.n	9b5a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x36>
    9b4e:	f002 f945 	bl	bddc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    9b52:	f001 fd2b 	bl	b5ac <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    9b56:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    9b5a:	8ae0      	ldrh	r0, [r4, #22]
    9b5c:	b110      	cbz	r0, 9b64 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x40>
    9b5e:	f002 fa61 	bl	c024 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9b62:	b180      	cbz	r0, 9b86 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    9b64:	f7ff fcea 	bl	953c <MPSL_IRQ_RADIO_Handler+0xbb4>
    9b68:	20ff      	movs	r0, #255	; 0xff
    9b6a:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    9b6e:	6861      	ldr	r1, [r4, #4]
    9b70:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    9b74:	d003      	beq.n	9b7e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    9b76:	2005      	movs	r0, #5
    9b78:	f001 fd3a 	bl	b5f0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9b7c:	b140      	cbz	r0, 9b90 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    9b7e:	7e60      	ldrb	r0, [r4, #25]
    9b80:	2801      	cmp	r0, #1
    9b82:	d114      	bne.n	9bae <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x8a>
    9b84:	e009      	b.n	9b9a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    9b86:	f640 012c 	movw	r1, #2092	; 0x82c
    9b8a:	2070      	movs	r0, #112	; 0x70
    9b8c:	f002 fac2 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b90:	f640 0131 	movw	r1, #2097	; 0x831
    9b94:	2070      	movs	r0, #112	; 0x70
    9b96:	f002 fabd 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b9a:	68a2      	ldr	r2, [r4, #8]
    9b9c:	6920      	ldr	r0, [r4, #16]
    9b9e:	68e1      	ldr	r1, [r4, #12]
    9ba0:	1810      	adds	r0, r2, r0
    9ba2:	4171      	adcs	r1, r6
    9ba4:	1e40      	subs	r0, r0, #1
    9ba6:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    9baa:	f001 fbfd 	bl	b3a8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    9bae:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    9bb2:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    9bb6:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    9bba:	6840      	ldr	r0, [r0, #4]
    9bbc:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    9bc0:	680a      	ldr	r2, [r1, #0]
    9bc2:	b001      	add	sp, #4
    9bc4:	2101      	movs	r1, #1
    9bc6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9bca:	4710      	bx	r2
    9bcc:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    9bd0:	b160      	cbz	r0, 9bec <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc8>
    9bd2:	43c8      	mvns	r0, r1
    9bd4:	ea70 0002 	orns	r0, r0, r2
    9bd8:	d105      	bne.n	9be6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc2>
    9bda:	f002 f8ff 	bl	bddc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    9bde:	f001 fce5 	bl	b5ac <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    9be2:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    9be6:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    9bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9bec:	f7ff fca6 	bl	953c <MPSL_IRQ_RADIO_Handler+0xbb4>
    9bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9bf4:	6060      	str	r0, [r4, #4]
    9bf6:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    9bfa:	f88d 0000 	strb.w	r0, [sp]
    9bfe:	f89d 0000 	ldrb.w	r0, [sp]
    9c02:	b178      	cbz	r0, 9c24 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x100>
    9c04:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    9c08:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    9c0c:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    9c10:	6840      	ldr	r0, [r0, #4]
    9c12:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    9c16:	680a      	ldr	r2, [r1, #0]
    9c18:	b001      	add	sp, #4
    9c1a:	2106      	movs	r1, #6
    9c1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9c20:	4710      	bx	r2
    9c22:	e05a      	b.n	9cda <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b6>
    9c24:	f640 0148 	movw	r1, #2120	; 0x848
    9c28:	2070      	movs	r0, #112	; 0x70
    9c2a:	f002 fa73 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9c2e:	f7ff fc85 	bl	953c <MPSL_IRQ_RADIO_Handler+0xbb4>
    9c32:	f884 702e 	strb.w	r7, [r4, #46]	; 0x2e
    9c36:	f002 f9f5 	bl	c024 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9c3a:	b130      	cbz	r0, 9c4a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    9c3c:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
    9c40:	43c9      	mvns	r1, r1
    9c42:	ea71 0000 	orns	r0, r1, r0
    9c46:	d005      	beq.n	9c54 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    9c48:	e00a      	b.n	9c60 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x13c>
    9c4a:	f640 0156 	movw	r1, #2134	; 0x856
    9c4e:	2070      	movs	r0, #112	; 0x70
    9c50:	f002 fa60 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9c54:	f002 f8c2 	bl	bddc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    9c58:	f001 fca8 	bl	b5ac <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    9c5c:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    9c60:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    9c64:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    9c68:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    9c6c:	6840      	ldr	r0, [r0, #4]
    9c6e:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    9c72:	680a      	ldr	r2, [r1, #0]
    9c74:	b001      	add	sp, #4
    9c76:	2100      	movs	r1, #0
    9c78:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9c7c:	4710      	bx	r2
    9c7e:	f001 fe95 	bl	b9ac <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    9c82:	8ae0      	ldrh	r0, [r4, #22]
    9c84:	b110      	cbz	r0, 9c8c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    9c86:	f002 f9cd 	bl	c024 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9c8a:	b130      	cbz	r0, 9c9a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x176>
    9c8c:	f001 fea2 	bl	b9d4 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    9c90:	2800      	cmp	r0, #0
    9c92:	bf18      	it	ne
    9c94:	f884 7021 	strbne.w	r7, [r4, #33]	; 0x21
    9c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9c9a:	f44f 6106 	mov.w	r1, #2144	; 0x860
    9c9e:	2070      	movs	r0, #112	; 0x70
    9ca0:	f002 fa38 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9ca4:	4811      	ldr	r0, [pc, #68]	; (9cec <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    9ca6:	6007      	str	r7, [r0, #0]
    9ca8:	6898      	ldr	r0, [r3, #8]
    9caa:	6007      	str	r7, [r0, #0]
    9cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9cae:	7818      	ldrb	r0, [r3, #0]
    9cb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9cb4:	f002 bb00 	b.w	c2b8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9cb8:	f7ff fc40 	bl	953c <MPSL_IRQ_RADIO_Handler+0xbb4>
    9cbc:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    9cc0:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    9cc4:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    9cc8:	6840      	ldr	r0, [r0, #4]
    9cca:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    9cce:	680a      	ldr	r2, [r1, #0]
    9cd0:	b001      	add	sp, #4
    9cd2:	2105      	movs	r1, #5
    9cd4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9cd8:	4710      	bx	r2
    9cda:	f640 0173 	movw	r1, #2163	; 0x873
    9cde:	2070      	movs	r0, #112	; 0x70
    9ce0:	f002 fa18 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9ce4:	20000b58 	.word	0x20000b58
    9ce8:	20000308 	.word	0x20000308
    9cec:	40000508 	.word	0x40000508

00009cf0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    9cf0:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9cf4:	48f7      	ldr	r0, [pc, #988]	; (a0d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e4>)
    9cf6:	b097      	sub	sp, #92	; 0x5c
    9cf8:	460c      	mov	r4, r1
    9cfa:	6800      	ldr	r0, [r0, #0]
    9cfc:	4ff6      	ldr	r7, [pc, #984]	; (a0d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e8>)
    9cfe:	05c0      	lsls	r0, r0, #23
    9d00:	0dc0      	lsrs	r0, r0, #23
    9d02:	d00e      	beq.n	9d22 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    9d04:	3810      	subs	r0, #16
    9d06:	b240      	sxtb	r0, r0
    9d08:	2800      	cmp	r0, #0
    9d0a:	bfb8      	it	lt
    9d0c:	f000 000f 	andlt.w	r0, r0, #15
    9d10:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9d14:	bfac      	ite	ge
    9d16:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    9d1a:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    9d1e:	0940      	lsrs	r0, r0, #5
    9d20:	d00c      	beq.n	9d3c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c>
    9d22:	7820      	ldrb	r0, [r4, #0]
    9d24:	f04f 0a00 	mov.w	sl, #0
    9d28:	2800      	cmp	r0, #0
    9d2a:	bf18      	it	ne
    9d2c:	2801      	cmpne	r0, #1
    9d2e:	d017      	beq.n	9d60 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    9d30:	f240 61f9 	movw	r1, #1785	; 0x6f9
    9d34:	f04f 0070 	mov.w	r0, #112	; 0x70
    9d38:	f002 f9ec 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9d3c:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    9d40:	f04f 0a01 	mov.w	sl, #1
    9d44:	2820      	cmp	r0, #32
    9d46:	d006      	beq.n	9d56 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x66>
    9d48:	7820      	ldrb	r0, [r4, #0]
    9d4a:	b148      	cbz	r0, 9d60 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    9d4c:	f240 61f5 	movw	r1, #1781	; 0x6f5
    9d50:	2070      	movs	r0, #112	; 0x70
    9d52:	f002 f9df 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9d56:	f240 61f2 	movw	r1, #1778	; 0x6f2
    9d5a:	2070      	movs	r0, #112	; 0x70
    9d5c:	f002 f9da 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9d60:	f8df b378 	ldr.w	fp, [pc, #888]	; a0dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ec>
    9d64:	f1bb 0f00 	cmp.w	fp, #0
    9d68:	d004      	beq.n	9d74 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x84>
    9d6a:	2100      	movs	r1, #0
    9d6c:	f240 60fc 	movw	r0, #1788	; 0x6fc
    9d70:	f3af 8000 	nop.w
    9d74:	2000      	movs	r0, #0
    9d76:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    9d7a:	a905      	add	r1, sp, #20
    9d7c:	9112      	str	r1, [sp, #72]	; 0x48
    9d7e:	49d8      	ldr	r1, [pc, #864]	; (a0e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f0>)
    9d80:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9d82:	f04f 0801 	mov.w	r8, #1
    9d86:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    9d8a:	9001      	str	r0, [sp, #4]
    9d8c:	f1bb 0f00 	cmp.w	fp, #0
    9d90:	d004      	beq.n	9d9c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    9d92:	2100      	movs	r1, #0
    9d94:	f240 7007 	movw	r0, #1799	; 0x707
    9d98:	f3af 8000 	nop.w
    9d9c:	f1b8 0f00 	cmp.w	r8, #0
    9da0:	d009      	beq.n	9db6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    9da2:	bf00      	nop
    9da4:	f897 6041 	ldrb.w	r6, [r7, #65]	; 0x41
    9da8:	2500      	movs	r5, #0
    9daa:	f887 5031 	strb.w	r5, [r7, #49]	; 0x31
    9dae:	f1ba 0f00 	cmp.w	sl, #0
    9db2:	d007      	beq.n	9dc4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xd4>
    9db4:	e03e      	b.n	9e34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x144>
    9db6:	48cb      	ldr	r0, [pc, #812]	; (a0e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>)
    9db8:	2800      	cmp	r0, #0
    9dba:	bf18      	it	ne
    9dbc:	f3af 8000 	nopne.w
    9dc0:	b662      	cpsie	i
    9dc2:	e7ef      	b.n	9da4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb4>
    9dc4:	46b1      	mov	r9, r6
    9dc6:	2001      	movs	r0, #1
    9dc8:	ea20 0609 	bic.w	r6, r0, r9
    9dcc:	48c6      	ldr	r0, [pc, #792]	; (a0e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    9dce:	2240      	movs	r2, #64	; 0x40
    9dd0:	eb00 1189 	add.w	r1, r0, r9, lsl #6
    9dd4:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    9dd8:	f006 fd71 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    9ddc:	f1bb 0f00 	cmp.w	fp, #0
    9de0:	d004      	beq.n	9dec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xfc>
    9de2:	2100      	movs	r1, #0
    9de4:	f240 503c 	movw	r0, #1340	; 0x53c
    9de8:	f3af 8000 	nop.w
    9dec:	eb09 0149 	add.w	r1, r9, r9, lsl #1
    9df0:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    9df4:	4439      	add	r1, r7
    9df6:	4438      	add	r0, r7
    9df8:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    9dfa:	8502      	strh	r2, [r0, #40]	; 0x28
    9dfc:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    9e00:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    9e04:	f1bb 0f00 	cmp.w	fp, #0
    9e08:	d004      	beq.n	9e14 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x124>
    9e0a:	2100      	movs	r1, #0
    9e0c:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    9e10:	f3af 8000 	nop.w
    9e14:	f1bb 0f00 	cmp.w	fp, #0
    9e18:	d004      	beq.n	9e24 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x134>
    9e1a:	2100      	movs	r1, #0
    9e1c:	f240 7011 	movw	r0, #1809	; 0x711
    9e20:	f3af 8000 	nop.w
    9e24:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    9e28:	f88d 0020 	strb.w	r0, [sp, #32]
    9e2c:	f89d 0020 	ldrb.w	r0, [sp, #32]
    9e30:	2800      	cmp	r0, #0
    9e32:	d1ab      	bne.n	9d8c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    9e34:	f1bb 0f00 	cmp.w	fp, #0
    9e38:	d004      	beq.n	9e44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x154>
    9e3a:	2100      	movs	r1, #0
    9e3c:	f240 701b 	movw	r0, #1819	; 0x71b
    9e40:	f3af 8000 	nop.w
    9e44:	f001 fbb2 	bl	b5ac <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    9e48:	4681      	mov	r9, r0
    9e4a:	a802      	add	r0, sp, #8
    9e4c:	900a      	str	r0, [sp, #40]	; 0x28
    9e4e:	4688      	mov	r8, r1
    9e50:	8921      	ldrh	r1, [r4, #8]
    9e52:	4628      	mov	r0, r5
    9e54:	f361 401f 	bfi	r0, r1, #16, #16
    9e58:	4601      	mov	r1, r0
    9e5a:	7aa2      	ldrb	r2, [r4, #10]
    9e5c:	4628      	mov	r0, r5
    9e5e:	f362 0007 	bfi	r0, r2, #0, #8
    9e62:	7ae2      	ldrb	r2, [r4, #11]
    9e64:	f362 200f 	bfi	r0, r2, #8, #8
    9e68:	7822      	ldrb	r2, [r4, #0]
    9e6a:	9502      	str	r5, [sp, #8]
    9e6c:	f362 4017 	bfi	r0, r2, #16, #8
    9e70:	e9cd 5104 	strd	r5, r1, [sp, #16]
    9e74:	e9cd 0506 	strd	r0, r5, [sp, #24]
    9e78:	9503      	str	r5, [sp, #12]
    9e7a:	7820      	ldrb	r0, [r4, #0]
    9e7c:	b380      	cbz	r0, 9ee0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    9e7e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    9e82:	499a      	ldr	r1, [pc, #616]	; (a0ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3fc>)
    9e84:	1a08      	subs	r0, r1, r0
    9e86:	990a      	ldr	r1, [sp, #40]	; 0x28
    9e88:	f101 020c 	add.w	r2, r1, #12
    9e8c:	a914      	add	r1, sp, #80	; 0x50
    9e8e:	f001 f8ad 	bl	afec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9e92:	2200      	movs	r2, #0
    9e94:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    9e98:	4648      	mov	r0, r9
    9e9a:	4641      	mov	r1, r8
    9e9c:	f7fe ff66 	bl	8d6c <MPSL_IRQ_RADIO_Handler+0x3e4>
    9ea0:	468c      	mov	ip, r1
    9ea2:	7ae1      	ldrb	r1, [r4, #11]
    9ea4:	2900      	cmp	r1, #0
    9ea6:	bf0c      	ite	eq
    9ea8:	217a      	moveq	r1, #122	; 0x7a
    9eaa:	214a      	movne	r1, #74	; 0x4a
    9eac:	6862      	ldr	r2, [r4, #4]
    9eae:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9eb2:	4411      	add	r1, r2
    9eb4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    9eb8:	e9cd 0c02 	strd	r0, ip, [sp, #8]
    9ebc:	441a      	add	r2, r3
    9ebe:	4411      	add	r1, r2
    9ec0:	1c88      	adds	r0, r1, #2
    9ec2:	f001 f877 	bl	afb4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9ec6:	9600      	str	r6, [sp, #0]
    9ec8:	9004      	str	r0, [sp, #16]
    9eca:	464a      	mov	r2, r9
    9ecc:	4643      	mov	r3, r8
    9ece:	6920      	ldr	r0, [r4, #16]
    9ed0:	990a      	ldr	r1, [sp, #40]	; 0x28
    9ed2:	f7fe fdb3 	bl	8a3c <MPSL_IRQ_RADIO_Handler+0xb4>
    9ed6:	2800      	cmp	r0, #0
    9ed8:	bf08      	it	eq
    9eda:	e9cd 9802 	strdeq	r9, r8, [sp, #8]
    9ede:	e046      	b.n	9f6e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27e>
    9ee0:	e7ff      	b.n	9ee2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f2>
    9ee2:	4648      	mov	r0, r9
    9ee4:	4641      	mov	r1, r8
    9ee6:	f001 f803 	bl	aef0 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    9eea:	f8df c204 	ldr.w	ip, [pc, #516]	; a0f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x400>
    9eee:	4602      	mov	r2, r0
    9ef0:	eb10 0c0c 	adds.w	ip, r0, ip
    9ef4:	460b      	mov	r3, r1
    9ef6:	f141 0e00 	adc.w	lr, r1, #0
    9efa:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    9efe:	ebb0 0c0c 	subs.w	ip, r0, ip
    9f02:	eb71 0c0e 	sbcs.w	ip, r1, lr
    9f06:	d229      	bcs.n	9f5c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    9f08:	3229      	adds	r2, #41	; 0x29
    9f0a:	f143 0300 	adc.w	r3, r3, #0
    9f0e:	1a82      	subs	r2, r0, r2
    9f10:	eb71 0203 	sbcs.w	r2, r1, r3
    9f14:	d322      	bcc.n	9f5c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    9f16:	8922      	ldrh	r2, [r4, #8]
    9f18:	ab0a      	add	r3, sp, #40	; 0x28
    9f1a:	1a80      	subs	r0, r0, r2
    9f1c:	eb61 0105 	sbc.w	r1, r1, r5
    9f20:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9f22:	1e40      	subs	r0, r0, #1
    9f24:	9200      	str	r2, [sp, #0]
    9f26:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    9f2a:	aa0d      	add	r2, sp, #52	; 0x34
    9f2c:	f001 f804 	bl	af38 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    9f30:	7ae0      	ldrb	r0, [r4, #11]
    9f32:	2800      	cmp	r0, #0
    9f34:	bf0c      	ite	eq
    9f36:	207a      	moveq	r0, #122	; 0x7a
    9f38:	204a      	movne	r0, #74	; 0x4a
    9f3a:	990d      	ldr	r1, [sp, #52]	; 0x34
    9f3c:	8922      	ldrh	r2, [r4, #8]
    9f3e:	4408      	add	r0, r1
    9f40:	6861      	ldr	r1, [r4, #4]
    9f42:	4411      	add	r1, r2
    9f44:	4408      	add	r0, r1
    9f46:	1c80      	adds	r0, r0, #2
    9f48:	f001 f834 	bl	afb4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9f4c:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
    9f50:	e9cd 1202 	strd	r1, r2, [sp, #8]
    9f54:	1a40      	subs	r0, r0, r1
    9f56:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9f5a:	e007      	b.n	9f6c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27c>
    9f5c:	f1b9 0101 	subs.w	r1, r9, #1
    9f60:	f148 30ff 	adc.w	r0, r8, #4294967295	; 0xffffffff
    9f64:	e9cd 1002 	strd	r1, r0, [sp, #8]
    9f68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    9f6c:	9004      	str	r0, [sp, #16]
    9f6e:	f1bb 0f00 	cmp.w	fp, #0
    9f72:	d004      	beq.n	9f7e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x28e>
    9f74:	2100      	movs	r1, #0
    9f76:	f240 7022 	movw	r0, #1826	; 0x722
    9f7a:	f3af 8000 	nop.w
    9f7e:	495a      	ldr	r1, [pc, #360]	; (a0e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    9f80:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    9f84:	eb01 1186 	add.w	r1, r1, r6, lsl #6
    9f88:	9108      	str	r1, [sp, #32]
    9f8a:	f811 1018 	ldrb.w	r1, [r1, r8, lsl #1]
    9f8e:	a802      	add	r0, sp, #8
    9f90:	2901      	cmp	r1, #1
    9f92:	bf18      	it	ne
    9f94:	2902      	cmpne	r1, #2
    9f96:	d141      	bne.n	a01c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    9f98:	9511      	str	r5, [sp, #68]	; 0x44
    9f9a:	9a02      	ldr	r2, [sp, #8]
    9f9c:	f029 417f 	bic.w	r1, r9, #4278190080	; 0xff000000
    9fa0:	1a53      	subs	r3, r2, r1
    9fa2:	f8dd c010 	ldr.w	ip, [sp, #16]
    9fa6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9faa:	eb12 020c 	adds.w	r2, r2, ip
    9fae:	1a51      	subs	r1, r2, r1
    9fb0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9fb4:	2b02      	cmp	r3, #2
    9fb6:	d374      	bcc.n	a0a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    9fb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    9fbc:	bf98      	it	ls
    9fbe:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9fc2:	d86e      	bhi.n	a0a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    9fc4:	2501      	movs	r5, #1
    9fc6:	ab14      	add	r3, sp, #80	; 0x50
    9fc8:	aa0e      	add	r2, sp, #56	; 0x38
    9fca:	4631      	mov	r1, r6
    9fcc:	f7fe ff1e 	bl	8e0c <MPSL_IRQ_RADIO_Handler+0x484>
    9fd0:	2800      	cmp	r0, #0
    9fd2:	d06d      	beq.n	a0b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c0>
    9fd4:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    9fd8:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    9fdc:	4633      	mov	r3, r6
    9fde:	428a      	cmp	r2, r1
    9fe0:	d06a      	beq.n	a0b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>
    9fe2:	2005      	movs	r0, #5
    9fe4:	f7fe fcee 	bl	89c4 <MPSL_IRQ_RADIO_Handler+0x3c>
    9fe8:	9908      	ldr	r1, [sp, #32]
    9fea:	eb01 0148 	add.w	r1, r1, r8, lsl #1
    9fee:	7048      	strb	r0, [r1, #1]
    9ff0:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    9ff4:	2820      	cmp	r0, #32
    9ff6:	bf01      	itttt	eq
    9ff8:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    9ffc:	4438      	addeq	r0, r7
    9ffe:	f880 8028 	strbeq.w	r8, [r0, #40]	; 0x28
    a002:	9511      	streq	r5, [sp, #68]	; 0x44
    a004:	bf1e      	ittt	ne
    a006:	9908      	ldrne	r1, [sp, #32]
    a008:	eb01 0040 	addne.w	r0, r1, r0, lsl #1
    a00c:	f880 8001 	strbne.w	r8, [r0, #1]
    a010:	4632      	mov	r2, r6
    a012:	4641      	mov	r1, r8
    a014:	f05f 0003 	movs.w	r0, #3
    a018:	f7ff fb3c 	bl	9694 <MPSL_IRQ_RADIO_Handler+0xd0c>
    a01c:	f1bb 0f00 	cmp.w	fp, #0
    a020:	d004      	beq.n	a02c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    a022:	2100      	movs	r1, #0
    a024:	f240 7027 	movw	r0, #1831	; 0x727
    a028:	f3af 8000 	nop.w
    a02c:	4831      	ldr	r0, [pc, #196]	; (a0f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x404>)
    a02e:	2800      	cmp	r0, #0
    a030:	bf18      	it	ne
    a032:	f3af 8000 	nopne.w
    a036:	f3ef 8810 	mrs	r8, PRIMASK
    a03a:	b672      	cpsid	i
    a03c:	f1bb 0f00 	cmp.w	fp, #0
    a040:	d004      	beq.n	a04c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    a042:	2100      	movs	r1, #0
    a044:	f240 702d 	movw	r0, #1837	; 0x72d
    a048:	f3af 8000 	nop.w
    a04c:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    a050:	f88d 0020 	strb.w	r0, [sp, #32]
    a054:	f89d 0020 	ldrb.w	r0, [sp, #32]
    a058:	2800      	cmp	r0, #0
    a05a:	f47f ae97 	bne.w	9d8c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    a05e:	f1bb 0f00 	cmp.w	fp, #0
    a062:	d004      	beq.n	a06e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37e>
    a064:	2100      	movs	r1, #0
    a066:	f240 7035 	movw	r0, #1845	; 0x735
    a06a:	f3af 8000 	nop.w
    a06e:	f10d 0e04 	add.w	lr, sp, #4
    a072:	e89e 100f 	ldmia.w	lr, {r0, r1, r2, r3, ip}
    a076:	f100 0e08 	add.w	lr, r0, #8
    a07a:	e88e 100e 	stmia.w	lr, {r1, r2, r3, ip}
    a07e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    a082:	e9c0 1206 	strd	r1, r2, [r0, #24]
    a086:	b325      	cbz	r5, a0d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e2>
    a088:	f1bb 0f00 	cmp.w	fp, #0
    a08c:	d004      	beq.n	a098 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a8>
    a08e:	2100      	movs	r1, #0
    a090:	f240 7042 	movw	r0, #1858	; 0x742
    a094:	f3af 8000 	nop.w
    a098:	f1ba 0f00 	cmp.w	sl, #0
    a09c:	d146      	bne.n	a12c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    a09e:	e02b      	b.n	a0f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x408>
    a0a0:	e7ff      	b.n	a0a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    a0a2:	4632      	mov	r2, r6
    a0a4:	4641      	mov	r1, r8
    a0a6:	2004      	movs	r0, #4
    a0a8:	f7ff faf4 	bl	9694 <MPSL_IRQ_RADIO_Handler+0xd0c>
    a0ac:	2501      	movs	r5, #1
    a0ae:	e7b5      	b.n	a01c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    a0b0:	4632      	mov	r2, r6
    a0b2:	4641      	mov	r1, r8
    a0b4:	2004      	movs	r0, #4
    a0b6:	e7af      	b.n	a018 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    a0b8:	2920      	cmp	r1, #32
    a0ba:	bf1d      	ittte	ne
    a0bc:	9808      	ldrne	r0, [sp, #32]
    a0be:	eb00 0041 	addne.w	r0, r0, r1, lsl #1
    a0c2:	7840      	ldrbne	r0, [r0, #1]
    a0c4:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    a0c8:	bf04      	itt	eq
    a0ca:	4438      	addeq	r0, r7
    a0cc:	f890 0028 	ldrbeq.w	r0, [r0, #40]	; 0x28
    a0d0:	e78a      	b.n	9fe8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f8>
    a0d2:	e03b      	b.n	a14c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    a0d4:	e000ed04 	.word	0xe000ed04
    a0d8:	20000fd8 	.word	0x20000fd8
    a0dc:	00000000 	.word	0x00000000
    a0e0:	20000b58 	.word	0x20000b58
    a0e4:	00000000 	.word	0x00000000
    a0e8:	20000f58 	.word	0x20000f58
    a0ec:	1e847fff 	.word	0x1e847fff
    a0f0:	0f424000 	.word	0x0f424000
    a0f4:	00000000 	.word	0x00000000
    a0f8:	9811      	ldr	r0, [sp, #68]	; 0x44
    a0fa:	f010 0fff 	tst.w	r0, #255	; 0xff
    a0fe:	d015      	beq.n	a12c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    a100:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    a104:	2820      	cmp	r0, #32
    a106:	d111      	bne.n	a12c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    a108:	f1bb 0f00 	cmp.w	fp, #0
    a10c:	d004      	beq.n	a118 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x428>
    a10e:	2100      	movs	r1, #0
    a110:	f240 7047 	movw	r0, #1863	; 0x747
    a114:	f3af 8000 	nop.w
    a118:	4631      	mov	r1, r6
    a11a:	2002      	movs	r0, #2
    a11c:	f7ff faec 	bl	96f8 <MPSL_IRQ_RADIO_Handler+0xd70>
    a120:	9010      	str	r0, [sp, #64]	; 0x40
    a122:	b918      	cbnz	r0, a12c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    a124:	7820      	ldrb	r0, [r4, #0]
    a126:	b300      	cbz	r0, a16a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x47a>
    a128:	2801      	cmp	r0, #1
    a12a:	d02e      	beq.n	a18a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x49a>
    a12c:	f1bb 0f00 	cmp.w	fp, #0
    a130:	d004      	beq.n	a13c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x44c>
    a132:	2100      	movs	r1, #0
    a134:	f240 7064 	movw	r0, #1892	; 0x764
    a138:	f3af 8000 	nop.w
    a13c:	20ff      	movs	r0, #255	; 0xff
    a13e:	f1ba 0f00 	cmp.w	sl, #0
    a142:	bf18      	it	ne
    a144:	f887 0031 	strbne.w	r0, [r7, #49]	; 0x31
    a148:	d029      	beq.n	a19e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4ae>
    a14a:	2501      	movs	r5, #1
    a14c:	f1bb 0f00 	cmp.w	fp, #0
    a150:	d004      	beq.n	a15c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x46c>
    a152:	2100      	movs	r1, #0
    a154:	f240 7075 	movw	r0, #1909	; 0x775
    a158:	f3af 8000 	nop.w
    a15c:	9810      	ldr	r0, [sp, #64]	; 0x40
    a15e:	4c34      	ldr	r4, [pc, #208]	; (a230 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x540>)
    a160:	2802      	cmp	r0, #2
    a162:	d025      	beq.n	a1b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c0>
    a164:	2801      	cmp	r0, #1
    a166:	d02b      	beq.n	a1c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d0>
    a168:	e02f      	b.n	a1ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    a16a:	f1bb 0f00 	cmp.w	fp, #0
    a16e:	d004      	beq.n	a17a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x48a>
    a170:	2100      	movs	r1, #0
    a172:	f240 704f 	movw	r0, #1871	; 0x74f
    a176:	f3af 8000 	nop.w
    a17a:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    a17e:	2004      	movs	r0, #4
    a180:	9917      	ldr	r1, [sp, #92]	; 0x5c
    a182:	f7ff fa87 	bl	9694 <MPSL_IRQ_RADIO_Handler+0xd0c>
    a186:	2501      	movs	r5, #1
    a188:	e7e0      	b.n	a14c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    a18a:	f1bb 0f00 	cmp.w	fp, #0
    a18e:	f43f adfd 	beq.w	9d8c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    a192:	2100      	movs	r1, #0
    a194:	f240 705a 	movw	r0, #1882	; 0x75a
    a198:	f3af 8000 	nop.w
    a19c:	e5f6      	b.n	9d8c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    a19e:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    a1a2:	2101      	movs	r1, #1
    a1a4:	4391      	bics	r1, r2
    a1a6:	f887 1041 	strb.w	r1, [r7, #65]	; 0x41
    a1aa:	f887 0031 	strb.w	r0, [r7, #49]	; 0x31
    a1ae:	e7cc      	b.n	a14a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45a>
    a1b0:	68b8      	ldr	r0, [r7, #8]
    a1b2:	ebb0 0009 	subs.w	r0, r0, r9
    a1b6:	f006 f9f2 	bl	1059e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a1ba:	6861      	ldr	r1, [r4, #4]
    a1bc:	b921      	cbnz	r1, a1c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d8>
    a1be:	e004      	b.n	a1ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    a1c0:	6861      	ldr	r1, [r4, #4]
    a1c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a1c6:	b101      	cbz	r1, a1ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    a1c8:	4788      	blx	r1
    a1ca:	f1b8 0f00 	cmp.w	r8, #0
    a1ce:	d028      	beq.n	a222 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x532>
    a1d0:	f1bb 0f00 	cmp.w	fp, #0
    a1d4:	d004      	beq.n	a1e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4f0>
    a1d6:	2100      	movs	r1, #0
    a1d8:	f44f 60f1 	mov.w	r0, #1928	; 0x788
    a1dc:	f3af 8000 	nop.w
    a1e0:	b19d      	cbz	r5, a20a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    a1e2:	f897 0041 	ldrb.w	r0, [r7, #65]	; 0x41
    a1e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    a1ea:	4438      	add	r0, r7
    a1ec:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    a1f0:	2820      	cmp	r0, #32
    a1f2:	d00a      	beq.n	a20a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    a1f4:	f1bb 0f00 	cmp.w	fp, #0
    a1f8:	d004      	beq.n	a204 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x514>
    a1fa:	2100      	movs	r1, #0
    a1fc:	f240 708f 	movw	r0, #1935	; 0x78f
    a200:	f3af 8000 	nop.w
    a204:	7860      	ldrb	r0, [r4, #1]
    a206:	f002 f857 	bl	c2b8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a20a:	f1bb 0f00 	cmp.w	fp, #0
    a20e:	d004      	beq.n	a21a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x52a>
    a210:	2100      	movs	r1, #0
    a212:	f240 7094 	movw	r0, #1940	; 0x794
    a216:	f3af 8000 	nop.w
    a21a:	b019      	add	sp, #100	; 0x64
    a21c:	4628      	mov	r0, r5
    a21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a222:	4804      	ldr	r0, [pc, #16]	; (a234 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x544>)
    a224:	2800      	cmp	r0, #0
    a226:	bf18      	it	ne
    a228:	f3af 8000 	nopne.w
    a22c:	b662      	cpsie	i
    a22e:	e7cf      	b.n	a1d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e0>
    a230:	20000308 	.word	0x20000308
    a234:	00000000 	.word	0x00000000

0000a238 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    a238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a23c:	4604      	mov	r4, r0
    a23e:	7800      	ldrb	r0, [r0, #0]
    a240:	b095      	sub	sp, #84	; 0x54
    a242:	b118      	cbz	r0, a24c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    a244:	b015      	add	sp, #84	; 0x54
    a246:	2000      	movs	r0, #0
    a248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a24c:	48d1      	ldr	r0, [pc, #836]	; (a594 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x35c>)
    a24e:	6800      	ldr	r0, [r0, #0]
    a250:	05c0      	lsls	r0, r0, #23
    a252:	0dc0      	lsrs	r0, r0, #23
    a254:	d00e      	beq.n	a274 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    a256:	3810      	subs	r0, #16
    a258:	b240      	sxtb	r0, r0
    a25a:	2800      	cmp	r0, #0
    a25c:	bfb8      	it	lt
    a25e:	f000 000f 	andlt.w	r0, r0, #15
    a262:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a266:	bfac      	ite	ge
    a268:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a26c:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a270:	0940      	lsrs	r0, r0, #5
    a272:	d0e7      	beq.n	a244 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    a274:	a80d      	add	r0, sp, #52	; 0x34
    a276:	f8df 9320 	ldr.w	r9, [pc, #800]	; a598 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x360>
    a27a:	9009      	str	r0, [sp, #36]	; 0x24
    a27c:	f1b9 0f00 	cmp.w	r9, #0
    a280:	d004      	beq.n	a28c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x54>
    a282:	2100      	movs	r1, #0
    a284:	f240 50c5 	movw	r0, #1477	; 0x5c5
    a288:	f3af 8000 	nop.w
    a28c:	f8df 830c 	ldr.w	r8, [pc, #780]	; a59c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x364>
    a290:	f898 6041 	ldrb.w	r6, [r8, #65]	; 0x41
    a294:	2500      	movs	r5, #0
    a296:	f888 5031 	strb.w	r5, [r8, #49]	; 0x31
    a29a:	9503      	str	r5, [sp, #12]
    a29c:	f1b9 0f00 	cmp.w	r9, #0
    a2a0:	d004      	beq.n	a2ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x74>
    a2a2:	2100      	movs	r1, #0
    a2a4:	f240 50ca 	movw	r0, #1482	; 0x5ca
    a2a8:	f3af 8000 	nop.w
    a2ac:	2001      	movs	r0, #1
    a2ae:	ea20 0a06 	bic.w	sl, r0, r6
    a2b2:	48bb      	ldr	r0, [pc, #748]	; (a5a0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x368>)
    a2b4:	2240      	movs	r2, #64	; 0x40
    a2b6:	eb00 1186 	add.w	r1, r0, r6, lsl #6
    a2ba:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    a2be:	f006 fafe 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a2c2:	f1b9 0f00 	cmp.w	r9, #0
    a2c6:	d004      	beq.n	a2d2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x9a>
    a2c8:	2100      	movs	r1, #0
    a2ca:	f240 503c 	movw	r0, #1340	; 0x53c
    a2ce:	f3af 8000 	nop.w
    a2d2:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    a2d6:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    a2da:	eb01 0208 	add.w	r2, r1, r8
    a2de:	4440      	add	r0, r8
    a2e0:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    a2e2:	8501      	strh	r1, [r0, #40]	; 0x28
    a2e4:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
    a2e8:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    a2ec:	f1b9 0f00 	cmp.w	r9, #0
    a2f0:	d004      	beq.n	a2fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    a2f2:	2100      	movs	r1, #0
    a2f4:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    a2f8:	f3af 8000 	nop.w
    a2fc:	f1b9 0f00 	cmp.w	r9, #0
    a300:	d004      	beq.n	a30c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd4>
    a302:	2100      	movs	r1, #0
    a304:	f240 50cf 	movw	r0, #1487	; 0x5cf
    a308:	f3af 8000 	nop.w
    a30c:	f001 f94e 	bl	b5ac <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a310:	460f      	mov	r7, r1
    a312:	4606      	mov	r6, r0
    a314:	8921      	ldrh	r1, [r4, #8]
    a316:	4628      	mov	r0, r5
    a318:	f361 401f 	bfi	r0, r1, #16, #16
    a31c:	4601      	mov	r1, r0
    a31e:	7aa2      	ldrb	r2, [r4, #10]
    a320:	4628      	mov	r0, r5
    a322:	f362 0007 	bfi	r0, r2, #0, #8
    a326:	7ae2      	ldrb	r2, [r4, #11]
    a328:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
    a32c:	f362 200f 	bfi	r0, r2, #8, #8
    a330:	7822      	ldrb	r2, [r4, #0]
    a332:	950a      	str	r5, [sp, #40]	; 0x28
    a334:	f362 4017 	bfi	r0, r2, #16, #8
    a338:	e9cd 510c 	strd	r5, r1, [sp, #48]	; 0x30
    a33c:	e9cd 050e 	strd	r0, r5, [sp, #56]	; 0x38
    a340:	950b      	str	r5, [sp, #44]	; 0x2c
    a342:	7820      	ldrb	r0, [r4, #0]
    a344:	b388      	cbz	r0, a3aa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x172>
    a346:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    a34a:	4896      	ldr	r0, [pc, #600]	; (a5a4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36c>)
    a34c:	f10b 020c 	add.w	r2, fp, #12
    a350:	1a40      	subs	r0, r0, r1
    a352:	a911      	add	r1, sp, #68	; 0x44
    a354:	f000 fe4a 	bl	afec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a358:	2200      	movs	r2, #0
    a35a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    a35e:	4630      	mov	r0, r6
    a360:	4639      	mov	r1, r7
    a362:	f7fe fd03 	bl	8d6c <MPSL_IRQ_RADIO_Handler+0x3e4>
    a366:	4684      	mov	ip, r0
    a368:	7ae0      	ldrb	r0, [r4, #11]
    a36a:	460b      	mov	r3, r1
    a36c:	2800      	cmp	r0, #0
    a36e:	bf0c      	ite	eq
    a370:	207a      	moveq	r0, #122	; 0x7a
    a372:	204a      	movne	r0, #74	; 0x4a
    a374:	6861      	ldr	r1, [r4, #4]
    a376:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    a37a:	4408      	add	r0, r1
    a37c:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    a380:	e9cd c30a 	strd	ip, r3, [sp, #40]	; 0x28
    a384:	4411      	add	r1, r2
    a386:	4408      	add	r0, r1
    a388:	1c80      	adds	r0, r0, #2
    a38a:	f000 fe13 	bl	afb4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a38e:	f8cd a000 	str.w	sl, [sp]
    a392:	900c      	str	r0, [sp, #48]	; 0x30
    a394:	4632      	mov	r2, r6
    a396:	463b      	mov	r3, r7
    a398:	4659      	mov	r1, fp
    a39a:	6920      	ldr	r0, [r4, #16]
    a39c:	f7fe fb4e 	bl	8a3c <MPSL_IRQ_RADIO_Handler+0xb4>
    a3a0:	2800      	cmp	r0, #0
    a3a2:	bf08      	it	eq
    a3a4:	e9cd 670a 	strdeq	r6, r7, [sp, #40]	; 0x28
    a3a8:	e045      	b.n	a436 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fe>
    a3aa:	e7ff      	b.n	a3ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x174>
    a3ac:	4630      	mov	r0, r6
    a3ae:	4639      	mov	r1, r7
    a3b0:	f000 fd9e 	bl	aef0 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    a3b4:	4b7c      	ldr	r3, [pc, #496]	; (a5a8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    a3b6:	4602      	mov	r2, r0
    a3b8:	eb10 0c03 	adds.w	ip, r0, r3
    a3bc:	468b      	mov	fp, r1
    a3be:	f141 0300 	adc.w	r3, r1, #0
    a3c2:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    a3c6:	ebb0 0c0c 	subs.w	ip, r0, ip
    a3ca:	eb71 0303 	sbcs.w	r3, r1, r3
    a3ce:	d22a      	bcs.n	a426 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    a3d0:	3229      	adds	r2, #41	; 0x29
    a3d2:	f14b 0300 	adc.w	r3, fp, #0
    a3d6:	1a82      	subs	r2, r0, r2
    a3d8:	eb71 0203 	sbcs.w	r2, r1, r3
    a3dc:	d323      	bcc.n	a426 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    a3de:	8922      	ldrh	r2, [r4, #8]
    a3e0:	ab12      	add	r3, sp, #72	; 0x48
    a3e2:	1a80      	subs	r0, r0, r2
    a3e4:	eb61 0105 	sbc.w	r1, r1, r5
    a3e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a3ea:	1e40      	subs	r0, r0, #1
    a3ec:	9200      	str	r2, [sp, #0]
    a3ee:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    a3f2:	aa07      	add	r2, sp, #28
    a3f4:	f000 fda0 	bl	af38 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    a3f8:	7ae0      	ldrb	r0, [r4, #11]
    a3fa:	2800      	cmp	r0, #0
    a3fc:	bf0c      	ite	eq
    a3fe:	207a      	moveq	r0, #122	; 0x7a
    a400:	204a      	movne	r0, #74	; 0x4a
    a402:	9907      	ldr	r1, [sp, #28]
    a404:	8922      	ldrh	r2, [r4, #8]
    a406:	4408      	add	r0, r1
    a408:	6861      	ldr	r1, [r4, #4]
    a40a:	4411      	add	r1, r2
    a40c:	4408      	add	r0, r1
    a40e:	1c80      	adds	r0, r0, #2
    a410:	f000 fdd0 	bl	afb4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a414:	4601      	mov	r1, r0
    a416:	e9dd 0212 	ldrd	r0, r2, [sp, #72]	; 0x48
    a41a:	e9cd 020a 	strd	r0, r2, [sp, #40]	; 0x28
    a41e:	1a08      	subs	r0, r1, r0
    a420:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a424:	e006      	b.n	a434 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    a426:	1e70      	subs	r0, r6, #1
    a428:	f147 31ff 	adc.w	r1, r7, #4294967295	; 0xffffffff
    a42c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    a430:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    a434:	900c      	str	r0, [sp, #48]	; 0x30
    a436:	f1b9 0f00 	cmp.w	r9, #0
    a43a:	d004      	beq.n	a446 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20e>
    a43c:	2100      	movs	r1, #0
    a43e:	f240 50d5 	movw	r0, #1493	; 0x5d5
    a442:	f3af 8000 	nop.w
    a446:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    a44a:	f8d8 1008 	ldr.w	r1, [r8, #8]
    a44e:	1808      	adds	r0, r1, r0
    a450:	eb42 0105 	adc.w	r1, r2, r5
    a454:	f898 2042 	ldrb.w	r2, [r8, #66]	; 0x42
    a458:	2a20      	cmp	r2, #32
    a45a:	d009      	beq.n	a470 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    a45c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    a460:	1a12      	subs	r2, r2, r0
    a462:	eb73 0201 	sbcs.w	r2, r3, r1
    a466:	d203      	bcs.n	a470 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    a468:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    a46c:	2001      	movs	r0, #1
    a46e:	9003      	str	r0, [sp, #12]
    a470:	f1b9 0f00 	cmp.w	r9, #0
    a474:	d004      	beq.n	a480 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>
    a476:	2100      	movs	r1, #0
    a478:	f44f 60bc 	mov.w	r0, #1504	; 0x5e0
    a47c:	f3af 8000 	nop.w
    a480:	990a      	ldr	r1, [sp, #40]	; 0x28
    a482:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    a486:	1a0a      	subs	r2, r1, r0
    a488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a48a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    a48e:	18c9      	adds	r1, r1, r3
    a490:	1a08      	subs	r0, r1, r0
    a492:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a496:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    a49a:	bf98      	it	ls
    a49c:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    a4a0:	d80b      	bhi.n	a4ba <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    a4a2:	4632      	mov	r2, r6
    a4a4:	463b      	mov	r3, r7
    a4a6:	a90a      	add	r1, sp, #40	; 0x28
    a4a8:	483f      	ldr	r0, [pc, #252]	; (a5a8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    a4aa:	f8cd a000 	str.w	sl, [sp]
    a4ae:	f7fe fac5 	bl	8a3c <MPSL_IRQ_RADIO_Handler+0xb4>
    a4b2:	9903      	ldr	r1, [sp, #12]
    a4b4:	4308      	orrs	r0, r1
    a4b6:	d145      	bne.n	a544 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x30c>
    a4b8:	e05f      	b.n	a57a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    a4ba:	f8bd b036 	ldrh.w	fp, [sp, #54]	; 0x36
    a4be:	aa05      	add	r2, sp, #20
    a4c0:	a903      	add	r1, sp, #12
    a4c2:	4658      	mov	r0, fp
    a4c4:	f000 fd92 	bl	afec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a4c8:	f001 fa8e 	bl	b9e8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    a4cc:	f000 fd72 	bl	afb4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a4d0:	4682      	mov	sl, r0
    a4d2:	f898 0042 	ldrb.w	r0, [r8, #66]	; 0x42
    a4d6:	2820      	cmp	r0, #32
    a4d8:	d00a      	beq.n	a4f0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>
    a4da:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    a4de:	f8d8 3008 	ldr.w	r3, [r8, #8]
    a4e2:	1d80      	adds	r0, r0, #6
    a4e4:	f145 0100 	adc.w	r1, r5, #0
    a4e8:	181e      	adds	r6, r3, r0
    a4ea:	eb42 0701 	adc.w	r7, r2, r1
    a4ee:	e024      	b.n	a53a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    a4f0:	360a      	adds	r6, #10
    a4f2:	f147 0700 	adc.w	r7, r7, #0
    a4f6:	f1bb 0f00 	cmp.w	fp, #0
    a4fa:	d017      	beq.n	a52c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    a4fc:	f001 fd92 	bl	c024 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a500:	b9a0      	cbnz	r0, a52c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    a502:	f001 fc49 	bl	bd98 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a506:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a50a:	bf08      	it	eq
    a50c:	200d      	moveq	r0, #13
    a50e:	d00b      	beq.n	a528 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    a510:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a514:	3856      	subs	r0, #86	; 0x56
    a516:	bf08      	it	eq
    a518:	201c      	moveq	r0, #28
    a51a:	d005      	beq.n	a528 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    a51c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a520:	389f      	subs	r0, #159	; 0x9f
    a522:	bf14      	ite	ne
    a524:	4628      	movne	r0, r5
    a526:	2032      	moveq	r0, #50	; 0x32
    a528:	1986      	adds	r6, r0, r6
    a52a:	416f      	adcs	r7, r5
    a52c:	9803      	ldr	r0, [sp, #12]
    a52e:	4582      	cmp	sl, r0
    a530:	d903      	bls.n	a53a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    a532:	ebaa 0000 	sub.w	r0, sl, r0
    a536:	1986      	adds	r6, r0, r6
    a538:	416f      	adcs	r7, r5
    a53a:	201f      	movs	r0, #31
    a53c:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    a540:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    a544:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a548:	f000 fcd2 	bl	aef0 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    a54c:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    a550:	1880      	adds	r0, r0, r2
    a552:	eb41 0205 	adc.w	r2, r1, r5
    a556:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
    a55a:	1840      	adds	r0, r0, r1
    a55c:	eb42 0105 	adc.w	r1, r2, r5
    a560:	1c40      	adds	r0, r0, #1
    a562:	f141 0100 	adc.w	r1, r1, #0
    a566:	f1b9 0f00 	cmp.w	r9, #0
    a56a:	e9c4 0104 	strd	r0, r1, [r4, #16]
    a56e:	d004      	beq.n	a57a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    a570:	2100      	movs	r1, #0
    a572:	f240 50fa 	movw	r0, #1530	; 0x5fa
    a576:	f3af 8000 	nop.w
    a57a:	f898 0031 	ldrb.w	r0, [r8, #49]	; 0x31
    a57e:	f88d 0000 	strb.w	r0, [sp]
    a582:	f89d 0000 	ldrb.w	r0, [sp]
    a586:	2800      	cmp	r0, #0
    a588:	f47f ae78 	bne.w	a27c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x44>
    a58c:	b015      	add	sp, #84	; 0x54
    a58e:	2001      	movs	r0, #1
    a590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a594:	e000ed04 	.word	0xe000ed04
    a598:	00000000 	.word	0x00000000
    a59c:	20000fd8 	.word	0x20000fd8
    a5a0:	20000f58 	.word	0x20000f58
    a5a4:	1e847fff 	.word	0x1e847fff
    a5a8:	0f424000 	.word	0x0f424000

0000a5ac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    a5ac:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a5b0:	4d9d      	ldr	r5, [pc, #628]	; (a828 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x27c>)
    a5b2:	b08c      	sub	sp, #48	; 0x30
    a5b4:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    a5b8:	2000      	movs	r0, #0
    a5ba:	9007      	str	r0, [sp, #28]
    a5bc:	9008      	str	r0, [sp, #32]
    a5be:	2001      	movs	r0, #1
    a5c0:	4c9a      	ldr	r4, [pc, #616]	; (a82c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x280>)
    a5c2:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    a5c6:	f04f 0800 	mov.w	r8, #0
    a5ca:	4607      	mov	r7, r0
    a5cc:	9006      	str	r0, [sp, #24]
    a5ce:	b124      	cbz	r4, a5da <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    a5d0:	2100      	movs	r1, #0
    a5d2:	f240 70a5 	movw	r0, #1957	; 0x7a5
    a5d6:	f3af 8000 	nop.w
    a5da:	9806      	ldr	r0, [sp, #24]
    a5dc:	2800      	cmp	r0, #0
    a5de:	d03c      	beq.n	a65a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    a5e0:	f885 8031 	strb.w	r8, [r5, #49]	; 0x31
    a5e4:	b124      	cbz	r4, a5f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    a5e6:	2100      	movs	r1, #0
    a5e8:	f240 70aa 	movw	r0, #1962	; 0x7aa
    a5ec:	f3af 8000 	nop.w
    a5f0:	f895 a041 	ldrb.w	sl, [r5, #65]	; 0x41
    a5f4:	2240      	movs	r2, #64	; 0x40
    a5f6:	ea27 060a 	bic.w	r6, r7, sl
    a5fa:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    a5fe:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    a602:	4683      	mov	fp, r0
    a604:	f006 f95b 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a608:	b124      	cbz	r4, a614 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    a60a:	2100      	movs	r1, #0
    a60c:	f240 503c 	movw	r0, #1340	; 0x53c
    a610:	f3af 8000 	nop.w
    a614:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a618:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    a61c:	4428      	add	r0, r5
    a61e:	4429      	add	r1, r5
    a620:	9000      	str	r0, [sp, #0]
    a622:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    a624:	8502      	strh	r2, [r0, #40]	; 0x28
    a626:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    a62a:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    a62e:	b124      	cbz	r4, a63a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    a630:	2100      	movs	r1, #0
    a632:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    a636:	f3af 8000 	nop.w
    a63a:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    a63e:	f88d 0008 	strb.w	r0, [sp, #8]
    a642:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a646:	b178      	cbz	r0, a668 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    a648:	2c00      	cmp	r4, #0
    a64a:	bf1c      	itt	ne
    a64c:	2100      	movne	r1, #0
    a64e:	f44f 60f6 	movne.w	r0, #1968	; 0x7b0
    a652:	d0bc      	beq.n	a5ce <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a654:	f3af 8000 	nop.w
    a658:	e7b9      	b.n	a5ce <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a65a:	4875      	ldr	r0, [pc, #468]	; (a830 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    a65c:	2800      	cmp	r0, #0
    a65e:	bf18      	it	ne
    a660:	f3af 8000 	nopne.w
    a664:	b662      	cpsie	i
    a666:	e7bb      	b.n	a5e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    a668:	b124      	cbz	r4, a674 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    a66a:	2100      	movs	r1, #0
    a66c:	f240 70b4 	movw	r0, #1972	; 0x7b4
    a670:	f3af 8000 	nop.w
    a674:	980c      	ldr	r0, [sp, #48]	; 0x30
    a676:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    a67a:	2803      	cmp	r0, #3
    a67c:	d17e      	bne.n	a77c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    a67e:	9a00      	ldr	r2, [sp, #0]
    a680:	990c      	ldr	r1, [sp, #48]	; 0x30
    a682:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
    a686:	4288      	cmp	r0, r1
    a688:	bf14      	ite	ne
    a68a:	f04f 0a00 	movne.w	sl, #0
    a68e:	f04f 0a01 	moveq.w	sl, #1
    a692:	f102 0c28 	add.w	ip, r2, #40	; 0x28
    a696:	4683      	mov	fp, r0
    a698:	2220      	movs	r2, #32
    a69a:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    a69e:	e003      	b.n	a6a8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    a6a0:	4602      	mov	r2, r0
    a6a2:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    a6a6:	7840      	ldrb	r0, [r0, #1]
    a6a8:	4288      	cmp	r0, r1
    a6aa:	d002      	beq.n	a6b2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    a6ac:	2820      	cmp	r0, #32
    a6ae:	d00a      	beq.n	a6c6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    a6b0:	e7f6      	b.n	a6a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    a6b2:	2820      	cmp	r0, #32
    a6b4:	d007      	beq.n	a6c6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    a6b6:	4583      	cmp	fp, r0
    a6b8:	d107      	bne.n	a6ca <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    a6ba:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    a6be:	7840      	ldrb	r0, [r0, #1]
    a6c0:	f88c 0000 	strb.w	r0, [ip]
    a6c4:	e007      	b.n	a6d6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    a6c6:	4640      	mov	r0, r8
    a6c8:	e00c      	b.n	a6e4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    a6ca:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    a6ce:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    a6d2:	7840      	ldrb	r0, [r0, #1]
    a6d4:	7048      	strb	r0, [r1, #1]
    a6d6:	b124      	cbz	r4, a6e2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    a6d8:	2100      	movs	r1, #0
    a6da:	f240 40a4 	movw	r0, #1188	; 0x4a4
    a6de:	f3af 8000 	nop.w
    a6e2:	4638      	mov	r0, r7
    a6e4:	46c3      	mov	fp, r8
    a6e6:	ea10 0f0a 	tst.w	r0, sl
    a6ea:	bf18      	it	ne
    a6ec:	46bb      	movne	fp, r7
    a6ee:	2800      	cmp	r0, #0
    a6f0:	d04e      	beq.n	a790 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    a6f2:	b124      	cbz	r4, a6fe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    a6f4:	2100      	movs	r1, #0
    a6f6:	f240 70b9 	movw	r0, #1977	; 0x7b9
    a6fa:	f3af 8000 	nop.w
    a6fe:	4632      	mov	r2, r6
    a700:	2001      	movs	r0, #1
    a702:	990c      	ldr	r1, [sp, #48]	; 0x30
    a704:	f7fe ffc6 	bl	9694 <MPSL_IRQ_RADIO_Handler+0xd0c>
    a708:	b124      	cbz	r4, a714 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    a70a:	2100      	movs	r1, #0
    a70c:	f240 70c2 	movw	r0, #1986	; 0x7c2
    a710:	f3af 8000 	nop.w
    a714:	4847      	ldr	r0, [pc, #284]	; (a834 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x288>)
    a716:	2800      	cmp	r0, #0
    a718:	bf18      	it	ne
    a71a:	f3af 8000 	nopne.w
    a71e:	f3ef 8010 	mrs	r0, PRIMASK
    a722:	b672      	cpsid	i
    a724:	9006      	str	r0, [sp, #24]
    a726:	b124      	cbz	r4, a732 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    a728:	2100      	movs	r1, #0
    a72a:	f240 70c7 	movw	r0, #1991	; 0x7c7
    a72e:	f3af 8000 	nop.w
    a732:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    a736:	f88d 0008 	strb.w	r0, [sp, #8]
    a73a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a73e:	b138      	cbz	r0, a750 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    a740:	2c00      	cmp	r4, #0
    a742:	bf1c      	itt	ne
    a744:	2100      	movne	r1, #0
    a746:	f240 70cb 	movwne	r0, #1995	; 0x7cb
    a74a:	f43f af40 	beq.w	a5ce <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a74e:	e781      	b.n	a654 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    a750:	f1bb 0f00 	cmp.w	fp, #0
    a754:	d009      	beq.n	a76a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    a756:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    a75a:	2820      	cmp	r0, #32
    a75c:	d105      	bne.n	a76a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    a75e:	4631      	mov	r1, r6
    a760:	2002      	movs	r0, #2
    a762:	f7fe ffc9 	bl	96f8 <MPSL_IRQ_RADIO_Handler+0xd70>
    a766:	9008      	str	r0, [sp, #32]
    a768:	b1f8      	cbz	r0, a7aa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    a76a:	b124      	cbz	r4, a776 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    a76c:	2100      	movs	r1, #0
    a76e:	f240 70df 	movw	r0, #2015	; 0x7df
    a772:	f3af 8000 	nop.w
    a776:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    a77a:	e000      	b.n	a77e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    a77c:	e008      	b.n	a790 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    a77e:	ea27 0000 	bic.w	r0, r7, r0
    a782:	f885 0041 	strb.w	r0, [r5, #65]	; 0x41
    a786:	20ff      	movs	r0, #255	; 0xff
    a788:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    a78c:	2001      	movs	r0, #1
    a78e:	9007      	str	r0, [sp, #28]
    a790:	b124      	cbz	r4, a79c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    a792:	2100      	movs	r1, #0
    a794:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
    a798:	f3af 8000 	nop.w
    a79c:	9808      	ldr	r0, [sp, #32]
    a79e:	4e26      	ldr	r6, [pc, #152]	; (a838 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x28c>)
    a7a0:	2802      	cmp	r0, #2
    a7a2:	d009      	beq.n	a7b8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    a7a4:	2801      	cmp	r0, #1
    a7a6:	d027      	beq.n	a7f8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24c>
    a7a8:	e02b      	b.n	a802 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    a7aa:	b354      	cbz	r4, a802 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    a7ac:	2100      	movs	r1, #0
    a7ae:	f240 70da 	movw	r0, #2010	; 0x7da
    a7b2:	f3af 8000 	nop.w
    a7b6:	e7ec      	b.n	a792 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    a7b8:	f000 fef8 	bl	b5ac <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a7bc:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    a7c0:	ebb3 0c00 	subs.w	ip, r3, r0
    a7c4:	eb72 0c01 	sbcs.w	ip, r2, r1
    a7c8:	d204      	bcs.n	a7d4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    a7ca:	f240 71ee 	movw	r1, #2030	; 0x7ee
    a7ce:	2070      	movs	r0, #112	; 0x70
    a7d0:	f001 fca0 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a7d4:	1a18      	subs	r0, r3, r0
    a7d6:	eb62 0101 	sbc.w	r1, r2, r1
    a7da:	f5b0 0200 	subs.w	r2, r0, #8388608	; 0x800000
    a7de:	f171 0100 	sbcs.w	r1, r1, #0
    a7e2:	d304      	bcc.n	a7ee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x242>
    a7e4:	f240 71ef 	movw	r1, #2031	; 0x7ef
    a7e8:	2070      	movs	r0, #112	; 0x70
    a7ea:	f001 fc93 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a7ee:	f005 fed6 	bl	1059e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a7f2:	6871      	ldr	r1, [r6, #4]
    a7f4:	b129      	cbz	r1, a802 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    a7f6:	e003      	b.n	a800 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>
    a7f8:	6871      	ldr	r1, [r6, #4]
    a7fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a7fe:	b101      	cbz	r1, a802 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    a800:	4788      	blx	r1
    a802:	9806      	ldr	r0, [sp, #24]
    a804:	b148      	cbz	r0, a81a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x26e>
    a806:	b124      	cbz	r4, a812 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x266>
    a808:	2100      	movs	r1, #0
    a80a:	f240 70ff 	movw	r0, #2047	; 0x7ff
    a80e:	f3af 8000 	nop.w
    a812:	9807      	ldr	r0, [sp, #28]
    a814:	b00d      	add	sp, #52	; 0x34
    a816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a81a:	4805      	ldr	r0, [pc, #20]	; (a830 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    a81c:	2800      	cmp	r0, #0
    a81e:	bf18      	it	ne
    a820:	f3af 8000 	nopne.w
    a824:	b662      	cpsie	i
    a826:	e7ee      	b.n	a806 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25a>
    a828:	20000fd8 	.word	0x20000fd8
	...
    a838:	20000308 	.word	0x20000308

0000a83c <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    a83c:	2820      	cmp	r0, #32
    a83e:	bf24      	itt	cs
    a840:	2000      	movcs	r0, #0
    a842:	4770      	bxcs	lr
    a844:	4b03      	ldr	r3, [pc, #12]	; (a854 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x18>)
    a846:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    a84a:	e9c0 1200 	strd	r1, r2, [r0]
    a84e:	2001      	movs	r0, #1
    a850:	4770      	bx	lr
    a852:	0000      	.short	0x0000
    a854:	20000b58 	.word	0x20000b58

0000a858 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    a858:	b510      	push	{r4, lr}
    a85a:	2820      	cmp	r0, #32
    a85c:	d211      	bcs.n	a882 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    a85e:	490e      	ldr	r1, [pc, #56]	; (a898 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    a860:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    a864:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    a868:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    a86c:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    a870:	b13b      	cbz	r3, a882 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    a872:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    a876:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    a87a:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    a87e:	2a01      	cmp	r2, #1
    a880:	d001      	beq.n	a886 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    a882:	2000      	movs	r0, #0
    a884:	bd10      	pop	{r4, pc}
    a886:	f891 2041 	ldrb.w	r2, [r1, #65]	; 0x41
    a88a:	4601      	mov	r1, r0
    a88c:	2000      	movs	r0, #0
    a88e:	f7fe ff01 	bl	9694 <MPSL_IRQ_RADIO_Handler+0xd0c>
    a892:	2001      	movs	r0, #1
    a894:	bd10      	pop	{r4, pc}
    a896:	0000      	.short	0x0000
    a898:	20000fd8 	.word	0x20000fd8

0000a89c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    a89c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a8a0:	4e86      	ldr	r6, [pc, #536]	; (aabc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    a8a2:	4680      	mov	r8, r0
    a8a4:	f896 0041 	ldrb.w	r0, [r6, #65]	; 0x41
    a8a8:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    a8ac:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    a8b0:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    a8b4:	2800      	cmp	r0, #0
    a8b6:	d071      	beq.n	a99c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    a8b8:	f896 9041 	ldrb.w	r9, [r6, #65]	; 0x41
    a8bc:	4d80      	ldr	r5, [pc, #512]	; (aac0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    a8be:	b125      	cbz	r5, a8ca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    a8c0:	2100      	movs	r1, #0
    a8c2:	f640 307b 	movw	r0, #2939	; 0xb7b
    a8c6:	f3af 8000 	nop.w
    a8ca:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    a8ce:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    a8d2:	2801      	cmp	r0, #1
    a8d4:	d018      	beq.n	a908 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    a8d6:	b2c0      	uxtb	r0, r0
    a8d8:	2804      	cmp	r0, #4
    a8da:	bf1c      	itt	ne
    a8dc:	2805      	cmpne	r0, #5
    a8de:	2806      	cmpne	r0, #6
    a8e0:	d061      	beq.n	a9a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    a8e2:	b12d      	cbz	r5, a8f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    a8e4:	f04f 0100 	mov.w	r1, #0
    a8e8:	f640 3087 	movw	r0, #2951	; 0xb87
    a8ec:	f3af 8000 	nop.w
    a8f0:	f005 ff8b 	bl	1080a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    a8f4:	b125      	cbz	r5, a900 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    a8f6:	2100      	movs	r1, #0
    a8f8:	f640 308b 	movw	r0, #2955	; 0xb8b
    a8fc:	f3af 8000 	nop.w
    a900:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    a904:	2801      	cmp	r0, #1
    a906:	d1e6      	bne.n	a8d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    a908:	2401      	movs	r4, #1
    a90a:	b125      	cbz	r5, a916 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    a90c:	2100      	movs	r1, #0
    a90e:	f640 3092 	movw	r0, #2962	; 0xb92
    a912:	f3af 8000 	nop.w
    a916:	2c00      	cmp	r4, #0
    a918:	d04b      	beq.n	a9b2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    a91a:	2000      	movs	r0, #0
    a91c:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    a920:	b125      	cbz	r5, a92c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    a922:	2100      	movs	r1, #0
    a924:	f640 3097 	movw	r0, #2967	; 0xb97
    a928:	f3af 8000 	nop.w
    a92c:	f896 b041 	ldrb.w	fp, [r6, #65]	; 0x41
    a930:	2001      	movs	r0, #1
    a932:	ea20 090b 	bic.w	r9, r0, fp
    a936:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    a93a:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    a93e:	2240      	movs	r2, #64	; 0x40
    a940:	f005 ffbd 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a944:	b125      	cbz	r5, a950 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    a946:	2100      	movs	r1, #0
    a948:	f240 503c 	movw	r0, #1340	; 0x53c
    a94c:	f3af 8000 	nop.w
    a950:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    a954:	eb00 0a06 	add.w	sl, r0, r6
    a958:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    a95c:	4430      	add	r0, r6
    a95e:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    a960:	f8aa 1028 	strh.w	r1, [sl, #40]	; 0x28
    a964:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    a968:	f88a 002a 	strb.w	r0, [sl, #42]	; 0x2a
    a96c:	b125      	cbz	r5, a978 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    a96e:	2100      	movs	r1, #0
    a970:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    a974:	f3af 8000 	nop.w
    a978:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    a97c:	f88d 0000 	strb.w	r0, [sp]
    a980:	f89d 0000 	ldrb.w	r0, [sp]
    a984:	b1e0      	cbz	r0, a9c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    a986:	2d00      	cmp	r5, #0
    a988:	bf1c      	itt	ne
    a98a:	2100      	movne	r1, #0
    a98c:	f640 309d 	movwne	r0, #2973	; 0xb9d
    a990:	d0bb      	beq.n	a90a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    a992:	bf00      	nop
    a994:	f3af 8000 	nop.w
    a998:	e7b7      	b.n	a90a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    a99a:	e7ff      	b.n	a99c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    a99c:	f640 3172 	movw	r1, #2930	; 0xb72
    a9a0:	2070      	movs	r0, #112	; 0x70
    a9a2:	f001 fbb7 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a9a6:	464a      	mov	r2, r9
    a9a8:	4641      	mov	r1, r8
    a9aa:	2001      	movs	r0, #1
    a9ac:	f7fe fe72 	bl	9694 <MPSL_IRQ_RADIO_Handler+0xd0c>
    a9b0:	e7a0      	b.n	a8f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    a9b2:	4844      	ldr	r0, [pc, #272]	; (aac4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    a9b4:	2800      	cmp	r0, #0
    a9b6:	bf18      	it	ne
    a9b8:	f3af 8000 	nopne.w
    a9bc:	b662      	cpsie	i
    a9be:	e7ac      	b.n	a91a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    a9c0:	b125      	cbz	r5, a9cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    a9c2:	2100      	movs	r1, #0
    a9c4:	f640 30a1 	movw	r0, #2977	; 0xba1
    a9c8:	f3af 8000 	nop.w
    a9cc:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    a9d0:	f10a 0129 	add.w	r1, sl, #41	; 0x29
    a9d4:	4640      	mov	r0, r8
    a9d6:	461c      	mov	r4, r3
    a9d8:	f04f 0b20 	mov.w	fp, #32
    a9dc:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    a9e0:	f10a 0a2a 	add.w	sl, sl, #42	; 0x2a
    a9e4:	e004      	b.n	a9f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    a9e6:	46a3      	mov	fp, r4
    a9e8:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    a9ec:	f89c 4001 	ldrb.w	r4, [ip, #1]
    a9f0:	4284      	cmp	r4, r0
    a9f2:	d002      	beq.n	a9fa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    a9f4:	2c20      	cmp	r4, #32
    a9f6:	d02b      	beq.n	aa50 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    a9f8:	e7f5      	b.n	a9e6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    a9fa:	2c20      	cmp	r4, #32
    a9fc:	d028      	beq.n	aa50 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    a9fe:	42a3      	cmp	r3, r4
    aa00:	d104      	bne.n	aa0c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    aa02:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    aa06:	7840      	ldrb	r0, [r0, #1]
    aa08:	7008      	strb	r0, [r1, #0]
    aa0a:	e005      	b.n	aa18 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    aa0c:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    aa10:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    aa14:	7840      	ldrb	r0, [r0, #1]
    aa16:	7048      	strb	r0, [r1, #1]
    aa18:	f1ba 0f00 	cmp.w	sl, #0
    aa1c:	d011      	beq.n	aa42 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    aa1e:	b125      	cbz	r5, aa2a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    aa20:	2100      	movs	r1, #0
    aa22:	f240 409c 	movw	r0, #1180	; 0x49c
    aa26:	f3af 8000 	nop.w
    aa2a:	f89a 0000 	ldrb.w	r0, [sl]
    aa2e:	42a0      	cmp	r0, r4
    aa30:	d107      	bne.n	aa42 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    aa32:	b125      	cbz	r5, aa3e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    aa34:	2100      	movs	r1, #0
    aa36:	f240 409f 	movw	r0, #1183	; 0x49f
    aa3a:	f3af 8000 	nop.w
    aa3e:	f88a b000 	strb.w	fp, [sl]
    aa42:	b15d      	cbz	r5, aa5c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    aa44:	2100      	movs	r1, #0
    aa46:	f240 40a4 	movw	r0, #1188	; 0x4a4
    aa4a:	f3af 8000 	nop.w
    aa4e:	e000      	b.n	aa52 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    aa50:	b125      	cbz	r5, aa5c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    aa52:	2100      	movs	r1, #0
    aa54:	f640 30a5 	movw	r0, #2981	; 0xba5
    aa58:	f3af 8000 	nop.w
    aa5c:	481a      	ldr	r0, [pc, #104]	; (aac8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    aa5e:	2800      	cmp	r0, #0
    aa60:	bf18      	it	ne
    aa62:	f3af 8000 	nopne.w
    aa66:	f3ef 8410 	mrs	r4, PRIMASK
    aa6a:	b672      	cpsid	i
    aa6c:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    aa70:	f88d 0000 	strb.w	r0, [sp]
    aa74:	f89d 0000 	ldrb.w	r0, [sp]
    aa78:	b138      	cbz	r0, aa8a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    aa7a:	2d00      	cmp	r5, #0
    aa7c:	bf1c      	itt	ne
    aa7e:	2100      	movne	r1, #0
    aa80:	f640 30ab 	movwne	r0, #2987	; 0xbab
    aa84:	f43f af41 	beq.w	a90a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    aa88:	e784      	b.n	a994 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    aa8a:	f886 9041 	strb.w	r9, [r6, #65]	; 0x41
    aa8e:	20ff      	movs	r0, #255	; 0xff
    aa90:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    aa94:	b154      	cbz	r4, aaac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    aa96:	2d00      	cmp	r5, #0
    aa98:	bf08      	it	eq
    aa9a:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa9e:	2100      	movs	r1, #0
    aaa0:	f640 30b8 	movw	r0, #3000	; 0xbb8
    aaa4:	f3af 8000 	nop.w
    aaa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aaac:	4805      	ldr	r0, [pc, #20]	; (aac4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    aaae:	2800      	cmp	r0, #0
    aab0:	bf18      	it	ne
    aab2:	f3af 8000 	nopne.w
    aab6:	b662      	cpsie	i
    aab8:	e7ed      	b.n	aa96 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    aaba:	0000      	.short	0x0000
    aabc:	20000fd8 	.word	0x20000fd8
	...

0000aacc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    aacc:	b570      	push	{r4, r5, r6, lr}
    aace:	460d      	mov	r5, r1
    aad0:	4606      	mov	r6, r0
    aad2:	f001 fa95 	bl	c000 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    aad6:	480d      	ldr	r0, [pc, #52]	; (ab0c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    aad8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    aadc:	2400      	movs	r4, #0
    aade:	3880      	subs	r0, #128	; 0x80
    aae0:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    aae4:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    aae8:	b129      	cbz	r1, aaf6 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    aaea:	1c61      	adds	r1, r4, #1
    aaec:	b2cc      	uxtb	r4, r1
    aaee:	2c20      	cmp	r4, #32
    aaf0:	d3f8      	bcc.n	aae4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    aaf2:	2020      	movs	r0, #32
    aaf4:	bd70      	pop	{r4, r5, r6, pc}
    aaf6:	4806      	ldr	r0, [pc, #24]	; (ab10 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x44>)
    aaf8:	4621      	mov	r1, r4
    aafa:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    aafe:	e9c0 6500 	strd	r6, r5, [r0]
    ab02:	2001      	movs	r0, #1
    ab04:	f7fe fdc6 	bl	9694 <MPSL_IRQ_RADIO_Handler+0xd0c>
    ab08:	4620      	mov	r0, r4
    ab0a:	bd70      	pop	{r4, r5, r6, pc}
    ab0c:	20000fd8 	.word	0x20000fd8
    ab10:	20000b58 	.word	0x20000b58

0000ab14 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    ab14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab18:	f000 fd48 	bl	b5ac <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    ab1c:	4606      	mov	r6, r0
    ab1e:	460f      	mov	r7, r1
    ab20:	f000 fe88 	bl	b834 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    ab24:	4c65      	ldr	r4, [pc, #404]	; (acbc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a8>)
    ab26:	6860      	ldr	r0, [r4, #4]
    ab28:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    ab2c:	bf1c      	itt	ne
    ab2e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    ab32:	6060      	strne	r0, [r4, #4]
    ab34:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    ab38:	f8df b184 	ldr.w	fp, [pc, #388]	; acc0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1ac>
    ab3c:	2500      	movs	r5, #0
    ab3e:	bb10      	cbnz	r0, ab86 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    ab40:	f44f 710c 	mov.w	r1, #560	; 0x230
    ab44:	6920      	ldr	r0, [r4, #16]
    ab46:	f001 fa47 	bl	bfd8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    ab4a:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    ab4e:	68a1      	ldr	r1, [r4, #8]
    ab50:	1818      	adds	r0, r3, r0
    ab52:	eb45 0305 	adc.w	r3, r5, r5
    ab56:	1809      	adds	r1, r1, r0
    ab58:	eb42 0003 	adc.w	r0, r2, r3
    ab5c:	1a71      	subs	r1, r6, r1
    ab5e:	eb77 0000 	sbcs.w	r0, r7, r0
    ab62:	d310      	bcc.n	ab86 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    ab64:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    ab68:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    ab6c:	eb0b 1040 	add.w	r0, fp, r0, lsl #5
    ab70:	6840      	ldr	r0, [r0, #4]
    ab72:	eb0b 1141 	add.w	r1, fp, r1, lsl #5
    ab76:	680a      	ldr	r2, [r1, #0]
    ab78:	2108      	movs	r1, #8
    ab7a:	4790      	blx	r2
    ab7c:	f44f 716d 	mov.w	r1, #948	; 0x3b4
    ab80:	2070      	movs	r0, #112	; 0x70
    ab82:	f001 fac7 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ab86:	7e60      	ldrb	r0, [r4, #25]
    ab88:	b180      	cbz	r0, abac <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    ab8a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    ab8e:	f88d 0000 	strb.w	r0, [sp]
    ab92:	f89d 0000 	ldrb.w	r0, [sp]
    ab96:	b148      	cbz	r0, abac <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    ab98:	f000 fc7e 	bl	b498 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    ab9c:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    aba0:	b150      	cbz	r0, abb8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    aba2:	f240 31cd 	movw	r1, #973	; 0x3cd
    aba6:	2070      	movs	r0, #112	; 0x70
    aba8:	f001 fab4 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    abac:	1cf0      	adds	r0, r6, #3
    abae:	f147 0100 	adc.w	r1, r7, #0
    abb2:	f000 fb4b 	bl	b24c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    abb6:	e7f1      	b.n	ab9c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x88>
    abb8:	2001      	movs	r0, #1
    abba:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    abbe:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    abc2:	2820      	cmp	r0, #32
    abc4:	d020      	beq.n	ac08 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf4>
    abc6:	f894 9042 	ldrb.w	r9, [r4, #66]	; 0x42
    abca:	2020      	movs	r0, #32
    abcc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    abd0:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    abd4:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
    abd8:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
    abdc:	6025      	str	r5, [r4, #0]
    abde:	f000 ff09 	bl	b9f4 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    abe2:	f884 0020 	strb.w	r0, [r4, #32]
    abe6:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
    abea:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    abee:	eb00 0a04 	add.w	sl, r0, r4
    abf2:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
    abf6:	2820      	cmp	r0, #32
    abf8:	d01c      	beq.n	ac34 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    abfa:	eb0b 1b40 	add.w	fp, fp, r0, lsl #5
    abfe:	f89b 001a 	ldrb.w	r0, [fp, #26]
    ac02:	2801      	cmp	r0, #1
    ac04:	d005      	beq.n	ac12 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfe>
    ac06:	e015      	b.n	ac34 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    ac08:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    ac0c:	2070      	movs	r0, #112	; 0x70
    ac0e:	f001 fa81 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ac12:	2201      	movs	r2, #1
    ac14:	f8bb 3016 	ldrh.w	r3, [fp, #22]
    ac18:	4630      	mov	r0, r6
    ac1a:	4639      	mov	r1, r7
    ac1c:	f7fe f8a6 	bl	8d6c <MPSL_IRQ_RADIO_Handler+0x3e4>
    ac20:	e9db 2302 	ldrd	r2, r3, [fp, #8]
    ac24:	1a12      	subs	r2, r2, r0
    ac26:	eb73 0201 	sbcs.w	r2, r3, r1
    ac2a:	bf24      	itt	cs
    ac2c:	f10b 0208 	addcs.w	r2, fp, #8
    ac30:	e9c2 0100 	strdcs	r0, r1, [r2]
    ac34:	4641      	mov	r1, r8
    ac36:	2001      	movs	r0, #1
    ac38:	f7fe fd5e 	bl	96f8 <MPSL_IRQ_RADIO_Handler+0xd70>
    ac3c:	0007      	movs	r7, r0
    ac3e:	d0f9      	beq.n	ac34 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    ac40:	4820      	ldr	r0, [pc, #128]	; (acc4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    ac42:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    ac46:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    ac4a:	2802      	cmp	r0, #2
    ac4c:	d104      	bne.n	ac58 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x144>
    ac4e:	4642      	mov	r2, r8
    ac50:	4649      	mov	r1, r9
    ac52:	2006      	movs	r0, #6
    ac54:	f7fe fd1e 	bl	9694 <MPSL_IRQ_RADIO_Handler+0xd0c>
    ac58:	20ff      	movs	r0, #255	; 0xff
    ac5a:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    ac5e:	f89a 0029 	ldrb.w	r0, [sl, #41]	; 0x29
    ac62:	f8df 8064 	ldr.w	r8, [pc, #100]	; acc8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    ac66:	2820      	cmp	r0, #32
    ac68:	bf1c      	itt	ne
    ac6a:	f898 0001 	ldrbne.w	r0, [r8, #1]
    ac6e:	f001 fb23 	blne	c2b8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    ac72:	f894 0020 	ldrb.w	r0, [r4, #32]
    ac76:	b128      	cbz	r0, ac84 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x170>
    ac78:	f000 fe98 	bl	b9ac <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    ac7c:	f884 5020 	strb.w	r5, [r4, #32]
    ac80:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    ac84:	2f02      	cmp	r7, #2
    ac86:	d00f      	beq.n	aca8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>
    ac88:	2f01      	cmp	r7, #1
    ac8a:	bf18      	it	ne
    ac8c:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ac90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ac94:	f8d8 1004 	ldr.w	r1, [r8, #4]
    ac98:	2900      	cmp	r1, #0
    ac9a:	bf08      	it	eq
    ac9c:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aca0:	b001      	add	sp, #4
    aca2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aca6:	4708      	bx	r1
    aca8:	68a0      	ldr	r0, [r4, #8]
    acaa:	1b80      	subs	r0, r0, r6
    acac:	f005 fc77 	bl	1059e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    acb0:	f8d8 1004 	ldr.w	r1, [r8, #4]
    acb4:	2900      	cmp	r1, #0
    acb6:	d1f3      	bne.n	aca0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18c>
    acb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    acbc:	20000fd8 	.word	0x20000fd8
    acc0:	20000b58 	.word	0x20000b58
    acc4:	20000f58 	.word	0x20000f58
    acc8:	20000308 	.word	0x20000308

0000accc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    accc:	b570      	push	{r4, r5, r6, lr}
    acce:	4c42      	ldr	r4, [pc, #264]	; (add8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    acd0:	4605      	mov	r5, r0
    acd2:	b082      	sub	sp, #8
    acd4:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    acd8:	2820      	cmp	r0, #32
    acda:	d008      	beq.n	acee <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    acdc:	6860      	ldr	r0, [r4, #4]
    acde:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    ace2:	d009      	beq.n	acf8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    ace4:	f640 21b6 	movw	r1, #2742	; 0xab6
    ace8:	2070      	movs	r0, #112	; 0x70
    acea:	f001 fa13 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    acee:	f640 21b5 	movw	r1, #2741	; 0xab5
    acf2:	2070      	movs	r0, #112	; 0x70
    acf4:	f001 fa0e 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    acf8:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    acfc:	4937      	ldr	r1, [pc, #220]	; (addc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    acfe:	eb01 1640 	add.w	r6, r1, r0, lsl #5
    ad02:	68b0      	ldr	r0, [r6, #8]
    ad04:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ad08:	f005 fc49 	bl	1059e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    ad0c:	4602      	mov	r2, r0
    ad0e:	8af0      	ldrh	r0, [r6, #22]
    ad10:	7d31      	ldrb	r1, [r6, #20]
    ad12:	4b33      	ldr	r3, [pc, #204]	; (ade0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    ad14:	4408      	add	r0, r1
    ad16:	1c40      	adds	r0, r0, #1
    ad18:	1811      	adds	r1, r2, r0
    ad1a:	429a      	cmp	r2, r3
    ad1c:	d817      	bhi.n	ad4e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    ad1e:	4a31      	ldr	r2, [pc, #196]	; (ade4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    ad20:	4290      	cmp	r0, r2
    ad22:	dc1b      	bgt.n	ad5c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    ad24:	f1c2 0c00 	rsb	ip, r2, #0
    ad28:	4560      	cmp	r0, ip
    ad2a:	db1e      	blt.n	ad6a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    ad2c:	0056      	lsls	r6, r2, #1
    ad2e:	428e      	cmp	r6, r1
    ad30:	bfdc      	itt	le
    ad32:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    ad36:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    ad3a:	dd05      	ble.n	ad48 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    ad3c:	2900      	cmp	r1, #0
    ad3e:	bfbc      	itt	lt
    ad40:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    ad44:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    ad48:	1948      	adds	r0, r1, r5
    ad4a:	4299      	cmp	r1, r3
    ad4c:	d904      	bls.n	ad58 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    ad4e:	f240 517f 	movw	r1, #1407	; 0x57f
    ad52:	2070      	movs	r0, #112	; 0x70
    ad54:	f001 f9de 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ad58:	4295      	cmp	r5, r2
    ad5a:	dd04      	ble.n	ad66 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    ad5c:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    ad60:	2070      	movs	r0, #112	; 0x70
    ad62:	f001 f9d7 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ad66:	4565      	cmp	r5, ip
    ad68:	da04      	bge.n	ad74 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    ad6a:	f240 5181 	movw	r1, #1409	; 0x581
    ad6e:	2070      	movs	r0, #112	; 0x70
    ad70:	f001 f9d0 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ad74:	4286      	cmp	r6, r0
    ad76:	bfdc      	itt	le
    ad78:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    ad7c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    ad80:	dd05      	ble.n	ad8e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    ad82:	2800      	cmp	r0, #0
    ad84:	bfbc      	itt	lt
    ad86:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    ad8a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    ad8e:	aa01      	add	r2, sp, #4
    ad90:	4669      	mov	r1, sp
    ad92:	f000 f92b 	bl	afec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    ad96:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ad9a:	280f      	cmp	r0, #15
    ad9c:	bf8c      	ite	hi
    ad9e:	2001      	movhi	r0, #1
    ada0:	2000      	movls	r0, #0
    ada2:	9900      	ldr	r1, [sp, #0]
    ada4:	4408      	add	r0, r1
    ada6:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    adaa:	6061      	str	r1, [r4, #4]
    adac:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    adb0:	f88d 0000 	strb.w	r0, [sp]
    adb4:	f89d 0000 	ldrb.w	r0, [sp]
    adb8:	2800      	cmp	r0, #0
    adba:	bf04      	itt	eq
    adbc:	b002      	addeq	sp, #8
    adbe:	bd70      	popeq	{r4, r5, r6, pc}
    adc0:	2005      	movs	r0, #5
    adc2:	f000 fc15 	bl	b5f0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    adc6:	2800      	cmp	r0, #0
    adc8:	bf1c      	itt	ne
    adca:	b002      	addne	sp, #8
    adcc:	bd70      	popne	{r4, r5, r6, pc}
    adce:	f640 21bd 	movw	r1, #2749	; 0xabd
    add2:	2070      	movs	r0, #112	; 0x70
    add4:	f001 f99e 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    add8:	20000fd8 	.word	0x20000fd8
    addc:	20000b58 	.word	0x20000b58
    ade0:	1e847fff 	.word	0x1e847fff
    ade4:	0f424000 	.word	0x0f424000

0000ade8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    ade8:	b570      	push	{r4, r5, r6, lr}
    adea:	4c1e      	ldr	r4, [pc, #120]	; (ae64 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    adec:	2120      	movs	r1, #32
    adee:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    adf2:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    adf6:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
    adfa:	2000      	movs	r0, #0
    adfc:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    ae00:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    ae04:	1e42      	subs	r2, r0, #1
    ae06:	e9c4 0200 	strd	r0, r2, [r4]
    ae0a:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
    ae0e:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    ae12:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    ae16:	f884 0020 	strb.w	r0, [r4, #32]
    ae1a:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    ae1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    ae22:	1e41      	subs	r1, r0, #1
    ae24:	e9c4 110e 	strd	r1, r1, [r4, #56]	; 0x38
    ae28:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    ae2c:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    ae30:	2210      	movs	r2, #16
    ae32:	7088      	strb	r0, [r1, #2]
    ae34:	f801 0f04 	strb.w	r0, [r1, #4]!
    ae38:	1e52      	subs	r2, r2, #1
    ae3a:	d1fa      	bne.n	ae32 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4a>
    ae3c:	f000 fde4 	bl	ba08 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    ae40:	4d09      	ldr	r5, [pc, #36]	; (ae68 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    ae42:	2601      	movs	r6, #1
    ae44:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    ae48:	20ff      	movs	r0, #255	; 0xff
    ae4a:	7028      	strb	r0, [r5, #0]
    ae4c:	4807      	ldr	r0, [pc, #28]	; (ae6c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    ae4e:	f001 fa15 	bl	c27c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    ae52:	7068      	strb	r0, [r5, #1]
    ae54:	f001 fa80 	bl	c358 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    ae58:	60a8      	str	r0, [r5, #8]
    ae5a:	f000 fd67 	bl	b92c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    ae5e:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
    ae62:	bd70      	pop	{r4, r5, r6, pc}
    ae64:	20000fd8 	.word	0x20000fd8
    ae68:	20000308 	.word	0x20000308
    ae6c:	000095c5 	.word	0x000095c5

0000ae70 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    ae70:	b5f0      	push	{r4, r5, r6, r7, lr}
    ae72:	4607      	mov	r7, r0
    ae74:	b087      	sub	sp, #28
    ae76:	461d      	mov	r5, r3
    ae78:	460e      	mov	r6, r1
    ae7a:	4610      	mov	r0, r2
    ae7c:	f005 fb8f 	bl	1059e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    ae80:	4604      	mov	r4, r0
    ae82:	a803      	add	r0, sp, #12
    ae84:	9000      	str	r0, [sp, #0]
    ae86:	ab04      	add	r3, sp, #16
    ae88:	aa02      	add	r2, sp, #8
    ae8a:	4638      	mov	r0, r7
    ae8c:	4631      	mov	r1, r6
    ae8e:	f000 f853 	bl	af38 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    ae92:	9902      	ldr	r1, [sp, #8]
    ae94:	4a14      	ldr	r2, [pc, #80]	; (aee8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x78>)
    ae96:	1a60      	subs	r0, r4, r1
    ae98:	2300      	movs	r3, #0
    ae9a:	1a82      	subs	r2, r0, r2
    ae9c:	f173 0200 	sbcs.w	r2, r3, #0
    aea0:	d318      	bcc.n	aed4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
    aea2:	f8df c044 	ldr.w	ip, [pc, #68]	; aee8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x78>
    aea6:	1b0a      	subs	r2, r1, r4
    aea8:	ebb2 0c0c 	subs.w	ip, r2, ip
    aeac:	f173 0300 	sbcs.w	r3, r3, #0
    aeb0:	d310      	bcc.n	aed4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
    aeb2:	4b0e      	ldr	r3, [pc, #56]	; (aeec <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x7c>)
    aeb4:	4283      	cmp	r3, r0
    aeb6:	bf3e      	ittt	cc
    aeb8:	f5c1 2090 	rsbcc	r0, r1, #294912	; 0x48000
    aebc:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    aec0:	4420      	addcc	r0, r4
    aec2:	d307      	bcc.n	aed4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
    aec4:	4293      	cmp	r3, r2
    aec6:	d209      	bcs.n	aedc <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x6c>
    aec8:	f5c4 2090 	rsb	r0, r4, #294912	; 0x48000
    aecc:	f100 50f4 	add.w	r0, r0, #511705088	; 0x1e800000
    aed0:	4408      	add	r0, r1
    aed2:	4240      	negs	r0, r0
    aed4:	300f      	adds	r0, #15
    aed6:	b007      	add	sp, #28
    aed8:	1a28      	subs	r0, r5, r0
    aeda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aedc:	f640 21d7 	movw	r1, #2775	; 0xad7
    aee0:	2070      	movs	r0, #112	; 0x70
    aee2:	f001 f917 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    aee6:	0000      	.short	0x0000
    aee8:	0f424000 	.word	0x0f424000
    aeec:	1e847fff 	.word	0x1e847fff

0000aef0 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>:
    aef0:	0e03      	lsrs	r3, r0, #24
    aef2:	b430      	push	{r4, r5}
    aef4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    aef8:	f8df c038 	ldr.w	ip, [pc, #56]	; af34 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY+0x44>
    aefc:	0e09      	lsrs	r1, r1, #24
    aefe:	fba3 250c 	umull	r2, r5, r3, ip
    af02:	fb01 510c 	mla	r1, r1, ip, r5
    af06:	2400      	movs	r4, #0
    af08:	fb03 1104 	mla	r1, r3, r4, r1
    af0c:	f647 73ff 	movw	r3, #32767	; 0x7fff
    af10:	ea03 2350 	and.w	r3, r3, r0, lsr #9
    af14:	f643 5c09 	movw	ip, #15625	; 0x3d09
    af18:	fb13 f30c 	smulbb	r3, r3, ip
    af1c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    af20:	fb10 f00c 	smulbb	r0, r0, ip
    af24:	f500 7080 	add.w	r0, r0, #256	; 0x100
    af28:	eb03 2050 	add.w	r0, r3, r0, lsr #9
    af2c:	1880      	adds	r0, r0, r2
    af2e:	4161      	adcs	r1, r4
    af30:	bc30      	pop	{r4, r5}
    af32:	4770      	bx	lr
    af34:	1e848000 	.word	0x1e848000

0000af38 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>:
    af38:	b570      	push	{r4, r5, r6, lr}
    af3a:	b084      	sub	sp, #16
    af3c:	4615      	mov	r5, r2
    af3e:	aa01      	add	r2, sp, #4
    af40:	461c      	mov	r4, r3
    af42:	9200      	str	r2, [sp, #0]
    af44:	9e08      	ldr	r6, [sp, #32]
    af46:	ab02      	add	r3, sp, #8
    af48:	4a17      	ldr	r2, [pc, #92]	; (afa8 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x70>)
    af4a:	f005 fca9 	bl	108a0 <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>
    af4e:	9801      	ldr	r0, [sp, #4]
    af50:	f248 6237 	movw	r2, #34359	; 0x8637
    af54:	0b41      	lsrs	r1, r0, #13
    af56:	4351      	muls	r1, r2
    af58:	0c09      	lsrs	r1, r1, #16
    af5a:	4a14      	ldr	r2, [pc, #80]	; (afac <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x74>)
    af5c:	024b      	lsls	r3, r1, #9
    af5e:	fb01 0102 	mla	r1, r1, r2, r0
    af62:	4813      	ldr	r0, [pc, #76]	; (afb0 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x78>)
    af64:	4348      	muls	r0, r1
    af66:	0d42      	lsrs	r2, r0, #21
    af68:	1898      	adds	r0, r3, r2
    af6a:	f643 5309 	movw	r3, #15625	; 0x3d09
    af6e:	fb12 f303 	smulbb	r3, r2, r3
    af72:	f503 7280 	add.w	r2, r3, #256	; 0x100
    af76:	f643 5c08 	movw	ip, #15624	; 0x3d08
    af7a:	eba1 2252 	sub.w	r2, r1, r2, lsr #9
    af7e:	4463      	add	r3, ip
    af80:	b2d2      	uxtb	r2, r2
    af82:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
    af86:	bf84      	itt	hi
    af88:	2200      	movhi	r2, #0
    af8a:	1c40      	addhi	r0, r0, #1
    af8c:	7032      	strb	r2, [r6, #0]
    af8e:	9b02      	ldr	r3, [sp, #8]
    af90:	0a19      	lsrs	r1, r3, #8
    af92:	061b      	lsls	r3, r3, #24
    af94:	1818      	adds	r0, r3, r0
    af96:	f141 0100 	adc.w	r1, r1, #0
    af9a:	e9c4 0100 	strd	r0, r1, [r4]
    af9e:	9801      	ldr	r0, [sp, #4]
    afa0:	6028      	str	r0, [r5, #0]
    afa2:	b004      	add	sp, #16
    afa4:	bd70      	pop	{r4, r5, r6, pc}
    afa6:	0000      	.short	0x0000
    afa8:	1e848000 	.word	0x1e848000
    afac:	ffffc2f7 	.word	0xffffc2f7
    afb0:	00010c6f 	.word	0x00010c6f

0000afb4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    afb4:	0b41      	lsrs	r1, r0, #13
    afb6:	f248 6237 	movw	r2, #34359	; 0x8637
    afba:	4351      	muls	r1, r2
    afbc:	0c0a      	lsrs	r2, r1, #16
    afbe:	4b09      	ldr	r3, [pc, #36]	; (afe4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    afc0:	0251      	lsls	r1, r2, #9
    afc2:	fb02 0203 	mla	r2, r2, r3, r0
    afc6:	4808      	ldr	r0, [pc, #32]	; (afe8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    afc8:	4350      	muls	r0, r2
    afca:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    afce:	306e      	adds	r0, #110	; 0x6e
    afd0:	0d40      	lsrs	r0, r0, #21
    afd2:	425b      	negs	r3, r3
    afd4:	fb10 f303 	smulbb	r3, r0, r3
    afd8:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    afdc:	bf88      	it	hi
    afde:	1c49      	addhi	r1, r1, #1
    afe0:	4408      	add	r0, r1
    afe2:	4770      	bx	lr
    afe4:	ffffc2f7 	.word	0xffffc2f7
    afe8:	00010c6f 	.word	0x00010c6f

0000afec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    afec:	0b43      	lsrs	r3, r0, #13
    afee:	f248 6c37 	movw	ip, #34359	; 0x8637
    aff2:	fb03 f30c 	mul.w	r3, r3, ip
    aff6:	b430      	push	{r4, r5}
    aff8:	0c1b      	lsrs	r3, r3, #16
    affa:	f8df c044 	ldr.w	ip, [pc, #68]	; b040 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    affe:	025c      	lsls	r4, r3, #9
    b000:	fb03 030c 	mla	r3, r3, ip, r0
    b004:	480f      	ldr	r0, [pc, #60]	; (b044 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    b006:	4358      	muls	r0, r3
    b008:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    b00c:	eb04 000c 	add.w	r0, r4, ip
    b010:	f643 5409 	movw	r4, #15625	; 0x3d09
    b014:	fb1c f404 	smulbb	r4, ip, r4
    b018:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    b01c:	f643 5508 	movw	r5, #15624	; 0x3d08
    b020:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    b024:	442c      	add	r4, r5
    b026:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    b02a:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    b02e:	bf84      	itt	hi
    b030:	f04f 0c00 	movhi.w	ip, #0
    b034:	1c40      	addhi	r0, r0, #1
    b036:	6008      	str	r0, [r1, #0]
    b038:	f882 c000 	strb.w	ip, [r2]
    b03c:	bc30      	pop	{r4, r5}
    b03e:	4770      	bx	lr
    b040:	ffffc2f7 	.word	0xffffc2f7
    b044:	00010c6f 	.word	0x00010c6f

0000b048 <MPSL_IRQ_RTC0_Handler>:
    b048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b04c:	2400      	movs	r4, #0
    b04e:	f8df 9080 	ldr.w	r9, [pc, #128]	; b0d0 <MPSL_IRQ_RTC0_Handler+0x88>
    b052:	4d20      	ldr	r5, [pc, #128]	; (b0d4 <MPSL_IRQ_RTC0_Handler+0x8c>)
    b054:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    b058:	f44f 78a0 	mov.w	r8, #320	; 0x140
    b05c:	ea4f 0604 	mov.w	r6, r4
    b060:	f8d5 2304 	ldr.w	r2, [r5, #772]	; 0x304
    b064:	fa07 f004 	lsl.w	r0, r7, r4
    b068:	eb08 0184 	add.w	r1, r8, r4, lsl #2
    b06c:	4202      	tst	r2, r0
    b06e:	d01a      	beq.n	b0a6 <MPSL_IRQ_RTC0_Handler+0x5e>
    b070:	4a18      	ldr	r2, [pc, #96]	; (b0d4 <MPSL_IRQ_RTC0_Handler+0x8c>)
    b072:	5852      	ldr	r2, [r2, r1]
    b074:	b1ba      	cbz	r2, b0a6 <MPSL_IRQ_RTC0_Handler+0x5e>
    b076:	506e      	str	r6, [r5, r1]
    b078:	00a1      	lsls	r1, r4, #2
    b07a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    b07e:	f501 4130 	add.w	r1, r1, #45056	; 0xb000
    b082:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    b086:	f8d9 2000 	ldr.w	r2, [r9]
    b08a:	1a89      	subs	r1, r1, r2
    b08c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    b090:	2902      	cmp	r1, #2
    b092:	d302      	bcc.n	b09a <MPSL_IRQ_RTC0_Handler+0x52>
    b094:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    b098:	d905      	bls.n	b0a6 <MPSL_IRQ_RTC0_Handler+0x5e>
    b09a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b09e:	1d20      	adds	r0, r4, #4
    b0a0:	b2c0      	uxtb	r0, r0
    b0a2:	f7fe fd3f 	bl	9b24 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b0a6:	1c60      	adds	r0, r4, #1
    b0a8:	b2c4      	uxtb	r4, r0
    b0aa:	2c03      	cmp	r4, #3
    b0ac:	d3d8      	bcc.n	b060 <MPSL_IRQ_RTC0_Handler+0x18>
    b0ae:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b0b2:	b128      	cbz	r0, b0c0 <MPSL_IRQ_RTC0_Handler+0x78>
    b0b4:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    b0b8:	4807      	ldr	r0, [pc, #28]	; (b0d8 <MPSL_IRQ_RTC0_Handler+0x90>)
    b0ba:	6881      	ldr	r1, [r0, #8]
    b0bc:	1c49      	adds	r1, r1, #1
    b0be:	6081      	str	r1, [r0, #8]
    b0c0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    b0c4:	f44f 6000 	mov.w	r0, #2048	; 0x800
    b0c8:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    b0cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b0d0:	4000b504 	.word	0x4000b504
    b0d4:	4000b000 	.word	0x4000b000
    b0d8:	20000028 	.word	0x20000028

0000b0dc <MPSL_IRQ_TIMER0_Handler>:
    b0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b0e0:	4d38      	ldr	r5, [pc, #224]	; (b1c4 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    b0e2:	7828      	ldrb	r0, [r5, #0]
    b0e4:	2804      	cmp	r0, #4
    b0e6:	d068      	beq.n	b1ba <MPSL_IRQ_TIMER0_Handler+0xde>
    b0e8:	1ca8      	adds	r0, r5, #2
    b0ea:	2201      	movs	r2, #1
    b0ec:	7801      	ldrb	r1, [r0, #0]
    b0ee:	b159      	cbz	r1, b108 <MPSL_IRQ_TIMER0_Handler+0x2c>
    b0f0:	2901      	cmp	r1, #1
    b0f2:	bf08      	it	eq
    b0f4:	706a      	strbeq	r2, [r5, #1]
    b0f6:	d002      	beq.n	b0fe <MPSL_IRQ_TIMER0_Handler+0x22>
    b0f8:	7869      	ldrb	r1, [r5, #1]
    b0fa:	2900      	cmp	r1, #0
    b0fc:	d058      	beq.n	b1b0 <MPSL_IRQ_TIMER0_Handler+0xd4>
    b0fe:	2102      	movs	r1, #2
    b100:	7001      	strb	r1, [r0, #0]
    b102:	7840      	ldrb	r0, [r0, #1]
    b104:	f000 fb2e 	bl	b764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b108:	4c2f      	ldr	r4, [pc, #188]	; (b1c8 <MPSL_IRQ_TIMER0_Handler+0xec>)
    b10a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b10e:	f04f 0800 	mov.w	r8, #0
    b112:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    b116:	f44f 7780 	mov.w	r7, #256	; 0x100
    b11a:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    b11e:	d00a      	beq.n	b136 <MPSL_IRQ_TIMER0_Handler+0x5a>
    b120:	482a      	ldr	r0, [pc, #168]	; (b1cc <MPSL_IRQ_TIMER0_Handler+0xf0>)
    b122:	6800      	ldr	r0, [r0, #0]
    b124:	b138      	cbz	r0, b136 <MPSL_IRQ_TIMER0_Handler+0x5a>
    b126:	2003      	movs	r0, #3
    b128:	f000 fb1c 	bl	b764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b12c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b130:	2003      	movs	r0, #3
    b132:	f7fe fcf7 	bl	9b24 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b136:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b13a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b13e:	d00a      	beq.n	b156 <MPSL_IRQ_TIMER0_Handler+0x7a>
    b140:	4823      	ldr	r0, [pc, #140]	; (b1d0 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    b142:	6800      	ldr	r0, [r0, #0]
    b144:	b138      	cbz	r0, b156 <MPSL_IRQ_TIMER0_Handler+0x7a>
    b146:	2002      	movs	r0, #2
    b148:	f000 fb0c 	bl	b764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b14c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b150:	2002      	movs	r0, #2
    b152:	f7fe fce7 	bl	9b24 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b156:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b15a:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b15e:	d00a      	beq.n	b176 <MPSL_IRQ_TIMER0_Handler+0x9a>
    b160:	481c      	ldr	r0, [pc, #112]	; (b1d4 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    b162:	6800      	ldr	r0, [r0, #0]
    b164:	b138      	cbz	r0, b176 <MPSL_IRQ_TIMER0_Handler+0x9a>
    b166:	2001      	movs	r0, #1
    b168:	f000 fafc 	bl	b764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b16c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b170:	2001      	movs	r0, #1
    b172:	f7fe fcd7 	bl	9b24 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b176:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b17a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b17e:	bf08      	it	eq
    b180:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b184:	4814      	ldr	r0, [pc, #80]	; (b1d8 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    b186:	6800      	ldr	r0, [r0, #0]
    b188:	2800      	cmp	r0, #0
    b18a:	bf08      	it	eq
    b18c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b190:	2000      	movs	r0, #0
    b192:	f000 fae7 	bl	b764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b196:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b19a:	2004      	movs	r0, #4
    b19c:	7028      	strb	r0, [r5, #0]
    b19e:	f8c5 8004 	str.w	r8, [r5, #4]
    b1a2:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    b1a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b1aa:	2000      	movs	r0, #0
    b1ac:	f7fe bcba 	b.w	9b24 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b1b0:	f240 5169 	movw	r1, #1385	; 0x569
    b1b4:	206c      	movs	r0, #108	; 0x6c
    b1b6:	f000 ffad 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b1ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b1be:	2007      	movs	r0, #7
    b1c0:	f7fe bcb0 	b.w	9b24 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b1c4:	20000028 	.word	0x20000028
    b1c8:	40008000 	.word	0x40008000
    b1cc:	4000814c 	.word	0x4000814c
    b1d0:	40008148 	.word	0x40008148
    b1d4:	40008144 	.word	0x40008144
    b1d8:	40008140 	.word	0x40008140
    b1dc:	2201      	movs	r2, #1
    b1de:	0211      	lsls	r1, r2, #8
    b1e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b1e4:	2000      	movs	r0, #0
    b1e6:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    b1ea:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    b1ee:	f3bf 8f4f 	dsb	sy
    b1f2:	f3bf 8f6f 	isb	sy
    b1f6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    b1fa:	490e      	ldr	r1, [pc, #56]	; (b234 <MPSL_IRQ_TIMER0_Handler+0x158>)
    b1fc:	f841 2f04 	str.w	r2, [r1, #4]!
    b200:	1e43      	subs	r3, r0, #1
    b202:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    b206:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    b20a:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    b20e:	4b0a      	ldr	r3, [pc, #40]	; (b238 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    b210:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b214:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    b218:	1d1b      	adds	r3, r3, #4
    b21a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b21e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b222:	1d1b      	adds	r3, r3, #4
    b224:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b228:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    b22c:	60ca      	str	r2, [r1, #12]
    b22e:	4903      	ldr	r1, [pc, #12]	; (b23c <MPSL_IRQ_TIMER0_Handler+0x160>)
    b230:	7048      	strb	r0, [r1, #1]
    b232:	4770      	bx	lr
    b234:	40008000 	.word	0x40008000
    b238:	40008004 	.word	0x40008004
    b23c:	20000028 	.word	0x20000028

0000b240 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    b240:	4801      	ldr	r0, [pc, #4]	; (b248 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    b242:	6800      	ldr	r0, [r0, #0]
    b244:	4770      	bx	lr
    b246:	0000      	.short	0x0000
    b248:	4000b504 	.word	0x4000b504

0000b24c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    b24c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    b250:	f8df 8130 	ldr.w	r8, [pc, #304]	; b384 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>
    b254:	4604      	mov	r4, r0
    b256:	f1a8 0702 	sub.w	r7, r8, #2
    b25a:	460e      	mov	r6, r1
    b25c:	f898 c000 	ldrb.w	ip, [r8]
    b260:	e9d7 1004 	ldrd	r1, r0, [r7, #16]
    b264:	f1bc 0f01 	cmp.w	ip, #1
    b268:	d106      	bne.n	b278 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x2c>
    b26a:	ea81 0204 	eor.w	r2, r1, r4
    b26e:	4070      	eors	r0, r6
    b270:	4310      	orrs	r0, r2
    b272:	bf08      	it	eq
    b274:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    b278:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    b27c:	4a42      	ldr	r2, [pc, #264]	; (b388 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    b27e:	6010      	str	r0, [r2, #0]
    b280:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
    b284:	f1bc 0f00 	cmp.w	ip, #0
    b288:	bf07      	ittee	eq
    b28a:	f44f 3340 	moveq.w	r3, #196608	; 0x30000
    b28e:	2200      	moveq	r2, #0
    b290:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    b294:	2201      	movne	r2, #1
    b296:	483d      	ldr	r0, [pc, #244]	; (b38c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    b298:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    b29c:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    b2a0:	2500      	movs	r5, #0
    b2a2:	f44f 79a0 	mov.w	r9, #320	; 0x140
    b2a6:	2a02      	cmp	r2, #2
    b2a8:	d207      	bcs.n	b2ba <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x6e>
    b2aa:	bf00      	nop
    b2ac:	eb09 0382 	add.w	r3, r9, r2, lsl #2
    b2b0:	50c5      	str	r5, [r0, r3]
    b2b2:	1c52      	adds	r2, r2, #1
    b2b4:	b2d2      	uxtb	r2, r2
    b2b6:	2a02      	cmp	r2, #2
    b2b8:	d3f8      	bcc.n	b2ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x60>
    b2ba:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    b2be:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    b2c2:	f8c0 a308 	str.w	sl, [r0, #776]	; 0x308
    b2c6:	f8c0 a348 	str.w	sl, [r0, #840]	; 0x348
    b2ca:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
    b2ce:	4a30      	ldr	r2, [pc, #192]	; (b390 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    b2d0:	f8d2 9000 	ldr.w	r9, [r2]
    b2d4:	eba3 0909 	sub.w	r9, r3, r9
    b2d8:	f029 4a7f 	bic.w	sl, r9, #4278190080	; 0xff000000
    b2dc:	f04f 0901 	mov.w	r9, #1
    b2e0:	f1ba 0f02 	cmp.w	sl, #2
    b2e4:	d32e      	bcc.n	b344 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    b2e6:	f5ba 0f00 	cmp.w	sl, #8388608	; 0x800000
    b2ea:	d82b      	bhi.n	b344 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    b2ec:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
    b2f0:	f8c0 b344 	str.w	fp, [r0, #836]	; 0x344
    b2f4:	f1bc 0f00 	cmp.w	ip, #0
    b2f8:	d005      	beq.n	b306 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xba>
    b2fa:	6810      	ldr	r0, [r2, #0]
    b2fc:	1a08      	subs	r0, r1, r0
    b2fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b302:	2802      	cmp	r0, #2
    b304:	d3f9      	bcc.n	b2fa <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xae>
    b306:	f8c7 9004 	str.w	r9, [r7, #4]
    b30a:	703d      	strb	r5, [r7, #0]
    b30c:	f7ff ff66 	bl	b1dc <MPSL_IRQ_TIMER0_Handler+0x100>
    b310:	4820      	ldr	r0, [pc, #128]	; (b394 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    b312:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    b316:	f365 0101 	bfi	r1, r5, #0, #2
    b31a:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    b31e:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    b322:	2102      	movs	r1, #2
    b324:	f361 0201 	bfi	r2, r1, #0, #2
    b328:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    b32c:	2110      	movs	r1, #16
    b32e:	fa91 f1a1 	rbit	r1, r1
    b332:	fab1 f181 	clz	r1, r1
    b336:	2909      	cmp	r1, #9
    b338:	d909      	bls.n	b34e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x102>
    b33a:	f240 3155 	movw	r1, #853	; 0x355
    b33e:	a016      	add	r0, pc, #88	; (adr r0, b398 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    b340:	f000 febc 	bl	c0bc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    b344:	f240 31b2 	movw	r1, #946	; 0x3b2
    b348:	206c      	movs	r0, #108	; 0x6c
    b34a:	f000 fee3 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b34e:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    b352:	f8c0 900c 	str.w	r9, [r0, #12]
    b356:	6879      	ldr	r1, [r7, #4]
    b358:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b35c:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b360:	f44f 7180 	mov.w	r1, #256	; 0x100
    b364:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    b368:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b36c:	490d      	ldr	r1, [pc, #52]	; (b3a4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    b36e:	0480      	lsls	r0, r0, #18
    b370:	6008      	str	r0, [r1, #0]
    b372:	e9c7 4604 	strd	r4, r6, [r7, #16]
    b376:	2004      	movs	r0, #4
    b378:	f888 0001 	strb.w	r0, [r8, #1]
    b37c:	f888 9000 	strb.w	r9, [r8]
    b380:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    b384:	2000002a 	.word	0x2000002a
    b388:	4001f508 	.word	0x4001f508
    b38c:	4000b000 	.word	0x4000b000
    b390:	4000b504 	.word	0x4000b504
    b394:	40008000 	.word	0x40008000
    b398:	5f66726e 	.word	0x5f66726e
    b39c:	656d6974 	.word	0x656d6974
    b3a0:	00682e72 	.word	0x00682e72
    b3a4:	4001f504 	.word	0x4001f504

0000b3a8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    b3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b3ac:	4c31      	ldr	r4, [pc, #196]	; (b474 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xcc>)
    b3ae:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    b3b2:	ea82 0c00 	eor.w	ip, r2, r0
    b3b6:	404b      	eors	r3, r1
    b3b8:	ea5c 0303 	orrs.w	r3, ip, r3
    b3bc:	bf14      	ite	ne
    b3be:	2301      	movne	r3, #1
    b3c0:	2300      	moveq	r3, #0
    b3c2:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b478 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd0>
    b3c6:	f89c 8000 	ldrb.w	r8, [ip]
    b3ca:	f1b8 0f02 	cmp.w	r8, #2
    b3ce:	d002      	beq.n	b3d6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2e>
    b3d0:	2b00      	cmp	r3, #0
    b3d2:	d03f      	beq.n	b454 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>
    b3d4:	e003      	b.n	b3de <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x36>
    b3d6:	2b00      	cmp	r3, #0
    b3d8:	bf08      	it	eq
    b3da:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b3de:	7863      	ldrb	r3, [r4, #1]
    b3e0:	b3bb      	cbz	r3, b452 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xaa>
    b3e2:	4d26      	ldr	r5, [pc, #152]	; (b47c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd4>)
    b3e4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    b3e8:	602b      	str	r3, [r5, #0]
    b3ea:	4e25      	ldr	r6, [pc, #148]	; (b480 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd8>)
    b3ec:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    b3f0:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    b3f4:	462f      	mov	r7, r5
    b3f6:	f8c6 5308 	str.w	r5, [r6, #776]	; 0x308
    b3fa:	f8c6 5348 	str.w	r5, [r6, #840]	; 0x348
    b3fe:	2500      	movs	r5, #0
    b400:	f8c6 5140 	str.w	r5, [r6, #320]	; 0x140
    b404:	4d1f      	ldr	r5, [pc, #124]	; (b484 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xdc>)
    b406:	f8d5 9000 	ldr.w	r9, [r5]
    b40a:	eba3 0909 	sub.w	r9, r3, r9
    b40e:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
    b412:	f1b9 0f02 	cmp.w	r9, #2
    b416:	d327      	bcc.n	b468 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    b418:	f5b9 0f00 	cmp.w	r9, #8388608	; 0x800000
    b41c:	d824      	bhi.n	b468 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    b41e:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
    b422:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
    b426:	f1b8 0f00 	cmp.w	r8, #0
    b42a:	d005      	beq.n	b438 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    b42c:	682b      	ldr	r3, [r5, #0]
    b42e:	1ad3      	subs	r3, r2, r3
    b430:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b434:	2b02      	cmp	r3, #2
    b436:	d3f9      	bcc.n	b42c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x84>
    b438:	4d13      	ldr	r5, [pc, #76]	; (b488 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xe0>)
    b43a:	2202      	movs	r2, #2
    b43c:	0753      	lsls	r3, r2, #29
    b43e:	602b      	str	r3, [r5, #0]
    b440:	e9c4 0104 	strd	r0, r1, [r4, #16]
    b444:	2004      	movs	r0, #4
    b446:	f88c 0001 	strb.w	r0, [ip, #1]
    b44a:	f88c 2000 	strb.w	r2, [ip]
    b44e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b452:	e004      	b.n	b45e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb6>
    b454:	f44f 7170 	mov.w	r1, #960	; 0x3c0
    b458:	206c      	movs	r0, #108	; 0x6c
    b45a:	f000 fe5b 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b45e:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    b462:	206c      	movs	r0, #108	; 0x6c
    b464:	f000 fe56 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b468:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    b46c:	206c      	movs	r0, #108	; 0x6c
    b46e:	f000 fe51 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b472:	0000      	.short	0x0000
    b474:	20000028 	.word	0x20000028
    b478:	2000002a 	.word	0x2000002a
    b47c:	4001f508 	.word	0x4001f508
    b480:	4000b000 	.word	0x4000b000
    b484:	4000b504 	.word	0x4000b504
    b488:	4001f504 	.word	0x4001f504

0000b48c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    b48c:	4901      	ldr	r1, [pc, #4]	; (b494 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    b48e:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
    b492:	4770      	bx	lr
    b494:	20000028 	.word	0x20000028

0000b498 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    b498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b49c:	f8df c0f4 	ldr.w	ip, [pc, #244]	; b594 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xfc>
    b4a0:	f89c 4000 	ldrb.w	r4, [ip]
    b4a4:	2c00      	cmp	r4, #0
    b4a6:	bf07      	ittee	eq
    b4a8:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    b4ac:	2100      	moveq	r1, #0
    b4ae:	f44f 3200 	movne.w	r2, #131072	; 0x20000
    b4b2:	2101      	movne	r1, #1
    b4b4:	4838      	ldr	r0, [pc, #224]	; (b598 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x100>)
    b4b6:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    b4ba:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    b4be:	2300      	movs	r3, #0
    b4c0:	2902      	cmp	r1, #2
    b4c2:	bf38      	it	cc
    b4c4:	f44f 75a0 	movcc.w	r5, #320	; 0x140
    b4c8:	d207      	bcs.n	b4da <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x42>
    b4ca:	bf00      	nop
    b4cc:	eb05 0281 	add.w	r2, r5, r1, lsl #2
    b4d0:	5083      	str	r3, [r0, r2]
    b4d2:	1c49      	adds	r1, r1, #1
    b4d4:	b2c9      	uxtb	r1, r1
    b4d6:	2902      	cmp	r1, #2
    b4d8:	d3f8      	bcc.n	b4cc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    b4da:	2c02      	cmp	r4, #2
    b4dc:	d004      	beq.n	b4e8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x50>
    b4de:	f240 31db 	movw	r1, #987	; 0x3db
    b4e2:	206c      	movs	r0, #108	; 0x6c
    b4e4:	f000 fe16 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b4e8:	f3ef 8210 	mrs	r2, PRIMASK
    b4ec:	b672      	cpsid	i
    b4ee:	4c2b      	ldr	r4, [pc, #172]	; (b59c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x104>)
    b4f0:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    b4f4:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
    b4f8:	b12d      	cbz	r5, b506 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6e>
    b4fa:	68a1      	ldr	r1, [r4, #8]
    b4fc:	1c49      	adds	r1, r1, #1
    b4fe:	60a1      	str	r1, [r4, #8]
    b500:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    b504:	e7f4      	b.n	b4f0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x58>
    b506:	68a0      	ldr	r0, [r4, #8]
    b508:	b902      	cbnz	r2, b50c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x74>
    b50a:	b662      	cpsie	i
    b50c:	0a02      	lsrs	r2, r0, #8
    b50e:	0600      	lsls	r0, r0, #24
    b510:	1840      	adds	r0, r0, r1
    b512:	eb42 0103 	adc.w	r1, r2, r3
    b516:	e9d4 2804 	ldrd	r2, r8, [r4, #16]
    b51a:	1cc0      	adds	r0, r0, #3
    b51c:	f141 0100 	adc.w	r1, r1, #0
    b520:	4f1f      	ldr	r7, [pc, #124]	; (b5a0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x108>)
    b522:	2601      	movs	r6, #1
    b524:	4d1f      	ldr	r5, [pc, #124]	; (b5a4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x10c>)
    b526:	ea80 0902 	eor.w	r9, r0, r2
    b52a:	ea81 0808 	eor.w	r8, r1, r8
    b52e:	ea59 0808 	orrs.w	r8, r9, r8
    b532:	d00e      	beq.n	b552 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    b534:	f8d7 8000 	ldr.w	r8, [r7]
    b538:	eba2 0808 	sub.w	r8, r2, r8
    b53c:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    b540:	f1b8 0f04 	cmp.w	r8, #4
    b544:	d305      	bcc.n	b552 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    b546:	f5b8 0f00 	cmp.w	r8, #8388608	; 0x800000
    b54a:	d802      	bhi.n	b552 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    b54c:	f7ff fe7e 	bl	b24c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    b550:	e01b      	b.n	b58a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    b552:	6838      	ldr	r0, [r7, #0]
    b554:	1a10      	subs	r0, r2, r0
    b556:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b55a:	2802      	cmp	r0, #2
    b55c:	d313      	bcc.n	b586 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    b55e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b562:	d810      	bhi.n	b586 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    b564:	4910      	ldr	r1, [pc, #64]	; (b5a8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x110>)
    b566:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b56a:	6008      	str	r0, [r1, #0]
    b56c:	6066      	str	r6, [r4, #4]
    b56e:	7023      	strb	r3, [r4, #0]
    b570:	606e      	str	r6, [r5, #4]
    b572:	60ee      	str	r6, [r5, #12]
    b574:	0040      	lsls	r0, r0, #1
    b576:	1f09      	subs	r1, r1, #4
    b578:	6008      	str	r0, [r1, #0]
    b57a:	2004      	movs	r0, #4
    b57c:	f88c 0001 	strb.w	r0, [ip, #1]
    b580:	f88c 6000 	strb.w	r6, [ip]
    b584:	e001      	b.n	b58a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    b586:	6066      	str	r6, [r4, #4]
    b588:	7023      	strb	r3, [r4, #0]
    b58a:	6860      	ldr	r0, [r4, #4]
    b58c:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    b590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b594:	2000002a 	.word	0x2000002a
    b598:	4000b000 	.word	0x4000b000
    b59c:	20000028 	.word	0x20000028
    b5a0:	4000b504 	.word	0x4000b504
    b5a4:	40008000 	.word	0x40008000
    b5a8:	4001f508 	.word	0x4001f508

0000b5ac <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>:
    b5ac:	b410      	push	{r4}
    b5ae:	f3ef 8410 	mrs	r4, PRIMASK
    b5b2:	b672      	cpsid	i
    b5b4:	4a0c      	ldr	r2, [pc, #48]	; (b5e8 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x3c>)
    b5b6:	490d      	ldr	r1, [pc, #52]	; (b5ec <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x40>)
    b5b8:	f04f 0c00 	mov.w	ip, #0
    b5bc:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
    b5c0:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    b5c4:	b12b      	cbz	r3, b5d2 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x26>
    b5c6:	6888      	ldr	r0, [r1, #8]
    b5c8:	1c40      	adds	r0, r0, #1
    b5ca:	6088      	str	r0, [r1, #8]
    b5cc:	f8c2 c104 	str.w	ip, [r2, #260]	; 0x104
    b5d0:	e7f4      	b.n	b5bc <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x10>
    b5d2:	6889      	ldr	r1, [r1, #8]
    b5d4:	b904      	cbnz	r4, b5d8 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x2c>
    b5d6:	b662      	cpsie	i
    b5d8:	0a0a      	lsrs	r2, r1, #8
    b5da:	0609      	lsls	r1, r1, #24
    b5dc:	1808      	adds	r0, r1, r0
    b5de:	bc10      	pop	{r4}
    b5e0:	eb42 010c 	adc.w	r1, r2, ip
    b5e4:	4770      	bx	lr
    b5e6:	0000      	.short	0x0000
    b5e8:	4000b000 	.word	0x4000b000
    b5ec:	20000028 	.word	0x20000028

0000b5f0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    b5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b5f4:	4a56      	ldr	r2, [pc, #344]	; (b750 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>)
    b5f6:	2501      	movs	r5, #1
    b5f8:	2400      	movs	r4, #0
    b5fa:	f892 c000 	ldrb.w	ip, [r2]
    b5fe:	7852      	ldrb	r2, [r2, #1]
    b600:	f44f 76a0 	mov.w	r6, #320	; 0x140
    b604:	2807      	cmp	r0, #7
    b606:	d27d      	bcs.n	b704 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    b608:	e8df f000 	tbb	[pc, r0]
    b60c:	04040404 	.word	0x04040404
    b610:	00606060 	.word	0x00606060
    b614:	4b4f      	ldr	r3, [pc, #316]	; (b754 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>)
    b616:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    b61a:	43ff      	mvns	r7, r7
    b61c:	ea77 0708 	orns	r7, r7, r8
    b620:	bf04      	itt	eq
    b622:	785b      	ldrbeq	r3, [r3, #1]
    b624:	2b00      	cmpeq	r3, #0
    b626:	d003      	beq.n	b630 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x40>
    b628:	f1bc 0f02 	cmp.w	ip, #2
    b62c:	d005      	beq.n	b63a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x4a>
    b62e:	e026      	b.n	b67e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8e>
    b630:	f44f 6186 	mov.w	r1, #1072	; 0x430
    b634:	206c      	movs	r0, #108	; 0x6c
    b636:	f000 fd6d 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b63a:	1f13      	subs	r3, r2, #4
    b63c:	b2db      	uxtb	r3, r3
    b63e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    b642:	f103 4680 	add.w	r6, r3, #1073741824	; 0x40000000
    b646:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    b64a:	2300      	movs	r3, #0
    b64c:	f1bc 0f01 	cmp.w	ip, #1
    b650:	d003      	beq.n	b65a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6a>
    b652:	f1bc 0f02 	cmp.w	ip, #2
    b656:	d008      	beq.n	b66a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x7a>
    b658:	e00e      	b.n	b678 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    b65a:	2a04      	cmp	r2, #4
    b65c:	bf24      	itt	cs
    b65e:	6837      	ldrcs	r7, [r6, #0]
    b660:	2f00      	cmpcs	r7, #0
    b662:	bf08      	it	eq
    b664:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
    b668:	e006      	b.n	b678 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    b66a:	2a04      	cmp	r2, #4
    b66c:	bf24      	itt	cs
    b66e:	6837      	ldrcs	r7, [r6, #0]
    b670:	2f00      	cmpcs	r7, #0
    b672:	bf08      	it	eq
    b674:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
    b678:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    b67c:	d1e5      	bne.n	b64a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x5a>
    b67e:	4b36      	ldr	r3, [pc, #216]	; (b758 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    b680:	f100 0210 	add.w	r2, r0, #16
    b684:	fa05 f202 	lsl.w	r2, r5, r2
    b688:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    b68c:	f04f 0c40 	mov.w	ip, #64	; 0x40
    b690:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
    b694:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    b698:	449c      	add	ip, r3
    b69a:	f8cc 5000 	str.w	r5, [ip]
    b69e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    b6a2:	f8d0 c540 	ldr.w	ip, [r0, #1344]	; 0x540
    b6a6:	eba1 0c0c 	sub.w	ip, r1, ip
    b6aa:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    b6ae:	f1bc 0f03 	cmp.w	ip, #3
    b6b2:	bf3e      	ittt	cc
    b6b4:	f8c0 4540 	strcc.w	r4, [r0, #1344]	; 0x540
    b6b8:	2000      	movcc	r0, #0
    b6ba:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    b6be:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    b6c2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    b6c6:	2001      	movs	r0, #1
    b6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b6cc:	f1bc 0f00 	cmp.w	ip, #0
    b6d0:	d006      	beq.n	b6e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    b6d2:	4282      	cmp	r2, r0
    b6d4:	d104      	bne.n	b6e0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    b6d6:	f44f 618a 	mov.w	r1, #1104	; 0x450
    b6da:	206c      	movs	r0, #108	; 0x6c
    b6dc:	f000 fd1a 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b6e0:	1f00      	subs	r0, r0, #4
    b6e2:	b2c2      	uxtb	r2, r0
    b6e4:	2a03      	cmp	r2, #3
    b6e6:	d304      	bcc.n	b6f2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    b6e8:	f44f 7127 	mov.w	r1, #668	; 0x29c
    b6ec:	206c      	movs	r0, #108	; 0x6c
    b6ee:	f000 fd11 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b6f2:	4b1a      	ldr	r3, [pc, #104]	; (b75c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x16c>)
    b6f4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    b6f8:	4090      	lsls	r0, r2
    b6fa:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    b6fe:	f8c3 0348 	str.w	r0, [r3, #840]	; 0x348
    b702:	e000      	b.n	b706 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    b704:	e01f      	b.n	b746 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x156>
    b706:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
    b70a:	f843 400c 	str.w	r4, [r3, ip]
    b70e:	f8df c050 	ldr.w	ip, [pc, #80]	; b760 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    b712:	f8dc c000 	ldr.w	ip, [ip]
    b716:	eba1 0c0c 	sub.w	ip, r1, ip
    b71a:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    b71e:	f1bc 0f02 	cmp.w	ip, #2
    b722:	d30d      	bcc.n	b740 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    b724:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    b728:	d80a      	bhi.n	b740 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    b72a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    b72e:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    b732:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    b736:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    b73a:	4628      	mov	r0, r5
    b73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b740:	4620      	mov	r0, r4
    b742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b746:	f240 4154 	movw	r1, #1108	; 0x454
    b74a:	206c      	movs	r0, #108	; 0x6c
    b74c:	f000 fce2 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b750:	2000002a 	.word	0x2000002a
    b754:	20000028 	.word	0x20000028
    b758:	40008000 	.word	0x40008000
    b75c:	4000b000 	.word	0x4000b000
    b760:	4000b504 	.word	0x4000b504

0000b764 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    b764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b766:	2101      	movs	r1, #1
    b768:	2600      	movs	r6, #0
    b76a:	f44f 77a0 	mov.w	r7, #320	; 0x140
    b76e:	2807      	cmp	r0, #7
    b770:	d24a      	bcs.n	b808 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    b772:	e8df f000 	tbb	[pc, r0]
    b776:	0404      	.short	0x0404
    b778:	18180404 	.word	0x18180404
    b77c:	0018      	.short	0x0018
    b77e:	f100 0210 	add.w	r2, r0, #16
    b782:	fa01 f202 	lsl.w	r2, r1, r2
    b786:	4923      	ldr	r1, [pc, #140]	; (b814 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    b788:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b78c:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    b790:	2200      	movs	r2, #0
    b792:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    b796:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    b79a:	508e      	str	r6, [r1, r2]
    b79c:	491e      	ldr	r1, [pc, #120]	; (b818 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    b79e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    b7a2:	9000      	str	r0, [sp, #0]
    b7a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b7a6:	4d1d      	ldr	r5, [pc, #116]	; (b81c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    b7a8:	1f01      	subs	r1, r0, #4
    b7aa:	b2cc      	uxtb	r4, r1
    b7ac:	7829      	ldrb	r1, [r5, #0]
    b7ae:	b181      	cbz	r1, b7d2 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    b7b0:	786a      	ldrb	r2, [r5, #1]
    b7b2:	4282      	cmp	r2, r0
    b7b4:	d10d      	bne.n	b7d2 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    b7b6:	4a1a      	ldr	r2, [pc, #104]	; (b820 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    b7b8:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    b7bc:	6010      	str	r0, [r2, #0]
    b7be:	2901      	cmp	r1, #1
    b7c0:	bf08      	it	eq
    b7c2:	f7ff fd0b 	bleq	b1dc <MPSL_IRQ_TIMER0_Handler+0x100>
    b7c6:	702e      	strb	r6, [r5, #0]
    b7c8:	4a16      	ldr	r2, [pc, #88]	; (b824 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    b7ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b7ce:	e9c2 0004 	strd	r0, r0, [r2, #16]
    b7d2:	4915      	ldr	r1, [pc, #84]	; (b828 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    b7d4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    b7d8:	40a0      	lsls	r0, r4
    b7da:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    b7de:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    b7e2:	00a0      	lsls	r0, r4, #2
    b7e4:	4408      	add	r0, r1
    b7e6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b7ea:	4a10      	ldr	r2, [pc, #64]	; (b82c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    b7ec:	6812      	ldr	r2, [r2, #0]
    b7ee:	1a80      	subs	r0, r0, r2
    b7f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b7f4:	2802      	cmp	r0, #2
    b7f6:	bf24      	itt	cs
    b7f8:	eb07 0084 	addcs.w	r0, r7, r4, lsl #2
    b7fc:	500e      	strcs	r6, [r1, r0]
    b7fe:	480c      	ldr	r0, [pc, #48]	; (b830 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    b800:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    b804:	9000      	str	r0, [sp, #0]
    b806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b808:	f240 41e2 	movw	r1, #1250	; 0x4e2
    b80c:	206c      	movs	r0, #108	; 0x6c
    b80e:	f000 fc81 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b812:	0000      	.short	0x0000
    b814:	40008000 	.word	0x40008000
    b818:	40008140 	.word	0x40008140
    b81c:	2000002a 	.word	0x2000002a
    b820:	4001f508 	.word	0x4001f508
    b824:	20000028 	.word	0x20000028
    b828:	4000b000 	.word	0x4000b000
    b82c:	4000b504 	.word	0x4000b504
    b830:	4000b140 	.word	0x4000b140

0000b834 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    b834:	481a      	ldr	r0, [pc, #104]	; (b8a0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x6c>)
    b836:	7800      	ldrb	r0, [r0, #0]
    b838:	2800      	cmp	r0, #0
    b83a:	bf07      	ittee	eq
    b83c:	f44f 3040 	moveq.w	r0, #196608	; 0x30000
    b840:	2100      	moveq	r1, #0
    b842:	f44f 3000 	movne.w	r0, #131072	; 0x20000
    b846:	2101      	movne	r1, #1
    b848:	4a16      	ldr	r2, [pc, #88]	; (b8a4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x70>)
    b84a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    b84e:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    b852:	2000      	movs	r0, #0
    b854:	2902      	cmp	r1, #2
    b856:	bf38      	it	cc
    b858:	f44f 7ca0 	movcc.w	ip, #320	; 0x140
    b85c:	d207      	bcs.n	b86e <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    b85e:	bf00      	nop
    b860:	eb0c 0381 	add.w	r3, ip, r1, lsl #2
    b864:	50d0      	str	r0, [r2, r3]
    b866:	1c49      	adds	r1, r1, #1
    b868:	b2c9      	uxtb	r1, r1
    b86a:	2902      	cmp	r1, #2
    b86c:	d3f8      	bcc.n	b860 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    b86e:	490e      	ldr	r1, [pc, #56]	; (b8a8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x74>)
    b870:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b874:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b878:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b87c:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    b880:	1d0a      	adds	r2, r1, #4
    b882:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b886:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b88a:	1d12      	adds	r2, r2, #4
    b88c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b890:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    b894:	1d12      	adds	r2, r2, #4
    b896:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b89a:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    b89e:	4770      	bx	lr
    b8a0:	2000002a 	.word	0x2000002a
    b8a4:	4000b000 	.word	0x4000b000
    b8a8:	40008000 	.word	0x40008000

0000b8ac <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>:
    b8ac:	b570      	push	{r4, r5, r6, lr}
    b8ae:	f3ef 8110 	mrs	r1, PRIMASK
    b8b2:	b672      	cpsid	i
    b8b4:	2400      	movs	r4, #0
    b8b6:	4b0d      	ldr	r3, [pc, #52]	; (b8ec <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x40>)
    b8b8:	4a0d      	ldr	r2, [pc, #52]	; (b8f0 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x44>)
    b8ba:	bf00      	nop
    b8bc:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    b8c0:	f8d3 c104 	ldr.w	ip, [r3, #260]	; 0x104
    b8c4:	f1bc 0f00 	cmp.w	ip, #0
    b8c8:	d005      	beq.n	b8d6 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x2a>
    b8ca:	6890      	ldr	r0, [r2, #8]
    b8cc:	1c40      	adds	r0, r0, #1
    b8ce:	6090      	str	r0, [r2, #8]
    b8d0:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    b8d4:	e7f2      	b.n	b8bc <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x10>
    b8d6:	6895      	ldr	r5, [r2, #8]
    b8d8:	b901      	cbnz	r1, b8dc <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x30>
    b8da:	b662      	cpsie	i
    b8dc:	f004 fe5f 	bl	1059e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b8e0:	4a04      	ldr	r2, [pc, #16]	; (b8f4 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x48>)
    b8e2:	4621      	mov	r1, r4
    b8e4:	fbe5 0102 	umlal	r0, r1, r5, r2
    b8e8:	bd70      	pop	{r4, r5, r6, pc}
    b8ea:	0000      	.short	0x0000
    b8ec:	4000b000 	.word	0x4000b000
    b8f0:	20000028 	.word	0x20000028
    b8f4:	1e848000 	.word	0x1e848000

0000b8f8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    b8f8:	b510      	push	{r4, lr}
    b8fa:	2807      	cmp	r0, #7
    b8fc:	d20d      	bcs.n	b91a <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    b8fe:	e8df f000 	tbb	[pc, r0]
    b902:	0404      	.short	0x0404
    b904:	06060404 	.word	0x06060404
    b908:	0006      	.short	0x0006
    b90a:	4906      	ldr	r1, [pc, #24]	; (b924 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    b90c:	e002      	b.n	b914 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    b90e:	1f00      	subs	r0, r0, #4
    b910:	4905      	ldr	r1, [pc, #20]	; (b928 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    b912:	b2c0      	uxtb	r0, r0
    b914:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    b918:	bd10      	pop	{r4, pc}
    b91a:	f240 417b 	movw	r1, #1147	; 0x47b
    b91e:	206c      	movs	r0, #108	; 0x6c
    b920:	f000 fbf8 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b924:	40008140 	.word	0x40008140
    b928:	4000b140 	.word	0x4000b140

0000b92c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    b92c:	b570      	push	{r4, r5, r6, lr}
    b92e:	481b      	ldr	r0, [pc, #108]	; (b99c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    b930:	2400      	movs	r4, #0
    b932:	2104      	movs	r1, #4
    b934:	7004      	strb	r4, [r0, #0]
    b936:	1e80      	subs	r0, r0, #2
    b938:	7001      	strb	r1, [r0, #0]
    b93a:	1f49      	subs	r1, r1, #5
    b93c:	e9c0 1104 	strd	r1, r1, [r0, #16]
    b940:	6084      	str	r4, [r0, #8]
    b942:	f7ff fc4b 	bl	b1dc <MPSL_IRQ_TIMER0_Handler+0x100>
    b946:	2501      	movs	r5, #1
    b948:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    b94c:	02eb      	lsls	r3, r5, #11
    b94e:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    b952:	f3bf 8f4f 	dsb	sy
    b956:	f3bf 8f6f 	isb	sy
    b95a:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    b95e:	4a10      	ldr	r2, [pc, #64]	; (b9a0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    b960:	6055      	str	r5, [r2, #4]
    b962:	6095      	str	r5, [r2, #8]
    b964:	480f      	ldr	r0, [pc, #60]	; (b9a4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    b966:	6801      	ldr	r1, [r0, #0]
    b968:	2900      	cmp	r1, #0
    b96a:	d1fc      	bne.n	b966 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3a>
    b96c:	480e      	ldr	r0, [pc, #56]	; (b9a8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    b96e:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    b972:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    b976:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    b97a:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    b97e:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    b982:	f8c2 4104 	str.w	r4, [r2, #260]	; 0x104
    b986:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    b98a:	6015      	str	r5, [r2, #0]
    b98c:	f44f 7082 	mov.w	r0, #260	; 0x104
    b990:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
    b994:	2002      	movs	r0, #2
    b996:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
    b99a:	bd70      	pop	{r4, r5, r6, pc}
    b99c:	2000002a 	.word	0x2000002a
    b9a0:	4000b000 	.word	0x4000b000
    b9a4:	4000b504 	.word	0x4000b504
    b9a8:	00070002 	.word	0x00070002

0000b9ac <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    b9ac:	4808      	ldr	r0, [pc, #32]	; (b9d0 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    b9ae:	f990 0000 	ldrsb.w	r0, [r0]
    b9b2:	2800      	cmp	r0, #0
    b9b4:	bfb8      	it	lt
    b9b6:	4770      	bxlt	lr
    b9b8:	f000 011f 	and.w	r1, r0, #31
    b9bc:	2201      	movs	r2, #1
    b9be:	fa02 f101 	lsl.w	r1, r2, r1
    b9c2:	0940      	lsrs	r0, r0, #5
    b9c4:	0080      	lsls	r0, r0, #2
    b9c6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b9ca:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b9ce:	4770      	bx	lr
    b9d0:	20000384 	.word	0x20000384

0000b9d4 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    b9d4:	4803      	ldr	r0, [pc, #12]	; (b9e4 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    b9d6:	7800      	ldrb	r0, [r0, #0]
    b9d8:	2803      	cmp	r0, #3
    b9da:	bf0c      	ite	eq
    b9dc:	2001      	moveq	r0, #1
    b9de:	2000      	movne	r0, #0
    b9e0:	4770      	bx	lr
    b9e2:	0000      	.short	0x0000
    b9e4:	2000035c 	.word	0x2000035c

0000b9e8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    b9e8:	4801      	ldr	r0, [pc, #4]	; (b9f0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    b9ea:	8840      	ldrh	r0, [r0, #2]
    b9ec:	4770      	bx	lr
    b9ee:	0000      	.short	0x0000
    b9f0:	2000035c 	.word	0x2000035c

0000b9f4 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    b9f4:	4803      	ldr	r0, [pc, #12]	; (ba04 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    b9f6:	7800      	ldrb	r0, [r0, #0]
    b9f8:	2802      	cmp	r0, #2
    b9fa:	bf16      	itet	ne
    b9fc:	2803      	cmpne	r0, #3
    b9fe:	2001      	moveq	r0, #1
    ba00:	2000      	movne	r0, #0
    ba02:	4770      	bx	lr
    ba04:	2000035c 	.word	0x2000035c

0000ba08 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    ba08:	4802      	ldr	r0, [pc, #8]	; (ba14 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    ba0a:	2100      	movs	r1, #0
    ba0c:	7001      	strb	r1, [r0, #0]
    ba0e:	8041      	strh	r1, [r0, #2]
    ba10:	4770      	bx	lr
    ba12:	0000      	.short	0x0000
    ba14:	2000035c 	.word	0x2000035c

0000ba18 <MPSL_IRQ_CLOCK_Handler>:
    ba18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ba1c:	4c16      	ldr	r4, [pc, #88]	; (ba78 <MPSL_IRQ_CLOCK_Handler+0x60>)
    ba1e:	7a60      	ldrb	r0, [r4, #9]
    ba20:	2800      	cmp	r0, #0
    ba22:	d027      	beq.n	ba74 <MPSL_IRQ_CLOCK_Handler+0x5c>
    ba24:	f44f 7180 	mov.w	r1, #256	; 0x100
    ba28:	058d      	lsls	r5, r1, #22
    ba2a:	4628      	mov	r0, r5
    ba2c:	f004 fde2 	bl	105f4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    ba30:	4680      	mov	r8, r0
    ba32:	f44f 7182 	mov.w	r1, #260	; 0x104
    ba36:	4628      	mov	r0, r5
    ba38:	f004 fddc 	bl	105f4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    ba3c:	2600      	movs	r6, #0
    ba3e:	4607      	mov	r7, r0
    ba40:	f1b8 0f00 	cmp.w	r8, #0
    ba44:	d009      	beq.n	ba5a <MPSL_IRQ_CLOCK_Handler+0x42>
    ba46:	2001      	movs	r0, #1
    ba48:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    ba4c:	7920      	ldrb	r0, [r4, #4]
    ba4e:	b120      	cbz	r0, ba5a <MPSL_IRQ_CLOCK_Handler+0x42>
    ba50:	7126      	strb	r6, [r4, #4]
    ba52:	69e0      	ldr	r0, [r4, #28]
    ba54:	b108      	cbz	r0, ba5a <MPSL_IRQ_CLOCK_Handler+0x42>
    ba56:	4780      	blx	r0
    ba58:	61e6      	str	r6, [r4, #28]
    ba5a:	b137      	cbz	r7, ba6a <MPSL_IRQ_CLOCK_Handler+0x52>
    ba5c:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    ba60:	2002      	movs	r0, #2
    ba62:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    ba66:	f000 fa75 	bl	bf54 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    ba6a:	4640      	mov	r0, r8
    ba6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ba70:	f000 b858 	b.w	bb24 <MPSL_IRQ_CLOCK_Handler+0x10c>
    ba74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba78:	20000314 	.word	0x20000314
    ba7c:	b510      	push	{r4, lr}
    ba7e:	f004 fe63 	bl	10748 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    ba82:	b930      	cbnz	r0, ba92 <MPSL_IRQ_CLOCK_Handler+0x7a>
    ba84:	f004 fe81 	bl	1078a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    ba88:	b918      	cbnz	r0, ba92 <MPSL_IRQ_CLOCK_Handler+0x7a>
    ba8a:	f004 feb4 	bl	107f6 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    ba8e:	2800      	cmp	r0, #0
    ba90:	d002      	beq.n	ba98 <MPSL_IRQ_CLOCK_Handler+0x80>
    ba92:	4902      	ldr	r1, [pc, #8]	; (ba9c <MPSL_IRQ_CLOCK_Handler+0x84>)
    ba94:	2002      	movs	r0, #2
    ba96:	6008      	str	r0, [r1, #0]
    ba98:	bd10      	pop	{r4, pc}
    ba9a:	0000      	.short	0x0000
    ba9c:	40000c34 	.word	0x40000c34
    baa0:	b570      	push	{r4, r5, r6, lr}
    baa2:	f000 f99b 	bl	bddc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    baa6:	f000 fabd 	bl	c024 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    baaa:	4c09      	ldr	r4, [pc, #36]	; (bad0 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    baac:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bab0:	b130      	cbz	r0, bac0 <MPSL_IRQ_CLOCK_Handler+0xa8>
    bab2:	f7ff ffe3 	bl	ba7c <MPSL_IRQ_CLOCK_Handler+0x64>
    bab6:	2001      	movs	r0, #1
    bab8:	6128      	str	r0, [r5, #16]
    baba:	2004      	movs	r0, #4
    babc:	72a0      	strb	r0, [r4, #10]
    babe:	e004      	b.n	baca <MPSL_IRQ_CLOCK_Handler+0xb2>
    bac0:	2003      	movs	r0, #3
    bac2:	72a0      	strb	r0, [r4, #10]
    bac4:	2001      	movs	r0, #1
    bac6:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    baca:	2000      	movs	r0, #0
    bacc:	71e0      	strb	r0, [r4, #7]
    bace:	bd70      	pop	{r4, r5, r6, pc}
    bad0:	20000314 	.word	0x20000314
    bad4:	b570      	push	{r4, r5, r6, lr}
    bad6:	4c12      	ldr	r4, [pc, #72]	; (bb20 <MPSL_IRQ_CLOCK_Handler+0x108>)
    bad8:	79a0      	ldrb	r0, [r4, #6]
    bada:	b1e0      	cbz	r0, bb16 <MPSL_IRQ_CLOCK_Handler+0xfe>
    badc:	79e1      	ldrb	r1, [r4, #7]
    bade:	1e40      	subs	r0, r0, #1
    bae0:	4281      	cmp	r1, r0
    bae2:	da18      	bge.n	bb16 <MPSL_IRQ_CLOCK_Handler+0xfe>
    bae4:	f000 fa9e 	bl	c024 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bae8:	4605      	mov	r5, r0
    baea:	f000 fb87 	bl	c1fc <mpsl_temperature_get>
    baee:	79a1      	ldrb	r1, [r4, #6]
    baf0:	2901      	cmp	r1, #1
    baf2:	d902      	bls.n	bafa <MPSL_IRQ_CLOCK_Handler+0xe2>
    baf4:	79e1      	ldrb	r1, [r4, #7]
    baf6:	1c49      	adds	r1, r1, #1
    baf8:	71e1      	strb	r1, [r4, #7]
    bafa:	b10d      	cbz	r5, bb00 <MPSL_IRQ_CLOCK_Handler+0xe8>
    bafc:	6961      	ldr	r1, [r4, #20]
    bafe:	e000      	b.n	bb02 <MPSL_IRQ_CLOCK_Handler+0xea>
    bb00:	6921      	ldr	r1, [r4, #16]
    bb02:	1a41      	subs	r1, r0, r1
    bb04:	2902      	cmp	r1, #2
    bb06:	da02      	bge.n	bb0e <MPSL_IRQ_CLOCK_Handler+0xf6>
    bb08:	f111 0f02 	cmn.w	r1, #2
    bb0c:	dc07      	bgt.n	bb1e <MPSL_IRQ_CLOCK_Handler+0x106>
    bb0e:	b10d      	cbz	r5, bb14 <MPSL_IRQ_CLOCK_Handler+0xfc>
    bb10:	6160      	str	r0, [r4, #20]
    bb12:	e000      	b.n	bb16 <MPSL_IRQ_CLOCK_Handler+0xfe>
    bb14:	6120      	str	r0, [r4, #16]
    bb16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bb1a:	f7ff bfc1 	b.w	baa0 <MPSL_IRQ_CLOCK_Handler+0x88>
    bb1e:	bd70      	pop	{r4, r5, r6, pc}
    bb20:	20000314 	.word	0x20000314
    bb24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bb28:	4606      	mov	r6, r0
    bb2a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bb2e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    bb32:	4628      	mov	r0, r5
    bb34:	f004 fd5e 	bl	105f4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bb38:	4680      	mov	r8, r0
    bb3a:	f44f 7188 	mov.w	r1, #272	; 0x110
    bb3e:	4628      	mov	r0, r5
    bb40:	f004 fd58 	bl	105f4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bb44:	4c27      	ldr	r4, [pc, #156]	; (bbe4 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    bb46:	4682      	mov	sl, r0
    bb48:	7827      	ldrb	r7, [r4, #0]
    bb4a:	f104 0008 	add.w	r0, r4, #8
    bb4e:	f004 fdc5 	bl	106dc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    bb52:	b110      	cbz	r0, bb5a <MPSL_IRQ_CLOCK_Handler+0x142>
    bb54:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    bb58:	e016      	b.n	bb88 <MPSL_IRQ_CLOCK_Handler+0x170>
    bb5a:	f04f 0901 	mov.w	r9, #1
    bb5e:	b146      	cbz	r6, bb72 <MPSL_IRQ_CLOCK_Handler+0x15a>
    bb60:	7aa0      	ldrb	r0, [r4, #10]
    bb62:	2803      	cmp	r0, #3
    bb64:	d105      	bne.n	bb72 <MPSL_IRQ_CLOCK_Handler+0x15a>
    bb66:	2004      	movs	r0, #4
    bb68:	72a0      	strb	r0, [r4, #10]
    bb6a:	f7ff ff87 	bl	ba7c <MPSL_IRQ_CLOCK_Handler+0x64>
    bb6e:	f8c5 9010 	str.w	r9, [r5, #16]
    bb72:	2600      	movs	r6, #0
    bb74:	f1b8 0f00 	cmp.w	r8, #0
    bb78:	d018      	beq.n	bbac <MPSL_IRQ_CLOCK_Handler+0x194>
    bb7a:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    bb7e:	7aa0      	ldrb	r0, [r4, #10]
    bb80:	2804      	cmp	r0, #4
    bb82:	d004      	beq.n	bb8e <MPSL_IRQ_CLOCK_Handler+0x176>
    bb84:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    bb88:	206d      	movs	r0, #109	; 0x6d
    bb8a:	f000 fac3 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bb8e:	f004 fddb 	bl	10748 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    bb92:	b928      	cbnz	r0, bba0 <MPSL_IRQ_CLOCK_Handler+0x188>
    bb94:	f004 fdf9 	bl	1078a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bb98:	b910      	cbnz	r0, bba0 <MPSL_IRQ_CLOCK_Handler+0x188>
    bb9a:	f004 fe2c 	bl	107f6 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    bb9e:	b108      	cbz	r0, bba4 <MPSL_IRQ_CLOCK_Handler+0x18c>
    bba0:	4811      	ldr	r0, [pc, #68]	; (bbe8 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    bba2:	6006      	str	r6, [r0, #0]
    bba4:	2002      	movs	r0, #2
    bba6:	72a0      	strb	r0, [r4, #10]
    bba8:	f000 f8fc 	bl	bda4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    bbac:	f1ba 0f00 	cmp.w	sl, #0
    bbb0:	d008      	beq.n	bbc4 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    bbb2:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    bbb6:	7aa0      	ldrb	r0, [r4, #10]
    bbb8:	2802      	cmp	r0, #2
    bbba:	d101      	bne.n	bbc0 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    bbbc:	f7ff ff8a 	bl	bad4 <MPSL_IRQ_CLOCK_Handler+0xbc>
    bbc0:	f8c5 9014 	str.w	r9, [r5, #20]
    bbc4:	b13f      	cbz	r7, bbd6 <MPSL_IRQ_CLOCK_Handler+0x1be>
    bbc6:	7026      	strb	r6, [r4, #0]
    bbc8:	7aa0      	ldrb	r0, [r4, #10]
    bbca:	2802      	cmp	r0, #2
    bbcc:	d101      	bne.n	bbd2 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    bbce:	f7ff ff67 	bl	baa0 <MPSL_IRQ_CLOCK_Handler+0x88>
    bbd2:	f000 f8e7 	bl	bda4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    bbd6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bbda:	4802      	ldr	r0, [pc, #8]	; (bbe4 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    bbdc:	3008      	adds	r0, #8
    bbde:	f004 bd94 	b.w	1070a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    bbe2:	0000      	.short	0x0000
    bbe4:	20000314 	.word	0x20000314
    bbe8:	40000c34 	.word	0x40000c34
    bbec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bbf0:	4c49      	ldr	r4, [pc, #292]	; (bd18 <MPSL_IRQ_CLOCK_Handler+0x300>)
    bbf2:	2700      	movs	r7, #0
    bbf4:	4606      	mov	r6, r0
    bbf6:	61a7      	str	r7, [r4, #24]
    bbf8:	7842      	ldrb	r2, [r0, #1]
    bbfa:	7881      	ldrb	r1, [r0, #2]
    bbfc:	7800      	ldrb	r0, [r0, #0]
    bbfe:	72e0      	strb	r0, [r4, #11]
    bc00:	7162      	strb	r2, [r4, #5]
    bc02:	71a1      	strb	r1, [r4, #6]
    bc04:	71e7      	strb	r7, [r4, #7]
    bc06:	f04f 0801 	mov.w	r8, #1
    bc0a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bc0e:	2805      	cmp	r0, #5
    bc10:	d225      	bcs.n	bc5e <MPSL_IRQ_CLOCK_Handler+0x246>
    bc12:	e8df f000 	tbb	[pc, r0]
    bc16:	0310      	.short	0x0310
    bc18:	00222006 	.word	0x00222006
    bc1c:	f8c4 8018 	str.w	r8, [r4, #24]
    bc20:	e009      	b.n	bc36 <MPSL_IRQ_CLOCK_Handler+0x21e>
    bc22:	f000 f8db 	bl	bddc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    bc26:	2101      	movs	r1, #1
    bc28:	4628      	mov	r0, r5
    bc2a:	f004 fce8 	bl	105fe <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    bc2e:	2800      	cmp	r0, #0
    bc30:	d0f9      	beq.n	bc26 <MPSL_IRQ_CLOCK_Handler+0x20e>
    bc32:	2002      	movs	r0, #2
    bc34:	61a0      	str	r0, [r4, #24]
    bc36:	f004 fd0e 	bl	10656 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    bc3a:	b1c0      	cbz	r0, bc6e <MPSL_IRQ_CLOCK_Handler+0x256>
    bc3c:	f000 fa0c 	bl	c058 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    bc40:	7e21      	ldrb	r1, [r4, #24]
    bc42:	f001 0103 	and.w	r1, r1, #3
    bc46:	4288      	cmp	r0, r1
    bc48:	d111      	bne.n	bc6e <MPSL_IRQ_CLOCK_Handler+0x256>
    bc4a:	79b0      	ldrb	r0, [r6, #6]
    bc4c:	b160      	cbz	r0, bc68 <MPSL_IRQ_CLOCK_Handler+0x250>
    bc4e:	2002      	movs	r0, #2
    bc50:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bc54:	e044      	b.n	bce0 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    bc56:	4831      	ldr	r0, [pc, #196]	; (bd1c <MPSL_IRQ_CLOCK_Handler+0x304>)
    bc58:	e7ec      	b.n	bc34 <MPSL_IRQ_CLOCK_Handler+0x21c>
    bc5a:	4831      	ldr	r0, [pc, #196]	; (bd20 <MPSL_IRQ_CLOCK_Handler+0x308>)
    bc5c:	e7ea      	b.n	bc34 <MPSL_IRQ_CLOCK_Handler+0x21c>
    bc5e:	f240 313d 	movw	r1, #829	; 0x33d
    bc62:	206d      	movs	r0, #109	; 0x6d
    bc64:	f000 fa56 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bc68:	f000 f9ca 	bl	c000 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    bc6c:	e038      	b.n	bce0 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    bc6e:	f8c5 800c 	str.w	r8, [r5, #12]
    bc72:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    bc76:	69a0      	ldr	r0, [r4, #24]
    bc78:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    bc7c:	f004 fd50 	bl	10720 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    bc80:	b940      	cbnz	r0, bc94 <MPSL_IRQ_CLOCK_Handler+0x27c>
    bc82:	f004 fd57 	bl	10734 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    bc86:	b928      	cbnz	r0, bc94 <MPSL_IRQ_CLOCK_Handler+0x27c>
    bc88:	f004 fd6b 	bl	10762 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    bc8c:	b910      	cbnz	r0, bc94 <MPSL_IRQ_CLOCK_Handler+0x27c>
    bc8e:	f004 fd7c 	bl	1078a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bc92:	b138      	cbz	r0, bca4 <MPSL_IRQ_CLOCK_Handler+0x28c>
    bc94:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bc98:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    bc9c:	4921      	ldr	r1, [pc, #132]	; (bd24 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    bc9e:	f3c0 3042 	ubfx	r0, r0, #13, #3
    bca2:	6008      	str	r0, [r1, #0]
    bca4:	f004 fd3c 	bl	10720 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    bca8:	b940      	cbnz	r0, bcbc <MPSL_IRQ_CLOCK_Handler+0x2a4>
    bcaa:	f004 fd43 	bl	10734 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    bcae:	b928      	cbnz	r0, bcbc <MPSL_IRQ_CLOCK_Handler+0x2a4>
    bcb0:	f004 fd57 	bl	10762 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    bcb4:	b910      	cbnz	r0, bcbc <MPSL_IRQ_CLOCK_Handler+0x2a4>
    bcb6:	f004 fd68 	bl	1078a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bcba:	b118      	cbz	r0, bcc4 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    bcbc:	4919      	ldr	r1, [pc, #100]	; (bd24 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    bcbe:	3110      	adds	r1, #16
    bcc0:	f8c1 8000 	str.w	r8, [r1]
    bcc4:	f8c5 8008 	str.w	r8, [r5, #8]
    bcc8:	2002      	movs	r0, #2
    bcca:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bcce:	79b0      	ldrb	r0, [r6, #6]
    bcd0:	b930      	cbnz	r0, bce0 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    bcd2:	f000 f829 	bl	bd28 <MPSL_IRQ_CLOCK_Handler+0x310>
    bcd6:	2002      	movs	r0, #2
    bcd8:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bcdc:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    bce0:	79a0      	ldrb	r0, [r4, #6]
    bce2:	b170      	cbz	r0, bd02 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    bce4:	7830      	ldrb	r0, [r6, #0]
    bce6:	b960      	cbnz	r0, bd02 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    bce8:	f000 f99c 	bl	c024 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bcec:	4606      	mov	r6, r0
    bcee:	f000 fa85 	bl	c1fc <mpsl_temperature_get>
    bcf2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    bcf6:	b116      	cbz	r6, bcfe <MPSL_IRQ_CLOCK_Handler+0x2e6>
    bcf8:	e9c4 1004 	strd	r1, r0, [r4, #16]
    bcfc:	e001      	b.n	bd02 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    bcfe:	e9c4 0104 	strd	r0, r1, [r4, #16]
    bd02:	2101      	movs	r1, #1
    bd04:	4628      	mov	r0, r5
    bd06:	f004 fc7a 	bl	105fe <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    bd0a:	b108      	cbz	r0, bd10 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    bd0c:	f000 f984 	bl	c018 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    bd10:	72a7      	strb	r7, [r4, #10]
    bd12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bd16:	0000      	.short	0x0000
    bd18:	20000314 	.word	0x20000314
    bd1c:	00020001 	.word	0x00020001
    bd20:	00030001 	.word	0x00030001
    bd24:	4000053c 	.word	0x4000053c
    bd28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd2c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bd30:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    bd34:	f010 0f02 	tst.w	r0, #2
    bd38:	d011      	beq.n	bd5e <MPSL_IRQ_CLOCK_Handler+0x346>
    bd3a:	4c16      	ldr	r4, [pc, #88]	; (bd94 <MPSL_IRQ_CLOCK_Handler+0x37c>)
    bd3c:	6820      	ldr	r0, [r4, #0]
    bd3e:	43c0      	mvns	r0, r0
    bd40:	f340 1600 	sbfx	r6, r0, #4, #1
    bd44:	6820      	ldr	r0, [r4, #0]
    bd46:	f040 0010 	orr.w	r0, r0, #16
    bd4a:	6020      	str	r0, [r4, #0]
    bd4c:	f44f 7782 	mov.w	r7, #260	; 0x104
    bd50:	4639      	mov	r1, r7
    bd52:	4628      	mov	r0, r5
    bd54:	1c76      	adds	r6, r6, #1
    bd56:	f004 fc4d 	bl	105f4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bd5a:	b128      	cbz	r0, bd68 <MPSL_IRQ_CLOCK_Handler+0x350>
    bd5c:	e00a      	b.n	bd74 <MPSL_IRQ_CLOCK_Handler+0x35c>
    bd5e:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    bd62:	206d      	movs	r0, #109	; 0x6d
    bd64:	f000 f9d6 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bd68:	f004 fd51 	bl	1080e <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    bd6c:	e002      	b.n	bd74 <MPSL_IRQ_CLOCK_Handler+0x35c>
    bd6e:	bf00      	nop
    bd70:	f004 fd4b 	bl	1080a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    bd74:	4639      	mov	r1, r7
    bd76:	4628      	mov	r0, r5
    bd78:	f004 fc3c 	bl	105f4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bd7c:	2800      	cmp	r0, #0
    bd7e:	d0f7      	beq.n	bd70 <MPSL_IRQ_CLOCK_Handler+0x358>
    bd80:	f000 f93e 	bl	c000 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    bd84:	2e00      	cmp	r6, #0
    bd86:	d103      	bne.n	bd90 <MPSL_IRQ_CLOCK_Handler+0x378>
    bd88:	6820      	ldr	r0, [r4, #0]
    bd8a:	f020 0010 	bic.w	r0, r0, #16
    bd8e:	6020      	str	r0, [r4, #0]
    bd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bd94:	e000ed10 	.word	0xe000ed10

0000bd98 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    bd98:	4801      	ldr	r0, [pc, #4]	; (bda0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    bd9a:	89c0      	ldrh	r0, [r0, #14]
    bd9c:	4770      	bx	lr
    bd9e:	0000      	.short	0x0000
    bda0:	20000314 	.word	0x20000314

0000bda4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    bda4:	b510      	push	{r4, lr}
    bda6:	f3ef 8410 	mrs	r4, PRIMASK
    bdaa:	b672      	cpsid	i
    bdac:	480a      	ldr	r0, [pc, #40]	; (bdd8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    bdae:	7841      	ldrb	r1, [r0, #1]
    bdb0:	b129      	cbz	r1, bdbe <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    bdb2:	7841      	ldrb	r1, [r0, #1]
    bdb4:	1e49      	subs	r1, r1, #1
    bdb6:	7041      	strb	r1, [r0, #1]
    bdb8:	7841      	ldrb	r1, [r0, #1]
    bdba:	b129      	cbz	r1, bdc8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    bdbc:	e008      	b.n	bdd0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    bdbe:	f240 1119 	movw	r1, #281	; 0x119
    bdc2:	206d      	movs	r0, #109	; 0x6d
    bdc4:	f000 f9a6 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bdc8:	7880      	ldrb	r0, [r0, #2]
    bdca:	b908      	cbnz	r0, bdd0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    bdcc:	f000 f938 	bl	c040 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    bdd0:	2c00      	cmp	r4, #0
    bdd2:	d100      	bne.n	bdd6 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    bdd4:	b662      	cpsie	i
    bdd6:	bd10      	pop	{r4, pc}
    bdd8:	20000314 	.word	0x20000314

0000bddc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    bddc:	b510      	push	{r4, lr}
    bdde:	f3ef 8410 	mrs	r4, PRIMASK
    bde2:	b672      	cpsid	i
    bde4:	4806      	ldr	r0, [pc, #24]	; (be00 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    bde6:	7841      	ldrb	r1, [r0, #1]
    bde8:	1c49      	adds	r1, r1, #1
    bdea:	7041      	strb	r1, [r0, #1]
    bdec:	7840      	ldrb	r0, [r0, #1]
    bdee:	2801      	cmp	r0, #1
    bdf0:	d101      	bne.n	bdf6 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    bdf2:	f004 fc1b 	bl	1062c <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    bdf6:	2c00      	cmp	r4, #0
    bdf8:	d100      	bne.n	bdfc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    bdfa:	b662      	cpsie	i
    bdfc:	bd10      	pop	{r4, pc}
    bdfe:	0000      	.short	0x0000
    be00:	20000314 	.word	0x20000314

0000be04 <mpsl_clock_hfclk_release>:
    be04:	4805      	ldr	r0, [pc, #20]	; (be1c <mpsl_clock_hfclk_release+0x18>)
    be06:	b510      	push	{r4, lr}
    be08:	78c1      	ldrb	r1, [r0, #3]
    be0a:	b121      	cbz	r1, be16 <mpsl_clock_hfclk_release+0x12>
    be0c:	2100      	movs	r1, #0
    be0e:	7101      	strb	r1, [r0, #4]
    be10:	70c1      	strb	r1, [r0, #3]
    be12:	f7ff ffc7 	bl	bda4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    be16:	2000      	movs	r0, #0
    be18:	bd10      	pop	{r4, pc}
    be1a:	0000      	.short	0x0000
    be1c:	20000314 	.word	0x20000314

0000be20 <mpsl_clock_hfclk_request>:
    be20:	b570      	push	{r4, r5, r6, lr}
    be22:	4c0c      	ldr	r4, [pc, #48]	; (be54 <mpsl_clock_hfclk_request+0x34>)
    be24:	78e1      	ldrb	r1, [r4, #3]
    be26:	b961      	cbnz	r1, be42 <mpsl_clock_hfclk_request+0x22>
    be28:	2501      	movs	r5, #1
    be2a:	70e5      	strb	r5, [r4, #3]
    be2c:	61e0      	str	r0, [r4, #28]
    be2e:	f7ff ffd5 	bl	bddc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    be32:	f000 f8f7 	bl	c024 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    be36:	b130      	cbz	r0, be46 <mpsl_clock_hfclk_request+0x26>
    be38:	69e0      	ldr	r0, [r4, #28]
    be3a:	b110      	cbz	r0, be42 <mpsl_clock_hfclk_request+0x22>
    be3c:	4780      	blx	r0
    be3e:	2000      	movs	r0, #0
    be40:	61e0      	str	r0, [r4, #28]
    be42:	2000      	movs	r0, #0
    be44:	bd70      	pop	{r4, r5, r6, pc}
    be46:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    be4a:	7125      	strb	r5, [r4, #4]
    be4c:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    be50:	e7f7      	b.n	be42 <mpsl_clock_hfclk_request+0x22>
    be52:	0000      	.short	0x0000
    be54:	20000314 	.word	0x20000314

0000be58 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    be58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be5c:	0005      	movs	r5, r0
    be5e:	f06f 0015 	mvn.w	r0, #21
    be62:	d03f      	beq.n	bee4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    be64:	7829      	ldrb	r1, [r5, #0]
    be66:	2904      	cmp	r1, #4
    be68:	d83c      	bhi.n	bee4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    be6a:	2900      	cmp	r1, #0
    be6c:	7869      	ldrb	r1, [r5, #1]
    be6e:	d03b      	beq.n	bee8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    be70:	2900      	cmp	r1, #0
    be72:	d137      	bne.n	bee4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    be74:	78a9      	ldrb	r1, [r5, #2]
    be76:	2900      	cmp	r1, #0
    be78:	d134      	bne.n	bee4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    be7a:	2000      	movs	r0, #0
    be7c:	f004 fba9 	bl	105d2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    be80:	2000      	movs	r0, #0
    be82:	f004 fb99 	bl	105b8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    be86:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    be8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    be8e:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    be92:	2600      	movs	r6, #0
    be94:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    be98:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    be9c:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    bea0:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    bea4:	4c14      	ldr	r4, [pc, #80]	; (bef8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    bea6:	7066      	strb	r6, [r4, #1]
    bea8:	88a8      	ldrh	r0, [r5, #4]
    beaa:	81a0      	strh	r0, [r4, #12]
    beac:	f004 fbb5 	bl	1061a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    beb0:	2701      	movs	r7, #1
    beb2:	b108      	cbz	r0, beb8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    beb4:	70e7      	strb	r7, [r4, #3]
    beb6:	7067      	strb	r7, [r4, #1]
    beb8:	2101      	movs	r1, #1
    beba:	4640      	mov	r0, r8
    bebc:	f004 fb9f 	bl	105fe <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    bec0:	b108      	cbz	r0, bec6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    bec2:	f000 f8a9 	bl	c018 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    bec6:	f240 50f5 	movw	r0, #1525	; 0x5f5
    beca:	81e0      	strh	r0, [r4, #14]
    becc:	4628      	mov	r0, r5
    bece:	f7ff fe8d 	bl	bbec <MPSL_IRQ_CLOCK_Handler+0x1d4>
    bed2:	7267      	strb	r7, [r4, #9]
    bed4:	2000      	movs	r0, #0
    bed6:	f004 fb6f 	bl	105b8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    beda:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bede:	4630      	mov	r0, r6
    bee0:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    bee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bee8:	2900      	cmp	r1, #0
    beea:	d0fb      	beq.n	bee4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    beec:	2920      	cmp	r1, #32
    beee:	d8f9      	bhi.n	bee4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    bef0:	78a9      	ldrb	r1, [r5, #2]
    bef2:	2921      	cmp	r1, #33	; 0x21
    bef4:	d9c1      	bls.n	be7a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    bef6:	e7f5      	b.n	bee4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    bef8:	20000314 	.word	0x20000314

0000befc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    befc:	4801      	ldr	r0, [pc, #4]	; (bf04 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    befe:	8980      	ldrh	r0, [r0, #12]
    bf00:	4770      	bx	lr
    bf02:	0000      	.short	0x0000
    bf04:	20000314 	.word	0x20000314

0000bf08 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    bf08:	b510      	push	{r4, lr}
    bf0a:	480d      	ldr	r0, [pc, #52]	; (bf40 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    bf0c:	f004 fbe6 	bl	106dc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    bf10:	490b      	ldr	r1, [pc, #44]	; (bf40 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    bf12:	3908      	subs	r1, #8
    bf14:	b148      	cbz	r0, bf2a <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    bf16:	2001      	movs	r0, #1
    bf18:	7008      	strb	r0, [r1, #0]
    bf1a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bf1e:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    bf22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bf26:	f7ff bf59 	b.w	bddc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    bf2a:	7a88      	ldrb	r0, [r1, #10]
    bf2c:	2802      	cmp	r0, #2
    bf2e:	d101      	bne.n	bf34 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    bf30:	f7ff fdb6 	bl	baa0 <MPSL_IRQ_CLOCK_Handler+0x88>
    bf34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bf38:	4801      	ldr	r0, [pc, #4]	; (bf40 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    bf3a:	f004 bbe6 	b.w	1070a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    bf3e:	0000      	.short	0x0000
    bf40:	2000031c 	.word	0x2000031c

0000bf44 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    bf44:	4802      	ldr	r0, [pc, #8]	; (bf50 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    bf46:	7a80      	ldrb	r0, [r0, #10]
    bf48:	2800      	cmp	r0, #0
    bf4a:	d000      	beq.n	bf4e <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    bf4c:	2001      	movs	r0, #1
    bf4e:	4770      	bx	lr
    bf50:	20000314 	.word	0x20000314

0000bf54 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    bf54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf56:	4d1f      	ldr	r5, [pc, #124]	; (bfd4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    bf58:	7ae8      	ldrb	r0, [r5, #11]
    bf5a:	2800      	cmp	r0, #0
    bf5c:	d10f      	bne.n	bf7e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    bf5e:	7e28      	ldrb	r0, [r5, #24]
    bf60:	f000 0003 	and.w	r0, r0, #3
    bf64:	f004 fb67 	bl	10636 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    bf68:	2800      	cmp	r0, #0
    bf6a:	d008      	beq.n	bf7e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    bf6c:	f3ef 8110 	mrs	r1, PRIMASK
    bf70:	b672      	cpsid	i
    bf72:	f7ff ffe7 	bl	bf44 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    bf76:	b118      	cbz	r0, bf80 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    bf78:	2900      	cmp	r1, #0
    bf7a:	d100      	bne.n	bf7e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    bf7c:	b662      	cpsie	i
    bf7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bf80:	2601      	movs	r6, #1
    bf82:	72ae      	strb	r6, [r5, #10]
    bf84:	b901      	cbnz	r1, bf88 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    bf86:	b662      	cpsie	i
    bf88:	2018      	movs	r0, #24
    bf8a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    bf8e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    bf92:	61a6      	str	r6, [r4, #24]
    bf94:	f44f 7020 	mov.w	r0, #640	; 0x280
    bf98:	f8ad 0000 	strh.w	r0, [sp]
    bf9c:	f8bd 0000 	ldrh.w	r0, [sp]
    bfa0:	1e41      	subs	r1, r0, #1
    bfa2:	f8ad 1000 	strh.w	r1, [sp]
    bfa6:	d2f9      	bcs.n	bf9c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    bfa8:	2700      	movs	r7, #0
    bfaa:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    bfae:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    bfb2:	4808      	ldr	r0, [pc, #32]	; (bfd4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    bfb4:	3008      	adds	r0, #8
    bfb6:	f004 fba4 	bl	10702 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    bfba:	702f      	strb	r7, [r5, #0]
    bfbc:	f7ff fd70 	bl	baa0 <MPSL_IRQ_CLOCK_Handler+0x88>
    bfc0:	6166      	str	r6, [r4, #20]
    bfc2:	7968      	ldrb	r0, [r5, #5]
    bfc4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    bfc8:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    bfcc:	2018      	movs	r0, #24
    bfce:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    bfd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bfd4:	20000314 	.word	0x20000314

0000bfd8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    bfd8:	4602      	mov	r2, r0
    bfda:	b510      	push	{r4, lr}
    bfdc:	2000      	movs	r0, #0
    bfde:	2900      	cmp	r1, #0
    bfe0:	d00a      	beq.n	bff8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    bfe2:	2a00      	cmp	r2, #0
    bfe4:	d008      	beq.n	bff8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    bfe6:	fba2 0101 	umull	r0, r1, r2, r1
    bfea:	1e40      	subs	r0, r0, #1
    bfec:	4a03      	ldr	r2, [pc, #12]	; (bffc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    bfee:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    bff2:	f004 fc0e 	bl	10812 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    bff6:	1c40      	adds	r0, r0, #1
    bff8:	bd10      	pop	{r4, pc}
    bffa:	0000      	.short	0x0000
    bffc:	000f4240 	.word	0x000f4240

0000c000 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    c000:	b510      	push	{r4, lr}
    c002:	4c04      	ldr	r4, [pc, #16]	; (c014 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    c004:	7e20      	ldrb	r0, [r4, #24]
    c006:	f000 0003 	and.w	r0, r0, #3
    c00a:	f004 fb14 	bl	10636 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c00e:	2800      	cmp	r0, #0
    c010:	d0f8      	beq.n	c004 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    c012:	bd10      	pop	{r4, pc}
    c014:	20000314 	.word	0x20000314

0000c018 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    c018:	4901      	ldr	r1, [pc, #4]	; (c020 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    c01a:	2001      	movs	r0, #1
    c01c:	7008      	strb	r0, [r1, #0]
    c01e:	4770      	bx	lr
    c020:	20000385 	.word	0x20000385

0000c024 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    c024:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c028:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    c02c:	b918      	cbnz	r0, c036 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    c02e:	4803      	ldr	r0, [pc, #12]	; (c03c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    c030:	7800      	ldrb	r0, [r0, #0]
    c032:	2800      	cmp	r0, #0
    c034:	d000      	beq.n	c038 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    c036:	2001      	movs	r0, #1
    c038:	4770      	bx	lr
    c03a:	0000      	.short	0x0000
    c03c:	20000385 	.word	0x20000385

0000c040 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    c040:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c044:	2101      	movs	r1, #1
    c046:	6041      	str	r1, [r0, #4]
    c048:	2100      	movs	r1, #0
    c04a:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c04e:	4801      	ldr	r0, [pc, #4]	; (c054 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    c050:	7001      	strb	r1, [r0, #0]
    c052:	4770      	bx	lr
    c054:	20000385 	.word	0x20000385

0000c058 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    c058:	4802      	ldr	r0, [pc, #8]	; (c064 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    c05a:	6800      	ldr	r0, [r0, #0]
    c05c:	f000 0003 	and.w	r0, r0, #3
    c060:	4770      	bx	lr
    c062:	0000      	.short	0x0000
    c064:	4000041c 	.word	0x4000041c
    c068:	b510      	push	{r4, lr}
    c06a:	b131      	cbz	r1, c07a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    c06c:	2901      	cmp	r1, #1
    c06e:	d007      	beq.n	c080 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    c070:	f240 3102 	movw	r1, #770	; 0x302
    c074:	a005      	add	r0, pc, #20	; (adr r0, c08c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    c076:	f000 f821 	bl	c0bc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    c07a:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    c07e:	e001      	b.n	c084 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    c080:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    c084:	f000 0001 	and.w	r0, r0, #1
    c088:	bd10      	pop	{r4, pc}
    c08a:	0000      	.short	0x0000
    c08c:	5f66726e 	.word	0x5f66726e
    c090:	636f6c63 	.word	0x636f6c63
    c094:	00682e6b 	.word	0x00682e6b
    c098:	f3bf 8f4f 	dsb	sy
    c09c:	4805      	ldr	r0, [pc, #20]	; (c0b4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    c09e:	6801      	ldr	r1, [r0, #0]
    c0a0:	4a05      	ldr	r2, [pc, #20]	; (c0b8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    c0a2:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    c0a6:	4311      	orrs	r1, r2
    c0a8:	6001      	str	r1, [r0, #0]
    c0aa:	f3bf 8f4f 	dsb	sy
    c0ae:	bf00      	nop
    c0b0:	e7fd      	b.n	c0ae <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    c0b2:	0000      	.short	0x0000
    c0b4:	e000ed0c 	.word	0xe000ed0c
    c0b8:	05fa0004 	.word	0x05fa0004

0000c0bc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    c0bc:	b672      	cpsid	i
    c0be:	4a03      	ldr	r2, [pc, #12]	; (c0cc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    c0c0:	6852      	ldr	r2, [r2, #4]
    c0c2:	b102      	cbz	r2, c0c6 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    c0c4:	4790      	blx	r2
    c0c6:	f7ff ffe7 	bl	c098 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c0ca:	0000      	.short	0x0000
    c0cc:	20000334 	.word	0x20000334
    c0d0:	4806      	ldr	r0, [pc, #24]	; (c0ec <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    c0d2:	b510      	push	{r4, lr}
    c0d4:	2100      	movs	r1, #0
    c0d6:	6001      	str	r1, [r0, #0]
    c0d8:	2101      	movs	r1, #1
    c0da:	6001      	str	r1, [r0, #0]
    c0dc:	4608      	mov	r0, r1
    c0de:	f004 fad1 	bl	10684 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c0e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c0e6:	2001      	movs	r0, #1
    c0e8:	f004 babf 	b.w	1066a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c0ec:	40001ffc 	.word	0x40001ffc
    c0f0:	4807      	ldr	r0, [pc, #28]	; (c110 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    c0f2:	b510      	push	{r4, lr}
    c0f4:	2101      	movs	r1, #1
    c0f6:	6041      	str	r1, [r0, #4]
    c0f8:	1e89      	subs	r1, r1, #2
    c0fa:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    c0fe:	200c      	movs	r0, #12
    c100:	f004 fac0 	bl	10684 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c108:	200c      	movs	r0, #12
    c10a:	f004 baae 	b.w	1066a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c10e:	0000      	.short	0x0000
    c110:	4000c000 	.word	0x4000c000

0000c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    c114:	b50e      	push	{r1, r2, r3, lr}
    c116:	b672      	cpsid	i
    c118:	4a0f      	ldr	r2, [pc, #60]	; (c158 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    c11a:	6855      	ldr	r5, [r2, #4]
    c11c:	b1d5      	cbz	r5, c154 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    c11e:	2200      	movs	r2, #0
    c120:	4603      	mov	r3, r0
    c122:	466e      	mov	r6, sp
    c124:	240a      	movs	r4, #10
    c126:	e003      	b.n	c130 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    c128:	fbb0 f0f4 	udiv	r0, r0, r4
    c12c:	1c52      	adds	r2, r2, #1
    c12e:	b2d2      	uxtb	r2, r2
    c130:	2800      	cmp	r0, #0
    c132:	d1f9      	bne.n	c128 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    c134:	54b0      	strb	r0, [r6, r2]
    c136:	e009      	b.n	c14c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    c138:	fbb3 f0f4 	udiv	r0, r3, r4
    c13c:	fb04 3010 	mls	r0, r4, r0, r3
    c140:	fbb3 f3f4 	udiv	r3, r3, r4
    c144:	1e52      	subs	r2, r2, #1
    c146:	b2d2      	uxtb	r2, r2
    c148:	3030      	adds	r0, #48	; 0x30
    c14a:	54b0      	strb	r0, [r6, r2]
    c14c:	2a00      	cmp	r2, #0
    c14e:	d1f3      	bne.n	c138 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    c150:	4630      	mov	r0, r6
    c152:	47a8      	blx	r5
    c154:	f7ff ffa0 	bl	c098 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c158:	20000334 	.word	0x20000334

0000c15c <mpsl_init>:
    c15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c160:	4c18      	ldr	r4, [pc, #96]	; (c1c4 <mpsl_init+0x68>)
    c162:	4606      	mov	r6, r0
    c164:	4617      	mov	r7, r2
    c166:	7860      	ldrb	r0, [r4, #1]
    c168:	460d      	mov	r5, r1
    c16a:	b118      	cbz	r0, c174 <mpsl_init+0x18>
    c16c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c174:	f7fc fb62 	bl	883c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    c178:	b906      	cbnz	r6, c17c <mpsl_init+0x20>
    c17a:	4e13      	ldr	r6, [pc, #76]	; (c1c8 <mpsl_init+0x6c>)
    c17c:	6067      	str	r7, [r4, #4]
    c17e:	7025      	strb	r5, [r4, #0]
    c180:	f7ff ffa6 	bl	c0d0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    c184:	f7ff ffb4 	bl	c0f0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    c188:	4630      	mov	r0, r6
    c18a:	f7ff fe65 	bl	be58 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    c18e:	0006      	movs	r6, r0
    c190:	d1ee      	bne.n	c170 <mpsl_init+0x14>
    c192:	f7fe fe29 	bl	ade8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    c196:	f7ff fedd 	bl	bf54 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    c19a:	f004 f9da 	bl	10552 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    c19e:	4628      	mov	r0, r5
    c1a0:	f004 fa63 	bl	1066a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c1a4:	2001      	movs	r0, #1
    c1a6:	2d00      	cmp	r5, #0
    c1a8:	db09      	blt.n	c1be <mpsl_init+0x62>
    c1aa:	f005 011f 	and.w	r1, r5, #31
    c1ae:	fa00 f101 	lsl.w	r1, r0, r1
    c1b2:	096a      	lsrs	r2, r5, #5
    c1b4:	0092      	lsls	r2, r2, #2
    c1b6:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    c1ba:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    c1be:	7060      	strb	r0, [r4, #1]
    c1c0:	4630      	mov	r0, r6
    c1c2:	e7d5      	b.n	c170 <mpsl_init+0x14>
    c1c4:	20000334 	.word	0x20000334
    c1c8:	000106a6 	.word	0x000106a6

0000c1cc <mpsl_is_initialized>:
    c1cc:	4801      	ldr	r0, [pc, #4]	; (c1d4 <mpsl_is_initialized+0x8>)
    c1ce:	7840      	ldrb	r0, [r0, #1]
    c1d0:	4770      	bx	lr
    c1d2:	0000      	.short	0x0000
    c1d4:	20000334 	.word	0x20000334

0000c1d8 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    c1d8:	4807      	ldr	r0, [pc, #28]	; (c1f8 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    c1da:	f990 0000 	ldrsb.w	r0, [r0]
    c1de:	2800      	cmp	r0, #0
    c1e0:	db09      	blt.n	c1f6 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    c1e2:	f000 021f 	and.w	r2, r0, #31
    c1e6:	2101      	movs	r1, #1
    c1e8:	4091      	lsls	r1, r2
    c1ea:	0940      	lsrs	r0, r0, #5
    c1ec:	0080      	lsls	r0, r0, #2
    c1ee:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c1f2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c1f6:	4770      	bx	lr
    c1f8:	20000334 	.word	0x20000334

0000c1fc <mpsl_temperature_get>:
    c1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c200:	2501      	movs	r5, #1
    c202:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c206:	0329      	lsls	r1, r5, #12
    c208:	f04f 0800 	mov.w	r8, #0
    c20c:	4640      	mov	r0, r8
    c20e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    c212:	f3bf 8f4f 	dsb	sy
    c216:	f3bf 8f6f 	isb	sy
    c21a:	4c16      	ldr	r4, [pc, #88]	; (c274 <mpsl_temperature_get+0x78>)
    c21c:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    c220:	200c      	movs	r0, #12
    c222:	f004 fa4e 	bl	106c2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c226:	4e14      	ldr	r6, [pc, #80]	; (c278 <mpsl_temperature_get+0x7c>)
    c228:	6830      	ldr	r0, [r6, #0]
    c22a:	43c0      	mvns	r0, r0
    c22c:	f340 1700 	sbfx	r7, r0, #4, #1
    c230:	6830      	ldr	r0, [r6, #0]
    c232:	f040 0010 	orr.w	r0, r0, #16
    c236:	6030      	str	r0, [r6, #0]
    c238:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    c23c:	6025      	str	r5, [r4, #0]
    c23e:	1c7f      	adds	r7, r7, #1
    c240:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    c244:	b108      	cbz	r0, c24a <mpsl_temperature_get+0x4e>
    c246:	b11f      	cbz	r7, c250 <mpsl_temperature_get+0x54>
    c248:	e006      	b.n	c258 <mpsl_temperature_get+0x5c>
    c24a:	f004 fade 	bl	1080a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c24e:	e7f7      	b.n	c240 <mpsl_temperature_get+0x44>
    c250:	6830      	ldr	r0, [r6, #0]
    c252:	f020 0010 	bic.w	r0, r0, #16
    c256:	6030      	str	r0, [r6, #0]
    c258:	f8d4 6508 	ldr.w	r6, [r4, #1288]	; 0x508
    c25c:	6065      	str	r5, [r4, #4]
    c25e:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
    c262:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    c266:	200c      	movs	r0, #12
    c268:	f004 fa2b 	bl	106c2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c26c:	4630      	mov	r0, r6
    c26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c272:	0000      	.short	0x0000
    c274:	4000c000 	.word	0x4000c000
    c278:	e000ed10 	.word	0xe000ed10

0000c27c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    c27c:	b510      	push	{r4, lr}
    c27e:	4602      	mov	r2, r0
    c280:	2005      	movs	r0, #5
    c282:	490c      	ldr	r1, [pc, #48]	; (c2b4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    c284:	e004      	b.n	c290 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    c286:	bf00      	nop
    c288:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    c28c:	791b      	ldrb	r3, [r3, #4]
    c28e:	b133      	cbz	r3, c29e <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    c290:	1e40      	subs	r0, r0, #1
    c292:	b2c0      	uxtb	r0, r0
    c294:	d2f8      	bcs.n	c288 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    c296:	2148      	movs	r1, #72	; 0x48
    c298:	2069      	movs	r0, #105	; 0x69
    c29a:	f7ff ff3b 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c29e:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    c2a2:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    c2a6:	2200      	movs	r2, #0
    c2a8:	714a      	strb	r2, [r1, #5]
    c2aa:	718a      	strb	r2, [r1, #6]
    c2ac:	2201      	movs	r2, #1
    c2ae:	710a      	strb	r2, [r1, #4]
    c2b0:	bd10      	pop	{r4, pc}
    c2b2:	0000      	.short	0x0000
    c2b4:	20001248 	.word	0x20001248

0000c2b8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    c2b8:	b510      	push	{r4, lr}
    c2ba:	2805      	cmp	r0, #5
    c2bc:	d301      	bcc.n	c2c2 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    c2be:	2158      	movs	r1, #88	; 0x58
    c2c0:	e006      	b.n	c2d0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    c2c2:	490a      	ldr	r1, [pc, #40]	; (c2ec <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    c2c4:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    c2c8:	7901      	ldrb	r1, [r0, #4]
    c2ca:	2901      	cmp	r1, #1
    c2cc:	d003      	beq.n	c2d6 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    c2ce:	2159      	movs	r1, #89	; 0x59
    c2d0:	2069      	movs	r0, #105	; 0x69
    c2d2:	f7ff ff1f 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c2d6:	7941      	ldrb	r1, [r0, #5]
    c2d8:	7982      	ldrb	r2, [r0, #6]
    c2da:	1c49      	adds	r1, r1, #1
    c2dc:	b2c9      	uxtb	r1, r1
    c2de:	428a      	cmp	r2, r1
    c2e0:	d000      	beq.n	c2e4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    c2e2:	7141      	strb	r1, [r0, #5]
    c2e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c2e8:	f7ff bf76 	b.w	c1d8 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    c2ec:	20001248 	.word	0x20001248

0000c2f0 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    c2f0:	b510      	push	{r4, lr}
    c2f2:	2805      	cmp	r0, #5
    c2f4:	d303      	bcc.n	c2fe <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    c2f6:	214f      	movs	r1, #79	; 0x4f
    c2f8:	2069      	movs	r0, #105	; 0x69
    c2fa:	f7ff ff0b 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c2fe:	4a03      	ldr	r2, [pc, #12]	; (c30c <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    c300:	2100      	movs	r1, #0
    c302:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    c306:	7101      	strb	r1, [r0, #4]
    c308:	bd10      	pop	{r4, pc}
    c30a:	0000      	.short	0x0000
    c30c:	20001248 	.word	0x20001248

0000c310 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    c310:	b570      	push	{r4, r5, r6, lr}
    c312:	2505      	movs	r5, #5
    c314:	4e0e      	ldr	r6, [pc, #56]	; (c350 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    c316:	4c0f      	ldr	r4, [pc, #60]	; (c354 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    c318:	e016      	b.n	c348 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c31a:	7821      	ldrb	r1, [r4, #0]
    c31c:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    c320:	7902      	ldrb	r2, [r0, #4]
    c322:	2a01      	cmp	r2, #1
    c324:	d108      	bne.n	c338 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c326:	7942      	ldrb	r2, [r0, #5]
    c328:	7983      	ldrb	r3, [r0, #6]
    c32a:	429a      	cmp	r2, r3
    c32c:	d004      	beq.n	c338 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c32e:	7942      	ldrb	r2, [r0, #5]
    c330:	7182      	strb	r2, [r0, #6]
    c332:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    c336:	4780      	blx	r0
    c338:	7820      	ldrb	r0, [r4, #0]
    c33a:	1c40      	adds	r0, r0, #1
    c33c:	b2c0      	uxtb	r0, r0
    c33e:	7020      	strb	r0, [r4, #0]
    c340:	2805      	cmp	r0, #5
    c342:	d301      	bcc.n	c348 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c344:	2000      	movs	r0, #0
    c346:	7020      	strb	r0, [r4, #0]
    c348:	1e6d      	subs	r5, r5, #1
    c34a:	b2ed      	uxtb	r5, r5
    c34c:	d2e5      	bcs.n	c31a <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    c34e:	bd70      	pop	{r4, r5, r6, pc}
    c350:	20001248 	.word	0x20001248
    c354:	20000386 	.word	0x20000386

0000c358 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    c358:	b500      	push	{lr}
    c35a:	f004 f9e1 	bl	10720 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c35e:	b940      	cbnz	r0, c372 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c360:	f004 f9e8 	bl	10734 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c364:	b928      	cbnz	r0, c372 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c366:	f004 f9fc 	bl	10762 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c36a:	b910      	cbnz	r0, c372 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c36c:	f004 fa0d 	bl	1078a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c370:	b108      	cbz	r0, c376 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    c372:	4802      	ldr	r0, [pc, #8]	; (c37c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    c374:	bd00      	pop	{pc}
    c376:	4802      	ldr	r0, [pc, #8]	; (c380 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    c378:	bd00      	pop	{pc}
    c37a:	0000      	.short	0x0000
    c37c:	4000050c 	.word	0x4000050c
    c380:	4001e700 	.word	0x4001e700
    c384:	b510      	push	{r4, lr}
    c386:	f004 fa00 	bl	1078a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c38a:	b330      	cbz	r0, c3da <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    c38c:	f3ef 8010 	mrs	r0, PRIMASK
    c390:	b1c8      	cbz	r0, c3c6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    c392:	2100      	movs	r1, #0
    c394:	b672      	cpsid	i
    c396:	4812      	ldr	r0, [pc, #72]	; (c3e0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    c398:	6802      	ldr	r2, [r0, #0]
    c39a:	6803      	ldr	r3, [r0, #0]
    c39c:	f3c2 1200 	ubfx	r2, r2, #4, #1
    c3a0:	f043 0310 	orr.w	r3, r3, #16
    c3a4:	6003      	str	r3, [r0, #0]
    c3a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c3aa:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c3ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    c3b2:	431c      	orrs	r4, r3
    c3b4:	d000      	beq.n	c3b8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    c3b6:	bf40      	sev
    c3b8:	bf20      	wfe
    c3ba:	bf00      	nop
    c3bc:	bf00      	nop
    c3be:	bf00      	nop
    c3c0:	bf00      	nop
    c3c2:	b112      	cbz	r2, c3ca <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    c3c4:	e005      	b.n	c3d2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    c3c6:	2101      	movs	r1, #1
    c3c8:	e7e4      	b.n	c394 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    c3ca:	6802      	ldr	r2, [r0, #0]
    c3cc:	f022 0210 	bic.w	r2, r2, #16
    c3d0:	6002      	str	r2, [r0, #0]
    c3d2:	2900      	cmp	r1, #0
    c3d4:	d000      	beq.n	c3d8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    c3d6:	b662      	cpsie	i
    c3d8:	bd10      	pop	{r4, pc}
    c3da:	bf20      	wfe
    c3dc:	bd10      	pop	{r4, pc}
    c3de:	0000      	.short	0x0000
    c3e0:	e000ed10 	.word	0xe000ed10

0000c3e4 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    c3e4:	4901      	ldr	r1, [pc, #4]	; (c3ec <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    c3e6:	2001      	movs	r0, #1
    c3e8:	7088      	strb	r0, [r1, #2]
    c3ea:	4770      	bx	lr
    c3ec:	2000033c 	.word	0x2000033c

0000c3f0 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    c3f0:	00010a8b 00010ac3 00010aad 00010a9b     ................
    c400:	00010aa7 00010a95 00010a89 00010a87     ................
    c410:	00010abf 00010ab3 00010aa1 00010a8f     ................
    c420:	00010a81 00010a79 00010a7d 00010a73     ....y...}...s...

0000c430 <mpsl_fem_disable>:
    c430:	4801      	ldr	r0, [pc, #4]	; (c438 <mpsl_fem_disable+0x8>)
    c432:	6800      	ldr	r0, [r0, #0]
    c434:	6800      	ldr	r0, [r0, #0]
    c436:	4700      	bx	r0
    c438:	20000350 	.word	0x20000350

0000c43c <mpsl_fem_lna_configuration_clear>:
    c43c:	4801      	ldr	r0, [pc, #4]	; (c444 <mpsl_fem_lna_configuration_clear+0x8>)
    c43e:	6800      	ldr	r0, [r0, #0]
    c440:	6940      	ldr	r0, [r0, #20]
    c442:	4700      	bx	r0
    c444:	20000350 	.word	0x20000350

0000c448 <mpsl_fem_lna_configuration_set>:
    c448:	4a01      	ldr	r2, [pc, #4]	; (c450 <mpsl_fem_lna_configuration_set+0x8>)
    c44a:	6812      	ldr	r2, [r2, #0]
    c44c:	68d2      	ldr	r2, [r2, #12]
    c44e:	4710      	bx	r2
    c450:	20000350 	.word	0x20000350

0000c454 <mpsl_fem_lna_is_configured>:
    c454:	4901      	ldr	r1, [pc, #4]	; (c45c <mpsl_fem_lna_is_configured+0x8>)
    c456:	6809      	ldr	r1, [r1, #0]
    c458:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    c45a:	4708      	bx	r1
    c45c:	20000350 	.word	0x20000350

0000c460 <mpsl_fem_pa_configuration_clear>:
    c460:	4801      	ldr	r0, [pc, #4]	; (c468 <mpsl_fem_pa_configuration_clear+0x8>)
    c462:	6800      	ldr	r0, [r0, #0]
    c464:	6900      	ldr	r0, [r0, #16]
    c466:	4700      	bx	r0
    c468:	20000350 	.word	0x20000350

0000c46c <mpsl_fem_pa_configuration_set>:
    c46c:	4a01      	ldr	r2, [pc, #4]	; (c474 <mpsl_fem_pa_configuration_set+0x8>)
    c46e:	6812      	ldr	r2, [r2, #0]
    c470:	6892      	ldr	r2, [r2, #8]
    c472:	4710      	bx	r2
    c474:	20000350 	.word	0x20000350

0000c478 <mpsl_fem_pa_gain_set>:
    c478:	4901      	ldr	r1, [pc, #4]	; (c480 <mpsl_fem_pa_gain_set+0x8>)
    c47a:	6809      	ldr	r1, [r1, #0]
    c47c:	6a49      	ldr	r1, [r1, #36]	; 0x24
    c47e:	4708      	bx	r1
    c480:	20000350 	.word	0x20000350

0000c484 <mpsl_fem_pa_is_configured>:
    c484:	4901      	ldr	r1, [pc, #4]	; (c48c <mpsl_fem_pa_is_configured+0x8>)
    c486:	6809      	ldr	r1, [r1, #0]
    c488:	6a89      	ldr	r1, [r1, #40]	; 0x28
    c48a:	4708      	bx	r1
    c48c:	20000350 	.word	0x20000350

0000c490 <mpsl_fem_tx_power_split>:
    c490:	b430      	push	{r4, r5}
    c492:	4c03      	ldr	r4, [pc, #12]	; (c4a0 <mpsl_fem_tx_power_split+0x10>)
    c494:	6824      	ldr	r4, [r4, #0]
    c496:	6864      	ldr	r4, [r4, #4]
    c498:	46a4      	mov	ip, r4
    c49a:	bc30      	pop	{r4, r5}
    c49c:	4760      	bx	ip
    c49e:	0000      	.short	0x0000
    c4a0:	20000350 	.word	0x20000350

0000c4a4 <mpsl_fem_device_config_254_apply_get>:
    c4a4:	4801      	ldr	r0, [pc, #4]	; (c4ac <mpsl_fem_device_config_254_apply_get+0x8>)
    c4a6:	7800      	ldrb	r0, [r0, #0]
    c4a8:	4770      	bx	lr
    c4aa:	0000      	.short	0x0000
    c4ac:	20000387 	.word	0x20000387

0000c4b0 <__udivmoddi4>:
    c4b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c4b4:	4686      	mov	lr, r0
    c4b6:	468c      	mov	ip, r1
    c4b8:	4608      	mov	r0, r1
    c4ba:	9e08      	ldr	r6, [sp, #32]
    c4bc:	4615      	mov	r5, r2
    c4be:	4674      	mov	r4, lr
    c4c0:	4619      	mov	r1, r3
    c4c2:	2b00      	cmp	r3, #0
    c4c4:	f040 80c2 	bne.w	c64c <__udivmoddi4+0x19c>
    c4c8:	4285      	cmp	r5, r0
    c4ca:	fab2 f282 	clz	r2, r2
    c4ce:	d945      	bls.n	c55c <__udivmoddi4+0xac>
    c4d0:	b14a      	cbz	r2, c4e6 <__udivmoddi4+0x36>
    c4d2:	f1c2 0320 	rsb	r3, r2, #32
    c4d6:	fa00 fc02 	lsl.w	ip, r0, r2
    c4da:	fa2e f303 	lsr.w	r3, lr, r3
    c4de:	4095      	lsls	r5, r2
    c4e0:	ea43 0c0c 	orr.w	ip, r3, ip
    c4e4:	4094      	lsls	r4, r2
    c4e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c4ea:	b2a8      	uxth	r0, r5
    c4ec:	fbbc f8fe 	udiv	r8, ip, lr
    c4f0:	0c23      	lsrs	r3, r4, #16
    c4f2:	fb0e cc18 	mls	ip, lr, r8, ip
    c4f6:	fb08 f900 	mul.w	r9, r8, r0
    c4fa:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    c4fe:	4599      	cmp	r9, r3
    c500:	d928      	bls.n	c554 <__udivmoddi4+0xa4>
    c502:	18eb      	adds	r3, r5, r3
    c504:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
    c508:	d204      	bcs.n	c514 <__udivmoddi4+0x64>
    c50a:	4599      	cmp	r9, r3
    c50c:	d902      	bls.n	c514 <__udivmoddi4+0x64>
    c50e:	f1a8 0702 	sub.w	r7, r8, #2
    c512:	442b      	add	r3, r5
    c514:	eba3 0309 	sub.w	r3, r3, r9
    c518:	b2a4      	uxth	r4, r4
    c51a:	fbb3 fcfe 	udiv	ip, r3, lr
    c51e:	fb0e 331c 	mls	r3, lr, ip, r3
    c522:	fb0c f000 	mul.w	r0, ip, r0
    c526:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c52a:	42a0      	cmp	r0, r4
    c52c:	d914      	bls.n	c558 <__udivmoddi4+0xa8>
    c52e:	192c      	adds	r4, r5, r4
    c530:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    c534:	d204      	bcs.n	c540 <__udivmoddi4+0x90>
    c536:	42a0      	cmp	r0, r4
    c538:	d902      	bls.n	c540 <__udivmoddi4+0x90>
    c53a:	f1ac 0302 	sub.w	r3, ip, #2
    c53e:	442c      	add	r4, r5
    c540:	1a24      	subs	r4, r4, r0
    c542:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    c546:	b11e      	cbz	r6, c550 <__udivmoddi4+0xa0>
    c548:	40d4      	lsrs	r4, r2
    c54a:	2300      	movs	r3, #0
    c54c:	6034      	str	r4, [r6, #0]
    c54e:	6073      	str	r3, [r6, #4]
    c550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c554:	4647      	mov	r7, r8
    c556:	e7dd      	b.n	c514 <__udivmoddi4+0x64>
    c558:	4663      	mov	r3, ip
    c55a:	e7f1      	b.n	c540 <__udivmoddi4+0x90>
    c55c:	bb92      	cbnz	r2, c5c4 <__udivmoddi4+0x114>
    c55e:	1b43      	subs	r3, r0, r5
    c560:	2101      	movs	r1, #1
    c562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c566:	b2af      	uxth	r7, r5
    c568:	fbb3 fcfe 	udiv	ip, r3, lr
    c56c:	0c20      	lsrs	r0, r4, #16
    c56e:	fb0e 331c 	mls	r3, lr, ip, r3
    c572:	fb0c f807 	mul.w	r8, ip, r7
    c576:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    c57a:	4598      	cmp	r8, r3
    c57c:	d962      	bls.n	c644 <__udivmoddi4+0x194>
    c57e:	18eb      	adds	r3, r5, r3
    c580:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    c584:	d204      	bcs.n	c590 <__udivmoddi4+0xe0>
    c586:	4598      	cmp	r8, r3
    c588:	d902      	bls.n	c590 <__udivmoddi4+0xe0>
    c58a:	f1ac 0002 	sub.w	r0, ip, #2
    c58e:	442b      	add	r3, r5
    c590:	eba3 0308 	sub.w	r3, r3, r8
    c594:	b2a4      	uxth	r4, r4
    c596:	fbb3 fcfe 	udiv	ip, r3, lr
    c59a:	fb0e 331c 	mls	r3, lr, ip, r3
    c59e:	fb0c f707 	mul.w	r7, ip, r7
    c5a2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c5a6:	42a7      	cmp	r7, r4
    c5a8:	d94e      	bls.n	c648 <__udivmoddi4+0x198>
    c5aa:	192c      	adds	r4, r5, r4
    c5ac:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    c5b0:	d204      	bcs.n	c5bc <__udivmoddi4+0x10c>
    c5b2:	42a7      	cmp	r7, r4
    c5b4:	d902      	bls.n	c5bc <__udivmoddi4+0x10c>
    c5b6:	f1ac 0302 	sub.w	r3, ip, #2
    c5ba:	442c      	add	r4, r5
    c5bc:	1be4      	subs	r4, r4, r7
    c5be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c5c2:	e7c0      	b.n	c546 <__udivmoddi4+0x96>
    c5c4:	f1c2 0320 	rsb	r3, r2, #32
    c5c8:	fa20 f103 	lsr.w	r1, r0, r3
    c5cc:	4095      	lsls	r5, r2
    c5ce:	4090      	lsls	r0, r2
    c5d0:	fa2e f303 	lsr.w	r3, lr, r3
    c5d4:	4303      	orrs	r3, r0
    c5d6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c5da:	b2af      	uxth	r7, r5
    c5dc:	fbb1 fcfe 	udiv	ip, r1, lr
    c5e0:	fb0e 101c 	mls	r0, lr, ip, r1
    c5e4:	0c19      	lsrs	r1, r3, #16
    c5e6:	fb0c f807 	mul.w	r8, ip, r7
    c5ea:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c5ee:	4588      	cmp	r8, r1
    c5f0:	fa04 f402 	lsl.w	r4, r4, r2
    c5f4:	d922      	bls.n	c63c <__udivmoddi4+0x18c>
    c5f6:	1869      	adds	r1, r5, r1
    c5f8:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    c5fc:	d204      	bcs.n	c608 <__udivmoddi4+0x158>
    c5fe:	4588      	cmp	r8, r1
    c600:	d902      	bls.n	c608 <__udivmoddi4+0x158>
    c602:	f1ac 0002 	sub.w	r0, ip, #2
    c606:	4429      	add	r1, r5
    c608:	eba1 0108 	sub.w	r1, r1, r8
    c60c:	b29b      	uxth	r3, r3
    c60e:	fbb1 fcfe 	udiv	ip, r1, lr
    c612:	fb0e 111c 	mls	r1, lr, ip, r1
    c616:	fb0c f707 	mul.w	r7, ip, r7
    c61a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c61e:	429f      	cmp	r7, r3
    c620:	d90e      	bls.n	c640 <__udivmoddi4+0x190>
    c622:	18eb      	adds	r3, r5, r3
    c624:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    c628:	d204      	bcs.n	c634 <__udivmoddi4+0x184>
    c62a:	429f      	cmp	r7, r3
    c62c:	d902      	bls.n	c634 <__udivmoddi4+0x184>
    c62e:	f1ac 0102 	sub.w	r1, ip, #2
    c632:	442b      	add	r3, r5
    c634:	1bdb      	subs	r3, r3, r7
    c636:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c63a:	e792      	b.n	c562 <__udivmoddi4+0xb2>
    c63c:	4660      	mov	r0, ip
    c63e:	e7e3      	b.n	c608 <__udivmoddi4+0x158>
    c640:	4661      	mov	r1, ip
    c642:	e7f7      	b.n	c634 <__udivmoddi4+0x184>
    c644:	4660      	mov	r0, ip
    c646:	e7a3      	b.n	c590 <__udivmoddi4+0xe0>
    c648:	4663      	mov	r3, ip
    c64a:	e7b7      	b.n	c5bc <__udivmoddi4+0x10c>
    c64c:	4283      	cmp	r3, r0
    c64e:	d906      	bls.n	c65e <__udivmoddi4+0x1ae>
    c650:	b916      	cbnz	r6, c658 <__udivmoddi4+0x1a8>
    c652:	2100      	movs	r1, #0
    c654:	4608      	mov	r0, r1
    c656:	e77b      	b.n	c550 <__udivmoddi4+0xa0>
    c658:	e9c6 e000 	strd	lr, r0, [r6]
    c65c:	e7f9      	b.n	c652 <__udivmoddi4+0x1a2>
    c65e:	fab3 f783 	clz	r7, r3
    c662:	b98f      	cbnz	r7, c688 <__udivmoddi4+0x1d8>
    c664:	4283      	cmp	r3, r0
    c666:	d301      	bcc.n	c66c <__udivmoddi4+0x1bc>
    c668:	4572      	cmp	r2, lr
    c66a:	d808      	bhi.n	c67e <__udivmoddi4+0x1ce>
    c66c:	ebbe 0402 	subs.w	r4, lr, r2
    c670:	eb60 0303 	sbc.w	r3, r0, r3
    c674:	2001      	movs	r0, #1
    c676:	469c      	mov	ip, r3
    c678:	b91e      	cbnz	r6, c682 <__udivmoddi4+0x1d2>
    c67a:	2100      	movs	r1, #0
    c67c:	e768      	b.n	c550 <__udivmoddi4+0xa0>
    c67e:	4638      	mov	r0, r7
    c680:	e7fa      	b.n	c678 <__udivmoddi4+0x1c8>
    c682:	e9c6 4c00 	strd	r4, ip, [r6]
    c686:	e7f8      	b.n	c67a <__udivmoddi4+0x1ca>
    c688:	f1c7 0c20 	rsb	ip, r7, #32
    c68c:	40bb      	lsls	r3, r7
    c68e:	fa22 f40c 	lsr.w	r4, r2, ip
    c692:	431c      	orrs	r4, r3
    c694:	fa2e f10c 	lsr.w	r1, lr, ip
    c698:	fa20 f30c 	lsr.w	r3, r0, ip
    c69c:	40b8      	lsls	r0, r7
    c69e:	4301      	orrs	r1, r0
    c6a0:	ea4f 4914 	mov.w	r9, r4, lsr #16
    c6a4:	fa0e f507 	lsl.w	r5, lr, r7
    c6a8:	fbb3 f8f9 	udiv	r8, r3, r9
    c6ac:	fa1f fe84 	uxth.w	lr, r4
    c6b0:	fb09 3018 	mls	r0, r9, r8, r3
    c6b4:	0c0b      	lsrs	r3, r1, #16
    c6b6:	fb08 fa0e 	mul.w	sl, r8, lr
    c6ba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    c6be:	459a      	cmp	sl, r3
    c6c0:	fa02 f207 	lsl.w	r2, r2, r7
    c6c4:	d940      	bls.n	c748 <__udivmoddi4+0x298>
    c6c6:	18e3      	adds	r3, r4, r3
    c6c8:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    c6cc:	d204      	bcs.n	c6d8 <__udivmoddi4+0x228>
    c6ce:	459a      	cmp	sl, r3
    c6d0:	d902      	bls.n	c6d8 <__udivmoddi4+0x228>
    c6d2:	f1a8 0002 	sub.w	r0, r8, #2
    c6d6:	4423      	add	r3, r4
    c6d8:	eba3 030a 	sub.w	r3, r3, sl
    c6dc:	b289      	uxth	r1, r1
    c6de:	fbb3 f8f9 	udiv	r8, r3, r9
    c6e2:	fb09 3318 	mls	r3, r9, r8, r3
    c6e6:	fb08 fe0e 	mul.w	lr, r8, lr
    c6ea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c6ee:	458e      	cmp	lr, r1
    c6f0:	d92c      	bls.n	c74c <__udivmoddi4+0x29c>
    c6f2:	1861      	adds	r1, r4, r1
    c6f4:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    c6f8:	d204      	bcs.n	c704 <__udivmoddi4+0x254>
    c6fa:	458e      	cmp	lr, r1
    c6fc:	d902      	bls.n	c704 <__udivmoddi4+0x254>
    c6fe:	f1a8 0302 	sub.w	r3, r8, #2
    c702:	4421      	add	r1, r4
    c704:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c708:	fba0 9802 	umull	r9, r8, r0, r2
    c70c:	eba1 010e 	sub.w	r1, r1, lr
    c710:	4541      	cmp	r1, r8
    c712:	46ce      	mov	lr, r9
    c714:	4643      	mov	r3, r8
    c716:	d302      	bcc.n	c71e <__udivmoddi4+0x26e>
    c718:	d106      	bne.n	c728 <__udivmoddi4+0x278>
    c71a:	454d      	cmp	r5, r9
    c71c:	d204      	bcs.n	c728 <__udivmoddi4+0x278>
    c71e:	ebb9 0e02 	subs.w	lr, r9, r2
    c722:	eb68 0304 	sbc.w	r3, r8, r4
    c726:	3801      	subs	r0, #1
    c728:	2e00      	cmp	r6, #0
    c72a:	d0a6      	beq.n	c67a <__udivmoddi4+0x1ca>
    c72c:	ebb5 020e 	subs.w	r2, r5, lr
    c730:	eb61 0103 	sbc.w	r1, r1, r3
    c734:	fa01 fc0c 	lsl.w	ip, r1, ip
    c738:	fa22 f307 	lsr.w	r3, r2, r7
    c73c:	ea4c 0303 	orr.w	r3, ip, r3
    c740:	40f9      	lsrs	r1, r7
    c742:	e9c6 3100 	strd	r3, r1, [r6]
    c746:	e798      	b.n	c67a <__udivmoddi4+0x1ca>
    c748:	4640      	mov	r0, r8
    c74a:	e7c5      	b.n	c6d8 <__udivmoddi4+0x228>
    c74c:	4643      	mov	r3, r8
    c74e:	e7d9      	b.n	c704 <__udivmoddi4+0x254>
    c750:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    c754:	4681      	mov	r9, r0
    c756:	f100 0007 	add.w	r0, r0, #7
    c75a:	f020 0007 	bic.w	r0, r0, #7
    c75e:	ea5f 0802 	movs.w	r8, r2
    c762:	9000      	str	r0, [sp, #0]
    c764:	784a      	ldrb	r2, [r1, #1]
    c766:	f88d 2004 	strb.w	r2, [sp, #4]
    c76a:	788a      	ldrb	r2, [r1, #2]
    c76c:	460c      	mov	r4, r1
    c76e:	f88d 2005 	strb.w	r2, [sp, #5]
    c772:	d000      	beq.n	c776 <__udivmoddi4+0x2c6>
    c774:	2000      	movs	r0, #0
    c776:	a901      	add	r1, sp, #4
    c778:	f7f4 fc5c 	bl	1034 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    c77c:	9900      	ldr	r1, [sp, #0]
    c77e:	2600      	movs	r6, #0
    c780:	4408      	add	r0, r1
    c782:	9000      	str	r0, [sp, #0]
    c784:	7820      	ldrb	r0, [r4, #0]
    c786:	7861      	ldrb	r1, [r4, #1]
    c788:	4635      	mov	r5, r6
    c78a:	4408      	add	r0, r1
    c78c:	b2c7      	uxtb	r7, r0
    c78e:	e008      	b.n	c7a2 <__udivmoddi4+0x2f2>
    c790:	7a23      	ldrb	r3, [r4, #8]
    c792:	79e2      	ldrb	r2, [r4, #7]
    c794:	79a1      	ldrb	r1, [r4, #6]
    c796:	7960      	ldrb	r0, [r4, #5]
    c798:	f000 fe55 	bl	d446 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    c79c:	1c6d      	adds	r5, r5, #1
    c79e:	4406      	add	r6, r0
    c7a0:	b2ed      	uxtb	r5, r5
    c7a2:	42bd      	cmp	r5, r7
    c7a4:	d3f4      	bcc.n	c790 <__udivmoddi4+0x2e0>
    c7a6:	9800      	ldr	r0, [sp, #0]
    c7a8:	1cc0      	adds	r0, r0, #3
    c7aa:	f020 0003 	bic.w	r0, r0, #3
    c7ae:	9000      	str	r0, [sp, #0]
    c7b0:	f1b8 0f00 	cmp.w	r8, #0
    c7b4:	d000      	beq.n	c7b8 <__udivmoddi4+0x308>
    c7b6:	2000      	movs	r0, #0
    c7b8:	4632      	mov	r2, r6
    c7ba:	4639      	mov	r1, r7
    c7bc:	f7f4 fd74 	bl	12a8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    c7c0:	9900      	ldr	r1, [sp, #0]
    c7c2:	4642      	mov	r2, r8
    c7c4:	4408      	add	r0, r1
    c7c6:	9000      	str	r0, [sp, #0]
    c7c8:	4621      	mov	r1, r4
    c7ca:	4668      	mov	r0, sp
    c7cc:	f000 f805 	bl	c7da <__udivmoddi4+0x32a>
    c7d0:	9900      	ldr	r1, [sp, #0]
    c7d2:	eba1 0009 	sub.w	r0, r1, r9
    c7d6:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    c7da:	b570      	push	{r4, r5, r6, lr}
    c7dc:	4605      	mov	r5, r0
    c7de:	7888      	ldrb	r0, [r1, #2]
    c7e0:	4616      	mov	r6, r2
    c7e2:	460c      	mov	r4, r1
    c7e4:	b188      	cbz	r0, c80a <__udivmoddi4+0x35a>
    c7e6:	6828      	ldr	r0, [r5, #0]
    c7e8:	1cc0      	adds	r0, r0, #3
    c7ea:	f020 0003 	bic.w	r0, r0, #3
    c7ee:	6028      	str	r0, [r5, #0]
    c7f0:	7de1      	ldrb	r1, [r4, #23]
    c7f2:	78e2      	ldrb	r2, [r4, #3]
    c7f4:	8a63      	ldrh	r3, [r4, #18]
    c7f6:	4411      	add	r1, r2
    c7f8:	b2ca      	uxtb	r2, r1
    c7fa:	78a1      	ldrb	r1, [r4, #2]
    c7fc:	b106      	cbz	r6, c800 <__udivmoddi4+0x350>
    c7fe:	2000      	movs	r0, #0
    c800:	f7f4 fe06 	bl	1410 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    c804:	6829      	ldr	r1, [r5, #0]
    c806:	4408      	add	r0, r1
    c808:	6028      	str	r0, [r5, #0]
    c80a:	7d20      	ldrb	r0, [r4, #20]
    c80c:	2800      	cmp	r0, #0
    c80e:	d00f      	beq.n	c830 <__udivmoddi4+0x380>
    c810:	78a0      	ldrb	r0, [r4, #2]
    c812:	2800      	cmp	r0, #0
    c814:	d00c      	beq.n	c830 <__udivmoddi4+0x380>
    c816:	6828      	ldr	r0, [r5, #0]
    c818:	1dc0      	adds	r0, r0, #7
    c81a:	f020 0007 	bic.w	r0, r0, #7
    c81e:	6028      	str	r0, [r5, #0]
    c820:	7d21      	ldrb	r1, [r4, #20]
    c822:	b106      	cbz	r6, c826 <__udivmoddi4+0x376>
    c824:	2000      	movs	r0, #0
    c826:	f7f6 fdfb 	bl	3420 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>
    c82a:	6829      	ldr	r1, [r5, #0]
    c82c:	4408      	add	r0, r1
    c82e:	6028      	str	r0, [r5, #0]
    c830:	bd70      	pop	{r4, r5, r6, pc}

0000c832 <sdc_soc_ecb_block_encrypt>:
    c832:	b530      	push	{r4, r5, lr}
    c834:	460d      	mov	r5, r1
    c836:	b08d      	sub	sp, #52	; 0x34
    c838:	4614      	mov	r4, r2
    c83a:	4601      	mov	r1, r0
    c83c:	2210      	movs	r2, #16
    c83e:	4668      	mov	r0, sp
    c840:	f004 f83d 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c844:	2210      	movs	r2, #16
    c846:	4629      	mov	r1, r5
    c848:	a804      	add	r0, sp, #16
    c84a:	f004 f838 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c84e:	4668      	mov	r0, sp
    c850:	f000 ff7e 	bl	d750 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    c854:	b118      	cbz	r0, c85e <sdc_soc_ecb_block_encrypt+0x2c>
    c856:	f06f 0015 	mvn.w	r0, #21
    c85a:	b00d      	add	sp, #52	; 0x34
    c85c:	bd30      	pop	{r4, r5, pc}
    c85e:	2210      	movs	r2, #16
    c860:	4620      	mov	r0, r4
    c862:	a908      	add	r1, sp, #32
    c864:	f004 f82b 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c868:	2000      	movs	r0, #0
    c86a:	e7f6      	b.n	c85a <sdc_soc_ecb_block_encrypt+0x28>

0000c86c <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c86c:	b50e      	push	{r1, r2, r3, lr}
    c86e:	4601      	mov	r1, r0
    c870:	4668      	mov	r0, sp
    c872:	f000 f818 	bl	c8a6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c876:	4668      	mov	r0, sp
    c878:	f001 fbee 	bl	e058 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c87c:	bd0e      	pop	{r1, r2, r3, pc}
    c87e:	b570      	push	{r4, r5, r6, lr}
    c880:	460c      	mov	r4, r1
    c882:	4605      	mov	r5, r0
    c884:	f7f4 fa14 	bl	cb0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    c888:	2800      	cmp	r0, #0
    c88a:	d002      	beq.n	c892 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x26>
    c88c:	2d3e      	cmp	r5, #62	; 0x3e
    c88e:	d001      	beq.n	c894 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x28>
    c890:	2001      	movs	r0, #1
    c892:	bd70      	pop	{r4, r5, r6, pc}
    c894:	2c12      	cmp	r4, #18
    c896:	d004      	beq.n	c8a2 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x36>
    c898:	4620      	mov	r0, r4
    c89a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c89e:	f7f4 ba19 	b.w	cd4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c8a2:	2000      	movs	r0, #0
    c8a4:	bd70      	pop	{r4, r5, r6, pc}

0000c8a6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c8a6:	880a      	ldrh	r2, [r1, #0]
    c8a8:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c8ac:	8082      	strh	r2, [r0, #4]
    c8ae:	884a      	ldrh	r2, [r1, #2]
    c8b0:	80c2      	strh	r2, [r0, #6]
    c8b2:	784a      	ldrb	r2, [r1, #1]
    c8b4:	0993      	lsrs	r3, r2, #6
    c8b6:	2200      	movs	r2, #0
    c8b8:	7242      	strb	r2, [r0, #9]
    c8ba:	784b      	ldrb	r3, [r1, #1]
    c8bc:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c8c0:	b11b      	cbz	r3, c8ca <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c8c2:	2b01      	cmp	r3, #1
    c8c4:	d005      	beq.n	c8d2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c8c6:	2b02      	cmp	r3, #2
    c8c8:	d005      	beq.n	c8d6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c8ca:	7202      	strb	r2, [r0, #8]
    c8cc:	1d09      	adds	r1, r1, #4
    c8ce:	6001      	str	r1, [r0, #0]
    c8d0:	4770      	bx	lr
    c8d2:	2201      	movs	r2, #1
    c8d4:	e7f9      	b.n	c8ca <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c8d6:	2202      	movs	r2, #2
    c8d8:	e7f7      	b.n	c8ca <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c8da <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c8da:	b510      	push	{r4, lr}
    c8dc:	460c      	mov	r4, r1
    c8de:	7909      	ldrb	r1, [r1, #4]
    c8e0:	7001      	strb	r1, [r0, #0]
    c8e2:	7841      	ldrb	r1, [r0, #1]
    c8e4:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    c8e8:	7041      	strb	r1, [r0, #1]
    c8ea:	88a2      	ldrh	r2, [r4, #4]
    c8ec:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c8f0:	4311      	orrs	r1, r2
    c8f2:	7041      	strb	r1, [r0, #1]
    c8f4:	79a2      	ldrb	r2, [r4, #6]
    c8f6:	7082      	strb	r2, [r0, #2]
    c8f8:	88e2      	ldrh	r2, [r4, #6]
    c8fa:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    c8fe:	0a12      	lsrs	r2, r2, #8
    c900:	70c2      	strb	r2, [r0, #3]
    c902:	7041      	strb	r1, [r0, #1]
    c904:	7a22      	ldrb	r2, [r4, #8]
    c906:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    c90a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    c90e:	7041      	strb	r1, [r0, #1]
    c910:	7a62      	ldrb	r2, [r4, #9]
    c912:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    c916:	7041      	strb	r1, [r0, #1]
    c918:	6821      	ldr	r1, [r4, #0]
    c91a:	1d02      	adds	r2, r0, #4
    c91c:	4291      	cmp	r1, r2
    c91e:	d006      	beq.n	c92e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    c920:	88e2      	ldrh	r2, [r4, #6]
    c922:	2afb      	cmp	r2, #251	; 0xfb
    c924:	d300      	bcc.n	c928 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    c926:	22fb      	movs	r2, #251	; 0xfb
    c928:	1d00      	adds	r0, r0, #4
    c92a:	f003 ffc8 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c92e:	79a0      	ldrb	r0, [r4, #6]
    c930:	1d00      	adds	r0, r0, #4
    c932:	b2c0      	uxtb	r0, r0
    c934:	bd10      	pop	{r4, pc}

0000c936 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    c936:	b430      	push	{r4, r5}
    c938:	790a      	ldrb	r2, [r1, #4]
    c93a:	7002      	strb	r2, [r0, #0]
    c93c:	7842      	ldrb	r2, [r0, #1]
    c93e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    c942:	7042      	strb	r2, [r0, #1]
    c944:	888b      	ldrh	r3, [r1, #4]
    c946:	f3c3 2303 	ubfx	r3, r3, #8, #4
    c94a:	431a      	orrs	r2, r3
    c94c:	7042      	strb	r2, [r0, #1]
    c94e:	798b      	ldrb	r3, [r1, #6]
    c950:	7083      	strb	r3, [r0, #2]
    c952:	78c3      	ldrb	r3, [r0, #3]
    c954:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    c958:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c95c:	70c3      	strb	r3, [r0, #3]
    c95e:	88cc      	ldrh	r4, [r1, #6]
    c960:	f3c4 2405 	ubfx	r4, r4, #8, #6
    c964:	4323      	orrs	r3, r4
    c966:	70c3      	strb	r3, [r0, #3]
    c968:	7042      	strb	r2, [r0, #1]
    c96a:	7a0c      	ldrb	r4, [r1, #8]
    c96c:	f004 0403 	and.w	r4, r4, #3
    c970:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    c974:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    c978:	7042      	strb	r2, [r0, #1]
    c97a:	7a4c      	ldrb	r4, [r1, #9]
    c97c:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    c980:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    c984:	7042      	strb	r2, [r0, #1]
    c986:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    c98a:	70c2      	strb	r2, [r0, #3]
    c98c:	680b      	ldr	r3, [r1, #0]
    c98e:	1d02      	adds	r2, r0, #4
    c990:	4293      	cmp	r3, r2
    c992:	d005      	beq.n	c9a0 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    c994:	88ca      	ldrh	r2, [r1, #6]
    c996:	bc30      	pop	{r4, r5}
    c998:	4619      	mov	r1, r3
    c99a:	1d00      	adds	r0, r0, #4
    c99c:	f003 bf8f 	b.w	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c9a0:	bc30      	pop	{r4, r5}
    c9a2:	4770      	bx	lr

0000c9a4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    c9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c9a8:	460d      	mov	r5, r1
    c9aa:	4604      	mov	r4, r0
    c9ac:	f891 c000 	ldrb.w	ip, [r1]
    c9b0:	2000      	movs	r0, #0
    c9b2:	230c      	movs	r3, #12
    c9b4:	2705      	movs	r7, #5
    c9b6:	2203      	movs	r2, #3
    c9b8:	263e      	movs	r6, #62	; 0x3e
    c9ba:	21ff      	movs	r1, #255	; 0xff
    c9bc:	f1bc 0f1e 	cmp.w	ip, #30
    c9c0:	d27e      	bcs.n	cac0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11c>
    c9c2:	e8df f00c 	tbb	[pc, ip]
    c9c6:	29e7      	.short	0x29e7
    c9c8:	63e74240 	.word	0x63e74240
    c9cc:	ac99806d 	.word	0xac99806d
    c9d0:	dfc4b9ae 	.word	0xdfc4b9ae
    c9d4:	e7e70ff3 	.word	0xe7e70ff3
    c9d8:	fcd2cf48 	.word	0xfcd2cf48
    c9dc:	edeeeff0 	.word	0xedeeeff0
    c9e0:	e9eaebec 	.word	0xe9eaebec
    c9e4:	200e      	movs	r0, #14
    c9e6:	7020      	strb	r0, [r4, #0]
    c9e8:	7968      	ldrb	r0, [r5, #5]
    c9ea:	70e0      	strb	r0, [r4, #3]
    c9ec:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    c9f0:	0a00      	lsrs	r0, r0, #8
    c9f2:	7120      	strb	r0, [r4, #4]
    c9f4:	7928      	ldrb	r0, [r5, #4]
    c9f6:	70a0      	strb	r0, [r4, #2]
    c9f8:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    c9fc:	3883      	subs	r0, #131	; 0x83
    c9fe:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    ca02:	d003      	beq.n	ca0c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x68>
    ca04:	2136      	movs	r1, #54	; 0x36
    ca06:	20c7      	movs	r0, #199	; 0xc7
    ca08:	f7f3 ffd2 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ca0c:	1de9      	adds	r1, r5, #7
    ca0e:	1d60      	adds	r0, r4, #5
    ca10:	f003 ff55 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ca14:	2007      	movs	r0, #7
    ca16:	e0bb      	b.n	cb90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    ca18:	7023      	strb	r3, [r4, #0]
    ca1a:	7928      	ldrb	r0, [r5, #4]
    ca1c:	70a0      	strb	r0, [r4, #2]
    ca1e:	7968      	ldrb	r0, [r5, #5]
    ca20:	70e0      	strb	r0, [r4, #3]
    ca22:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    ca26:	0a00      	lsrs	r0, r0, #8
    ca28:	7120      	strb	r0, [r4, #4]
    ca2a:	79e8      	ldrb	r0, [r5, #7]
    ca2c:	7160      	strb	r0, [r4, #5]
    ca2e:	7a28      	ldrb	r0, [r5, #8]
    ca30:	71a0      	strb	r0, [r4, #6]
    ca32:	8928      	ldrh	r0, [r5, #8]
    ca34:	0a00      	lsrs	r0, r0, #8
    ca36:	71e0      	strb	r0, [r4, #7]
    ca38:	7aa8      	ldrb	r0, [r5, #10]
    ca3a:	7220      	strb	r0, [r4, #8]
    ca3c:	8968      	ldrh	r0, [r5, #10]
    ca3e:	0a00      	lsrs	r0, r0, #8
    ca40:	7260      	strb	r0, [r4, #9]
    ca42:	2008      	movs	r0, #8
    ca44:	e0a4      	b.n	cb90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    ca46:	2010      	movs	r0, #16
    ca48:	e000      	b.n	ca4c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xa8>
    ca4a:	201a      	movs	r0, #26
    ca4c:	7020      	strb	r0, [r4, #0]
    ca4e:	7928      	ldrb	r0, [r5, #4]
    ca50:	70a0      	strb	r0, [r4, #2]
    ca52:	2001      	movs	r0, #1
    ca54:	e09c      	b.n	cb90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    ca56:	2029      	movs	r0, #41	; 0x29
    ca58:	f7f4 f93c 	bl	cd4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    ca5c:	b148      	cbz	r0, ca72 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xce>
    ca5e:	7026      	strb	r6, [r4, #0]
    ca60:	2029      	movs	r0, #41	; 0x29
    ca62:	70a0      	strb	r0, [r4, #2]
    ca64:	2221      	movs	r2, #33	; 0x21
    ca66:	1d29      	adds	r1, r5, #4
    ca68:	1ce0      	adds	r0, r4, #3
    ca6a:	f003 ff28 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ca6e:	2022      	movs	r0, #34	; 0x22
    ca70:	e08e      	b.n	cb90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    ca72:	200a      	movs	r0, #10
    ca74:	f7f4 f92e 	bl	cd4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    ca78:	2800      	cmp	r0, #0
    ca7a:	4629      	mov	r1, r5
    ca7c:	4620      	mov	r0, r4
    ca7e:	d002      	beq.n	ca86 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xe2>
    ca80:	f000 f95b 	bl	cd3a <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
    ca84:	e082      	b.n	cb8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    ca86:	f000 f92f 	bl	cce8 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    ca8a:	e07f      	b.n	cb8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    ca8c:	7026      	strb	r6, [r4, #0]
    ca8e:	2014      	movs	r0, #20
    ca90:	70a0      	strb	r0, [r4, #2]
    ca92:	7928      	ldrb	r0, [r5, #4]
    ca94:	70e0      	strb	r0, [r4, #3]
    ca96:	88a8      	ldrh	r0, [r5, #4]
    ca98:	0a00      	lsrs	r0, r0, #8
    ca9a:	7120      	strb	r0, [r4, #4]
    ca9c:	79a8      	ldrb	r0, [r5, #6]
    ca9e:	e0c0      	b.n	cc22 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    caa0:	223e      	movs	r2, #62	; 0x3e
    caa2:	7022      	strb	r2, [r4, #0]
    caa4:	2204      	movs	r2, #4
    caa6:	70a2      	strb	r2, [r4, #2]
    caa8:	6868      	ldr	r0, [r5, #4]
    caaa:	f8c4 0003 	str.w	r0, [r4, #3]
    caae:	68a8      	ldr	r0, [r5, #8]
    cab0:	f8c4 0007 	str.w	r0, [r4, #7]
    cab4:	89a8      	ldrh	r0, [r5, #12]
    cab6:	f8a4 000b 	strh.w	r0, [r4, #11]
    caba:	7ba8      	ldrb	r0, [r5, #14]
    cabc:	7360      	strb	r0, [r4, #13]
    cabe:	e000      	b.n	cac2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11e>
    cac0:	e068      	b.n	cb94 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    cac2:	200c      	movs	r0, #12
    cac4:	e064      	b.n	cb90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cac6:	7026      	strb	r6, [r4, #0]
    cac8:	70a2      	strb	r2, [r4, #2]
    caca:	7928      	ldrb	r0, [r5, #4]
    cacc:	70e0      	strb	r0, [r4, #3]
    cace:	79a8      	ldrb	r0, [r5, #6]
    cad0:	7120      	strb	r0, [r4, #4]
    cad2:	88e8      	ldrh	r0, [r5, #6]
    cad4:	0a00      	lsrs	r0, r0, #8
    cad6:	7160      	strb	r0, [r4, #5]
    cad8:	7a28      	ldrb	r0, [r5, #8]
    cada:	71a0      	strb	r0, [r4, #6]
    cadc:	8928      	ldrh	r0, [r5, #8]
    cade:	0a00      	lsrs	r0, r0, #8
    cae0:	71e0      	strb	r0, [r4, #7]
    cae2:	7aa8      	ldrb	r0, [r5, #10]
    cae4:	7220      	strb	r0, [r4, #8]
    cae6:	8968      	ldrh	r0, [r5, #10]
    cae8:	0a00      	lsrs	r0, r0, #8
    caea:	7260      	strb	r0, [r4, #9]
    caec:	7b28      	ldrb	r0, [r5, #12]
    caee:	72a0      	strb	r0, [r4, #10]
    caf0:	89a8      	ldrh	r0, [r5, #12]
    caf2:	0a00      	lsrs	r0, r0, #8
    caf4:	72e0      	strb	r0, [r4, #11]
    caf6:	e0d1      	b.n	cc9c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f8>
    caf8:	7026      	strb	r6, [r4, #0]
    cafa:	70a7      	strb	r7, [r4, #2]
    cafc:	7928      	ldrb	r0, [r5, #4]
    cafe:	70e0      	strb	r0, [r4, #3]
    cb00:	88a8      	ldrh	r0, [r5, #4]
    cb02:	0a00      	lsrs	r0, r0, #8
    cb04:	7120      	strb	r0, [r4, #4]
    cb06:	f8d5 0006 	ldr.w	r0, [r5, #6]
    cb0a:	f8c4 0005 	str.w	r0, [r4, #5]
    cb0e:	f8d5 000a 	ldr.w	r0, [r5, #10]
    cb12:	f8c4 0009 	str.w	r0, [r4, #9]
    cb16:	89e8      	ldrh	r0, [r5, #14]
    cb18:	f8a4 000d 	strh.w	r0, [r4, #13]
    cb1c:	e0e2      	b.n	cce4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x340>
    cb1e:	2011      	movs	r0, #17
    cb20:	e045      	b.n	cbae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x20a>
    cb22:	7027      	strb	r7, [r4, #0]
    cb24:	7928      	ldrb	r0, [r5, #4]
    cb26:	70a0      	strb	r0, [r4, #2]
    cb28:	7968      	ldrb	r0, [r5, #5]
    cb2a:	70e0      	strb	r0, [r4, #3]
    cb2c:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cb30:	0a00      	lsrs	r0, r0, #8
    cb32:	7120      	strb	r0, [r4, #4]
    cb34:	79e8      	ldrb	r0, [r5, #7]
    cb36:	e074      	b.n	cc22 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    cb38:	2008      	movs	r0, #8
    cb3a:	7020      	strb	r0, [r4, #0]
    cb3c:	7928      	ldrb	r0, [r5, #4]
    cb3e:	70a0      	strb	r0, [r4, #2]
    cb40:	79a8      	ldrb	r0, [r5, #6]
    cb42:	70e0      	strb	r0, [r4, #3]
    cb44:	88e8      	ldrh	r0, [r5, #6]
    cb46:	0a00      	lsrs	r0, r0, #8
    cb48:	7120      	strb	r0, [r4, #4]
    cb4a:	7a28      	ldrb	r0, [r5, #8]
    cb4c:	e069      	b.n	cc22 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    cb4e:	2030      	movs	r0, #48	; 0x30
    cb50:	7020      	strb	r0, [r4, #0]
    cb52:	7928      	ldrb	r0, [r5, #4]
    cb54:	70a0      	strb	r0, [r4, #2]
    cb56:	79a8      	ldrb	r0, [r5, #6]
    cb58:	70e0      	strb	r0, [r4, #3]
    cb5a:	88e8      	ldrh	r0, [r5, #6]
    cb5c:	0a00      	lsrs	r0, r0, #8
    cb5e:	7120      	strb	r0, [r4, #4]
    cb60:	2003      	movs	r0, #3
    cb62:	e015      	b.n	cb90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cb64:	7026      	strb	r6, [r4, #0]
    cb66:	2007      	movs	r0, #7
    cb68:	e060      	b.n	cc2c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    cb6a:	7026      	strb	r6, [r4, #0]
    cb6c:	70a3      	strb	r3, [r4, #2]
    cb6e:	7928      	ldrb	r0, [r5, #4]
    cb70:	70e0      	strb	r0, [r4, #3]
    cb72:	79a8      	ldrb	r0, [r5, #6]
    cb74:	7120      	strb	r0, [r4, #4]
    cb76:	88e8      	ldrh	r0, [r5, #6]
    cb78:	0a00      	lsrs	r0, r0, #8
    cb7a:	7160      	strb	r0, [r4, #5]
    cb7c:	7a28      	ldrb	r0, [r5, #8]
    cb7e:	71a0      	strb	r0, [r4, #6]
    cb80:	7a68      	ldrb	r0, [r5, #9]
    cb82:	e029      	b.n	cbd8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    cb84:	1d29      	adds	r1, r5, #4
    cb86:	4620      	mov	r0, r4
    cb88:	f7f4 f864 	bl	c54 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>
    cb8c:	2800      	cmp	r0, #0
    cb8e:	d001      	beq.n	cb94 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    cb90:	7060      	strb	r0, [r4, #1]
    cb92:	1c80      	adds	r0, r0, #2
    cb94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cb98:	e08f      	b.n	ccba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x316>
    cb9a:	e063      	b.n	cc64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    cb9c:	e044      	b.n	cc28 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    cb9e:	e06f      	b.n	cc80 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    cba0:	e07e      	b.n	cca0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fc>
    cba2:	e036      	b.n	cc12 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x26e>
    cba4:	e01e      	b.n	cbe4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x240>
    cba6:	e01a      	b.n	cbde <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    cba8:	e009      	b.n	cbbe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21a>
    cbaa:	e7ff      	b.n	cbac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x208>
    cbac:	2057      	movs	r0, #87	; 0x57
    cbae:	7020      	strb	r0, [r4, #0]
    cbb0:	7928      	ldrb	r0, [r5, #4]
    cbb2:	70a0      	strb	r0, [r4, #2]
    cbb4:	88a8      	ldrh	r0, [r5, #4]
    cbb6:	0a00      	lsrs	r0, r0, #8
    cbb8:	70e0      	strb	r0, [r4, #3]
    cbba:	2002      	movs	r0, #2
    cbbc:	e7e8      	b.n	cb90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cbbe:	7026      	strb	r6, [r4, #0]
    cbc0:	2012      	movs	r0, #18
    cbc2:	70a0      	strb	r0, [r4, #2]
    cbc4:	7928      	ldrb	r0, [r5, #4]
    cbc6:	70e0      	strb	r0, [r4, #3]
    cbc8:	7968      	ldrb	r0, [r5, #5]
    cbca:	7120      	strb	r0, [r4, #4]
    cbcc:	79a8      	ldrb	r0, [r5, #6]
    cbce:	7160      	strb	r0, [r4, #5]
    cbd0:	88e8      	ldrh	r0, [r5, #6]
    cbd2:	0a00      	lsrs	r0, r0, #8
    cbd4:	71a0      	strb	r0, [r4, #6]
    cbd6:	7a28      	ldrb	r0, [r5, #8]
    cbd8:	71e0      	strb	r0, [r4, #7]
    cbda:	2006      	movs	r0, #6
    cbdc:	e7d8      	b.n	cb90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cbde:	7026      	strb	r6, [r4, #0]
    cbe0:	2020      	movs	r0, #32
    cbe2:	e041      	b.n	cc68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c4>
    cbe4:	7026      	strb	r6, [r4, #0]
    cbe6:	2021      	movs	r0, #33	; 0x21
    cbe8:	70a0      	strb	r0, [r4, #2]
    cbea:	7928      	ldrb	r0, [r5, #4]
    cbec:	70e0      	strb	r0, [r4, #3]
    cbee:	7968      	ldrb	r0, [r5, #5]
    cbf0:	7120      	strb	r0, [r4, #4]
    cbf2:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cbf6:	0a00      	lsrs	r0, r0, #8
    cbf8:	7160      	strb	r0, [r4, #5]
    cbfa:	79e8      	ldrb	r0, [r5, #7]
    cbfc:	71a0      	strb	r0, [r4, #6]
    cbfe:	7a28      	ldrb	r0, [r5, #8]
    cc00:	71e0      	strb	r0, [r4, #7]
    cc02:	7a68      	ldrb	r0, [r5, #9]
    cc04:	7220      	strb	r0, [r4, #8]
    cc06:	7aa8      	ldrb	r0, [r5, #10]
    cc08:	7260      	strb	r0, [r4, #9]
    cc0a:	7ae8      	ldrb	r0, [r5, #11]
    cc0c:	72a0      	strb	r0, [r4, #10]
    cc0e:	2009      	movs	r0, #9
    cc10:	e7be      	b.n	cb90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cc12:	7021      	strb	r1, [r4, #0]
    cc14:	20a1      	movs	r0, #161	; 0xa1
    cc16:	70a0      	strb	r0, [r4, #2]
    cc18:	7928      	ldrb	r0, [r5, #4]
    cc1a:	70e0      	strb	r0, [r4, #3]
    cc1c:	7968      	ldrb	r0, [r5, #5]
    cc1e:	7120      	strb	r0, [r4, #4]
    cc20:	2000      	movs	r0, #0
    cc22:	7160      	strb	r0, [r4, #5]
    cc24:	2004      	movs	r0, #4
    cc26:	e7b3      	b.n	cb90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cc28:	7021      	strb	r1, [r4, #0]
    cc2a:	20a2      	movs	r0, #162	; 0xa2
    cc2c:	70a0      	strb	r0, [r4, #2]
    cc2e:	7928      	ldrb	r0, [r5, #4]
    cc30:	70e0      	strb	r0, [r4, #3]
    cc32:	88a8      	ldrh	r0, [r5, #4]
    cc34:	0a00      	lsrs	r0, r0, #8
    cc36:	7120      	strb	r0, [r4, #4]
    cc38:	79a8      	ldrb	r0, [r5, #6]
    cc3a:	7160      	strb	r0, [r4, #5]
    cc3c:	88e8      	ldrh	r0, [r5, #6]
    cc3e:	0a00      	lsrs	r0, r0, #8
    cc40:	71a0      	strb	r0, [r4, #6]
    cc42:	7a28      	ldrb	r0, [r5, #8]
    cc44:	71e0      	strb	r0, [r4, #7]
    cc46:	8928      	ldrh	r0, [r5, #8]
    cc48:	0a00      	lsrs	r0, r0, #8
    cc4a:	7220      	strb	r0, [r4, #8]
    cc4c:	7aa8      	ldrb	r0, [r5, #10]
    cc4e:	7260      	strb	r0, [r4, #9]
    cc50:	8968      	ldrh	r0, [r5, #10]
    cc52:	0a00      	lsrs	r0, r0, #8
    cc54:	72a0      	strb	r0, [r4, #10]
    cc56:	7b28      	ldrb	r0, [r5, #12]
    cc58:	72e0      	strb	r0, [r4, #11]
    cc5a:	89a8      	ldrh	r0, [r5, #12]
    cc5c:	0a00      	lsrs	r0, r0, #8
    cc5e:	7320      	strb	r0, [r4, #12]
    cc60:	200b      	movs	r0, #11
    cc62:	e795      	b.n	cb90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cc64:	7021      	strb	r1, [r4, #0]
    cc66:	20a3      	movs	r0, #163	; 0xa3
    cc68:	70a0      	strb	r0, [r4, #2]
    cc6a:	7928      	ldrb	r0, [r5, #4]
    cc6c:	70e0      	strb	r0, [r4, #3]
    cc6e:	88a8      	ldrh	r0, [r5, #4]
    cc70:	0a00      	lsrs	r0, r0, #8
    cc72:	7120      	strb	r0, [r4, #4]
    cc74:	79a8      	ldrb	r0, [r5, #6]
    cc76:	7160      	strb	r0, [r4, #5]
    cc78:	79e8      	ldrb	r0, [r5, #7]
    cc7a:	71a0      	strb	r0, [r4, #6]
    cc7c:	2005      	movs	r0, #5
    cc7e:	e787      	b.n	cb90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cc80:	7026      	strb	r6, [r4, #0]
    cc82:	2013      	movs	r0, #19
    cc84:	70a0      	strb	r0, [r4, #2]
    cc86:	7928      	ldrb	r0, [r5, #4]
    cc88:	70e0      	strb	r0, [r4, #3]
    cc8a:	7968      	ldrb	r0, [r5, #5]
    cc8c:	7120      	strb	r0, [r4, #4]
    cc8e:	f8d5 0006 	ldr.w	r0, [r5, #6]
    cc92:	f8c4 0005 	str.w	r0, [r4, #5]
    cc96:	8968      	ldrh	r0, [r5, #10]
    cc98:	f8a4 0009 	strh.w	r0, [r4, #9]
    cc9c:	200a      	movs	r0, #10
    cc9e:	e777      	b.n	cb90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cca0:	7021      	strb	r1, [r4, #0]
    cca2:	20a4      	movs	r0, #164	; 0xa4
    cca4:	70a0      	strb	r0, [r4, #2]
    cca6:	7928      	ldrb	r0, [r5, #4]
    cca8:	70e0      	strb	r0, [r4, #3]
    ccaa:	88a8      	ldrh	r0, [r5, #4]
    ccac:	0a00      	lsrs	r0, r0, #8
    ccae:	7120      	strb	r0, [r4, #4]
    ccb0:	79a8      	ldrb	r0, [r5, #6]
    ccb2:	7160      	strb	r0, [r4, #5]
    ccb4:	79e8      	ldrb	r0, [r5, #7]
    ccb6:	71a0      	strb	r0, [r4, #6]
    ccb8:	e6ac      	b.n	ca14 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x70>
    ccba:	7021      	strb	r1, [r4, #0]
    ccbc:	2080      	movs	r0, #128	; 0x80
    ccbe:	70a0      	strb	r0, [r4, #2]
    ccc0:	88a9      	ldrh	r1, [r5, #4]
    ccc2:	f8a4 1003 	strh.w	r1, [r4, #3]
    ccc6:	88e9      	ldrh	r1, [r5, #6]
    ccc8:	f8a4 1005 	strh.w	r1, [r4, #5]
    cccc:	7a29      	ldrb	r1, [r5, #8]
    ccce:	71e1      	strb	r1, [r4, #7]
    ccd0:	8969      	ldrh	r1, [r5, #10]
    ccd2:	8121      	strh	r1, [r4, #8]
    ccd4:	89a9      	ldrh	r1, [r5, #12]
    ccd6:	8161      	strh	r1, [r4, #10]
    ccd8:	89e9      	ldrh	r1, [r5, #14]
    ccda:	81a1      	strh	r1, [r4, #12]
    ccdc:	7c29      	ldrb	r1, [r5, #16]
    ccde:	f001 0101 	and.w	r1, r1, #1
    cce2:	73a1      	strb	r1, [r4, #14]
    cce4:	200d      	movs	r0, #13
    cce6:	e753      	b.n	cb90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>

0000cce8 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    cce8:	223e      	movs	r2, #62	; 0x3e
    ccea:	7002      	strb	r2, [r0, #0]
    ccec:	2201      	movs	r2, #1
    ccee:	7082      	strb	r2, [r0, #2]
    ccf0:	790a      	ldrb	r2, [r1, #4]
    ccf2:	70c2      	strb	r2, [r0, #3]
    ccf4:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    ccf8:	7102      	strb	r2, [r0, #4]
    ccfa:	880a      	ldrh	r2, [r1, #0]
    ccfc:	0a12      	lsrs	r2, r2, #8
    ccfe:	7142      	strb	r2, [r0, #5]
    cd00:	788a      	ldrb	r2, [r1, #2]
    cd02:	7182      	strb	r2, [r0, #6]
    cd04:	78ca      	ldrb	r2, [r1, #3]
    cd06:	71c2      	strb	r2, [r0, #7]
    cd08:	684a      	ldr	r2, [r1, #4]
    cd0a:	6082      	str	r2, [r0, #8]
    cd0c:	890a      	ldrh	r2, [r1, #8]
    cd0e:	8182      	strh	r2, [r0, #12]
    cd10:	7d8a      	ldrb	r2, [r1, #22]
    cd12:	7382      	strb	r2, [r0, #14]
    cd14:	8aca      	ldrh	r2, [r1, #22]
    cd16:	0a12      	lsrs	r2, r2, #8
    cd18:	73c2      	strb	r2, [r0, #15]
    cd1a:	7e0a      	ldrb	r2, [r1, #24]
    cd1c:	7402      	strb	r2, [r0, #16]
    cd1e:	8b0a      	ldrh	r2, [r1, #24]
    cd20:	0a12      	lsrs	r2, r2, #8
    cd22:	7442      	strb	r2, [r0, #17]
    cd24:	7e8a      	ldrb	r2, [r1, #26]
    cd26:	7482      	strb	r2, [r0, #18]
    cd28:	8b4a      	ldrh	r2, [r1, #26]
    cd2a:	0a12      	lsrs	r2, r2, #8
    cd2c:	74c2      	strb	r2, [r0, #19]
    cd2e:	7f09      	ldrb	r1, [r1, #28]
    cd30:	7501      	strb	r1, [r0, #20]
    cd32:	2113      	movs	r1, #19
    cd34:	7041      	strb	r1, [r0, #1]
    cd36:	4608      	mov	r0, r1
    cd38:	4770      	bx	lr
    cd3a:	223e      	movs	r2, #62	; 0x3e
    cd3c:	7002      	strb	r2, [r0, #0]
    cd3e:	220a      	movs	r2, #10
    cd40:	7082      	strb	r2, [r0, #2]
    cd42:	790a      	ldrb	r2, [r1, #4]
    cd44:	70c2      	strb	r2, [r0, #3]
    cd46:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    cd4a:	7102      	strb	r2, [r0, #4]
    cd4c:	880a      	ldrh	r2, [r1, #0]
    cd4e:	0a12      	lsrs	r2, r2, #8
    cd50:	7142      	strb	r2, [r0, #5]
    cd52:	788a      	ldrb	r2, [r1, #2]
    cd54:	7182      	strb	r2, [r0, #6]
    cd56:	78ca      	ldrb	r2, [r1, #3]
    cd58:	71c2      	strb	r2, [r0, #7]
    cd5a:	684a      	ldr	r2, [r1, #4]
    cd5c:	6082      	str	r2, [r0, #8]
    cd5e:	890a      	ldrh	r2, [r1, #8]
    cd60:	8182      	strh	r2, [r0, #12]
    cd62:	f8d1 200a 	ldr.w	r2, [r1, #10]
    cd66:	f8c0 200e 	str.w	r2, [r0, #14]
    cd6a:	89ca      	ldrh	r2, [r1, #14]
    cd6c:	8242      	strh	r2, [r0, #18]
    cd6e:	690a      	ldr	r2, [r1, #16]
    cd70:	6142      	str	r2, [r0, #20]
    cd72:	8a8a      	ldrh	r2, [r1, #20]
    cd74:	8302      	strh	r2, [r0, #24]
    cd76:	7d8a      	ldrb	r2, [r1, #22]
    cd78:	7682      	strb	r2, [r0, #26]
    cd7a:	8aca      	ldrh	r2, [r1, #22]
    cd7c:	0a12      	lsrs	r2, r2, #8
    cd7e:	76c2      	strb	r2, [r0, #27]
    cd80:	7e0a      	ldrb	r2, [r1, #24]
    cd82:	7702      	strb	r2, [r0, #28]
    cd84:	8b0a      	ldrh	r2, [r1, #24]
    cd86:	0a12      	lsrs	r2, r2, #8
    cd88:	7742      	strb	r2, [r0, #29]
    cd8a:	7e8a      	ldrb	r2, [r1, #26]
    cd8c:	7782      	strb	r2, [r0, #30]
    cd8e:	8b4a      	ldrh	r2, [r1, #26]
    cd90:	0a12      	lsrs	r2, r2, #8
    cd92:	77c2      	strb	r2, [r0, #31]
    cd94:	7f09      	ldrb	r1, [r1, #28]
    cd96:	f880 1020 	strb.w	r1, [r0, #32]
    cd9a:	211f      	movs	r1, #31
    cd9c:	7041      	strb	r1, [r0, #1]
    cd9e:	4608      	mov	r0, r1
    cda0:	4770      	bx	lr
    cda2:	094a      	lsrs	r2, r1, #5
    cda4:	f001 011f 	and.w	r1, r1, #31
    cda8:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    cdac:	40c8      	lsrs	r0, r1
    cdae:	f000 0001 	and.w	r0, r0, #1
    cdb2:	4770      	bx	lr

0000cdb4 <sdc_hci_data_put>:
    cdb4:	b510      	push	{r4, lr}
    cdb6:	f06f 0415 	mvn.w	r4, #21
    cdba:	b120      	cbz	r0, cdc6 <sdc_hci_data_put+0x12>
    cdbc:	f7ff fd56 	bl	c86c <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    cdc0:	b108      	cbz	r0, cdc6 <sdc_hci_data_put+0x12>
    cdc2:	2000      	movs	r0, #0
    cdc4:	bd10      	pop	{r4, pc}
    cdc6:	4620      	mov	r0, r4
    cdc8:	bd10      	pop	{r4, pc}

0000cdca <sdc_hci_get>:
    cdca:	b510      	push	{r4, lr}
    cdcc:	460c      	mov	r4, r1
    cdce:	b130      	cbz	r0, cdde <sdc_hci_get+0x14>
    cdd0:	b12c      	cbz	r4, cdde <sdc_hci_get+0x14>
    cdd2:	f7f3 fee9 	bl	ba8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    cdd6:	b128      	cbz	r0, cde4 <sdc_hci_get+0x1a>
    cdd8:	7020      	strb	r0, [r4, #0]
    cdda:	2000      	movs	r0, #0
    cddc:	bd10      	pop	{r4, pc}
    cdde:	f06f 0015 	mvn.w	r0, #21
    cde2:	bd10      	pop	{r4, pc}
    cde4:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cde8:	bd10      	pop	{r4, pc}

0000cdea <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    cdea:	f003 b800 	b.w	fdee <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000cdee <sdc_hci_cmd_cb_read_transmit_power_level>:
    cdee:	f003 b81b 	b.w	fe28 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000cdf2 <sdc_hci_cmd_cb_set_event_mask>:
    cdf2:	b510      	push	{r4, lr}
    cdf4:	f7f3 ff7e 	bl	cf4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    cdf8:	2000      	movs	r0, #0
    cdfa:	bd10      	pop	{r4, pc}

0000cdfc <sdc_hci_cmd_cb_set_event_mask_page_2>:
    cdfc:	b510      	push	{r4, lr}
    cdfe:	f7f3 ff89 	bl	d14 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    ce02:	2000      	movs	r0, #0
    ce04:	bd10      	pop	{r4, pc}

0000ce06 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    ce06:	f003 b830 	b.w	fe6a <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000ce0a <sdc_hci_cmd_vs_conn_event_extend>:
    ce0a:	b508      	push	{r3, lr}
    ce0c:	7800      	ldrb	r0, [r0, #0]
    ce0e:	f88d 0000 	strb.w	r0, [sp]
    ce12:	4668      	mov	r0, sp
    ce14:	f002 ff0c 	bl	fc30 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    ce18:	bd08      	pop	{r3, pc}

0000ce1a <sdc_hci_cmd_vs_conn_update>:
    ce1a:	2001      	movs	r0, #1
    ce1c:	4770      	bx	lr

0000ce1e <sdc_hci_cmd_vs_event_length_set>:
    ce1e:	f7f9 bfc5 	b.w	6dac <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000ce22 <sdc_hci_cmd_vs_llpm_mode_set>:
    ce22:	2001      	movs	r0, #1
    ce24:	4770      	bx	lr

0000ce26 <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
    ce26:	7881      	ldrb	r1, [r0, #2]
    ce28:	8800      	ldrh	r0, [r0, #0]
    ce2a:	f002 beb1 	b.w	fb90 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

0000ce2e <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    ce2e:	7800      	ldrb	r0, [r0, #0]
    ce30:	b100      	cbz	r0, ce34 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    ce32:	2001      	movs	r0, #1
    ce34:	f002 bea7 	b.w	fb86 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000ce38 <sdc_hci_cmd_vs_set_adv_randomness>:
    ce38:	f002 bed4 	b.w	fbe4 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

0000ce3c <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    ce3c:	b510      	push	{r4, lr}
    ce3e:	4604      	mov	r4, r0
    ce40:	f7ff f9dc 	bl	c1fc <mpsl_temperature_get>
    ce44:	17c1      	asrs	r1, r0, #31
    ce46:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    ce4a:	1080      	asrs	r0, r0, #2
    ce4c:	287f      	cmp	r0, #127	; 0x7f
    ce4e:	dd01      	ble.n	ce54 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    ce50:	207f      	movs	r0, #127	; 0x7f
    ce52:	e004      	b.n	ce5e <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    ce54:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    ce58:	4288      	cmp	r0, r1
    ce5a:	da00      	bge.n	ce5e <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    ce5c:	4608      	mov	r0, r1
    ce5e:	7020      	strb	r0, [r4, #0]
    ce60:	2000      	movs	r0, #0
    ce62:	bd10      	pop	{r4, pc}

0000ce64 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    ce64:	f002 bed3 	b.w	fc0e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000ce68 <sdc_hci_cmd_ip_read_bd_addr>:
    ce68:	f002 bfd2 	b.w	fe10 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000ce6c <sdc_hci_cmd_ip_read_local_version_information>:
    ce6c:	f7f9 bfac 	b.w	6dc8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000ce70 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    ce70:	f002 bc09 	b.w	f686 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000ce74 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    ce74:	f002 bbdd 	b.w	f632 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000ce78 <sdc_hci_cmd_le_clear_filter_accept_list>:
    ce78:	f002 bc29 	b.w	f6ce <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000ce7c <sdc_hci_cmd_le_clear_resolving_list>:
    ce7c:	f002 bc1a 	b.w	f6b4 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000ce80 <sdc_hci_cmd_le_encrypt>:
    ce80:	f002 bc32 	b.w	f6e8 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000ce84 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    ce84:	8802      	ldrh	r2, [r0, #0]
    ce86:	800a      	strh	r2, [r1, #0]
    ce88:	f002 bc37 	b.w	f6fa <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000ce8c <sdc_hci_cmd_le_long_term_key_request_reply>:
    ce8c:	8802      	ldrh	r2, [r0, #0]
    ce8e:	800a      	strh	r2, [r1, #0]
    ce90:	f002 bc4c 	b.w	f72c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000ce94 <sdc_hci_cmd_le_rand>:
    ce94:	f002 bc74 	b.w	f780 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000ce98 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    ce98:	f002 bc78 	b.w	f78c <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000ce9c <sdc_hci_cmd_le_read_buffer_size>:
    ce9c:	f7f9 be94 	b.w	6bc8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000cea0 <sdc_hci_cmd_le_read_channel_map>:
    cea0:	f7f9 be9c 	b.w	6bdc <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000cea4 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    cea4:	f002 bcb6 	b.w	f814 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000cea8 <sdc_hci_cmd_le_read_max_data_length>:
    cea8:	f002 bc7b 	b.w	f7a2 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000ceac <sdc_hci_cmd_le_read_phy>:
    ceac:	f7f9 bebe 	b.w	6c2c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000ceb0 <sdc_hci_cmd_le_read_remote_features>:
    ceb0:	f002 bc80 	b.w	f7b4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000ceb4 <sdc_hci_cmd_le_read_resolving_list_size>:
    ceb4:	f002 bc9a 	b.w	f7ec <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000ceb8 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    ceb8:	f7f9 bede 	b.w	6c78 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000cebc <sdc_hci_cmd_le_read_transmit_power>:
    cebc:	f002 bc9a 	b.w	f7f4 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000cec0 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    cec0:	f002 bcc8 	b.w	f854 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000cec4 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    cec4:	f002 bcad 	b.w	f822 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000cec8 <sdc_hci_cmd_le_set_address_resolution_enable>:
    cec8:	f002 bcd9 	b.w	f87e <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000cecc <sdc_hci_cmd_le_set_adv_data>:
    cecc:	f002 bce5 	b.w	f89a <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000ced0 <sdc_hci_cmd_le_set_adv_enable>:
    ced0:	f002 bcf8 	b.w	f8c4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000ced4 <sdc_hci_cmd_le_set_adv_params>:
    ced4:	f002 bd29 	b.w	f92a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000ced8 <sdc_hci_cmd_le_set_data_length>:
    ced8:	f002 bdbc 	b.w	fa54 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000cedc <sdc_hci_cmd_le_set_data_related_address_changes>:
    cedc:	f002 bdda 	b.w	fa94 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

0000cee0 <sdc_hci_cmd_le_set_default_phy>:
    cee0:	f7f9 bed4 	b.w	6c8c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000cee4 <sdc_hci_cmd_le_set_event_mask>:
    cee4:	b510      	push	{r4, lr}
    cee6:	f7f3 fefd 	bl	ce4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    ceea:	2000      	movs	r0, #0
    ceec:	bd10      	pop	{r4, pc}

0000ceee <sdc_hci_cmd_le_set_phy>:
    ceee:	f002 bdde 	b.w	faae <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000cef2 <sdc_hci_cmd_le_set_privacy_mode>:
    cef2:	f002 bdf5 	b.w	fae0 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000cef6 <sdc_hci_cmd_le_set_random_address>:
    cef6:	f002 be09 	b.w	fb0c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000cefa <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    cefa:	f002 be15 	b.w	fb28 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000cefe <sdc_hci_cmd_le_set_scan_response_data>:
    cefe:	f002 be1c 	b.w	fb3a <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000cf02 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    cf02:	f002 be2f 	b.w	fb64 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000cf06 <sdc_hci_cmd_lc_disconnect>:
    cf06:	f002 bb46 	b.w	f596 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000cf0a <sdc_hci_cmd_lc_read_remote_version_information>:
    cf0a:	f7f9 bf67 	b.w	6ddc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    cf0e:	b570      	push	{r4, r5, r6, lr}
    cf10:	880b      	ldrh	r3, [r1, #0]
    cf12:	7cc4      	ldrb	r4, [r0, #19]
    cf14:	f100 0518 	add.w	r5, r0, #24
    cf18:	f3c3 060e 	ubfx	r6, r3, #0, #15
    cf1c:	8802      	ldrh	r2, [r0, #0]
    cf1e:	4435      	add	r5, r6
    cf20:	1d64      	adds	r4, r4, #5
    cf22:	882d      	ldrh	r5, [r5, #0]
    cf24:	4422      	add	r2, r4
    cf26:	b292      	uxth	r2, r2
    cf28:	4425      	add	r5, r4
    cf2a:	1e54      	subs	r4, r2, #1
    cf2c:	442c      	add	r4, r5
    cf2e:	fb94 f4f2 	sdiv	r4, r4, r2
    cf32:	fb02 6204 	mla	r2, r2, r4, r6
    cf36:	8840      	ldrh	r0, [r0, #2]
    cf38:	b292      	uxth	r2, r2
    cf3a:	4290      	cmp	r0, r2
    cf3c:	d903      	bls.n	cf46 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    cf3e:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    cf42:	4310      	orrs	r0, r2
    cf44:	e002      	b.n	cf4c <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    cf46:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    cf4a:	4398      	bics	r0, r3
    cf4c:	8008      	strh	r0, [r1, #0]
    cf4e:	bd70      	pop	{r4, r5, r6, pc}
    cf50:	0442      	lsls	r2, r0, #17
    cf52:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    cf56:	d107      	bne.n	cf68 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    cf58:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    cf5c:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    cf60:	4288      	cmp	r0, r1
    cf62:	d001      	beq.n	cf68 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    cf64:	2001      	movs	r0, #1
    cf66:	4770      	bx	lr
    cf68:	2000      	movs	r0, #0
    cf6a:	4770      	bx	lr

0000cf6c <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    cf6c:	8881      	ldrh	r1, [r0, #4]
    cf6e:	88c0      	ldrh	r0, [r0, #6]
    cf70:	4288      	cmp	r0, r1
    cf72:	d101      	bne.n	cf78 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    cf74:	2001      	movs	r0, #1
    cf76:	4770      	bx	lr
    cf78:	2000      	movs	r0, #0
    cf7a:	4770      	bx	lr

0000cf7c <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    cf7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf80:	460f      	mov	r7, r1
    cf82:	4604      	mov	r4, r0
    cf84:	f100 0118 	add.w	r1, r0, #24
    cf88:	8880      	ldrh	r0, [r0, #4]
    cf8a:	2600      	movs	r6, #0
    cf8c:	f3c0 000e 	ubfx	r0, r0, #0, #15
    cf90:	1845      	adds	r5, r0, r1
    cf92:	603e      	str	r6, [r7, #0]
    cf94:	89e0      	ldrh	r0, [r4, #14]
    cf96:	2800      	cmp	r0, #0
    cf98:	d016      	beq.n	cfc8 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    cf9a:	8961      	ldrh	r1, [r4, #10]
    cf9c:	4408      	add	r0, r1
    cf9e:	b280      	uxth	r0, r0
    cfa0:	8160      	strh	r0, [r4, #10]
    cfa2:	8829      	ldrh	r1, [r5, #0]
    cfa4:	4288      	cmp	r0, r1
    cfa6:	d905      	bls.n	cfb4 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    cfa8:	f240 1151 	movw	r1, #337	; 0x151
    cfac:	f04f 0014 	mov.w	r0, #20
    cfb0:	f7f3 fcfe 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cfb4:	d106      	bne.n	cfc4 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    cfb6:	f104 0104 	add.w	r1, r4, #4
    cfba:	4620      	mov	r0, r4
    cfbc:	f7ff ffa7 	bl	cf0e <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    cfc0:	8166      	strh	r6, [r4, #10]
    cfc2:	603d      	str	r5, [r7, #0]
    cfc4:	81e6      	strh	r6, [r4, #14]
    cfc6:	2001      	movs	r0, #1
    cfc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cfcc <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    cfcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cfd0:	4604      	mov	r4, r0
    cfd2:	f100 0318 	add.w	r3, r0, #24
    cfd6:	88c0      	ldrh	r0, [r0, #6]
    cfd8:	460e      	mov	r6, r1
    cfda:	f3c0 070e 	ubfx	r7, r0, #0, #15
    cfde:	8a20      	ldrh	r0, [r4, #16]
    cfe0:	19d9      	adds	r1, r3, r7
    cfe2:	b108      	cbz	r0, cfe8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    cfe4:	42b0      	cmp	r0, r6
    cfe6:	d202      	bcs.n	cfee <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    cfe8:	2000      	movs	r0, #0
    cfea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cfee:	89a0      	ldrh	r0, [r4, #12]
    cff0:	2500      	movs	r5, #0
    cff2:	b140      	cbz	r0, d006 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    cff4:	f8b1 c000 	ldrh.w	ip, [r1]
    cff8:	4560      	cmp	r0, ip
    cffa:	d006      	beq.n	d00a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    cffc:	f44f 7101 	mov.w	r1, #516	; 0x204
    d000:	2014      	movs	r0, #20
    d002:	f7f3 fcd5 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d006:	800d      	strh	r5, [r1, #0]
    d008:	e00e      	b.n	d028 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d00a:	f894 c013 	ldrb.w	ip, [r4, #19]
    d00e:	4418      	add	r0, r3
    d010:	f10c 0c05 	add.w	ip, ip, #5
    d014:	44bc      	add	ip, r7
    d016:	4460      	add	r0, ip
    d018:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    d01c:	f820 cc03 	strh.w	ip, [r0, #-3]
    d020:	f894 c016 	ldrb.w	ip, [r4, #22]
    d024:	f800 cc01 	strb.w	ip, [r0, #-1]
    d028:	89a0      	ldrh	r0, [r4, #12]
    d02a:	4430      	add	r0, r6
    d02c:	81a0      	strh	r0, [r4, #12]
    d02e:	8808      	ldrh	r0, [r1, #0]
    d030:	4430      	add	r0, r6
    d032:	8008      	strh	r0, [r1, #0]
    d034:	b12a      	cbz	r2, d042 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    d036:	1da1      	adds	r1, r4, #6
    d038:	4620      	mov	r0, r4
    d03a:	f7ff ff68 	bl	cf0e <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d03e:	81a5      	strh	r5, [r4, #12]
    d040:	e00a      	b.n	d058 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    d042:	7ce0      	ldrb	r0, [r4, #19]
    d044:	89a1      	ldrh	r1, [r4, #12]
    d046:	1d40      	adds	r0, r0, #5
    d048:	4438      	add	r0, r7
    d04a:	4419      	add	r1, r3
    d04c:	4408      	add	r0, r1
    d04e:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d052:	82a1      	strh	r1, [r4, #20]
    d054:	7880      	ldrb	r0, [r0, #2]
    d056:	75a0      	strb	r0, [r4, #22]
    d058:	8225      	strh	r5, [r4, #16]
    d05a:	2001      	movs	r0, #1
    d05c:	e7c5      	b.n	cfea <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000d05e <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d05e:	1c80      	adds	r0, r0, #2
    d060:	4770      	bx	lr

0000d062 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d062:	b510      	push	{r4, lr}
    d064:	4604      	mov	r4, r0
    d066:	88c0      	ldrh	r0, [r0, #6]
    d068:	88a1      	ldrh	r1, [r4, #4]
    d06a:	4281      	cmp	r1, r0
    d06c:	d003      	beq.n	d076 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d06e:	8960      	ldrh	r0, [r4, #10]
    d070:	b908      	cbnz	r0, d076 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d072:	89e0      	ldrh	r0, [r4, #14]
    d074:	b108      	cbz	r0, d07a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    d076:	2000      	movs	r0, #0
    d078:	bd10      	pop	{r4, pc}
    d07a:	1d21      	adds	r1, r4, #4
    d07c:	4620      	mov	r0, r4
    d07e:	f7ff ff46 	bl	cf0e <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d082:	2000      	movs	r0, #0
    d084:	81e0      	strh	r0, [r4, #14]
    d086:	2001      	movs	r0, #1
    d088:	bd10      	pop	{r4, pc}

0000d08a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d08a:	b510      	push	{r4, lr}
    d08c:	4604      	mov	r4, r0
    d08e:	f100 0218 	add.w	r2, r0, #24
    d092:	88c0      	ldrh	r0, [r0, #6]
    d094:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d098:	4402      	add	r2, r0
    d09a:	8820      	ldrh	r0, [r4, #0]
    d09c:	2845      	cmp	r0, #69	; 0x45
    d09e:	d200      	bcs.n	d0a2 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d0a0:	2045      	movs	r0, #69	; 0x45
    d0a2:	4288      	cmp	r0, r1
    d0a4:	d204      	bcs.n	d0b0 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d0a6:	f44f 7182 	mov.w	r1, #260	; 0x104
    d0aa:	2014      	movs	r0, #20
    d0ac:	f7f3 fc80 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d0b0:	7ca0      	ldrb	r0, [r4, #18]
    d0b2:	2800      	cmp	r0, #0
    d0b4:	d003      	beq.n	d0be <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d0b6:	8810      	ldrh	r0, [r2, #0]
    d0b8:	4288      	cmp	r0, r1
    d0ba:	d201      	bcs.n	d0c0 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d0bc:	2000      	movs	r0, #0
    d0be:	bd10      	pop	{r4, pc}
    d0c0:	8011      	strh	r1, [r2, #0]
    d0c2:	1da1      	adds	r1, r4, #6
    d0c4:	4620      	mov	r0, r4
    d0c6:	f7ff ff22 	bl	cf0e <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d0ca:	2000      	movs	r0, #0
    d0cc:	74a0      	strb	r0, [r4, #18]
    d0ce:	2001      	movs	r0, #1
    d0d0:	bd10      	pop	{r4, pc}

0000d0d2 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d0d2:	b510      	push	{r4, lr}
    d0d4:	88c4      	ldrh	r4, [r0, #6]
    d0d6:	8883      	ldrh	r3, [r0, #4]
    d0d8:	4601      	mov	r1, r0
    d0da:	f100 0218 	add.w	r2, r0, #24
    d0de:	f3c3 000e 	ubfx	r0, r3, #0, #15
    d0e2:	4410      	add	r0, r2
    d0e4:	42a3      	cmp	r3, r4
    d0e6:	d002      	beq.n	d0ee <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    d0e8:	8949      	ldrh	r1, [r1, #10]
    d0ea:	2900      	cmp	r1, #0
    d0ec:	d000      	beq.n	d0f0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    d0ee:	2000      	movs	r0, #0
    d0f0:	bd10      	pop	{r4, pc}

0000d0f2 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d0f2:	8803      	ldrh	r3, [r0, #0]
    d0f4:	2b45      	cmp	r3, #69	; 0x45
    d0f6:	d200      	bcs.n	d0fa <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d0f8:	2345      	movs	r3, #69	; 0x45
    d0fa:	8013      	strh	r3, [r2, #0]
    d0fc:	88c2      	ldrh	r2, [r0, #6]
    d0fe:	f3c2 030e 	ubfx	r3, r2, #0, #15
    d102:	f100 0218 	add.w	r2, r0, #24
    d106:	441a      	add	r2, r3
    d108:	600a      	str	r2, [r1, #0]
    d10a:	8980      	ldrh	r0, [r0, #12]
    d10c:	4770      	bx	lr

0000d10e <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d10e:	7cc0      	ldrb	r0, [r0, #19]
    d110:	1d40      	adds	r0, r0, #5
    d112:	4408      	add	r0, r1
    d114:	1ec0      	subs	r0, r0, #3
    d116:	6010      	str	r0, [r2, #0]
    d118:	8808      	ldrh	r0, [r1, #0]
    d11a:	4770      	bx	lr

0000d11c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d120:	460e      	mov	r6, r1
    d122:	88c1      	ldrh	r1, [r0, #6]
    d124:	8902      	ldrh	r2, [r0, #8]
    d126:	4604      	mov	r4, r0
    d128:	f100 0818 	add.w	r8, r0, #24
    d12c:	8800      	ldrh	r0, [r0, #0]
    d12e:	f3c1 050e 	ubfx	r5, r1, #0, #15
    d132:	f3c2 070e 	ubfx	r7, r2, #0, #15
    d136:	2845      	cmp	r0, #69	; 0x45
    d138:	d200      	bcs.n	d13c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d13a:	2045      	movs	r0, #69	; 0x45
    d13c:	42b0      	cmp	r0, r6
    d13e:	d203      	bcs.n	d148 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d140:	21c6      	movs	r1, #198	; 0xc6
    d142:	2014      	movs	r0, #20
    d144:	f7f3 fc34 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d148:	4610      	mov	r0, r2
    d14a:	f7ff ff01 	bl	cf50 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d14e:	b110      	cbz	r0, d156 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d150:	2000      	movs	r0, #0
    d152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d156:	42af      	cmp	r7, r5
    d158:	d908      	bls.n	d16c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d15a:	7ce1      	ldrb	r1, [r4, #19]
    d15c:	1b78      	subs	r0, r7, r5
    d15e:	1a40      	subs	r0, r0, r1
    d160:	1f40      	subs	r0, r0, #5
    d162:	4286      	cmp	r6, r0
    d164:	dd02      	ble.n	d16c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d166:	2000      	movs	r0, #0
    d168:	74a0      	strb	r0, [r4, #18]
    d16a:	e7f1      	b.n	d150 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d16c:	eb08 0005 	add.w	r0, r8, r5
    d170:	2101      	movs	r1, #1
    d172:	8006      	strh	r6, [r0, #0]
    d174:	74a1      	strb	r1, [r4, #18]
    d176:	e7ec      	b.n	d152 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d178 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d178:	b538      	push	{r3, r4, r5, lr}
    d17a:	88c4      	ldrh	r4, [r0, #6]
    d17c:	8881      	ldrh	r1, [r0, #4]
    d17e:	f100 0218 	add.w	r2, r0, #24
    d182:	f3c1 030e 	ubfx	r3, r1, #0, #15
    d186:	441a      	add	r2, r3
    d188:	42a1      	cmp	r1, r4
    d18a:	d010      	beq.n	d1ae <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d18c:	8943      	ldrh	r3, [r0, #10]
    d18e:	89c5      	ldrh	r5, [r0, #14]
    d190:	8812      	ldrh	r2, [r2, #0]
    d192:	442b      	add	r3, r5
    d194:	4293      	cmp	r3, r2
    d196:	d308      	bcc.n	d1aa <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d198:	f8ad 1000 	strh.w	r1, [sp]
    d19c:	4669      	mov	r1, sp
    d19e:	f7ff feb6 	bl	cf0e <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d1a2:	f8bd 0000 	ldrh.w	r0, [sp]
    d1a6:	42a0      	cmp	r0, r4
    d1a8:	d001      	beq.n	d1ae <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d1aa:	2001      	movs	r0, #1
    d1ac:	bd38      	pop	{r3, r4, r5, pc}
    d1ae:	2000      	movs	r0, #0
    d1b0:	bd38      	pop	{r3, r4, r5, pc}

0000d1b2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d1b2:	b570      	push	{r4, r5, r6, lr}
    d1b4:	88c6      	ldrh	r6, [r0, #6]
    d1b6:	8885      	ldrh	r5, [r0, #4]
    d1b8:	4603      	mov	r3, r0
    d1ba:	f100 0418 	add.w	r4, r0, #24
    d1be:	f3c5 000e 	ubfx	r0, r5, #0, #15
    d1c2:	4420      	add	r0, r4
    d1c4:	42b5      	cmp	r5, r6
    d1c6:	d102      	bne.n	d1ce <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d1c8:	2000      	movs	r0, #0
    d1ca:	81d8      	strh	r0, [r3, #14]
    d1cc:	bd70      	pop	{r4, r5, r6, pc}
    d1ce:	8804      	ldrh	r4, [r0, #0]
    d1d0:	895d      	ldrh	r5, [r3, #10]
    d1d2:	7cde      	ldrb	r6, [r3, #19]
    d1d4:	1b64      	subs	r4, r4, r5
    d1d6:	4435      	add	r5, r6
    d1d8:	4428      	add	r0, r5
    d1da:	880d      	ldrh	r5, [r1, #0]
    d1dc:	b2a4      	uxth	r4, r4
    d1de:	1c80      	adds	r0, r0, #2
    d1e0:	42a5      	cmp	r5, r4
    d1e2:	d900      	bls.n	d1e6 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d1e4:	800c      	strh	r4, [r1, #0]
    d1e6:	895c      	ldrh	r4, [r3, #10]
    d1e8:	b124      	cbz	r4, d1f4 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d1ea:	2400      	movs	r4, #0
    d1ec:	7014      	strb	r4, [r2, #0]
    d1ee:	8809      	ldrh	r1, [r1, #0]
    d1f0:	81d9      	strh	r1, [r3, #14]
    d1f2:	bd70      	pop	{r4, r5, r6, pc}
    d1f4:	2401      	movs	r4, #1
    d1f6:	e7f9      	b.n	d1ec <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d1f8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d1fc:	461d      	mov	r5, r3
    d1fe:	4616      	mov	r6, r2
    d200:	9f06      	ldr	r7, [sp, #24]
    d202:	460b      	mov	r3, r1
    d204:	4604      	mov	r4, r0
    d206:	463a      	mov	r2, r7
    d208:	4629      	mov	r1, r5
    d20a:	4630      	mov	r0, r6
    d20c:	f000 f839 	bl	d282 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d210:	4283      	cmp	r3, r0
    d212:	d201      	bcs.n	d218 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d214:	219e      	movs	r1, #158	; 0x9e
    d216:	e012      	b.n	d23e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d218:	07a0      	lsls	r0, r4, #30
    d21a:	d001      	beq.n	d220 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    d21c:	219f      	movs	r1, #159	; 0x9f
    d21e:	e00e      	b.n	d23e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d220:	2218      	movs	r2, #24
    d222:	2100      	movs	r1, #0
    d224:	4620      	mov	r0, r4
    d226:	f003 fbc4 	bl	109b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d22a:	19a8      	adds	r0, r5, r6
    d22c:	1d40      	adds	r0, r0, #5
    d22e:	4378      	muls	r0, r7
    d230:	b280      	uxth	r0, r0
    d232:	74e5      	strb	r5, [r4, #19]
    d234:	8060      	strh	r0, [r4, #2]
    d236:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d23a:	d903      	bls.n	d244 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    d23c:	21a4      	movs	r1, #164	; 0xa4
    d23e:	2014      	movs	r0, #20
    d240:	f7f3 fbb6 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d244:	8026      	strh	r6, [r4, #0]
    d246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d24a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d24a:	b570      	push	{r4, r5, r6, lr}
    d24c:	460b      	mov	r3, r1
    d24e:	4604      	mov	r4, r0
    d250:	f100 0118 	add.w	r1, r0, #24
    d254:	8902      	ldrh	r2, [r0, #8]
    d256:	8880      	ldrh	r0, [r0, #4]
    d258:	f3c2 050e 	ubfx	r5, r2, #0, #15
    d25c:	440d      	add	r5, r1
    d25e:	4282      	cmp	r2, r0
    d260:	d101      	bne.n	d266 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    d262:	2000      	movs	r0, #0
    d264:	bd70      	pop	{r4, r5, r6, pc}
    d266:	b123      	cbz	r3, d272 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    d268:	7ce2      	ldrb	r2, [r4, #19]
    d26a:	1ca9      	adds	r1, r5, #2
    d26c:	4618      	mov	r0, r3
    d26e:	f003 fb26 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d272:	882d      	ldrh	r5, [r5, #0]
    d274:	f104 0108 	add.w	r1, r4, #8
    d278:	4620      	mov	r0, r4
    d27a:	f7ff fe48 	bl	cf0e <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d27e:	4628      	mov	r0, r5
    d280:	bd70      	pop	{r4, r5, r6, pc}

0000d282 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d282:	4401      	add	r1, r0
    d284:	1d49      	adds	r1, r1, #5
    d286:	4351      	muls	r1, r2
    d288:	b28a      	uxth	r2, r1
    d28a:	2100      	movs	r1, #0
    d28c:	2845      	cmp	r0, #69	; 0x45
    d28e:	d202      	bcs.n	d296 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    d290:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    d294:	b281      	uxth	r1, r0
    d296:	3218      	adds	r2, #24
    d298:	1850      	adds	r0, r2, r1
    d29a:	b280      	uxth	r0, r0
    d29c:	4770      	bx	lr

0000d29e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d29e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d2a2:	4688      	mov	r8, r1
    d2a4:	88c1      	ldrh	r1, [r0, #6]
    d2a6:	4604      	mov	r4, r0
    d2a8:	8900      	ldrh	r0, [r0, #8]
    d2aa:	f3c1 060e 	ubfx	r6, r1, #0, #15
    d2ae:	f104 0518 	add.w	r5, r4, #24
    d2b2:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d2b6:	eb05 0906 	add.w	r9, r5, r6
    d2ba:	f7ff fe49 	bl	cf50 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d2be:	2200      	movs	r2, #0
    d2c0:	b998      	cbnz	r0, d2ea <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d2c2:	8820      	ldrh	r0, [r4, #0]
    d2c4:	2845      	cmp	r0, #69	; 0x45
    d2c6:	d200      	bcs.n	d2ca <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d2c8:	2045      	movs	r0, #69	; 0x45
    d2ca:	42b7      	cmp	r7, r6
    d2cc:	d906      	bls.n	d2dc <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d2ce:	7ce3      	ldrb	r3, [r4, #19]
    d2d0:	1bb9      	subs	r1, r7, r6
    d2d2:	1ac9      	subs	r1, r1, r3
    d2d4:	1f49      	subs	r1, r1, #5
    d2d6:	4281      	cmp	r1, r0
    d2d8:	da00      	bge.n	d2dc <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d2da:	4608      	mov	r0, r1
    d2dc:	89a1      	ldrh	r1, [r4, #12]
    d2de:	b111      	cbz	r1, d2e6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d2e0:	f8b9 3000 	ldrh.w	r3, [r9]
    d2e4:	1ac0      	subs	r0, r0, r3
    d2e6:	4540      	cmp	r0, r8
    d2e8:	da03      	bge.n	d2f2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d2ea:	8222      	strh	r2, [r4, #16]
    d2ec:	2000      	movs	r0, #0
    d2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d2f2:	7ce0      	ldrb	r0, [r4, #19]
    d2f4:	4429      	add	r1, r5
    d2f6:	1d40      	adds	r0, r0, #5
    d2f8:	4430      	add	r0, r6
    d2fa:	4408      	add	r0, r1
    d2fc:	f8a4 8010 	strh.w	r8, [r4, #16]
    d300:	1ec0      	subs	r0, r0, #3
    d302:	e7f4      	b.n	d2ee <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d304 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d304:	b570      	push	{r4, r5, r6, lr}
    d306:	2300      	movs	r3, #0
    d308:	f1a1 0208 	sub.w	r2, r1, #8
    d30c:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    d310:	42a2      	cmp	r2, r4
    d312:	d304      	bcc.n	d31e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d314:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    d318:	2015      	movs	r0, #21
    d31a:	f7f3 fb49 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d31e:	6802      	ldr	r2, [r0, #0]
    d320:	b90a      	cbnz	r2, d326 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    d322:	e01e      	b.n	d362 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d324:	4610      	mov	r0, r2
    d326:	6802      	ldr	r2, [r0, #0]
    d328:	8893      	ldrh	r3, [r2, #4]
    d32a:	428b      	cmp	r3, r1
    d32c:	d002      	beq.n	d334 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    d32e:	6813      	ldr	r3, [r2, #0]
    d330:	2b00      	cmp	r3, #0
    d332:	d1f7      	bne.n	d324 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    d334:	8894      	ldrh	r4, [r2, #4]
    d336:	4613      	mov	r3, r2
    d338:	428c      	cmp	r4, r1
    d33a:	d101      	bne.n	d340 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    d33c:	6811      	ldr	r1, [r2, #0]
    d33e:	e00d      	b.n	d35c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    d340:	f101 0508 	add.w	r5, r1, #8
    d344:	b2ae      	uxth	r6, r5
    d346:	2500      	movs	r5, #0
    d348:	42b4      	cmp	r4, r6
    d34a:	d309      	bcc.n	d360 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    d34c:	1a64      	subs	r4, r4, r1
    d34e:	4411      	add	r1, r2
    d350:	600d      	str	r5, [r1, #0]
    d352:	808c      	strh	r4, [r1, #4]
    d354:	6802      	ldr	r2, [r0, #0]
    d356:	6812      	ldr	r2, [r2, #0]
    d358:	6002      	str	r2, [r0, #0]
    d35a:	600a      	str	r2, [r1, #0]
    d35c:	6001      	str	r1, [r0, #0]
    d35e:	e000      	b.n	d362 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d360:	2300      	movs	r3, #0
    d362:	4618      	mov	r0, r3
    d364:	bd70      	pop	{r4, r5, r6, pc}

0000d366 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d366:	b510      	push	{r4, lr}
    d368:	000c      	movs	r4, r1
    d36a:	d004      	beq.n	d376 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    d36c:	2c08      	cmp	r4, #8
    d36e:	d207      	bcs.n	d380 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d370:	f44f 71cd 	mov.w	r1, #410	; 0x19a
    d374:	e00a      	b.n	d38c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    d376:	b108      	cbz	r0, d37c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    d378:	2100      	movs	r1, #0
    d37a:	6001      	str	r1, [r0, #0]
    d37c:	2000      	movs	r0, #0
    d37e:	bd10      	pop	{r4, pc}
    d380:	b158      	cbz	r0, d39a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    d382:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    d386:	d304      	bcc.n	d392 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    d388:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    d38c:	2015      	movs	r0, #21
    d38e:	f7f3 fb0f 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d392:	b2a1      	uxth	r1, r4
    d394:	6800      	ldr	r0, [r0, #0]
    d396:	f000 f814 	bl	d3c2 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d39a:	1d20      	adds	r0, r4, #4
    d39c:	bd10      	pop	{r4, pc}

0000d39e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d39e:	2100      	movs	r1, #0
    d3a0:	6802      	ldr	r2, [r0, #0]
    d3a2:	e003      	b.n	d3ac <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d3a4:	8893      	ldrh	r3, [r2, #4]
    d3a6:	6812      	ldr	r2, [r2, #0]
    d3a8:	4419      	add	r1, r3
    d3aa:	b289      	uxth	r1, r1
    d3ac:	2a00      	cmp	r2, #0
    d3ae:	d1f9      	bne.n	d3a4 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d3b0:	f000 b807 	b.w	d3c2 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d3b4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d3b4:	2300      	movs	r3, #0
    d3b6:	600b      	str	r3, [r1, #0]
    d3b8:	808a      	strh	r2, [r1, #4]
    d3ba:	6802      	ldr	r2, [r0, #0]
    d3bc:	600a      	str	r2, [r1, #0]
    d3be:	6001      	str	r1, [r0, #0]
    d3c0:	4770      	bx	lr
    d3c2:	2300      	movs	r3, #0
    d3c4:	6043      	str	r3, [r0, #4]
    d3c6:	1d02      	adds	r2, r0, #4
    d3c8:	8101      	strh	r1, [r0, #8]
    d3ca:	6002      	str	r2, [r0, #0]
    d3cc:	4770      	bx	lr
    d3ce:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    d3d2:	8159      	strh	r1, [r3, #10]
    d3d4:	4611      	mov	r1, r2
    d3d6:	f000 b814 	b.w	d402 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    d3da:	b170      	cbz	r0, d3fa <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x46>
    d3dc:	7882      	ldrb	r2, [r0, #2]
    d3de:	fbb1 f3f2 	udiv	r3, r1, r2
    d3e2:	fb02 1213 	mls	r2, r2, r3, r1
    d3e6:	b2d2      	uxtb	r2, r2
    d3e8:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    d3ec:	895b      	ldrh	r3, [r3, #10]
    d3ee:	428b      	cmp	r3, r1
    d3f0:	d101      	bne.n	d3f6 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x42>
    d3f2:	4610      	mov	r0, r2
    d3f4:	4770      	bx	lr
    d3f6:	78c3      	ldrb	r3, [r0, #3]
    d3f8:	b10b      	cbz	r3, d3fe <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4a>
    d3fa:	20ff      	movs	r0, #255	; 0xff
    d3fc:	4770      	bx	lr
    d3fe:	f7f3 bdb9 	b.w	f74 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
    d402:	8802      	ldrh	r2, [r0, #0]
    d404:	fb01 0102 	mla	r1, r1, r2, r0
    d408:	7880      	ldrb	r0, [r0, #2]
    d40a:	220a      	movs	r2, #10
    d40c:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    d410:	4408      	add	r0, r1
    d412:	4770      	bx	lr

0000d414 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    d414:	b51c      	push	{r2, r3, r4, lr}
    d416:	4604      	mov	r4, r0
    d418:	2000      	movs	r0, #0
    d41a:	9001      	str	r0, [sp, #4]
    d41c:	9000      	str	r0, [sp, #0]
    d41e:	f88d 4006 	strb.w	r4, [sp, #6]
    d422:	e00a      	b.n	d43a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d424:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d428:	4621      	mov	r1, r4
    d42a:	f7f3 fe91 	bl	1150 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    d42e:	b120      	cbz	r0, d43a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d430:	f240 217e 	movw	r1, #638	; 0x27e
    d434:	2017      	movs	r0, #23
    d436:	f7f3 fabb 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d43a:	4668      	mov	r0, sp
    d43c:	f7f3 fe38 	bl	10b0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    d440:	2800      	cmp	r0, #0
    d442:	d0ef      	beq.n	d424 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    d444:	bd1c      	pop	{r2, r3, r4, pc}

0000d446 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d446:	b570      	push	{r4, r5, r6, lr}
    d448:	460e      	mov	r6, r1
    d44a:	461d      	mov	r5, r3
    d44c:	4611      	mov	r1, r2
    d44e:	f000 f813 	bl	d478 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    d452:	4604      	mov	r4, r0
    d454:	4629      	mov	r1, r5
    d456:	4630      	mov	r0, r6
    d458:	f000 f804 	bl	d464 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    d45c:	4420      	add	r0, r4
    d45e:	1d00      	adds	r0, r0, #4
    d460:	b280      	uxth	r0, r0
    d462:	bd70      	pop	{r4, r5, r6, pc}
    d464:	b510      	push	{r4, lr}
    d466:	460a      	mov	r2, r1
    d468:	2109      	movs	r1, #9
    d46a:	f7ff ff0a 	bl	d282 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d46e:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d472:	1cc0      	adds	r0, r0, #3
    d474:	4008      	ands	r0, r1
    d476:	bd10      	pop	{r4, pc}
    d478:	b510      	push	{r4, lr}
    d47a:	460a      	mov	r2, r1
    d47c:	210a      	movs	r1, #10
    d47e:	f7ff ff00 	bl	d282 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d482:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d486:	1cc0      	adds	r0, r0, #3
    d488:	4008      	ands	r0, r1
    d48a:	bd10      	pop	{r4, pc}
    d48c:	b109      	cbz	r1, d492 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    d48e:	2100      	movs	r1, #0
    d490:	e000      	b.n	d494 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    d492:	2102      	movs	r1, #2
    d494:	1843      	adds	r3, r0, r1
    d496:	7d1a      	ldrb	r2, [r3, #20]
    d498:	2a02      	cmp	r2, #2
    d49a:	d008      	beq.n	d4ae <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d49c:	7d5b      	ldrb	r3, [r3, #21]
    d49e:	2b02      	cmp	r3, #2
    d4a0:	d009      	beq.n	d4b6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d4a2:	2a03      	cmp	r2, #3
    d4a4:	d003      	beq.n	d4ae <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d4a6:	2b03      	cmp	r3, #3
    d4a8:	d005      	beq.n	d4b6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d4aa:	2000      	movs	r0, #0
    d4ac:	4770      	bx	lr
    d4ae:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d4b2:	8b00      	ldrh	r0, [r0, #24]
    d4b4:	4770      	bx	lr
    d4b6:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d4ba:	8b40      	ldrh	r0, [r0, #26]
    d4bc:	4770      	bx	lr
    d4be:	b109      	cbz	r1, d4c4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    d4c0:	2100      	movs	r1, #0
    d4c2:	e000      	b.n	d4c6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    d4c4:	2102      	movs	r1, #2
    d4c6:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d4ca:	8b01      	ldrh	r1, [r0, #24]
    d4cc:	b911      	cbnz	r1, d4d4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    d4ce:	8b40      	ldrh	r0, [r0, #26]
    d4d0:	2800      	cmp	r0, #0
    d4d2:	d000      	beq.n	d4d6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    d4d4:	2001      	movs	r0, #1
    d4d6:	4770      	bx	lr
    d4d8:	b538      	push	{r3, r4, r5, lr}
    d4da:	7883      	ldrb	r3, [r0, #2]
    d4dc:	f88d 3000 	strb.w	r3, [sp]
    d4e0:	9b00      	ldr	r3, [sp, #0]
    d4e2:	9300      	str	r3, [sp, #0]
    d4e4:	f89d 3000 	ldrb.w	r3, [sp]
    d4e8:	b95b      	cbnz	r3, d502 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    d4ea:	2400      	movs	r4, #0
    d4ec:	b10a      	cbz	r2, d4f2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    d4ee:	2300      	movs	r3, #0
    d4f0:	e000      	b.n	d4f4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    d4f2:	2302      	movs	r3, #2
    d4f4:	18c2      	adds	r2, r0, r3
    d4f6:	7d15      	ldrb	r5, [r2, #20]
    d4f8:	2d02      	cmp	r5, #2
    d4fa:	d004      	beq.n	d506 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    d4fc:	7d52      	ldrb	r2, [r2, #21]
    d4fe:	2a02      	cmp	r2, #2
    d500:	d004      	beq.n	d50c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    d502:	2000      	movs	r0, #0
    d504:	bd38      	pop	{r3, r4, r5, pc}
    d506:	461a      	mov	r2, r3
    d508:	1c5b      	adds	r3, r3, #1
    d50a:	e000      	b.n	d50e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    d50c:	1c5a      	adds	r2, r3, #1
    d50e:	b179      	cbz	r1, d530 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    d510:	18c5      	adds	r5, r0, r3
    d512:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d516:	752c      	strb	r4, [r5, #20]
    d518:	831c      	strh	r4, [r3, #24]
    d51a:	2303      	movs	r3, #3
    d51c:	1884      	adds	r4, r0, r2
    d51e:	7523      	strb	r3, [r4, #20]
    d520:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d524:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    d528:	685b      	ldr	r3, [r3, #4]
    d52a:	600b      	str	r3, [r1, #0]
    d52c:	8b00      	ldrh	r0, [r0, #24]
    d52e:	8088      	strh	r0, [r1, #4]
    d530:	2001      	movs	r0, #1
    d532:	bd38      	pop	{r3, r4, r5, pc}
    d534:	b510      	push	{r4, lr}
    d536:	b109      	cbz	r1, d53c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    d538:	2100      	movs	r1, #0
    d53a:	e000      	b.n	d53e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    d53c:	2102      	movs	r1, #2
    d53e:	1843      	adds	r3, r0, r1
    d540:	7d1c      	ldrb	r4, [r3, #20]
    d542:	4294      	cmp	r4, r2
    d544:	d103      	bne.n	d54e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    d546:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d54a:	8b00      	ldrh	r0, [r0, #24]
    d54c:	bd10      	pop	{r4, pc}
    d54e:	7d5b      	ldrb	r3, [r3, #21]
    d550:	4293      	cmp	r3, r2
    d552:	d103      	bne.n	d55c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    d554:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d558:	8b40      	ldrh	r0, [r0, #26]
    d55a:	bd10      	pop	{r4, pc}
    d55c:	2000      	movs	r0, #0
    d55e:	bd10      	pop	{r4, pc}
    d560:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    d564:	d201      	bcs.n	d56a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    d566:	0841      	lsrs	r1, r0, #1
    d568:	e000      	b.n	d56c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    d56a:	21ff      	movs	r1, #255	; 0xff
    d56c:	1a40      	subs	r0, r0, r1
    d56e:	f240 6172 	movw	r1, #1650	; 0x672
    d572:	4288      	cmp	r0, r1
    d574:	db00      	blt.n	d578 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    d576:	4608      	mov	r0, r1
    d578:	b280      	uxth	r0, r0
    d57a:	4770      	bx	lr

0000d57c <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    d57c:	2101      	movs	r1, #1
    d57e:	f7ff bf85 	b.w	d48c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0000d582 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    d582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d586:	4606      	mov	r6, r0
    d588:	f342 0780 	sbfx	r7, r2, #2, #1
    d58c:	7848      	ldrb	r0, [r1, #1]
    d58e:	460c      	mov	r4, r1
    d590:	f022 0504 	bic.w	r5, r2, #4
    d594:	1c7f      	adds	r7, r7, #1
    d596:	b100      	cbz	r0, d59a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    d598:	b90d      	cbnz	r5, d59e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    d59a:	4328      	orrs	r0, r5
    d59c:	d104      	bne.n	d5a8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    d59e:	b145      	cbz	r5, d5b2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    d5a0:	2100      	movs	r1, #0
    d5a2:	4620      	mov	r0, r4
    d5a4:	f7f3 fef4 	bl	1390 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x8>
    d5a8:	20ff      	movs	r0, #255	; 0xff
    d5aa:	70a0      	strb	r0, [r4, #2]
    d5ac:	b11f      	cbz	r7, d5b6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    d5ae:	2000      	movs	r0, #0
    d5b0:	e002      	b.n	d5b8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    d5b2:	2101      	movs	r1, #1
    d5b4:	e7f5      	b.n	d5a2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    d5b6:	2002      	movs	r0, #2
    d5b8:	1821      	adds	r1, r4, r0
    d5ba:	7d09      	ldrb	r1, [r1, #20]
    d5bc:	2903      	cmp	r1, #3
    d5be:	d102      	bne.n	d5c6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d5c0:	2d02      	cmp	r5, #2
    d5c2:	d000      	beq.n	d5c6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d5c4:	1c40      	adds	r0, r0, #1
    d5c6:	1822      	adds	r2, r4, r0
    d5c8:	2101      	movs	r1, #1
    d5ca:	7511      	strb	r1, [r2, #20]
    d5cc:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    d5d0:	2200      	movs	r2, #0
    d5d2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d5d6:	830a      	strh	r2, [r1, #24]
    d5d8:	6840      	ldr	r0, [r0, #4]
    d5da:	70a2      	strb	r2, [r4, #2]
    d5dc:	4631      	mov	r1, r6
    d5de:	f362 010f 	bfi	r1, r2, #0, #16
    d5e2:	e9c6 0100 	strd	r0, r1, [r6]
    d5e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d5ea <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    d5ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d5ee:	461e      	mov	r6, r3
    d5f0:	4613      	mov	r3, r2
    d5f2:	4604      	mov	r4, r0
    d5f4:	b109      	cbz	r1, d5fa <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    d5f6:	2000      	movs	r0, #0
    d5f8:	e000      	b.n	d5fc <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    d5fa:	2002      	movs	r0, #2
    d5fc:	21ff      	movs	r1, #255	; 0xff
    d5fe:	70a1      	strb	r1, [r4, #2]
    d600:	1821      	adds	r1, r4, r0
    d602:	7d0a      	ldrb	r2, [r1, #20]
    d604:	2a01      	cmp	r2, #1
    d606:	d003      	beq.n	d610 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    d608:	7d49      	ldrb	r1, [r1, #21]
    d60a:	2901      	cmp	r1, #1
    d60c:	d10c      	bne.n	d628 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    d60e:	1c40      	adds	r0, r0, #1
    d610:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    d614:	2700      	movs	r7, #0
    d616:	8b29      	ldrh	r1, [r5, #24]
    d618:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    d61c:	198a      	adds	r2, r1, r6
    d61e:	4562      	cmp	r2, ip
    d620:	d905      	bls.n	d62e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    d622:	4420      	add	r0, r4
    d624:	832f      	strh	r7, [r5, #24]
    d626:	7507      	strb	r7, [r0, #20]
    d628:	2000      	movs	r0, #0
    d62a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d62e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d632:	4632      	mov	r2, r6
    d634:	6840      	ldr	r0, [r0, #4]
    d636:	4408      	add	r0, r1
    d638:	4619      	mov	r1, r3
    d63a:	f003 f940 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d63e:	8b28      	ldrh	r0, [r5, #24]
    d640:	4430      	add	r0, r6
    d642:	8328      	strh	r0, [r5, #24]
    d644:	70a7      	strb	r7, [r4, #2]
    d646:	2001      	movs	r0, #1
    d648:	e7ef      	b.n	d62a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000d64a <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    d64a:	b510      	push	{r4, lr}
    d64c:	2101      	movs	r1, #1
    d64e:	f7ff ff36 	bl	d4be <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    d652:	2800      	cmp	r0, #0
    d654:	d000      	beq.n	d658 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    d656:	2001      	movs	r0, #1
    d658:	bd10      	pop	{r4, pc}

0000d65a <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    d65a:	2201      	movs	r2, #1
    d65c:	f7ff bf3c 	b.w	d4d8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000d660 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    d660:	2200      	movs	r2, #0
    d662:	f7ff bf39 	b.w	d4d8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000d666 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>:
    d666:	b510      	push	{r4, lr}
    d668:	2100      	movs	r1, #0
    d66a:	f7ff ff28 	bl	d4be <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    d66e:	2800      	cmp	r0, #0
    d670:	d000      	beq.n	d674 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I+0xe>
    d672:	2001      	movs	r0, #1
    d674:	bd10      	pop	{r4, pc}

0000d676 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    d676:	b570      	push	{r4, r5, r6, lr}
    d678:	b109      	cbz	r1, d67e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    d67a:	2300      	movs	r3, #0
    d67c:	e000      	b.n	d680 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    d67e:	2302      	movs	r3, #2
    d680:	21ff      	movs	r1, #255	; 0xff
    d682:	7081      	strb	r1, [r0, #2]
    d684:	18c1      	adds	r1, r0, r3
    d686:	2402      	movs	r4, #2
    d688:	7d0d      	ldrb	r5, [r1, #20]
    d68a:	2d01      	cmp	r5, #1
    d68c:	d007      	beq.n	d69e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    d68e:	7d4d      	ldrb	r5, [r1, #21]
    d690:	2d01      	cmp	r5, #1
    d692:	d009      	beq.n	d6a8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    d694:	f44f 718b 	mov.w	r1, #278	; 0x116
    d698:	2009      	movs	r0, #9
    d69a:	f7f3 f989 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d69e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d6a2:	831a      	strh	r2, [r3, #24]
    d6a4:	750c      	strb	r4, [r1, #20]
    d6a6:	e003      	b.n	d6b0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    d6a8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d6ac:	835a      	strh	r2, [r3, #26]
    d6ae:	754c      	strb	r4, [r1, #21]
    d6b0:	2100      	movs	r1, #0
    d6b2:	7081      	strb	r1, [r0, #2]
    d6b4:	bd70      	pop	{r4, r5, r6, pc}

0000d6b6 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    d6b6:	2101      	movs	r1, #1
    d6b8:	7001      	strb	r1, [r0, #0]
    d6ba:	4770      	bx	lr

0000d6bc <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    d6bc:	2201      	movs	r2, #1
    d6be:	4611      	mov	r1, r2
    d6c0:	f7ff bf38 	b.w	d534 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000d6c4 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    d6c4:	2201      	movs	r2, #1
    d6c6:	2100      	movs	r1, #0
    d6c8:	f7ff bf34 	b.w	d534 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000d6cc <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    d6cc:	2100      	movs	r1, #0
    d6ce:	f7ff bedd 	b.w	d48c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    d6d2:	2800      	cmp	r0, #0
    d6d4:	db09      	blt.n	d6ea <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    d6d6:	f000 021f 	and.w	r2, r0, #31
    d6da:	2101      	movs	r1, #1
    d6dc:	4091      	lsls	r1, r2
    d6de:	0940      	lsrs	r0, r0, #5
    d6e0:	0080      	lsls	r0, r0, #2
    d6e2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d6e6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d6ea:	4770      	bx	lr
    d6ec:	2800      	cmp	r0, #0
    d6ee:	db0d      	blt.n	d70c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    d6f0:	f000 021f 	and.w	r2, r0, #31
    d6f4:	2101      	movs	r1, #1
    d6f6:	4091      	lsls	r1, r2
    d6f8:	0940      	lsrs	r0, r0, #5
    d6fa:	0080      	lsls	r0, r0, #2
    d6fc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d700:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d704:	f3bf 8f4f 	dsb	sy
    d708:	f3bf 8f6f 	isb	sy
    d70c:	4770      	bx	lr
    d70e:	b510      	push	{r4, lr}
    d710:	200e      	movs	r0, #14
    d712:	f7ff ffeb 	bl	d6ec <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    d716:	200e      	movs	r0, #14
    d718:	f7ff ffdb 	bl	d6d2 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    d71c:	200f      	movs	r0, #15
    d71e:	f7ff ffe5 	bl	d6ec <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    d722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d726:	200f      	movs	r0, #15
    d728:	f7ff bfd3 	b.w	d6d2 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    d72c:	2800      	cmp	r0, #0
    d72e:	db09      	blt.n	d744 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    d730:	f000 021f 	and.w	r2, r0, #31
    d734:	2101      	movs	r1, #1
    d736:	4091      	lsls	r1, r2
    d738:	0940      	lsrs	r0, r0, #5
    d73a:	0080      	lsls	r0, r0, #2
    d73c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d740:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d744:	4770      	bx	lr
    d746:	5840      	ldr	r0, [r0, r1]
    d748:	2800      	cmp	r0, #0
    d74a:	d000      	beq.n	d74e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    d74c:	2001      	movs	r0, #1
    d74e:	4770      	bx	lr

0000d750 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    d750:	b510      	push	{r4, lr}
    d752:	4604      	mov	r4, r0
    d754:	4620      	mov	r0, r4
    d756:	f7f3 ff23 	bl	15a0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    d75a:	2811      	cmp	r0, #17
    d75c:	d0fa      	beq.n	d754 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    d75e:	bd10      	pop	{r4, pc}

0000d760 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d760:	b510      	push	{r4, lr}
    d762:	f7ff fff5 	bl	d750 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    d766:	2800      	cmp	r0, #0
    d768:	d003      	beq.n	d772 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    d76a:	21a9      	movs	r1, #169	; 0xa9
    d76c:	201d      	movs	r0, #29
    d76e:	f7f3 f91f 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d772:	bd10      	pop	{r4, pc}

0000d774 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d774:	f7f4 b872 	b.w	185c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d778 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d778:	f7f4 b860 	b.w	183c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d77c <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    d77c:	b510      	push	{r4, lr}
    d77e:	4050      	eors	r0, r2
    d780:	780a      	ldrb	r2, [r1, #0]
    d782:	781c      	ldrb	r4, [r3, #0]
    d784:	4062      	eors	r2, r4
    d786:	4410      	add	r0, r2
    d788:	784a      	ldrb	r2, [r1, #1]
    d78a:	785c      	ldrb	r4, [r3, #1]
    d78c:	4062      	eors	r2, r4
    d78e:	4410      	add	r0, r2
    d790:	788a      	ldrb	r2, [r1, #2]
    d792:	789c      	ldrb	r4, [r3, #2]
    d794:	4062      	eors	r2, r4
    d796:	4410      	add	r0, r2
    d798:	78ca      	ldrb	r2, [r1, #3]
    d79a:	78dc      	ldrb	r4, [r3, #3]
    d79c:	4062      	eors	r2, r4
    d79e:	4410      	add	r0, r2
    d7a0:	790a      	ldrb	r2, [r1, #4]
    d7a2:	791c      	ldrb	r4, [r3, #4]
    d7a4:	7949      	ldrb	r1, [r1, #5]
    d7a6:	4062      	eors	r2, r4
    d7a8:	4410      	add	r0, r2
    d7aa:	795a      	ldrb	r2, [r3, #5]
    d7ac:	4051      	eors	r1, r2
    d7ae:	42c1      	cmn	r1, r0
    d7b0:	d101      	bne.n	d7b6 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    d7b2:	2001      	movs	r0, #1
    d7b4:	bd10      	pop	{r4, pc}
    d7b6:	2000      	movs	r0, #0
    d7b8:	bd10      	pop	{r4, pc}

0000d7ba <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    d7ba:	b510      	push	{r4, lr}
    d7bc:	2900      	cmp	r1, #0
    d7be:	4604      	mov	r4, r0
    d7c0:	f04f 0106 	mov.w	r1, #6
    d7c4:	d002      	beq.n	d7cc <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    d7c6:	f7f3 f995 	bl	af4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d7ca:	e001      	b.n	d7d0 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    d7cc:	f7f3 f9a0 	bl	b10 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d7d0:	7960      	ldrb	r0, [r4, #5]
    d7d2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d7d6:	7160      	strb	r0, [r4, #5]
    d7d8:	bd10      	pop	{r4, pc}

0000d7da <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    d7da:	4770      	bx	lr

0000d7dc <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    d7dc:	b530      	push	{r4, r5, lr}
    d7de:	460c      	mov	r4, r1
    d7e0:	4605      	mov	r5, r0
    d7e2:	b08d      	sub	sp, #52	; 0x34
    d7e4:	f04f 0103 	mov.w	r1, #3
    d7e8:	f104 0003 	add.w	r0, r4, #3
    d7ec:	b112      	cbz	r2, d7f4 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    d7ee:	f7f3 f981 	bl	af4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d7f2:	e001      	b.n	d7f8 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    d7f4:	f7f3 f98c 	bl	b10 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d7f8:	7960      	ldrb	r0, [r4, #5]
    d7fa:	220d      	movs	r2, #13
    d7fc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d800:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    d804:	7160      	strb	r0, [r4, #5]
    d806:	2100      	movs	r1, #0
    d808:	a804      	add	r0, sp, #16
    d80a:	f003 f8d2 	bl	109b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d80e:	78e0      	ldrb	r0, [r4, #3]
    d810:	f88d 001f 	strb.w	r0, [sp, #31]
    d814:	7920      	ldrb	r0, [r4, #4]
    d816:	f88d 001e 	strb.w	r0, [sp, #30]
    d81a:	7960      	ldrb	r0, [r4, #5]
    d81c:	f88d 001d 	strb.w	r0, [sp, #29]
    d820:	2210      	movs	r2, #16
    d822:	4629      	mov	r1, r5
    d824:	4668      	mov	r0, sp
    d826:	f003 f84a 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d82a:	4668      	mov	r0, sp
    d82c:	f7ff ff98 	bl	d760 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d830:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    d834:	7020      	strb	r0, [r4, #0]
    d836:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    d83a:	7060      	strb	r0, [r4, #1]
    d83c:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    d840:	70a0      	strb	r0, [r4, #2]
    d842:	b00d      	add	sp, #52	; 0x34
    d844:	bd30      	pop	{r4, r5, pc}

0000d846 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A>:
    d846:	f7f4 bb73 	b.w	1f30 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e4>
    d84a:	07c1      	lsls	r1, r0, #31
    d84c:	d001      	beq.n	d852 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0xc>
    d84e:	2001      	movs	r0, #1
    d850:	4770      	bx	lr
    d852:	0780      	lsls	r0, r0, #30
    d854:	d501      	bpl.n	d85a <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x14>
    d856:	2002      	movs	r0, #2
    d858:	4770      	bx	lr
    d85a:	2000      	movs	r0, #0
    d85c:	4770      	bx	lr
    d85e:	b510      	push	{r4, lr}
    d860:	2801      	cmp	r0, #1
    d862:	d008      	beq.n	d876 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x30>
    d864:	2802      	cmp	r0, #2
    d866:	d004      	beq.n	d872 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x2c>
    d868:	f240 4121 	movw	r1, #1057	; 0x421
    d86c:	2006      	movs	r0, #6
    d86e:	f7f3 f89f 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d872:	2001      	movs	r0, #1
    d874:	bd10      	pop	{r4, pc}
    d876:	2000      	movs	r0, #0
    d878:	bd10      	pop	{r4, pc}
    d87a:	2900      	cmp	r1, #0
    d87c:	d004      	beq.n	d888 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x42>
    d87e:	2801      	cmp	r0, #1
    d880:	d003      	beq.n	d88a <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x44>
    d882:	2901      	cmp	r1, #1
    d884:	d001      	beq.n	d88a <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x44>
    d886:	2002      	movs	r0, #2
    d888:	4770      	bx	lr
    d88a:	2001      	movs	r0, #1
    d88c:	4770      	bx	lr
    d88e:	f7ff bc90 	b.w	d1b2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000d892 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    d892:	2101      	movs	r1, #1
    d894:	f7f4 be6a 	b.w	256c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc>

0000d898 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    d898:	b510      	push	{r4, lr}
    d89a:	f002 fde3 	bl	10464 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    d89e:	b118      	cbz	r0, d8a8 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    d8a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d8a4:	f7f9 beba 	b.w	761c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    d8a8:	20ff      	movs	r0, #255	; 0xff
    d8aa:	bd10      	pop	{r4, pc}

0000d8ac <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    d8ac:	b510      	push	{r4, lr}
    d8ae:	f7f4 fe89 	bl	25c4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    d8b2:	2808      	cmp	r0, #8
    d8b4:	d003      	beq.n	d8be <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    d8b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d8ba:	f7f4 be6f 	b.w	259c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    d8be:	bd10      	pop	{r4, pc}

0000d8c0 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    d8c0:	b510      	push	{r4, lr}
    d8c2:	f7f4 fe7f 	bl	25c4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    d8c6:	2808      	cmp	r0, #8
    d8c8:	d007      	beq.n	d8da <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d8ca:	f7f4 fe67 	bl	259c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    d8ce:	2808      	cmp	r0, #8
    d8d0:	d003      	beq.n	d8da <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    d8d2:	f7f4 fed9 	bl	2688 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x128>
    d8d6:	2001      	movs	r0, #1
    d8d8:	bd10      	pop	{r4, pc}
    d8da:	2000      	movs	r0, #0
    d8dc:	bd10      	pop	{r4, pc}

0000d8de <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    d8de:	b570      	push	{r4, r5, r6, lr}
    d8e0:	460e      	mov	r6, r1
    d8e2:	b08c      	sub	sp, #48	; 0x30
    d8e4:	4614      	mov	r4, r2
    d8e6:	4601      	mov	r1, r0
    d8e8:	461d      	mov	r5, r3
    d8ea:	2210      	movs	r2, #16
    d8ec:	4668      	mov	r0, sp
    d8ee:	f000 f929 	bl	db44 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d8f2:	2210      	movs	r2, #16
    d8f4:	4631      	mov	r1, r6
    d8f6:	a804      	add	r0, sp, #16
    d8f8:	f000 f924 	bl	db44 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d8fc:	4668      	mov	r0, sp
    d8fe:	f7ff ff2f 	bl	d760 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d902:	a908      	add	r1, sp, #32
    d904:	f04f 0210 	mov.w	r2, #16
    d908:	4628      	mov	r0, r5
    d90a:	b11c      	cbz	r4, d914 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    d90c:	f000 f91a 	bl	db44 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    d910:	b00c      	add	sp, #48	; 0x30
    d912:	bd70      	pop	{r4, r5, r6, pc}
    d914:	f002 ffd3 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d918:	e7fa      	b.n	d910 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000d91a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    d91a:	b510      	push	{r4, lr}
    d91c:	460c      	mov	r4, r1
    d91e:	2100      	movs	r1, #0
    d920:	f7f3 fb74 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    d924:	6060      	str	r0, [r4, #4]
    d926:	b118      	cbz	r0, d930 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    d928:	2001      	movs	r0, #1
    d92a:	7020      	strb	r0, [r4, #0]
    d92c:	2000      	movs	r0, #0
    d92e:	bd10      	pop	{r4, pc}
    d930:	2002      	movs	r0, #2
    d932:	bd10      	pop	{r4, pc}

0000d934 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    d934:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d938:	4348      	muls	r0, r1
    d93a:	4770      	bx	lr

0000d93c <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    d93c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d940:	fbb0 f0f1 	udiv	r0, r0, r1
    d944:	b280      	uxth	r0, r0
    d946:	4770      	bx	lr

0000d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    d948:	b510      	push	{r4, lr}
    d94a:	f1a2 0310 	sub.w	r3, r2, #16
    d94e:	290d      	cmp	r1, #13
    d950:	d24d      	bcs.n	d9ee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d952:	e8df f001 	tbb	[pc, r1]
    d956:	0907      	.short	0x0907
    d958:	1d1a150e 	.word	0x1d1a150e
    d95c:	4e2c2921 	.word	0x4e2c2921
    d960:	0048362f 	.word	0x0048362f
    d964:	b3f2      	cbz	r2, d9e4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9c>
    d966:	e042      	b.n	d9ee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d968:	2a06      	cmp	r2, #6
    d96a:	d03e      	beq.n	d9ea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d96c:	2a07      	cmp	r2, #7
    d96e:	d03c      	beq.n	d9ea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d970:	e03d      	b.n	d9ee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d972:	2a0b      	cmp	r2, #11
    d974:	d039      	beq.n	d9ea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d976:	2a0c      	cmp	r2, #12
    d978:	d037      	beq.n	d9ea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d97a:	2a0a      	cmp	r2, #10
    d97c:	d035      	beq.n	d9ea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d97e:	e036      	b.n	d9ee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d980:	2a0d      	cmp	r2, #13
    d982:	d032      	beq.n	d9ea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d984:	2a0e      	cmp	r2, #14
    d986:	d030      	beq.n	d9ea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d988:	e031      	b.n	d9ee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d98a:	2b0c      	cmp	r3, #12
    d98c:	d92d      	bls.n	d9ea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d98e:	e02e      	b.n	d9ee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d990:	3a11      	subs	r2, #17
    d992:	2a0b      	cmp	r2, #11
    d994:	d929      	bls.n	d9ea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d996:	e02a      	b.n	d9ee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d998:	2b03      	cmp	r3, #3
    d99a:	d926      	bls.n	d9ea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d99c:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    d9a0:	b1f8      	cbz	r0, d9e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9a>
    d9a2:	2a1c      	cmp	r2, #28
    d9a4:	d921      	bls.n	d9ea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9a6:	e022      	b.n	d9ee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d9a8:	2a04      	cmp	r2, #4
    d9aa:	d01e      	beq.n	d9ea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9ac:	e01f      	b.n	d9ee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d9ae:	2a01      	cmp	r2, #1
    d9b0:	d01b      	beq.n	d9ea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9b2:	e01c      	b.n	d9ee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d9b4:	2a1d      	cmp	r2, #29
    d9b6:	d018      	beq.n	d9ea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9b8:	2a1e      	cmp	r2, #30
    d9ba:	d016      	beq.n	d9ea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9bc:	2a1f      	cmp	r2, #31
    d9be:	d014      	beq.n	d9ea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9c0:	e015      	b.n	d9ee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d9c2:	2a20      	cmp	r2, #32
    d9c4:	d011      	beq.n	d9ea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9c6:	2a21      	cmp	r2, #33	; 0x21
    d9c8:	d00f      	beq.n	d9ea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9ca:	2a22      	cmp	r2, #34	; 0x22
    d9cc:	d00d      	beq.n	d9ea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9ce:	2a23      	cmp	r2, #35	; 0x23
    d9d0:	d00b      	beq.n	d9ea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9d2:	2a24      	cmp	r2, #36	; 0x24
    d9d4:	d009      	beq.n	d9ea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9d6:	2a25      	cmp	r2, #37	; 0x25
    d9d8:	d007      	beq.n	d9ea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9da:	2a26      	cmp	r2, #38	; 0x26
    d9dc:	d005      	beq.n	d9ea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9de:	2a2e      	cmp	r2, #46	; 0x2e
    d9e0:	d003      	beq.n	d9ea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9e2:	e004      	b.n	d9ee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d9e4:	e001      	b.n	d9ea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    d9e6:	2a28      	cmp	r2, #40	; 0x28
    d9e8:	d101      	bne.n	d9ee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d9ea:	2001      	movs	r0, #1
    d9ec:	bd10      	pop	{r4, pc}
    d9ee:	2000      	movs	r0, #0
    d9f0:	bd10      	pop	{r4, pc}
    d9f2:	2a0f      	cmp	r2, #15
    d9f4:	d1fb      	bne.n	d9ee <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    d9f6:	e7f8      	b.n	d9ea <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>

0000d9f8 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    d9f8:	280b      	cmp	r0, #11
    d9fa:	d019      	beq.n	da30 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    d9fc:	280c      	cmp	r0, #12
    d9fe:	d017      	beq.n	da30 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da00:	280a      	cmp	r0, #10
    da02:	d015      	beq.n	da30 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da04:	280d      	cmp	r0, #13
    da06:	d013      	beq.n	da30 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da08:	280e      	cmp	r0, #14
    da0a:	d011      	beq.n	da30 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da0c:	2820      	cmp	r0, #32
    da0e:	d00f      	beq.n	da30 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da10:	2821      	cmp	r0, #33	; 0x21
    da12:	d00d      	beq.n	da30 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da14:	2822      	cmp	r0, #34	; 0x22
    da16:	d00b      	beq.n	da30 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da18:	2823      	cmp	r0, #35	; 0x23
    da1a:	d009      	beq.n	da30 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da1c:	2824      	cmp	r0, #36	; 0x24
    da1e:	d007      	beq.n	da30 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da20:	2825      	cmp	r0, #37	; 0x25
    da22:	d005      	beq.n	da30 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da24:	2826      	cmp	r0, #38	; 0x26
    da26:	d003      	beq.n	da30 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da28:	282e      	cmp	r0, #46	; 0x2e
    da2a:	d001      	beq.n	da30 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    da2c:	2000      	movs	r0, #0
    da2e:	4770      	bx	lr
    da30:	2001      	movs	r0, #1
    da32:	4770      	bx	lr

0000da34 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    da34:	f011 0f0c 	tst.w	r1, #12
    da38:	d018      	beq.n	da6c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    da3a:	074a      	lsls	r2, r1, #29
    da3c:	f44f 7116 	mov.w	r1, #600	; 0x258
    da40:	2a00      	cmp	r2, #0
    da42:	da02      	bge.n	da4a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    da44:	f04f 0210 	mov.w	r2, #16
    da48:	e001      	b.n	da4e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    da4a:	f04f 0240 	mov.w	r2, #64	; 0x40
    da4e:	da01      	bge.n	da54 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    da50:	f04f 0196 	mov.w	r1, #150	; 0x96
    da54:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    da58:	eba0 0301 	sub.w	r3, r0, r1
    da5c:	4288      	cmp	r0, r1
    da5e:	d903      	bls.n	da68 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    da60:	fb93 f0f2 	sdiv	r0, r3, r2
    da64:	b280      	uxth	r0, r0
    da66:	4770      	bx	lr
    da68:	2000      	movs	r0, #0
    da6a:	4770      	bx	lr
    da6c:	2902      	cmp	r1, #2
    da6e:	d008      	beq.n	da82 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    da70:	2870      	cmp	r0, #112	; 0x70
    da72:	d9f9      	bls.n	da68 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    da74:	3870      	subs	r0, #112	; 0x70
    da76:	17c1      	asrs	r1, r0, #31
    da78:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    da7c:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    da80:	4770      	bx	lr
    da82:	283c      	cmp	r0, #60	; 0x3c
    da84:	d9f0      	bls.n	da68 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    da86:	383c      	subs	r0, #60	; 0x3c
    da88:	17c1      	asrs	r1, r0, #31
    da8a:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    da8e:	f3c0 008f 	ubfx	r0, r0, #2, #16
    da92:	4770      	bx	lr

0000da94 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    da94:	6809      	ldr	r1, [r1, #0]
    da96:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    da9a:	4770      	bx	lr

0000da9c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    da9c:	07c1      	lsls	r1, r0, #31
    da9e:	d001      	beq.n	daa4 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    daa0:	2001      	movs	r0, #1
    daa2:	4770      	bx	lr
    daa4:	0781      	lsls	r1, r0, #30
    daa6:	d501      	bpl.n	daac <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    daa8:	2002      	movs	r0, #2
    daaa:	4770      	bx	lr
    daac:	0740      	lsls	r0, r0, #29
    daae:	d501      	bpl.n	dab4 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    dab0:	2008      	movs	r0, #8
    dab2:	4770      	bx	lr
    dab4:	2000      	movs	r0, #0
    dab6:	4770      	bx	lr

0000dab8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    dab8:	b510      	push	{r4, lr}
    daba:	f640 12c4 	movw	r2, #2500	; 0x9c4
    dabe:	2901      	cmp	r1, #1
    dac0:	d006      	beq.n	dad0 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    dac2:	2902      	cmp	r1, #2
    dac4:	d005      	beq.n	dad2 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    dac6:	f44f 7168 	mov.w	r1, #928	; 0x3a0
    daca:	2029      	movs	r0, #41	; 0x29
    dacc:	f7f2 ff70 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dad0:	b108      	cbz	r0, dad6 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    dad2:	4610      	mov	r0, r2
    dad4:	bd10      	pop	{r4, pc}
    dad6:	f240 40e2 	movw	r0, #1250	; 0x4e2
    dada:	bd10      	pop	{r4, pc}

0000dadc <sym_AIEQYZJFZQBQ5LEMJNMQV56TMLIGCBAC63QLHGI>:
    dadc:	f880 106e 	strb.w	r1, [r0, #110]	; 0x6e
    dae0:	f001 bcf8 	b.w	f4d4 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>

0000dae4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    dae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dae8:	4607      	mov	r7, r0
    daea:	460e      	mov	r6, r1
    daec:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    daf0:	f7fc fba2 	bl	a238 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    daf4:	b198      	cbz	r0, db1e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    daf6:	b31e      	cbz	r6, db40 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    daf8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    dafc:	1b40      	subs	r0, r0, r5
    dafe:	2300      	movs	r3, #0
    db00:	eb61 0104 	sbc.w	r1, r1, r4
    db04:	461a      	mov	r2, r3
    db06:	1a1b      	subs	r3, r3, r0
    db08:	418a      	sbcs	r2, r1
    db0a:	da19      	bge.n	db40 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    db0c:	1c42      	adds	r2, r0, #1
    db0e:	f171 0100 	sbcs.w	r1, r1, #0
    db12:	db07      	blt.n	db24 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    db14:	f240 211a 	movw	r1, #538	; 0x21a
    db18:	2029      	movs	r0, #41	; 0x29
    db1a:	f7f2 ff49 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db1e:	f44f 7104 	mov.w	r1, #528	; 0x210
    db22:	e7f9      	b.n	db18 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    db24:	4430      	add	r0, r6
    db26:	1e40      	subs	r0, r0, #1
    db28:	fbb0 f1f6 	udiv	r1, r0, r6
    db2c:	fb01 f006 	mul.w	r0, r1, r6
    db30:	1828      	adds	r0, r5, r0
    db32:	f144 0400 	adc.w	r4, r4, #0
    db36:	e9c7 0404 	strd	r0, r4, [r7, #16]
    db3a:	4608      	mov	r0, r1
    db3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db40:	2000      	movs	r0, #0
    db42:	e7fb      	b.n	db3c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000db44 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    db44:	b530      	push	{r4, r5, lr}
    db46:	4613      	mov	r3, r2
    db48:	e006      	b.n	db58 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    db4a:	18cc      	adds	r4, r1, r3
    db4c:	1ad5      	subs	r5, r2, r3
    db4e:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    db52:	1e5b      	subs	r3, r3, #1
    db54:	5544      	strb	r4, [r0, r5]
    db56:	b2db      	uxtb	r3, r3
    db58:	2b00      	cmp	r3, #0
    db5a:	d1f6      	bne.n	db4a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    db5c:	bd30      	pop	{r4, r5, pc}

0000db5e <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    db5e:	2300      	movs	r3, #0
    db60:	6403      	str	r3, [r0, #64]	; 0x40
    db62:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    db66:	f240 2371 	movw	r3, #625	; 0x271
    db6a:	435a      	muls	r2, r3
    db6c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    db70:	1e52      	subs	r2, r2, #1
    db72:	fbb2 f1f1 	udiv	r1, r2, r1
    db76:	6441      	str	r1, [r0, #68]	; 0x44
    db78:	4770      	bx	lr

0000db7a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    db7a:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    db7e:	4607      	mov	r7, r0
    db80:	4690      	mov	r8, r2
    db82:	468b      	mov	fp, r1
    db84:	2601      	movs	r6, #1
    db86:	4608      	mov	r0, r1
    db88:	f000 f9e5 	bl	df56 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    db8c:	4682      	mov	sl, r0
    db8e:	4658      	mov	r0, fp
    db90:	f000 f9e3 	bl	df5a <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    db94:	4681      	mov	r9, r0
    db96:	f7ff ff81 	bl	da9c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    db9a:	4604      	mov	r4, r0
    db9c:	4650      	mov	r0, sl
    db9e:	f7ff ff7d 	bl	da9c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    dba2:	4605      	mov	r5, r0
    dba4:	ea54 0005 	orrs.w	r0, r4, r5
    dba8:	d100      	bne.n	dbac <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    dbaa:	2600      	movs	r6, #0
    dbac:	f7f9 fc5e 	bl	746c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    dbb0:	ea10 0f09 	tst.w	r0, r9
    dbb4:	d100      	bne.n	dbb8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    dbb6:	2400      	movs	r4, #0
    dbb8:	f7f9 fc58 	bl	746c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    dbbc:	ea10 0f0a 	tst.w	r0, sl
    dbc0:	d100      	bne.n	dbc4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    dbc2:	2500      	movs	r5, #0
    dbc4:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
    dbc8:	42a0      	cmp	r0, r4
    dbca:	d100      	bne.n	dbce <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    dbcc:	2400      	movs	r4, #0
    dbce:	f888 4000 	strb.w	r4, [r8]
    dbd2:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
    dbd6:	42a8      	cmp	r0, r5
    dbd8:	d100      	bne.n	dbdc <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    dbda:	2500      	movs	r5, #0
    dbdc:	f888 5001 	strb.w	r5, [r8, #1]
    dbe0:	b974      	cbnz	r4, dc00 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    dbe2:	b96d      	cbnz	r5, dc00 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    dbe4:	4658      	mov	r0, fp
    dbe6:	f000 f9a4 	bl	df32 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    dbea:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
    dbee:	1a40      	subs	r0, r0, r1
    dbf0:	b200      	sxth	r0, r0
    dbf2:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    dbf6:	4288      	cmp	r0, r1
    dbf8:	dc01      	bgt.n	dbfe <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    dbfa:	2800      	cmp	r0, #0
    dbfc:	dc00      	bgt.n	dc00 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    dbfe:	2600      	movs	r6, #0
    dc00:	4630      	mov	r0, r6
    dc02:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000dc06 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    dc06:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dc0a:	4348      	muls	r0, r1
    dc0c:	4770      	bx	lr

0000dc0e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    dc0e:	f240 2171 	movw	r1, #625	; 0x271
    dc12:	fb10 f001 	smulbb	r0, r0, r1
    dc16:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dc1a:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    dc1e:	4770      	bx	lr

0000dc20 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    dc20:	b510      	push	{r4, lr}
    dc22:	2300      	movs	r3, #0
    dc24:	461a      	mov	r2, r3
    dc26:	e003      	b.n	dc30 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    dc28:	5c84      	ldrb	r4, [r0, r2]
    dc2a:	4323      	orrs	r3, r4
    dc2c:	1c52      	adds	r2, r2, #1
    dc2e:	b2d2      	uxtb	r2, r2
    dc30:	428a      	cmp	r2, r1
    dc32:	d3f9      	bcc.n	dc28 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    dc34:	b10b      	cbz	r3, dc3a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    dc36:	2000      	movs	r0, #0
    dc38:	bd10      	pop	{r4, pc}
    dc3a:	2001      	movs	r0, #1
    dc3c:	bd10      	pop	{r4, pc}

0000dc3e <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>:
    dc3e:	2100      	movs	r1, #0
    dc40:	4608      	mov	r0, r1
    dc42:	f7f4 be17 	b.w	2874 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>
    dc46:	4401      	add	r1, r0
    dc48:	2914      	cmp	r1, #20
    dc4a:	dd01      	ble.n	dc50 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x12>
    dc4c:	2014      	movs	r0, #20
    dc4e:	4770      	bx	lr
    dc50:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    dc54:	4281      	cmp	r1, r0
    dc56:	dbfa      	blt.n	dc4e <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x10>
    dc58:	b248      	sxtb	r0, r1
    dc5a:	4770      	bx	lr

0000dc5c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    dc5c:	b570      	push	{r4, r5, r6, lr}
    dc5e:	4605      	mov	r5, r0
    dc60:	ea81 4011 	eor.w	r0, r1, r1, lsr #16
    dc64:	b286      	uxth	r6, r0
    dc66:	4610      	mov	r0, r2
    dc68:	7aec      	ldrb	r4, [r5, #11]
    dc6a:	4631      	mov	r1, r6
    dc6c:	f000 f863 	bl	dd36 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x52>
    dc70:	4070      	eors	r0, r6
    dc72:	2125      	movs	r1, #37	; 0x25
    dc74:	fbb0 f2f1 	udiv	r2, r0, r1
    dc78:	fb01 0112 	mls	r1, r1, r2, r0
    dc7c:	eb05 02d1 	add.w	r2, r5, r1, lsr #3
    dc80:	f001 0307 	and.w	r3, r1, #7
    dc84:	7852      	ldrb	r2, [r2, #1]
    dc86:	2601      	movs	r6, #1
    dc88:	409e      	lsls	r6, r3
    dc8a:	4232      	tst	r2, r6
    dc8c:	d001      	beq.n	dc92 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x36>
    dc8e:	4608      	mov	r0, r1
    dc90:	bd70      	pop	{r4, r5, r6, pc}
    dc92:	4344      	muls	r4, r0
    dc94:	0c21      	lsrs	r1, r4, #16
    dc96:	4628      	mov	r0, r5
    dc98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dc9c:	f7f4 be38 	b.w	2910 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x9c>

0000dca0 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    dca0:	b510      	push	{r4, lr}
    dca2:	4604      	mov	r4, r0
    dca4:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    dca8:	b108      	cbz	r0, dcae <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    dcaa:	2825      	cmp	r0, #37	; 0x25
    dcac:	d901      	bls.n	dcb2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    dcae:	2012      	movs	r0, #18
    dcb0:	bd10      	pop	{r4, pc}
    dcb2:	b132      	cbz	r2, dcc2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>
    dcb4:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
    dcb8:	b128      	cbz	r0, dcc6 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x26>
    dcba:	2801      	cmp	r0, #1
    dcbc:	d009      	beq.n	dcd2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x32>
    dcbe:	201f      	movs	r0, #31
    dcc0:	bd10      	pop	{r4, pc}
    dcc2:	2000      	movs	r0, #0
    dcc4:	bd10      	pop	{r4, pc}
    dcc6:	4620      	mov	r0, r4
    dcc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dccc:	4611      	mov	r1, r2
    dcce:	f7f4 bdd7 	b.w	2880 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xc>
    dcd2:	8aa2      	ldrh	r2, [r4, #20]
    dcd4:	6949      	ldr	r1, [r1, #20]
    dcd6:	f104 0025 	add.w	r0, r4, #37	; 0x25
    dcda:	f7ff ffbf 	bl	dc5c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    dcde:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    dce2:	e7ee      	b.n	dcc2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>

0000dce4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    dce4:	b570      	push	{r4, r5, r6, lr}
    dce6:	4604      	mov	r4, r0
    dce8:	1c40      	adds	r0, r0, #1
    dcea:	4288      	cmp	r0, r1
    dcec:	d004      	beq.n	dcf8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    dcee:	6808      	ldr	r0, [r1, #0]
    dcf0:	f8c4 0001 	str.w	r0, [r4, #1]
    dcf4:	7908      	ldrb	r0, [r1, #4]
    dcf6:	7160      	strb	r0, [r4, #5]
    dcf8:	7960      	ldrb	r0, [r4, #5]
    dcfa:	f000 001f 	and.w	r0, r0, #31
    dcfe:	7160      	strb	r0, [r4, #5]
    dd00:	2000      	movs	r0, #0
    dd02:	72e0      	strb	r0, [r4, #11]
    dd04:	4605      	mov	r5, r0
    dd06:	1966      	adds	r6, r4, r5
    dd08:	7870      	ldrb	r0, [r6, #1]
    dd0a:	f000 faed 	bl	e2e8 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    dd0e:	71b0      	strb	r0, [r6, #6]
    dd10:	7ae1      	ldrb	r1, [r4, #11]
    dd12:	1c6d      	adds	r5, r5, #1
    dd14:	4408      	add	r0, r1
    dd16:	b2ed      	uxtb	r5, r5
    dd18:	72e0      	strb	r0, [r4, #11]
    dd1a:	2d05      	cmp	r5, #5
    dd1c:	d3f3      	bcc.n	dd06 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    dd1e:	bd70      	pop	{r4, r5, r6, pc}
    dd20:	b2c1      	uxtb	r1, r0
    dd22:	fa91 f1a1 	rbit	r1, r1
    dd26:	0a00      	lsrs	r0, r0, #8
    dd28:	0e09      	lsrs	r1, r1, #24
    dd2a:	fa90 f0a0 	rbit	r0, r0
    dd2e:	0e00      	lsrs	r0, r0, #24
    dd30:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    dd34:	4770      	bx	lr
    dd36:	b570      	push	{r4, r5, r6, lr}
    dd38:	460d      	mov	r5, r1
    dd3a:	4048      	eors	r0, r1
    dd3c:	2400      	movs	r4, #0
    dd3e:	f7ff ffef 	bl	dd20 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x3c>
    dd42:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    dd46:	1c64      	adds	r4, r4, #1
    dd48:	4428      	add	r0, r5
    dd4a:	b2e4      	uxtb	r4, r4
    dd4c:	b280      	uxth	r0, r0
    dd4e:	2c03      	cmp	r4, #3
    dd50:	d3f5      	bcc.n	dd3e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x5a>
    dd52:	bd70      	pop	{r4, r5, r6, pc}

0000dd54 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
    dd54:	7802      	ldrb	r2, [r0, #0]
    dd56:	f002 020f 	and.w	r2, r2, #15
    dd5a:	2a03      	cmp	r2, #3
    dd5c:	d003      	beq.n	dd66 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x12>
    dd5e:	2a05      	cmp	r2, #5
    dd60:	d104      	bne.n	dd6c <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x18>
    dd62:	f000 b92e 	b.w	dfc2 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4>
    dd66:	7840      	ldrb	r0, [r0, #1]
    dd68:	280c      	cmp	r0, #12
    dd6a:	d001      	beq.n	dd70 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x1c>
    dd6c:	2000      	movs	r0, #0
    dd6e:	4770      	bx	lr
    dd70:	2001      	movs	r0, #1
    dd72:	4770      	bx	lr

0000dd74 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
    dd74:	b570      	push	{r4, r5, r6, lr}
    dd76:	4614      	mov	r4, r2
    dd78:	4605      	mov	r5, r0
    dd7a:	2a1f      	cmp	r2, #31
    dd7c:	d903      	bls.n	dd86 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
    dd7e:	21ee      	movs	r1, #238	; 0xee
    dd80:	202a      	movs	r0, #42	; 0x2a
    dd82:	f7f2 fe15 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd86:	f105 0009 	add.w	r0, r5, #9
    dd8a:	f002 fd98 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dd8e:	1da4      	adds	r4, r4, #6
    dd90:	706c      	strb	r4, [r5, #1]
    dd92:	bd70      	pop	{r4, r5, r6, pc}

0000dd94 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    dd94:	b510      	push	{r4, lr}
    dd96:	7802      	ldrb	r2, [r0, #0]
    dd98:	f001 030f 	and.w	r3, r1, #15
    dd9c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    dda0:	431a      	orrs	r2, r3
    dda2:	7002      	strb	r2, [r0, #0]
    dda4:	2907      	cmp	r1, #7
    dda6:	d20c      	bcs.n	ddc2 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    dda8:	e8df f001 	tbb	[pc, r1]
    ddac:	06040604 	.word	0x06040604
    ddb0:	00040804 	.word	0x00040804
    ddb4:	2106      	movs	r1, #6
    ddb6:	e002      	b.n	ddbe <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    ddb8:	210c      	movs	r1, #12
    ddba:	e000      	b.n	ddbe <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    ddbc:	2122      	movs	r1, #34	; 0x22
    ddbe:	7041      	strb	r1, [r0, #1]
    ddc0:	bd10      	pop	{r4, pc}
    ddc2:	21a8      	movs	r1, #168	; 0xa8
    ddc4:	202a      	movs	r0, #42	; 0x2a
    ddc6:	f7f2 fdf3 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ddca <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    ddca:	680a      	ldr	r2, [r1, #0]
    ddcc:	f840 2f09 	str.w	r2, [r0, #9]!
    ddd0:	8889      	ldrh	r1, [r1, #4]
    ddd2:	8081      	strh	r1, [r0, #4]
    ddd4:	4770      	bx	lr

0000ddd6 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    ddd6:	7802      	ldrb	r2, [r0, #0]
    ddd8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    dddc:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    dde0:	7002      	strb	r2, [r0, #0]
    dde2:	4770      	bx	lr

0000dde4 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    dde4:	680a      	ldr	r2, [r1, #0]
    dde6:	f840 2f03 	str.w	r2, [r0, #3]!
    ddea:	8889      	ldrh	r1, [r1, #4]
    ddec:	8081      	strh	r1, [r0, #4]
    ddee:	4770      	bx	lr

0000ddf0 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    ddf0:	7802      	ldrb	r2, [r0, #0]
    ddf2:	2340      	movs	r3, #64	; 0x40
    ddf4:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    ddf8:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    ddfc:	430a      	orrs	r2, r1
    ddfe:	7002      	strb	r2, [r0, #0]
    de00:	4770      	bx	lr

0000de02 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
    de02:	b570      	push	{r4, r5, r6, lr}
    de04:	4614      	mov	r4, r2
    de06:	4605      	mov	r5, r0
    de08:	2a1f      	cmp	r2, #31
    de0a:	d904      	bls.n	de16 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
    de0c:	f44f 7188 	mov.w	r1, #272	; 0x110
    de10:	202a      	movs	r0, #42	; 0x2a
    de12:	f7f2 fdcd 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de16:	f105 0009 	add.w	r0, r5, #9
    de1a:	f002 fd50 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    de1e:	1da4      	adds	r4, r4, #6
    de20:	706c      	strb	r4, [r5, #1]
    de22:	bd70      	pop	{r4, r5, r6, pc}

0000de24 <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>:
    de24:	6842      	ldr	r2, [r0, #4]
    de26:	600a      	str	r2, [r1, #0]
    de28:	7a00      	ldrb	r0, [r0, #8]
    de2a:	7108      	strb	r0, [r1, #4]
    de2c:	4770      	bx	lr

0000de2e <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>:
    de2e:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    de32:	4770      	bx	lr

0000de34 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>:
    de34:	b570      	push	{r4, r5, r6, lr}
    de36:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    de3a:	f8b0 4009 	ldrh.w	r4, [r0, #9]
    de3e:	f830 5f05 	ldrh.w	r5, [r0, #5]!
    de42:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    de46:	88c0      	ldrh	r0, [r0, #6]
    de48:	b131      	cbz	r1, de58 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    de4a:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    de4e:	d903      	bls.n	de58 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    de50:	f640 5107 	movw	r1, #3335	; 0xd07
    de54:	428a      	cmp	r2, r1
    de56:	d90b      	bls.n	de70 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x3c>
    de58:	1f91      	subs	r1, r2, #6
    de5a:	f640 467a 	movw	r6, #3194	; 0xc7a
    de5e:	42b1      	cmp	r1, r6
    de60:	d810      	bhi.n	de84 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    de62:	b17b      	cbz	r3, de84 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    de64:	2b08      	cmp	r3, #8
    de66:	d80d      	bhi.n	de84 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    de68:	4293      	cmp	r3, r2
    de6a:	d20b      	bcs.n	de84 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    de6c:	4295      	cmp	r5, r2
    de6e:	d809      	bhi.n	de84 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    de70:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    de74:	d206      	bcs.n	de84 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    de76:	f640 4176 	movw	r1, #3190	; 0xc76
    de7a:	380a      	subs	r0, #10
    de7c:	4288      	cmp	r0, r1
    de7e:	d801      	bhi.n	de84 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    de80:	2001      	movs	r0, #1
    de82:	bd70      	pop	{r4, r5, r6, pc}
    de84:	2000      	movs	r0, #0
    de86:	bd70      	pop	{r4, r5, r6, pc}

0000de88 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>:
    de88:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    de8c:	4770      	bx	lr

0000de8e <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>:
    de8e:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    de92:	4770      	bx	lr

0000de94 <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>:
    de94:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    de98:	4770      	bx	lr

0000de9a <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
    de9a:	b510      	push	{r4, lr}
    de9c:	29fb      	cmp	r1, #251	; 0xfb
    de9e:	d904      	bls.n	deaa <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI+0x10>
    dea0:	f240 61a1 	movw	r1, #1697	; 0x6a1
    dea4:	202a      	movs	r0, #42	; 0x2a
    dea6:	f7f2 fd83 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    deaa:	7041      	strb	r1, [r0, #1]
    deac:	bd10      	pop	{r4, pc}

0000deae <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>:
    deae:	8980      	ldrh	r0, [r0, #12]
    deb0:	8008      	strh	r0, [r1, #0]
    deb2:	4770      	bx	lr

0000deb4 <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>:
    deb4:	f8d0 0016 	ldr.w	r0, [r0, #22]
    deb8:	6008      	str	r0, [r1, #0]
    deba:	4770      	bx	lr

0000debc <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>:
    debc:	6842      	ldr	r2, [r0, #4]
    debe:	600a      	str	r2, [r1, #0]
    dec0:	6880      	ldr	r0, [r0, #8]
    dec2:	6048      	str	r0, [r1, #4]
    dec4:	4770      	bx	lr

0000dec6 <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>:
    dec6:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    deca:	600a      	str	r2, [r1, #0]
    decc:	6840      	ldr	r0, [r0, #4]
    dece:	6048      	str	r0, [r1, #4]
    ded0:	4770      	bx	lr

0000ded2 <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>:
    ded2:	6809      	ldr	r1, [r1, #0]
    ded4:	60c1      	str	r1, [r0, #12]
    ded6:	4770      	bx	lr

0000ded8 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>:
    ded8:	680a      	ldr	r2, [r1, #0]
    deda:	6042      	str	r2, [r0, #4]
    dedc:	6849      	ldr	r1, [r1, #4]
    dede:	6081      	str	r1, [r0, #8]
    dee0:	4770      	bx	lr

0000dee2 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
    dee2:	7800      	ldrb	r0, [r0, #0]
    dee4:	f000 0003 	and.w	r0, r0, #3
    dee8:	4770      	bx	lr

0000deea <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
    deea:	8880      	ldrh	r0, [r0, #4]
    deec:	4770      	bx	lr

0000deee <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
    deee:	88c0      	ldrh	r0, [r0, #6]
    def0:	4770      	bx	lr

0000def2 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
    def2:	8900      	ldrh	r0, [r0, #8]
    def4:	4770      	bx	lr

0000def6 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
    def6:	8940      	ldrh	r0, [r0, #10]
    def8:	4770      	bx	lr

0000defa <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
    defa:	8901      	ldrh	r1, [r0, #8]
    defc:	291b      	cmp	r1, #27
    defe:	d30c      	bcc.n	df1a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    df00:	8941      	ldrh	r1, [r0, #10]
    df02:	f44f 72a4 	mov.w	r2, #328	; 0x148
    df06:	4291      	cmp	r1, r2
    df08:	d307      	bcc.n	df1a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    df0a:	8881      	ldrh	r1, [r0, #4]
    df0c:	291b      	cmp	r1, #27
    df0e:	d304      	bcc.n	df1a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    df10:	88c0      	ldrh	r0, [r0, #6]
    df12:	4290      	cmp	r0, r2
    df14:	d301      	bcc.n	df1a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    df16:	2001      	movs	r0, #1
    df18:	4770      	bx	lr
    df1a:	2000      	movs	r0, #0
    df1c:	4770      	bx	lr

0000df1e <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
    df1e:	7901      	ldrb	r1, [r0, #4]
    df20:	0749      	lsls	r1, r1, #29
    df22:	d004      	beq.n	df2e <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    df24:	7940      	ldrb	r0, [r0, #5]
    df26:	0740      	lsls	r0, r0, #29
    df28:	d001      	beq.n	df2e <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    df2a:	2001      	movs	r0, #1
    df2c:	4770      	bx	lr
    df2e:	2000      	movs	r0, #0
    df30:	4770      	bx	lr

0000df32 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>:
    df32:	88c0      	ldrh	r0, [r0, #6]
    df34:	4770      	bx	lr

0000df36 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>:
    df36:	7901      	ldrb	r1, [r0, #4]
    df38:	7940      	ldrb	r0, [r0, #5]
    df3a:	f001 0107 	and.w	r1, r1, #7
    df3e:	1e4a      	subs	r2, r1, #1
    df40:	f000 0007 	and.w	r0, r0, #7
    df44:	4011      	ands	r1, r2
    df46:	1e42      	subs	r2, r0, #1
    df48:	4010      	ands	r0, r2
    df4a:	4301      	orrs	r1, r0
    df4c:	d001      	beq.n	df52 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ+0x1c>
    df4e:	2000      	movs	r0, #0
    df50:	4770      	bx	lr
    df52:	2001      	movs	r0, #1
    df54:	4770      	bx	lr

0000df56 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>:
    df56:	7900      	ldrb	r0, [r0, #4]
    df58:	4770      	bx	lr

0000df5a <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>:
    df5a:	7940      	ldrb	r0, [r0, #5]
    df5c:	4770      	bx	lr

0000df5e <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
    df5e:	7900      	ldrb	r0, [r0, #4]
    df60:	4770      	bx	lr

0000df62 <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
    df62:	7101      	strb	r1, [r0, #4]
    df64:	4770      	bx	lr

0000df66 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
    df66:	7940      	ldrb	r0, [r0, #5]
    df68:	4770      	bx	lr

0000df6a <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
    df6a:	7141      	strb	r1, [r0, #5]
    df6c:	4770      	bx	lr

0000df6e <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>:
    df6e:	b510      	push	{r4, lr}
    df70:	2a1b      	cmp	r2, #27
    df72:	d904      	bls.n	df7e <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA+0x10>
    df74:	f240 417e 	movw	r1, #1150	; 0x47e
    df78:	202a      	movs	r0, #42	; 0x2a
    df7a:	f7f2 fd19 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df7e:	7042      	strb	r2, [r0, #1]
    df80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df84:	1cc0      	adds	r0, r0, #3
    df86:	f002 bc9a 	b.w	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000df8a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
    df8a:	7802      	ldrb	r2, [r0, #0]
    df8c:	f001 0103 	and.w	r1, r1, #3
    df90:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    df94:	430a      	orrs	r2, r1
    df96:	7002      	strb	r2, [r0, #0]
    df98:	4770      	bx	lr

0000df9a <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
    df9a:	7101      	strb	r1, [r0, #4]
    df9c:	0a09      	lsrs	r1, r1, #8
    df9e:	7141      	strb	r1, [r0, #5]
    dfa0:	4770      	bx	lr

0000dfa2 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
    dfa2:	7181      	strb	r1, [r0, #6]
    dfa4:	0a09      	lsrs	r1, r1, #8
    dfa6:	71c1      	strb	r1, [r0, #7]
    dfa8:	4770      	bx	lr

0000dfaa <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
    dfaa:	7201      	strb	r1, [r0, #8]
    dfac:	0a09      	lsrs	r1, r1, #8
    dfae:	7241      	strb	r1, [r0, #9]
    dfb0:	4770      	bx	lr

0000dfb2 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
    dfb2:	7281      	strb	r1, [r0, #10]
    dfb4:	0a09      	lsrs	r1, r1, #8
    dfb6:	72c1      	strb	r1, [r0, #11]
    dfb8:	4770      	bx	lr

0000dfba <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
    dfba:	7900      	ldrb	r0, [r0, #4]
    dfbc:	4770      	bx	lr

0000dfbe <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
    dfbe:	7900      	ldrb	r0, [r0, #4]
    dfc0:	4770      	bx	lr
    dfc2:	b570      	push	{r4, r5, r6, lr}
    dfc4:	f8d0 201f 	ldr.w	r2, [r0, #31]
    dfc8:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    dfcc:	f012 0fff 	tst.w	r2, #255	; 0xff
    dfd0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    dfd4:	d108      	bne.n	dfe8 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    dfd6:	f3c2 2407 	ubfx	r4, r2, #8, #8
    dfda:	b92c      	cbnz	r4, dfe8 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    dfdc:	f3c2 4407 	ubfx	r4, r2, #16, #8
    dfe0:	b914      	cbnz	r4, dfe8 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    dfe2:	0e12      	lsrs	r2, r2, #24
    dfe4:	d100      	bne.n	dfe8 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    dfe6:	b34b      	cbz	r3, e03c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dfe8:	7846      	ldrb	r6, [r0, #1]
    dfea:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    dfee:	f8b0 401b 	ldrh.w	r4, [r0, #27]
    dff2:	f8b0 5017 	ldrh.w	r5, [r0, #23]
    dff6:	7d83      	ldrb	r3, [r0, #22]
    dff8:	2e22      	cmp	r6, #34	; 0x22
    dffa:	d11f      	bne.n	e03c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    dffc:	b131      	cbz	r1, e00c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    dffe:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e002:	d903      	bls.n	e00c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    e004:	f640 5107 	movw	r1, #3335	; 0xd07
    e008:	428a      	cmp	r2, r1
    e00a:	d90b      	bls.n	e024 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x66>
    e00c:	1f91      	subs	r1, r2, #6
    e00e:	f640 467a 	movw	r6, #3194	; 0xc7a
    e012:	42b1      	cmp	r1, r6
    e014:	d812      	bhi.n	e03c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e016:	b18b      	cbz	r3, e03c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e018:	2b08      	cmp	r3, #8
    e01a:	d80f      	bhi.n	e03c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e01c:	4293      	cmp	r3, r2
    e01e:	d20d      	bcs.n	e03c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e020:	4295      	cmp	r5, r2
    e022:	d80b      	bhi.n	e03c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e024:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    e028:	d208      	bcs.n	e03c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e02a:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    e02e:	f640 4176 	movw	r1, #3190	; 0xc76
    e032:	380a      	subs	r0, #10
    e034:	4288      	cmp	r0, r1
    e036:	d801      	bhi.n	e03c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e038:	2001      	movs	r0, #1
    e03a:	bd70      	pop	{r4, r5, r6, pc}
    e03c:	2000      	movs	r0, #0
    e03e:	bd70      	pop	{r4, r5, r6, pc}

0000e040 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    e040:	6841      	ldr	r1, [r0, #4]
    e042:	2200      	movs	r2, #0
    e044:	f891 322a 	ldrb.w	r3, [r1, #554]	; 0x22a
    e048:	2b00      	cmp	r3, #0
    e04a:	d004      	beq.n	e056 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    e04c:	f881 222a 	strb.w	r2, [r1, #554]	; 0x22a
    e050:	6840      	ldr	r0, [r0, #4]
    e052:	f000 bdfc 	b.w	ec4e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    e056:	4770      	bx	lr

0000e058 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e058:	b510      	push	{r4, lr}
    e05a:	7a01      	ldrb	r1, [r0, #8]
    e05c:	b119      	cbz	r1, e066 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e05e:	2901      	cmp	r1, #1
    e060:	d006      	beq.n	e070 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e062:	2000      	movs	r0, #0
    e064:	bd10      	pop	{r4, pc}
    e066:	88c2      	ldrh	r2, [r0, #6]
    e068:	6803      	ldr	r3, [r0, #0]
    e06a:	8880      	ldrh	r0, [r0, #4]
    e06c:	2102      	movs	r1, #2
    e06e:	e003      	b.n	e078 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e070:	88c2      	ldrh	r2, [r0, #6]
    e072:	6803      	ldr	r3, [r0, #0]
    e074:	8880      	ldrh	r0, [r0, #4]
    e076:	2101      	movs	r1, #1
    e078:	f7f4 fcb4 	bl	29e4 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x14>
    e07c:	b908      	cbnz	r0, e082 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e07e:	f7f4 fd01 	bl	2a84 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e082:	2001      	movs	r0, #1
    e084:	bd10      	pop	{r4, pc}

0000e086 <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>:
    e086:	2203      	movs	r2, #3
    e088:	f000 b806 	b.w	e098 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>

0000e08c <sym_43BYC3K4M44JBPOX4EUJM44GYCCY2C3C4SYEF6I>:
    e08c:	2203      	movs	r2, #3
    e08e:	f000 b817 	b.w	e0c0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>

0000e092 <sym_OHZGE3PRU72NL3TJSLCEUVROHETUDPWEUAQ7GMA>:
    e092:	2204      	movs	r2, #4
    e094:	f000 b814 	b.w	e0c0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>

0000e098 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    e098:	b508      	push	{r3, lr}
    e09a:	7a03      	ldrb	r3, [r0, #8]
    e09c:	f88d 3000 	strb.w	r3, [sp]
    e0a0:	9b00      	ldr	r3, [sp, #0]
    e0a2:	9300      	str	r3, [sp, #0]
    e0a4:	f89d 3000 	ldrb.w	r3, [sp]
    e0a8:	b123      	cbz	r3, e0b4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    e0aa:	f240 21c2 	movw	r1, #706	; 0x2c2
    e0ae:	2010      	movs	r0, #16
    e0b0:	f7f2 fc7e 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e0b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e0b8:	f7f4 be56 	b.w	2d68 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>

0000e0bc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e0bc:	f7f4 be82 	b.w	2dc4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x178>

0000e0c0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>:
    e0c0:	7a03      	ldrb	r3, [r0, #8]
    e0c2:	b082      	sub	sp, #8
    e0c4:	f88d 3000 	strb.w	r3, [sp]
    e0c8:	9b00      	ldr	r3, [sp, #0]
    e0ca:	9300      	str	r3, [sp, #0]
    e0cc:	f89d 3000 	ldrb.w	r3, [sp]
    e0d0:	b113      	cbz	r3, e0d8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x18>
    e0d2:	7202      	strb	r2, [r0, #8]
    e0d4:	b002      	add	sp, #8
    e0d6:	4770      	bx	lr
    e0d8:	b002      	add	sp, #8
    e0da:	f7f4 be45 	b.w	2d68 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>
    e0de:	2000      	movs	r0, #0
    e0e0:	7048      	strb	r0, [r1, #1]
    e0e2:	2003      	movs	r0, #3
    e0e4:	7008      	strb	r0, [r1, #0]
    e0e6:	2001      	movs	r0, #1
    e0e8:	7108      	strb	r0, [r1, #4]
    e0ea:	4770      	bx	lr

0000e0ec <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e0ec:	b510      	push	{r4, lr}
    e0ee:	888c      	ldrh	r4, [r1, #4]
    e0f0:	890a      	ldrh	r2, [r1, #8]
    e0f2:	884b      	ldrh	r3, [r1, #2]
    e0f4:	88c9      	ldrh	r1, [r1, #6]
    e0f6:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e0fa:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e0fe:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e102:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e106:	bd10      	pop	{r4, pc}

0000e108 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e108:	b570      	push	{r4, r5, r6, lr}
    e10a:	4615      	mov	r5, r2
    e10c:	460c      	mov	r4, r1
    e10e:	f000 f8b8 	bl	e282 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa8>
    e112:	3096      	adds	r0, #150	; 0x96
    e114:	4428      	add	r0, r5
    e116:	42a0      	cmp	r0, r4
    e118:	d801      	bhi.n	e11e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e11a:	1a20      	subs	r0, r4, r0
    e11c:	bd70      	pop	{r4, r5, r6, pc}
    e11e:	2000      	movs	r0, #0
    e120:	bd70      	pop	{r4, r5, r6, pc}

0000e122 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e126:	4604      	mov	r4, r0
    e128:	f000 f87f 	bl	e22a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x50>
    e12c:	4680      	mov	r8, r0
    e12e:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e132:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e136:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e138:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e13a:	4285      	cmp	r5, r0
    e13c:	d300      	bcc.n	e140 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x1e>
    e13e:	4605      	mov	r5, r0
    e140:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e144:	4620      	mov	r0, r4
    e146:	f000 f868 	bl	e21a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x40>
    e14a:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e14e:	2902      	cmp	r1, #2
    e150:	d108      	bne.n	e164 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x42>
    e152:	42af      	cmp	r7, r5
    e154:	d200      	bcs.n	e158 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x36>
    e156:	463d      	mov	r5, r7
    e158:	4286      	cmp	r6, r0
    e15a:	d200      	bcs.n	e15e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    e15c:	4630      	mov	r0, r6
    e15e:	2100      	movs	r1, #0
    e160:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e164:	86a5      	strh	r5, [r4, #52]	; 0x34
    e166:	8720      	strh	r0, [r4, #56]	; 0x38
    e168:	42bd      	cmp	r5, r7
    e16a:	d101      	bne.n	e170 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4e>
    e16c:	42b0      	cmp	r0, r6
    e16e:	d001      	beq.n	e174 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e170:	2001      	movs	r0, #1
    e172:	e000      	b.n	e176 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x54>
    e174:	2000      	movs	r0, #0
    e176:	ea40 0008 	orr.w	r0, r0, r8
    e17a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e17e <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e17e:	221b      	movs	r2, #27
    e180:	8402      	strh	r2, [r0, #32]
    e182:	8382      	strh	r2, [r0, #28]
    e184:	82c2      	strh	r2, [r0, #22]
    e186:	8282      	strh	r2, [r0, #20]
    e188:	8142      	strh	r2, [r0, #10]
    e18a:	8202      	strh	r2, [r0, #16]
    e18c:	8102      	strh	r2, [r0, #8]
    e18e:	8542      	strh	r2, [r0, #42]	; 0x2a
    e190:	8582      	strh	r2, [r0, #44]	; 0x2c
    e192:	8482      	strh	r2, [r0, #36]	; 0x24
    e194:	2900      	cmp	r1, #0
    e196:	d10a      	bne.n	e1ae <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e198:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e19c:	8441      	strh	r1, [r0, #34]	; 0x22
    e19e:	83c1      	strh	r1, [r0, #30]
    e1a0:	8341      	strh	r1, [r0, #26]
    e1a2:	8301      	strh	r1, [r0, #24]
    e1a4:	81c1      	strh	r1, [r0, #14]
    e1a6:	8241      	strh	r1, [r0, #18]
    e1a8:	8181      	strh	r1, [r0, #12]
    e1aa:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e1ac:	8601      	strh	r1, [r0, #48]	; 0x30
    e1ae:	4770      	bx	lr

0000e1b0 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e1b0:	6800      	ldr	r0, [r0, #0]
    e1b2:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e1b6:	4290      	cmp	r0, r2
    e1b8:	d903      	bls.n	e1c2 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e1ba:	1a40      	subs	r0, r0, r1
    e1bc:	389c      	subs	r0, #156	; 0x9c
    e1be:	0840      	lsrs	r0, r0, #1
    e1c0:	4770      	bx	lr
    e1c2:	2000      	movs	r0, #0
    e1c4:	4770      	bx	lr

0000e1c6 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>:
    e1c6:	6840      	ldr	r0, [r0, #4]
    e1c8:	4770      	bx	lr

0000e1ca <sym_DGN3THKILL676ISUGG6LI5PGTHVDBLTDPNXUCAA>:
    e1ca:	b570      	push	{r4, r5, r6, lr}
    e1cc:	460c      	mov	r4, r1
    e1ce:	4605      	mov	r5, r0
    e1d0:	f000 f857 	bl	e282 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa8>
    e1d4:	4420      	add	r0, r4
    e1d6:	6328      	str	r0, [r5, #48]	; 0x30
    e1d8:	bd70      	pop	{r4, r5, r6, pc}

0000e1da <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e1da:	b510      	push	{r4, lr}
    e1dc:	9c02      	ldr	r4, [sp, #8]
    e1de:	8281      	strh	r1, [r0, #20]
    e1e0:	82c2      	strh	r2, [r0, #22]
    e1e2:	8303      	strh	r3, [r0, #24]
    e1e4:	8344      	strh	r4, [r0, #26]
    e1e6:	bd10      	pop	{r4, pc}
    e1e8:	1d00      	adds	r0, r0, #4
    e1ea:	b510      	push	{r4, lr}
    e1ec:	b280      	uxth	r0, r0
    e1ee:	2901      	cmp	r1, #1
    e1f0:	d006      	beq.n	e200 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x26>
    e1f2:	2902      	cmp	r1, #2
    e1f4:	d007      	beq.n	e206 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x2c>
    e1f6:	f240 2123 	movw	r1, #547	; 0x223
    e1fa:	2006      	movs	r0, #6
    e1fc:	f7f2 fbd8 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e200:	00c0      	lsls	r0, r0, #3
    e202:	3050      	adds	r0, #80	; 0x50
    e204:	e001      	b.n	e20a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x30>
    e206:	0080      	lsls	r0, r0, #2
    e208:	302c      	adds	r0, #44	; 0x2c
    e20a:	b280      	uxth	r0, r0
    e20c:	bd10      	pop	{r4, pc}
    e20e:	8c41      	ldrh	r1, [r0, #34]	; 0x22
    e210:	8b00      	ldrh	r0, [r0, #24]
    e212:	4281      	cmp	r1, r0
    e214:	d200      	bcs.n	e218 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e216:	4608      	mov	r0, r1
    e218:	4770      	bx	lr
    e21a:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e21e:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e222:	4281      	cmp	r1, r0
    e224:	d200      	bcs.n	e228 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e226:	4608      	mov	r0, r1
    e228:	4770      	bx	lr
    e22a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e22e:	4606      	mov	r6, r0
    e230:	f8b0 9036 	ldrh.w	r9, [r0, #54]	; 0x36
    e234:	f8b0 803a 	ldrh.w	r8, [r0, #58]	; 0x3a
    e238:	f8b0 004c 	ldrh.w	r0, [r0, #76]	; 0x4c
    e23c:	f8b6 4040 	ldrh.w	r4, [r6, #64]	; 0x40
    e240:	42a0      	cmp	r0, r4
    e242:	d200      	bcs.n	e246 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x6c>
    e244:	4604      	mov	r4, r0
    e246:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    e24a:	4605      	mov	r5, r0
    e24c:	f7ff ffdf 	bl	e20e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    e250:	4607      	mov	r7, r0
    e252:	4628      	mov	r0, r5
    e254:	f7ff ffdb 	bl	e20e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    e258:	816c      	strh	r4, [r5, #10]
    e25a:	81ef      	strh	r7, [r5, #14]
    e25c:	8fb1      	ldrh	r1, [r6, #60]	; 0x3c
    e25e:	8ff2      	ldrh	r2, [r6, #62]	; 0x3e
    e260:	42a1      	cmp	r1, r4
    e262:	d200      	bcs.n	e266 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x8c>
    e264:	4621      	mov	r1, r4
    e266:	4282      	cmp	r2, r0
    e268:	d300      	bcc.n	e26c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x92>
    e26a:	4610      	mov	r0, r2
    e26c:	8229      	strh	r1, [r5, #16]
    e26e:	8268      	strh	r0, [r5, #18]
    e270:	454c      	cmp	r4, r9
    e272:	d101      	bne.n	e278 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x9e>
    e274:	4547      	cmp	r7, r8
    e276:	d002      	beq.n	e27e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa4>
    e278:	2001      	movs	r0, #1
    e27a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e27e:	2000      	movs	r0, #0
    e280:	e7fb      	b.n	e27a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa0>
    e282:	2196      	movs	r1, #150	; 0x96
    e284:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e288:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e28c:	f000 b800 	b.w	e290 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xb6>
    e290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e294:	460d      	mov	r5, r1
    e296:	4606      	mov	r6, r0
    e298:	4698      	mov	r8, r3
    e29a:	4617      	mov	r7, r2
    e29c:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e29e:	4611      	mov	r1, r2
    e2a0:	f7ff ffa2 	bl	e1e8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e2a4:	4604      	mov	r4, r0
    e2a6:	4639      	mov	r1, r7
    e2a8:	4630      	mov	r0, r6
    e2aa:	f7ff ffb6 	bl	e21a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x40>
    e2ae:	42a0      	cmp	r0, r4
    e2b0:	d200      	bcs.n	e2b4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xda>
    e2b2:	4604      	mov	r4, r0
    e2b4:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e2b6:	4641      	mov	r1, r8
    e2b8:	f7ff ff96 	bl	e1e8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e2bc:	8ff1      	ldrh	r1, [r6, #62]	; 0x3e
    e2be:	4281      	cmp	r1, r0
    e2c0:	d200      	bcs.n	e2c4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xea>
    e2c2:	4608      	mov	r0, r1
    e2c4:	4420      	add	r0, r4
    e2c6:	4428      	add	r0, r5
    e2c8:	1d80      	adds	r0, r0, #6
    e2ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e2ce:	b510      	push	{r4, lr}
    e2d0:	4604      	mov	r4, r0
    e2d2:	2108      	movs	r1, #8
    e2d4:	4620      	mov	r0, r4
    e2d6:	f7f2 fc1b 	bl	b10 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e2da:	6820      	ldr	r0, [r4, #0]
    e2dc:	2800      	cmp	r0, #0
    e2de:	d102      	bne.n	e2e6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x10c>
    e2e0:	6860      	ldr	r0, [r4, #4]
    e2e2:	2800      	cmp	r0, #0
    e2e4:	d0f5      	beq.n	e2d2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf8>
    e2e6:	bd10      	pop	{r4, pc}

0000e2e8 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    e2e8:	f000 0155 	and.w	r1, r0, #85	; 0x55
    e2ec:	2255      	movs	r2, #85	; 0x55
    e2ee:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e2f2:	4408      	add	r0, r1
    e2f4:	f000 0133 	and.w	r1, r0, #51	; 0x33
    e2f8:	2233      	movs	r2, #51	; 0x33
    e2fa:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e2fe:	4408      	add	r0, r1
    e300:	f000 010f 	and.w	r1, r0, #15
    e304:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    e308:	4770      	bx	lr

0000e30a <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>:
    e30a:	6840      	ldr	r0, [r0, #4]
    e30c:	2100      	movs	r1, #0
    e30e:	f820 1fd8 	strh.w	r1, [r0, #216]!
    e312:	7881      	ldrb	r1, [r0, #2]
    e314:	1c49      	adds	r1, r1, #1
    e316:	7081      	strb	r1, [r0, #2]
    e318:	4770      	bx	lr

0000e31a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>:
    e31a:	b510      	push	{r4, lr}
    e31c:	6840      	ldr	r0, [r0, #4]
    e31e:	f810 1fda 	ldrb.w	r1, [r0, #218]!
    e322:	1e49      	subs	r1, r1, #1
    e324:	b249      	sxtb	r1, r1
    e326:	7001      	strb	r1, [r0, #0]
    e328:	2900      	cmp	r1, #0
    e32a:	da03      	bge.n	e334 <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA+0x1a>
    e32c:	2135      	movs	r1, #53	; 0x35
    e32e:	204a      	movs	r0, #74	; 0x4a
    e330:	f7f2 fb3e 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e334:	bd10      	pop	{r4, pc}

0000e336 <sym_2UM6LVQLLMOP7WZDJLNUGNNDXOSOGAIT6WB627Q>:
    e336:	6840      	ldr	r0, [r0, #4]
    e338:	f880 1123 	strb.w	r1, [r0, #291]	; 0x123
    e33c:	f880 2122 	strb.w	r2, [r0, #290]	; 0x122
    e340:	4770      	bx	lr

0000e342 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>:
    e342:	6840      	ldr	r0, [r0, #4]
    e344:	2100      	movs	r1, #0
    e346:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    e34a:	f880 10d6 	strb.w	r1, [r0, #214]	; 0xd6
    e34e:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    e352:	4770      	bx	lr

0000e354 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI>:
    e354:	b510      	push	{r4, lr}
    e356:	f1a0 0234 	sub.w	r2, r0, #52	; 0x34
    e35a:	f830 4cb4 	ldrh.w	r4, [r0, #-180]
    e35e:	2000      	movs	r0, #0
    e360:	7048      	strb	r0, [r1, #1]
    e362:	230a      	movs	r3, #10
    e364:	700b      	strb	r3, [r1, #0]
    e366:	7108      	strb	r0, [r1, #4]
    e368:	f8a1 4005 	strh.w	r4, [r1, #5]
    e36c:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
    e370:	71c8      	strb	r0, [r1, #7]
    e372:	4620      	mov	r0, r4
    e374:	f7f2 ffde 	bl	1334 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e378:	f7fe fdf8 	bl	cf6c <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    e37c:	b140      	cbz	r0, e390 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI+0x3c>
    e37e:	4620      	mov	r0, r4
    e380:	f7ff f9f8 	bl	d774 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e384:	4620      	mov	r0, r4
    e386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e38a:	2100      	movs	r1, #0
    e38c:	f7f2 bee0 	b.w	1150 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e390:	2173      	movs	r1, #115	; 0x73
    e392:	2063      	movs	r0, #99	; 0x63
    e394:	f7f2 fb0c 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e398 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA>:
    e398:	b570      	push	{r4, r5, r6, lr}
    e39a:	6844      	ldr	r4, [r0, #4]
    e39c:	460d      	mov	r5, r1
    e39e:	7803      	ldrb	r3, [r0, #0]
    e3a0:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
    e3a4:	3480      	adds	r4, #128	; 0x80
    e3a6:	2101      	movs	r1, #1
    e3a8:	4620      	mov	r0, r4
    e3aa:	f7ff facd 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e3ae:	b108      	cbz	r0, e3b4 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA+0x1c>
    e3b0:	2000      	movs	r0, #0
    e3b2:	bd70      	pop	{r4, r5, r6, pc}
    e3b4:	4628      	mov	r0, r5
    e3b6:	f7ff fe00 	bl	dfba <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
    e3ba:	f884 0020 	strb.w	r0, [r4, #32]
    e3be:	2006      	movs	r0, #6
    e3c0:	77e0      	strb	r0, [r4, #31]
    e3c2:	e7f5      	b.n	e3b0 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA+0x18>

0000e3c4 <sym_MWD4AC6ISIKEYDTZF7KXOTJOBUPKKWWLNRGAYAA>:
    e3c4:	b510      	push	{r4, lr}
    e3c6:	6844      	ldr	r4, [r0, #4]
    e3c8:	7803      	ldrb	r3, [r0, #0]
    e3ca:	2101      	movs	r1, #1
    e3cc:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
    e3d0:	3480      	adds	r4, #128	; 0x80
    e3d2:	4620      	mov	r0, r4
    e3d4:	f7ff fab8 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e3d8:	2800      	cmp	r0, #0
    e3da:	d101      	bne.n	e3e0 <sym_MWD4AC6ISIKEYDTZF7KXOTJOBUPKKWWLNRGAYAA+0x1c>
    e3dc:	2007      	movs	r0, #7
    e3de:	77e0      	strb	r0, [r4, #31]
    e3e0:	bd10      	pop	{r4, pc}

0000e3e2 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y>:
    e3e2:	2200      	movs	r2, #0
    e3e4:	704a      	strb	r2, [r1, #1]
    e3e6:	2307      	movs	r3, #7
    e3e8:	700b      	strb	r3, [r1, #0]
    e3ea:	f100 030a 	add.w	r3, r0, #10
    e3ee:	f5a0 70df 	sub.w	r0, r0, #446	; 0x1be
    e3f2:	84c2      	strh	r2, [r0, #38]	; 0x26
    e3f4:	6818      	ldr	r0, [r3, #0]
    e3f6:	6048      	str	r0, [r1, #4]
    e3f8:	6858      	ldr	r0, [r3, #4]
    e3fa:	6088      	str	r0, [r1, #8]
    e3fc:	8918      	ldrh	r0, [r3, #8]
    e3fe:	8188      	strh	r0, [r1, #12]
    e400:	710a      	strb	r2, [r1, #4]
    e402:	4770      	bx	lr

0000e404 <sym_YAZXXBE3UO3G4AM6TR2NFBXVHOGUGHIF6JXVVLI>:
    e404:	b510      	push	{r4, lr}
    e406:	6844      	ldr	r4, [r0, #4]
    e408:	7803      	ldrb	r3, [r0, #0]
    e40a:	2100      	movs	r1, #0
    e40c:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e410:	3480      	adds	r4, #128	; 0x80
    e412:	4620      	mov	r0, r4
    e414:	f7ff fa98 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e418:	b110      	cbz	r0, e420 <sym_YAZXXBE3UO3G4AM6TR2NFBXVHOGUGHIF6JXVVLI+0x1c>
    e41a:	201d      	movs	r0, #29
    e41c:	7760      	strb	r0, [r4, #29]
    e41e:	bd10      	pop	{r4, pc}
    e420:	2122      	movs	r1, #34	; 0x22
    e422:	2045      	movs	r0, #69	; 0x45
    e424:	f7f2 fac4 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e428 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA>:
    e428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e42c:	4606      	mov	r6, r0
    e42e:	7803      	ldrb	r3, [r0, #0]
    e430:	6840      	ldr	r0, [r0, #4]
    e432:	468b      	mov	fp, r1
    e434:	f100 0480 	add.w	r4, r0, #128	; 0x80
    e438:	4605      	mov	r5, r0
    e43a:	2700      	movs	r7, #0
    e43c:	7f62      	ldrb	r2, [r4, #29]
    e43e:	210a      	movs	r1, #10
    e440:	4620      	mov	r0, r4
    e442:	f7ff fa81 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e446:	b358      	cbz	r0, e4a0 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x78>
    e448:	4658      	mov	r0, fp
    e44a:	f7ff fd56 	bl	defa <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    e44e:	b1f0      	cbz	r0, e48e <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x66>
    e450:	4658      	mov	r0, fp
    e452:	f7ff fd4c 	bl	deee <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    e456:	4682      	mov	sl, r0
    e458:	4658      	mov	r0, fp
    e45a:	f7ff fd4c 	bl	def6 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    e45e:	4681      	mov	r9, r0
    e460:	4658      	mov	r0, fp
    e462:	f7ff fd42 	bl	deea <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    e466:	4680      	mov	r8, r0
    e468:	4658      	mov	r0, fp
    e46a:	f7ff fd42 	bl	def2 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    e46e:	4601      	mov	r1, r0
    e470:	464b      	mov	r3, r9
    e472:	4642      	mov	r2, r8
    e474:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    e478:	f8cd a000 	str.w	sl, [sp]
    e47c:	f7ff fead 	bl	e1da <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    e480:	4628      	mov	r0, r5
    e482:	f7ff fe4e 	bl	e122 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    e486:	2105      	movs	r1, #5
    e488:	6870      	ldr	r0, [r6, #4]
    e48a:	f7f6 f887 	bl	459c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    e48e:	f884 7056 	strb.w	r7, [r4, #86]	; 0x56
    e492:	7767      	strb	r7, [r4, #29]
    e494:	4630      	mov	r0, r6
    e496:	f000 f805 	bl	e4a4 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    e49a:	2000      	movs	r0, #0
    e49c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e4a0:	2001      	movs	r0, #1
    e4a2:	e7fb      	b.n	e49c <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x74>

0000e4a4 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>:
    e4a4:	6841      	ldr	r1, [r0, #4]
    e4a6:	f501 72a5 	add.w	r2, r1, #330	; 0x14a
    e4aa:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    e4ae:	2801      	cmp	r0, #1
    e4b0:	d004      	beq.n	e4bc <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA+0x18>
    e4b2:	f831 0b2c 	ldrh.w	r0, [r1], #44
    e4b6:	3218      	adds	r2, #24
    e4b8:	f7f4 bc9a 	b.w	2df0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    e4bc:	2002      	movs	r0, #2
    e4be:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    e4c2:	4770      	bx	lr

0000e4c4 <sym_2TCPCDAUQ3FXZYG56Z6ZP7VCFNUJTBV3EZJYPGY>:
    e4c4:	2200      	movs	r2, #0
    e4c6:	704a      	strb	r2, [r1, #1]
    e4c8:	220b      	movs	r2, #11
    e4ca:	700a      	strb	r2, [r1, #0]
    e4cc:	f100 020a 	add.w	r2, r0, #10
    e4d0:	7a83      	ldrb	r3, [r0, #10]
    e4d2:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
    e4d6:	710b      	strb	r3, [r1, #4]
    e4d8:	8800      	ldrh	r0, [r0, #0]
    e4da:	80c8      	strh	r0, [r1, #6]
    e4dc:	7910      	ldrb	r0, [r2, #4]
    e4de:	7208      	strb	r0, [r1, #8]
    e4e0:	4770      	bx	lr

0000e4e2 <sym_S6U6ANENQP6QL5TLITNXPOYFSB26Q5AFTW32CXI>:
    e4e2:	2200      	movs	r2, #0
    e4e4:	704a      	strb	r2, [r1, #1]
    e4e6:	220c      	movs	r2, #12
    e4e8:	700a      	strb	r2, [r1, #0]
    e4ea:	7a82      	ldrb	r2, [r0, #10]
    e4ec:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
    e4f0:	710a      	strb	r2, [r1, #4]
    e4f2:	8800      	ldrh	r0, [r0, #0]
    e4f4:	80c8      	strh	r0, [r1, #6]
    e4f6:	4770      	bx	lr

0000e4f8 <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY>:
    e4f8:	2200      	movs	r2, #0
    e4fa:	704a      	strb	r2, [r1, #1]
    e4fc:	2208      	movs	r2, #8
    e4fe:	700a      	strb	r2, [r1, #0]
    e500:	f5a0 7237 	sub.w	r2, r0, #732	; 0x2dc
    e504:	8812      	ldrh	r2, [r2, #0]
    e506:	808a      	strh	r2, [r1, #4]
    e508:	68c2      	ldr	r2, [r0, #12]
    e50a:	f8c1 2006 	str.w	r2, [r1, #6]
    e50e:	6902      	ldr	r2, [r0, #16]
    e510:	f8c1 200a 	str.w	r2, [r1, #10]
    e514:	8a80      	ldrh	r0, [r0, #20]
    e516:	81c8      	strh	r0, [r1, #14]
    e518:	4770      	bx	lr
    e51a:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e51e:	f001 0307 	and.w	r3, r1, #7
    e522:	7802      	ldrb	r2, [r0, #0]
    e524:	2101      	movs	r1, #1
    e526:	4099      	lsls	r1, r3
    e528:	430a      	orrs	r2, r1
    e52a:	7002      	strb	r2, [r0, #0]
    e52c:	4770      	bx	lr

0000e52e <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
    e52e:	b510      	push	{r4, lr}
    e530:	6844      	ldr	r4, [r0, #4]
    e532:	7803      	ldrb	r3, [r0, #0]
    e534:	2100      	movs	r1, #0
    e536:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e53a:	3480      	adds	r4, #128	; 0x80
    e53c:	4620      	mov	r0, r4
    e53e:	f7ff fa03 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e542:	b110      	cbz	r0, e54a <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY+0x1c>
    e544:	2004      	movs	r0, #4
    e546:	7760      	strb	r0, [r4, #29]
    e548:	bd10      	pop	{r4, pc}
    e54a:	21ab      	movs	r1, #171	; 0xab
    e54c:	201c      	movs	r0, #28
    e54e:	f7f2 fa2f 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e552 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
    e552:	b510      	push	{r4, lr}
    e554:	6841      	ldr	r1, [r0, #4]
    e556:	f891 208c 	ldrb.w	r2, [r1, #140]	; 0x8c
    e55a:	07d2      	lsls	r2, r2, #31
    e55c:	d00b      	beq.n	e576 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x24>
    e55e:	f811 2fda 	ldrb.w	r2, [r1, #218]!
    e562:	1e52      	subs	r2, r2, #1
    e564:	b252      	sxtb	r2, r2
    e566:	700a      	strb	r2, [r1, #0]
    e568:	6840      	ldr	r0, [r0, #4]
    e56a:	2a00      	cmp	r2, #0
    e56c:	da05      	bge.n	e57a <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x28>
    e56e:	21ba      	movs	r1, #186	; 0xba
    e570:	201c      	movs	r0, #28
    e572:	f7f2 fa1d 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e576:	21b8      	movs	r1, #184	; 0xb8
    e578:	e7fa      	b.n	e570 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x1e>
    e57a:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    e57e:	f021 0101 	bic.w	r1, r1, #1
    e582:	6001      	str	r1, [r0, #0]
    e584:	bd10      	pop	{r4, pc}
    e586:	2200      	movs	r2, #0
    e588:	704a      	strb	r2, [r1, #1]
    e58a:	2206      	movs	r2, #6
    e58c:	700a      	strb	r2, [r1, #0]
    e58e:	f850 2f09 	ldr.w	r2, [r0, #9]!
    e592:	604a      	str	r2, [r1, #4]
    e594:	6842      	ldr	r2, [r0, #4]
    e596:	608a      	str	r2, [r1, #8]
    e598:	8902      	ldrh	r2, [r0, #8]
    e59a:	818a      	strh	r2, [r1, #12]
    e59c:	7a80      	ldrb	r0, [r0, #10]
    e59e:	7388      	strb	r0, [r1, #14]
    e5a0:	4770      	bx	lr

0000e5a2 <sym_NK4HRRKGX3ST3ARVTU6HUEXLOWZFFBMCIDNT3EI>:
    e5a2:	2200      	movs	r2, #0
    e5a4:	704a      	strb	r2, [r1, #1]
    e5a6:	220e      	movs	r2, #14
    e5a8:	f5a0 70ac 	sub.w	r0, r0, #344	; 0x158
    e5ac:	700a      	strb	r2, [r1, #0]
    e5ae:	8800      	ldrh	r0, [r0, #0]
    e5b0:	8088      	strh	r0, [r1, #4]
    e5b2:	4770      	bx	lr

0000e5b4 <sym_P2OZB7UAJZNJ47VR5DS7V33BAD5DESWDHJYKOZA>:
    e5b4:	b510      	push	{r4, lr}
    e5b6:	6844      	ldr	r4, [r0, #4]
    e5b8:	f894 108c 	ldrb.w	r1, [r4, #140]	; 0x8c
    e5bc:	3480      	adds	r4, #128	; 0x80
    e5be:	f011 0f04 	tst.w	r1, #4
    e5c2:	d001      	beq.n	e5c8 <sym_P2OZB7UAJZNJ47VR5DS7V33BAD5DESWDHJYKOZA+0x14>
    e5c4:	2001      	movs	r0, #1
    e5c6:	bd10      	pop	{r4, pc}
    e5c8:	f7ff fe9f 	bl	e30a <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    e5cc:	68e0      	ldr	r0, [r4, #12]
    e5ce:	f040 0004 	orr.w	r0, r0, #4
    e5d2:	60e0      	str	r0, [r4, #12]
    e5d4:	2000      	movs	r0, #0
    e5d6:	bd10      	pop	{r4, pc}

0000e5d8 <sym_BR7VCSB75RGRQ7O7PYOVLMHXKJKUMK6XH3GVGZA>:
    e5d8:	b510      	push	{r4, lr}
    e5da:	6844      	ldr	r4, [r0, #4]
    e5dc:	7803      	ldrb	r3, [r0, #0]
    e5de:	2100      	movs	r1, #0
    e5e0:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e5e4:	3480      	adds	r4, #128	; 0x80
    e5e6:	4620      	mov	r0, r4
    e5e8:	f7ff f9ae 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e5ec:	b110      	cbz	r0, e5f4 <sym_BR7VCSB75RGRQ7O7PYOVLMHXKJKUMK6XH3GVGZA+0x1c>
    e5ee:	200f      	movs	r0, #15
    e5f0:	7760      	strb	r0, [r4, #29]
    e5f2:	bd10      	pop	{r4, pc}
    e5f4:	216e      	movs	r1, #110	; 0x6e
    e5f6:	204b      	movs	r0, #75	; 0x4b
    e5f8:	f7f2 f9da 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e5fc <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ>:
    e5fc:	b510      	push	{r4, lr}
    e5fe:	6844      	ldr	r4, [r0, #4]
    e600:	7803      	ldrb	r3, [r0, #0]
    e602:	2109      	movs	r1, #9
    e604:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e608:	3480      	adds	r4, #128	; 0x80
    e60a:	4620      	mov	r0, r4
    e60c:	f7ff f99c 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e610:	2800      	cmp	r0, #0
    e612:	d005      	beq.n	e620 <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ+0x24>
    e614:	2000      	movs	r0, #0
    e616:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
    e61a:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    e61e:	7760      	strb	r0, [r4, #29]
    e620:	bd10      	pop	{r4, pc}

0000e622 <sym_E2LE5OMX5VGHQ6BJ4G7CNEBI3KUUYONP2PS2EJQ>:
    e622:	6841      	ldr	r1, [r0, #4]
    e624:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    e628:	f022 0204 	bic.w	r2, r2, #4
    e62c:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    e630:	f7ff be73 	b.w	e31a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>

0000e634 <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A>:
    e634:	b510      	push	{r4, lr}
    e636:	2300      	movs	r3, #0
    e638:	704b      	strb	r3, [r1, #1]
    e63a:	2401      	movs	r4, #1
    e63c:	700c      	strb	r4, [r1, #0]
    e63e:	f100 0209 	add.w	r2, r0, #9
    e642:	710b      	strb	r3, [r1, #4]
    e644:	f830 0cde 	ldrh.w	r0, [r0, #-222]
    e648:	f8a1 0005 	strh.w	r0, [r1, #5]
    e64c:	f812 0b01 	ldrb.w	r0, [r2], #1
    e650:	71c8      	strb	r0, [r1, #7]
    e652:	8810      	ldrh	r0, [r2, #0]
    e654:	8108      	strh	r0, [r1, #8]
    e656:	8850      	ldrh	r0, [r2, #2]
    e658:	8148      	strh	r0, [r1, #10]
    e65a:	bd10      	pop	{r4, pc}

0000e65c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>:
    e65c:	b570      	push	{r4, r5, r6, lr}
    e65e:	7803      	ldrb	r3, [r0, #0]
    e660:	6840      	ldr	r0, [r0, #4]
    e662:	2500      	movs	r5, #0
    e664:	f100 0480 	add.w	r4, r0, #128	; 0x80
    e668:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
    e66c:	f500 7098 	add.w	r0, r0, #304	; 0x130
    e670:	0789      	lsls	r1, r1, #30
    e672:	d40e      	bmi.n	e692 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x36>
    e674:	7f62      	ldrb	r2, [r4, #29]
    e676:	2100      	movs	r1, #0
    e678:	4620      	mov	r0, r4
    e67a:	f7ff f965 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e67e:	b130      	cbz	r0, e68e <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x32>
    e680:	2001      	movs	r0, #1
    e682:	7760      	strb	r0, [r4, #29]
    e684:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    e688:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
    e68c:	bd70      	pop	{r4, r5, r6, pc}
    e68e:	216e      	movs	r1, #110	; 0x6e
    e690:	e00b      	b.n	e6aa <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x4e>
    e692:	7b21      	ldrb	r1, [r4, #12]
    e694:	0789      	lsls	r1, r1, #30
    e696:	d50f      	bpl.n	e6b8 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x5c>
    e698:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    e69c:	1e49      	subs	r1, r1, #1
    e69e:	b249      	sxtb	r1, r1
    e6a0:	f884 105a 	strb.w	r1, [r4, #90]	; 0x5a
    e6a4:	2900      	cmp	r1, #0
    e6a6:	da03      	bge.n	e6b0 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x54>
    e6a8:	2180      	movs	r1, #128	; 0x80
    e6aa:	2040      	movs	r0, #64	; 0x40
    e6ac:	f7f2 f980 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6b0:	68e1      	ldr	r1, [r4, #12]
    e6b2:	f021 0102 	bic.w	r1, r1, #2
    e6b6:	60e1      	str	r1, [r4, #12]
    e6b8:	7485      	strb	r5, [r0, #18]
    e6ba:	bd70      	pop	{r4, r5, r6, pc}
    e6bc:	2200      	movs	r2, #0
    e6be:	704a      	strb	r2, [r1, #1]
    e6c0:	2219      	movs	r2, #25
    e6c2:	700a      	strb	r2, [r1, #0]
    e6c4:	f8d0 000a 	ldr.w	r0, [r0, #10]
    e6c8:	6048      	str	r0, [r1, #4]
    e6ca:	4770      	bx	lr
    e6cc:	b510      	push	{r4, lr}
    e6ce:	4604      	mov	r4, r0
    e6d0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    e6d4:	e9d4 1000 	ldrd	r1, r0, [r4]
    e6d8:	4050      	eors	r0, r2
    e6da:	ea70 0101 	orns	r1, r0, r1
    e6de:	d008      	beq.n	e6f2 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
    e6e0:	f001 ff5b 	bl	1059a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    e6e4:	e9d4 2300 	ldrd	r2, r3, [r4]
    e6e8:	1a80      	subs	r0, r0, r2
    e6ea:	4199      	sbcs	r1, r3
    e6ec:	d301      	bcc.n	e6f2 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
    e6ee:	2001      	movs	r0, #1
    e6f0:	bd10      	pop	{r4, pc}
    e6f2:	2000      	movs	r0, #0
    e6f4:	bd10      	pop	{r4, pc}

0000e6f6 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>:
    e6f6:	b508      	push	{r3, lr}
    e6f8:	f000 f804 	bl	e704 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    e6fc:	466a      	mov	r2, sp
    e6fe:	f7f4 fecd 	bl	349c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    e702:	bd08      	pop	{r3, pc}
    e704:	b530      	push	{r4, r5, lr}
    e706:	784c      	ldrb	r4, [r1, #1]
    e708:	4603      	mov	r3, r0
    e70a:	7808      	ldrb	r0, [r1, #0]
    e70c:	788d      	ldrb	r5, [r1, #2]
    e70e:	0e22      	lsrs	r2, r4, #24
    e710:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    e714:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    e718:	ea42 4215 	orr.w	r2, r2, r5, lsr #16
    e71c:	78cd      	ldrb	r5, [r1, #3]
    e71e:	790c      	ldrb	r4, [r1, #4]
    e720:	ea42 2215 	orr.w	r2, r2, r5, lsr #8
    e724:	4322      	orrs	r2, r4
    e726:	7949      	ldrb	r1, [r1, #5]
    e728:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
    e72c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    e730:	4611      	mov	r1, r2
    e732:	2b01      	cmp	r3, #1
    e734:	d101      	bne.n	e73a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x44>
    e736:	f442 3180 	orr.w	r1, r2, #65536	; 0x10000
    e73a:	bd30      	pop	{r4, r5, pc}
    e73c:	2801      	cmp	r0, #1
    e73e:	d102      	bne.n	e746 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x50>
    e740:	7948      	ldrb	r0, [r1, #5]
    e742:	0980      	lsrs	r0, r0, #6
    e744:	d001      	beq.n	e74a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x54>
    e746:	2000      	movs	r0, #0
    e748:	4770      	bx	lr
    e74a:	2001      	movs	r0, #1
    e74c:	4770      	bx	lr
    e74e:	2801      	cmp	r0, #1
    e750:	d106      	bne.n	e760 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    e752:	7948      	ldrb	r0, [r1, #5]
    e754:	2101      	movs	r1, #1
    e756:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    e75a:	d101      	bne.n	e760 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    e75c:	2001      	movs	r0, #1
    e75e:	4770      	bx	lr
    e760:	2000      	movs	r0, #0
    e762:	4770      	bx	lr
    e764:	2802      	cmp	r0, #2
    e766:	d003      	beq.n	e770 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7a>
    e768:	2803      	cmp	r0, #3
    e76a:	d001      	beq.n	e770 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7a>
    e76c:	2000      	movs	r0, #0
    e76e:	4770      	bx	lr
    e770:	2001      	movs	r0, #1
    e772:	4770      	bx	lr

0000e774 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    e774:	b510      	push	{r4, lr}
    e776:	4604      	mov	r4, r0
    e778:	7c00      	ldrb	r0, [r0, #16]
    e77a:	f7ff fff3 	bl	e764 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    e77e:	b148      	cbz	r0, e794 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e780:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    e784:	f104 0158 	add.w	r1, r4, #88	; 0x58
    e788:	f7ff f890 	bl	d8ac <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e78c:	2808      	cmp	r0, #8
    e78e:	d001      	beq.n	e794 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e790:	2001      	movs	r0, #1
    e792:	bd10      	pop	{r4, pc}
    e794:	7c20      	ldrb	r0, [r4, #16]
    e796:	b118      	cbz	r0, e7a0 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e798:	2802      	cmp	r0, #2
    e79a:	d001      	beq.n	e7a0 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e79c:	7de0      	ldrb	r0, [r4, #23]
    e79e:	bd10      	pop	{r4, pc}
    e7a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e7a4:	2000      	movs	r0, #0
    e7a6:	f7f3 b893 	b.w	18d0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000e7aa <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    e7aa:	b508      	push	{r3, lr}
    e7ac:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    e7b0:	f88d 1000 	strb.w	r1, [sp]
    e7b4:	9900      	ldr	r1, [sp, #0]
    e7b6:	9100      	str	r1, [sp, #0]
    e7b8:	f89d 1000 	ldrb.w	r1, [sp]
    e7bc:	b941      	cbnz	r1, e7d0 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x26>
    e7be:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    e7c2:	f88d 1000 	strb.w	r1, [sp]
    e7c6:	9900      	ldr	r1, [sp, #0]
    e7c8:	9100      	str	r1, [sp, #0]
    e7ca:	f89d 1000 	ldrb.w	r1, [sp]
    e7ce:	b109      	cbz	r1, e7d4 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x2a>
    e7d0:	2001      	movs	r0, #1
    e7d2:	bd08      	pop	{r3, pc}
    e7d4:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    e7d8:	f88d 0000 	strb.w	r0, [sp]
    e7dc:	9800      	ldr	r0, [sp, #0]
    e7de:	9000      	str	r0, [sp, #0]
    e7e0:	f89d 0000 	ldrb.w	r0, [sp]
    e7e4:	2000      	movs	r0, #0
    e7e6:	bd08      	pop	{r3, pc}

0000e7e8 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    e7e8:	20ff      	movs	r0, #255	; 0xff
    e7ea:	7008      	strb	r0, [r1, #0]
    e7ec:	6b48      	ldr	r0, [r1, #52]	; 0x34
    e7ee:	f7fe bf62 	b.w	d6b6 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000e7f2 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    e7f2:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e7f4:	460d      	mov	r5, r1
    e7f6:	4604      	mov	r4, r0
    e7f8:	f44f 728c 	mov.w	r2, #280	; 0x118
    e7fc:	2100      	movs	r1, #0
    e7fe:	f002 f8d8 	bl	109b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e802:	20ff      	movs	r0, #255	; 0xff
    e804:	7020      	strb	r0, [r4, #0]
    e806:	207f      	movs	r0, #127	; 0x7f
    e808:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    e80c:	2013      	movs	r0, #19
    e80e:	8060      	strh	r0, [r4, #2]
    e810:	f242 7010 	movw	r0, #10000	; 0x2710
    e814:	8460      	strh	r0, [r4, #34]	; 0x22
    e816:	f7f2 fe4b 	bl	14b0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    e81a:	4601      	mov	r1, r0
    e81c:	6360      	str	r0, [r4, #52]	; 0x34
    e81e:	2200      	movs	r2, #0
    e820:	4668      	mov	r0, sp
    e822:	f7fe feae 	bl	d582 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e826:	2200      	movs	r2, #0
    e828:	2101      	movs	r1, #1
    e82a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    e82c:	f7fe ff23 	bl	d676 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e830:	2204      	movs	r2, #4
    e832:	4668      	mov	r0, sp
    e834:	6b61      	ldr	r1, [r4, #52]	; 0x34
    e836:	f7fe fea4 	bl	d582 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e83a:	2200      	movs	r2, #0
    e83c:	4611      	mov	r1, r2
    e83e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    e840:	f7fe ff19 	bl	d676 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e844:	73a5      	strb	r5, [r4, #14]
    e846:	f104 0028 	add.w	r0, r4, #40	; 0x28
    e84a:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    e84e:	f000 b958 	b.w	eb02 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000e852 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    e852:	7880      	ldrb	r0, [r0, #2]
    e854:	f3c0 0080 	ubfx	r0, r0, #2, #1
    e858:	b108      	cbz	r0, e85e <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    e85a:	2000      	movs	r0, #0
    e85c:	4770      	bx	lr
    e85e:	201f      	movs	r0, #31
    e860:	4770      	bx	lr

0000e862 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    e862:	f7f5 bb81 	b.w	3f68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>

0000e866 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    e866:	6880      	ldr	r0, [r0, #8]
    e868:	4770      	bx	lr

0000e86a <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    e86a:	2001      	movs	r0, #1
    e86c:	4770      	bx	lr

0000e86e <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    e86e:	b510      	push	{r4, lr}
    e870:	4604      	mov	r4, r0
    e872:	3028      	adds	r0, #40	; 0x28
    e874:	f000 f905 	bl	ea82 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    e878:	8861      	ldrh	r1, [r4, #2]
    e87a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e87e:	2228      	movs	r2, #40	; 0x28
    e880:	f7f5 bd42 	b.w	4308 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000e884 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    e884:	2200      	movs	r2, #0
    e886:	8602      	strh	r2, [r0, #48]	; 0x30
    e888:	8843      	ldrh	r3, [r0, #2]
    e88a:	2b1d      	cmp	r3, #29
    e88c:	d001      	beq.n	e892 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    e88e:	7341      	strb	r1, [r0, #13]
    e890:	4770      	bx	lr
    e892:	7342      	strb	r2, [r0, #13]
    e894:	4770      	bx	lr

0000e896 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>:
    e896:	b510      	push	{r4, lr}
    e898:	2400      	movs	r4, #0
    e89a:	6b40      	ldr	r0, [r0, #52]	; 0x34
    e89c:	f7fe fee3 	bl	d666 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>
    e8a0:	4384      	bics	r4, r0
    e8a2:	f084 0001 	eor.w	r0, r4, #1
    e8a6:	bd10      	pop	{r4, pc}

0000e8a8 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    e8a8:	2000      	movs	r0, #0
    e8aa:	4770      	bx	lr

0000e8ac <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    e8ac:	7880      	ldrb	r0, [r0, #2]
    e8ae:	f000 0001 	and.w	r0, r0, #1
    e8b2:	4770      	bx	lr

0000e8b4 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    e8b4:	7880      	ldrb	r0, [r0, #2]
    e8b6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e8ba:	4770      	bx	lr

0000e8bc <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    e8bc:	2001      	movs	r0, #1
    e8be:	4770      	bx	lr

0000e8c0 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    e8c0:	7880      	ldrb	r0, [r0, #2]
    e8c2:	f3c0 0040 	ubfx	r0, r0, #1, #1
    e8c6:	4770      	bx	lr

0000e8c8 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    e8c8:	f990 000e 	ldrsb.w	r0, [r0, #14]
    e8cc:	4770      	bx	lr

0000e8ce <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    e8ce:	7800      	ldrb	r0, [r0, #0]
    e8d0:	28ff      	cmp	r0, #255	; 0xff
    e8d2:	d001      	beq.n	e8d8 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    e8d4:	2001      	movs	r0, #1
    e8d6:	4770      	bx	lr
    e8d8:	2000      	movs	r0, #0
    e8da:	4770      	bx	lr

0000e8dc <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
    e8dc:	f800 1f20 	strb.w	r1, [r0, #32]!
    e8e0:	7042      	strb	r2, [r0, #1]
    e8e2:	4770      	bx	lr

0000e8e4 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    e8e4:	680a      	ldr	r2, [r1, #0]
    e8e6:	f840 2f11 	str.w	r2, [r0, #17]!
    e8ea:	8889      	ldrh	r1, [r1, #4]
    e8ec:	8081      	strh	r1, [r0, #4]
    e8ee:	2101      	movs	r1, #1
    e8f0:	7181      	strb	r1, [r0, #6]
    e8f2:	4770      	bx	lr

0000e8f4 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    e8f4:	7b00      	ldrb	r0, [r0, #12]
    e8f6:	4770      	bx	lr

0000e8f8 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    e8f8:	2001      	movs	r0, #1
    e8fa:	4770      	bx	lr

0000e8fc <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    e8fc:	61c1      	str	r1, [r0, #28]
    e8fe:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    e902:	724a      	strb	r2, [r1, #9]
    e904:	f8d0 2051 	ldr.w	r2, [r0, #81]	; 0x51
    e908:	f8c1 200a 	str.w	r2, [r1, #10]
    e90c:	f8b0 0055 	ldrh.w	r0, [r0, #85]	; 0x55
    e910:	81c8      	strh	r0, [r1, #14]
    e912:	4770      	bx	lr

0000e914 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    e914:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    e918:	4770      	bx	lr

0000e91a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    e91a:	7bc0      	ldrb	r0, [r0, #15]
    e91c:	2800      	cmp	r0, #0
    e91e:	d000      	beq.n	e922 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    e920:	2001      	movs	r0, #1
    e922:	4770      	bx	lr
    e924:	7802      	ldrb	r2, [r0, #0]
    e926:	2320      	movs	r3, #32
    e928:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    e92c:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    e930:	430a      	orrs	r2, r1
    e932:	7002      	strb	r2, [r0, #0]
    e934:	4770      	bx	lr
    e936:	2101      	movs	r1, #1
    e938:	f7f4 bf66 	b.w	3808 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    e93c:	2101      	movs	r1, #1
    e93e:	f7f4 bf63 	b.w	3808 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    e942:	2200      	movs	r2, #0
    e944:	704a      	strb	r2, [r1, #1]
    e946:	2205      	movs	r2, #5
    e948:	700a      	strb	r2, [r1, #0]
    e94a:	f8d0 000a 	ldr.w	r0, [r0, #10]
    e94e:	6048      	str	r0, [r1, #4]
    e950:	4770      	bx	lr
    e952:	b510      	push	{r4, lr}
    e954:	460c      	mov	r4, r1
    e956:	2100      	movs	r1, #0
    e958:	7061      	strb	r1, [r4, #1]
    e95a:	2112      	movs	r1, #18
    e95c:	7021      	strb	r1, [r4, #0]
    e95e:	f100 0109 	add.w	r1, r0, #9
    e962:	2221      	movs	r2, #33	; 0x21
    e964:	1d20      	adds	r0, r4, #4
    e966:	f001 ffaa 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e96a:	2001      	movs	r0, #1
    e96c:	71e0      	strb	r0, [r4, #7]
    e96e:	7920      	ldrb	r0, [r4, #4]
    e970:	2800      	cmp	r0, #0
    e972:	d015      	beq.n	e9a0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x86>
    e974:	f8b4 4005 	ldrh.w	r4, [r4, #5]
    e978:	2100      	movs	r1, #0
    e97a:	4620      	mov	r0, r4
    e97c:	f7f2 fb46 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e980:	2800      	cmp	r0, #0
    e982:	d00d      	beq.n	e9a0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x86>
    e984:	8800      	ldrh	r0, [r0, #0]
    e986:	f7fe fef5 	bl	d774 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e98a:	2100      	movs	r1, #0
    e98c:	4620      	mov	r0, r4
    e98e:	f7f2 fbdf 	bl	1150 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e992:	2800      	cmp	r0, #0
    e994:	d004      	beq.n	e9a0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x86>
    e996:	f240 2151 	movw	r1, #593	; 0x251
    e99a:	202d      	movs	r0, #45	; 0x2d
    e99c:	f7f2 f808 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e9a0:	bd10      	pop	{r4, pc}
    e9a2:	2200      	movs	r2, #0
    e9a4:	704a      	strb	r2, [r1, #1]
    e9a6:	221a      	movs	r2, #26
    e9a8:	700a      	strb	r2, [r1, #0]
    e9aa:	f850 2f09 	ldr.w	r2, [r0, #9]!
    e9ae:	604a      	str	r2, [r1, #4]
    e9b0:	6842      	ldr	r2, [r0, #4]
    e9b2:	608a      	str	r2, [r1, #8]
    e9b4:	7a00      	ldrb	r0, [r0, #8]
    e9b6:	7308      	strb	r0, [r1, #12]
    e9b8:	4770      	bx	lr
    e9ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e9be:	4604      	mov	r4, r0
    e9c0:	460f      	mov	r7, r1
    e9c2:	7e40      	ldrb	r0, [r0, #25]
    e9c4:	f7f3 fcc0 	bl	2348 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    e9c8:	4606      	mov	r6, r0
    e9ca:	7e20      	ldrb	r0, [r4, #24]
    e9cc:	f104 0551 	add.w	r5, r4, #81	; 0x51
    e9d0:	b120      	cbz	r0, e9dc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    e9d2:	b11e      	cbz	r6, e9dc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    e9d4:	7e60      	ldrb	r0, [r4, #25]
    e9d6:	f7f3 fcab 	bl	2330 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    e9da:	b1a0      	cbz	r0, ea06 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xec>
    e9dc:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    e9e0:	2800      	cmp	r0, #0
    e9e2:	d024      	beq.n	ea2e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x114>
    e9e4:	7ea0      	ldrb	r0, [r4, #26]
    e9e6:	2800      	cmp	r0, #0
    e9e8:	d021      	beq.n	ea2e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x114>
    e9ea:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    e9ee:	4629      	mov	r1, r5
    e9f0:	f7ff fead 	bl	e74e <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    e9f4:	b1a8      	cbz	r0, ea22 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x108>
    e9f6:	f7f3 fc97 	bl	2328 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    e9fa:	463a      	mov	r2, r7
    e9fc:	4629      	mov	r1, r5
    e9fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ea02:	f7fe beeb 	b.w	d7dc <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    ea06:	2001      	movs	r0, #1
    ea08:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    ea0c:	463a      	mov	r2, r7
    ea0e:	4629      	mov	r1, r5
    ea10:	4630      	mov	r0, r6
    ea12:	f7fe fee3 	bl	d7dc <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    ea16:	7e61      	ldrb	r1, [r4, #25]
    ea18:	4628      	mov	r0, r5
    ea1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ea1e:	f7f3 bc9f 	b.w	2360 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    ea22:	4639      	mov	r1, r7
    ea24:	4628      	mov	r0, r5
    ea26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ea2a:	f7fe bec6 	b.w	d7ba <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    ea2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ea32:	b510      	push	{r4, lr}
    ea34:	4604      	mov	r4, r0
    ea36:	4608      	mov	r0, r1
    ea38:	f7f9 fb16 	bl	8068 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    ea3c:	7921      	ldrb	r1, [r4, #4]
    ea3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ea42:	2025      	movs	r0, #37	; 0x25
    ea44:	f7f9 bae6 	b.w	8014 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    ea48:	b570      	push	{r4, r5, r6, lr}
    ea4a:	4614      	mov	r4, r2
    ea4c:	461d      	mov	r5, r3
    ea4e:	4606      	mov	r6, r0
    ea50:	f001 fda3 	bl	1059a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ea54:	1900      	adds	r0, r0, r4
    ea56:	4169      	adcs	r1, r5
    ea58:	e9c6 0100 	strd	r0, r1, [r6]
    ea5c:	bd70      	pop	{r4, r5, r6, pc}

0000ea5e <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    ea5e:	b570      	push	{r4, r5, r6, lr}
    ea60:	7001      	strb	r1, [r0, #0]
    ea62:	7042      	strb	r2, [r0, #1]
    ea64:	4614      	mov	r4, r2
    ea66:	460d      	mov	r5, r1
    ea68:	7880      	ldrb	r0, [r0, #2]
    ea6a:	f000 f87f 	bl	eb6c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ea6e:	fb10 f005 	smulbb	r0, r0, r5
    ea72:	4360      	muls	r0, r4
    ea74:	28ff      	cmp	r0, #255	; 0xff
    ea76:	d303      	bcc.n	ea80 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    ea78:	215c      	movs	r1, #92	; 0x5c
    ea7a:	202e      	movs	r0, #46	; 0x2e
    ea7c:	f7f1 ff98 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea80:	bd70      	pop	{r4, r5, r6, pc}

0000ea82 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    ea82:	b510      	push	{r4, lr}
    ea84:	4604      	mov	r4, r0
    ea86:	7880      	ldrb	r0, [r0, #2]
    ea88:	f000 f870 	bl	eb6c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ea8c:	7861      	ldrb	r1, [r4, #1]
    ea8e:	7822      	ldrb	r2, [r4, #0]
    ea90:	fb11 f102 	smulbb	r1, r1, r2
    ea94:	4348      	muls	r0, r1
    ea96:	b2c0      	uxtb	r0, r0
    ea98:	bd10      	pop	{r4, pc}

0000ea9a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    ea9a:	b510      	push	{r4, lr}
    ea9c:	4604      	mov	r4, r0
    ea9e:	f000 f84d 	bl	eb3c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    eaa2:	7961      	ldrb	r1, [r4, #5]
    eaa4:	1c49      	adds	r1, r1, #1
    eaa6:	b2c9      	uxtb	r1, r1
    eaa8:	7161      	strb	r1, [r4, #5]
    eaaa:	7862      	ldrb	r2, [r4, #1]
    eaac:	4291      	cmp	r1, r2
    eaae:	d10b      	bne.n	eac8 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    eab0:	2200      	movs	r2, #0
    eab2:	7162      	strb	r2, [r4, #5]
    eab4:	78e1      	ldrb	r1, [r4, #3]
    eab6:	4301      	orrs	r1, r0
    eab8:	70e1      	strb	r1, [r4, #3]
    eaba:	78a3      	ldrb	r3, [r4, #2]
    eabc:	4299      	cmp	r1, r3
    eabe:	d103      	bne.n	eac8 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    eac0:	70e2      	strb	r2, [r4, #3]
    eac2:	7921      	ldrb	r1, [r4, #4]
    eac4:	1c49      	adds	r1, r1, #1
    eac6:	7121      	strb	r1, [r4, #4]
    eac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eacc:	f000 b825 	b.w	eb1a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000ead0 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    ead0:	7081      	strb	r1, [r0, #2]
    ead2:	4770      	bx	lr

0000ead4 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    ead4:	b570      	push	{r4, r5, r6, lr}
    ead6:	4604      	mov	r4, r0
    ead8:	7880      	ldrb	r0, [r0, #2]
    eada:	f000 f847 	bl	eb6c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    eade:	7861      	ldrb	r1, [r4, #1]
    eae0:	fb11 f500 	smulbb	r5, r1, r0
    eae4:	78e0      	ldrb	r0, [r4, #3]
    eae6:	f000 f841 	bl	eb6c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    eaea:	7861      	ldrb	r1, [r4, #1]
    eaec:	7962      	ldrb	r2, [r4, #5]
    eaee:	fb10 2001 	smlabb	r0, r0, r1, r2
    eaf2:	7821      	ldrb	r1, [r4, #0]
    eaf4:	7922      	ldrb	r2, [r4, #4]
    eaf6:	1a89      	subs	r1, r1, r2
    eaf8:	fb11 f105 	smulbb	r1, r1, r5
    eafc:	1a08      	subs	r0, r1, r0
    eafe:	b2c0      	uxtb	r0, r0
    eb00:	bd70      	pop	{r4, r5, r6, pc}

0000eb02 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    eb02:	2100      	movs	r1, #0
    eb04:	6001      	str	r1, [r0, #0]
    eb06:	8081      	strh	r1, [r0, #4]
    eb08:	2101      	movs	r1, #1
    eb0a:	7041      	strb	r1, [r0, #1]
    eb0c:	7001      	strb	r1, [r0, #0]
    eb0e:	4770      	bx	lr

0000eb10 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    eb10:	2100      	movs	r1, #0
    eb12:	70c1      	strb	r1, [r0, #3]
    eb14:	7141      	strb	r1, [r0, #5]
    eb16:	7101      	strb	r1, [r0, #4]
    eb18:	4770      	bx	lr
    eb1a:	b510      	push	{r4, lr}
    eb1c:	2801      	cmp	r0, #1
    eb1e:	d007      	beq.n	eb30 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    eb20:	2802      	cmp	r0, #2
    eb22:	d007      	beq.n	eb34 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    eb24:	2804      	cmp	r0, #4
    eb26:	d007      	beq.n	eb38 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    eb28:	2139      	movs	r1, #57	; 0x39
    eb2a:	202e      	movs	r0, #46	; 0x2e
    eb2c:	f7f1 ff40 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb30:	2025      	movs	r0, #37	; 0x25
    eb32:	bd10      	pop	{r4, pc}
    eb34:	2026      	movs	r0, #38	; 0x26
    eb36:	bd10      	pop	{r4, pc}
    eb38:	2027      	movs	r0, #39	; 0x27
    eb3a:	bd10      	pop	{r4, pc}
    eb3c:	4601      	mov	r1, r0
    eb3e:	2000      	movs	r0, #0
    eb40:	788a      	ldrb	r2, [r1, #2]
    eb42:	07d3      	lsls	r3, r2, #31
    eb44:	d002      	beq.n	eb4c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    eb46:	78cb      	ldrb	r3, [r1, #3]
    eb48:	07db      	lsls	r3, r3, #31
    eb4a:	d006      	beq.n	eb5a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    eb4c:	0793      	lsls	r3, r2, #30
    eb4e:	d506      	bpl.n	eb5e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    eb50:	78cb      	ldrb	r3, [r1, #3]
    eb52:	079b      	lsls	r3, r3, #30
    eb54:	d403      	bmi.n	eb5e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    eb56:	2002      	movs	r0, #2
    eb58:	4770      	bx	lr
    eb5a:	2001      	movs	r0, #1
    eb5c:	4770      	bx	lr
    eb5e:	0752      	lsls	r2, r2, #29
    eb60:	d5fc      	bpl.n	eb5c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    eb62:	78c9      	ldrb	r1, [r1, #3]
    eb64:	0749      	lsls	r1, r1, #29
    eb66:	d4f9      	bmi.n	eb5c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    eb68:	2004      	movs	r0, #4
    eb6a:	4770      	bx	lr
    eb6c:	f3c0 0180 	ubfx	r1, r0, #2, #1
    eb70:	f3c0 0240 	ubfx	r2, r0, #1, #1
    eb74:	4411      	add	r1, r2
    eb76:	f000 0001 	and.w	r0, r0, #1
    eb7a:	4408      	add	r0, r1
    eb7c:	4770      	bx	lr

0000eb7e <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    eb7e:	f240 315a 	movw	r1, #858	; 0x35a
    eb82:	4348      	muls	r0, r1
    eb84:	4770      	bx	lr

0000eb86 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    eb86:	f240 20ef 	movw	r0, #751	; 0x2ef
    eb8a:	4770      	bx	lr
    eb8c:	041c020e 	.word	0x041c020e
    eb90:	0c600630 	.word	0x0c600630
    eb94:	06b4035a 	.word	0x06b4035a
    eb98:	0bf505c5 	.word	0x0bf505c5
    eb9c:	01a31225 	.word	0x01a31225
    eba0:	05bf03b1 	.word	0x05bf03b1
    eba4:	064902ef 	.word	0x064902ef
    eba8:	09a3      	.short	0x09a3

0000ebaa <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    ebaa:	b510      	push	{r4, lr}
    ebac:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    ebb0:	b109      	cbz	r1, ebb6 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    ebb2:	2000      	movs	r0, #0
    ebb4:	bd10      	pop	{r4, pc}
    ebb6:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    ebba:	b131      	cbz	r1, ebca <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    ebbc:	e9d0 1235 	ldrd	r1, r2, [r0, #212]	; 0xd4
    ebc0:	428a      	cmp	r2, r1
    ebc2:	d902      	bls.n	ebca <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    ebc4:	f7f4 fe08 	bl	37d8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    ebc8:	e7f3      	b.n	ebb2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    ebca:	2001      	movs	r0, #1
    ebcc:	bd10      	pop	{r4, pc}

0000ebce <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    ebce:	b510      	push	{r4, lr}
    ebd0:	b131      	cbz	r1, ebe0 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    ebd2:	2901      	cmp	r1, #1
    ebd4:	d008      	beq.n	ebe8 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    ebd6:	f240 71d3 	movw	r1, #2003	; 0x7d3
    ebda:	2030      	movs	r0, #48	; 0x30
    ebdc:	f7f1 fee8 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ebe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ebe4:	f000 b9c7 	b.w	ef76 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x328>
    ebe8:	2100      	movs	r1, #0
    ebea:	f880 10d0 	strb.w	r1, [r0, #208]	; 0xd0
    ebee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ebf2:	f000 b923 	b.w	ee3c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>

0000ebf6 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    ebf6:	b510      	push	{r4, lr}
    ebf8:	4604      	mov	r4, r0
    ebfa:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    ebfe:	2800      	cmp	r0, #0
    ec00:	d019      	beq.n	ec36 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    ec02:	2001      	movs	r0, #1
    ec04:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
    ec08:	4601      	mov	r1, r0
    ec0a:	4620      	mov	r0, r4
    ec0c:	f7ff fe82 	bl	e914 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    ec10:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    ec14:	b170      	cbz	r0, ec34 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    ec16:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    ec1a:	f7fb fcc7 	bl	a5ac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    ec1e:	7820      	ldrb	r0, [r4, #0]
    ec20:	f7fb fe3c 	bl	a89c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    ec24:	f814 09c8 	ldrb.w	r0, [r4], #-200
    ec28:	f7fb fe16 	bl	a858 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ec2c:	b120      	cbz	r0, ec38 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    ec2e:	2000      	movs	r0, #0
    ec30:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    ec34:	2000      	movs	r0, #0
    ec36:	bd10      	pop	{r4, pc}
    ec38:	f240 210b 	movw	r1, #523	; 0x20b
    ec3c:	2030      	movs	r0, #48	; 0x30
    ec3e:	f7f1 feb7 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ec42 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    ec42:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    ec46:	4770      	bx	lr

0000ec48 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    ec48:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    ec4c:	4770      	bx	lr

0000ec4e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    ec4e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ec50:	4604      	mov	r4, r0
    ec52:	f890 022b 	ldrb.w	r0, [r0, #555]	; 0x22b
    ec56:	2800      	cmp	r0, #0
    ec58:	d15f      	bne.n	ed1a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ec5a:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    ec5e:	2803      	cmp	r0, #3
    ec60:	d15b      	bne.n	ed1a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ec62:	f001 fc9a 	bl	1059a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ec66:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    ec6a:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
    ec6e:	1ac0      	subs	r0, r0, r3
    ec70:	eb61 0102 	sbc.w	r1, r1, r2
    ec74:	2300      	movs	r3, #0
    ec76:	461a      	mov	r2, r3
    ec78:	1a1b      	subs	r3, r3, r0
    ec7a:	418a      	sbcs	r2, r1
    ec7c:	da4d      	bge.n	ed1a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ec7e:	1c42      	adds	r2, r0, #1
    ec80:	f171 0100 	sbcs.w	r1, r1, #0
    ec84:	db02      	blt.n	ec8c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e>
    ec86:	f240 610b 	movw	r1, #1547	; 0x60b
    ec8a:	e036      	b.n	ecfa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xac>
    ec8c:	6921      	ldr	r1, [r4, #16]
    ec8e:	b111      	cbz	r1, ec96 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x48>
    ec90:	fbb0 f0f1 	udiv	r0, r0, r1
    ec94:	e000      	b.n	ec98 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
    ec96:	2000      	movs	r0, #0
    ec98:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    ec9c:	1c40      	adds	r0, r0, #1
    ec9e:	4408      	add	r0, r1
    eca0:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
    eca4:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    eca8:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    ecac:	1a08      	subs	r0, r1, r0
    ecae:	b200      	sxth	r0, r0
    ecb0:	2800      	cmp	r0, #0
    ecb2:	dd32      	ble.n	ed1a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ecb4:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    ecb8:	f7fb fc78 	bl	a5ac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    ecbc:	2800      	cmp	r0, #0
    ecbe:	d02c      	beq.n	ed1a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ecc0:	20ff      	movs	r0, #255	; 0xff
    ecc2:	f884 0271 	strb.w	r0, [r4, #625]	; 0x271
    ecc6:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
    ecca:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    ecce:	ae01      	add	r6, sp, #4
    ecd0:	1a40      	subs	r0, r0, r1
    ecd2:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    ecd6:	1e40      	subs	r0, r0, #1
    ecd8:	4408      	add	r0, r1
    ecda:	b285      	uxth	r5, r0
    ecdc:	e017      	b.n	ed0e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xc0>
    ecde:	9600      	str	r6, [sp, #0]
    ece0:	f8b4 126c 	ldrh.w	r1, [r4, #620]	; 0x26c
    ece4:	2300      	movs	r3, #0
    ece6:	2201      	movs	r2, #1
    ece8:	4620      	mov	r0, r4
    ecea:	f7f5 fe15 	bl	4918 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    ecee:	2800      	cmp	r0, #0
    ecf0:	d013      	beq.n	ed1a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ecf2:	2801      	cmp	r0, #1
    ecf4:	d004      	beq.n	ed00 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb2>
    ecf6:	f240 6144 	movw	r1, #1604	; 0x644
    ecfa:	2030      	movs	r0, #48	; 0x30
    ecfc:	f7f1 fe58 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed00:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    ed04:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ed08:	4408      	add	r0, r1
    ed0a:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
    ed0e:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    ed12:	1a28      	subs	r0, r5, r0
    ed14:	b200      	sxth	r0, r0
    ed16:	2800      	cmp	r0, #0
    ed18:	dae1      	bge.n	ecde <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x90>
    ed1a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ed1c:	2000      	movs	r0, #0
    ed1e:	4770      	bx	lr
    ed20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ed24:	4604      	mov	r4, r0
    ed26:	f000 f8ff 	bl	ef28 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2da>
    ed2a:	2700      	movs	r7, #0
    ed2c:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    ed30:	f884 70e8 	strb.w	r7, [r4, #232]	; 0xe8
    ed34:	2601      	movs	r6, #1
    ed36:	f884 60f3 	strb.w	r6, [r4, #243]	; 0xf3
    ed3a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    ed3c:	463d      	mov	r5, r7
    ed3e:	b130      	cbz	r0, ed4e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x100>
    ed40:	f001 fc2b 	bl	1059a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ed44:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    ed46:	fbb0 f2f1 	udiv	r2, r0, r1
    ed4a:	fb01 0512 	mls	r5, r1, r2, r0
    ed4e:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    ed52:	2100      	movs	r1, #0
    ed54:	4680      	mov	r8, r0
    ed56:	f7fe fec5 	bl	dae4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    ed5a:	e9f4 103e 	ldrd	r1, r0, [r4, #248]!	; 0xf8
    ed5e:	1949      	adds	r1, r1, r5
    ed60:	4178      	adcs	r0, r7
    ed62:	e9c4 1000 	strd	r1, r0, [r4]
    ed66:	8920      	ldrh	r0, [r4, #8]
    ed68:	3cf8      	subs	r4, #248	; 0xf8
    ed6a:	1c40      	adds	r0, r0, #1
    ed6c:	280a      	cmp	r0, #10
    ed6e:	d201      	bcs.n	ed74 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x126>
    ed70:	f8a4 0100 	strh.w	r0, [r4, #256]	; 0x100
    ed74:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    ed78:	b138      	cbz	r0, ed8a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
    ed7a:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    ed7e:	1c40      	adds	r0, r0, #1
    ed80:	280a      	cmp	r0, #10
    ed82:	d302      	bcc.n	ed8a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
    ed84:	f884 60f2 	strb.w	r6, [r4, #242]	; 0xf2
    ed88:	e002      	b.n	ed90 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x142>
    ed8a:	2002      	movs	r0, #2
    ed8c:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    ed90:	4620      	mov	r0, r4
    ed92:	f000 f823 	bl	eddc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
    ed96:	b120      	cbz	r0, eda2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x154>
    ed98:	4620      	mov	r0, r4
    ed9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ed9e:	f000 b80e 	b.w	edbe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
    eda2:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    eda6:	4641      	mov	r1, r8
    eda8:	f000 f8bc 	bl	ef24 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    edac:	2800      	cmp	r0, #0
    edae:	d104      	bne.n	edba <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16c>
    edb0:	f240 61e7 	movw	r1, #1767	; 0x6e7
    edb4:	2030      	movs	r0, #48	; 0x30
    edb6:	f7f1 fdfb 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    edba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    edbe:	b510      	push	{r4, lr}
    edc0:	4604      	mov	r4, r0
    edc2:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    edc6:	f7fb fd47 	bl	a858 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    edca:	2000      	movs	r0, #0
    edcc:	7620      	strb	r0, [r4, #24]
    edce:	bd10      	pop	{r4, pc}
    edd0:	b510      	push	{r4, lr}
    edd2:	f7ff fd4c 	bl	e86e <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    edd6:	f200 1015 	addw	r0, r0, #277	; 0x115
    edda:	bd10      	pop	{r4, pc}
    eddc:	b570      	push	{r4, r5, r6, lr}
    edde:	4605      	mov	r5, r0
    ede0:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    ede4:	b108      	cbz	r0, edea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19c>
    ede6:	2001      	movs	r0, #1
    ede8:	bd70      	pop	{r4, r5, r6, pc}
    edea:	e9d5 1042 	ldrd	r1, r0, [r5, #264]	; 0x108
    edee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    edf2:	4050      	eors	r0, r2
    edf4:	ea70 0101 	orns	r1, r0, r1
    edf8:	d012      	beq.n	ee20 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d2>
    edfa:	2400      	movs	r4, #0
    edfc:	4621      	mov	r1, r4
    edfe:	4628      	mov	r0, r5
    ee00:	f7ff ffe6 	bl	edd0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    ee04:	e9f5 123e 	ldrd	r1, r2, [r5, #248]!	; 0xf8
    ee08:	1840      	adds	r0, r0, r1
    ee0a:	4154      	adcs	r4, r2
    ee0c:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
    ee10:	3df8      	subs	r5, #248	; 0xf8
    ee12:	1a10      	subs	r0, r2, r0
    ee14:	41a1      	sbcs	r1, r4
    ee16:	d503      	bpl.n	ee20 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d2>
    ee18:	4628      	mov	r0, r5
    ee1a:	f7f4 fcdd 	bl	37d8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    ee1e:	e7e2      	b.n	ede6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x198>
    ee20:	2000      	movs	r0, #0
    ee22:	bd70      	pop	{r4, r5, r6, pc}
    ee24:	b510      	push	{r4, lr}
    ee26:	4604      	mov	r4, r0
    ee28:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    ee2c:	f000 f988 	bl	f140 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4f2>
    ee30:	4601      	mov	r1, r0
    ee32:	4620      	mov	r0, r4
    ee34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee38:	f7ff b9c7 	b.w	e1ca <sym_DGN3THKILL676ISUGG6LI5PGTHVDBLTDPNXUCAA>
    ee3c:	b510      	push	{r4, lr}
    ee3e:	f7f8 ff45 	bl	7ccc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    ee42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee46:	f7fb be65 	b.w	ab14 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    ee4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ee4e:	4604      	mov	r4, r0
    ee50:	f890 0272 	ldrb.w	r0, [r0, #626]	; 0x272
    ee54:	2800      	cmp	r0, #0
    ee56:	d051      	beq.n	eefc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ae>
    ee58:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    ee5c:	2803      	cmp	r0, #3
    ee5e:	d14d      	bne.n	eefc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ae>
    ee60:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
    ee64:	f001 fab2 	bl	103cc <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    ee68:	4605      	mov	r5, r0
    ee6a:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    ee6e:	f7f5 fc1f 	bl	46b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    ee72:	4428      	add	r0, r5
    ee74:	b286      	uxth	r6, r0
    ee76:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    ee7a:	f7f5 fc19 	bl	46b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    ee7e:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    ee82:	fa1f f880 	uxth.w	r8, r0
    ee86:	4648      	mov	r0, r9
    ee88:	f7f8 ffde 	bl	7e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ee8c:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    ee90:	1a0d      	subs	r5, r1, r0
    ee92:	4648      	mov	r0, r9
    ee94:	f7f9 f804 	bl	7ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ee98:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    ee9c:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    eea0:	fbb0 f0fa 	udiv	r0, r0, sl
    eea4:	1a2d      	subs	r5, r5, r0
    eea6:	4648      	mov	r0, r9
    eea8:	f7f8 ffce 	bl	7e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    eeac:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
    eeb0:	1a0f      	subs	r7, r1, r0
    eeb2:	4648      	mov	r0, r9
    eeb4:	f7f8 fff4 	bl	7ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    eeb8:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    eebc:	4401      	add	r1, r0
    eebe:	fbb1 f0fa 	udiv	r0, r1, sl
    eec2:	1a39      	subs	r1, r7, r0
    eec4:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    eec8:	4370      	muls	r0, r6
    eeca:	fbb0 f2f8 	udiv	r2, r0, r8
    eece:	2029      	movs	r0, #41	; 0x29
    eed0:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    eed4:	3260      	adds	r2, #96	; 0x60
    eed6:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    eeda:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    eede:	42a9      	cmp	r1, r5
    eee0:	d801      	bhi.n	eee6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x298>
    eee2:	4285      	cmp	r5, r0
    eee4:	d901      	bls.n	eeea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x29c>
    eee6:	f7fd f80f 	bl	bf08 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    eeea:	4631      	mov	r1, r6
    eeec:	6920      	ldr	r0, [r4, #16]
    eeee:	f7fd f873 	bl	bfd8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    eef2:	2100      	movs	r1, #0
    eef4:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    eef8:	f884 1272 	strb.w	r1, [r4, #626]	; 0x272
    eefc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ef00:	b570      	push	{r4, r5, r6, lr}
    ef02:	460c      	mov	r4, r1
    ef04:	4605      	mov	r5, r0
    ef06:	f7f8 ffcb 	bl	7ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    ef0a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    ef0e:	4408      	add	r0, r1
    ef10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ef14:	fbb0 f6f1 	udiv	r6, r0, r1
    ef18:	4628      	mov	r0, r5
    ef1a:	f7f8 ff95 	bl	7e48 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ef1e:	4430      	add	r0, r6
    ef20:	4420      	add	r0, r4
    ef22:	bd70      	pop	{r4, r5, r6, pc}
    ef24:	f7fa bee4 	b.w	9cf0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    ef28:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ef2a:	4604      	mov	r4, r0
    ef2c:	f7ff fcc6 	bl	e8bc <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ef30:	b1f8      	cbz	r0, ef72 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x324>
    ef32:	4620      	mov	r0, r4
    ef34:	f7ff fcba 	bl	e8ac <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    ef38:	b918      	cbnz	r0, ef42 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f4>
    ef3a:	4620      	mov	r0, r4
    ef3c:	f7ff fcc0 	bl	e8c0 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    ef40:	b140      	cbz	r0, ef54 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x306>
    ef42:	245a      	movs	r4, #90	; 0x5a
    ef44:	4668      	mov	r0, sp
    ef46:	f7fd fa9d 	bl	c484 <mpsl_fem_pa_is_configured>
    ef4a:	f89d 0000 	ldrb.w	r0, [sp]
    ef4e:	b118      	cbz	r0, ef58 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30a>
    ef50:	2501      	movs	r5, #1
    ef52:	e002      	b.n	ef5a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30c>
    ef54:	2450      	movs	r4, #80	; 0x50
    ef56:	e7f5      	b.n	ef44 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
    ef58:	2500      	movs	r5, #0
    ef5a:	a801      	add	r0, sp, #4
    ef5c:	f7fd fa7a 	bl	c454 <mpsl_fem_lna_is_configured>
    ef60:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ef64:	b100      	cbz	r0, ef68 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x31a>
    ef66:	2001      	movs	r0, #1
    ef68:	4305      	orrs	r5, r0
    ef6a:	d000      	beq.n	ef6e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x320>
    ef6c:	340a      	adds	r4, #10
    ef6e:	4620      	mov	r0, r4
    ef70:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ef72:	2061      	movs	r0, #97	; 0x61
    ef74:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ef76:	b570      	push	{r4, r5, r6, lr}
    ef78:	4604      	mov	r4, r0
    ef7a:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    ef7c:	2500      	movs	r5, #0
    ef7e:	b130      	cbz	r0, ef8e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x340>
    ef80:	f7f4 f818 	bl	2fb4 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    ef84:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    ef86:	fbb0 f2f1 	udiv	r2, r0, r1
    ef8a:	fb01 0512 	mls	r5, r1, r2, r0
    ef8e:	4620      	mov	r0, r4
    ef90:	f7ff fc69 	bl	e866 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    ef94:	e9d4 213e 	ldrd	r2, r1, [r4, #248]	; 0xf8
    ef98:	4428      	add	r0, r5
    ef9a:	34e8      	adds	r4, #232	; 0xe8
    ef9c:	2500      	movs	r5, #0
    ef9e:	1882      	adds	r2, r0, r2
    efa0:	eb45 0001 	adc.w	r0, r5, r1
    efa4:	e9c4 2004 	strd	r2, r0, [r4, #16]
    efa8:	f804 5b0b 	strb.w	r5, [r4], #11
    efac:	2001      	movs	r0, #1
    efae:	f804 0901 	strb.w	r0, [r4], #-1
    efb2:	2002      	movs	r0, #2
    efb4:	f804 09f2 	strb.w	r0, [r4], #-242
    efb8:	4620      	mov	r0, r4
    efba:	f7ff ffb5 	bl	ef28 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2da>
    efbe:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    efc2:	4620      	mov	r0, r4
    efc4:	f7ff ff0a 	bl	eddc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
    efc8:	b930      	cbnz	r0, efd8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x38a>
    efca:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    efce:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    efd2:	f7ff ffa7 	bl	ef24 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    efd6:	b128      	cbz	r0, efe4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x396>
    efd8:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    efdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    efe0:	f7ff bf2c 	b.w	ee3c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    efe4:	f240 712d 	movw	r1, #1837	; 0x72d
    efe8:	2030      	movs	r0, #48	; 0x30
    efea:	f7f1 fce1 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    efee:	b510      	push	{r4, lr}
    eff0:	4604      	mov	r4, r0
    eff2:	2000      	movs	r0, #0
    eff4:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    eff8:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    effc:	f7fb fc2c 	bl	a858 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f000:	2020      	movs	r0, #32
    f002:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    f006:	bd10      	pop	{r4, pc}
    f008:	b510      	push	{r4, lr}
    f00a:	b140      	cbz	r0, f01e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3d0>
    f00c:	2909      	cmp	r1, #9
    f00e:	d22f      	bcs.n	f070 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x422>
    f010:	e8df f001 	tbb	[pc, r1]
    f014:	1e1e1607 	.word	0x1e1e1607
    f018:	26222e1a 	.word	0x26222e1a
    f01c:	002a      	.short	0x002a
    f01e:	21cd      	movs	r1, #205	; 0xcd
    f020:	e023      	b.n	f06a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x41c>
    f022:	4604      	mov	r4, r0
    f024:	f7f4 fba8 	bl	3778 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    f028:	b110      	cbz	r0, f030 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e2>
    f02a:	f240 2187 	movw	r1, #647	; 0x287
    f02e:	e01c      	b.n	f06a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x41c>
    f030:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    f034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f038:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
    f03c:	f7fb be46 	b.w	accc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    f040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f044:	f000 b8b1 	b.w	f1aa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x55c>
    f048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f04c:	f7f9 b812 	b.w	8074 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f054:	f7ff be64 	b.w	ed20 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xd2>
    f058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f05c:	f7ff bc01 	b.w	e862 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    f060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f064:	f7ff beab 	b.w	edbe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
    f068:	21ed      	movs	r1, #237	; 0xed
    f06a:	2030      	movs	r0, #48	; 0x30
    f06c:	f7f1 fca0 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f070:	21f1      	movs	r1, #241	; 0xf1
    f072:	e7fa      	b.n	f06a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x41c>
    f074:	b510      	push	{r4, lr}
    f076:	0004      	movs	r4, r0
    f078:	d009      	beq.n	f08e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x440>
    f07a:	2200      	movs	r2, #0
    f07c:	2909      	cmp	r1, #9
    f07e:	d25d      	bcs.n	f13c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ee>
    f080:	e8df f001 	tbb	[pc, r1]
    f084:	43433b07 	.word	0x43433b07
    f088:	4f485c3f 	.word	0x4f485c3f
    f08c:	0058      	.short	0x0058
    f08e:	2196      	movs	r1, #150	; 0x96
    f090:	e051      	b.n	f136 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    f092:	f8c4 22ac 	str.w	r2, [r4, #684]	; 0x2ac
    f096:	f894 1270 	ldrb.w	r1, [r4, #624]	; 0x270
    f09a:	4620      	mov	r0, r4
    f09c:	b189      	cbz	r1, f0c2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x474>
    f09e:	f8b0 226e 	ldrh.w	r2, [r0, #622]	; 0x26e
    f0a2:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    f0a6:	428a      	cmp	r2, r1
    f0a8:	d106      	bne.n	f0b8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x46a>
    f0aa:	f8b0 2224 	ldrh.w	r2, [r0, #548]	; 0x224
    f0ae:	1a51      	subs	r1, r2, r1
    f0b0:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f0b4:	4611      	mov	r1, r2
    f0b6:	e00d      	b.n	f0d4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x486>
    f0b8:	1a51      	subs	r1, r2, r1
    f0ba:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f0be:	b291      	uxth	r1, r2
    f0c0:	e008      	b.n	f0d4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x486>
    f0c2:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
    f0c6:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
    f0ca:	1a89      	subs	r1, r1, r2
    f0cc:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f0d0:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
    f0d4:	f8a0 1094 	strh.w	r1, [r0, #148]	; 0x94
    f0d8:	e9d0 12a2 	ldrd	r1, r2, [r0, #648]	; 0x288
    f0dc:	f8c0 1290 	str.w	r1, [r0, #656]	; 0x290
    f0e0:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
    f0e4:	f7f5 ffb2 	bl	504c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    f0e8:	f894 022b 	ldrb.w	r0, [r4, #555]	; 0x22b
    f0ec:	2800      	cmp	r0, #0
    f0ee:	d020      	beq.n	f132 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e4>
    f0f0:	4620      	mov	r0, r4
    f0f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0f6:	f7f5 bb93 	b.w	4820 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
    f0fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0fe:	f000 b8a0 	b.w	f242 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    f102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f106:	f7f8 bfb5 	b.w	8074 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f10a:	4620      	mov	r0, r4
    f10c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f110:	f7f5 be0c 	b.w	4d2c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x70c>
    f114:	2001      	movs	r0, #1
    f116:	f7fa fbab 	bl	9870 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    f11a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f11e:	f7fe bb92 	b.w	d846 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A>
    f122:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    f126:	2804      	cmp	r0, #4
    f128:	d001      	beq.n	f12e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e0>
    f12a:	21bb      	movs	r1, #187	; 0xbb
    f12c:	e003      	b.n	f136 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    f12e:	f884 225c 	strb.w	r2, [r4, #604]	; 0x25c
    f132:	bd10      	pop	{r4, pc}
    f134:	21c1      	movs	r1, #193	; 0xc1
    f136:	2030      	movs	r0, #48	; 0x30
    f138:	f7f1 fc3a 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f13c:	21c5      	movs	r1, #197	; 0xc5
    f13e:	e7fa      	b.n	f136 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    f140:	b510      	push	{r4, lr}
    f142:	f7f8 fead 	bl	7ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f146:	f64d 7141 	movw	r1, #57153	; 0xdf41
    f14a:	4408      	add	r0, r1
    f14c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f150:	fbb0 f0f1 	udiv	r0, r0, r1
    f154:	f500 70bf 	add.w	r0, r0, #382	; 0x17e
    f158:	bd10      	pop	{r4, pc}
    f15a:	b538      	push	{r3, r4, r5, lr}
    f15c:	2500      	movs	r5, #0
    f15e:	4604      	mov	r4, r0
    f160:	f880 525c 	strb.w	r5, [r0, #604]	; 0x25c
    f164:	f8a0 52a0 	strh.w	r5, [r0, #672]	; 0x2a0
    f168:	462b      	mov	r3, r5
    f16a:	462a      	mov	r2, r5
    f16c:	4629      	mov	r1, r5
    f16e:	9500      	str	r5, [sp, #0]
    f170:	f7f5 fbd2 	bl	4918 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    f174:	b120      	cbz	r0, f180 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x532>
    f176:	f240 211f 	movw	r1, #543	; 0x21f
    f17a:	2030      	movs	r0, #48	; 0x30
    f17c:	f7f1 fc18 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f180:	f8c4 5258 	str.w	r5, [r4, #600]	; 0x258
    f184:	2001      	movs	r0, #1
    f186:	f8c4 5250 	str.w	r5, [r4, #592]	; 0x250
    f18a:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    f18e:	f8a4 526e 	strh.w	r5, [r4, #622]	; 0x26e
    f192:	f8a4 526c 	strh.w	r5, [r4, #620]	; 0x26c
    f196:	3494      	adds	r4, #148	; 0x94
    f198:	f884 51dd 	strb.w	r5, [r4, #477]	; 0x1dd
    f19c:	8820      	ldrh	r0, [r4, #0]
    f19e:	1e40      	subs	r0, r0, #1
    f1a0:	8020      	strh	r0, [r4, #0]
    f1a2:	f8a4 520e 	strh.w	r5, [r4, #526]	; 0x20e
    f1a6:	2000      	movs	r0, #0
    f1a8:	bd38      	pop	{r3, r4, r5, pc}
    f1aa:	b570      	push	{r4, r5, r6, lr}
    f1ac:	4605      	mov	r5, r0
    f1ae:	f7ff fb81 	bl	e8b4 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    f1b2:	b9c8      	cbnz	r0, f1e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x59a>
    f1b4:	2100      	movs	r1, #0
    f1b6:	4628      	mov	r0, r5
    f1b8:	f7ff fe0a 	bl	edd0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    f1bc:	4604      	mov	r4, r0
    f1be:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
    f1c2:	42a0      	cmp	r0, r4
    f1c4:	d20e      	bcs.n	f1e4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x596>
    f1c6:	1a20      	subs	r0, r4, r0
    f1c8:	2867      	cmp	r0, #103	; 0x67
    f1ca:	d200      	bcs.n	f1ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x580>
    f1cc:	2067      	movs	r0, #103	; 0x67
    f1ce:	2103      	movs	r1, #3
    f1d0:	f7fa fb5e 	bl	9890 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    f1d4:	b130      	cbz	r0, f1e4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x596>
    f1d6:	4628      	mov	r0, r5
    f1d8:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    f1dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f1e0:	f7ff bb3f 	b.w	e862 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    f1e4:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    f1e8:	4628      	mov	r0, r5
    f1ea:	f7f4 fae1 	bl	37b0 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    f1ee:	2800      	cmp	r0, #0
    f1f0:	d004      	beq.n	f1fc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ae>
    f1f2:	f240 21bd 	movw	r1, #701	; 0x2bd
    f1f6:	2030      	movs	r0, #48	; 0x30
    f1f8:	f7f1 fbda 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f1fc:	bd70      	pop	{r4, r5, r6, pc}
    f1fe:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f202:	f001 0307 	and.w	r3, r1, #7
    f206:	7802      	ldrb	r2, [r0, #0]
    f208:	2101      	movs	r1, #1
    f20a:	4099      	lsls	r1, r3
    f20c:	438a      	bics	r2, r1
    f20e:	7002      	strb	r2, [r0, #0]
    f210:	4770      	bx	lr

0000f212 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    f212:	b510      	push	{r4, lr}
    f214:	460c      	mov	r4, r1
    f216:	f7f2 f81b 	bl	1250 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    f21a:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    f21e:	2820      	cmp	r0, #32
    f220:	d00c      	beq.n	f23c <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x2a>
    f222:	f7fb fb3b 	bl	a89c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    f226:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    f22a:	f7fb fb15 	bl	a858 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f22e:	2800      	cmp	r0, #0
    f230:	d104      	bne.n	f23c <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x2a>
    f232:	f640 4129 	movw	r1, #3113	; 0xc29
    f236:	2031      	movs	r0, #49	; 0x31
    f238:	f7f1 fbba 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f23c:	bd10      	pop	{r4, pc}

0000f23e <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    f23e:	2000      	movs	r0, #0
    f240:	4770      	bx	lr

0000f242 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    f242:	f7f2 bc99 	b.w	1b78 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA>

0000f246 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    f246:	2100      	movs	r1, #0
    f248:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    f24c:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f250:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    f254:	f890 122b 	ldrb.w	r1, [r0, #555]	; 0x22b
    f258:	b109      	cbz	r1, f25e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    f25a:	2102      	movs	r1, #2
    f25c:	e000      	b.n	f260 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    f25e:	2103      	movs	r1, #3
    f260:	f7f5 b99c 	b.w	459c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    f264:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    f268:	28fe      	cmp	r0, #254	; 0xfe
    f26a:	d001      	beq.n	f270 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    f26c:	2001      	movs	r0, #1
    f26e:	4770      	bx	lr
    f270:	2000      	movs	r0, #0
    f272:	4770      	bx	lr
    f274:	b510      	push	{r4, lr}
    f276:	2801      	cmp	r0, #1
    f278:	d006      	beq.n	f288 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f27a:	2802      	cmp	r0, #2
    f27c:	d004      	beq.n	f288 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f27e:	f240 21d7 	movw	r1, #727	; 0x2d7
    f282:	2006      	movs	r0, #6
    f284:	f7f1 fb94 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f288:	bd10      	pop	{r4, pc}
    f28a:	2801      	cmp	r0, #1
    f28c:	d002      	beq.n	f294 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    f28e:	2802      	cmp	r0, #2
    f290:	d105      	bne.n	f29e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f292:	e002      	b.n	f29a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    f294:	2901      	cmp	r1, #1
    f296:	d004      	beq.n	f2a2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f298:	e001      	b.n	f29e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f29a:	2902      	cmp	r1, #2
    f29c:	d001      	beq.n	f2a2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f29e:	2000      	movs	r0, #0
    f2a0:	4770      	bx	lr
    f2a2:	2001      	movs	r0, #1
    f2a4:	4770      	bx	lr
    f2a6:	1a40      	subs	r0, r0, r1
    f2a8:	b200      	sxth	r0, r0
    f2aa:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    f2ae:	4288      	cmp	r0, r1
    f2b0:	dc01      	bgt.n	f2b6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    f2b2:	2800      	cmp	r0, #0
    f2b4:	dc01      	bgt.n	f2ba <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    f2b6:	2001      	movs	r0, #1
    f2b8:	4770      	bx	lr
    f2ba:	2000      	movs	r0, #0
    f2bc:	4770      	bx	lr
    f2be:	6840      	ldr	r0, [r0, #4]
    f2c0:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f2c4:	2912      	cmp	r1, #18
    f2c6:	d001      	beq.n	f2cc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x86>
    f2c8:	2002      	movs	r0, #2
    f2ca:	4770      	bx	lr
    f2cc:	2113      	movs	r1, #19
    f2ce:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f2d2:	2000      	movs	r0, #0
    f2d4:	4770      	bx	lr
    f2d6:	b510      	push	{r4, lr}
    f2d8:	6843      	ldr	r3, [r0, #4]
    f2da:	4604      	mov	r4, r0
    f2dc:	f893 012c 	ldrb.w	r0, [r3, #300]	; 0x12c
    f2e0:	2808      	cmp	r0, #8
    f2e2:	d20d      	bcs.n	f300 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xba>
    f2e4:	f500 7210 	add.w	r2, r0, #576	; 0x240
    f2e8:	f1c0 0008 	rsb	r0, r0, #8
    f2ec:	b2c1      	uxtb	r1, r0
    f2ee:	1898      	adds	r0, r3, r2
    f2f0:	f7f1 fc00 	bl	af4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f2f4:	6861      	ldr	r1, [r4, #4]
    f2f6:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
    f2fa:	4410      	add	r0, r2
    f2fc:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    f300:	6862      	ldr	r2, [r4, #4]
    f302:	f892 112c 	ldrb.w	r1, [r2, #300]	; 0x12c
    f306:	3908      	subs	r1, #8
    f308:	2904      	cmp	r1, #4
    f30a:	d20d      	bcs.n	f328 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xe2>
    f30c:	f501 708e 	add.w	r0, r1, #284	; 0x11c
    f310:	f1c1 0104 	rsb	r1, r1, #4
    f314:	b2c9      	uxtb	r1, r1
    f316:	4410      	add	r0, r2
    f318:	f7f1 fbec 	bl	af4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f31c:	6861      	ldr	r1, [r4, #4]
    f31e:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
    f322:	4410      	add	r0, r2
    f324:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    f328:	6860      	ldr	r0, [r4, #4]
    f32a:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    f32e:	290c      	cmp	r1, #12
    f330:	d30f      	bcc.n	f352 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10c>
    f332:	d005      	beq.n	f340 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xfa>
    f334:	f640 01c2 	movw	r1, #2242	; 0x8c2
    f338:	f04f 0031 	mov.w	r0, #49	; 0x31
    f33c:	f7f1 fb38 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f340:	2100      	movs	r1, #0
    f342:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
    f346:	2101      	movs	r1, #1
    f348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f34c:	2004      	movs	r0, #4
    f34e:	f7f6 bd09 	b.w	5d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    f352:	bd10      	pop	{r4, pc}
    f354:	6842      	ldr	r2, [r0, #4]
    f356:	2131      	movs	r1, #49	; 0x31
    f358:	f882 109d 	strb.w	r1, [r2, #157]	; 0x9d
    f35c:	6840      	ldr	r0, [r0, #4]
    f35e:	2100      	movs	r1, #0
    f360:	f880 12c4 	strb.w	r1, [r0, #708]	; 0x2c4
    f364:	4770      	bx	lr
    f366:	b510      	push	{r4, lr}
    f368:	6841      	ldr	r1, [r0, #4]
    f36a:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    f36e:	2a15      	cmp	r2, #21
    f370:	d004      	beq.n	f37c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x136>
    f372:	f240 7183 	movw	r1, #1923	; 0x783
    f376:	2031      	movs	r0, #49	; 0x31
    f378:	f7f1 fb1a 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f37c:	2201      	movs	r2, #1
    f37e:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
    f382:	6840      	ldr	r0, [r0, #4]
    f384:	2116      	movs	r1, #22
    f386:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f38a:	bd10      	pop	{r4, pc}
    f38c:	f7ff b8e1 	b.w	e552 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
    f390:	b510      	push	{r4, lr}
    f392:	6841      	ldr	r1, [r0, #4]
    f394:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    f398:	2a11      	cmp	r2, #17
    f39a:	d004      	beq.n	f3a6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x160>
    f39c:	f240 717b 	movw	r1, #1915	; 0x77b
    f3a0:	2031      	movs	r0, #49	; 0x31
    f3a2:	f7f1 fb05 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f3a6:	2201      	movs	r2, #1
    f3a8:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
    f3ac:	6840      	ldr	r0, [r0, #4]
    f3ae:	2112      	movs	r1, #18
    f3b0:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f3b4:	bd10      	pop	{r4, pc}
    f3b6:	b510      	push	{r4, lr}
    f3b8:	6841      	ldr	r1, [r0, #4]
    f3ba:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    f3be:	2822      	cmp	r0, #34	; 0x22
    f3c0:	d005      	beq.n	f3ce <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x188>
    f3c2:	b120      	cbz	r0, f3ce <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x188>
    f3c4:	f240 71e7 	movw	r1, #2023	; 0x7e7
    f3c8:	2031      	movs	r0, #49	; 0x31
    f3ca:	f7f1 faf1 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f3ce:	2023      	movs	r0, #35	; 0x23
    f3d0:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    f3d4:	bd10      	pop	{r4, pc}
    f3d6:	b510      	push	{r4, lr}
    f3d8:	6840      	ldr	r0, [r0, #4]
    f3da:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f3de:	2916      	cmp	r1, #22
    f3e0:	d004      	beq.n	f3ec <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a6>
    f3e2:	f44f 61f2 	mov.w	r1, #1936	; 0x790
    f3e6:	2031      	movs	r0, #49	; 0x31
    f3e8:	f7f1 fae2 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f3ec:	211a      	movs	r1, #26
    f3ee:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f3f2:	bd10      	pop	{r4, pc}
    f3f4:	f7ff b89b 	b.w	e52e <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
    f3f8:	b510      	push	{r4, lr}
    f3fa:	6840      	ldr	r0, [r0, #4]
    f3fc:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f400:	2916      	cmp	r1, #22
    f402:	d004      	beq.n	f40e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1c8>
    f404:	f240 718a 	movw	r1, #1930	; 0x78a
    f408:	2031      	movs	r0, #49	; 0x31
    f40a:	f7f1 fad1 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f40e:	2118      	movs	r1, #24
    f410:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f414:	bd10      	pop	{r4, pc}
    f416:	f7ff b921 	b.w	e65c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>
    f41a:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f41e:	f001 0107 	and.w	r1, r1, #7
    f422:	7800      	ldrb	r0, [r0, #0]
    f424:	40c8      	lsrs	r0, r1
    f426:	f000 0001 	and.w	r0, r0, #1
    f42a:	4770      	bx	lr

0000f42c <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
    f42c:	b510      	push	{r4, lr}
    f42e:	2801      	cmp	r0, #1
    f430:	d006      	beq.n	f440 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x14>
    f432:	2802      	cmp	r0, #2
    f434:	d006      	beq.n	f444 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x18>
    f436:	f240 2175 	movw	r1, #629	; 0x275
    f43a:	2078      	movs	r0, #120	; 0x78
    f43c:	f7f1 fab8 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f440:	2000      	movs	r0, #0
    f442:	bd10      	pop	{r4, pc}
    f444:	2001      	movs	r0, #1
    f446:	bd10      	pop	{r4, pc}

0000f448 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>:
    f448:	207f      	movs	r0, #127	; 0x7f
    f44a:	f000 b88c 	b.w	f566 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x92>

0000f44e <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>:
    f44e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f452:	f000 b888 	b.w	f566 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x92>

0000f456 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>:
    f456:	b510      	push	{r4, lr}
    f458:	4604      	mov	r4, r0
    f45a:	f7f8 f801 	bl	7460 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f45e:	1e64      	subs	r4, r4, #1
    f460:	b2e2      	uxtb	r2, r4
    f462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f466:	f000 b85b 	b.w	f520 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4c>

0000f46a <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>:
    f46a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f46e:	4607      	mov	r7, r0
    f470:	461e      	mov	r6, r3
    f472:	4690      	mov	r8, r2
    f474:	460c      	mov	r4, r1
    f476:	4608      	mov	r0, r1
    f478:	f7ff ffed 	bl	f456 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>
    f47c:	b1e8      	cbz	r0, f4ba <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    f47e:	687d      	ldr	r5, [r7, #4]
    f480:	2121      	movs	r1, #33	; 0x21
    f482:	f105 00ec 	add.w	r0, r5, #236	; 0xec
    f486:	3580      	adds	r5, #128	; 0x80
    f488:	f7ff ffc7 	bl	f41a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1d4>
    f48c:	b1b8      	cbz	r0, f4be <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    f48e:	1e64      	subs	r4, r4, #1
    f490:	6f29      	ldr	r1, [r5, #112]	; 0x70
    f492:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    f494:	b2e2      	uxtb	r2, r4
    f496:	f000 f843 	bl	f520 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4c>
    f49a:	b180      	cbz	r0, f4be <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    f49c:	6878      	ldr	r0, [r7, #4]
    f49e:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
    f4a2:	f88d 1000 	strb.w	r1, [sp]
    f4a6:	9900      	ldr	r1, [sp, #0]
    f4a8:	9100      	str	r1, [sp, #0]
    f4aa:	f89d 1000 	ldrb.w	r1, [sp]
    f4ae:	f200 1047 	addw	r0, r0, #327	; 0x147
    f4b2:	b131      	cbz	r1, f4c2 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    f4b4:	203a      	movs	r0, #58	; 0x3a
    f4b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f4ba:	2011      	movs	r0, #17
    f4bc:	e7fb      	b.n	f4b6 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
    f4be:	201a      	movs	r0, #26
    f4c0:	e7f9      	b.n	f4b6 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
    f4c2:	1c81      	adds	r1, r0, #2
    f4c4:	700e      	strb	r6, [r1, #0]
    f4c6:	2101      	movs	r1, #1
    f4c8:	40a1      	lsls	r1, r4
    f4ca:	7001      	strb	r1, [r0, #0]
    f4cc:	f880 8001 	strb.w	r8, [r0, #1]
    f4d0:	2000      	movs	r0, #0
    f4d2:	e7f0      	b.n	f4b6 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>

0000f4d4 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    f4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f4d8:	460d      	mov	r5, r1
    f4da:	4606      	mov	r6, r0
    f4dc:	f7ff ffb4 	bl	f448 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>
    f4e0:	4607      	mov	r7, r0
    f4e2:	f7ff ffb4 	bl	f44e <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>
    f4e6:	2400      	movs	r4, #0
    f4e8:	4285      	cmp	r5, r0
    f4ea:	d100      	bne.n	f4ee <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    f4ec:	2401      	movs	r4, #1
    f4ee:	42bd      	cmp	r5, r7
    f4f0:	d101      	bne.n	f4f6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    f4f2:	f044 0402 	orr.w	r4, r4, #2
    f4f6:	f000 f826 	bl	f546 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x72>
    f4fa:	2200      	movs	r2, #0
    f4fc:	4601      	mov	r1, r0
    f4fe:	2301      	movs	r3, #1
    f500:	fa03 f002 	lsl.w	r0, r3, r2
    f504:	4208      	tst	r0, r1
    f506:	d005      	beq.n	f514 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x40>
    f508:	eb06 0042 	add.w	r0, r6, r2, lsl #1
    f50c:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    f510:	f880 406f 	strb.w	r4, [r0, #111]	; 0x6f
    f514:	1c52      	adds	r2, r2, #1
    f516:	b2d2      	uxtb	r2, r2
    f518:	2a02      	cmp	r2, #2
    f51a:	d3f1      	bcc.n	f500 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    f51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f520:	b510      	push	{r4, lr}
    f522:	4614      	mov	r4, r2
    f524:	4602      	mov	r2, r0
    f526:	2000      	movs	r0, #0
    f528:	4603      	mov	r3, r0
    f52a:	2c02      	cmp	r4, #2
    f52c:	d205      	bcs.n	f53a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x66>
    f52e:	4610      	mov	r0, r2
    f530:	f000 f810 	bl	f554 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x80>
    f534:	2101      	movs	r1, #1
    f536:	40a1      	lsls	r1, r4
    f538:	b2cb      	uxtb	r3, r1
    f53a:	4203      	tst	r3, r0
    f53c:	d001      	beq.n	f542 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x6e>
    f53e:	2001      	movs	r0, #1
    f540:	bd10      	pop	{r4, pc}
    f542:	2000      	movs	r0, #0
    f544:	bd10      	pop	{r4, pc}
    f546:	b510      	push	{r4, lr}
    f548:	f7f7 ff8a 	bl	7460 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f54c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f550:	f000 b800 	b.w	f554 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x80>
    f554:	0a00      	lsrs	r0, r0, #8
    f556:	2201      	movs	r2, #1
    f558:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    f55c:	07c0      	lsls	r0, r0, #31
    f55e:	d000      	beq.n	f562 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x8e>
    f560:	2203      	movs	r2, #3
    f562:	4610      	mov	r0, r2
    f564:	4770      	bx	lr
    f566:	b508      	push	{r3, lr}
    f568:	2301      	movs	r3, #1
    f56a:	f640 1288 	movw	r2, #2440	; 0x988
    f56e:	4669      	mov	r1, sp
    f570:	f7fc ff8e 	bl	c490 <mpsl_fem_tx_power_split>
    f574:	bd08      	pop	{r3, pc}
    f576:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f57a:	f001 0107 	and.w	r1, r1, #7
    f57e:	7800      	ldrb	r0, [r0, #0]
    f580:	40c8      	lsrs	r0, r1
    f582:	f000 0001 	and.w	r0, r0, #1
    f586:	4770      	bx	lr
    f588:	b118      	cbz	r0, f592 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xbe>
    f58a:	2802      	cmp	r0, #2
    f58c:	d001      	beq.n	f592 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xbe>
    f58e:	2001      	movs	r0, #1
    f590:	4770      	bx	lr
    f592:	2000      	movs	r0, #0
    f594:	4770      	bx	lr

0000f596 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    f596:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f598:	7881      	ldrb	r1, [r0, #2]
    f59a:	2500      	movs	r5, #0
    f59c:	4604      	mov	r4, r0
    f59e:	291a      	cmp	r1, #26
    f5a0:	d024      	beq.n	f5ec <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    f5a2:	dc0e      	bgt.n	f5c2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    f5a4:	2916      	cmp	r1, #22
    f5a6:	d22b      	bcs.n	f600 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f5a8:	e8df f001 	tbb	[pc, r1]
    f5ac:	2a2a2a2a 	.word	0x2a2a2a2a
    f5b0:	2a2a202a 	.word	0x2a2a202a
    f5b4:	2a2a2a2a 	.word	0x2a2a2a2a
    f5b8:	2a2a2a2a 	.word	0x2a2a2a2a
    f5bc:	202a2a2a 	.word	0x202a2a2a
    f5c0:	2020      	.short	0x2020
    f5c2:	292a      	cmp	r1, #42	; 0x2a
    f5c4:	d01c      	beq.n	f600 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f5c6:	dc0b      	bgt.n	f5e0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    f5c8:	f1a1 011e 	sub.w	r1, r1, #30
    f5cc:	290c      	cmp	r1, #12
    f5ce:	d217      	bcs.n	f600 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f5d0:	e8df f001 	tbb	[pc, r1]
    f5d4:	16161616 	.word	0x16161616
    f5d8:	16161616 	.word	0x16161616
    f5dc:	0c161616 	.word	0x0c161616
    f5e0:	393a      	subs	r1, #58	; 0x3a
    f5e2:	2902      	cmp	r1, #2
    f5e4:	d20c      	bcs.n	f600 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f5e6:	e8df f001 	tbb	[pc, r1]
    f5ea:	010b      	.short	0x010b
    f5ec:	8820      	ldrh	r0, [r4, #0]
    f5ee:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    f5f2:	d205      	bcs.n	f600 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f5f4:	4669      	mov	r1, sp
    f5f6:	f7fe f990 	bl	d91a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f5fa:	b118      	cbz	r0, f604 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    f5fc:	2002      	movs	r0, #2
    f5fe:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f600:	2012      	movs	r0, #18
    f602:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f604:	9901      	ldr	r1, [sp, #4]
    f606:	4668      	mov	r0, sp
    f608:	f891 2130 	ldrb.w	r2, [r1, #304]	; 0x130
    f60c:	f88d 2008 	strb.w	r2, [sp, #8]
    f610:	9a02      	ldr	r2, [sp, #8]
    f612:	9202      	str	r2, [sp, #8]
    f614:	f89d 2008 	ldrb.w	r2, [sp, #8]
    f618:	f501 7198 	add.w	r1, r1, #304	; 0x130
    f61c:	b10a      	cbz	r2, f622 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
    f61e:	200c      	movs	r0, #12
    f620:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f622:	78a2      	ldrb	r2, [r4, #2]
    f624:	704a      	strb	r2, [r1, #1]
    f626:	22ff      	movs	r2, #255	; 0xff
    f628:	700a      	strb	r2, [r1, #0]
    f62a:	f7fe fd09 	bl	e040 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    f62e:	4628      	mov	r0, r5
    f630:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f632 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    f632:	b510      	push	{r4, lr}
    f634:	4604      	mov	r4, r0
    f636:	7800      	ldrb	r0, [r0, #0]
    f638:	b108      	cbz	r0, f63e <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0xc>
    f63a:	2801      	cmp	r0, #1
    f63c:	d116      	bne.n	f66c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x3a>
    f63e:	f000 fe0c 	bl	1025a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    f642:	b120      	cbz	r0, f64e <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x1c>
    f644:	f7f2 fee6 	bl	2414 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f648:	b108      	cbz	r0, f64e <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x1c>
    f64a:	200c      	movs	r0, #12
    f64c:	bd10      	pop	{r4, pc}
    f64e:	7820      	ldrb	r0, [r4, #0]
    f650:	f7ff ff9a 	bl	f588 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    f654:	2801      	cmp	r0, #1
    f656:	d10b      	bne.n	f670 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x3e>
    f658:	7820      	ldrb	r0, [r4, #0]
    f65a:	f7ff ff95 	bl	f588 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    f65e:	2801      	cmp	r0, #1
    f660:	d104      	bne.n	f66c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x3a>
    f662:	79a0      	ldrb	r0, [r4, #6]
    f664:	2103      	movs	r1, #3
    f666:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    f66a:	d001      	beq.n	f670 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x3e>
    f66c:	2012      	movs	r0, #18
    f66e:	bd10      	pop	{r4, pc}
    f670:	7820      	ldrb	r0, [r4, #0]
    f672:	f7ff ff89 	bl	f588 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    f676:	1de2      	adds	r2, r4, #7
    f678:	f104 0317 	add.w	r3, r4, #23
    f67c:	1c61      	adds	r1, r4, #1
    f67e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f682:	f7f2 bee7 	b.w	2454 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000f686 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    f686:	b510      	push	{r4, lr}
    f688:	4604      	mov	r4, r0
    f68a:	f7f7 fe13 	bl	72b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>
    f68e:	b108      	cbz	r0, f694 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    f690:	200c      	movs	r0, #12
    f692:	bd10      	pop	{r4, pc}
    f694:	7820      	ldrb	r0, [r4, #0]
    f696:	b118      	cbz	r0, f6a0 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f698:	2801      	cmp	r0, #1
    f69a:	d001      	beq.n	f6a0 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f69c:	2012      	movs	r0, #18
    f69e:	bd10      	pop	{r4, pc}
    f6a0:	f7ff ff72 	bl	f588 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    f6a4:	1c61      	adds	r1, r4, #1
    f6a6:	f7f3 fe8f 	bl	33c8 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>
    f6aa:	b108      	cbz	r0, f6b0 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    f6ac:	2000      	movs	r0, #0
    f6ae:	bd10      	pop	{r4, pc}
    f6b0:	2007      	movs	r0, #7
    f6b2:	bd10      	pop	{r4, pc}

0000f6b4 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    f6b4:	b510      	push	{r4, lr}
    f6b6:	f000 fdd0 	bl	1025a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    f6ba:	b120      	cbz	r0, f6c6 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    f6bc:	f7f2 feaa 	bl	2414 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f6c0:	b108      	cbz	r0, f6c6 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    f6c2:	200c      	movs	r0, #12
    f6c4:	bd10      	pop	{r4, pc}
    f6c6:	f7f2 ff19 	bl	24fc <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    f6ca:	2000      	movs	r0, #0
    f6cc:	bd10      	pop	{r4, pc}

0000f6ce <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    f6ce:	b510      	push	{r4, lr}
    f6d0:	f7f7 fdf0 	bl	72b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>
    f6d4:	b108      	cbz	r0, f6da <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    f6d6:	200c      	movs	r0, #12
    f6d8:	bd10      	pop	{r4, pc}
    f6da:	f7f3 fed3 	bl	3484 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    f6de:	2000      	movs	r0, #0
    f6e0:	f7f2 ff3e 	bl	2560 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
    f6e4:	2000      	movs	r0, #0
    f6e6:	bd10      	pop	{r4, pc}

0000f6e8 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    f6e8:	b510      	push	{r4, lr}
    f6ea:	460b      	mov	r3, r1
    f6ec:	2201      	movs	r2, #1
    f6ee:	f100 0110 	add.w	r1, r0, #16
    f6f2:	f7fe f8f4 	bl	d8de <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    f6f6:	2000      	movs	r0, #0
    f6f8:	bd10      	pop	{r4, pc}

0000f6fa <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    f6fa:	b510      	push	{r4, lr}
    f6fc:	8800      	ldrh	r0, [r0, #0]
    f6fe:	2100      	movs	r1, #0
    f700:	f7f1 fc84 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f704:	b118      	cbz	r0, f70e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    f706:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    f70a:	b111      	cbz	r1, f712 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    f70c:	e007      	b.n	f71e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    f70e:	2002      	movs	r0, #2
    f710:	bd10      	pop	{r4, pc}
    f712:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f716:	2915      	cmp	r1, #21
    f718:	d003      	beq.n	f722 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f71a:	2916      	cmp	r1, #22
    f71c:	d001      	beq.n	f722 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f71e:	200c      	movs	r0, #12
    f720:	bd10      	pop	{r4, pc}
    f722:	2102      	movs	r1, #2
    f724:	f880 12b0 	strb.w	r1, [r0, #688]	; 0x2b0
    f728:	2000      	movs	r0, #0
    f72a:	bd10      	pop	{r4, pc}

0000f72c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    f72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f72e:	4605      	mov	r5, r0
    f730:	8800      	ldrh	r0, [r0, #0]
    f732:	2100      	movs	r1, #0
    f734:	f7f1 fc6a 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f738:	0004      	movs	r4, r0
    f73a:	d003      	beq.n	f744 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    f73c:	f894 02b0 	ldrb.w	r0, [r4, #688]	; 0x2b0
    f740:	b110      	cbz	r0, f748 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    f742:	e011      	b.n	f768 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    f744:	2002      	movs	r0, #2
    f746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f748:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    f74c:	2815      	cmp	r0, #21
    f74e:	d001      	beq.n	f754 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    f750:	2816      	cmp	r0, #22
    f752:	d109      	bne.n	f768 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    f754:	f894 02e4 	ldrb.w	r0, [r4, #740]	; 0x2e4
    f758:	f88d 0000 	strb.w	r0, [sp]
    f75c:	9800      	ldr	r0, [sp, #0]
    f75e:	9000      	str	r0, [sp, #0]
    f760:	f89d 0000 	ldrb.w	r0, [sp]
    f764:	2601      	movs	r6, #1
    f766:	b108      	cbz	r0, f76c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
    f768:	200c      	movs	r0, #12
    f76a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f76c:	2210      	movs	r2, #16
    f76e:	1ca9      	adds	r1, r5, #2
    f770:	f204 20b1 	addw	r0, r4, #689	; 0x2b1
    f774:	f001 f8a3 	bl	108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f778:	f884 62b0 	strb.w	r6, [r4, #688]	; 0x2b0
    f77c:	2000      	movs	r0, #0
    f77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f780 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    f780:	b510      	push	{r4, lr}
    f782:	2108      	movs	r1, #8
    f784:	f7f1 f9c4 	bl	b10 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f788:	2000      	movs	r0, #0
    f78a:	bd10      	pop	{r4, pc}

0000f78c <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    f78c:	b510      	push	{r4, lr}
    f78e:	4604      	mov	r4, r0
    f790:	f7f7 fc6e 	bl	7070 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    f794:	f7ff f898 	bl	e8c8 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    f798:	f7f3 f84e 	bl	2838 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    f79c:	7020      	strb	r0, [r4, #0]
    f79e:	2000      	movs	r0, #0
    f7a0:	bd10      	pop	{r4, pc}

0000f7a2 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    f7a2:	21fb      	movs	r1, #251	; 0xfb
    f7a4:	8001      	strh	r1, [r0, #0]
    f7a6:	f640 0248 	movw	r2, #2120	; 0x848
    f7aa:	8042      	strh	r2, [r0, #2]
    f7ac:	8081      	strh	r1, [r0, #4]
    f7ae:	80c2      	strh	r2, [r0, #6]
    f7b0:	2000      	movs	r0, #0
    f7b2:	4770      	bx	lr

0000f7b4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    f7b4:	b51c      	push	{r2, r3, r4, lr}
    f7b6:	8800      	ldrh	r0, [r0, #0]
    f7b8:	4669      	mov	r1, sp
    f7ba:	f7fe f8ae 	bl	d91a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f7be:	2800      	cmp	r0, #0
    f7c0:	d10d      	bne.n	f7de <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    f7c2:	f89d 0000 	ldrb.w	r0, [sp]
    f7c6:	9c01      	ldr	r4, [sp, #4]
    f7c8:	2801      	cmp	r0, #1
    f7ca:	f504 7498 	add.w	r4, r4, #304	; 0x130
    f7ce:	d103      	bne.n	f7d8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x24>
    f7d0:	9801      	ldr	r0, [sp, #4]
    f7d2:	f000 fd2c 	bl	1022e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    f7d6:	b118      	cbz	r0, f7e0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    f7d8:	7ce0      	ldrb	r0, [r4, #19]
    f7da:	b118      	cbz	r0, f7e4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
    f7dc:	203a      	movs	r0, #58	; 0x3a
    f7de:	bd1c      	pop	{r2, r3, r4, pc}
    f7e0:	2002      	movs	r0, #2
    f7e2:	bd1c      	pop	{r2, r3, r4, pc}
    f7e4:	2001      	movs	r0, #1
    f7e6:	74e0      	strb	r0, [r4, #19]
    f7e8:	2000      	movs	r0, #0
    f7ea:	bd1c      	pop	{r2, r3, r4, pc}

0000f7ec <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    f7ec:	2108      	movs	r1, #8
    f7ee:	7001      	strb	r1, [r0, #0]
    f7f0:	2000      	movs	r0, #0
    f7f2:	4770      	bx	lr

0000f7f4 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    f7f4:	b510      	push	{r4, lr}
    f7f6:	4604      	mov	r4, r0
    f7f8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f7fc:	f000 fd5a 	bl	102b4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x314>
    f800:	f7f3 f81a 	bl	2838 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    f804:	7020      	strb	r0, [r4, #0]
    f806:	f000 fd0f 	bl	10228 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
    f80a:	f7f3 f815 	bl	2838 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    f80e:	7060      	strb	r0, [r4, #1]
    f810:	2000      	movs	r0, #0
    f812:	bd10      	pop	{r4, pc}

0000f814 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    f814:	b510      	push	{r4, lr}
    f816:	4604      	mov	r4, r0
    f818:	f7f3 fe3a 	bl	3490 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>
    f81c:	7020      	strb	r0, [r4, #0]
    f81e:	2000      	movs	r0, #0
    f820:	bd10      	pop	{r4, pc}

0000f822 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    f822:	b510      	push	{r4, lr}
    f824:	4604      	mov	r4, r0
    f826:	7800      	ldrb	r0, [r0, #0]
    f828:	b108      	cbz	r0, f82e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    f82a:	2801      	cmp	r0, #1
    f82c:	d110      	bne.n	f850 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    f82e:	f000 fd14 	bl	1025a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    f832:	b120      	cbz	r0, f83e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    f834:	f7f2 fdee 	bl	2414 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f838:	b108      	cbz	r0, f83e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    f83a:	200c      	movs	r0, #12
    f83c:	bd10      	pop	{r4, pc}
    f83e:	7820      	ldrb	r0, [r4, #0]
    f840:	f7ff fea2 	bl	f588 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    f844:	1c61      	adds	r1, r4, #1
    f846:	f7fe f83b 	bl	d8c0 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    f84a:	b108      	cbz	r0, f850 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    f84c:	2000      	movs	r0, #0
    f84e:	bd10      	pop	{r4, pc}
    f850:	2012      	movs	r0, #18
    f852:	bd10      	pop	{r4, pc}

0000f854 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    f854:	b510      	push	{r4, lr}
    f856:	4604      	mov	r4, r0
    f858:	f7f7 fd2c 	bl	72b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>
    f85c:	b108      	cbz	r0, f862 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    f85e:	200c      	movs	r0, #12
    f860:	bd10      	pop	{r4, pc}
    f862:	7820      	ldrb	r0, [r4, #0]
    f864:	b108      	cbz	r0, f86a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    f866:	2801      	cmp	r0, #1
    f868:	d107      	bne.n	f87a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f86a:	f7ff fe8d 	bl	f588 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    f86e:	1c61      	adds	r1, r4, #1
    f870:	f7f3 fde8 	bl	3444 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>
    f874:	b108      	cbz	r0, f87a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f876:	2000      	movs	r0, #0
    f878:	bd10      	pop	{r4, pc}
    f87a:	2012      	movs	r0, #18
    f87c:	bd10      	pop	{r4, pc}

0000f87e <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    f87e:	b510      	push	{r4, lr}
    f880:	4604      	mov	r4, r0
    f882:	f000 fcea 	bl	1025a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    f886:	b108      	cbz	r0, f88c <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    f888:	200c      	movs	r0, #12
    f88a:	bd10      	pop	{r4, pc}
    f88c:	7820      	ldrb	r0, [r4, #0]
    f88e:	b100      	cbz	r0, f892 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0x14>
    f890:	2001      	movs	r0, #1
    f892:	f7f2 fdb9 	bl	2408 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    f896:	2000      	movs	r0, #0
    f898:	bd10      	pop	{r4, pc}

0000f89a <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    f89a:	b51c      	push	{r2, r3, r4, lr}
    f89c:	4604      	mov	r4, r0
    f89e:	f7f7 fbe7 	bl	7070 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    f8a2:	2000      	movs	r0, #0
    f8a4:	f88d 0002 	strb.w	r0, [sp, #2]
    f8a8:	2103      	movs	r1, #3
    f8aa:	f88d 1001 	strb.w	r1, [sp, #1]
    f8ae:	f814 1b01 	ldrb.w	r1, [r4], #1
    f8b2:	f88d 1003 	strb.w	r1, [sp, #3]
    f8b6:	f88d 0000 	strb.w	r0, [sp]
    f8ba:	4668      	mov	r0, sp
    f8bc:	9401      	str	r4, [sp, #4]
    f8be:	f000 f9c1 	bl	fc44 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    f8c2:	bd1c      	pop	{r2, r3, r4, pc}

0000f8c4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    f8c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f8c6:	4605      	mov	r5, r0
    f8c8:	f7f7 fbd2 	bl	7070 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    f8cc:	4606      	mov	r6, r0
    f8ce:	7828      	ldrb	r0, [r5, #0]
    f8d0:	2400      	movs	r4, #0
    f8d2:	b160      	cbz	r0, f8ee <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    f8d4:	f88d 4000 	strb.w	r4, [sp]
    f8d8:	2001      	movs	r0, #1
    f8da:	f10d 0101 	add.w	r1, sp, #1
    f8de:	f7f1 ffcb 	bl	1878 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    f8e2:	b120      	cbz	r0, f8ee <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    f8e4:	4668      	mov	r0, sp
    f8e6:	f000 f897 	bl	fa18 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    f8ea:	2800      	cmp	r0, #0
    f8ec:	d112      	bne.n	f914 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    f8ee:	f88d 400c 	strb.w	r4, [sp, #12]
    f8f2:	4630      	mov	r0, r6
    f8f4:	f7fe ffde 	bl	e8b4 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    f8f8:	b118      	cbz	r0, f902 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    f8fa:	2080      	movs	r0, #128	; 0x80
    f8fc:	f8ad 000d 	strh.w	r0, [sp, #13]
    f900:	e001      	b.n	f906 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    f902:	f8ad 400d 	strh.w	r4, [sp, #13]
    f906:	f88d 400f 	strb.w	r4, [sp, #15]
    f90a:	7828      	ldrb	r0, [r5, #0]
    f90c:	2801      	cmp	r0, #1
    f90e:	d003      	beq.n	f918 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    f910:	b138      	cbz	r0, f922 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    f912:	2012      	movs	r0, #18
    f914:	b004      	add	sp, #16
    f916:	bd70      	pop	{r4, r5, r6, pc}
    f918:	a903      	add	r1, sp, #12
    f91a:	4630      	mov	r0, r6
    f91c:	f7f7 fbc4 	bl	70a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    f920:	e7f8      	b.n	f914 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    f922:	4630      	mov	r0, r6
    f924:	f000 fca0 	bl	10268 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2c8>
    f928:	e7f4      	b.n	f914 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000f92a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    f92a:	b530      	push	{r4, r5, lr}
    f92c:	b08b      	sub	sp, #44	; 0x2c
    f92e:	4604      	mov	r4, r0
    f930:	f7f7 fb9e 	bl	7070 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    f934:	4602      	mov	r2, r0
    f936:	7920      	ldrb	r0, [r4, #4]
    f938:	2804      	cmp	r0, #4
    f93a:	d803      	bhi.n	f944 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    f93c:	8860      	ldrh	r0, [r4, #2]
    f93e:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    f942:	d902      	bls.n	f94a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    f944:	2012      	movs	r0, #18
    f946:	b00b      	add	sp, #44	; 0x2c
    f948:	bd30      	pop	{r4, r5, pc}
    f94a:	2500      	movs	r5, #0
    f94c:	f88d 5004 	strb.w	r5, [sp, #4]
    f950:	7921      	ldrb	r1, [r4, #4]
    f952:	9500      	str	r5, [sp, #0]
    f954:	f89d 0000 	ldrb.w	r0, [sp]
    f958:	2905      	cmp	r1, #5
    f95a:	f040 0010 	orr.w	r0, r0, #16
    f95e:	f88d 0000 	strb.w	r0, [sp]
    f962:	d254      	bcs.n	fa0e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    f964:	e8df f001 	tbb	[pc, r1]
    f968:	11050803 	.word	0x11050803
    f96c:	000b      	.short	0x000b
    f96e:	f040 0001 	orr.w	r0, r0, #1
    f972:	f040 0002 	orr.w	r0, r0, #2
    f976:	e006      	b.n	f986 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    f978:	f040 0009 	orr.w	r0, r0, #9
    f97c:	e001      	b.n	f982 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    f97e:	f040 0001 	orr.w	r0, r0, #1
    f982:	f040 0004 	orr.w	r0, r0, #4
    f986:	f88d 0000 	strb.w	r0, [sp]
    f98a:	f8bd 0000 	ldrh.w	r0, [sp]
    f98e:	9000      	str	r0, [sp, #0]
    f990:	f8bd 0000 	ldrh.w	r0, [sp]
    f994:	f8ad 0005 	strh.w	r0, [sp, #5]
    f998:	8821      	ldrh	r1, [r4, #0]
    f99a:	f8dd 0006 	ldr.w	r0, [sp, #6]
    f99e:	f361 201f 	bfi	r0, r1, #8, #24
    f9a2:	f8cd 0006 	str.w	r0, [sp, #6]
    f9a6:	8861      	ldrh	r1, [r4, #2]
    f9a8:	f8dd 0009 	ldr.w	r0, [sp, #9]
    f9ac:	f361 201f 	bfi	r0, r1, #8, #24
    f9b0:	f8cd 0009 	str.w	r0, [sp, #9]
    f9b4:	7b60      	ldrb	r0, [r4, #13]
    f9b6:	f88d 000d 	strb.w	r0, [sp, #13]
    f9ba:	7960      	ldrb	r0, [r4, #5]
    f9bc:	f88d 000e 	strb.w	r0, [sp, #14]
    f9c0:	79a0      	ldrb	r0, [r4, #6]
    f9c2:	f88d 000f 	strb.w	r0, [sp, #15]
    f9c6:	f8d4 0007 	ldr.w	r0, [r4, #7]
    f9ca:	9004      	str	r0, [sp, #16]
    f9cc:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    f9d0:	f8ad 0014 	strh.w	r0, [sp, #20]
    f9d4:	7ba0      	ldrb	r0, [r4, #14]
    f9d6:	f88d 0016 	strb.w	r0, [sp, #22]
    f9da:	207f      	movs	r0, #127	; 0x7f
    f9dc:	f88d 0017 	strb.w	r0, [sp, #23]
    f9e0:	2001      	movs	r0, #1
    f9e2:	f88d 0018 	strb.w	r0, [sp, #24]
    f9e6:	f88d 5019 	strb.w	r5, [sp, #25]
    f9ea:	f88d 001a 	strb.w	r0, [sp, #26]
    f9ee:	f88d 501b 	strb.w	r5, [sp, #27]
    f9f2:	4610      	mov	r0, r2
    f9f4:	f7fe ff7e 	bl	e8f4 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    f9f8:	f88d 001c 	strb.w	r0, [sp, #28]
    f9fc:	f88d 501d 	strb.w	r5, [sp, #29]
    fa00:	f88d 501e 	strb.w	r5, [sp, #30]
    fa04:	a909      	add	r1, sp, #36	; 0x24
    fa06:	a801      	add	r0, sp, #4
    fa08:	f7f7 f968 	bl	6cdc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    fa0c:	e79b      	b.n	f946 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    fa0e:	f241 31a9 	movw	r1, #5033	; 0x13a9
    fa12:	2039      	movs	r0, #57	; 0x39
    fa14:	f7f0 ffcc 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000fa18 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    fa18:	b570      	push	{r4, r5, r6, lr}
    fa1a:	4604      	mov	r4, r0
    fa1c:	7800      	ldrb	r0, [r0, #0]
    fa1e:	2101      	movs	r1, #1
    fa20:	f7f1 faf4 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fa24:	0005      	movs	r5, r0
    fa26:	d007      	beq.n	fa38 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    fa28:	f7ff f90e 	bl	ec48 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fa2c:	b160      	cbz	r0, fa48 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    fa2e:	4628      	mov	r0, r5
    fa30:	f7fe ff46 	bl	e8c0 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fa34:	b110      	cbz	r0, fa3c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    fa36:	e005      	b.n	fa44 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    fa38:	2042      	movs	r0, #66	; 0x42
    fa3a:	bd70      	pop	{r4, r5, r6, pc}
    fa3c:	4628      	mov	r0, r5
    fa3e:	f7fe ff35 	bl	e8ac <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    fa42:	b108      	cbz	r0, fa48 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    fa44:	200c      	movs	r0, #12
    fa46:	bd70      	pop	{r4, r5, r6, pc}
    fa48:	1c61      	adds	r1, r4, #1
    fa4a:	4628      	mov	r0, r5
    fa4c:	f7fe ff4a 	bl	e8e4 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    fa50:	2000      	movs	r0, #0
    fa52:	bd70      	pop	{r4, r5, r6, pc}

0000fa54 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    fa54:	b50e      	push	{r1, r2, r3, lr}
    fa56:	8882      	ldrh	r2, [r0, #4]
    fa58:	f244 2390 	movw	r3, #17040	; 0x4290
    fa5c:	429a      	cmp	r2, r3
    fa5e:	d901      	bls.n	fa64 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
    fa60:	2012      	movs	r0, #18
    fa62:	bd0e      	pop	{r1, r2, r3, pc}
    fa64:	f640 0348 	movw	r3, #2120	; 0x848
    fa68:	429a      	cmp	r2, r3
    fa6a:	d300      	bcc.n	fa6e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    fa6c:	461a      	mov	r2, r3
    fa6e:	8803      	ldrh	r3, [r0, #0]
    fa70:	f8ad 3000 	strh.w	r3, [sp]
    fa74:	8843      	ldrh	r3, [r0, #2]
    fa76:	f8ad 3002 	strh.w	r3, [sp, #2]
    fa7a:	f8ad 2004 	strh.w	r2, [sp, #4]
    fa7e:	8843      	ldrh	r3, [r0, #2]
    fa80:	f8ad 3006 	strh.w	r3, [sp, #6]
    fa84:	f8ad 2008 	strh.w	r2, [sp, #8]
    fa88:	8800      	ldrh	r0, [r0, #0]
    fa8a:	8008      	strh	r0, [r1, #0]
    fa8c:	4668      	mov	r0, sp
    fa8e:	f7f7 fb8d 	bl	71ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>
    fa92:	bd0e      	pop	{r1, r2, r3, pc}

0000fa94 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
    fa94:	b510      	push	{r4, lr}
    fa96:	4604      	mov	r4, r0
    fa98:	f7f7 faea 	bl	7070 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    fa9c:	7861      	ldrb	r1, [r4, #1]
    fa9e:	f3c1 0240 	ubfx	r2, r1, #1, #1
    faa2:	f001 0101 	and.w	r1, r1, #1
    faa6:	f7fe ff19 	bl	e8dc <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
    faaa:	2000      	movs	r0, #0
    faac:	bd10      	pop	{r4, pc}

0000faae <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    faae:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fab0:	4604      	mov	r4, r0
    fab2:	f10d 0007 	add.w	r0, sp, #7
    fab6:	9000      	str	r0, [sp, #0]
    fab8:	7922      	ldrb	r2, [r4, #4]
    faba:	78e1      	ldrb	r1, [r4, #3]
    fabc:	78a0      	ldrb	r0, [r4, #2]
    fabe:	f10d 0306 	add.w	r3, sp, #6
    fac2:	f000 fbff 	bl	102c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x324>
    fac6:	2800      	cmp	r0, #0
    fac8:	d109      	bne.n	fade <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
    faca:	8820      	ldrh	r0, [r4, #0]
    facc:	f8ad 0004 	strh.w	r0, [sp, #4]
    fad0:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    fad4:	f8ad 0008 	strh.w	r0, [sp, #8]
    fad8:	a801      	add	r0, sp, #4
    fada:	f000 f96e 	bl	fdba <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    fade:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fae0 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    fae0:	b510      	push	{r4, lr}
    fae2:	4604      	mov	r4, r0
    fae4:	f000 fbb9 	bl	1025a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    fae8:	b120      	cbz	r0, faf4 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    faea:	f7f2 fc93 	bl	2414 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    faee:	b108      	cbz	r0, faf4 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    faf0:	200c      	movs	r0, #12
    faf2:	bd10      	pop	{r4, pc}
    faf4:	7820      	ldrb	r0, [r4, #0]
    faf6:	f7ff fd47 	bl	f588 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    fafa:	79e2      	ldrb	r2, [r4, #7]
    fafc:	1c61      	adds	r1, r4, #1
    fafe:	f7f2 fc3d 	bl	237c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    fb02:	b108      	cbz	r0, fb08 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    fb04:	2000      	movs	r0, #0
    fb06:	bd10      	pop	{r4, pc}
    fb08:	2002      	movs	r0, #2
    fb0a:	bd10      	pop	{r4, pc}

0000fb0c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    fb0c:	b510      	push	{r4, lr}
    fb0e:	4604      	mov	r4, r0
    fb10:	2001      	movs	r0, #1
    fb12:	f000 fa67 	bl	ffe4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
    fb16:	b128      	cbz	r0, fb24 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    fb18:	4621      	mov	r1, r4
    fb1a:	2001      	movs	r0, #1
    fb1c:	f7f1 fec4 	bl	18a8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fb20:	2000      	movs	r0, #0
    fb22:	bd10      	pop	{r4, pc}
    fb24:	200c      	movs	r0, #12
    fb26:	bd10      	pop	{r4, pc}

0000fb28 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    fb28:	b510      	push	{r4, lr}
    fb2a:	8800      	ldrh	r0, [r0, #0]
    fb2c:	f7f2 fcfc 	bl	2528 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    fb30:	b108      	cbz	r0, fb36 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    fb32:	2000      	movs	r0, #0
    fb34:	bd10      	pop	{r4, pc}
    fb36:	2030      	movs	r0, #48	; 0x30
    fb38:	bd10      	pop	{r4, pc}

0000fb3a <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    fb3a:	b51c      	push	{r2, r3, r4, lr}
    fb3c:	4604      	mov	r4, r0
    fb3e:	f7f7 fa97 	bl	7070 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    fb42:	2000      	movs	r0, #0
    fb44:	f88d 0000 	strb.w	r0, [sp]
    fb48:	f88d 0002 	strb.w	r0, [sp, #2]
    fb4c:	2003      	movs	r0, #3
    fb4e:	f88d 0001 	strb.w	r0, [sp, #1]
    fb52:	f814 0b01 	ldrb.w	r0, [r4], #1
    fb56:	f88d 0003 	strb.w	r0, [sp, #3]
    fb5a:	4668      	mov	r0, sp
    fb5c:	9401      	str	r4, [sp, #4]
    fb5e:	f000 f8da 	bl	fd16 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    fb62:	bd1c      	pop	{r2, r3, r4, pc}

0000fb64 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    fb64:	b51c      	push	{r2, r3, r4, lr}
    fb66:	8801      	ldrh	r1, [r0, #0]
    fb68:	f8ad 1000 	strh.w	r1, [sp]
    fb6c:	8841      	ldrh	r1, [r0, #2]
    fb6e:	f8ad 1002 	strh.w	r1, [sp, #2]
    fb72:	8801      	ldrh	r1, [r0, #0]
    fb74:	f8ad 1004 	strh.w	r1, [sp, #4]
    fb78:	8840      	ldrh	r0, [r0, #2]
    fb7a:	f8ad 0006 	strh.w	r0, [sp, #6]
    fb7e:	4668      	mov	r0, sp
    fb80:	f7f7 fbb4 	bl	72ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x244>
    fb84:	bd1c      	pop	{r2, r3, r4, pc}

0000fb86 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    fb86:	b510      	push	{r4, lr}
    fb88:	f7f1 feb2 	bl	18f0 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>
    fb8c:	2000      	movs	r0, #0
    fb8e:	bd10      	pop	{r4, pc}

0000fb90 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
    fb90:	b510      	push	{r4, lr}
    fb92:	460c      	mov	r4, r1
    fb94:	2100      	movs	r1, #0
    fb96:	f7f1 fa39 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fb9a:	b118      	cbz	r0, fba4 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
    fb9c:	2c02      	cmp	r4, #2
    fb9e:	d903      	bls.n	fba8 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
    fba0:	2012      	movs	r0, #18
    fba2:	bd10      	pop	{r4, pc}
    fba4:	2002      	movs	r0, #2
    fba6:	bd10      	pop	{r4, pc}
    fba8:	f014 0101 	ands.w	r1, r4, #1
    fbac:	f880 122d 	strb.w	r1, [r0, #557]	; 0x22d
    fbb0:	f3c4 0240 	ubfx	r2, r4, #1, #1
    fbb4:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
    fbb8:	d004      	beq.n	fbc4 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    fbba:	f890 122a 	ldrb.w	r1, [r0, #554]	; 0x22a
    fbbe:	b109      	cbz	r1, fbc4 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    fbc0:	f7ff f845 	bl	ec4e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    fbc4:	2000      	movs	r0, #0
    fbc6:	bd10      	pop	{r4, pc}

0000fbc8 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    fbc8:	b51c      	push	{r2, r3, r4, lr}
    fbca:	460c      	mov	r4, r1
    fbcc:	4669      	mov	r1, sp
    fbce:	f7fd fea4 	bl	d91a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fbd2:	2800      	cmp	r0, #0
    fbd4:	d105      	bne.n	fbe2 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
    fbd6:	2100      	movs	r1, #0
    fbd8:	4622      	mov	r2, r4
    fbda:	9801      	ldr	r0, [sp, #4]
    fbdc:	f000 face 	bl	1017c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    fbe0:	2000      	movs	r0, #0
    fbe2:	bd1c      	pop	{r2, r3, r4, pc}

0000fbe4 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
    fbe4:	b510      	push	{r4, lr}
    fbe6:	4604      	mov	r4, r0
    fbe8:	7800      	ldrb	r0, [r0, #0]
    fbea:	28ff      	cmp	r0, #255	; 0xff
    fbec:	d009      	beq.n	fc02 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
    fbee:	2101      	movs	r1, #1
    fbf0:	f7f1 fa0c 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fbf4:	b118      	cbz	r0, fbfe <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
    fbf6:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    fbfa:	8441      	strh	r1, [r0, #34]	; 0x22
    fbfc:	e005      	b.n	fc0a <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
    fbfe:	2042      	movs	r0, #66	; 0x42
    fc00:	bd10      	pop	{r4, pc}
    fc02:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    fc06:	f7f4 fc75 	bl	44f4 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
    fc0a:	2000      	movs	r0, #0
    fc0c:	bd10      	pop	{r4, pc}

0000fc0e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    fc0e:	b510      	push	{r4, lr}
    fc10:	4604      	mov	r4, r0
    fc12:	f7f7 fbab 	bl	736c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
    fc16:	b118      	cbz	r0, fc20 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
    fc18:	2000      	movs	r0, #0
    fc1a:	f000 f9e3 	bl	ffe4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
    fc1e:	b128      	cbz	r0, fc2c <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
    fc20:	4621      	mov	r1, r4
    fc22:	2000      	movs	r0, #0
    fc24:	f7f1 fe40 	bl	18a8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fc28:	2000      	movs	r0, #0
    fc2a:	bd10      	pop	{r4, pc}
    fc2c:	200c      	movs	r0, #12
    fc2e:	bd10      	pop	{r4, pc}

0000fc30 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    fc30:	b510      	push	{r4, lr}
    fc32:	7800      	ldrb	r0, [r0, #0]
    fc34:	b100      	cbz	r0, fc38 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    fc36:	2001      	movs	r0, #1
    fc38:	f7f4 fc86 	bl	4548 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
    fc3c:	2000      	movs	r0, #0
    fc3e:	bd10      	pop	{r4, pc}

0000fc40 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    fc40:	f7f7 bab4 	b.w	71ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>

0000fc44 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    fc44:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    fc48:	4606      	mov	r6, r0
    fc4a:	7845      	ldrb	r5, [r0, #1]
    fc4c:	7800      	ldrb	r0, [r0, #0]
    fc4e:	2101      	movs	r1, #1
    fc50:	f7f1 f9dc 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fc54:	0004      	movs	r4, r0
    fc56:	d01e      	beq.n	fc96 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
    fc58:	f7fe fdfb 	bl	e852 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    fc5c:	78f1      	ldrb	r1, [r6, #3]
    fc5e:	4281      	cmp	r1, r0
    fc60:	d800      	bhi.n	fc64 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
    fc62:	4608      	mov	r0, r1
    fc64:	4607      	mov	r7, r0
    fc66:	2d04      	cmp	r5, #4
    fc68:	d018      	beq.n	fc9c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
    fc6a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    fc6c:	f7fd fd26 	bl	d6bc <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    fc70:	4438      	add	r0, r7
    fc72:	b281      	uxth	r1, r0
    fc74:	4620      	mov	r0, r4
    fc76:	2201      	movs	r2, #1
    fc78:	f000 f9c6 	bl	10008 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
    fc7c:	2800      	cmp	r0, #0
    fc7e:	d10b      	bne.n	fc98 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    fc80:	2d03      	cmp	r5, #3
    fc82:	d000      	beq.n	fc86 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    fc84:	b1df      	cbz	r7, fcbe <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fc86:	4620      	mov	r0, r4
    fc88:	f7fe fe18 	bl	e8bc <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    fc8c:	7871      	ldrb	r1, [r6, #1]
    fc8e:	2903      	cmp	r1, #3
    fc90:	d010      	beq.n	fcb4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    fc92:	b9a0      	cbnz	r0, fcbe <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fc94:	e004      	b.n	fca0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
    fc96:	2042      	movs	r0, #66	; 0x42
    fc98:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    fc9c:	b97f      	cbnz	r7, fcbe <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fc9e:	e7f2      	b.n	fc86 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    fca0:	2904      	cmp	r1, #4
    fca2:	d107      	bne.n	fcb4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    fca4:	4620      	mov	r0, r4
    fca6:	f7fe ffcf 	bl	ec48 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fcaa:	b140      	cbz	r0, fcbe <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fcac:	6b60      	ldr	r0, [r4, #52]	; 0x34
    fcae:	f7fd fccc 	bl	d64a <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
    fcb2:	b120      	cbz	r0, fcbe <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fcb4:	2d01      	cmp	r5, #1
    fcb6:	d004      	beq.n	fcc2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    fcb8:	2d03      	cmp	r5, #3
    fcba:	d002      	beq.n	fcc2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    fcbc:	e00e      	b.n	fcdc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
    fcbe:	2012      	movs	r0, #18
    fcc0:	e7ea      	b.n	fc98 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    fcc2:	4620      	mov	r0, r4
    fcc4:	f7fe fdfa 	bl	e8bc <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    fcc8:	b108      	cbz	r0, fcce <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
    fcca:	2200      	movs	r2, #0
    fccc:	e002      	b.n	fcd4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    fcce:	2d01      	cmp	r5, #1
    fcd0:	d013      	beq.n	fcfa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
    fcd2:	2201      	movs	r2, #1
    fcd4:	4668      	mov	r0, sp
    fcd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    fcd8:	f7fd fc53 	bl	d582 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    fcdc:	2d04      	cmp	r5, #4
    fcde:	d018      	beq.n	fd12 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    fce0:	6872      	ldr	r2, [r6, #4]
    fce2:	463b      	mov	r3, r7
    fce4:	2101      	movs	r1, #1
    fce6:	6b60      	ldr	r0, [r4, #52]	; 0x34
    fce8:	f7fd fc7f 	bl	d5ea <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    fcec:	b138      	cbz	r0, fcfe <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
    fcee:	7870      	ldrb	r0, [r6, #1]
    fcf0:	2802      	cmp	r0, #2
    fcf2:	d006      	beq.n	fd02 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    fcf4:	2803      	cmp	r0, #3
    fcf6:	d004      	beq.n	fd02 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    fcf8:	e00b      	b.n	fd12 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    fcfa:	2202      	movs	r2, #2
    fcfc:	e7ea      	b.n	fcd4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    fcfe:	2007      	movs	r0, #7
    fd00:	e7ca      	b.n	fc98 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    fd02:	6b60      	ldr	r0, [r4, #52]	; 0x34
    fd04:	f7fd fcda 	bl	d6bc <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    fd08:	4602      	mov	r2, r0
    fd0a:	2101      	movs	r1, #1
    fd0c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    fd0e:	f7fd fcb2 	bl	d676 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    fd12:	2000      	movs	r0, #0
    fd14:	e7c0      	b.n	fc98 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0000fd16 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    fd16:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    fd1a:	4607      	mov	r7, r0
    fd1c:	7845      	ldrb	r5, [r0, #1]
    fd1e:	78c6      	ldrb	r6, [r0, #3]
    fd20:	7800      	ldrb	r0, [r0, #0]
    fd22:	2101      	movs	r1, #1
    fd24:	f7f1 f972 	bl	100c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fd28:	0004      	movs	r4, r0
    fd2a:	d003      	beq.n	fd34 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
    fd2c:	f7fe fdc8 	bl	e8c0 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fd30:	b118      	cbz	r0, fd3a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
    fd32:	e003      	b.n	fd3c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
    fd34:	2042      	movs	r0, #66	; 0x42
    fd36:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    fd3a:	2600      	movs	r6, #0
    fd3c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    fd3e:	f7fd fcc1 	bl	d6c4 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
    fd42:	4430      	add	r0, r6
    fd44:	b281      	uxth	r1, r0
    fd46:	4688      	mov	r8, r1
    fd48:	4620      	mov	r0, r4
    fd4a:	2201      	movs	r2, #1
    fd4c:	f000 f95c 	bl	10008 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
    fd50:	2800      	cmp	r0, #0
    fd52:	d1f0      	bne.n	fd36 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    fd54:	2d04      	cmp	r5, #4
    fd56:	d008      	beq.n	fd6a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    fd58:	2d03      	cmp	r5, #3
    fd5a:	d00a      	beq.n	fd72 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
    fd5c:	b12e      	cbz	r6, fd6a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    fd5e:	4620      	mov	r0, r4
    fd60:	f7fe ff72 	bl	ec48 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fd64:	b118      	cbz	r0, fd6e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
    fd66:	200c      	movs	r0, #12
    fd68:	e7e5      	b.n	fd36 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    fd6a:	2012      	movs	r0, #18
    fd6c:	e7e3      	b.n	fd36 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    fd6e:	2d01      	cmp	r5, #1
    fd70:	d10c      	bne.n	fd8c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
    fd72:	4620      	mov	r0, r4
    fd74:	f7fe fda2 	bl	e8bc <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    fd78:	b108      	cbz	r0, fd7e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
    fd7a:	2204      	movs	r2, #4
    fd7c:	e002      	b.n	fd84 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    fd7e:	2d01      	cmp	r5, #1
    fd80:	d010      	beq.n	fda4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
    fd82:	2205      	movs	r2, #5
    fd84:	4668      	mov	r0, sp
    fd86:	6b61      	ldr	r1, [r4, #52]	; 0x34
    fd88:	f7fd fbfb 	bl	d582 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    fd8c:	687a      	ldr	r2, [r7, #4]
    fd8e:	4633      	mov	r3, r6
    fd90:	2100      	movs	r1, #0
    fd92:	6b60      	ldr	r0, [r4, #52]	; 0x34
    fd94:	f7fd fc29 	bl	d5ea <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    fd98:	b130      	cbz	r0, fda8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
    fd9a:	2d02      	cmp	r5, #2
    fd9c:	d006      	beq.n	fdac <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    fd9e:	2d03      	cmp	r5, #3
    fda0:	d004      	beq.n	fdac <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    fda2:	e008      	b.n	fdb6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
    fda4:	2206      	movs	r2, #6
    fda6:	e7ed      	b.n	fd84 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    fda8:	2007      	movs	r0, #7
    fdaa:	e7c4      	b.n	fd36 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    fdac:	4642      	mov	r2, r8
    fdae:	2100      	movs	r1, #0
    fdb0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    fdb2:	f7fd fc60 	bl	d676 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    fdb6:	2000      	movs	r0, #0
    fdb8:	e7bd      	b.n	fd36 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0000fdba <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    fdba:	b510      	push	{r4, lr}
    fdbc:	4604      	mov	r4, r0
    fdbe:	8880      	ldrh	r0, [r0, #4]
    fdc0:	b128      	cbz	r0, fdce <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fdc2:	2801      	cmp	r0, #1
    fdc4:	d003      	beq.n	fdce <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fdc6:	2802      	cmp	r0, #2
    fdc8:	d001      	beq.n	fdce <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fdca:	2012      	movs	r0, #18
    fdcc:	bd10      	pop	{r4, pc}
    fdce:	78e0      	ldrb	r0, [r4, #3]
    fdd0:	f000 f9b1 	bl	10136 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    fdd4:	b148      	cbz	r0, fdea <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    fdd6:	78a0      	ldrb	r0, [r4, #2]
    fdd8:	f000 f9ad 	bl	10136 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    fddc:	b128      	cbz	r0, fdea <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    fdde:	4620      	mov	r0, r4
    fde0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fde4:	2101      	movs	r1, #1
    fde6:	f000 b862 	b.w	feae <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    fdea:	2011      	movs	r0, #17
    fdec:	bd10      	pop	{r4, pc}

0000fdee <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    fdee:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fdf0:	460c      	mov	r4, r1
    fdf2:	4605      	mov	r5, r0
    fdf4:	8800      	ldrh	r0, [r0, #0]
    fdf6:	4669      	mov	r1, sp
    fdf8:	f7fd fd8f 	bl	d91a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fdfc:	2800      	cmp	r0, #0
    fdfe:	d106      	bne.n	fe0e <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    fe00:	9801      	ldr	r0, [sp, #4]
    fe02:	8829      	ldrh	r1, [r5, #0]
    fe04:	8021      	strh	r1, [r4, #0]
    fe06:	f8b0 00c8 	ldrh.w	r0, [r0, #200]	; 0xc8
    fe0a:	8060      	strh	r0, [r4, #2]
    fe0c:	2000      	movs	r0, #0
    fe0e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000fe10 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    fe10:	b510      	push	{r4, lr}
    fe12:	4604      	mov	r4, r0
    fe14:	4601      	mov	r1, r0
    fe16:	2000      	movs	r0, #0
    fe18:	f7f1 fd2e 	bl	1878 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    fe1c:	b910      	cbnz	r0, fe24 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    fe1e:	2000      	movs	r0, #0
    fe20:	6020      	str	r0, [r4, #0]
    fe22:	80a0      	strh	r0, [r4, #4]
    fe24:	2000      	movs	r0, #0
    fe26:	bd10      	pop	{r4, pc}

0000fe28 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    fe28:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fe2a:	460c      	mov	r4, r1
    fe2c:	4605      	mov	r5, r0
    fe2e:	8800      	ldrh	r0, [r0, #0]
    fe30:	4669      	mov	r1, sp
    fe32:	f7fd fd72 	bl	d91a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fe36:	b108      	cbz	r0, fe3c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    fe38:	2002      	movs	r0, #2
    fe3a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fe3c:	78a8      	ldrb	r0, [r5, #2]
    fe3e:	b158      	cbz	r0, fe58 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x30>
    fe40:	f000 f9f2 	bl	10228 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
    fe44:	70a0      	strb	r0, [r4, #2]
    fe46:	8828      	ldrh	r0, [r5, #0]
    fe48:	8020      	strh	r0, [r4, #0]
    fe4a:	f994 0002 	ldrsb.w	r0, [r4, #2]
    fe4e:	f7f2 fcf3 	bl	2838 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fe52:	70a0      	strb	r0, [r4, #2]
    fe54:	2000      	movs	r0, #0
    fe56:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fe58:	9801      	ldr	r0, [sp, #4]
    fe5a:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    fe5e:	e7f1      	b.n	fe44 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000fe60 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    fe60:	b510      	push	{r4, lr}
    fe62:	f7f7 fa89 	bl	7378 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    fe66:	2000      	movs	r0, #0
    fe68:	bd10      	pop	{r4, pc}

0000fe6a <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    fe6a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    fe6e:	4604      	mov	r4, r0
    fe70:	8840      	ldrh	r0, [r0, #2]
    fe72:	460d      	mov	r5, r1
    fe74:	b1b8      	cbz	r0, fea6 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    fe76:	8820      	ldrh	r0, [r4, #0]
    fe78:	4669      	mov	r1, sp
    fe7a:	f7fd fd4e 	bl	d91a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fe7e:	2800      	cmp	r0, #0
    fe80:	d10f      	bne.n	fea2 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
    fe82:	8820      	ldrh	r0, [r4, #0]
    fe84:	8028      	strh	r0, [r5, #0]
    fe86:	9e01      	ldr	r6, [sp, #4]
    fe88:	f106 0510 	add.w	r5, r6, #16
    fe8c:	3680      	adds	r6, #128	; 0x80
    fe8e:	682f      	ldr	r7, [r5, #0]
    fe90:	8862      	ldrh	r2, [r4, #2]
    fe92:	4639      	mov	r1, r7
    fe94:	4630      	mov	r0, r6
    fe96:	f7fd fe62 	bl	db5e <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    fe9a:	6828      	ldr	r0, [r5, #0]
    fe9c:	42b8      	cmp	r0, r7
    fe9e:	d1f6      	bne.n	fe8e <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
    fea0:	2000      	movs	r0, #0
    fea2:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    fea6:	2012      	movs	r0, #18
    fea8:	e7fb      	b.n	fea2 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0000feaa <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    feaa:	f000 b868 	b.w	ff7e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000feae <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    feae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    feb2:	b085      	sub	sp, #20
    feb4:	4688      	mov	r8, r1
    feb6:	4606      	mov	r6, r0
    feb8:	8800      	ldrh	r0, [r0, #0]
    feba:	a901      	add	r1, sp, #4
    febc:	f7fd fd2d 	bl	d91a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fec0:	2800      	cmp	r0, #0
    fec2:	d13b      	bne.n	ff3c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    fec4:	9802      	ldr	r0, [sp, #8]
    fec6:	4601      	mov	r1, r0
    fec8:	468a      	mov	sl, r1
    feca:	f890 1194 	ldrb.w	r1, [r0, #404]	; 0x194
    fece:	f500 7498 	add.w	r4, r0, #304	; 0x130
    fed2:	f88d 1000 	strb.w	r1, [sp]
    fed6:	9900      	ldr	r1, [sp, #0]
    fed8:	9100      	str	r1, [sp, #0]
    feda:	f89d 1000 	ldrb.w	r1, [sp]
    fede:	f04f 0900 	mov.w	r9, #0
    fee2:	3080      	adds	r0, #128	; 0x80
    fee4:	b121      	cbz	r1, fef0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
    fee6:	f1b8 0f02 	cmp.w	r8, #2
    feea:	d001      	beq.n	fef0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
    feec:	2701      	movs	r7, #1
    feee:	e000      	b.n	fef2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
    fef0:	2700      	movs	r7, #0
    fef2:	7f81      	ldrb	r1, [r0, #30]
    fef4:	2922      	cmp	r1, #34	; 0x22
    fef6:	d100      	bne.n	fefa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    fef8:	b13f      	cbz	r7, ff0a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    fefa:	2500      	movs	r5, #0
    fefc:	306c      	adds	r0, #108	; 0x6c
    fefe:	2108      	movs	r1, #8
    ff00:	4683      	mov	fp, r0
    ff02:	f7ff fb38 	bl	f576 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
    ff06:	b110      	cbz	r0, ff0e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x60>
    ff08:	e007      	b.n	ff1a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x6c>
    ff0a:	2501      	movs	r5, #1
    ff0c:	e7f6      	b.n	fefc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4e>
    ff0e:	210b      	movs	r1, #11
    ff10:	4658      	mov	r0, fp
    ff12:	f7ff fb30 	bl	f576 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
    ff16:	b900      	cbnz	r0, ff1a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x6c>
    ff18:	b17d      	cbz	r5, ff3a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8c>
    ff1a:	a804      	add	r0, sp, #16
    ff1c:	9000      	str	r0, [sp, #0]
    ff1e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ff22:	ab03      	add	r3, sp, #12
    ff24:	4632      	mov	r2, r6
    ff26:	4651      	mov	r1, sl
    ff28:	f000 f95e 	bl	101e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
    ff2c:	0005      	movs	r5, r0
    ff2e:	d105      	bne.n	ff3c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    ff30:	340c      	adds	r4, #12
    ff32:	20ff      	movs	r0, #255	; 0xff
    ff34:	7060      	strb	r0, [r4, #1]
    ff36:	b937      	cbnz	r7, ff46 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
    ff38:	e003      	b.n	ff42 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
    ff3a:	201a      	movs	r0, #26
    ff3c:	b005      	add	sp, #20
    ff3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ff42:	7820      	ldrb	r0, [r4, #0]
    ff44:	b108      	cbz	r0, ff4a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
    ff46:	253a      	movs	r5, #58	; 0x3a
    ff48:	e012      	b.n	ff70 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
    ff4a:	f884 8000 	strb.w	r8, [r4]
    ff4e:	f89d 000c 	ldrb.w	r0, [sp, #12]
    ff52:	70a0      	strb	r0, [r4, #2]
    ff54:	f89d 1010 	ldrb.w	r1, [sp, #16]
    ff58:	70e1      	strb	r1, [r4, #3]
    ff5a:	f88d 0000 	strb.w	r0, [sp]
    ff5e:	f88d 1001 	strb.w	r1, [sp, #1]
    ff62:	88b0      	ldrh	r0, [r6, #4]
    ff64:	f8ad 0002 	strh.w	r0, [sp, #2]
    ff68:	4669      	mov	r1, sp
    ff6a:	4650      	mov	r0, sl
    ff6c:	f7fd fd92 	bl	da94 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    ff70:	f884 9001 	strb.w	r9, [r4, #1]
    ff74:	4628      	mov	r0, r5
    ff76:	e7e1      	b.n	ff3c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>

0000ff78 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    ff78:	2008      	movs	r0, #8
    ff7a:	f7f7 ba65 	b.w	7448 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

0000ff7e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    ff7e:	b510      	push	{r4, lr}
    ff80:	f7fd fc2b 	bl	d7da <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    ff84:	f7f2 fa2c 	bl	23e0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    ff88:	f7f7 fa80 	bl	748c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    ff8c:	f7fe f896 	bl	e0bc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    ff90:	f7fd fe55 	bl	dc3e <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>
    ff94:	f7f3 fa76 	bl	3484 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    ff98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ff9c:	f7f7 b848 	b.w	7030 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x48>

0000ffa0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
    ffa0:	f7f5 b83c 	b.w	501c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
    ffa4:	f44f 71a4 	mov.w	r1, #328	; 0x148
    ffa8:	4288      	cmp	r0, r1
    ffaa:	d303      	bcc.n	ffb4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
    ffac:	f640 0148 	movw	r1, #2120	; 0x848
    ffb0:	4288      	cmp	r0, r1
    ffb2:	d300      	bcc.n	ffb6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
    ffb4:	4608      	mov	r0, r1
    ffb6:	b280      	uxth	r0, r0
    ffb8:	4770      	bx	lr
    ffba:	07c1      	lsls	r1, r0, #31
    ffbc:	d001      	beq.n	ffc2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
    ffbe:	2001      	movs	r0, #1
    ffc0:	4770      	bx	lr
    ffc2:	0780      	lsls	r0, r0, #30
    ffc4:	d501      	bpl.n	ffca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
    ffc6:	2002      	movs	r0, #2
    ffc8:	4770      	bx	lr
    ffca:	2000      	movs	r0, #0
    ffcc:	4770      	bx	lr
    ffce:	b510      	push	{r4, lr}
    ffd0:	2801      	cmp	r0, #1
    ffd2:	d006      	beq.n	ffe2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
    ffd4:	2802      	cmp	r0, #2
    ffd6:	d004      	beq.n	ffe2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
    ffd8:	f240 21d7 	movw	r1, #727	; 0x2d7
    ffdc:	2006      	movs	r0, #6
    ffde:	f7f0 fce7 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ffe2:	bd10      	pop	{r4, pc}
    ffe4:	b510      	push	{r4, lr}
    ffe6:	f7f7 f80d 	bl	7004 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1c>
    ffea:	b158      	cbz	r0, 10004 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
    ffec:	f7f7 f840 	bl	7070 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    fff0:	4604      	mov	r4, r0
    fff2:	f7fe fc65 	bl	e8c0 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fff6:	b918      	cbnz	r0, 10000 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60>
    fff8:	4620      	mov	r0, r4
    fffa:	f7fe fc57 	bl	e8ac <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    fffe:	b108      	cbz	r0, 10004 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   10000:	2000      	movs	r0, #0
   10002:	bd10      	pop	{r4, pc}
   10004:	2001      	movs	r0, #1
   10006:	bd10      	pop	{r4, pc}
   10008:	b570      	push	{r4, r5, r6, lr}
   1000a:	460c      	mov	r4, r1
   1000c:	4605      	mov	r5, r0
   1000e:	b112      	cbz	r2, 10016 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x76>
   10010:	291f      	cmp	r1, #31
   10012:	d80c      	bhi.n	1002e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x8e>
   10014:	e016      	b.n	10044 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa4>
   10016:	f7f1 fa6f 	bl	14f8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   1001a:	42a0      	cmp	r0, r4
   1001c:	d201      	bcs.n	10022 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x82>
   1001e:	2007      	movs	r0, #7
   10020:	bd70      	pop	{r4, r5, r6, pc}
   10022:	4628      	mov	r0, r5
   10024:	f7fe fc4a 	bl	e8bc <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10028:	b118      	cbz	r0, 10032 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   1002a:	2c1f      	cmp	r4, #31
   1002c:	d901      	bls.n	10032 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   1002e:	2012      	movs	r0, #18
   10030:	bd70      	pop	{r4, r5, r6, pc}
   10032:	4628      	mov	r0, r5
   10034:	f7fe fc4b 	bl	e8ce <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   10038:	b130      	cbz	r0, 10048 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa8>
   1003a:	4621      	mov	r1, r4
   1003c:	4628      	mov	r0, r5
   1003e:	f7fe fc14 	bl	e86a <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   10042:	b118      	cbz	r0, 1004c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xac>
   10044:	2000      	movs	r0, #0
   10046:	bd70      	pop	{r4, r5, r6, pc}
   10048:	2042      	movs	r0, #66	; 0x42
   1004a:	bd70      	pop	{r4, r5, r6, pc}
   1004c:	2045      	movs	r0, #69	; 0x45
   1004e:	bd70      	pop	{r4, r5, r6, pc}
   10050:	b510      	push	{r4, lr}
   10052:	4604      	mov	r4, r0
   10054:	7840      	ldrb	r0, [r0, #1]
   10056:	06c1      	lsls	r1, r0, #27
   10058:	d51c      	bpl.n	10094 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   1005a:	07c0      	lsls	r0, r0, #31
   1005c:	d00b      	beq.n	10076 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   1005e:	f7f7 f9c7 	bl	73f0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   10062:	b1b8      	cbz	r0, 10094 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   10064:	7860      	ldrb	r0, [r4, #1]
   10066:	06c1      	lsls	r1, r0, #27
   10068:	d405      	bmi.n	10076 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   1006a:	0700      	lsls	r0, r0, #28
   1006c:	d503      	bpl.n	10076 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   1006e:	7d20      	ldrb	r0, [r4, #20]
   10070:	2802      	cmp	r0, #2
   10072:	d10f      	bne.n	10094 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   10074:	e010      	b.n	10098 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   10076:	7d20      	ldrb	r0, [r4, #20]
   10078:	2802      	cmp	r0, #2
   1007a:	d001      	beq.n	10080 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xe0>
   1007c:	7ea0      	ldrb	r0, [r4, #26]
   1007e:	b948      	cbnz	r0, 10094 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   10080:	7860      	ldrb	r0, [r4, #1]
   10082:	0700      	lsls	r0, r0, #28
   10084:	d408      	bmi.n	10098 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   10086:	f8d4 0005 	ldr.w	r0, [r4, #5]
   1008a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   1008e:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   10092:	d201      	bcs.n	10098 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   10094:	2011      	movs	r0, #17
   10096:	bd10      	pop	{r4, pc}
   10098:	2000      	movs	r0, #0
   1009a:	bd10      	pop	{r4, pc}
   1009c:	b538      	push	{r3, r4, r5, lr}
   1009e:	4604      	mov	r4, r0
   100a0:	7800      	ldrb	r0, [r0, #0]
   100a2:	28ef      	cmp	r0, #239	; 0xef
   100a4:	d843      	bhi.n	1012e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   100a6:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   100aa:	f8ad 0000 	strh.w	r0, [sp]
   100ae:	9800      	ldr	r0, [sp, #0]
   100b0:	f000 f91f 	bl	102f2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x352>
   100b4:	b3a0      	cbz	r0, 10120 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   100b6:	7861      	ldrb	r1, [r4, #1]
   100b8:	0708      	lsls	r0, r1, #28
   100ba:	d40b      	bmi.n	100d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x134>
   100bc:	f8d4 0002 	ldr.w	r0, [r4, #2]
   100c0:	f8d4 3005 	ldr.w	r3, [r4, #5]
   100c4:	0a02      	lsrs	r2, r0, #8
   100c6:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   100ca:	d830      	bhi.n	1012e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   100cc:	2220      	movs	r2, #32
   100ce:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   100d2:	d82c      	bhi.n	1012e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   100d4:	7a60      	ldrb	r0, [r4, #9]
   100d6:	b318      	cbz	r0, 10120 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   100d8:	2807      	cmp	r0, #7
   100da:	d828      	bhi.n	1012e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   100dc:	7aa0      	ldrb	r0, [r4, #10]
   100de:	b128      	cbz	r0, 100ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   100e0:	2801      	cmp	r0, #1
   100e2:	d003      	beq.n	100ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   100e4:	2802      	cmp	r0, #2
   100e6:	d001      	beq.n	100ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   100e8:	2803      	cmp	r0, #3
   100ea:	d120      	bne.n	1012e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   100ec:	074a      	lsls	r2, r1, #29
   100ee:	d403      	bmi.n	100f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   100f0:	2802      	cmp	r0, #2
   100f2:	d001      	beq.n	100f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   100f4:	2803      	cmp	r0, #3
   100f6:	d105      	bne.n	10104 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x164>
   100f8:	7ae0      	ldrb	r0, [r4, #11]
   100fa:	b108      	cbz	r0, 10100 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x160>
   100fc:	2801      	cmp	r0, #1
   100fe:	d116      	bne.n	1012e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10100:	0748      	lsls	r0, r1, #29
   10102:	d407      	bmi.n	10114 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   10104:	7ca0      	ldrb	r0, [r4, #18]
   10106:	b128      	cbz	r0, 10114 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   10108:	2801      	cmp	r0, #1
   1010a:	d003      	beq.n	10114 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   1010c:	2802      	cmp	r0, #2
   1010e:	d001      	beq.n	10114 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   10110:	2803      	cmp	r0, #3
   10112:	d10c      	bne.n	1012e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10114:	06c8      	lsls	r0, r1, #27
   10116:	7d20      	ldrb	r0, [r4, #20]
   10118:	d503      	bpl.n	10122 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x182>
   1011a:	2801      	cmp	r0, #1
   1011c:	d107      	bne.n	1012e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1011e:	e002      	b.n	10126 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x186>
   10120:	e005      	b.n	1012e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10122:	2802      	cmp	r0, #2
   10124:	d003      	beq.n	1012e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10126:	7e20      	ldrb	r0, [r4, #24]
   10128:	b118      	cbz	r0, 10132 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   1012a:	2801      	cmp	r0, #1
   1012c:	d001      	beq.n	10132 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   1012e:	2012      	movs	r0, #18
   10130:	bd38      	pop	{r3, r4, r5, pc}
   10132:	2000      	movs	r0, #0
   10134:	bd38      	pop	{r3, r4, r5, pc}
   10136:	b510      	push	{r4, lr}
   10138:	0004      	movs	r4, r0
   1013a:	d005      	beq.n	10148 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   1013c:	f7f7 f996 	bl	746c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10140:	4384      	bics	r4, r0
   10142:	d001      	beq.n	10148 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   10144:	2000      	movs	r0, #0
   10146:	bd10      	pop	{r4, pc}
   10148:	2001      	movs	r0, #1
   1014a:	bd10      	pop	{r4, pc}
   1014c:	28fb      	cmp	r0, #251	; 0xfb
   1014e:	d803      	bhi.n	10158 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b8>
   10150:	f640 0048 	movw	r0, #2120	; 0x848
   10154:	4281      	cmp	r1, r0
   10156:	d901      	bls.n	1015c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1bc>
   10158:	2011      	movs	r0, #17
   1015a:	4770      	bx	lr
   1015c:	2000      	movs	r0, #0
   1015e:	4770      	bx	lr
   10160:	381b      	subs	r0, #27
   10162:	28e1      	cmp	r0, #225	; 0xe1
   10164:	d206      	bcs.n	10174 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   10166:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   1016a:	d303      	bcc.n	10174 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   1016c:	f244 2090 	movw	r0, #17040	; 0x4290
   10170:	4281      	cmp	r1, r0
   10172:	d901      	bls.n	10178 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   10174:	2012      	movs	r0, #18
   10176:	4770      	bx	lr
   10178:	2000      	movs	r0, #0
   1017a:	4770      	bx	lr
   1017c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10180:	4606      	mov	r6, r0
   10182:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   10186:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   1018a:	4615      	mov	r5, r2
   1018c:	302c      	adds	r0, #44	; 0x2c
   1018e:	f7f4 f9e1 	bl	4554 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   10192:	4680      	mov	r8, r0
   10194:	2102      	movs	r1, #2
   10196:	f7fd fc4d 	bl	da34 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   1019a:	4287      	cmp	r7, r0
   1019c:	d200      	bcs.n	101a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x200>
   1019e:	4638      	mov	r0, r7
   101a0:	4607      	mov	r7, r0
   101a2:	2102      	movs	r1, #2
   101a4:	4640      	mov	r0, r8
   101a6:	f7fd fc45 	bl	da34 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   101aa:	4284      	cmp	r4, r0
   101ac:	d200      	bcs.n	101b0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x210>
   101ae:	4620      	mov	r0, r4
   101b0:	8831      	ldrh	r1, [r6, #0]
   101b2:	8029      	strh	r1, [r5, #0]
   101b4:	2f1b      	cmp	r7, #27
   101b6:	d913      	bls.n	101e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x240>
   101b8:	2ffb      	cmp	r7, #251	; 0xfb
   101ba:	d300      	bcc.n	101be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   101bc:	27fb      	movs	r7, #251	; 0xfb
   101be:	806f      	strh	r7, [r5, #2]
   101c0:	281b      	cmp	r0, #27
   101c2:	d90f      	bls.n	101e4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   101c4:	28fb      	cmp	r0, #251	; 0xfb
   101c6:	d300      	bcc.n	101ca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   101c8:	20fb      	movs	r0, #251	; 0xfb
   101ca:	80e8      	strh	r0, [r5, #6]
   101cc:	4640      	mov	r0, r8
   101ce:	f7ff fee9 	bl	ffa4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   101d2:	80a8      	strh	r0, [r5, #4]
   101d4:	4640      	mov	r0, r8
   101d6:	f7ff fee5 	bl	ffa4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   101da:	8128      	strh	r0, [r5, #8]
   101dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   101e0:	271b      	movs	r7, #27
   101e2:	e7ec      	b.n	101be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   101e4:	201b      	movs	r0, #27
   101e6:	e7f0      	b.n	101ca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   101e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   101ec:	7890      	ldrb	r0, [r2, #2]
   101ee:	9e06      	ldr	r6, [sp, #24]
   101f0:	461d      	mov	r5, r3
   101f2:	4614      	mov	r4, r2
   101f4:	b908      	cbnz	r0, 101fa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   101f6:	f7f7 f939 	bl	746c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   101fa:	78e4      	ldrb	r4, [r4, #3]
   101fc:	4607      	mov	r7, r0
   101fe:	b914      	cbnz	r4, 10206 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x266>
   10200:	f7f7 f934 	bl	746c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10204:	4604      	mov	r4, r0
   10206:	b16f      	cbz	r7, 10224 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   10208:	b164      	cbz	r4, 10224 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   1020a:	4638      	mov	r0, r7
   1020c:	f7ff fed5 	bl	ffba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   10210:	4620      	mov	r0, r4
   10212:	f7ff fed2 	bl	ffba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   10216:	b12f      	cbz	r7, 10224 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   10218:	b124      	cbz	r4, 10224 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   1021a:	702f      	strb	r7, [r5, #0]
   1021c:	7034      	strb	r4, [r6, #0]
   1021e:	2000      	movs	r0, #0
   10220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10224:	2009      	movs	r0, #9
   10226:	e7fb      	b.n	10220 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x280>
   10228:	207f      	movs	r0, #127	; 0x7f
   1022a:	f000 b843 	b.w	102b4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x314>
   1022e:	b508      	push	{r3, lr}
   10230:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
   10234:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
   10238:	f88d 0000 	strb.w	r0, [sp]
   1023c:	9800      	ldr	r0, [sp, #0]
   1023e:	9000      	str	r0, [sp, #0]
   10240:	f89d 0000 	ldrb.w	r0, [sp]
   10244:	b100      	cbz	r0, 10248 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a8>
   10246:	2001      	movs	r0, #1
   10248:	1e40      	subs	r0, r0, #1
   1024a:	4208      	tst	r0, r1
   1024c:	d003      	beq.n	10256 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   1024e:	2904      	cmp	r1, #4
   10250:	d001      	beq.n	10256 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   10252:	2001      	movs	r0, #1
   10254:	bd08      	pop	{r3, pc}
   10256:	2000      	movs	r0, #0
   10258:	bd08      	pop	{r3, pc}
   1025a:	b510      	push	{r4, lr}
   1025c:	f7f6 fed2 	bl	7004 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1c>
   10260:	2800      	cmp	r0, #0
   10262:	d000      	beq.n	10266 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2c6>
   10264:	2001      	movs	r0, #1
   10266:	bd10      	pop	{r4, pc}
   10268:	b570      	push	{r4, r5, r6, lr}
   1026a:	4605      	mov	r5, r0
   1026c:	f7fe fb2f 	bl	e8ce <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   10270:	b170      	cbz	r0, 10290 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2f0>
   10272:	4628      	mov	r0, r5
   10274:	f7fe fce8 	bl	ec48 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10278:	2800      	cmp	r0, #0
   1027a:	d008      	beq.n	1028e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ee>
   1027c:	4628      	mov	r0, r5
   1027e:	f7fe fce0 	bl	ec42 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   10282:	4604      	mov	r4, r0
   10284:	4628      	mov	r0, r5
   10286:	f7fe fcb6 	bl	ebf6 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   1028a:	b118      	cbz	r0, 10294 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2f4>
   1028c:	200c      	movs	r0, #12
   1028e:	bd70      	pop	{r4, r5, r6, pc}
   10290:	2042      	movs	r0, #66	; 0x42
   10292:	bd70      	pop	{r4, r5, r6, pc}
   10294:	b164      	cbz	r4, 102b0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x310>
   10296:	8820      	ldrh	r0, [r4, #0]
   10298:	f7fd fa6c 	bl	d774 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   1029c:	8820      	ldrh	r0, [r4, #0]
   1029e:	2100      	movs	r1, #0
   102a0:	f7f0 ff56 	bl	1150 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   102a4:	b120      	cbz	r0, 102b0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x310>
   102a6:	f241 71ae 	movw	r1, #6062	; 0x17ae
   102aa:	2039      	movs	r0, #57	; 0x39
   102ac:	f7f0 fb80 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   102b0:	2000      	movs	r0, #0
   102b2:	bd70      	pop	{r4, r5, r6, pc}
   102b4:	b508      	push	{r3, lr}
   102b6:	f640 1288 	movw	r2, #2440	; 0x988
   102ba:	2300      	movs	r3, #0
   102bc:	4669      	mov	r1, sp
   102be:	f7fc f8e7 	bl	c490 <mpsl_fem_tx_power_split>
   102c2:	bd08      	pop	{r3, pc}
   102c4:	b530      	push	{r4, r5, lr}
   102c6:	f340 0400 	sbfx	r4, r0, #0, #1
   102ca:	f340 0040 	sbfx	r0, r0, #1, #1
   102ce:	1c40      	adds	r0, r0, #1
   102d0:	9d03      	ldr	r5, [sp, #12]
   102d2:	1c64      	adds	r4, r4, #1
   102d4:	d000      	beq.n	102d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x338>
   102d6:	b119      	cbz	r1, 102e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x340>
   102d8:	b100      	cbz	r0, 102dc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x33c>
   102da:	b10a      	cbz	r2, 102e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x340>
   102dc:	b91c      	cbnz	r4, 102e6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x346>
   102de:	e001      	b.n	102e4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x344>
   102e0:	2011      	movs	r0, #17
   102e2:	bd30      	pop	{r4, r5, pc}
   102e4:	2100      	movs	r1, #0
   102e6:	7019      	strb	r1, [r3, #0]
   102e8:	b900      	cbnz	r0, 102ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x34c>
   102ea:	2200      	movs	r2, #0
   102ec:	702a      	strb	r2, [r5, #0]
   102ee:	2000      	movs	r0, #0
   102f0:	bd30      	pop	{r4, r5, pc}
   102f2:	b2c0      	uxtb	r0, r0
   102f4:	06c1      	lsls	r1, r0, #27
   102f6:	d40c      	bmi.n	10312 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x372>
   102f8:	0681      	lsls	r1, r0, #26
   102fa:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   102fe:	d503      	bpl.n	10308 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x368>
   10300:	b9d1      	cbnz	r1, 10338 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   10302:	0781      	lsls	r1, r0, #30
   10304:	d418      	bmi.n	10338 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   10306:	e001      	b.n	1030c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36c>
   10308:	2900      	cmp	r1, #0
   1030a:	d1fa      	bne.n	10302 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x362>
   1030c:	0700      	lsls	r0, r0, #28
   1030e:	d413      	bmi.n	10338 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   10310:	e010      	b.n	10334 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x394>
   10312:	0641      	lsls	r1, r0, #25
   10314:	d410      	bmi.n	10338 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   10316:	0681      	lsls	r1, r0, #26
   10318:	d40e      	bmi.n	10338 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   1031a:	07c1      	lsls	r1, r0, #31
   1031c:	ea4f 7180 	mov.w	r1, r0, lsl #30
   10320:	d004      	beq.n	1032c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38c>
   10322:	2900      	cmp	r1, #0
   10324:	db02      	blt.n	1032c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38c>
   10326:	0740      	lsls	r0, r0, #29
   10328:	d404      	bmi.n	10334 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x394>
   1032a:	e005      	b.n	10338 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   1032c:	0701      	lsls	r1, r0, #28
   1032e:	d403      	bmi.n	10338 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   10330:	0740      	lsls	r0, r0, #29
   10332:	d401      	bmi.n	10338 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   10334:	2001      	movs	r0, #1
   10336:	4770      	bx	lr
   10338:	2000      	movs	r0, #0
   1033a:	4770      	bx	lr
   1033c:	b510      	push	{r4, lr}
   1033e:	f7f4 f8ed 	bl	451c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   10342:	b110      	cbz	r0, 1034a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3aa>
   10344:	f44f 7188 	mov.w	r1, #272	; 0x110
   10348:	e004      	b.n	10354 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
   1034a:	f7f3 fa1d 	bl	3788 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   1034e:	b120      	cbz	r0, 1035a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ba>
   10350:	f240 1115 	movw	r1, #277	; 0x115
   10354:	2001      	movs	r0, #1
   10356:	f7f0 fb2b 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1035a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1035e:	2001      	movs	r0, #1
   10360:	f7fd b858 	b.w	d414 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10364:	6802      	ldr	r2, [r0, #0]
   10366:	b912      	cbnz	r2, 1036e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
   10368:	6001      	str	r1, [r0, #0]
   1036a:	4770      	bx	lr
   1036c:	4602      	mov	r2, r0
   1036e:	6850      	ldr	r0, [r2, #4]
   10370:	b108      	cbz	r0, 10376 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d6>
   10372:	428a      	cmp	r2, r1
   10374:	d1fa      	bne.n	1036c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3cc>
   10376:	428a      	cmp	r2, r1
   10378:	d0f7      	beq.n	1036a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ca>
   1037a:	6051      	str	r1, [r2, #4]
   1037c:	4770      	bx	lr
   1037e:	b510      	push	{r4, lr}
   10380:	4604      	mov	r4, r0
   10382:	e002      	b.n	1038a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ea>
   10384:	6820      	ldr	r0, [r4, #0]
   10386:	4780      	blx	r0
   10388:	6864      	ldr	r4, [r4, #4]
   1038a:	2c00      	cmp	r4, #0
   1038c:	d1fa      	bne.n	10384 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3e4>
   1038e:	bd10      	pop	{r4, pc}
   10390:	b510      	push	{r4, lr}
   10392:	2000      	movs	r0, #0
   10394:	f7fd f83e 	bl	d414 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10398:	f7f0 ffb8 	bl	130c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   1039c:	f7f1 fa4e 	bl	183c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   103a0:	f7f1 fbdc 	bl	1b5c <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>
   103a4:	2800      	cmp	r0, #0
   103a6:	d003      	beq.n	103b0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x410>
   103a8:	21f2      	movs	r1, #242	; 0xf2
   103aa:	2001      	movs	r0, #1
   103ac:	f7f0 fb00 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   103b0:	bd10      	pop	{r4, pc}
   103b2:	b510      	push	{r4, lr}
   103b4:	f7ff ffc2 	bl	1033c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x39c>
   103b8:	f7fe ff41 	bl	f23e <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   103bc:	2800      	cmp	r0, #0
   103be:	d004      	beq.n	103ca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42a>
   103c0:	f44f 7195 	mov.w	r1, #298	; 0x12a
   103c4:	2001      	movs	r0, #1
   103c6:	f7f0 faf3 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   103ca:	bd10      	pop	{r4, pc}

000103cc <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   103cc:	f7fb bd96 	b.w	befc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   103d0:	000b0001 	.word	0x000b0001
   103d4:	000a0002 	.word	0x000a0002
   103d8:	00090005 	.word	0x00090005
   103dc:	0008000a 	.word	0x0008000a
   103e0:	00070014 	.word	0x00070014
   103e4:	0006001e 	.word	0x0006001e
   103e8:	00050032 	.word	0x00050032
   103ec:	0004004b 	.word	0x0004004b
   103f0:	00030064 	.word	0x00030064
   103f4:	00020096 	.word	0x00020096
   103f8:	000100fa 	.word	0x000100fa
   103fc:	000001f4 	.word	0x000001f4

00010400 <sym_5UID3SBXLTGQYGRFXVINZNLWHB7EKFT76O275JI>:
   10400:	b510      	push	{r4, lr}
   10402:	6844      	ldr	r4, [r0, #4]
   10404:	7803      	ldrb	r3, [r0, #0]
   10406:	2100      	movs	r1, #0
   10408:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
   1040c:	3480      	adds	r4, #128	; 0x80
   1040e:	4620      	mov	r0, r4
   10410:	f7fd fa9a 	bl	d948 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   10414:	b110      	cbz	r0, 1041c <sym_5UID3SBXLTGQYGRFXVINZNLWHB7EKFT76O275JI+0x1c>
   10416:	2020      	movs	r0, #32
   10418:	7760      	strb	r0, [r4, #29]
   1041a:	bd10      	pop	{r4, pc}
   1041c:	2180      	movs	r1, #128	; 0x80
   1041e:	207e      	movs	r0, #126	; 0x7e
   10420:	f7f0 fac6 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010424 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA>:
   10424:	2200      	movs	r2, #0
   10426:	704a      	strb	r2, [r1, #1]
   10428:	2214      	movs	r2, #20
   1042a:	700a      	strb	r2, [r1, #0]
   1042c:	f8d0 200a 	ldr.w	r2, [r0, #10]
   10430:	604a      	str	r2, [r1, #4]
   10432:	89c0      	ldrh	r0, [r0, #14]
   10434:	8108      	strh	r0, [r1, #8]
   10436:	4770      	bx	lr
   10438:	b510      	push	{r4, lr}
   1043a:	2801      	cmp	r0, #1
   1043c:	d006      	beq.n	1044c <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x28>
   1043e:	2802      	cmp	r0, #2
   10440:	d004      	beq.n	1044c <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x28>
   10442:	f240 21d7 	movw	r1, #727	; 0x2d7
   10446:	2006      	movs	r0, #6
   10448:	f7f0 fab2 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1044c:	bd10      	pop	{r4, pc}

0001044e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   1044e:	b510      	push	{r4, lr}
   10450:	f7f7 fbfa 	bl	7c48 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   10454:	f000 f81d 	bl	10492 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   10458:	f7f7 f8d6 	bl	7608 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   1045c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10460:	f7f7 b9d0 	b.w	7804 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00010464 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   10464:	b510      	push	{r4, lr}
   10466:	24c8      	movs	r4, #200	; 0xc8
   10468:	1e64      	subs	r4, r4, #1
   1046a:	b2e4      	uxtb	r4, r4
   1046c:	f7f7 f8ea 	bl	7644 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   10470:	2802      	cmp	r0, #2
   10472:	d003      	beq.n	1047c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   10474:	2801      	cmp	r0, #1
   10476:	d000      	beq.n	1047a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   10478:	2000      	movs	r0, #0
   1047a:	bd10      	pop	{r4, pc}
   1047c:	2c00      	cmp	r4, #0
   1047e:	d1f3      	bne.n	10468 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   10480:	21ed      	movs	r1, #237	; 0xed
   10482:	203b      	movs	r0, #59	; 0x3b
   10484:	f7f0 fa94 	bl	9b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10488:	5840      	ldr	r0, [r0, r1]
   1048a:	2800      	cmp	r0, #0
   1048c:	d000      	beq.n	10490 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   1048e:	2001      	movs	r0, #1
   10490:	4770      	bx	lr

00010492 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   10492:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10496:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1049a:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   1049e:	f3bf 8f4f 	dsb	sy
   104a2:	f3bf 8f6f 	isb	sy
   104a6:	f7f7 ba47 	b.w	7938 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   104aa:	2800      	cmp	r0, #0
   104ac:	db09      	blt.n	104c2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   104ae:	f000 021f 	and.w	r2, r0, #31
   104b2:	2101      	movs	r1, #1
   104b4:	4091      	lsls	r1, r2
   104b6:	0940      	lsrs	r0, r0, #5
   104b8:	0080      	lsls	r0, r0, #2
   104ba:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   104be:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   104c2:	4770      	bx	lr
   104c4:	2800      	cmp	r0, #0
   104c6:	db0d      	blt.n	104e4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   104c8:	f000 021f 	and.w	r2, r0, #31
   104cc:	2101      	movs	r1, #1
   104ce:	4091      	lsls	r1, r2
   104d0:	0940      	lsrs	r0, r0, #5
   104d2:	0080      	lsls	r0, r0, #2
   104d4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   104d8:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   104dc:	f3bf 8f4f 	dsb	sy
   104e0:	f3bf 8f6f 	isb	sy
   104e4:	4770      	bx	lr
   104e6:	5840      	ldr	r0, [r0, r1]
   104e8:	2800      	cmp	r0, #0
   104ea:	d000      	beq.n	104ee <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   104ec:	2001      	movs	r0, #1
   104ee:	4770      	bx	lr
   104f0:	5840      	ldr	r0, [r0, r1]
   104f2:	2800      	cmp	r0, #0
   104f4:	d000      	beq.n	104f8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   104f6:	2001      	movs	r0, #1
   104f8:	4770      	bx	lr

000104fa <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   104fa:	b510      	push	{r4, lr}
   104fc:	4604      	mov	r4, r0
   104fe:	4608      	mov	r0, r1
   10500:	f7f7 fcce 	bl	7ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10504:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10508:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   1050c:	fbb0 f0f1 	udiv	r0, r0, r1
   10510:	1a20      	subs	r0, r4, r0
   10512:	1e80      	subs	r0, r0, #2
   10514:	bd10      	pop	{r4, pc}

00010516 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   10516:	b510      	push	{r4, lr}
   10518:	4604      	mov	r4, r0
   1051a:	4608      	mov	r0, r1
   1051c:	f7f7 fcc0 	bl	7ea0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10520:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10524:	fbb0 f0f1 	udiv	r0, r0, r1
   10528:	1a20      	subs	r0, r4, r0
   1052a:	bd10      	pop	{r4, pc}
   1052c:	2804      	cmp	r0, #4
   1052e:	d202      	bcs.n	10536 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
   10530:	f04f 0028 	mov.w	r0, #40	; 0x28
   10534:	4770      	bx	lr
   10536:	d102      	bne.n	1053e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
   10538:	f04f 0010 	mov.w	r0, #16
   1053c:	4770      	bx	lr
   1053e:	f04f 0000 	mov.w	r0, #0
   10542:	4770      	bx	lr
   10544:	2100      	movs	r1, #0
   10546:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   1054a:	f800 1f24 	strb.w	r1, [r0, #36]!
   1054e:	7041      	strb	r1, [r0, #1]
   10550:	4770      	bx	lr

00010552 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   10552:	b570      	push	{r4, r5, r6, lr}
   10554:	f7f8 fa04 	bl	8960 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   10558:	4605      	mov	r5, r0
   1055a:	2400      	movs	r4, #0
   1055c:	e006      	b.n	1056c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   1055e:	4620      	mov	r0, r4
   10560:	f7f8 fa04 	bl	896c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10564:	f7ff ffee 	bl	10544 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
   10568:	1c64      	adds	r4, r4, #1
   1056a:	b2e4      	uxtb	r4, r4
   1056c:	42ac      	cmp	r4, r5
   1056e:	d3f6      	bcc.n	1055e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   10570:	bd70      	pop	{r4, r5, r6, pc}

00010572 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
   10572:	f7fa be65 	b.w	b240 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

00010576 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
   10576:	b510      	push	{r4, lr}
   10578:	2000      	movs	r0, #0
   1057a:	f7fb f9bd 	bl	b8f8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
   1057e:	6800      	ldr	r0, [r0, #0]
   10580:	2800      	cmp	r0, #0
   10582:	bf18      	it	ne
   10584:	2001      	movne	r0, #1
   10586:	bd10      	pop	{r4, pc}

00010588 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
   10588:	b510      	push	{r4, lr}
   1058a:	f7fb fa2d 	bl	b9e8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
   1058e:	f7fa fd11 	bl	afb4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   10592:	f000 f804 	bl	1059e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   10596:	b280      	uxth	r0, r0
   10598:	bd10      	pop	{r4, pc}

0001059a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
   1059a:	f7fb b987 	b.w	b8ac <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>

0001059e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   1059e:	0a41      	lsrs	r1, r0, #9
   105a0:	f643 5209 	movw	r2, #15625	; 0x3d09
   105a4:	4351      	muls	r1, r2
   105a6:	f3c0 0008 	ubfx	r0, r0, #0, #9
   105aa:	fb10 f002 	smulbb	r0, r0, r2
   105ae:	f500 7080 	add.w	r0, r0, #256	; 0x100
   105b2:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   105b6:	4770      	bx	lr
   105b8:	2800      	cmp	r0, #0
   105ba:	db09      	blt.n	105d0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
   105bc:	f000 021f 	and.w	r2, r0, #31
   105c0:	2101      	movs	r1, #1
   105c2:	4091      	lsls	r1, r2
   105c4:	0940      	lsrs	r0, r0, #5
   105c6:	0080      	lsls	r0, r0, #2
   105c8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   105cc:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   105d0:	4770      	bx	lr
   105d2:	2800      	cmp	r0, #0
   105d4:	db0d      	blt.n	105f2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
   105d6:	f000 021f 	and.w	r2, r0, #31
   105da:	2101      	movs	r1, #1
   105dc:	4091      	lsls	r1, r2
   105de:	0940      	lsrs	r0, r0, #5
   105e0:	0080      	lsls	r0, r0, #2
   105e2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   105e6:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   105ea:	f3bf 8f4f 	dsb	sy
   105ee:	f3bf 8f6f 	isb	sy
   105f2:	4770      	bx	lr
   105f4:	5840      	ldr	r0, [r0, r1]
   105f6:	2800      	cmp	r0, #0
   105f8:	d000      	beq.n	105fc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
   105fa:	2001      	movs	r0, #1
   105fc:	4770      	bx	lr
   105fe:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   10602:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   10606:	f002 0201 	and.w	r2, r2, #1
   1060a:	03c0      	lsls	r0, r0, #15
   1060c:	d503      	bpl.n	10616 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   1060e:	428a      	cmp	r2, r1
   10610:	d101      	bne.n	10616 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   10612:	2001      	movs	r0, #1
   10614:	4770      	bx	lr
   10616:	2000      	movs	r0, #0
   10618:	4770      	bx	lr

0001061a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   1061a:	b510      	push	{r4, lr}
   1061c:	2101      	movs	r1, #1
   1061e:	0788      	lsls	r0, r1, #30
   10620:	f7fb fd22 	bl	c068 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   10624:	2800      	cmp	r0, #0
   10626:	d000      	beq.n	1062a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   10628:	2001      	movs	r0, #1
   1062a:	bd10      	pop	{r4, pc}

0001062c <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   1062c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10630:	2101      	movs	r1, #1
   10632:	6001      	str	r1, [r0, #0]
   10634:	4770      	bx	lr

00010636 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   10636:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1063a:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   1063e:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   10642:	f002 0203 	and.w	r2, r2, #3
   10646:	03c9      	lsls	r1, r1, #15
   10648:	d503      	bpl.n	10652 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   1064a:	4282      	cmp	r2, r0
   1064c:	d101      	bne.n	10652 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   1064e:	2001      	movs	r0, #1
   10650:	4770      	bx	lr
   10652:	2000      	movs	r0, #0
   10654:	4770      	bx	lr

00010656 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   10656:	b510      	push	{r4, lr}
   10658:	2100      	movs	r1, #0
   1065a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   1065e:	f7fb fd03 	bl	c068 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   10662:	2800      	cmp	r0, #0
   10664:	d000      	beq.n	10668 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   10666:	2001      	movs	r0, #1
   10668:	bd10      	pop	{r4, pc}
   1066a:	2800      	cmp	r0, #0
   1066c:	db09      	blt.n	10682 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   1066e:	f000 021f 	and.w	r2, r0, #31
   10672:	2101      	movs	r1, #1
   10674:	4091      	lsls	r1, r2
   10676:	0940      	lsrs	r0, r0, #5
   10678:	0080      	lsls	r0, r0, #2
   1067a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1067e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10682:	4770      	bx	lr
   10684:	2800      	cmp	r0, #0
   10686:	db0d      	blt.n	106a4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   10688:	f000 021f 	and.w	r2, r0, #31
   1068c:	2101      	movs	r1, #1
   1068e:	4091      	lsls	r1, r2
   10690:	0940      	lsrs	r0, r0, #5
   10692:	0080      	lsls	r0, r0, #2
   10694:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10698:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   1069c:	f3bf 8f4f 	dsb	sy
   106a0:	f3bf 8f6f 	isb	sy
   106a4:	4770      	bx	lr
   106a6:	1000      	.short	0x1000
   106a8:	00fa0002 	.word	0x00fa0002
   106ac:	e8ff0000 	.word	0xe8ff0000
   106b0:	95775fae 	.word	0x95775fae
   106b4:	6227c87c 	.word	0x6227c87c
   106b8:	eae61814 	.word	0xeae61814
   106bc:	3992c65d 	.word	0x3992c65d
   106c0:	3a72      	.short	0x3a72
   106c2:	2800      	cmp	r0, #0
   106c4:	db09      	blt.n	106da <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   106c6:	f000 021f 	and.w	r2, r0, #31
   106ca:	2101      	movs	r1, #1
   106cc:	4091      	lsls	r1, r2
   106ce:	0940      	lsrs	r0, r0, #5
   106d0:	0080      	lsls	r0, r0, #2
   106d2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   106d6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   106da:	4770      	bx	lr

000106dc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   106dc:	f3ef 8110 	mrs	r1, PRIMASK
   106e0:	b672      	cpsid	i
   106e2:	7802      	ldrb	r2, [r0, #0]
   106e4:	2a01      	cmp	r2, #1
   106e6:	d001      	beq.n	106ec <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   106e8:	2201      	movs	r2, #1
   106ea:	e000      	b.n	106ee <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   106ec:	2200      	movs	r2, #0
   106ee:	2301      	movs	r3, #1
   106f0:	7003      	strb	r3, [r0, #0]
   106f2:	b901      	cbnz	r1, 106f6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   106f4:	b662      	cpsie	i
   106f6:	b10a      	cbz	r2, 106fc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   106f8:	2000      	movs	r0, #0
   106fa:	4770      	bx	lr
   106fc:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10700:	4770      	bx	lr

00010702 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   10702:	2100      	movs	r1, #0
   10704:	7001      	strb	r1, [r0, #0]
   10706:	4608      	mov	r0, r1
   10708:	4770      	bx	lr

0001070a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   1070a:	f3ef 8110 	mrs	r1, PRIMASK
   1070e:	b672      	cpsid	i
   10710:	2200      	movs	r2, #0
   10712:	7002      	strb	r2, [r0, #0]
   10714:	b901      	cbnz	r1, 10718 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   10716:	b662      	cpsie	i
   10718:	2000      	movs	r0, #0
   1071a:	4770      	bx	lr

0001071c <mpsl_low_priority_process>:
   1071c:	f7fb bdf8 	b.w	c310 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00010720 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   10720:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10724:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10728:	280f      	cmp	r0, #15
   1072a:	d001      	beq.n	10730 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   1072c:	2000      	movs	r0, #0
   1072e:	4770      	bx	lr
   10730:	2001      	movs	r0, #1
   10732:	4770      	bx	lr

00010734 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   10734:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10738:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   1073c:	280a      	cmp	r0, #10
   1073e:	d001      	beq.n	10744 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   10740:	2000      	movs	r0, #0
   10742:	4770      	bx	lr
   10744:	2001      	movs	r0, #1
   10746:	4770      	bx	lr

00010748 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   10748:	b500      	push	{lr}
   1074a:	f7ff fff3 	bl	10734 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   1074e:	b120      	cbz	r0, 1075a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   10750:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10754:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10758:	b108      	cbz	r0, 1075e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   1075a:	2000      	movs	r0, #0
   1075c:	bd00      	pop	{pc}
   1075e:	2001      	movs	r0, #1
   10760:	bd00      	pop	{pc}

00010762 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   10762:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10766:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   1076a:	280e      	cmp	r0, #14
   1076c:	d001      	beq.n	10772 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   1076e:	2000      	movs	r0, #0
   10770:	4770      	bx	lr
   10772:	2001      	movs	r0, #1
   10774:	4770      	bx	lr

00010776 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   10776:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1077a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   1077e:	2810      	cmp	r0, #16
   10780:	d001      	beq.n	10786 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   10782:	2000      	movs	r0, #0
   10784:	4770      	bx	lr
   10786:	2001      	movs	r0, #1
   10788:	4770      	bx	lr

0001078a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   1078a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   1078e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10792:	2806      	cmp	r0, #6
   10794:	d003      	beq.n	1079e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10796:	1c40      	adds	r0, r0, #1
   10798:	d001      	beq.n	1079e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   1079a:	2000      	movs	r0, #0
   1079c:	4770      	bx	lr
   1079e:	2001      	movs	r0, #1
   107a0:	4770      	bx	lr

000107a2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   107a2:	b500      	push	{lr}
   107a4:	f7ff fff1 	bl	1078a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   107a8:	b148      	cbz	r0, 107be <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   107aa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   107ae:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   107b2:	2806      	cmp	r0, #6
   107b4:	d303      	bcc.n	107be <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   107b6:	1c40      	adds	r0, r0, #1
   107b8:	d001      	beq.n	107be <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   107ba:	2001      	movs	r0, #1
   107bc:	bd00      	pop	{pc}
   107be:	2000      	movs	r0, #0
   107c0:	bd00      	pop	{pc}

000107c2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   107c2:	b500      	push	{lr}
   107c4:	f7ff ffe1 	bl	1078a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   107c8:	b138      	cbz	r0, 107da <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   107ca:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   107ce:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   107d2:	2806      	cmp	r0, #6
   107d4:	d303      	bcc.n	107de <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   107d6:	1c40      	adds	r0, r0, #1
   107d8:	d001      	beq.n	107de <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   107da:	2000      	movs	r0, #0
   107dc:	bd00      	pop	{pc}
   107de:	2001      	movs	r0, #1
   107e0:	bd00      	pop	{pc}

000107e2 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   107e2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   107e6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   107ea:	280d      	cmp	r0, #13
   107ec:	d001      	beq.n	107f2 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   107ee:	2000      	movs	r0, #0
   107f0:	4770      	bx	lr
   107f2:	2001      	movs	r0, #1
   107f4:	4770      	bx	lr

000107f6 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   107f6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   107fa:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   107fe:	2808      	cmp	r0, #8
   10800:	d001      	beq.n	10806 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   10802:	2000      	movs	r0, #0
   10804:	4770      	bx	lr
   10806:	2001      	movs	r0, #1
   10808:	4770      	bx	lr

0001080a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   1080a:	f7fb bdbb 	b.w	c384 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

0001080e <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
   1080e:	f7fb bdb9 	b.w	c384 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00010812 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
   10812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10816:	428a      	cmp	r2, r1
   10818:	d803      	bhi.n	10822 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
   1081a:	2179      	movs	r1, #121	; 0x79
   1081c:	2096      	movs	r0, #150	; 0x96
   1081e:	f7fb fc79 	bl	c114 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10822:	fab2 f382 	clz	r3, r2
   10826:	b143      	cbz	r3, 1083a <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x28>
   10828:	4099      	lsls	r1, r3
   1082a:	f1c3 0c20 	rsb	ip, r3, #32
   1082e:	fa20 fc0c 	lsr.w	ip, r0, ip
   10832:	4098      	lsls	r0, r3
   10834:	ea41 010c 	orr.w	r1, r1, ip
   10838:	409a      	lsls	r2, r3
   1083a:	0c13      	lsrs	r3, r2, #16
   1083c:	fbb1 f5f3 	udiv	r5, r1, r3
   10840:	ea4f 4c10 	mov.w	ip, r0, lsr #16
   10844:	b287      	uxth	r7, r0
   10846:	fbb1 f0f3 	udiv	r0, r1, r3
   1084a:	fb03 1615 	mls	r6, r3, r5, r1
   1084e:	b294      	uxth	r4, r2
   10850:	fb00 f504 	mul.w	r5, r0, r4
   10854:	eb0c 4606 	add.w	r6, ip, r6, lsl #16
   10858:	42b5      	cmp	r5, r6
   1085a:	d905      	bls.n	10868 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
   1085c:	1bad      	subs	r5, r5, r6
   1085e:	4295      	cmp	r5, r2
   10860:	bf94      	ite	ls
   10862:	2501      	movls	r5, #1
   10864:	2502      	movhi	r5, #2
   10866:	1b40      	subs	r0, r0, r5
   10868:	0409      	lsls	r1, r1, #16
   1086a:	0405      	lsls	r5, r0, #16
   1086c:	eb11 010c 	adds.w	r1, r1, ip
   10870:	fba0 0c02 	umull	r0, ip, r0, r2
   10874:	1a09      	subs	r1, r1, r0
   10876:	fbb1 f0f3 	udiv	r0, r1, r3
   1087a:	fbb1 fcf3 	udiv	ip, r1, r3
   1087e:	fb03 131c 	mls	r3, r3, ip, r1
   10882:	fb00 f104 	mul.w	r1, r0, r4
   10886:	eb07 4303 	add.w	r3, r7, r3, lsl #16
   1088a:	4299      	cmp	r1, r3
   1088c:	d905      	bls.n	1089a <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
   1088e:	1ac9      	subs	r1, r1, r3
   10890:	4291      	cmp	r1, r2
   10892:	bf94      	ite	ls
   10894:	2101      	movls	r1, #1
   10896:	2102      	movhi	r1, #2
   10898:	1a40      	subs	r0, r0, r1
   1089a:	4328      	orrs	r0, r5
   1089c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000108a0 <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>:
   108a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   108a4:	461e      	mov	r6, r3
   108a6:	4615      	mov	r5, r2
   108a8:	4604      	mov	r4, r0
   108aa:	9f06      	ldr	r7, [sp, #24]
   108ac:	f7ff ffb1 	bl	10812 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
   108b0:	6030      	str	r0, [r6, #0]
   108b2:	fba0 0105 	umull	r0, r1, r0, r5
   108b6:	1a20      	subs	r0, r4, r0
   108b8:	6038      	str	r0, [r7, #0]
   108ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000108be <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   108be:	b4f0      	push	{r4, r5, r6, r7}
   108c0:	ea80 0c01 	eor.w	ip, r0, r1
   108c4:	4603      	mov	r3, r0
   108c6:	f01c 0f03 	tst.w	ip, #3
   108ca:	d13c      	bne.n	10946 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   108cc:	f013 0f03 	tst.w	r3, #3
   108d0:	d00b      	beq.n	108ea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   108d2:	2a00      	cmp	r2, #0
   108d4:	bf04      	itt	eq
   108d6:	bcf0      	popeq	{r4, r5, r6, r7}
   108d8:	4770      	bxeq	lr
   108da:	f811 cb01 	ldrb.w	ip, [r1], #1
   108de:	f803 cb01 	strb.w	ip, [r3], #1
   108e2:	1e52      	subs	r2, r2, #1
   108e4:	f013 0f03 	tst.w	r3, #3
   108e8:	d1f3      	bne.n	108d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   108ea:	2a03      	cmp	r2, #3
   108ec:	d94f      	bls.n	1098e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   108ee:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   108f2:	d24c      	bcs.n	1098e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   108f4:	f1c2 0c00 	rsb	ip, r2, #0
   108f8:	ea4f 74ec 	mov.w	r4, ip, asr #31
   108fc:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   10900:	ea4f 0cac 	mov.w	ip, ip, asr #2
   10904:	f1cc 0c00 	rsb	ip, ip, #0
   10908:	f1bc 0f00 	cmp.w	ip, #0
   1090c:	dd1b      	ble.n	10946 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   1090e:	1f0d      	subs	r5, r1, #4
   10910:	1f1c      	subs	r4, r3, #4
   10912:	f01c 0f01 	tst.w	ip, #1
   10916:	d003      	beq.n	10920 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   10918:	f855 6f04 	ldr.w	r6, [r5, #4]!
   1091c:	f844 6f04 	str.w	r6, [r4, #4]!
   10920:	ea5f 066c 	movs.w	r6, ip, asr #1
   10924:	d007      	beq.n	10936 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   10926:	686f      	ldr	r7, [r5, #4]
   10928:	6067      	str	r7, [r4, #4]
   1092a:	f855 7f08 	ldr.w	r7, [r5, #8]!
   1092e:	f844 7f08 	str.w	r7, [r4, #8]!
   10932:	1e76      	subs	r6, r6, #1
   10934:	d1f7      	bne.n	10926 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   10936:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   1093a:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   1093e:	f1cc 0c00 	rsb	ip, ip, #0
   10942:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   10946:	2a00      	cmp	r2, #0
   10948:	bf04      	itt	eq
   1094a:	bcf0      	popeq	{r4, r5, r6, r7}
   1094c:	4770      	bxeq	lr
   1094e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10952:	d226      	bcs.n	109a2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10954:	2a00      	cmp	r2, #0
   10956:	bfdc      	itt	le
   10958:	bcf0      	pople	{r4, r5, r6, r7}
   1095a:	4770      	bxle	lr
   1095c:	1e49      	subs	r1, r1, #1
   1095e:	1e5b      	subs	r3, r3, #1
   10960:	f012 0f01 	tst.w	r2, #1
   10964:	d003      	beq.n	1096e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   10966:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   1096a:	f803 cf01 	strb.w	ip, [r3, #1]!
   1096e:	1052      	asrs	r2, r2, #1
   10970:	bf04      	itt	eq
   10972:	bcf0      	popeq	{r4, r5, r6, r7}
   10974:	4770      	bxeq	lr
   10976:	f891 c001 	ldrb.w	ip, [r1, #1]
   1097a:	f883 c001 	strb.w	ip, [r3, #1]
   1097e:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   10982:	f803 cf02 	strb.w	ip, [r3, #2]!
   10986:	1e52      	subs	r2, r2, #1
   10988:	d1f5      	bne.n	10976 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   1098a:	bcf0      	pop	{r4, r5, r6, r7}
   1098c:	4770      	bx	lr
   1098e:	2a04      	cmp	r2, #4
   10990:	d3d9      	bcc.n	10946 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10992:	f851 cb04 	ldr.w	ip, [r1], #4
   10996:	1f12      	subs	r2, r2, #4
   10998:	f843 cb04 	str.w	ip, [r3], #4
   1099c:	2a04      	cmp	r2, #4
   1099e:	d2f8      	bcs.n	10992 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   109a0:	e7d1      	b.n	10946 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   109a2:	f811 cb01 	ldrb.w	ip, [r1], #1
   109a6:	f803 cb01 	strb.w	ip, [r3], #1
   109aa:	1e52      	subs	r2, r2, #1
   109ac:	d1f9      	bne.n	109a2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   109ae:	bcf0      	pop	{r4, r5, r6, r7}
   109b0:	4770      	bx	lr

000109b2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   109b2:	b470      	push	{r4, r5, r6}
   109b4:	4603      	mov	r3, r0
   109b6:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   109ba:	f010 0f03 	tst.w	r0, #3
   109be:	d009      	beq.n	109d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   109c0:	2a00      	cmp	r2, #0
   109c2:	bf04      	itt	eq
   109c4:	bc70      	popeq	{r4, r5, r6}
   109c6:	4770      	bxeq	lr
   109c8:	f803 cb01 	strb.w	ip, [r3], #1
   109cc:	1e52      	subs	r2, r2, #1
   109ce:	f013 0f03 	tst.w	r3, #3
   109d2:	d1f5      	bne.n	109c0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   109d4:	b2c9      	uxtb	r1, r1
   109d6:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   109da:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   109de:	2a03      	cmp	r2, #3
   109e0:	d939      	bls.n	10a56 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   109e2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   109e6:	d236      	bcs.n	10a56 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   109e8:	4251      	negs	r1, r2
   109ea:	17cc      	asrs	r4, r1, #31
   109ec:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   109f0:	1089      	asrs	r1, r1, #2
   109f2:	424e      	negs	r6, r1
   109f4:	2e00      	cmp	r6, #0
   109f6:	dd11      	ble.n	10a1c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   109f8:	1f19      	subs	r1, r3, #4
   109fa:	f016 0f01 	tst.w	r6, #1
   109fe:	bf18      	it	ne
   10a00:	f841 5f04 	strne.w	r5, [r1, #4]!
   10a04:	1074      	asrs	r4, r6, #1
   10a06:	d004      	beq.n	10a12 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   10a08:	604d      	str	r5, [r1, #4]
   10a0a:	f841 5f08 	str.w	r5, [r1, #8]!
   10a0e:	1e64      	subs	r4, r4, #1
   10a10:	d1fa      	bne.n	10a08 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   10a12:	4271      	negs	r1, r6
   10a14:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   10a18:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   10a1c:	2a00      	cmp	r2, #0
   10a1e:	bf04      	itt	eq
   10a20:	bc70      	popeq	{r4, r5, r6}
   10a22:	4770      	bxeq	lr
   10a24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10a28:	d21d      	bcs.n	10a66 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   10a2a:	2a00      	cmp	r2, #0
   10a2c:	bfdc      	itt	le
   10a2e:	bc70      	pople	{r4, r5, r6}
   10a30:	4770      	bxle	lr
   10a32:	1e59      	subs	r1, r3, #1
   10a34:	f012 0f01 	tst.w	r2, #1
   10a38:	bf18      	it	ne
   10a3a:	f801 cf01 	strbne.w	ip, [r1, #1]!
   10a3e:	1052      	asrs	r2, r2, #1
   10a40:	bf04      	itt	eq
   10a42:	bc70      	popeq	{r4, r5, r6}
   10a44:	4770      	bxeq	lr
   10a46:	f881 c001 	strb.w	ip, [r1, #1]
   10a4a:	f801 cf02 	strb.w	ip, [r1, #2]!
   10a4e:	1e52      	subs	r2, r2, #1
   10a50:	d1f9      	bne.n	10a46 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   10a52:	bc70      	pop	{r4, r5, r6}
   10a54:	4770      	bx	lr
   10a56:	2a04      	cmp	r2, #4
   10a58:	d3e0      	bcc.n	10a1c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10a5a:	1f12      	subs	r2, r2, #4
   10a5c:	f843 5b04 	str.w	r5, [r3], #4
   10a60:	2a04      	cmp	r2, #4
   10a62:	d2fa      	bcs.n	10a5a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   10a64:	e7da      	b.n	10a1c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10a66:	f803 cb01 	strb.w	ip, [r3], #1
   10a6a:	1e52      	subs	r2, r2, #1
   10a6c:	d1fb      	bne.n	10a66 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   10a6e:	bc70      	pop	{r4, r5, r6}
   10a70:	4770      	bx	lr
   10a72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a76:	4770      	bx	lr
   10a78:	2000      	movs	r0, #0
   10a7a:	4770      	bx	lr
   10a7c:	2000      	movs	r0, #0
   10a7e:	4770      	bx	lr
   10a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a84:	4770      	bx	lr
   10a86:	4770      	bx	lr
   10a88:	4770      	bx	lr
   10a8a:	2000      	movs	r0, #0
   10a8c:	4770      	bx	lr
   10a8e:	2100      	movs	r1, #0
   10a90:	7001      	strb	r1, [r0, #0]
   10a92:	4770      	bx	lr
   10a94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a98:	4770      	bx	lr
   10a9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a9e:	4770      	bx	lr
   10aa0:	2100      	movs	r1, #0
   10aa2:	7001      	strb	r1, [r0, #0]
   10aa4:	4770      	bx	lr
   10aa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10aaa:	4770      	bx	lr
   10aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10ab0:	4770      	bx	lr
   10ab2:	7800      	ldrb	r0, [r0, #0]
   10ab4:	2800      	cmp	r0, #0
   10ab6:	d001      	beq.n	10abc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
   10ab8:	f06f 0015 	mvn.w	r0, #21
   10abc:	4770      	bx	lr
   10abe:	2000      	movs	r0, #0
   10ac0:	4770      	bx	lr
   10ac2:	2200      	movs	r2, #0
   10ac4:	f000 b802 	b.w	10acc <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

00010ac8 <mpsl_fem_init>:
   10ac8:	f7f7 beb8 	b.w	883c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

00010acc <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
   10acc:	b570      	push	{r4, r5, r6, lr}
   10ace:	4614      	mov	r4, r2
   10ad0:	460d      	mov	r5, r1
   10ad2:	1b00      	subs	r0, r0, r4
   10ad4:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   10ad8:	4288      	cmp	r0, r1
   10ada:	da01      	bge.n	10ae0 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
   10adc:	4608      	mov	r0, r1
   10ade:	e002      	b.n	10ae6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   10ae0:	287f      	cmp	r0, #127	; 0x7f
   10ae2:	dd00      	ble.n	10ae6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   10ae4:	207f      	movs	r0, #127	; 0x7f
   10ae6:	4619      	mov	r1, r3
   10ae8:	b240      	sxtb	r0, r0
   10aea:	f7f7 fedb 	bl	88a4 <mpsl_tx_power_radio_supported_power_adjust>
   10aee:	7028      	strb	r0, [r5, #0]
   10af0:	706c      	strb	r4, [r5, #1]
   10af2:	2100      	movs	r1, #0
   10af4:	4420      	add	r0, r4
   10af6:	70a9      	strb	r1, [r5, #2]
   10af8:	b240      	sxtb	r0, r0
   10afa:	bd70      	pop	{r4, r5, r6, pc}
   10afc:	1702080c 	.word	0x1702080c
   10b00:	0201010d 	.word	0x0201010d
   10b04:	01010909 	.word	0x01010909
   10b08:	18090206 	.word	0x18090206
   10b0c:	01010318 	.word	0x01010318
   10b10:	03030909 	.word	0x03030909
   10b14:	01020305 	.word	0x01020305
   10b18:	24020223 	.word	0x24020223
   10b1c:	04041009 	.word	0x04041009
   10b20:	0b0b0505 	.word	0x0b0b0505
   10b24:	0b04      	.short	0x0b04
   10b26:	2b          	.byte	0x2b
   10b27:	d8          	.byte	0xd8
   10b28:	f8f4f0ec 	.word	0xf8f4f0ec
   10b2c:	030200fc 	.word	0x030200fc
   10b30:	07060504 	.word	0x07060504
   10b34:	00000008 	.word	0x00000008
	...
   10b48:	01010100 	.word	0x01010100
   10b4c:	02020201 	.word	0x02020201
   10b50:	03030302 	.word	0x03030302
   10b54:	04040403 	.word	0x04040403
   10b58:	05050504 	.word	0x05050504
   10b5c:	07060605 	.word	0x07060605
   10b60:	0b0a0908 	.word	0x0b0a0908
   10b64:	00000d0c 	.word	0x00000d0c
	...
   10b78:	01010000 	.word	0x01010000
   10b7c:	02020101 	.word	0x02020101
   10b80:	03030202 	.word	0x03030202
   10b84:	04040303 	.word	0x04040303
   10b88:	05050404 	.word	0x05050404
   10b8c:	06060505 	.word	0x06060505
   10b90:	00090806 	.word	0x00090806
   10b94:	00000000 	.word	0x00000000

00010b98 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   10b98:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   10b9a:	4d43      	ldr	r5, [pc, #268]	; (10ca8 <bt_init+0x110>)
{
   10b9c:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   10b9e:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   10ba2:	6899      	ldr	r1, [r3, #8]
   10ba4:	f011 0101 	ands.w	r1, r1, #1
{
   10ba8:	af00      	add	r7, sp, #0
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   10baa:	d122      	bne.n	10bf2 <bt_init+0x5a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   10bac:	f107 0208 	add.w	r2, r7, #8
   10bb0:	f640 4003 	movw	r0, #3075	; 0xc03
   10bb4:	f004 fa8e 	bl	150d4 <bt_hci_cmd_send_sync>
		if (err) {
   10bb8:	4604      	mov	r4, r0
   10bba:	2800      	cmp	r0, #0
   10bbc:	d170      	bne.n	10ca0 <bt_init+0x108>
		hci_reset_complete(rsp);
   10bbe:	68b8      	ldr	r0, [r7, #8]
	uint8_t status = buf->data[0];
   10bc0:	68c3      	ldr	r3, [r0, #12]
	if (status) {
   10bc2:	781b      	ldrb	r3, [r3, #0]
   10bc4:	b99b      	cbnz	r3, 10bee <bt_init+0x56>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10bc6:	f3bf 8f5b 	dmb	ish
   10bca:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
   10bce:	f3bf 8f5b 	dmb	ish
   10bd2:	f105 02d4 	add.w	r2, r5, #212	; 0xd4
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10bd6:	f003 0309 	and.w	r3, r3, #9
   10bda:	f3bf 8f5b 	dmb	ish
   10bde:	e852 1f00 	ldrex	r1, [r2]
   10be2:	e842 3400 	strex	r4, r3, [r2]
   10be6:	2c00      	cmp	r4, #0
   10be8:	d1f9      	bne.n	10bde <bt_init+0x46>
   10bea:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   10bee:	f00b f8eb 	bl	1bdc8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   10bf2:	f107 0208 	add.w	r2, r7, #8
   10bf6:	2100      	movs	r1, #0
   10bf8:	f241 0003 	movw	r0, #4099	; 0x1003
   10bfc:	f004 fa6a 	bl	150d4 <bt_hci_cmd_send_sync>
	if (err) {
   10c00:	4604      	mov	r4, r0
   10c02:	2800      	cmp	r0, #0
   10c04:	d14c      	bne.n	10ca0 <bt_init+0x108>
	read_local_features_complete(rsp);
   10c06:	68be      	ldr	r6, [r7, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   10c08:	4828      	ldr	r0, [pc, #160]	; (10cac <bt_init+0x114>)
   10c0a:	68f1      	ldr	r1, [r6, #12]
   10c0c:	2208      	movs	r2, #8
   10c0e:	3101      	adds	r1, #1
   10c10:	f013 fe9d 	bl	2494e <memcpy>
	net_buf_unref(rsp);
   10c14:	4630      	mov	r0, r6
   10c16:	f00b f8d7 	bl	1bdc8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   10c1a:	4621      	mov	r1, r4
   10c1c:	f107 0208 	add.w	r2, r7, #8
   10c20:	f241 0001 	movw	r0, #4097	; 0x1001
   10c24:	f004 fa56 	bl	150d4 <bt_hci_cmd_send_sync>
	if (err) {
   10c28:	4604      	mov	r4, r0
   10c2a:	2800      	cmp	r0, #0
   10c2c:	d138      	bne.n	10ca0 <bt_init+0x108>
	read_local_ver_complete(rsp);
   10c2e:	68b8      	ldr	r0, [r7, #8]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   10c30:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
   10c32:	785a      	ldrb	r2, [r3, #1]
   10c34:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   10c38:	885a      	ldrh	r2, [r3, #2]
   10c3a:	f8a5 2072 	strh.w	r2, [r5, #114]	; 0x72
	bt_dev.lmp_version = rp->lmp_version;
   10c3e:	791a      	ldrb	r2, [r3, #4]
   10c40:	f885 2071 	strb.w	r2, [r5, #113]	; 0x71
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   10c44:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   10c48:	f8a5 2074 	strh.w	r2, [r5, #116]	; 0x74
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   10c4c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   10c50:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
	net_buf_unref(rsp);
   10c54:	f00b f8b8 	bl	1bdc8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   10c58:	4621      	mov	r1, r4
   10c5a:	f107 0208 	add.w	r2, r7, #8
   10c5e:	f241 0002 	movw	r0, #4098	; 0x1002
   10c62:	f004 fa37 	bl	150d4 <bt_hci_cmd_send_sync>
	if (err) {
   10c66:	4604      	mov	r4, r0
   10c68:	b9d0      	cbnz	r0, 10ca0 <bt_init+0x108>
	read_supported_commands_complete(rsp);
   10c6a:	68be      	ldr	r6, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   10c6c:	4810      	ldr	r0, [pc, #64]	; (10cb0 <bt_init+0x118>)
   10c6e:	68f1      	ldr	r1, [r6, #12]
   10c70:	2240      	movs	r2, #64	; 0x40
   10c72:	3101      	adds	r1, #1
   10c74:	f013 fe6b 	bl	2494e <memcpy>
	net_buf_unref(rsp);
   10c78:	4630      	mov	r0, r6
   10c7a:	f00b f8a5 	bl	1bdc8 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   10c7e:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
   10c82:	065a      	lsls	r2, r3, #25
   10c84:	d41a      	bmi.n	10cbc <bt_init+0x124>
		LOG_ERR("Non-LE capable controller detected!");
   10c86:	4b0b      	ldr	r3, [pc, #44]	; (10cb4 <bt_init+0x11c>)
   10c88:	61fb      	str	r3, [r7, #28]
   10c8a:	2302      	movs	r3, #2
   10c8c:	480a      	ldr	r0, [pc, #40]	; (10cb8 <bt_init+0x120>)
   10c8e:	61bb      	str	r3, [r7, #24]
   10c90:	f107 0218 	add.w	r2, r7, #24
   10c94:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   10c98:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("Non-LE capable controller detected!");
   10c9c:	f013 ff4f 	bl	24b3e <z_log_msg_static_create.constprop.0>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   10ca0:	4620      	mov	r0, r4
   10ca2:	3724      	adds	r7, #36	; 0x24
   10ca4:	46bd      	mov	sp, r7
   10ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10ca8:	20000388 	.word	0x20000388
   10cac:	20000400 	.word	0x20000400
   10cb0:	20000408 	.word	0x20000408
   10cb4:	00029c02 	.word	0x00029c02
   10cb8:	00028174 	.word	0x00028174
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   10cbc:	4621      	mov	r1, r4
   10cbe:	f107 0208 	add.w	r2, r7, #8
   10cc2:	f242 0003 	movw	r0, #8195	; 0x2003
   10cc6:	f004 fa05 	bl	150d4 <bt_hci_cmd_send_sync>
	if (err) {
   10cca:	4604      	mov	r4, r0
   10ccc:	2800      	cmp	r0, #0
   10cce:	d1e7      	bne.n	10ca0 <bt_init+0x108>
	read_le_features_complete(rsp);
   10cd0:	68be      	ldr	r6, [r7, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   10cd2:	48a9      	ldr	r0, [pc, #676]	; (10f78 <bt_init+0x3e0>)
   10cd4:	68f1      	ldr	r1, [r6, #12]
   10cd6:	2208      	movs	r2, #8
   10cd8:	3101      	adds	r1, #1
   10cda:	f013 fe38 	bl	2494e <memcpy>
	net_buf_unref(rsp);
   10cde:	4630      	mov	r0, r6
   10ce0:	f00b f872 	bl	1bdc8 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   10ce4:	4621      	mov	r1, r4
   10ce6:	f107 0208 	add.w	r2, r7, #8
   10cea:	f242 0002 	movw	r0, #8194	; 0x2002
   10cee:	f004 f9f1 	bl	150d4 <bt_hci_cmd_send_sync>
		if (err) {
   10cf2:	4604      	mov	r4, r0
   10cf4:	2800      	cmp	r0, #0
   10cf6:	d1d3      	bne.n	10ca0 <bt_init+0x108>
		le_read_buffer_size_complete(rsp);
   10cf8:	68bc      	ldr	r4, [r7, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   10cfa:	68e3      	ldr	r3, [r4, #12]
	uint16_t acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   10cfc:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   10d00:	b291      	uxth	r1, r2
	if (!acl_mtu || !rp->le_max_num) {
   10d02:	b141      	cbz	r1, 10d16 <bt_init+0x17e>
   10d04:	78d9      	ldrb	r1, [r3, #3]
   10d06:	b131      	cbz	r1, 10d16 <bt_init+0x17e>
	bt_dev.le.acl_mtu = acl_mtu;
   10d08:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   10d0c:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   10d0e:	489b      	ldr	r0, [pc, #620]	; (10f7c <bt_init+0x3e4>)
   10d10:	4611      	mov	r1, r2
   10d12:	f016 fc4d 	bl	275b0 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   10d16:	4620      	mov	r0, r4
   10d18:	f00b f856 	bl	1bdc8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   10d1c:	f895 607c 	ldrb.w	r6, [r5, #124]	; 0x7c
   10d20:	f016 0620 	ands.w	r6, r6, #32
   10d24:	d118      	bne.n	10d58 <bt_init+0x1c0>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   10d26:	2102      	movs	r1, #2
   10d28:	f640 406d 	movw	r0, #3181	; 0xc6d
   10d2c:	f004 f998 	bl	15060 <bt_hci_cmd_create>
		if (!buf) {
   10d30:	4604      	mov	r4, r0
   10d32:	2800      	cmp	r0, #0
   10d34:	f000 80cc 	beq.w	10ed0 <bt_init+0x338>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   10d38:	2102      	movs	r1, #2
   10d3a:	300c      	adds	r0, #12
   10d3c:	f015 ff44 	bl	26bc8 <net_buf_simple_add>
		cp_le->le = 0x01;
   10d40:	2301      	movs	r3, #1
   10d42:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   10d44:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   10d46:	4621      	mov	r1, r4
   10d48:	4632      	mov	r2, r6
   10d4a:	f640 406d 	movw	r0, #3181	; 0xc6d
   10d4e:	f004 f9c1 	bl	150d4 <bt_hci_cmd_send_sync>
		if (err) {
   10d52:	4604      	mov	r4, r0
   10d54:	2800      	cmp	r0, #0
   10d56:	d1a3      	bne.n	10ca0 <bt_init+0x108>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   10d58:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
   10d5c:	071b      	lsls	r3, r3, #28
   10d5e:	d513      	bpl.n	10d88 <bt_init+0x1f0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   10d60:	f107 0208 	add.w	r2, r7, #8
   10d64:	2100      	movs	r1, #0
   10d66:	f242 001c 	movw	r0, #8220	; 0x201c
   10d6a:	f004 f9b3 	bl	150d4 <bt_hci_cmd_send_sync>
		if (err) {
   10d6e:	4604      	mov	r4, r0
   10d70:	2800      	cmp	r0, #0
   10d72:	d195      	bne.n	10ca0 <bt_init+0x108>
		le_read_supp_states_complete(rsp);
   10d74:	68b8      	ldr	r0, [r7, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   10d76:	68c3      	ldr	r3, [r0, #12]
   10d78:	f8d3 2001 	ldr.w	r2, [r3, #1]
   10d7c:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   10d80:	e9c5 2338 	strd	r2, r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
   10d84:	f00b f820 	bl	1bdc8 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   10d88:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   10d8c:	069e      	lsls	r6, r3, #26
   10d8e:	d521      	bpl.n	10dd4 <bt_init+0x23c>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   10d90:	1d39      	adds	r1, r7, #4
   10d92:	1cb8      	adds	r0, r7, #2
   10d94:	f004 fa1e 	bl	151d4 <hci_le_read_max_data_len>
		if (err) {
   10d98:	4604      	mov	r4, r0
   10d9a:	2800      	cmp	r0, #0
   10d9c:	d180      	bne.n	10ca0 <bt_init+0x108>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   10d9e:	2104      	movs	r1, #4
   10da0:	f242 0024 	movw	r0, #8228	; 0x2024
   10da4:	f004 f95c 	bl	15060 <bt_hci_cmd_create>
		if (!buf) {
   10da8:	4606      	mov	r6, r0
   10daa:	2800      	cmp	r0, #0
   10dac:	f000 8090 	beq.w	10ed0 <bt_init+0x338>
   10db0:	2104      	movs	r1, #4
   10db2:	300c      	adds	r0, #12
   10db4:	f015 ff08 	bl	26bc8 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   10db8:	887b      	ldrh	r3, [r7, #2]
   10dba:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   10dbc:	88bb      	ldrh	r3, [r7, #4]
   10dbe:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   10dc0:	4622      	mov	r2, r4
   10dc2:	4631      	mov	r1, r6
   10dc4:	f242 0024 	movw	r0, #8228	; 0x2024
   10dc8:	f004 f984 	bl	150d4 <bt_hci_cmd_send_sync>
		if (err) {
   10dcc:	4604      	mov	r4, r0
   10dce:	2800      	cmp	r0, #0
   10dd0:	f47f af66 	bne.w	10ca0 <bt_init+0x108>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   10dd4:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   10dd8:	065c      	lsls	r4, r3, #25
   10dda:	d511      	bpl.n	10e00 <bt_init+0x268>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   10ddc:	f107 0208 	add.w	r2, r7, #8
   10de0:	2100      	movs	r1, #0
   10de2:	f242 002a 	movw	r0, #8234	; 0x202a
   10de6:	f004 f975 	bl	150d4 <bt_hci_cmd_send_sync>
		if (err) {
   10dea:	4604      	mov	r4, r0
   10dec:	2800      	cmp	r0, #0
   10dee:	f47f af57 	bne.w	10ca0 <bt_init+0x108>
		le_read_resolving_list_size_complete(rsp);
   10df2:	68b8      	ldr	r0, [r7, #8]
	bt_dev.le.rl_size = rp->rl_size;
   10df4:	68c3      	ldr	r3, [r0, #12]
   10df6:	785b      	ldrb	r3, [r3, #1]
   10df8:	f885 3120 	strb.w	r3, [r5, #288]	; 0x120
		net_buf_unref(rsp);
   10dfc:	f00a ffe4 	bl	1bdc8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   10e00:	2108      	movs	r1, #8
   10e02:	f242 0001 	movw	r0, #8193	; 0x2001
   10e06:	f004 f92b 	bl	15060 <bt_hci_cmd_create>
	if (!buf) {
   10e0a:	4604      	mov	r4, r0
   10e0c:	2800      	cmp	r0, #0
   10e0e:	d05f      	beq.n	10ed0 <bt_init+0x338>
   10e10:	2108      	movs	r1, #8
   10e12:	300c      	adds	r0, #12
   10e14:	f015 fed8 	bl	26bc8 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   10e18:	f895 10d8 	ldrb.w	r1, [r5, #216]	; 0xd8
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   10e1c:	f011 0f40 	tst.w	r1, #64	; 0x40
   10e20:	4602      	mov	r2, r0
   10e22:	f240 2302 	movw	r3, #514	; 0x202
   10e26:	bf08      	it	eq
   10e28:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   10e2a:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   10e2c:	bf4c      	ite	mi
   10e2e:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   10e32:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   10e36:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   10e38:	f895 30d9 	ldrb.w	r3, [r5, #217]	; 0xd9
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   10e3c:	bf48      	it	mi
   10e3e:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   10e42:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   10e46:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   10e4a:	bf18      	it	ne
   10e4c:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   10e50:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   10e54:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   10e56:	bf48      	it	mi
   10e58:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   10e5c:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   10e5e:	bf08      	it	eq
   10e60:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   10e64:	2100      	movs	r1, #0
   10e66:	f013 fe79 	bl	24b5c <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   10e6a:	4621      	mov	r1, r4
   10e6c:	2200      	movs	r2, #0
   10e6e:	f242 0001 	movw	r0, #8193	; 0x2001
   10e72:	f004 f92f 	bl	150d4 <bt_hci_cmd_send_sync>
	if (err) {
   10e76:	4604      	mov	r4, r0
   10e78:	2800      	cmp	r0, #0
   10e7a:	f47f af11 	bne.w	10ca0 <bt_init+0x108>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   10e7e:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
	if (bt_dev.le.acl_mtu) {
   10e82:	f8b5 1104 	ldrh.w	r1, [r5, #260]	; 0x104
	if (BT_FEAT_BREDR(bt_dev.features)) {
   10e86:	0698      	lsls	r0, r3, #26
   10e88:	d425      	bmi.n	10ed6 <bt_init+0x33e>
	if (bt_dev.le.acl_mtu) {
   10e8a:	b9d1      	cbnz	r1, 10ec2 <bt_init+0x32a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   10e8c:	f107 0208 	add.w	r2, r7, #8
   10e90:	f241 0005 	movw	r0, #4101	; 0x1005
   10e94:	f004 f91e 	bl	150d4 <bt_hci_cmd_send_sync>
	if (err) {
   10e98:	4604      	mov	r4, r0
   10e9a:	2800      	cmp	r0, #0
   10e9c:	f47f af00 	bne.w	10ca0 <bt_init+0x108>
	if (bt_dev.le.acl_mtu) {
   10ea0:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	read_buffer_size_complete(rsp);
   10ea4:	68bc      	ldr	r4, [r7, #8]
	if (bt_dev.le.acl_mtu) {
   10ea6:	b94b      	cbnz	r3, 10ebc <bt_init+0x324>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   10ea8:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   10eaa:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   10eae:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   10eb2:	889a      	ldrh	r2, [r3, #4]
   10eb4:	4831      	ldr	r0, [pc, #196]	; (10f7c <bt_init+0x3e4>)
   10eb6:	4611      	mov	r1, r2
   10eb8:	f016 fb7a 	bl	275b0 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   10ebc:	4620      	mov	r0, r4
   10ebe:	f00a ff83 	bl	1bdc8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   10ec2:	2108      	movs	r1, #8
   10ec4:	f640 4001 	movw	r0, #3073	; 0xc01
   10ec8:	f004 f8ca 	bl	15060 <bt_hci_cmd_create>
	if (!buf) {
   10ecc:	4604      	mov	r4, r0
   10ece:	b990      	cbnz	r0, 10ef6 <bt_init+0x35e>
		return -ENOBUFS;
   10ed0:	f06f 0468 	mvn.w	r4, #104	; 0x68
   10ed4:	e6e4      	b.n	10ca0 <bt_init+0x108>
	else if (!bt_dev.le.acl_mtu) {
   10ed6:	2900      	cmp	r1, #0
   10ed8:	d1f3      	bne.n	10ec2 <bt_init+0x32a>
		LOG_ERR("ACL BR/EDR buffers not initialized");
   10eda:	4b29      	ldr	r3, [pc, #164]	; (10f80 <bt_init+0x3e8>)
   10edc:	61fb      	str	r3, [r7, #28]
   10ede:	2302      	movs	r3, #2
   10ee0:	4828      	ldr	r0, [pc, #160]	; (10f84 <bt_init+0x3ec>)
   10ee2:	61bb      	str	r3, [r7, #24]
   10ee4:	f107 0218 	add.w	r2, r7, #24
   10ee8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10eec:	f013 fe27 	bl	24b3e <z_log_msg_static_create.constprop.0>
		return -EIO;
   10ef0:	f06f 0404 	mvn.w	r4, #4
   10ef4:	e6d4      	b.n	10ca0 <bt_init+0x108>
   10ef6:	2108      	movs	r1, #8
   10ef8:	300c      	adds	r0, #12
   10efa:	f015 fe65 	bl	26bc8 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   10efe:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   10f02:	07d9      	lsls	r1, r3, #31
   10f04:	4602      	mov	r2, r0
   10f06:	d42f      	bmi.n	10f68 <bt_init+0x3d0>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   10f08:	481f      	ldr	r0, [pc, #124]	; (10f88 <bt_init+0x3f0>)
   10f0a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
	sys_put_le64(mask, ev->events);
   10f0e:	f013 fe25 	bl	24b5c <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   10f12:	4621      	mov	r1, r4
   10f14:	2200      	movs	r2, #0
   10f16:	f640 4001 	movw	r0, #3073	; 0xc01
   10f1a:	f004 f8db 	bl	150d4 <bt_hci_cmd_send_sync>
	if (err) {
   10f1e:	4604      	mov	r4, r0
   10f20:	2800      	cmp	r0, #0
   10f22:	f47f aebd 	bne.w	10ca0 <bt_init+0x108>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   10f26:	4601      	mov	r1, r0
   10f28:	1d3a      	adds	r2, r7, #4
   10f2a:	f64f 4001 	movw	r0, #64513	; 0xfc01
   10f2e:	f004 f8d1 	bl	150d4 <bt_hci_cmd_send_sync>
	if (err) {
   10f32:	b368      	cbz	r0, 10f90 <bt_init+0x3f8>
		LOG_WRN("Vendor HCI extensions not available");
   10f34:	4b15      	ldr	r3, [pc, #84]	; (10f8c <bt_init+0x3f4>)
			LOG_WRN("Failed to read supported vendor features");
   10f36:	61fb      	str	r3, [r7, #28]
   10f38:	2302      	movs	r3, #2
   10f3a:	4812      	ldr	r0, [pc, #72]	; (10f84 <bt_init+0x3ec>)
   10f3c:	61bb      	str	r3, [r7, #24]
   10f3e:	f107 0218 	add.w	r2, r7, #24
   10f42:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   10f46:	f013 fdfa 	bl	24b3e <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
   10f4a:	f005 fb71 	bl	16630 <bt_id_init>
	if (err) {
   10f4e:	4604      	mov	r4, r0
   10f50:	2800      	cmp	r0, #0
   10f52:	f47f aea5 	bne.w	10ca0 <bt_init+0x108>
		err = bt_conn_init();
   10f56:	f006 ff01 	bl	17d5c <bt_conn_init>
		if (err) {
   10f5a:	4604      	mov	r4, r0
   10f5c:	2800      	cmp	r0, #0
   10f5e:	f47f ae9f 	bne.w	10ca0 <bt_init+0x108>
	bt_finalize_init();
   10f62:	f004 fe65 	bl	15c30 <bt_finalize_init>
	return 0;
   10f66:	e69b      	b.n	10ca0 <bt_init+0x108>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   10f68:	a101      	add	r1, pc, #4	; (adr r1, 10f70 <bt_init+0x3d8>)
   10f6a:	e9d1 0100 	ldrd	r0, r1, [r1]
   10f6e:	e7ce      	b.n	10f0e <bt_init+0x376>
   10f70:	02008890 	.word	0x02008890
   10f74:	20008000 	.word	0x20008000
   10f78:	20000460 	.word	0x20000460
   10f7c:	20000490 	.word	0x20000490
   10f80:	00029c26 	.word	0x00029c26
   10f84:	00028174 	.word	0x00028174
   10f88:	02008810 	.word	0x02008810
   10f8c:	00029c49 	.word	0x00029c49
	rp.info = (void *)rsp->data;
   10f90:	687b      	ldr	r3, [r7, #4]
   10f92:	68dc      	ldr	r4, [r3, #12]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   10f94:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
   10f98:	2b03      	cmp	r3, #3
		return plat_str[platform];
   10f9a:	bf96      	itet	ls
   10f9c:	4a45      	ldrls	r2, [pc, #276]	; (110b4 <bt_init+0x51c>)
	return "unknown";
   10f9e:	4946      	ldrhi	r1, [pc, #280]	; (110b8 <bt_init+0x520>)
		return plat_str[platform];
   10fa0:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   10fa4:	466e      	mov	r6, sp
   10fa6:	b08a      	sub	sp, #40	; 0x28
   10fa8:	466a      	mov	r2, sp
   10faa:	4844      	ldr	r0, [pc, #272]	; (110bc <bt_init+0x524>)
   10fac:	61d3      	str	r3, [r2, #28]
   10fae:	f44f 7300 	mov.w	r3, #512	; 0x200
   10fb2:	8413      	strh	r3, [r2, #32]
   10fb4:	4b42      	ldr	r3, [pc, #264]	; (110c0 <bt_init+0x528>)
   10fb6:	e9c2 0105 	strd	r0, r1, [r2, #20]
   10fba:	f842 3f10 	str.w	r3, [r2, #16]!
   10fbe:	4841      	ldr	r0, [pc, #260]	; (110c4 <bt_init+0x52c>)
   10fc0:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   10fc4:	f013 fdbb 	bl	24b3e <z_log_msg_static_create.constprop.0>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   10fc8:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	LOG_INF("HW Variant: %s (0x%04x)",
   10fcc:	f8b4 3003 	ldrh.w	r3, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   10fd0:	2a02      	cmp	r2, #2
   10fd2:	46b5      	mov	sp, r6
   10fd4:	d149      	bne.n	1106a <bt_init+0x4d2>
	if (variant < ARRAY_SIZE(nordic_str)) {
   10fd6:	2b03      	cmp	r3, #3
   10fd8:	d847      	bhi.n	1106a <bt_init+0x4d2>
		return nordic_str[variant];
   10fda:	4a3b      	ldr	r2, [pc, #236]	; (110c8 <bt_init+0x530>)
   10fdc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Variant: %s (0x%04x)",
   10fe0:	466e      	mov	r6, sp
   10fe2:	b08a      	sub	sp, #40	; 0x28
   10fe4:	466a      	mov	r2, sp
   10fe6:	4839      	ldr	r0, [pc, #228]	; (110cc <bt_init+0x534>)
   10fe8:	61d3      	str	r3, [r2, #28]
   10fea:	f44f 7300 	mov.w	r3, #512	; 0x200
   10fee:	8413      	strh	r3, [r2, #32]
   10ff0:	4b33      	ldr	r3, [pc, #204]	; (110c0 <bt_init+0x528>)
   10ff2:	e9c2 0105 	strd	r0, r1, [r2, #20]
   10ff6:	f842 3f10 	str.w	r3, [r2, #16]!
   10ffa:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   10ffe:	4831      	ldr	r0, [pc, #196]	; (110c4 <bt_init+0x52c>)
   11000:	f013 fd9d 	bl	24b3e <z_log_msg_static_create.constprop.0>
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   11004:	7963      	ldrb	r3, [r4, #5]
   11006:	f894 c006 	ldrb.w	ip, [r4, #6]
   1100a:	f8d4 0009 	ldr.w	r0, [r4, #9]
	if (variant < ARRAY_SIZE(var_str)) {
   1100e:	2b03      	cmp	r3, #3
   11010:	46b5      	mov	sp, r6
		return var_str[variant];
   11012:	bf98      	it	ls
   11014:	4a2e      	ldrls	r2, [pc, #184]	; (110d0 <bt_init+0x538>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   11016:	f8b4 6007 	ldrh.w	r6, [r4, #7]
		return var_str[variant];
   1101a:	bf94      	ite	ls
   1101c:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	return "unknown";
   11020:	4925      	ldrhi	r1, [pc, #148]	; (110b8 <bt_init+0x520>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   11022:	466c      	mov	r4, sp
   11024:	b08c      	sub	sp, #48	; 0x30
   11026:	466a      	mov	r2, sp
   11028:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 110d4 <bt_init+0x53c>
   1102c:	e9c2 3c07 	strd	r3, ip, [r2, #28]
   11030:	f44f 7300 	mov.w	r3, #512	; 0x200
   11034:	8593      	strh	r3, [r2, #44]	; 0x2c
   11036:	4b28      	ldr	r3, [pc, #160]	; (110d8 <bt_init+0x540>)
   11038:	e9c2 e105 	strd	lr, r1, [r2, #20]
   1103c:	e9c2 6009 	strd	r6, r0, [r2, #36]	; 0x24
   11040:	f44f 5173 	mov.w	r1, #15552	; 0x3cc0
   11044:	f842 3f10 	str.w	r3, [r2, #16]!
   11048:	481e      	ldr	r0, [pc, #120]	; (110c4 <bt_init+0x52c>)
   1104a:	f013 fd78 	bl	24b3e <z_log_msg_static_create.constprop.0>
   1104e:	46a5      	mov	sp, r4
	net_buf_unref(rsp);
   11050:	6878      	ldr	r0, [r7, #4]
   11052:	f00a feb9 	bl	1bdc8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   11056:	1d3a      	adds	r2, r7, #4
   11058:	2100      	movs	r1, #0
   1105a:	f64f 4002 	movw	r0, #64514	; 0xfc02
   1105e:	f004 f839 	bl	150d4 <bt_hci_cmd_send_sync>
	if (err) {
   11062:	4604      	mov	r4, r0
   11064:	b118      	cbz	r0, 1106e <bt_init+0x4d6>
		LOG_WRN("Failed to read supported vendor commands");
   11066:	4b1d      	ldr	r3, [pc, #116]	; (110dc <bt_init+0x544>)
   11068:	e765      	b.n	10f36 <bt_init+0x39e>
		return "unknown";
   1106a:	4913      	ldr	r1, [pc, #76]	; (110b8 <bt_init+0x520>)
   1106c:	e7b8      	b.n	10fe0 <bt_init+0x448>
	rp.cmds = (void *)rsp->data;
   1106e:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   11070:	481b      	ldr	r0, [pc, #108]	; (110e0 <bt_init+0x548>)
   11072:	68f1      	ldr	r1, [r6, #12]
   11074:	2202      	movs	r2, #2
   11076:	3101      	adds	r1, #1
   11078:	f013 fc69 	bl	2494e <memcpy>
	net_buf_unref(rsp);
   1107c:	4630      	mov	r0, r6
   1107e:	f00a fea3 	bl	1bdc8 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   11082:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   11086:	075b      	lsls	r3, r3, #29
   11088:	f57f af5f 	bpl.w	10f4a <bt_init+0x3b2>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   1108c:	1d3a      	adds	r2, r7, #4
   1108e:	4621      	mov	r1, r4
   11090:	f64f 4003 	movw	r0, #64515	; 0xfc03
   11094:	f004 f81e 	bl	150d4 <bt_hci_cmd_send_sync>
		if (err) {
   11098:	b108      	cbz	r0, 1109e <bt_init+0x506>
			LOG_WRN("Failed to read supported vendor features");
   1109a:	4b12      	ldr	r3, [pc, #72]	; (110e4 <bt_init+0x54c>)
   1109c:	e74b      	b.n	10f36 <bt_init+0x39e>
		rp.feat = (void *)rsp->data;
   1109e:	687c      	ldr	r4, [r7, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   110a0:	4811      	ldr	r0, [pc, #68]	; (110e8 <bt_init+0x550>)
   110a2:	68e1      	ldr	r1, [r4, #12]
   110a4:	2201      	movs	r2, #1
   110a6:	4411      	add	r1, r2
   110a8:	f013 fc51 	bl	2494e <memcpy>
		net_buf_unref(rsp);
   110ac:	4620      	mov	r0, r4
   110ae:	f00a fe8b 	bl	1bdc8 <net_buf_unref>
   110b2:	e74a      	b.n	10f4a <bt_init+0x3b2>
   110b4:	00028504 	.word	0x00028504
   110b8:	000296c8 	.word	0x000296c8
   110bc:	00029c6d 	.word	0x00029c6d
   110c0:	01000004 	.word	0x01000004
   110c4:	00028174 	.word	0x00028174
   110c8:	000284f4 	.word	0x000284f4
   110cc:	00029c86 	.word	0x00029c86
   110d0:	000284e4 	.word	0x000284e4
   110d4:	00029c9e 	.word	0x00029c9e
   110d8:	01000007 	.word	0x01000007
   110dc:	00029ccb 	.word	0x00029ccb
   110e0:	20000449 	.word	0x20000449
   110e4:	00029cf4 	.word	0x00029cf4
   110e8:	20000448 	.word	0x20000448

000110ec <app_button_cb>:
}

static bool app_button_cb(void)
{
	return app_button_state;
}
   110ec:	4b01      	ldr	r3, [pc, #4]	; (110f4 <app_button_cb+0x8>)
   110ee:	7818      	ldrb	r0, [r3, #0]
   110f0:	4770      	bx	lr
   110f2:	bf00      	nop
   110f4:	2000401c 	.word	0x2000401c

000110f8 <button_changed>:
	.button_cb = app_button_cb,
};

static void button_changed(uint32_t button_state, uint32_t has_changed)
{
	if (has_changed & USER_BUTTON) {
   110f8:	07cb      	lsls	r3, r1, #31
{
   110fa:	b510      	push	{r4, lr}
	if (has_changed & USER_BUTTON) {
   110fc:	d506      	bpl.n	1110c <button_changed+0x14>
		uint32_t user_button_state = button_state & USER_BUTTON;

		bt_lbs_send_button_state(user_button_state);
   110fe:	f000 0401 	and.w	r4, r0, #1
   11102:	4620      	mov	r0, r4
   11104:	f000 fa22 	bl	1154c <bt_lbs_send_button_state>
		app_button_state = user_button_state ? true : false;
   11108:	4b01      	ldr	r3, [pc, #4]	; (11110 <button_changed+0x18>)
   1110a:	701c      	strb	r4, [r3, #0]
	}
}
   1110c:	bd10      	pop	{r4, pc}
   1110e:	bf00      	nop
   11110:	2000401c 	.word	0x2000401c

00011114 <on_connected>:
{
   11114:	b590      	push	{r4, r7, lr}
   11116:	b087      	sub	sp, #28
   11118:	af00      	add	r7, sp, #0
	if (err) {
   1111a:	b189      	cbz	r1, 11140 <on_connected+0x2c>
		LOG_INF("Connection failed (err %u)\n", err);
   1111c:	466c      	mov	r4, sp
   1111e:	b088      	sub	sp, #32
   11120:	466a      	mov	r2, sp
   11122:	4b0f      	ldr	r3, [pc, #60]	; (11160 <on_connected+0x4c>)
   11124:	480f      	ldr	r0, [pc, #60]	; (11164 <on_connected+0x50>)
   11126:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1112a:	2303      	movs	r3, #3
   1112c:	f842 3f10 	str.w	r3, [r2, #16]!
   11130:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   11134:	f012 fadc 	bl	236f0 <z_log_msg_static_create.constprop.0>
   11138:	46a5      	mov	sp, r4
}
   1113a:	371c      	adds	r7, #28
   1113c:	46bd      	mov	sp, r7
   1113e:	bd90      	pop	{r4, r7, pc}
	LOG_INF("Connected\n");
   11140:	4b09      	ldr	r3, [pc, #36]	; (11168 <on_connected+0x54>)
   11142:	617b      	str	r3, [r7, #20]
   11144:	4807      	ldr	r0, [pc, #28]	; (11164 <on_connected+0x50>)
   11146:	2302      	movs	r3, #2
   11148:	f107 0210 	add.w	r2, r7, #16
   1114c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   11150:	613b      	str	r3, [r7, #16]
   11152:	f012 facd 	bl	236f0 <z_log_msg_static_create.constprop.0>
	dk_set_led_on(CON_STATUS_LED);
   11156:	2001      	movs	r0, #1
   11158:	f015 ff53 	bl	27002 <dk_set_led_on>
   1115c:	e7ed      	b.n	1113a <on_connected+0x26>
   1115e:	bf00      	nop
   11160:	00028c8c 	.word	0x00028c8c
   11164:	00028124 	.word	0x00028124
   11168:	00028ca8 	.word	0x00028ca8

0001116c <on_disconnected>:
{
   1116c:	b598      	push	{r3, r4, r7, lr}
   1116e:	af00      	add	r7, sp, #0
	LOG_INF("Disconnected (reason %u)\n", reason);
   11170:	466c      	mov	r4, sp
   11172:	b088      	sub	sp, #32
   11174:	466a      	mov	r2, sp
   11176:	4b08      	ldr	r3, [pc, #32]	; (11198 <on_disconnected+0x2c>)
   11178:	4808      	ldr	r0, [pc, #32]	; (1119c <on_disconnected+0x30>)
   1117a:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1117e:	2303      	movs	r3, #3
   11180:	f842 3f10 	str.w	r3, [r2, #16]!
   11184:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   11188:	f012 fab2 	bl	236f0 <z_log_msg_static_create.constprop.0>
	dk_set_led_off(CON_STATUS_LED);
   1118c:	2001      	movs	r0, #1
   1118e:	46a5      	mov	sp, r4
   11190:	f015 ff3a 	bl	27008 <dk_set_led_off>
}
   11194:	46bd      	mov	sp, r7
   11196:	bd98      	pop	{r3, r4, r7, pc}
   11198:	00028cb3 	.word	0x00028cb3
   1119c:	00028124 	.word	0x00028124

000111a0 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   111a0:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   111a2:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   111a4:	b08a      	sub	sp, #40	; 0x28
   111a6:	4604      	mov	r4, r0
   111a8:	460e      	mov	r6, r1
   111aa:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   111ac:	2b03      	cmp	r3, #3
   111ae:	d820      	bhi.n	111f2 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   111b0:	e8df f003 	tbb	[pc, r3]
   111b4:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   111b8:	4911      	ldr	r1, [pc, #68]	; (11200 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   111ba:	4628      	mov	r0, r5
   111bc:	f013 fb86 	bl	248cc <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   111c0:	9505      	str	r5, [sp, #20]
   111c2:	7863      	ldrb	r3, [r4, #1]
   111c4:	9304      	str	r3, [sp, #16]
   111c6:	78a3      	ldrb	r3, [r4, #2]
   111c8:	9303      	str	r3, [sp, #12]
   111ca:	78e3      	ldrb	r3, [r4, #3]
   111cc:	9302      	str	r3, [sp, #8]
   111ce:	7923      	ldrb	r3, [r4, #4]
   111d0:	9301      	str	r3, [sp, #4]
   111d2:	7963      	ldrb	r3, [r4, #5]
   111d4:	9300      	str	r3, [sp, #0]
   111d6:	79a3      	ldrb	r3, [r4, #6]
   111d8:	4a0a      	ldr	r2, [pc, #40]	; (11204 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   111da:	211e      	movs	r1, #30
   111dc:	4630      	mov	r0, r6
   111de:	f012 fb04 	bl	237ea <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   111e2:	b00a      	add	sp, #40	; 0x28
   111e4:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   111e6:	4908      	ldr	r1, [pc, #32]	; (11208 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   111e8:	e7e7      	b.n	111ba <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   111ea:	4908      	ldr	r1, [pc, #32]	; (1120c <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   111ec:	e7e5      	b.n	111ba <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   111ee:	4908      	ldr	r1, [pc, #32]	; (11210 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   111f0:	e7e3      	b.n	111ba <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   111f2:	4a08      	ldr	r2, [pc, #32]	; (11214 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   111f4:	210a      	movs	r1, #10
   111f6:	4628      	mov	r0, r5
   111f8:	f012 faf7 	bl	237ea <snprintk>
		break;
   111fc:	e7e0      	b.n	111c0 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   111fe:	bf00      	nop
   11200:	00028ccd 	.word	0x00028ccd
   11204:	00028cef 	.word	0x00028cef
   11208:	00028cd4 	.word	0x00028cd4
   1120c:	00028cdb 	.word	0x00028cdb
   11210:	00028ce5 	.word	0x00028ce5
   11214:	0002ac0e 	.word	0x0002ac0e

00011218 <on_security_changed>:
{
   11218:	b5f0      	push	{r4, r5, r6, r7, lr}
   1121a:	b089      	sub	sp, #36	; 0x24
   1121c:	af00      	add	r7, sp, #0
   1121e:	460d      	mov	r5, r1
   11220:	4614      	mov	r4, r2
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11222:	f014 f886 	bl	25332 <bt_conn_get_dst>
   11226:	4639      	mov	r1, r7
   11228:	f7ff ffba 	bl	111a0 <bt_addr_le_to_str.constprop.0.isra.0>
	if (!err) {
   1122c:	b9ac      	cbnz	r4, 1125a <on_security_changed+0x42>
		LOG_INF("Security changed: %s level %u\n", addr, level);
   1122e:	466c      	mov	r4, sp
   11230:	b08a      	sub	sp, #40	; 0x28
   11232:	466a      	mov	r2, sp
   11234:	4b14      	ldr	r3, [pc, #80]	; (11288 <on_security_changed+0x70>)
   11236:	61d5      	str	r5, [r2, #28]
   11238:	e9c2 3705 	strd	r3, r7, [r2, #20]
   1123c:	f44f 7300 	mov.w	r3, #512	; 0x200
   11240:	8413      	strh	r3, [r2, #32]
   11242:	4b12      	ldr	r3, [pc, #72]	; (1128c <on_security_changed+0x74>)
   11244:	f842 3f10 	str.w	r3, [r2, #16]!
   11248:	4811      	ldr	r0, [pc, #68]	; (11290 <on_security_changed+0x78>)
   1124a:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   1124e:	f012 fa4f 	bl	236f0 <z_log_msg_static_create.constprop.0>
   11252:	46a5      	mov	sp, r4
}
   11254:	3724      	adds	r7, #36	; 0x24
   11256:	46bd      	mov	sp, r7
   11258:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_INF("Security failed: %s level %u err %d\n", addr, level, err);
   1125a:	466e      	mov	r6, sp
   1125c:	b08a      	sub	sp, #40	; 0x28
   1125e:	466b      	mov	r3, sp
   11260:	4a0c      	ldr	r2, [pc, #48]	; (11294 <on_security_changed+0x7c>)
   11262:	480b      	ldr	r0, [pc, #44]	; (11290 <on_security_changed+0x78>)
   11264:	e9c3 2705 	strd	r2, r7, [r3, #20]
   11268:	f44f 7200 	mov.w	r2, #512	; 0x200
   1126c:	849a      	strh	r2, [r3, #36]	; 0x24
   1126e:	461a      	mov	r2, r3
   11270:	e9c3 5407 	strd	r5, r4, [r3, #28]
   11274:	4b08      	ldr	r3, [pc, #32]	; (11298 <on_security_changed+0x80>)
   11276:	f842 3f10 	str.w	r3, [r2, #16]!
   1127a:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
   1127e:	f012 fa37 	bl	236f0 <z_log_msg_static_create.constprop.0>
   11282:	46b5      	mov	sp, r6
}
   11284:	e7e6      	b.n	11254 <on_security_changed+0x3c>
   11286:	bf00      	nop
   11288:	00028d12 	.word	0x00028d12
   1128c:	01000004 	.word	0x01000004
   11290:	00028124 	.word	0x00028124
   11294:	00028d31 	.word	0x00028d31
   11298:	01000005 	.word	0x01000005

0001129c <auth_cancel>:
{
   1129c:	b580      	push	{r7, lr}
   1129e:	b088      	sub	sp, #32
   112a0:	af00      	add	r7, sp, #0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   112a2:	f014 f846 	bl	25332 <bt_conn_get_dst>
   112a6:	4639      	mov	r1, r7
   112a8:	f7ff ff7a 	bl	111a0 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Pairing cancelled: %s\n", addr);
   112ac:	b088      	sub	sp, #32
   112ae:	466a      	mov	r2, sp
   112b0:	4b08      	ldr	r3, [pc, #32]	; (112d4 <auth_cancel+0x38>)
   112b2:	4809      	ldr	r0, [pc, #36]	; (112d8 <auth_cancel+0x3c>)
   112b4:	e9c2 3705 	strd	r3, r7, [r2, #20]
   112b8:	f44f 7300 	mov.w	r3, #512	; 0x200
   112bc:	8393      	strh	r3, [r2, #28]
   112be:	4b07      	ldr	r3, [pc, #28]	; (112dc <auth_cancel+0x40>)
   112c0:	f842 3f10 	str.w	r3, [r2, #16]!
   112c4:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
   112c8:	f012 fa12 	bl	236f0 <z_log_msg_static_create.constprop.0>
}
   112cc:	3720      	adds	r7, #32
   112ce:	46bd      	mov	sp, r7
   112d0:	bd80      	pop	{r7, pc}
   112d2:	bf00      	nop
   112d4:	00028d56 	.word	0x00028d56
   112d8:	00028124 	.word	0x00028124
   112dc:	01000003 	.word	0x01000003

000112e0 <auth_passkey_display>:
{
   112e0:	b590      	push	{r4, r7, lr}
   112e2:	b089      	sub	sp, #36	; 0x24
   112e4:	af00      	add	r7, sp, #0
   112e6:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   112e8:	f014 f823 	bl	25332 <bt_conn_get_dst>
   112ec:	4639      	mov	r1, r7
   112ee:	f7ff ff57 	bl	111a0 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Passkey for %s: %06u\n", addr, passkey);
   112f2:	b08a      	sub	sp, #40	; 0x28
   112f4:	466a      	mov	r2, sp
   112f6:	4b09      	ldr	r3, [pc, #36]	; (1131c <auth_passkey_display+0x3c>)
   112f8:	61d4      	str	r4, [r2, #28]
   112fa:	e9c2 3705 	strd	r3, r7, [r2, #20]
   112fe:	f44f 7300 	mov.w	r3, #512	; 0x200
   11302:	8413      	strh	r3, [r2, #32]
   11304:	4b06      	ldr	r3, [pc, #24]	; (11320 <auth_passkey_display+0x40>)
   11306:	f842 3f10 	str.w	r3, [r2, #16]!
   1130a:	4806      	ldr	r0, [pc, #24]	; (11324 <auth_passkey_display+0x44>)
   1130c:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   11310:	f012 f9ee 	bl	236f0 <z_log_msg_static_create.constprop.0>
}
   11314:	3724      	adds	r7, #36	; 0x24
   11316:	46bd      	mov	sp, r7
   11318:	bd90      	pop	{r4, r7, pc}
   1131a:	bf00      	nop
   1131c:	00028d6d 	.word	0x00028d6d
   11320:	01000004 	.word	0x01000004
   11324:	00028124 	.word	0x00028124

00011328 <main>:

	return err;
}

void main(void)
{
   11328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1132c:	b08e      	sub	sp, #56	; 0x38
	int blink_status = 0;
	int err;

	LOG_INF("Starting Lesson 5 - Exercise 1 \n");
   1132e:	466e      	mov	r6, sp
{
   11330:	af02      	add	r7, sp, #8
	LOG_INF("Starting Lesson 5 - Exercise 1 \n");
   11332:	4b4b      	ldr	r3, [pc, #300]	; (11460 <main+0x138>)
   11334:	484b      	ldr	r0, [pc, #300]	; (11464 <main+0x13c>)
   11336:	62fb      	str	r3, [r7, #44]	; 0x2c
   11338:	f04f 0802 	mov.w	r8, #2
   1133c:	f107 0228 	add.w	r2, r7, #40	; 0x28
   11340:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   11344:	f8c7 8028 	str.w	r8, [r7, #40]	; 0x28
   11348:	f012 f9d2 	bl	236f0 <z_log_msg_static_create.constprop.0>

	err = dk_leds_init();
   1134c:	f00b ffbc 	bl	1d2c8 <dk_leds_init>
	if (err) {
   11350:	b140      	cbz	r0, 11364 <main+0x3c>
		LOG_INF("LEDs init failed (err %d)\n", err);
   11352:	b088      	sub	sp, #32
   11354:	aa02      	add	r2, sp, #8
   11356:	4b44      	ldr	r3, [pc, #272]	; (11468 <main+0x140>)
		return;
	}

	err = bt_lbs_init(&lbs_callbacs);
	if (err) {
		LOG_INF("Failed to init LBS (err:%d)\n", err);
   11358:	e9c2 3005 	strd	r3, r0, [r2, #20]

	LOG_INF("Bluetooth initialized\n");

	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
	if (err) {
		LOG_INF("Advertising failed to start (err %d)\n", err);
   1135c:	2303      	movs	r3, #3
   1135e:	f842 3f10 	str.w	r3, [r2, #16]!
   11362:	e02c      	b.n	113be <main+0x96>
	err = dk_buttons_init(button_changed);
   11364:	4841      	ldr	r0, [pc, #260]	; (1146c <main+0x144>)
   11366:	f00b ffed 	bl	1d344 <dk_buttons_init>
	if (err) {
   1136a:	4604      	mov	r4, r0
   1136c:	b990      	cbnz	r0, 11394 <main+0x6c>
	err = bt_conn_auth_cb_register(&conn_auth_callbacks);
   1136e:	4840      	ldr	r0, [pc, #256]	; (11470 <main+0x148>)
   11370:	f006 fcda 	bl	17d28 <bt_conn_auth_cb_register>
	if (err) {
   11374:	4604      	mov	r4, r0
   11376:	b348      	cbz	r0, 113cc <main+0xa4>
		LOG_INF("Failed to register authorization callbacks\n");
   11378:	4b3e      	ldr	r3, [pc, #248]	; (11474 <main+0x14c>)
   1137a:	483a      	ldr	r0, [pc, #232]	; (11464 <main+0x13c>)
   1137c:	e9c7 830a 	strd	r8, r3, [r7, #40]	; 0x28
   11380:	f107 0228 	add.w	r2, r7, #40	; 0x28
   11384:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   11388:	f012 f9b2 	bl	236f0 <z_log_msg_static_create.constprop.0>

	for (;;) {
		dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
		k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
	}
}
   1138c:	3730      	adds	r7, #48	; 0x30
   1138e:	46bd      	mov	sp, r7
   11390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_INF("Cannot init buttons (err: %d)\n", err);
   11394:	b088      	sub	sp, #32
   11396:	aa02      	add	r2, sp, #8
   11398:	4b37      	ldr	r3, [pc, #220]	; (11478 <main+0x150>)
   1139a:	2503      	movs	r5, #3
   1139c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   113a0:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   113a4:	f842 5f10 	str.w	r5, [r2, #16]!
   113a8:	482e      	ldr	r0, [pc, #184]	; (11464 <main+0x13c>)
   113aa:	f012 f9a1 	bl	236f0 <z_log_msg_static_create.constprop.0>
   113ae:	46b5      	mov	sp, r6
		LOG_INF("Button init failed (err %d)\n", err);
   113b0:	b088      	sub	sp, #32
   113b2:	aa02      	add	r2, sp, #8
   113b4:	4b31      	ldr	r3, [pc, #196]	; (1147c <main+0x154>)
   113b6:	e9c2 3405 	strd	r3, r4, [r2, #20]
   113ba:	f842 5f10 	str.w	r5, [r2, #16]!
		LOG_INF("Advertising failed to start (err %d)\n", err);
   113be:	4829      	ldr	r0, [pc, #164]	; (11464 <main+0x13c>)
   113c0:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   113c4:	f012 f994 	bl	236f0 <z_log_msg_static_create.constprop.0>
   113c8:	46b5      	mov	sp, r6
		return;
   113ca:	e7df      	b.n	1138c <main+0x64>
	bt_conn_cb_register(&connection_callbacks);
   113cc:	482c      	ldr	r0, [pc, #176]	; (11480 <main+0x158>)
   113ce:	f006 fac9 	bl	17964 <bt_conn_cb_register>
	err = bt_enable(NULL);
   113d2:	4620      	mov	r0, r4
   113d4:	f004 fce2 	bl	15d9c <bt_enable>
	if (err) {
   113d8:	b118      	cbz	r0, 113e2 <main+0xba>
		LOG_INF("Bluetooth init failed (err %d)\n", err);
   113da:	b088      	sub	sp, #32
   113dc:	aa02      	add	r2, sp, #8
   113de:	4b29      	ldr	r3, [pc, #164]	; (11484 <main+0x15c>)
   113e0:	e7ba      	b.n	11358 <main+0x30>
	err = bt_lbs_init(&lbs_callbacs);
   113e2:	4829      	ldr	r0, [pc, #164]	; (11488 <main+0x160>)
   113e4:	f000 f8a8 	bl	11538 <bt_lbs_init>
	if (err) {
   113e8:	b118      	cbz	r0, 113f2 <main+0xca>
		LOG_INF("Failed to init LBS (err:%d)\n", err);
   113ea:	b088      	sub	sp, #32
   113ec:	aa02      	add	r2, sp, #8
   113ee:	4b27      	ldr	r3, [pc, #156]	; (1148c <main+0x164>)
   113f0:	e7b2      	b.n	11358 <main+0x30>
	LOG_INF("Bluetooth initialized\n");
   113f2:	4b27      	ldr	r3, [pc, #156]	; (11490 <main+0x168>)
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
   113f4:	4d27      	ldr	r5, [pc, #156]	; (11494 <main+0x16c>)
	LOG_INF("Bluetooth initialized\n");
   113f6:	481b      	ldr	r0, [pc, #108]	; (11464 <main+0x13c>)
   113f8:	e9c7 830a 	strd	r8, r3, [r7, #40]	; 0x28
   113fc:	f107 0228 	add.w	r2, r7, #40	; 0x28
   11400:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   11404:	f012 f974 	bl	236f0 <z_log_msg_static_create.constprop.0>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
   11408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1140a:	1d3c      	adds	r4, r7, #4
   1140c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1140e:	682b      	ldr	r3, [r5, #0]
   11410:	6023      	str	r3, [r4, #0]
   11412:	2301      	movs	r3, #1
   11414:	9300      	str	r3, [sp, #0]
   11416:	4920      	ldr	r1, [pc, #128]	; (11498 <main+0x170>)
   11418:	4b20      	ldr	r3, [pc, #128]	; (1149c <main+0x174>)
   1141a:	4642      	mov	r2, r8
   1141c:	1d38      	adds	r0, r7, #4
   1141e:	f005 fb69 	bl	16af4 <bt_le_adv_start>
	if (err) {
   11422:	4604      	mov	r4, r0
   11424:	b128      	cbz	r0, 11432 <main+0x10a>
		LOG_INF("Advertising failed to start (err %d)\n", err);
   11426:	b088      	sub	sp, #32
   11428:	aa02      	add	r2, sp, #8
   1142a:	4b1d      	ldr	r3, [pc, #116]	; (114a0 <main+0x178>)
   1142c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   11430:	e794      	b.n	1135c <main+0x34>
	LOG_INF("Advertising successfully started\n");
   11432:	4b1c      	ldr	r3, [pc, #112]	; (114a4 <main+0x17c>)
   11434:	480b      	ldr	r0, [pc, #44]	; (11464 <main+0x13c>)
   11436:	e9c7 830a 	strd	r8, r3, [r7, #40]	; 0x28
   1143a:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1143e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   11442:	f012 f955 	bl	236f0 <z_log_msg_static_create.constprop.0>
		dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
   11446:	3401      	adds	r4, #1
   11448:	f004 0101 	and.w	r1, r4, #1
   1144c:	2000      	movs	r0, #0
   1144e:	f00c f80f 	bl	1d470 <dk_set_led>
	return z_impl_k_sleep(timeout);
   11452:	2100      	movs	r1, #0
   11454:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11458:	f00e fe58 	bl	2010c <z_impl_k_sleep>
	for (;;) {
   1145c:	e7f3      	b.n	11446 <main+0x11e>
   1145e:	bf00      	nop
   11460:	00028d83 	.word	0x00028d83
   11464:	00028124 	.word	0x00028124
   11468:	00028da4 	.word	0x00028da4
   1146c:	000110f9 	.word	0x000110f9
   11470:	200004f8 	.word	0x200004f8
   11474:	00028dfb 	.word	0x00028dfb
   11478:	00028dbf 	.word	0x00028dbf
   1147c:	00028dde 	.word	0x00028dde
   11480:	20000510 	.word	0x20000510
   11484:	00028e27 	.word	0x00028e27
   11488:	200004f0 	.word	0x200004f0
   1148c:	00028e47 	.word	0x00028e47
   11490:	00028e64 	.word	0x00028e64
   11494:	00028260 	.word	0x00028260
   11498:	00028330 	.word	0x00028330
   1149c:	00028328 	.word	0x00028328
   114a0:	00028e7b 	.word	0x00028e7b
   114a4:	00028ea1 	.word	0x00028ea1

000114a8 <lbslc_ccc_cfg_changed>:
static bool button_state;
static struct bt_lbs_cb lbs_cb;

static void lbslc_ccc_cfg_changed(const struct bt_gatt_attr *attr, uint16_t value)
{
	notify_enabled = (value == BT_GATT_CCC_NOTIFY);
   114a8:	1e4b      	subs	r3, r1, #1
   114aa:	4259      	negs	r1, r3
   114ac:	4159      	adcs	r1, r3
   114ae:	4b01      	ldr	r3, [pc, #4]	; (114b4 <lbslc_ccc_cfg_changed+0xc>)
   114b0:	7019      	strb	r1, [r3, #0]
}
   114b2:	4770      	bx	lr
   114b4:	2000401e 	.word	0x2000401e

000114b8 <write_led>:

static ssize_t write_led(struct bt_conn *conn, const struct bt_gatt_attr *attr, const void *buf,
			 uint16_t len, uint16_t offset, uint8_t flags)
{
   114b8:	b508      	push	{r3, lr}
	LOG_DBG("Attribute write, handle: %u, conn: %p", attr->handle, (void *)conn);

	if (len != 1U) {
   114ba:	2b01      	cmp	r3, #1
{
   114bc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
	if (len != 1U) {
   114c0:	d10c      	bne.n	114dc <write_led+0x24>
		LOG_DBG("Write led: Incorrect data length");
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (offset != 0) {
   114c2:	b971      	cbnz	r1, 114e2 <write_led+0x2a>
		LOG_DBG("Write led: Incorrect data offset");
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (lbs_cb.led_cb) {
   114c4:	4b0a      	ldr	r3, [pc, #40]	; (114f0 <write_led+0x38>)
   114c6:	681b      	ldr	r3, [r3, #0]
   114c8:	b90b      	cbnz	r3, 114ce <write_led+0x16>
			LOG_DBG("Write led: Incorrect value");
			return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
		}
	}

	return len;
   114ca:	2001      	movs	r0, #1
}
   114cc:	bd08      	pop	{r3, pc}
		uint8_t val = *((uint8_t *)buf);
   114ce:	7810      	ldrb	r0, [r2, #0]
		if (val == 0x00 || val == 0x01) {
   114d0:	2801      	cmp	r0, #1
   114d2:	d809      	bhi.n	114e8 <write_led+0x30>
			lbs_cb.led_cb(val ? true : false);
   114d4:	f000 0001 	and.w	r0, r0, #1
   114d8:	4798      	blx	r3
   114da:	e7f6      	b.n	114ca <write_led+0x12>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   114dc:	f06f 000c 	mvn.w	r0, #12
   114e0:	e7f4      	b.n	114cc <write_led+0x14>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   114e2:	f06f 0006 	mvn.w	r0, #6
   114e6:	e7f1      	b.n	114cc <write_led+0x14>
			return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   114e8:	f06f 0012 	mvn.w	r0, #18
   114ec:	e7ee      	b.n	114cc <write_led+0x14>
   114ee:	bf00      	nop
   114f0:	20002bc8 	.word	0x20002bc8

000114f4 <read_button>:
static ssize_t read_button(struct bt_conn *conn, const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
   114f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   114f8:	461f      	mov	r7, r3
	const char *value = attr->user_data;

	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle, (void *)conn);

	if (lbs_cb.button_cb) {
   114fa:	4b0d      	ldr	r3, [pc, #52]	; (11530 <read_button+0x3c>)
{
   114fc:	4605      	mov	r5, r0
	if (lbs_cb.button_cb) {
   114fe:	6858      	ldr	r0, [r3, #4]
{
   11500:	460c      	mov	r4, r1
   11502:	4616      	mov	r6, r2
	if (lbs_cb.button_cb) {
   11504:	b180      	cbz	r0, 11528 <read_button+0x34>
	const char *value = attr->user_data;
   11506:	f8d1 800c 	ldr.w	r8, [r1, #12]
		button_state = lbs_cb.button_cb();
   1150a:	4780      	blx	r0
   1150c:	4b09      	ldr	r3, [pc, #36]	; (11534 <read_button+0x40>)
   1150e:	7018      	strb	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value, sizeof(*value));
   11510:	2301      	movs	r3, #1
   11512:	e9cd 8301 	strd	r8, r3, [sp, #4]
   11516:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1151a:	9300      	str	r3, [sp, #0]
   1151c:	4632      	mov	r2, r6
   1151e:	463b      	mov	r3, r7
   11520:	4621      	mov	r1, r4
   11522:	4628      	mov	r0, r5
   11524:	f014 fde5 	bl	260f2 <bt_gatt_attr_read>
	}

	return 0;
}
   11528:	b004      	add	sp, #16
   1152a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1152e:	bf00      	nop
   11530:	20002bc8 	.word	0x20002bc8
   11534:	2000401d 	.word	0x2000401d

00011538 <bt_lbs_init>:
			       // BT_GATT_PERM_WRITE_ENCRYPT,
			       BT_GATT_PERM_WRITE_AUTHEN, NULL, write_led, NULL), );

int bt_lbs_init(struct bt_lbs_cb *callbacks)
{
	if (callbacks) {
   11538:	b120      	cbz	r0, 11544 <bt_lbs_init+0xc>
		lbs_cb.led_cb = callbacks->led_cb;
   1153a:	4b03      	ldr	r3, [pc, #12]	; (11548 <bt_lbs_init+0x10>)
   1153c:	6802      	ldr	r2, [r0, #0]
   1153e:	601a      	str	r2, [r3, #0]
		lbs_cb.button_cb = callbacks->button_cb;
   11540:	6842      	ldr	r2, [r0, #4]
   11542:	605a      	str	r2, [r3, #4]
	}

	return 0;
}
   11544:	2000      	movs	r0, #0
   11546:	4770      	bx	lr
   11548:	20002bc8 	.word	0x20002bc8

0001154c <bt_lbs_send_button_state>:

int bt_lbs_send_button_state(bool button_state)
{
   1154c:	b500      	push	{lr}
	if (!notify_enabled) {
   1154e:	4b0e      	ldr	r3, [pc, #56]	; (11588 <bt_lbs_send_button_state+0x3c>)
{
   11550:	b089      	sub	sp, #36	; 0x24
	if (!notify_enabled) {
   11552:	781b      	ldrb	r3, [r3, #0]
{
   11554:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!notify_enabled) {
   11558:	b19b      	cbz	r3, 11582 <bt_lbs_send_button_state+0x36>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   1155a:	2100      	movs	r1, #0
   1155c:	2218      	movs	r2, #24
   1155e:	a802      	add	r0, sp, #8
   11560:	f013 fa00 	bl	24964 <memset>

	params.attr = attr;
   11564:	4b09      	ldr	r3, [pc, #36]	; (1158c <bt_lbs_send_button_state+0x40>)
   11566:	9303      	str	r3, [sp, #12]
	params.data = data;
   11568:	f10d 0307 	add.w	r3, sp, #7
   1156c:	9304      	str	r3, [sp, #16]
	params.len = len;
#if defined(CONFIG_BT_EATT)
	params.chan_opt = BT_ATT_CHAN_OPT_NONE;
#endif /* CONFIG_BT_EATT */

	return bt_gatt_notify_cb(conn, &params);
   1156e:	a902      	add	r1, sp, #8
	params.len = len;
   11570:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
   11572:	2000      	movs	r0, #0
	params.len = len;
   11574:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
   11578:	f008 fbb2 	bl	19ce0 <bt_gatt_notify_cb>
		return -EACCES;
	}

	return bt_gatt_notify(NULL, &lbs_svc.attrs[2], &button_state, sizeof(button_state));
}
   1157c:	b009      	add	sp, #36	; 0x24
   1157e:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
   11582:	f06f 000c 	mvn.w	r0, #12
   11586:	e7f9      	b.n	1157c <bt_lbs_send_button_state+0x30>
   11588:	2000401e 	.word	0x2000401e
   1158c:	00028368 	.word	0x00028368

00011590 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   11590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11594:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   11596:	0784      	lsls	r4, r0, #30
{
   11598:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   1159a:	f002 0304 	and.w	r3, r2, #4
   1159e:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   115a0:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   115a4:	f103 0301 	add.w	r3, r3, #1
   115a8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
   115ac:	9203      	str	r2, [sp, #12]
   115ae:	4605      	mov	r5, r0
   115b0:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   115b2:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
   115b4:	f040 81be 	bne.w	11934 <cbvprintf_package+0x3a4>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   115b8:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   115ba:	b130      	cbz	r0, 115ca <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   115bc:	2907      	cmp	r1, #7
   115be:	d809      	bhi.n	115d4 <cbvprintf_package+0x44>
		return -ENOSPC;
   115c0:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   115c4:	b011      	add	sp, #68	; 0x44
   115c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   115ca:	f001 0607 	and.w	r6, r1, #7
   115ce:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   115d0:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
   115d4:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   115d6:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
   115da:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
   115dc:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   115e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   115e4:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   115e6:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   115ea:	464f      	mov	r7, r9
	bool parsing = false;
   115ec:	46cb      	mov	fp, r9
	size = sizeof(char *);
   115ee:	4653      	mov	r3, sl
			if (buf0 != NULL) {
   115f0:	b10d      	cbz	r5, 115f6 <cbvprintf_package+0x66>
				*(const char **)buf = s;
   115f2:	9a00      	ldr	r2, [sp, #0]
   115f4:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   115f6:	9805      	ldr	r0, [sp, #20]
   115f8:	2800      	cmp	r0, #0
   115fa:	f300 80eb 	bgt.w	117d4 <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   115fe:	489a      	ldr	r0, [pc, #616]	; (11868 <cbvprintf_package+0x2d8>)
   11600:	9a00      	ldr	r2, [sp, #0]
   11602:	4282      	cmp	r2, r0
   11604:	d303      	bcc.n	1160e <cbvprintf_package+0x7e>
   11606:	4899      	ldr	r0, [pc, #612]	; (1186c <cbvprintf_package+0x2dc>)
   11608:	4282      	cmp	r2, r0
   1160a:	f0c0 80e3 	bcc.w	117d4 <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   1160e:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   11610:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   11614:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   11616:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   1161a:	f100 8106 	bmi.w	1182a <cbvprintf_package+0x29a>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   1161e:	2f0f      	cmp	r7, #15
   11620:	f200 80b4 	bhi.w	1178c <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
   11624:	2d00      	cmp	r5, #0
   11626:	f000 8108 	beq.w	1183a <cbvprintf_package+0x2aa>
					str_ptr_pos[s_idx] = s_ptr_idx;
   1162a:	f107 0240 	add.w	r2, r7, #64	; 0x40
   1162e:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
   11632:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   11634:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   11638:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
   1163c:	9804      	ldr	r0, [sp, #16]
   1163e:	3001      	adds	r0, #1
   11640:	9004      	str	r0, [sp, #16]
   11642:	e0ea      	b.n	1181a <cbvprintf_package+0x28a>
			switch (*fmt) {
   11644:	287a      	cmp	r0, #122	; 0x7a
   11646:	d860      	bhi.n	1170a <cbvprintf_package+0x17a>
   11648:	284b      	cmp	r0, #75	; 0x4b
   1164a:	d80e      	bhi.n	1166a <cbvprintf_package+0xda>
   1164c:	2847      	cmp	r0, #71	; 0x47
   1164e:	d85c      	bhi.n	1170a <cbvprintf_package+0x17a>
   11650:	2829      	cmp	r0, #41	; 0x29
   11652:	d82f      	bhi.n	116b4 <cbvprintf_package+0x124>
   11654:	2825      	cmp	r0, #37	; 0x25
   11656:	d055      	beq.n	11704 <cbvprintf_package+0x174>
   11658:	d857      	bhi.n	1170a <cbvprintf_package+0x17a>
   1165a:	2820      	cmp	r0, #32
   1165c:	d07d      	beq.n	1175a <cbvprintf_package+0x1ca>
   1165e:	3823      	subs	r0, #35	; 0x23
   11660:	f1d0 0b00 	rsbs	fp, r0, #0
   11664:	eb4b 0b00 	adc.w	fp, fp, r0
   11668:	e077      	b.n	1175a <cbvprintf_package+0x1ca>
   1166a:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
   1166e:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   11672:	d84a      	bhi.n	1170a <cbvprintf_package+0x17a>
   11674:	e8df f00c 	tbb	[pc, ip]
   11678:	49494971 	.word	0x49494971
   1167c:	49494949 	.word	0x49494949
   11680:	49494949 	.word	0x49494949
   11684:	4949494c 	.word	0x4949494c
   11688:	49494949 	.word	0x49494949
   1168c:	4c495a49 	.word	0x4c495a49
   11690:	5a5a5a4c 	.word	0x5a5a5a4c
   11694:	496e4c71 	.word	0x496e4c71
   11698:	4c184971 	.word	0x4c184971
   1169c:	83494918 	.word	0x83494918
   116a0:	49494c80 	.word	0x49494c80
   116a4:	494c      	.short	0x494c
   116a6:	80          	.byte	0x80
   116a7:	00          	.byte	0x00
   116a8:	2000      	movs	r0, #0
   116aa:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
   116ae:	f04f 0a04 	mov.w	sl, #4
   116b2:	e039      	b.n	11728 <cbvprintf_package+0x198>
			switch (*fmt) {
   116b4:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
   116b8:	fa5f fc8c 	uxtb.w	ip, ip
   116bc:	2201      	movs	r2, #1
   116be:	fa02 fc0c 	lsl.w	ip, r2, ip
   116c2:	ea1c 0f0e 	tst.w	ip, lr
   116c6:	d148      	bne.n	1175a <cbvprintf_package+0x1ca>
   116c8:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
   116cc:	d12e      	bne.n	1172c <cbvprintf_package+0x19c>
   116ce:	ea1c 0b02 	ands.w	fp, ip, r2
   116d2:	d042      	beq.n	1175a <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
   116d4:	3c01      	subs	r4, #1
   116d6:	4454      	add	r4, sl
   116d8:	f1ca 0c00 	rsb	ip, sl, #0
   116dc:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   116e0:	2d00      	cmp	r5, #0
   116e2:	d061      	beq.n	117a8 <cbvprintf_package+0x218>
   116e4:	eba3 0c05 	sub.w	ip, r3, r5
   116e8:	44a4      	add	ip, r4
   116ea:	45b4      	cmp	ip, r6
   116ec:	f63f af68 	bhi.w	115c0 <cbvprintf_package+0x30>
		if (is_str_arg) {
   116f0:	2800      	cmp	r0, #0
   116f2:	d168      	bne.n	117c6 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
   116f4:	2b04      	cmp	r3, #4
   116f6:	d147      	bne.n	11788 <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
   116f8:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
   116fc:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
   116fe:	3404      	adds	r4, #4
   11700:	2304      	movs	r3, #4
   11702:	e02a      	b.n	1175a <cbvprintf_package+0x1ca>
				arg_idx--;
   11704:	9a01      	ldr	r2, [sp, #4]
   11706:	3a01      	subs	r2, #1
   11708:	9201      	str	r2, [sp, #4]
				parsing = false;
   1170a:	f04f 0b00 	mov.w	fp, #0
				continue;
   1170e:	e024      	b.n	1175a <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
   11710:	f811 0c01 	ldrb.w	r0, [r1, #-1]
   11714:	286c      	cmp	r0, #108	; 0x6c
   11716:	d134      	bne.n	11782 <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
   11718:	f811 3c02 	ldrb.w	r3, [r1, #-2]
   1171c:	2000      	movs	r0, #0
   1171e:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
   11720:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
   11722:	d1c4      	bne.n	116ae <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
   11724:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
   11728:	4653      	mov	r3, sl
   1172a:	e7d3      	b.n	116d4 <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
   1172c:	f108 0807 	add.w	r8, r8, #7
   11730:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
   11734:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
   11736:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
   1173a:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
   1173e:	b135      	cbz	r5, 1174e <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
   11740:	9806      	ldr	r0, [sp, #24]
   11742:	4420      	add	r0, r4
   11744:	42b0      	cmp	r0, r6
   11746:	f63f af3b 	bhi.w	115c0 <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
   1174a:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
   1174e:	3408      	adds	r4, #8
				parsing = false;
   11750:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
   11754:	f04f 0a08 	mov.w	sl, #8
   11758:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
   1175a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1175e:	2800      	cmp	r0, #0
   11760:	d078      	beq.n	11854 <cbvprintf_package+0x2c4>
			if (!parsing) {
   11762:	f1bb 0f00 	cmp.w	fp, #0
   11766:	f47f af6d 	bne.w	11644 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
   1176a:	2825      	cmp	r0, #37	; 0x25
   1176c:	d1f5      	bne.n	1175a <cbvprintf_package+0x1ca>
					arg_idx++;
   1176e:	9b01      	ldr	r3, [sp, #4]
   11770:	3301      	adds	r3, #1
   11772:	9301      	str	r3, [sp, #4]
					parsing = true;
   11774:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
   11778:	f04f 0a04 	mov.w	sl, #4
   1177c:	e7ec      	b.n	11758 <cbvprintf_package+0x1c8>
			switch (*fmt) {
   1177e:	4658      	mov	r0, fp
   11780:	e793      	b.n	116aa <cbvprintf_package+0x11a>
   11782:	2000      	movs	r0, #0
				parsing = false;
   11784:	4683      	mov	fp, r0
   11786:	e7a5      	b.n	116d4 <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
   11788:	2b08      	cmp	r3, #8
   1178a:	d002      	beq.n	11792 <cbvprintf_package+0x202>
					return -EINVAL;
   1178c:	f06f 0015 	mvn.w	r0, #21
   11790:	e718      	b.n	115c4 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
   11792:	f108 0807 	add.w	r8, r8, #7
   11796:	f028 0807 	bic.w	r8, r8, #7
   1179a:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
   1179e:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
   117a2:	3408      	adds	r4, #8
   117a4:	2308      	movs	r3, #8
   117a6:	e7d8      	b.n	1175a <cbvprintf_package+0x1ca>
		if (is_str_arg) {
   117a8:	b968      	cbnz	r0, 117c6 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
   117aa:	2b04      	cmp	r3, #4
   117ac:	d102      	bne.n	117b4 <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
   117ae:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
   117b2:	e7a4      	b.n	116fe <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
   117b4:	2b08      	cmp	r3, #8
   117b6:	d1e9      	bne.n	1178c <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
   117b8:	f108 0807 	add.w	r8, r8, #7
   117bc:	f028 0807 	bic.w	r8, r8, #7
   117c0:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
   117c4:	e7ed      	b.n	117a2 <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   117c6:	9a05      	ldr	r2, [sp, #20]
   117c8:	3a01      	subs	r2, #1
   117ca:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
   117cc:	f858 2b04 	ldr.w	r2, [r8], #4
   117d0:	9200      	str	r2, [sp, #0]
   117d2:	e70d      	b.n	115f0 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
   117d4:	9a03      	ldr	r2, [sp, #12]
   117d6:	0790      	lsls	r0, r2, #30
   117d8:	d520      	bpl.n	1181c <cbvprintf_package+0x28c>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   117da:	eba4 0e05 	sub.w	lr, r4, r5
   117de:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   117e2:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   117e6:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   117ea:	d2cf      	bcs.n	1178c <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   117ec:	2f0f      	cmp	r7, #15
   117ee:	d8cd      	bhi.n	1178c <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
   117f0:	b1f5      	cbz	r5, 11830 <cbvprintf_package+0x2a0>
					str_ptr_pos[s_idx] = s_ptr_idx;
   117f2:	f107 0240 	add.w	r2, r7, #64	; 0x40
   117f6:	eb0d 0e02 	add.w	lr, sp, r2
   117fa:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
   117fc:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   117fe:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   11802:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
   11806:	f1bc 0f00 	cmp.w	ip, #0
   1180a:	f43f af17 	beq.w	1163c <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   1180e:	f060 007f 	orn	r0, r0, #127	; 0x7f
   11812:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
   11816:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
   1181a:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
   1181c:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
   11820:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
   11822:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
   11824:	f64f 7eda 	movw	lr, #65498	; 0xffda
   11828:	e797      	b.n	1175a <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   1182a:	f04f 0c00 	mov.w	ip, #0
   1182e:	e7da      	b.n	117e6 <cbvprintf_package+0x256>
				} else if (is_ro) {
   11830:	f1bc 0f00 	cmp.w	ip, #0
   11834:	d001      	beq.n	1183a <cbvprintf_package+0x2aa>
					len += 1;
   11836:	3601      	adds	r6, #1
   11838:	e7ef      	b.n	1181a <cbvprintf_package+0x28a>
				} else if (rws_pos_en) {
   1183a:	9802      	ldr	r0, [sp, #8]
					len += 2;
   1183c:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
   1183e:	2800      	cmp	r0, #0
   11840:	d1eb      	bne.n	1181a <cbvprintf_package+0x28a>
					len += strlen(s) + 1 + 1;
   11842:	9800      	ldr	r0, [sp, #0]
   11844:	e9cd 3106 	strd	r3, r1, [sp, #24]
   11848:	f013 f84a 	bl	248e0 <strlen>
   1184c:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   11850:	4406      	add	r6, r0
   11852:	e7e2      	b.n	1181a <cbvprintf_package+0x28a>
	if (BUF_OFFSET / sizeof(int) > 255) {
   11854:	1b63      	subs	r3, r4, r5
   11856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1185a:	d297      	bcs.n	1178c <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
   1185c:	b945      	cbnz	r5, 11870 <cbvprintf_package+0x2e0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   1185e:	f1a6 0408 	sub.w	r4, r6, #8
   11862:	18e0      	adds	r0, r4, r3
   11864:	e6ae      	b.n	115c4 <cbvprintf_package+0x34>
   11866:	bf00      	nop
   11868:	00027ddc 	.word	0x00027ddc
   1186c:	0002b2cc 	.word	0x0002b2cc
	if (rws_pos_en) {
   11870:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
   11872:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   11874:	089b      	lsrs	r3, r3, #2
   11876:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   11878:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
   1187c:	b1c2      	cbz	r2, 118b0 <cbvprintf_package+0x320>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   1187e:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   11880:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
   11884:	f1b9 0f00 	cmp.w	r9, #0
   11888:	d005      	beq.n	11896 <cbvprintf_package+0x306>
   1188a:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
   1188c:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
   1188e:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
   11892:	4297      	cmp	r7, r2
   11894:	d10e      	bne.n	118b4 <cbvprintf_package+0x324>
		if (BUF_OFFSET + 1 + size > len) {
   11896:	f1c5 0301 	rsb	r3, r5, #1
   1189a:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
   1189e:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
   118a2:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
   118a4:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
   118a8:	4557      	cmp	r7, sl
   118aa:	d112      	bne.n	118d2 <cbvprintf_package+0x342>
	return BUF_OFFSET;
   118ac:	1b60      	subs	r0, r4, r5
   118ae:	e689      	b.n	115c4 <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   118b0:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   118b2:	e7e5      	b.n	11880 <cbvprintf_package+0x2f0>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   118b4:	f810 3b01 	ldrb.w	r3, [r0], #1
   118b8:	0619      	lsls	r1, r3, #24
   118ba:	d508      	bpl.n	118ce <cbvprintf_package+0x33e>
			if (BUF_OFFSET + 1 > len) {
   118bc:	eb04 0e0c 	add.w	lr, r4, ip
   118c0:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   118c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   118c6:	f63f ae7b 	bhi.w	115c0 <cbvprintf_package+0x30>
			*buf++ = pos;
   118ca:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
   118ce:	3201      	adds	r2, #1
   118d0:	e7df      	b.n	11892 <cbvprintf_package+0x302>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   118d2:	f1b9 0f00 	cmp.w	r9, #0
   118d6:	d003      	beq.n	118e0 <cbvprintf_package+0x350>
   118d8:	f998 2000 	ldrsb.w	r2, [r8]
   118dc:	2a00      	cmp	r2, #0
   118de:	db17      	blt.n	11910 <cbvprintf_package+0x380>
		if (rws_pos_en) {
   118e0:	9b02      	ldr	r3, [sp, #8]
   118e2:	b1d3      	cbz	r3, 1191a <cbvprintf_package+0x38a>
			*buf++ = str_ptr_arg[i];
   118e4:	f81a 200b 	ldrb.w	r2, [sl, fp]
   118e8:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
   118ec:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
   118ee:	9b01      	ldr	r3, [sp, #4]
   118f0:	1898      	adds	r0, r3, r2
   118f2:	4420      	add	r0, r4
   118f4:	42b0      	cmp	r0, r6
   118f6:	f63f ae63 	bhi.w	115c0 <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
   118fa:	f898 0000 	ldrb.w	r0, [r8]
   118fe:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
   11902:	9900      	ldr	r1, [sp, #0]
   11904:	9203      	str	r2, [sp, #12]
   11906:	4620      	mov	r0, r4
   11908:	f013 f821 	bl	2494e <memcpy>
		buf += size;
   1190c:	9a03      	ldr	r2, [sp, #12]
   1190e:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
   11910:	f10a 0a01 	add.w	sl, sl, #1
   11914:	f108 0801 	add.w	r8, r8, #1
   11918:	e7c6      	b.n	118a8 <cbvprintf_package+0x318>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   1191a:	f898 2000 	ldrb.w	r2, [r8]
   1191e:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   11922:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   11924:	9b02      	ldr	r3, [sp, #8]
   11926:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
   1192a:	9800      	ldr	r0, [sp, #0]
   1192c:	f012 ffd8 	bl	248e0 <strlen>
   11930:	1c42      	adds	r2, r0, #1
   11932:	e7dc      	b.n	118ee <cbvprintf_package+0x35e>
		return -EFAULT;
   11934:	f06f 000d 	mvn.w	r0, #13
   11938:	e644      	b.n	115c4 <cbvprintf_package+0x34>
   1193a:	bf00      	nop

0001193c <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   1193c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11940:	b095      	sub	sp, #84	; 0x54
   11942:	af00      	add	r7, sp, #0
   11944:	4604      	mov	r4, r0
   11946:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
   1194a:	61bb      	str	r3, [r7, #24]
   1194c:	f3cb 03c0 	ubfx	r3, fp, #3, #1
   11950:	627a      	str	r2, [r7, #36]	; 0x24
   11952:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   11954:	6239      	str	r1, [r7, #32]
   11956:	b951      	cbnz	r1, 1196e <cbprintf_package_convert+0x32>
	buf += ros_nbr;
   11958:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   1195a:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
   1195c:	7880      	ldrb	r0, [r0, #2]
   1195e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   11962:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
   11964:	6a3b      	ldr	r3, [r7, #32]
   11966:	429e      	cmp	r6, r3
   11968:	d81a      	bhi.n	119a0 <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
   1196a:	1b03      	subs	r3, r0, r4
   1196c:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
   1196e:	f894 a002 	ldrb.w	sl, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
   11972:	78e3      	ldrb	r3, [r4, #3]
   11974:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
   11976:	4656      	mov	r6, sl
	ro_cpy = ros_nbr &&
   11978:	f1ba 0f00 	cmp.w	sl, #0
   1197c:	d002      	beq.n	11984 <cbprintf_package_convert+0x48>
   1197e:	f01b 0f01 	tst.w	fp, #1
   11982:	d117      	bne.n	119b4 <cbprintf_package_convert+0x78>
	rw_cpy = rws_nbr > 0 &&
   11984:	697b      	ldr	r3, [r7, #20]
   11986:	bb5b      	cbnz	r3, 119e0 <cbprintf_package_convert+0xa4>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
   11988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1198a:	b11b      	cbz	r3, 11994 <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
   1198c:	69ba      	ldr	r2, [r7, #24]
   1198e:	6a39      	ldr	r1, [r7, #32]
   11990:	4620      	mov	r0, r4
   11992:	4798      	blx	r3
		}

		return in_len;
   11994:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   11996:	4628      	mov	r0, r5
   11998:	3754      	adds	r7, #84	; 0x54
   1199a:	46bd      	mov	sp, r7
   1199c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
   119a0:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
   119a2:	4628      	mov	r0, r5
   119a4:	f012 ff9c 	bl	248e0 <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
   119a8:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
   119aa:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
   119ac:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
   119ae:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
   119b0:	623b      	str	r3, [r7, #32]
   119b2:	e7d7      	b.n	11964 <cbprintf_package_convert+0x28>
	rw_cpy = rws_nbr > 0 &&
   119b4:	f894 8000 	ldrb.w	r8, [r4]
   119b8:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   119ba:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   119bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
   119be:	ea4f 0288 	mov.w	r2, r8, lsl #2
   119c2:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
   119c4:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
   119c8:	2b00      	cmp	r3, #0
   119ca:	f040 8101 	bne.w	11bd0 <cbprintf_package_convert+0x294>
		out_len = (int)in_len;
   119ce:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
   119d0:	46c1      	mov	r9, r8
   119d2:	eb0a 0308 	add.w	r3, sl, r8
	size_t strl_cnt = 0;
   119d6:	2600      	movs	r6, #0
			for (unsigned int i = 0; i < ros_nbr; i++) {
   119d8:	454b      	cmp	r3, r9
   119da:	d14e      	bne.n	11a7a <cbprintf_package_convert+0x13e>
   119dc:	44d0      	add	r8, sl
   119de:	e013      	b.n	11a08 <cbprintf_package_convert+0xcc>
	rw_cpy = rws_nbr > 0 &&
   119e0:	f01b 0f02 	tst.w	fp, #2
   119e4:	d0d0      	beq.n	11988 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
   119e6:	f894 8000 	ldrb.w	r8, [r4]
   119ea:	ea4f 0388 	mov.w	r3, r8, lsl #2
   119ee:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   119f0:	6863      	ldr	r3, [r4, #4]
   119f2:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   119f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
   119f6:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
   119fa:	2b00      	cmp	r3, #0
   119fc:	d178      	bne.n	11af0 <cbprintf_package_convert+0x1b4>
		out_len = (int)in_len;
   119fe:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   11a00:	f1ba 0f00 	cmp.w	sl, #0
   11a04:	d14e      	bne.n	11aa4 <cbprintf_package_convert+0x168>
	size_t strl_cnt = 0;
   11a06:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
   11a08:	f01b 0f05 	tst.w	fp, #5
   11a0c:	bf0c      	ite	eq
   11a0e:	2302      	moveq	r3, #2
   11a10:	2301      	movne	r3, #1
   11a12:	627b      	str	r3, [r7, #36]	; 0x24
   11a14:	697b      	ldr	r3, [r7, #20]
   11a16:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   11a1a:	f00b 0302 	and.w	r3, fp, #2
   11a1e:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
   11a20:	45d0      	cmp	r8, sl
   11a22:	d0b8      	beq.n	11996 <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
   11a24:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
   11a28:	f818 3c01 	ldrb.w	r3, [r8, #-1]
   11a2c:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
   11a30:	4bac      	ldr	r3, [pc, #688]	; (11ce4 <cbprintf_package_convert+0x3a8>)
   11a32:	4599      	cmp	r9, r3
   11a34:	d302      	bcc.n	11a3c <cbprintf_package_convert+0x100>
   11a36:	4bac      	ldr	r3, [pc, #688]	; (11ce8 <cbprintf_package_convert+0x3ac>)
   11a38:	4599      	cmp	r9, r3
   11a3a:	d339      	bcc.n	11ab0 <cbprintf_package_convert+0x174>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   11a3c:	693b      	ldr	r3, [r7, #16]
   11a3e:	2b00      	cmp	r3, #0
   11a40:	d043      	beq.n	11aca <cbprintf_package_convert+0x18e>
   11a42:	69f8      	ldr	r0, [r7, #28]
   11a44:	f011 fe88 	bl	23758 <is_ptr>
   11a48:	2800      	cmp	r0, #0
   11a4a:	d03e      	beq.n	11aca <cbprintf_package_convert+0x18e>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   11a4c:	46e9      	mov	r9, sp
   11a4e:	b08a      	sub	sp, #40	; 0x28
   11a50:	466a      	mov	r2, sp
   11a52:	4ba6      	ldr	r3, [pc, #664]	; (11cec <cbprintf_package_convert+0x3b0>)
   11a54:	6153      	str	r3, [r2, #20]
   11a56:	69fb      	ldr	r3, [r7, #28]
   11a58:	e9c2 3106 	strd	r3, r1, [r2, #24]
   11a5c:	f44f 7300 	mov.w	r3, #512	; 0x200
   11a60:	8413      	strh	r3, [r2, #32]
   11a62:	4ba3      	ldr	r3, [pc, #652]	; (11cf0 <cbprintf_package_convert+0x3b4>)
   11a64:	f842 3f10 	str.w	r3, [r2, #16]!
   11a68:	48a2      	ldr	r0, [pc, #648]	; (11cf4 <cbprintf_package_convert+0x3b8>)
   11a6a:	2300      	movs	r3, #0
   11a6c:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   11a70:	f001 f8ce 	bl	12c10 <z_impl_z_log_msg_static_create>
				out_len -= 2;
   11a74:	3d02      	subs	r5, #2
   11a76:	46cd      	mov	sp, r9
				continue;
   11a78:	e7d2      	b.n	11a20 <cbprintf_package_convert+0xe4>
				const char *str = *(const char **)&buf32[*str_pos];
   11a7a:	f819 2b01 	ldrb.w	r2, [r9], #1
   11a7e:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   11a80:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
   11a84:	f012 ff2c 	bl	248e0 <strlen>
				if (strl && strl_cnt < strl_len) {
   11a88:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   11a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   11a8c:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
   11a8e:	b13a      	cbz	r2, 11aa0 <cbprintf_package_convert+0x164>
   11a90:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   11a94:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
   11a96:	bf3e      	ittt	cc
   11a98:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
   11a9a:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
   11a9e:	3601      	addcc	r6, #1
				out_len += len;
   11aa0:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
   11aa2:	e799      	b.n	119d8 <cbprintf_package_convert+0x9c>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   11aa4:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
   11aa8:	bf1c      	itt	ne
   11aaa:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
   11aac:	44d0      	addne	r8, sl
   11aae:	e7ab      	b.n	11a08 <cbprintf_package_convert+0xcc>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   11ab0:	693b      	ldr	r3, [r7, #16]
   11ab2:	b123      	cbz	r3, 11abe <cbprintf_package_convert+0x182>
   11ab4:	69f8      	ldr	r0, [r7, #28]
   11ab6:	f011 fe4f 	bl	23758 <is_ptr>
   11aba:	2800      	cmp	r0, #0
   11abc:	d1c6      	bne.n	11a4c <cbprintf_package_convert+0x110>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   11abe:	f01b 0f01 	tst.w	fp, #1
   11ac2:	d105      	bne.n	11ad0 <cbprintf_package_convert+0x194>
					out_len -= drop_ro_str_pos ? 2 : 1;
   11ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11ac6:	1aed      	subs	r5, r5, r3
   11ac8:	e7aa      	b.n	11a20 <cbprintf_package_convert+0xe4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   11aca:	6a3b      	ldr	r3, [r7, #32]
   11acc:	2b00      	cmp	r3, #0
   11ace:	d0a7      	beq.n	11a20 <cbprintf_package_convert+0xe4>
		return 1 + strlen(str);
   11ad0:	4648      	mov	r0, r9
   11ad2:	f012 ff05 	bl	248e0 <strlen>
				if (strl && strl_cnt < strl_len) {
   11ad6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   11ad8:	b143      	cbz	r3, 11aec <cbprintf_package_convert+0x1b0>
   11ada:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   11ade:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
   11ae0:	bf3f      	itttt	cc
   11ae2:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
   11ae4:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
   11ae6:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
   11aea:	3601      	addcc	r6, #1
				out_len += (len - 1);
   11aec:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
   11aee:	e797      	b.n	11a20 <cbprintf_package_convert+0xe4>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   11af0:	f1ba 0f00 	cmp.w	sl, #0
   11af4:	d071      	beq.n	11bda <cbprintf_package_convert+0x29e>
   11af6:	f01b 0604 	ands.w	r6, fp, #4
   11afa:	d071      	beq.n	11be0 <cbprintf_package_convert+0x2a4>
		keep_cnt = ros_nbr;
   11afc:	46d1      	mov	r9, sl
		scpy_cnt = 0;
   11afe:	2600      	movs	r6, #0
		dst = keep_str_pos;
   11b00:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
   11b04:	4652      	mov	r2, sl
   11b06:	4641      	mov	r1, r8
   11b08:	f012 ff21 	bl	2494e <memcpy>
	str_pos += ros_nbr;
   11b0c:	697b      	ldr	r3, [r7, #20]
   11b0e:	005b      	lsls	r3, r3, #1
   11b10:	60bb      	str	r3, [r7, #8]
   11b12:	697b      	ldr	r3, [r7, #20]
   11b14:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
   11b16:	eb08 0343 	add.w	r3, r8, r3, lsl #1
   11b1a:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   11b1c:	f00b 0302 	and.w	r3, fp, #2
   11b20:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
   11b22:	697b      	ldr	r3, [r7, #20]
   11b24:	4598      	cmp	r8, r3
   11b26:	d15d      	bne.n	11be4 <cbprintf_package_convert+0x2a8>
	out_desc.len = in_desc->len;
   11b28:	7823      	ldrb	r3, [r4, #0]
   11b2a:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   11b2c:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   11b2e:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   11b32:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   11b36:	bf0c      	ite	eq
   11b38:	ea4f 0159 	moveq.w	r1, r9, lsr #1
   11b3c:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   11b3e:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   11b42:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   11b44:	f040 809d 	bne.w	11c82 <cbprintf_package_convert+0x346>
   11b48:	f01b 0f04 	tst.w	fp, #4
   11b4c:	bf14      	ite	ne
   11b4e:	4648      	movne	r0, r9
   11b50:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
   11b52:	f894 b002 	ldrb.w	fp, [r4, #2]
   11b56:	f894 8003 	ldrb.w	r8, [r4, #3]
   11b5a:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
   11b5c:	7062      	strb	r2, [r4, #1]
   11b5e:	70a0      	strb	r0, [r4, #2]
   11b60:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
   11b62:	69ba      	ldr	r2, [r7, #24]
   11b64:	68f9      	ldr	r1, [r7, #12]
   11b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11b68:	4620      	mov	r0, r4
   11b6a:	4798      	blx	r3
	if (rv < 0) {
   11b6c:	1e05      	subs	r5, r0, #0
   11b6e:	f6ff af12 	blt.w	11996 <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
   11b72:	69fb      	ldr	r3, [r7, #28]
   11b74:	7023      	strb	r3, [r4, #0]
   11b76:	693b      	ldr	r3, [r7, #16]
   11b78:	7063      	strb	r3, [r4, #1]
   11b7a:	f884 8003 	strb.w	r8, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   11b7e:	69ba      	ldr	r2, [r7, #24]
   11b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
   11b82:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   11b86:	4649      	mov	r1, r9
   11b88:	f107 0040 	add.w	r0, r7, #64	; 0x40
   11b8c:	4798      	blx	r3
	if (rv < 0) {
   11b8e:	f1b0 0800 	subs.w	r8, r0, #0
   11b92:	f2c0 80a3 	blt.w	11cdc <cbprintf_package_convert+0x3a0>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   11b96:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
   11b98:	69ba      	ldr	r2, [r7, #24]
   11b9a:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   11b9c:	eba3 010a 	sub.w	r1, r3, sl
   11ba0:	68fb      	ldr	r3, [r7, #12]
   11ba2:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
   11ba4:	68bb      	ldr	r3, [r7, #8]
   11ba6:	1ac9      	subs	r1, r1, r3
   11ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11baa:	4798      	blx	r3
	if (rv < 0) {
   11bac:	2800      	cmp	r0, #0
   11bae:	f2c0 8097 	blt.w	11ce0 <cbprintf_package_convert+0x3a4>
	out_len += rv;
   11bb2:	44a8      	add	r8, r5
	out_len += rv;
   11bb4:	eb08 0500 	add.w	r5, r8, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   11bb8:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
   11bbc:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   11bc0:	45b3      	cmp	fp, r6
   11bc2:	d360      	bcc.n	11c86 <cbprintf_package_convert+0x34a>
	(void)cb(NULL, 0, ctx);
   11bc4:	2100      	movs	r1, #0
   11bc6:	69ba      	ldr	r2, [r7, #24]
   11bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11bca:	4608      	mov	r0, r1
   11bcc:	4798      	blx	r3
	return out_len;
   11bce:	e6e2      	b.n	11996 <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
   11bd0:	f04f 0900 	mov.w	r9, #0
   11bd4:	f107 0030 	add.w	r0, r7, #48	; 0x30
   11bd8:	e794      	b.n	11b04 <cbprintf_package_convert+0x1c8>
		scpy_cnt = 0;
   11bda:	4656      	mov	r6, sl
		keep_cnt = 0;
   11bdc:	46d1      	mov	r9, sl
   11bde:	e795      	b.n	11b0c <cbprintf_package_convert+0x1d0>
   11be0:	46b1      	mov	r9, r6
   11be2:	e793      	b.n	11b0c <cbprintf_package_convert+0x1d0>
		uint8_t arg_idx = *str_pos++;
   11be4:	f818 1b02 	ldrb.w	r1, [r8], #2
   11be8:	4a3e      	ldr	r2, [pc, #248]	; (11ce4 <cbprintf_package_convert+0x3a8>)
		uint8_t arg_pos = *str_pos++;
   11bea:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
   11bee:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   11bf2:	4293      	cmp	r3, r2
   11bf4:	d302      	bcc.n	11bfc <cbprintf_package_convert+0x2c0>
   11bf6:	4a3c      	ldr	r2, [pc, #240]	; (11ce8 <cbprintf_package_convert+0x3ac>)
   11bf8:	4293      	cmp	r3, r2
   11bfa:	d31c      	bcc.n	11c36 <cbprintf_package_convert+0x2fa>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   11bfc:	693b      	ldr	r3, [r7, #16]
   11bfe:	b123      	cbz	r3, 11c0a <cbprintf_package_convert+0x2ce>
   11c00:	69f8      	ldr	r0, [r7, #28]
   11c02:	f011 fda9 	bl	23758 <is_ptr>
   11c06:	2800      	cmp	r0, #0
   11c08:	d18b      	bne.n	11b22 <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   11c0a:	687b      	ldr	r3, [r7, #4]
   11c0c:	b9f3      	cbnz	r3, 11c4c <cbprintf_package_convert+0x310>
				keep_str_pos[keep_cnt++] = arg_idx;
   11c0e:	f109 0228 	add.w	r2, r9, #40	; 0x28
   11c12:	f107 0028 	add.w	r0, r7, #40	; 0x28
   11c16:	4402      	add	r2, r0
   11c18:	f109 0301 	add.w	r3, r9, #1
   11c1c:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
   11c20:	f107 0250 	add.w	r2, r7, #80	; 0x50
   11c24:	fa52 f383 	uxtab	r3, r2, r3
   11c28:	f109 0902 	add.w	r9, r9, #2
   11c2c:	fa5f f989 	uxtb.w	r9, r9
   11c30:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
   11c34:	e775      	b.n	11b22 <cbprintf_package_convert+0x1e6>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   11c36:	693b      	ldr	r3, [r7, #16]
   11c38:	b12b      	cbz	r3, 11c46 <cbprintf_package_convert+0x30a>
   11c3a:	69f8      	ldr	r0, [r7, #28]
   11c3c:	f011 fd8c 	bl	23758 <is_ptr>
   11c40:	2800      	cmp	r0, #0
   11c42:	f47f af6e 	bne.w	11b22 <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   11c46:	f01b 0f01 	tst.w	fp, #1
   11c4a:	d009      	beq.n	11c60 <cbprintf_package_convert+0x324>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   11c4c:	f106 0228 	add.w	r2, r6, #40	; 0x28
   11c50:	f107 0128 	add.w	r1, r7, #40	; 0x28
   11c54:	1c73      	adds	r3, r6, #1
   11c56:	1856      	adds	r6, r2, r1
   11c58:	f806 5c20 	strb.w	r5, [r6, #-32]
   11c5c:	b2de      	uxtb	r6, r3
   11c5e:	e760      	b.n	11b22 <cbprintf_package_convert+0x1e6>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   11c60:	f01b 0f04 	tst.w	fp, #4
   11c64:	f43f af5d 	beq.w	11b22 <cbprintf_package_convert+0x1e6>
				keep_str_pos[keep_cnt++] = arg_pos;
   11c68:	f109 0228 	add.w	r2, r9, #40	; 0x28
   11c6c:	f107 0128 	add.w	r1, r7, #40	; 0x28
   11c70:	f109 0301 	add.w	r3, r9, #1
   11c74:	eb02 0901 	add.w	r9, r2, r1
   11c78:	f809 5c10 	strb.w	r5, [r9, #-16]
   11c7c:	fa5f f983 	uxtb.w	r9, r3
   11c80:	e74f      	b.n	11b22 <cbprintf_package_convert+0x1e6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   11c82:	2000      	movs	r0, #0
   11c84:	e765      	b.n	11b52 <cbprintf_package_convert+0x216>
		uint8_t loc = cpy_str_pos[i];
   11c86:	f81b 300a 	ldrb.w	r3, [fp, sl]
   11c8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
   11c8e:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   11c92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   11c94:	b1fb      	cbz	r3, 11cd6 <cbprintf_package_convert+0x39a>
   11c96:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
   11c9a:	69ba      	ldr	r2, [r7, #24]
   11c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11c9e:	2101      	movs	r1, #1
   11ca0:	f107 002f 	add.w	r0, r7, #47	; 0x2f
   11ca4:	4798      	blx	r3
		if (rv < 0) {
   11ca6:	2800      	cmp	r0, #0
   11ca8:	db1a      	blt.n	11ce0 <cbprintf_package_convert+0x3a4>
		out_len += rv;
   11caa:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   11cac:	f1b8 0f00 	cmp.w	r8, #0
   11cb0:	d106      	bne.n	11cc0 <cbprintf_package_convert+0x384>
   11cb2:	4648      	mov	r0, r9
   11cb4:	f012 fe14 	bl	248e0 <strlen>
   11cb8:	f100 0801 	add.w	r8, r0, #1
   11cbc:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
   11cc0:	69ba      	ldr	r2, [r7, #24]
   11cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11cc4:	4641      	mov	r1, r8
   11cc6:	4648      	mov	r0, r9
   11cc8:	4798      	blx	r3
		if (rv < 0) {
   11cca:	2800      	cmp	r0, #0
   11ccc:	db08      	blt.n	11ce0 <cbprintf_package_convert+0x3a4>
		out_len += rv;
   11cce:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   11cd0:	f10b 0b01 	add.w	fp, fp, #1
   11cd4:	e774      	b.n	11bc0 <cbprintf_package_convert+0x284>
		uint16_t str_len = strl ? strl[i] : 0;
   11cd6:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
   11cda:	e7de      	b.n	11c9a <cbprintf_package_convert+0x35e>
   11cdc:	4645      	mov	r5, r8
   11cde:	e65a      	b.n	11996 <cbprintf_package_convert+0x5a>
   11ce0:	4605      	mov	r5, r0
   11ce2:	e658      	b.n	11996 <cbprintf_package_convert+0x5a>
   11ce4:	00027ddc 	.word	0x00027ddc
   11ce8:	0002b2cc 	.word	0x0002b2cc
   11cec:	00028ee7 	.word	0x00028ee7
   11cf0:	01000004 	.word	0x01000004
   11cf4:	000281c4 	.word	0x000281c4

00011cf8 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   11cf8:	4b01      	ldr	r3, [pc, #4]	; (11d00 <__printk_hook_install+0x8>)
   11cfa:	6018      	str	r0, [r3, #0]
}
   11cfc:	4770      	bx	lr
   11cfe:	bf00      	nop
   11d00:	20000560 	.word	0x20000560

00011d04 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   11d04:	b530      	push	{r4, r5, lr}
   11d06:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   11d08:	2500      	movs	r5, #0
   11d0a:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   11d0e:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   11d10:	9500      	str	r5, [sp, #0]
   11d12:	a903      	add	r1, sp, #12
   11d14:	4805      	ldr	r0, [pc, #20]	; (11d2c <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   11d16:	9505      	str	r5, [sp, #20]
   11d18:	f000 f918 	bl	11f4c <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   11d1c:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   11d20:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   11d22:	bfb8      	it	lt
   11d24:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   11d26:	b007      	add	sp, #28
   11d28:	bd30      	pop	{r4, r5, pc}
   11d2a:	bf00      	nop
   11d2c:	000237a7 	.word	0x000237a7

00011d30 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   11d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11d34:	8b05      	ldrh	r5, [r0, #24]
{
   11d36:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   11d38:	0728      	lsls	r0, r5, #28
{
   11d3a:	4690      	mov	r8, r2
	if (processing) {
   11d3c:	d411      	bmi.n	11d62 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   11d3e:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11d40:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   11d44:	f040 80cd 	bne.w	11ee2 <process_event+0x1b2>
			evt = process_recheck(mgr);
   11d48:	4620      	mov	r0, r4
   11d4a:	f011 ff2a 	bl	23ba2 <process_recheck>
		}

		if (evt == EVT_NOP) {
   11d4e:	b178      	cbz	r0, 11d70 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   11d50:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11d52:	8b21      	ldrh	r1, [r4, #24]
   11d54:	2804      	cmp	r0, #4
   11d56:	d811      	bhi.n	11d7c <process_event+0x4c>
   11d58:	e8df f000 	tbb	[pc, r0]
   11d5c:	856d10c3 	.word	0x856d10c3
   11d60:	95          	.byte	0x95
   11d61:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   11d62:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   11d64:	bf0c      	ite	eq
   11d66:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11d6a:	f045 0520 	orrne.w	r5, r5, #32
   11d6e:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   11d70:	f388 8811 	msr	BASEPRI, r8
   11d74:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   11d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11d7c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   11d80:	45aa      	cmp	sl, r5
   11d82:	f000 80a6 	beq.w	11ed2 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   11d86:	2700      	movs	r7, #0
   11d88:	46b9      	mov	r9, r7
   11d8a:	463e      	mov	r6, r7
   11d8c:	68a3      	ldr	r3, [r4, #8]
   11d8e:	2b00      	cmp	r3, #0
   11d90:	f000 80bd 	beq.w	11f0e <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   11d94:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   11d98:	8321      	strh	r1, [r4, #24]
   11d9a:	f388 8811 	msr	BASEPRI, r8
   11d9e:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   11da2:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11da4:	2900      	cmp	r1, #0
   11da6:	f000 80bb 	beq.w	11f20 <process_event+0x1f0>
	return node->next;
   11daa:	680d      	ldr	r5, [r1, #0]
   11dac:	2900      	cmp	r1, #0
   11dae:	f000 80b7 	beq.w	11f20 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   11db2:	f8d1 8004 	ldr.w	r8, [r1, #4]
   11db6:	4633      	mov	r3, r6
   11db8:	4652      	mov	r2, sl
   11dba:	4620      	mov	r0, r4
   11dbc:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11dbe:	2d00      	cmp	r5, #0
   11dc0:	d076      	beq.n	11eb0 <process_event+0x180>
   11dc2:	682b      	ldr	r3, [r5, #0]
   11dc4:	4629      	mov	r1, r5
   11dc6:	461d      	mov	r5, r3
   11dc8:	e7f0      	b.n	11dac <process_event+0x7c>
   11dca:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   11dce:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   11dd0:	2a01      	cmp	r2, #1
   11dd2:	d81b      	bhi.n	11e0c <process_event+0xdc>
	list->head = NULL;
   11dd4:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11dd6:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   11dda:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   11ddc:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11dde:	b289      	uxth	r1, r1
	list->tail = NULL;
   11de0:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   11de4:	d109      	bne.n	11dfa <process_event+0xca>
   11de6:	463b      	mov	r3, r7
   11de8:	e003      	b.n	11df2 <process_event+0xc2>
				mgr->refs += 1U;
   11dea:	8b62      	ldrh	r2, [r4, #26]
   11dec:	3201      	adds	r2, #1
   11dee:	8362      	strh	r2, [r4, #26]
	return node->next;
   11df0:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   11df2:	2b00      	cmp	r3, #0
   11df4:	d1f9      	bne.n	11dea <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11df6:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   11dfa:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   11dfc:	4620      	mov	r0, r4
   11dfe:	f011 fed0 	bl	23ba2 <process_recheck>
   11e02:	2800      	cmp	r0, #0
   11e04:	d07b      	beq.n	11efe <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11e06:	f041 0120 	orr.w	r1, r1, #32
   11e0a:	e077      	b.n	11efc <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   11e0c:	2b04      	cmp	r3, #4
   11e0e:	d10a      	bne.n	11e26 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11e10:	f021 0107 	bic.w	r1, r1, #7
   11e14:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   11e16:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   11e18:	4620      	mov	r0, r4
   11e1a:	f011 fec2 	bl	23ba2 <process_recheck>
   11e1e:	b110      	cbz	r0, 11e26 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11e20:	f041 0120 	orr.w	r1, r1, #32
   11e24:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11e26:	8b21      	ldrh	r1, [r4, #24]
   11e28:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   11e2c:	45aa      	cmp	sl, r5
   11e2e:	d050      	beq.n	11ed2 <process_event+0x1a2>
   11e30:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   11e32:	46b9      	mov	r9, r7
   11e34:	e7aa      	b.n	11d8c <process_event+0x5c>
			transit = mgr->transitions->start;
   11e36:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11e38:	f021 0107 	bic.w	r1, r1, #7
   11e3c:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   11e40:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   11e42:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   11e46:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   11e48:	d12d      	bne.n	11ea6 <process_event+0x176>
		    || (transit != NULL)) {
   11e4a:	f1b9 0f00 	cmp.w	r9, #0
   11e4e:	d040      	beq.n	11ed2 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   11e50:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   11e54:	8321      	strh	r1, [r4, #24]
   11e56:	f388 8811 	msr	BASEPRI, r8
   11e5a:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   11e5e:	493a      	ldr	r1, [pc, #232]	; (11f48 <process_event+0x218>)
   11e60:	4620      	mov	r0, r4
   11e62:	47c8      	blx	r9
   11e64:	e029      	b.n	11eba <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11e66:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   11e6a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11e6c:	f041 0104 	orr.w	r1, r1, #4
   11e70:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   11e72:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   11e74:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   11e78:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   11e7a:	d0e6      	beq.n	11e4a <process_event+0x11a>
   11e7c:	2700      	movs	r7, #0
		res = 0;
   11e7e:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11e80:	f04f 0a04 	mov.w	sl, #4
   11e84:	e782      	b.n	11d8c <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11e86:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   11e8a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11e8c:	f041 0105 	orr.w	r1, r1, #5
   11e90:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   11e92:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   11e94:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   11e98:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   11e9a:	d0d6      	beq.n	11e4a <process_event+0x11a>
   11e9c:	2700      	movs	r7, #0
		res = 0;
   11e9e:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11ea0:	f04f 0a05 	mov.w	sl, #5
   11ea4:	e772      	b.n	11d8c <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   11ea6:	2700      	movs	r7, #0
		res = 0;
   11ea8:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11eaa:	f04f 0a06 	mov.w	sl, #6
   11eae:	e76d      	b.n	11d8c <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11eb0:	462b      	mov	r3, r5
   11eb2:	e787      	b.n	11dc4 <process_event+0x94>
			if (transit != NULL) {
   11eb4:	f1b9 0f00 	cmp.w	r9, #0
   11eb8:	d1d1      	bne.n	11e5e <process_event+0x12e>
	__asm__ volatile(
   11eba:	f04f 0340 	mov.w	r3, #64	; 0x40
   11ebe:	f3ef 8811 	mrs	r8, BASEPRI
   11ec2:	f383 8812 	msr	BASEPRI_MAX, r3
   11ec6:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   11eca:	8b23      	ldrh	r3, [r4, #24]
   11ecc:	f023 0308 	bic.w	r3, r3, #8
   11ed0:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   11ed2:	8b25      	ldrh	r5, [r4, #24]
   11ed4:	06ea      	lsls	r2, r5, #27
   11ed6:	d52e      	bpl.n	11f36 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   11ed8:	f025 0310 	bic.w	r3, r5, #16
   11edc:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   11ede:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   11ee2:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11ee4:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   11ee6:	2e00      	cmp	r6, #0
   11ee8:	f6bf af6f 	bge.w	11dca <process_event+0x9a>
	list->head = NULL;
   11eec:	2300      	movs	r3, #0
		*clients = mgr->clients;
   11eee:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   11ef0:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11ef4:	f021 0107 	bic.w	r1, r1, #7
   11ef8:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11efc:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11efe:	8b21      	ldrh	r1, [r4, #24]
   11f00:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   11f04:	45aa      	cmp	sl, r5
   11f06:	f04f 0900 	mov.w	r9, #0
   11f0a:	f47f af3f 	bne.w	11d8c <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   11f0e:	2f00      	cmp	r7, #0
   11f10:	d09b      	beq.n	11e4a <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   11f12:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   11f16:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   11f18:	f388 8811 	msr	BASEPRI, r8
   11f1c:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   11f20:	2f00      	cmp	r7, #0
   11f22:	d0c7      	beq.n	11eb4 <process_event+0x184>
	return node->next;
   11f24:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   11f26:	4639      	mov	r1, r7
   11f28:	4633      	mov	r3, r6
   11f2a:	4652      	mov	r2, sl
   11f2c:	4620      	mov	r0, r4
   11f2e:	f011 fe64 	bl	23bfa <notify_one>
	list->head = node;
   11f32:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   11f34:	e7f4      	b.n	11f20 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   11f36:	06ab      	lsls	r3, r5, #26
   11f38:	f57f af1a 	bpl.w	11d70 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   11f3c:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   11f40:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   11f42:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   11f46:	e6ff      	b.n	11d48 <process_event+0x18>
   11f48:	00023c27 	.word	0x00023c27

00011f4c <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   11f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f50:	4681      	mov	r9, r0
   11f52:	b095      	sub	sp, #84	; 0x54
   11f54:	468b      	mov	fp, r1
   11f56:	4617      	mov	r7, r2
   11f58:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   11f5a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   11f5c:	7838      	ldrb	r0, [r7, #0]
   11f5e:	b908      	cbnz	r0, 11f64 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   11f60:	4628      	mov	r0, r5
   11f62:	e358      	b.n	12616 <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
   11f64:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   11f66:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   11f68:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
   11f6a:	d006      	beq.n	11f7a <z_cbvprintf_impl+0x2e>
			OUTC('%');
   11f6c:	4659      	mov	r1, fp
   11f6e:	47c8      	blx	r9
   11f70:	2800      	cmp	r0, #0
   11f72:	f2c0 8350 	blt.w	12616 <z_cbvprintf_impl+0x6ca>
   11f76:	3501      	adds	r5, #1
		if (bps == NULL) {
   11f78:	e1fb      	b.n	12372 <z_cbvprintf_impl+0x426>
		} state = {
   11f7a:	2218      	movs	r2, #24
   11f7c:	2100      	movs	r1, #0
   11f7e:	a80e      	add	r0, sp, #56	; 0x38
   11f80:	f012 fcf0 	bl	24964 <memset>
	if (*sp == '%') {
   11f84:	787b      	ldrb	r3, [r7, #1]
   11f86:	2b25      	cmp	r3, #37	; 0x25
   11f88:	d07d      	beq.n	12086 <z_cbvprintf_impl+0x13a>
   11f8a:	2300      	movs	r3, #0
   11f8c:	1c78      	adds	r0, r7, #1
   11f8e:	4698      	mov	r8, r3
   11f90:	469e      	mov	lr, r3
   11f92:	469c      	mov	ip, r3
   11f94:	461e      	mov	r6, r3
   11f96:	4601      	mov	r1, r0
		switch (*sp) {
   11f98:	f810 2b01 	ldrb.w	r2, [r0], #1
   11f9c:	2a2b      	cmp	r2, #43	; 0x2b
   11f9e:	f000 80a1 	beq.w	120e4 <z_cbvprintf_impl+0x198>
   11fa2:	f200 8098 	bhi.w	120d6 <z_cbvprintf_impl+0x18a>
   11fa6:	2a20      	cmp	r2, #32
   11fa8:	f000 809f 	beq.w	120ea <z_cbvprintf_impl+0x19e>
   11fac:	2a23      	cmp	r2, #35	; 0x23
   11fae:	f000 809f 	beq.w	120f0 <z_cbvprintf_impl+0x1a4>
   11fb2:	b12b      	cbz	r3, 11fc0 <z_cbvprintf_impl+0x74>
   11fb4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   11fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11fbc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   11fc0:	f1b8 0f00 	cmp.w	r8, #0
   11fc4:	d005      	beq.n	11fd2 <z_cbvprintf_impl+0x86>
   11fc6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   11fca:	f043 0320 	orr.w	r3, r3, #32
   11fce:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   11fd2:	f1be 0f00 	cmp.w	lr, #0
   11fd6:	d005      	beq.n	11fe4 <z_cbvprintf_impl+0x98>
   11fd8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   11fdc:	f043 0310 	orr.w	r3, r3, #16
   11fe0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   11fe4:	f1bc 0f00 	cmp.w	ip, #0
   11fe8:	d005      	beq.n	11ff6 <z_cbvprintf_impl+0xaa>
   11fea:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   11fee:	f043 0308 	orr.w	r3, r3, #8
   11ff2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   11ff6:	b12e      	cbz	r6, 12004 <z_cbvprintf_impl+0xb8>
   11ff8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   11ffc:	f043 0304 	orr.w	r3, r3, #4
   12000:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
   12004:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12008:	f003 0044 	and.w	r0, r3, #68	; 0x44
   1200c:	2844      	cmp	r0, #68	; 0x44
   1200e:	d103      	bne.n	12018 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
   12010:	f36f 1386 	bfc	r3, #6, #1
   12014:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
   12018:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   1201c:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   1201e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12022:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   12026:	d17f      	bne.n	12128 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
   12028:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   1202c:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
   12030:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   12032:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
   12036:	781a      	ldrb	r2, [r3, #0]
   12038:	2a2e      	cmp	r2, #46	; 0x2e
   1203a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   1203e:	bf0c      	ite	eq
   12040:	2101      	moveq	r1, #1
   12042:	2100      	movne	r1, #0
   12044:	f361 0241 	bfi	r2, r1, #1, #1
   12048:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
   1204c:	d178      	bne.n	12140 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
   1204e:	785a      	ldrb	r2, [r3, #1]
   12050:	2a2a      	cmp	r2, #42	; 0x2a
   12052:	d06e      	beq.n	12132 <z_cbvprintf_impl+0x1e6>
	++sp;
   12054:	3301      	adds	r3, #1
	size_t val = 0;
   12056:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   12058:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1205c:	4619      	mov	r1, r3
   1205e:	f811 0b01 	ldrb.w	r0, [r1], #1
   12062:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   12066:	2e09      	cmp	r6, #9
   12068:	f240 8095 	bls.w	12196 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
   1206c:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
   12070:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
   12072:	f3c1 0040 	ubfx	r0, r1, #1, #1
   12076:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
   1207a:	460a      	mov	r2, r1
   1207c:	f360 0241 	bfi	r2, r0, #1, #1
   12080:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   12084:	e05c      	b.n	12140 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
   12086:	1cba      	adds	r2, r7, #2
   12088:	9203      	str	r2, [sp, #12]
   1208a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
   1208e:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   12092:	07da      	lsls	r2, r3, #31
   12094:	f140 812e 	bpl.w	122f4 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
   12098:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   1209c:	f1b8 0f00 	cmp.w	r8, #0
   120a0:	da07      	bge.n	120b2 <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
   120a2:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   120a6:	f042 0204 	orr.w	r2, r2, #4
   120aa:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
   120ae:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   120b2:	075e      	lsls	r6, r3, #29
   120b4:	f140 8127 	bpl.w	12306 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
   120b8:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
   120bc:	f1ba 0f00 	cmp.w	sl, #0
   120c0:	f280 8126 	bge.w	12310 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
   120c4:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   120c8:	f36f 0341 	bfc	r3, #1, #1
   120cc:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
   120d0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   120d4:	e11c      	b.n	12310 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
   120d6:	2a2d      	cmp	r2, #45	; 0x2d
   120d8:	d00d      	beq.n	120f6 <z_cbvprintf_impl+0x1aa>
   120da:	2a30      	cmp	r2, #48	; 0x30
   120dc:	f47f af69 	bne.w	11fb2 <z_cbvprintf_impl+0x66>
   120e0:	2301      	movs	r3, #1
	} while (loop);
   120e2:	e758      	b.n	11f96 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
   120e4:	f04f 0c01 	mov.w	ip, #1
   120e8:	e755      	b.n	11f96 <z_cbvprintf_impl+0x4a>
   120ea:	f04f 0e01 	mov.w	lr, #1
   120ee:	e752      	b.n	11f96 <z_cbvprintf_impl+0x4a>
   120f0:	f04f 0801 	mov.w	r8, #1
   120f4:	e74f      	b.n	11f96 <z_cbvprintf_impl+0x4a>
   120f6:	2601      	movs	r6, #1
   120f8:	e74d      	b.n	11f96 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
   120fa:	fb0e 6202 	mla	r2, lr, r2, r6
   120fe:	3a30      	subs	r2, #48	; 0x30
   12100:	4603      	mov	r3, r0
   12102:	4618      	mov	r0, r3
   12104:	f810 6b01 	ldrb.w	r6, [r0], #1
   12108:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   1210c:	f1bc 0f09 	cmp.w	ip, #9
   12110:	d9f3      	bls.n	120fa <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
   12112:	4299      	cmp	r1, r3
   12114:	d08f      	beq.n	12036 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   12116:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
   1211a:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
   1211c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   1211e:	f362 0141 	bfi	r1, r2, #1, #1
   12122:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
   12126:	e786      	b.n	12036 <z_cbvprintf_impl+0xea>
   12128:	460b      	mov	r3, r1
	size_t val = 0;
   1212a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   1212c:	f04f 0e0a 	mov.w	lr, #10
   12130:	e7e7      	b.n	12102 <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
   12132:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12136:	f042 0204 	orr.w	r2, r2, #4
   1213a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
   1213e:	3302      	adds	r3, #2
	switch (*sp) {
   12140:	781a      	ldrb	r2, [r3, #0]
   12142:	2a6c      	cmp	r2, #108	; 0x6c
   12144:	d047      	beq.n	121d6 <z_cbvprintf_impl+0x28a>
   12146:	d82b      	bhi.n	121a0 <z_cbvprintf_impl+0x254>
   12148:	2a68      	cmp	r2, #104	; 0x68
   1214a:	d031      	beq.n	121b0 <z_cbvprintf_impl+0x264>
   1214c:	2a6a      	cmp	r2, #106	; 0x6a
   1214e:	d04b      	beq.n	121e8 <z_cbvprintf_impl+0x29c>
   12150:	2a4c      	cmp	r2, #76	; 0x4c
   12152:	d051      	beq.n	121f8 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
   12154:	461a      	mov	r2, r3
   12156:	f812 3b01 	ldrb.w	r3, [r2], #1
   1215a:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
   1215c:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
   1215e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
   12162:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
   12166:	f200 80be 	bhi.w	122e6 <z_cbvprintf_impl+0x39a>
   1216a:	2b6d      	cmp	r3, #109	; 0x6d
   1216c:	d851      	bhi.n	12212 <z_cbvprintf_impl+0x2c6>
   1216e:	2b69      	cmp	r3, #105	; 0x69
   12170:	f200 80b9 	bhi.w	122e6 <z_cbvprintf_impl+0x39a>
   12174:	2b57      	cmp	r3, #87	; 0x57
   12176:	d867      	bhi.n	12248 <z_cbvprintf_impl+0x2fc>
   12178:	2b41      	cmp	r3, #65	; 0x41
   1217a:	d003      	beq.n	12184 <z_cbvprintf_impl+0x238>
   1217c:	3b45      	subs	r3, #69	; 0x45
   1217e:	2b02      	cmp	r3, #2
   12180:	f200 80b1 	bhi.w	122e6 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
   12184:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12188:	2204      	movs	r2, #4
   1218a:	f362 0302 	bfi	r3, r2, #0, #3
   1218e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
   12192:	2301      	movs	r3, #1
			break;
   12194:	e073      	b.n	1227e <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
   12196:	fb0c 0202 	mla	r2, ip, r2, r0
   1219a:	3a30      	subs	r2, #48	; 0x30
   1219c:	460b      	mov	r3, r1
   1219e:	e75d      	b.n	1205c <z_cbvprintf_impl+0x110>
	switch (*sp) {
   121a0:	2a74      	cmp	r2, #116	; 0x74
   121a2:	d025      	beq.n	121f0 <z_cbvprintf_impl+0x2a4>
   121a4:	2a7a      	cmp	r2, #122	; 0x7a
   121a6:	d1d5      	bne.n	12154 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
   121a8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   121ac:	2106      	movs	r1, #6
   121ae:	e00c      	b.n	121ca <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
   121b0:	785a      	ldrb	r2, [r3, #1]
   121b2:	2a68      	cmp	r2, #104	; 0x68
   121b4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   121b8:	d106      	bne.n	121c8 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
   121ba:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   121bc:	f361 02c6 	bfi	r2, r1, #3, #4
   121c0:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
   121c4:	3302      	adds	r3, #2
   121c6:	e7c5      	b.n	12154 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
   121c8:	2102      	movs	r1, #2
   121ca:	f361 02c6 	bfi	r2, r1, #3, #4
   121ce:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
   121d2:	3301      	adds	r3, #1
   121d4:	e7be      	b.n	12154 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
   121d6:	785a      	ldrb	r2, [r3, #1]
   121d8:	2a6c      	cmp	r2, #108	; 0x6c
   121da:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   121de:	d101      	bne.n	121e4 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
   121e0:	2104      	movs	r1, #4
   121e2:	e7eb      	b.n	121bc <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
   121e4:	2103      	movs	r1, #3
   121e6:	e7f0      	b.n	121ca <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
   121e8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   121ec:	2105      	movs	r1, #5
   121ee:	e7ec      	b.n	121ca <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
   121f0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   121f4:	2107      	movs	r1, #7
   121f6:	e7e8      	b.n	121ca <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
   121f8:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
   121fc:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   12200:	f022 0202 	bic.w	r2, r2, #2
   12204:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   12208:	f042 0202 	orr.w	r2, r2, #2
   1220c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
   12210:	e7df      	b.n	121d2 <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
   12212:	3b6e      	subs	r3, #110	; 0x6e
   12214:	b2d9      	uxtb	r1, r3
   12216:	2301      	movs	r3, #1
   12218:	408b      	lsls	r3, r1
   1221a:	f240 4182 	movw	r1, #1154	; 0x482
   1221e:	420b      	tst	r3, r1
   12220:	d137      	bne.n	12292 <z_cbvprintf_impl+0x346>
   12222:	f013 0f24 	tst.w	r3, #36	; 0x24
   12226:	d151      	bne.n	122cc <z_cbvprintf_impl+0x380>
   12228:	07d8      	lsls	r0, r3, #31
   1222a:	d55c      	bpl.n	122e6 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
   1222c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12230:	2103      	movs	r1, #3
   12232:	f361 0302 	bfi	r3, r1, #0, #3
   12236:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   1223a:	f002 0378 	and.w	r3, r2, #120	; 0x78
   1223e:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
   12242:	424b      	negs	r3, r1
   12244:	414b      	adcs	r3, r1
   12246:	e01a      	b.n	1227e <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
   12248:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   1224c:	b2c9      	uxtb	r1, r1
   1224e:	2001      	movs	r0, #1
   12250:	fa00 f101 	lsl.w	r1, r0, r1
   12254:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   12258:	d194      	bne.n	12184 <z_cbvprintf_impl+0x238>
   1225a:	f640 0601 	movw	r6, #2049	; 0x801
   1225e:	4231      	tst	r1, r6
   12260:	d11d      	bne.n	1229e <z_cbvprintf_impl+0x352>
   12262:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   12266:	d03e      	beq.n	122e6 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
   12268:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   1226c:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12270:	f002 0278 	and.w	r2, r2, #120	; 0x78
   12274:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   12276:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   1227a:	d034      	beq.n	122e6 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
   1227c:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   1227e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   12282:	f3c2 0140 	ubfx	r1, r2, #1, #1
   12286:	430b      	orrs	r3, r1
   12288:	f363 0241 	bfi	r2, r3, #1, #1
   1228c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   12290:	e6fd      	b.n	1208e <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
   12292:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12296:	2102      	movs	r1, #2
   12298:	f361 0302 	bfi	r3, r1, #0, #3
   1229c:	e7e8      	b.n	12270 <z_cbvprintf_impl+0x324>
   1229e:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
   122a2:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   122a4:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   122a8:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   122ac:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   122ae:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
   122b2:	bf02      	ittt	eq
   122b4:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
   122b8:	f041 0101 	orreq.w	r1, r1, #1
   122bc:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
   122c0:	2b63      	cmp	r3, #99	; 0x63
   122c2:	d1db      	bne.n	1227c <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
   122c4:	1e13      	subs	r3, r2, #0
   122c6:	bf18      	it	ne
   122c8:	2301      	movne	r3, #1
   122ca:	e7d8      	b.n	1227e <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
   122cc:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   122d0:	2103      	movs	r1, #3
   122d2:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   122d6:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   122da:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
   122de:	bf14      	ite	ne
   122e0:	2301      	movne	r3, #1
   122e2:	2300      	moveq	r3, #0
   122e4:	e7cb      	b.n	1227e <z_cbvprintf_impl+0x332>
		conv->invalid = true;
   122e6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   122ea:	f043 0301 	orr.w	r3, r3, #1
   122ee:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
   122f2:	e7c3      	b.n	1227c <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
   122f4:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
   122f8:	2a00      	cmp	r2, #0
			width = conv->width_value;
   122fa:	bfb4      	ite	lt
   122fc:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
   12300:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
   12304:	e6d5      	b.n	120b2 <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
   12306:	0798      	lsls	r0, r3, #30
   12308:	f57f aee2 	bpl.w	120d0 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
   1230c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
   12310:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
   12314:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   12316:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
   1231a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
   1231e:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   12322:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   12324:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   12328:	d133      	bne.n	12392 <z_cbvprintf_impl+0x446>
			switch (length_mod) {
   1232a:	1ecb      	subs	r3, r1, #3
   1232c:	2b04      	cmp	r3, #4
   1232e:	d804      	bhi.n	1233a <z_cbvprintf_impl+0x3ee>
   12330:	e8df f003 	tbb	[pc, r3]
   12334:	21464621 	.word	0x21464621
   12338:	21          	.byte	0x21
   12339:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   1233a:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   1233c:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   1233e:	ea4f 72e3 	mov.w	r2, r3, asr #31
   12342:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   12346:	d11c      	bne.n	12382 <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
   12348:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
   1234c:	17da      	asrs	r2, r3, #31
   1234e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
   12352:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   12354:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12358:	f013 0603 	ands.w	r6, r3, #3
   1235c:	d050      	beq.n	12400 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
   1235e:	9b03      	ldr	r3, [sp, #12]
   12360:	463a      	mov	r2, r7
   12362:	4659      	mov	r1, fp
   12364:	4648      	mov	r0, r9
   12366:	f011 fd4a 	bl	23dfe <outs>
   1236a:	2800      	cmp	r0, #0
   1236c:	f2c0 8153 	blt.w	12616 <z_cbvprintf_impl+0x6ca>
   12370:	4405      	add	r5, r0
			continue;
   12372:	9f03      	ldr	r7, [sp, #12]
   12374:	e5f2      	b.n	11f5c <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   12376:	f854 3b04 	ldr.w	r3, [r4], #4
   1237a:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   1237c:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
   12380:	e7e8      	b.n	12354 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
   12382:	2902      	cmp	r1, #2
   12384:	d1e5      	bne.n	12352 <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
   12386:	b21a      	sxth	r2, r3
   12388:	f343 33c0 	sbfx	r3, r3, #15, #1
   1238c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   12390:	e7df      	b.n	12352 <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
   12392:	2b02      	cmp	r3, #2
   12394:	d124      	bne.n	123e0 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
   12396:	1ecb      	subs	r3, r1, #3
   12398:	2b04      	cmp	r3, #4
   1239a:	d804      	bhi.n	123a6 <z_cbvprintf_impl+0x45a>
   1239c:	e8df f003 	tbb	[pc, r3]
   123a0:	18101018 	.word	0x18101018
   123a4:	18          	.byte	0x18
   123a5:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   123a6:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
   123a8:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   123ac:	f04f 0200 	mov.w	r2, #0
   123b0:	d014      	beq.n	123dc <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
   123b2:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   123b4:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
   123b8:	d1cc      	bne.n	12354 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
   123ba:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   123bc:	930e      	str	r3, [sp, #56]	; 0x38
   123be:	e7c9      	b.n	12354 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
   123c0:	3407      	adds	r4, #7
   123c2:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   123c6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   123ca:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   123ce:	e7c1      	b.n	12354 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
   123d0:	f854 3b04 	ldr.w	r3, [r4], #4
   123d4:	930e      	str	r3, [sp, #56]	; 0x38
   123d6:	2300      	movs	r3, #0
   123d8:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
   123da:	e7bb      	b.n	12354 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
   123dc:	b2db      	uxtb	r3, r3
   123de:	e7cd      	b.n	1237c <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   123e0:	2b04      	cmp	r3, #4
   123e2:	d108      	bne.n	123f6 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
   123e4:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   123e6:	f024 0407 	bic.w	r4, r4, #7
   123ea:	e9d4 2300 	ldrd	r2, r3, [r4]
   123ee:	3408      	adds	r4, #8
   123f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   123f4:	e7ae      	b.n	12354 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
   123f6:	2b03      	cmp	r3, #3
   123f8:	d1ac      	bne.n	12354 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
   123fa:	f854 3b04 	ldr.w	r3, [r4], #4
   123fe:	e7dd      	b.n	123bc <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
   12400:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   12404:	2878      	cmp	r0, #120	; 0x78
   12406:	d8b4      	bhi.n	12372 <z_cbvprintf_impl+0x426>
   12408:	2862      	cmp	r0, #98	; 0x62
   1240a:	d81c      	bhi.n	12446 <z_cbvprintf_impl+0x4fa>
   1240c:	2825      	cmp	r0, #37	; 0x25
   1240e:	f43f adad 	beq.w	11f6c <z_cbvprintf_impl+0x20>
   12412:	2858      	cmp	r0, #88	; 0x58
   12414:	d1ad      	bne.n	12372 <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
   12416:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   1241a:	9300      	str	r3, [sp, #0]
   1241c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   12420:	ab08      	add	r3, sp, #32
   12422:	aa10      	add	r2, sp, #64	; 0x40
   12424:	f011 fca5 	bl	23d72 <encode_uint>
			if (precision >= 0) {
   12428:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   1242c:	4607      	mov	r7, r0
			if (precision >= 0) {
   1242e:	f280 809a 	bge.w	12566 <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
   12432:	2f00      	cmp	r7, #0
   12434:	d09d      	beq.n	12372 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   12436:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   1243a:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
   1243c:	2e00      	cmp	r6, #0
   1243e:	f000 80c1 	beq.w	125c4 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
   12442:	3001      	adds	r0, #1
   12444:	e0be      	b.n	125c4 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
   12446:	3863      	subs	r0, #99	; 0x63
   12448:	2815      	cmp	r0, #21
   1244a:	d892      	bhi.n	12372 <z_cbvprintf_impl+0x426>
   1244c:	a201      	add	r2, pc, #4	; (adr r2, 12454 <z_cbvprintf_impl+0x508>)
   1244e:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   12452:	bf00      	nop
   12454:	00012529 	.word	0x00012529
   12458:	0001253b 	.word	0x0001253b
   1245c:	00012373 	.word	0x00012373
   12460:	00012373 	.word	0x00012373
   12464:	00012373 	.word	0x00012373
   12468:	00012373 	.word	0x00012373
   1246c:	0001253b 	.word	0x0001253b
   12470:	00012373 	.word	0x00012373
   12474:	00012373 	.word	0x00012373
   12478:	00012373 	.word	0x00012373
   1247c:	00012373 	.word	0x00012373
   12480:	000125c9 	.word	0x000125c9
   12484:	00012561 	.word	0x00012561
   12488:	00012587 	.word	0x00012587
   1248c:	00012373 	.word	0x00012373
   12490:	00012373 	.word	0x00012373
   12494:	000124ad 	.word	0x000124ad
   12498:	00012373 	.word	0x00012373
   1249c:	00012561 	.word	0x00012561
   124a0:	00012373 	.word	0x00012373
   124a4:	00012373 	.word	0x00012373
   124a8:	00012561 	.word	0x00012561
			if (precision >= 0) {
   124ac:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
   124b0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
   124b2:	db35      	blt.n	12520 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
   124b4:	4651      	mov	r1, sl
   124b6:	4638      	mov	r0, r7
   124b8:	f012 fa19 	bl	248ee <strnlen>
			bpe = bps + len;
   124bc:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
   124c0:	2f00      	cmp	r7, #0
   124c2:	f43f af56 	beq.w	12372 <z_cbvprintf_impl+0x426>
		char sign = 0;
   124c6:	2600      	movs	r6, #0
		if (conv->altform_0c) {
   124c8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   124cc:	f013 0210 	ands.w	r2, r3, #16
   124d0:	9205      	str	r2, [sp, #20]
   124d2:	f000 8093 	beq.w	125fc <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
   124d6:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   124d8:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
   124da:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
   124dc:	bf48      	it	mi
   124de:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
   124e0:	9204      	str	r2, [sp, #16]
   124e2:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
   124e4:	bf48      	it	mi
   124e6:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
   124e8:	f1b8 0f00 	cmp.w	r8, #0
   124ec:	f340 80a0 	ble.w	12630 <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
   124f0:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
   124f4:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
   124f8:	f3c2 0380 	ubfx	r3, r2, #2, #1
   124fc:	0750      	lsls	r0, r2, #29
   124fe:	9306      	str	r3, [sp, #24]
   12500:	f100 8096 	bmi.w	12630 <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
   12504:	0651      	lsls	r1, r2, #25
   12506:	f140 8089 	bpl.w	1261c <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
   1250a:	b13e      	cbz	r6, 1251c <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
   1250c:	4659      	mov	r1, fp
   1250e:	4630      	mov	r0, r6
   12510:	47c8      	blx	r9
   12512:	2800      	cmp	r0, #0
   12514:	db7f      	blt.n	12616 <z_cbvprintf_impl+0x6ca>
   12516:	9b06      	ldr	r3, [sp, #24]
   12518:	3501      	adds	r5, #1
   1251a:	461e      	mov	r6, r3
					pad = '0';
   1251c:	2230      	movs	r2, #48	; 0x30
   1251e:	e07e      	b.n	1261e <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
   12520:	4638      	mov	r0, r7
   12522:	f012 f9dd 	bl	248e0 <strlen>
   12526:	e7c9      	b.n	124bc <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   12528:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1252a:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
   1252e:	2600      	movs	r6, #0
			bps = buf;
   12530:	af08      	add	r7, sp, #32
			bpe = buf + 1;
   12532:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
   12536:	2001      	movs	r0, #1
   12538:	e7c6      	b.n	124c8 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
   1253a:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
   1253c:	bf5c      	itt	pl
   1253e:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   12542:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
   12544:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
   12548:	bf48      	it	mi
   1254a:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
   1254c:	2b00      	cmp	r3, #0
   1254e:	f6bf af62 	bge.w	12416 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
   12552:	4252      	negs	r2, r2
   12554:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   12558:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
   1255c:	262d      	movs	r6, #45	; 0x2d
   1255e:	e75a      	b.n	12416 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
   12560:	2600      	movs	r6, #0
   12562:	e758      	b.n	12416 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
   12564:	2600      	movs	r6, #0
				conv->flag_zero = false;
   12566:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
   1256a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   1256e:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   12570:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   12574:	459a      	cmp	sl, r3
				conv->flag_zero = false;
   12576:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
   1257a:	f67f af5a 	bls.w	12432 <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
   1257e:	ebaa 0303 	sub.w	r3, sl, r3
   12582:	9311      	str	r3, [sp, #68]	; 0x44
   12584:	e755      	b.n	12432 <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
   12586:	980e      	ldr	r0, [sp, #56]	; 0x38
   12588:	b390      	cbz	r0, 125f0 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1258a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   1258e:	9300      	str	r3, [sp, #0]
   12590:	aa10      	add	r2, sp, #64	; 0x40
   12592:	ab08      	add	r3, sp, #32
   12594:	2100      	movs	r1, #0
   12596:	f011 fbec 	bl	23d72 <encode_uint>
				conv->altform_0c = true;
   1259a:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
   1259e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   125a2:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   125a6:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
   125aa:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
   125ae:	4607      	mov	r7, r0
				conv->altform_0c = true;
   125b0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
   125b4:	dad6      	bge.n	12564 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
   125b6:	2800      	cmp	r0, #0
   125b8:	f43f aedb 	beq.w	12372 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   125bc:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   125c0:	1a18      	subs	r0, r3, r0
		char sign = 0;
   125c2:	2600      	movs	r6, #0
   125c4:	469a      	mov	sl, r3
   125c6:	e77f      	b.n	124c8 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
   125c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
   125ca:	2907      	cmp	r1, #7
   125cc:	f63f aed1 	bhi.w	12372 <z_cbvprintf_impl+0x426>
   125d0:	e8df f001 	tbb	[pc, r1]
   125d4:	0c06040c 	.word	0x0c06040c
   125d8:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   125dc:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   125de:	e6c8      	b.n	12372 <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
   125e0:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   125e2:	e6c6      	b.n	12372 <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
   125e4:	17ea      	asrs	r2, r5, #31
   125e6:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   125ea:	e6c2      	b.n	12372 <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   125ec:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   125ee:	e6c0      	b.n	12372 <z_cbvprintf_impl+0x426>
   125f0:	4f2e      	ldr	r7, [pc, #184]	; (126ac <z_cbvprintf_impl+0x760>)
		char sign = 0;
   125f2:	4606      	mov	r6, r0
			bpe = bps + 5;
   125f4:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
   125f8:	2005      	movs	r0, #5
   125fa:	e765      	b.n	124c8 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
   125fc:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   125fe:	bf48      	it	mi
   12600:	3001      	addmi	r0, #1
   12602:	e769      	b.n	124d8 <z_cbvprintf_impl+0x58c>
   12604:	9307      	str	r3, [sp, #28]
					OUTC(pad);
   12606:	4610      	mov	r0, r2
   12608:	9206      	str	r2, [sp, #24]
   1260a:	4659      	mov	r1, fp
   1260c:	47c8      	blx	r9
   1260e:	2800      	cmp	r0, #0
   12610:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   12614:	da04      	bge.n	12620 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
   12616:	b015      	add	sp, #84	; 0x54
   12618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   1261c:	2220      	movs	r2, #32
					pad = '0';
   1261e:	4643      	mov	r3, r8
				while (width-- > 0) {
   12620:	4619      	mov	r1, r3
   12622:	2900      	cmp	r1, #0
   12624:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   12628:	dcec      	bgt.n	12604 <z_cbvprintf_impl+0x6b8>
   1262a:	4445      	add	r5, r8
   1262c:	1a6d      	subs	r5, r5, r1
   1262e:	4698      	mov	r8, r3
		if (sign != 0) {
   12630:	b12e      	cbz	r6, 1263e <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
   12632:	4659      	mov	r1, fp
   12634:	4630      	mov	r0, r6
   12636:	47c8      	blx	r9
   12638:	2800      	cmp	r0, #0
   1263a:	dbec      	blt.n	12616 <z_cbvprintf_impl+0x6ca>
   1263c:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   1263e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12642:	06da      	lsls	r2, r3, #27
   12644:	d401      	bmi.n	1264a <z_cbvprintf_impl+0x6fe>
   12646:	071b      	lsls	r3, r3, #28
   12648:	d505      	bpl.n	12656 <z_cbvprintf_impl+0x70a>
				OUTC('0');
   1264a:	4659      	mov	r1, fp
   1264c:	2030      	movs	r0, #48	; 0x30
   1264e:	47c8      	blx	r9
   12650:	2800      	cmp	r0, #0
   12652:	dbe0      	blt.n	12616 <z_cbvprintf_impl+0x6ca>
   12654:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   12656:	9b05      	ldr	r3, [sp, #20]
   12658:	b133      	cbz	r3, 12668 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
   1265a:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   1265e:	4659      	mov	r1, fp
   12660:	47c8      	blx	r9
   12662:	2800      	cmp	r0, #0
   12664:	dbd7      	blt.n	12616 <z_cbvprintf_impl+0x6ca>
   12666:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   12668:	9e04      	ldr	r6, [sp, #16]
   1266a:	442e      	add	r6, r5
   1266c:	e005      	b.n	1267a <z_cbvprintf_impl+0x72e>
				OUTC('0');
   1266e:	4659      	mov	r1, fp
   12670:	2030      	movs	r0, #48	; 0x30
   12672:	47c8      	blx	r9
   12674:	2800      	cmp	r0, #0
   12676:	dbce      	blt.n	12616 <z_cbvprintf_impl+0x6ca>
   12678:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   1267a:	1b73      	subs	r3, r6, r5
   1267c:	2b00      	cmp	r3, #0
   1267e:	dcf6      	bgt.n	1266e <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
   12680:	4653      	mov	r3, sl
   12682:	463a      	mov	r2, r7
   12684:	4659      	mov	r1, fp
   12686:	4648      	mov	r0, r9
   12688:	f011 fbb9 	bl	23dfe <outs>
   1268c:	2800      	cmp	r0, #0
   1268e:	dbc2      	blt.n	12616 <z_cbvprintf_impl+0x6ca>
   12690:	4405      	add	r5, r0
		while (width > 0) {
   12692:	44a8      	add	r8, r5
   12694:	eba8 0305 	sub.w	r3, r8, r5
   12698:	2b00      	cmp	r3, #0
   1269a:	f77f ae6a 	ble.w	12372 <z_cbvprintf_impl+0x426>
			OUTC(' ');
   1269e:	4659      	mov	r1, fp
   126a0:	2020      	movs	r0, #32
   126a2:	47c8      	blx	r9
   126a4:	2800      	cmp	r0, #0
   126a6:	dbb6      	blt.n	12616 <z_cbvprintf_impl+0x6ca>
   126a8:	3501      	adds	r5, #1
			--width;
   126aa:	e7f3      	b.n	12694 <z_cbvprintf_impl+0x748>
   126ac:	00028f9b 	.word	0x00028f9b

000126b0 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   126b0:	b508      	push	{r3, lr}
   126b2:	4604      	mov	r4, r0
	__asm__ volatile(
   126b4:	f04f 0240 	mov.w	r2, #64	; 0x40
   126b8:	f3ef 8311 	mrs	r3, BASEPRI
   126bc:	f382 8812 	msr	BASEPRI_MAX, r2
   126c0:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
   126c4:	f00a fc52 	bl	1cf6c <sys_clock_disable>
	}

	sys_arch_reboot(type);
   126c8:	4620      	mov	r0, r4
   126ca:	f001 ff13 	bl	144f4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   126ce:	4803      	ldr	r0, [pc, #12]	; (126dc <sys_reboot+0x2c>)
   126d0:	f011 f87e 	bl	237d0 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   126d4:	f001 f896 	bl	13804 <arch_cpu_idle>
   126d8:	e7fc      	b.n	126d4 <sys_reboot+0x24>
   126da:	bf00      	nop
   126dc:	00028fa1 	.word	0x00028fa1

000126e0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   126e0:	f00b bf94 	b.w	1e60c <SystemInit>

000126e4 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
   126e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   126e8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 12744 <activate_foreach_backend+0x60>
{
   126ec:	4604      	mov	r4, r0
	while (mask_cpy) {
   126ee:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
   126f0:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
   126f4:	b914      	cbnz	r4, 126fc <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
   126f6:	4638      	mov	r0, r7
   126f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
   126fc:	fa94 f5a4 	rbit	r5, r4
   12700:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
   12704:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   12708:	012e      	lsls	r6, r5, #4
   1270a:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
   1270e:	ea6f 0a03 	mvn.w	sl, r3
   12712:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   12716:	7b2b      	ldrb	r3, [r5, #12]
   12718:	2b00      	cmp	r3, #0
   1271a:	d0eb      	beq.n	126f4 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
   1271c:	f858 3006 	ldr.w	r3, [r8, r6]
   12720:	691b      	ldr	r3, [r3, #16]
   12722:	b94b      	cbnz	r3, 12738 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
   12724:	4446      	add	r6, r8
			log_backend_enable(backend,
   12726:	2204      	movs	r2, #4
   12728:	6873      	ldr	r3, [r6, #4]
   1272a:	4628      	mov	r0, r5
   1272c:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
   1272e:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
   12732:	f000 fa59 	bl	12be8 <log_backend_enable>
   12736:	e7dd      	b.n	126f4 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
   12738:	4628      	mov	r0, r5
   1273a:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   1273c:	2800      	cmp	r0, #0
   1273e:	d1d9      	bne.n	126f4 <activate_foreach_backend+0x10>
   12740:	e7f0      	b.n	12724 <activate_foreach_backend+0x40>
   12742:	bf00      	nop
   12744:	0002823c 	.word	0x0002823c

00012748 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
   12748:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   1274a:	4910      	ldr	r1, [pc, #64]	; (1278c <enable_logger+0x44>)
   1274c:	4810      	ldr	r0, [pc, #64]	; (12790 <enable_logger+0x48>)
{
   1274e:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   12750:	2200      	movs	r2, #0
   12752:	f015 f9b8 	bl	27ac6 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12756:	4d0f      	ldr	r5, [pc, #60]	; (12794 <enable_logger+0x4c>)
   12758:	490f      	ldr	r1, [pc, #60]	; (12798 <enable_logger+0x50>)
   1275a:	2200      	movs	r2, #0
   1275c:	2300      	movs	r3, #0
   1275e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12762:	2400      	movs	r4, #0
   12764:	230e      	movs	r3, #14
   12766:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1276a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1276e:	4b0b      	ldr	r3, [pc, #44]	; (1279c <enable_logger+0x54>)
   12770:	9400      	str	r4, [sp, #0]
   12772:	f44f 7240 	mov.w	r2, #768	; 0x300
   12776:	4628      	mov	r0, r5
   12778:	f00c fe5a 	bl	1f430 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1277c:	4908      	ldr	r1, [pc, #32]	; (127a0 <enable_logger+0x58>)
   1277e:	4628      	mov	r0, r5
   12780:	f014 fe62 	bl	27448 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   12784:	4620      	mov	r0, r4
   12786:	b009      	add	sp, #36	; 0x24
   12788:	bd30      	pop	{r4, r5, pc}
   1278a:	bf00      	nop
   1278c:	000127a5 	.word	0x000127a5
   12790:	20001bc8 	.word	0x20001bc8
   12794:	20001740 	.word	0x20001740
   12798:	20004640 	.word	0x20004640
   1279c:	00012a95 	.word	0x00012a95
   127a0:	00028fca 	.word	0x00028fca

000127a4 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   127a4:	4801      	ldr	r0, [pc, #4]	; (127ac <log_process_thread_timer_expiry_fn+0x8>)
   127a6:	f00c bfd1 	b.w	1f74c <z_impl_k_sem_give>
   127aa:	bf00      	nop
   127ac:	20000980 	.word	0x20000980

000127b0 <z_log_init>:
{
   127b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   127b4:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
   127b6:	481f      	ldr	r0, [pc, #124]	; (12834 <z_log_init+0x84>)
{
   127b8:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
   127ba:	f011 fdad 	bl	24318 <atomic_inc>
   127be:	4606      	mov	r6, r0
   127c0:	2800      	cmp	r0, #0
   127c2:	d030      	beq.n	12826 <z_log_init+0x76>
	uint32_t mask = 0;
   127c4:	2500      	movs	r5, #0
}
   127c6:	4628      	mov	r0, r5
   127c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
   127cc:	7b23      	ldrb	r3, [r4, #12]
   127ce:	b173      	cbz	r3, 127ee <z_log_init+0x3e>
	if (backend->api->init) {
   127d0:	6823      	ldr	r3, [r4, #0]
   127d2:	68db      	ldr	r3, [r3, #12]
   127d4:	b10b      	cbz	r3, 127da <z_log_init+0x2a>
		backend->api->init(backend);
   127d6:	4620      	mov	r0, r4
   127d8:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   127da:	6823      	ldr	r3, [r4, #0]
   127dc:	691b      	ldr	r3, [r3, #16]
   127de:	b9d3      	cbnz	r3, 12816 <z_log_init+0x66>
				log_backend_enable(backend,
   127e0:	6863      	ldr	r3, [r4, #4]
   127e2:	2204      	movs	r2, #4
   127e4:	6819      	ldr	r1, [r3, #0]
   127e6:	4620      	mov	r0, r4
   127e8:	f000 f9fe 	bl	12be8 <log_backend_enable>
			i++;
   127ec:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   127ee:	3410      	adds	r4, #16
   127f0:	454c      	cmp	r4, r9
   127f2:	d3eb      	bcc.n	127cc <z_log_init+0x1c>
	if (blocking) {
   127f4:	f1b8 0f00 	cmp.w	r8, #0
   127f8:	d0e5      	beq.n	127c6 <z_log_init+0x16>
		while (mask) {
   127fa:	2d00      	cmp	r5, #0
   127fc:	d0e2      	beq.n	127c4 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
   127fe:	4628      	mov	r0, r5
   12800:	f7ff ff70 	bl	126e4 <activate_foreach_backend>
   12804:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   12806:	2f00      	cmp	r7, #0
   12808:	d0f7      	beq.n	127fa <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
   1280a:	2100      	movs	r1, #0
   1280c:	f44f 70a4 	mov.w	r0, #328	; 0x148
   12810:	f00d fc7c 	bl	2010c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   12814:	e7f1      	b.n	127fa <z_log_init+0x4a>
		return backend->api->is_ready(backend);
   12816:	4620      	mov	r0, r4
   12818:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   1281a:	2800      	cmp	r0, #0
   1281c:	d0e0      	beq.n	127e0 <z_log_init+0x30>
				mask |= BIT(i);
   1281e:	fa0a f306 	lsl.w	r3, sl, r6
   12822:	431d      	orrs	r5, r3
   12824:	e7e2      	b.n	127ec <z_log_init+0x3c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12826:	4c04      	ldr	r4, [pc, #16]	; (12838 <z_log_init+0x88>)
   12828:	f8df 9010 	ldr.w	r9, [pc, #16]	; 1283c <z_log_init+0x8c>
	uint32_t mask = 0;
   1282c:	4605      	mov	r5, r0
				mask |= BIT(i);
   1282e:	f04f 0a01 	mov.w	sl, #1
   12832:	e7dd      	b.n	127f0 <z_log_init+0x40>
   12834:	20002be0 	.word	0x20002be0
   12838:	0002823c 	.word	0x0002823c
   1283c:	0002825c 	.word	0x0002825c

00012840 <log_format_func_t_get>:
}
   12840:	4b01      	ldr	r3, [pc, #4]	; (12848 <log_format_func_t_get+0x8>)
   12842:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   12846:	4770      	bx	lr
   12848:	000283cc 	.word	0x000283cc

0001284c <log_set_timestamp_func>:
{
   1284c:	b508      	push	{r3, lr}
   1284e:	4603      	mov	r3, r0
   12850:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
   12852:	b12b      	cbz	r3, 12860 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
   12854:	4a04      	ldr	r2, [pc, #16]	; (12868 <log_set_timestamp_func+0x1c>)
   12856:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
   12858:	f000 fc78 	bl	1314c <log_output_timestamp_freq_set>
	return 0;
   1285c:	2000      	movs	r0, #0
}
   1285e:	bd08      	pop	{r3, pc}
		return -EINVAL;
   12860:	f06f 0015 	mvn.w	r0, #21
   12864:	e7fb      	b.n	1285e <log_set_timestamp_func+0x12>
   12866:	bf00      	nop
   12868:	20000564 	.word	0x20000564

0001286c <z_log_notify_backend_enabled>:
{
   1286c:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   1286e:	4c04      	ldr	r4, [pc, #16]	; (12880 <z_log_notify_backend_enabled+0x14>)
   12870:	7823      	ldrb	r3, [r4, #0]
   12872:	b913      	cbnz	r3, 1287a <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
   12874:	4803      	ldr	r0, [pc, #12]	; (12884 <z_log_notify_backend_enabled+0x18>)
   12876:	f00c ff69 	bl	1f74c <z_impl_k_sem_give>
	backend_attached = true;
   1287a:	2301      	movs	r3, #1
   1287c:	7023      	strb	r3, [r4, #0]
}
   1287e:	bd10      	pop	{r4, pc}
   12880:	2000401f 	.word	0x2000401f
   12884:	20000980 	.word	0x20000980

00012888 <z_log_dropped>:
{
   12888:	b510      	push	{r4, lr}
   1288a:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
   1288c:	4808      	ldr	r0, [pc, #32]	; (128b0 <z_log_dropped+0x28>)
   1288e:	f011 fd43 	bl	24318 <atomic_inc>
	if (buffered) {
   12892:	b15c      	cbz	r4, 128ac <z_log_dropped+0x24>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12894:	f3bf 8f5b 	dmb	ish
   12898:	4b06      	ldr	r3, [pc, #24]	; (128b4 <z_log_dropped+0x2c>)
   1289a:	e853 1f00 	ldrex	r1, [r3]
   1289e:	3901      	subs	r1, #1
   128a0:	e843 1200 	strex	r2, r1, [r3]
   128a4:	2a00      	cmp	r2, #0
   128a6:	d1f8      	bne.n	1289a <z_log_dropped+0x12>
   128a8:	f3bf 8f5b 	dmb	ish
}
   128ac:	bd10      	pop	{r4, pc}
   128ae:	bf00      	nop
   128b0:	20002bd8 	.word	0x20002bd8
   128b4:	20002bdc 	.word	0x20002bdc

000128b8 <z_log_dropped_read_and_clear>:
}
   128b8:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   128ba:	4b06      	ldr	r3, [pc, #24]	; (128d4 <z_log_dropped_read_and_clear+0x1c>)
   128bc:	f3bf 8f5b 	dmb	ish
   128c0:	4601      	mov	r1, r0
   128c2:	e853 0f00 	ldrex	r0, [r3]
   128c6:	e843 1200 	strex	r2, r1, [r3]
   128ca:	2a00      	cmp	r2, #0
   128cc:	d1f9      	bne.n	128c2 <z_log_dropped_read_and_clear+0xa>
   128ce:	f3bf 8f5b 	dmb	ish
   128d2:	4770      	bx	lr
   128d4:	20002bd8 	.word	0x20002bd8

000128d8 <dropped_notify>:
{
   128d8:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   128da:	f7ff ffed 	bl	128b8 <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   128de:	4c08      	ldr	r4, [pc, #32]	; (12900 <dropped_notify+0x28>)
   128e0:	4e08      	ldr	r6, [pc, #32]	; (12904 <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
   128e2:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   128e4:	42b4      	cmp	r4, r6
   128e6:	d300      	bcc.n	128ea <dropped_notify+0x12>
}
   128e8:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   128ea:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   128ec:	795b      	ldrb	r3, [r3, #5]
   128ee:	b12b      	cbz	r3, 128fc <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
   128f0:	6823      	ldr	r3, [r4, #0]
   128f2:	685b      	ldr	r3, [r3, #4]
   128f4:	b113      	cbz	r3, 128fc <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
   128f6:	4629      	mov	r1, r5
   128f8:	4620      	mov	r0, r4
   128fa:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   128fc:	3410      	adds	r4, #16
   128fe:	e7f1      	b.n	128e4 <dropped_notify+0xc>
   12900:	0002823c 	.word	0x0002823c
   12904:	0002825c 	.word	0x0002825c

00012908 <z_log_msg_init>:
{
   12908:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   1290a:	4c04      	ldr	r4, [pc, #16]	; (1291c <z_log_msg_init+0x14>)
   1290c:	4904      	ldr	r1, [pc, #16]	; (12920 <z_log_msg_init+0x18>)
   1290e:	4620      	mov	r0, r4
   12910:	f011 fb93 	bl	2403a <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   12914:	4b03      	ldr	r3, [pc, #12]	; (12924 <z_log_msg_init+0x1c>)
   12916:	601c      	str	r4, [r3, #0]
}
   12918:	bd10      	pop	{r4, pc}
   1291a:	bf00      	nop
   1291c:	20000870 	.word	0x20000870
   12920:	000283b8 	.word	0x000283b8
   12924:	20002bd0 	.word	0x20002bd0

00012928 <log_core_init>:
	panic_mode = false;
   12928:	4a08      	ldr	r2, [pc, #32]	; (1294c <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
   1292a:	4809      	ldr	r0, [pc, #36]	; (12950 <log_core_init+0x28>)
{
   1292c:	b508      	push	{r3, lr}
	panic_mode = false;
   1292e:	2300      	movs	r3, #0
   12930:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   12932:	4a08      	ldr	r2, [pc, #32]	; (12954 <log_core_init+0x2c>)
   12934:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
   12936:	4a08      	ldr	r2, [pc, #32]	; (12958 <log_core_init+0x30>)
		log_set_timestamp_func(default_get_timestamp,
   12938:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	buffered_cnt = 0;
   1293c:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   1293e:	f7ff ff85 	bl	1284c <log_set_timestamp_func>
}
   12942:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
   12946:	f7ff bfdf 	b.w	12908 <z_log_msg_init>
   1294a:	bf00      	nop
   1294c:	20004020 	.word	0x20004020
   12950:	00024315 	.word	0x00024315
   12954:	20002bd8 	.word	0x20002bd8
   12958:	20002bdc 	.word	0x20002bdc

0001295c <z_log_msg_alloc>:
{
   1295c:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   1295e:	2200      	movs	r2, #0
   12960:	4801      	ldr	r0, [pc, #4]	; (12968 <z_log_msg_alloc+0xc>)
   12962:	2300      	movs	r3, #0
   12964:	f011 bb8a 	b.w	2407c <mpsc_pbuf_alloc>
   12968:	20000870 	.word	0x20000870

0001296c <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   1296c:	4801      	ldr	r0, [pc, #4]	; (12974 <z_log_msg_local_claim+0x8>)
   1296e:	f011 bc23 	b.w	241b8 <mpsc_pbuf_claim>
   12972:	bf00      	nop
   12974:	20000870 	.word	0x20000870

00012978 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
   12978:	4b02      	ldr	r3, [pc, #8]	; (12984 <z_log_msg_free+0xc>)
{
   1297a:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
   1297c:	6818      	ldr	r0, [r3, #0]
   1297e:	f011 bc6d 	b.w	2425c <mpsc_pbuf_free>
   12982:	bf00      	nop
   12984:	20002bd0 	.word	0x20002bd0

00012988 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
   12988:	4801      	ldr	r0, [pc, #4]	; (12990 <z_log_msg_pending+0x8>)
   1298a:	f011 bca3 	b.w	242d4 <mpsc_pbuf_is_pending>
   1298e:	bf00      	nop
   12990:	20000870 	.word	0x20000870

00012994 <z_impl_log_process>:
{
   12994:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
   12996:	4b28      	ldr	r3, [pc, #160]	; (12a38 <z_impl_log_process+0xa4>)
   12998:	7818      	ldrb	r0, [r3, #0]
   1299a:	2800      	cmp	r0, #0
   1299c:	d04b      	beq.n	12a36 <z_impl_log_process+0xa2>
	return z_log_msg_local_claim();
   1299e:	f7ff ffe5 	bl	1296c <z_log_msg_local_claim>
	if (msg) {
   129a2:	4605      	mov	r5, r0
   129a4:	b190      	cbz	r0, 129cc <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   129a6:	f3bf 8f5b 	dmb	ish
   129aa:	4b24      	ldr	r3, [pc, #144]	; (12a3c <z_impl_log_process+0xa8>)
   129ac:	e853 1f00 	ldrex	r1, [r3]
   129b0:	3901      	subs	r1, #1
   129b2:	e843 1200 	strex	r2, r1, [r3]
   129b6:	2a00      	cmp	r2, #0
   129b8:	d1f8      	bne.n	129ac <z_impl_log_process+0x18>
   129ba:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   129be:	4c20      	ldr	r4, [pc, #128]	; (12a40 <z_impl_log_process+0xac>)
   129c0:	4e20      	ldr	r6, [pc, #128]	; (12a44 <z_impl_log_process+0xb0>)
   129c2:	42b4      	cmp	r4, r6
   129c4:	d32d      	bcc.n	12a22 <z_impl_log_process+0x8e>
		z_log_msg_free(msg);
   129c6:	4628      	mov	r0, r5
   129c8:	f7ff ffd6 	bl	12978 <z_log_msg_free>
	return dropped_cnt > 0;
   129cc:	4b1e      	ldr	r3, [pc, #120]	; (12a48 <z_impl_log_process+0xb4>)
   129ce:	4c1f      	ldr	r4, [pc, #124]	; (12a4c <z_impl_log_process+0xb8>)
		if ((dropped_pend || unordered_pend) &&
   129d0:	681b      	ldr	r3, [r3, #0]
   129d2:	2b00      	cmp	r3, #0
   129d4:	dd19      	ble.n	12a0a <z_impl_log_process+0x76>
	return z_impl_k_uptime_ticks();
   129d6:	f015 f84e 	bl	27a76 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   129da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   129de:	fba0 0302 	umull	r0, r3, r0, r2
   129e2:	fb02 3101 	mla	r1, r2, r1, r3
   129e6:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   129e8:	e9d4 2000 	ldrd	r2, r0, [r4]
   129ec:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   129f0:	1a9b      	subs	r3, r3, r2
   129f2:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
   129f6:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   129fa:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
   129fe:	4293      	cmp	r3, r2
   12a00:	f171 0100 	sbcs.w	r1, r1, #0
   12a04:	d301      	bcc.n	12a0a <z_impl_log_process+0x76>
				dropped_notify();
   12a06:	f7ff ff67 	bl	128d8 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   12a0a:	e9d4 3200 	ldrd	r3, r2, [r4]
   12a0e:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   12a12:	f142 0200 	adc.w	r2, r2, #0
   12a16:	e9c4 3200 	strd	r3, r2, [r4]
}
   12a1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
   12a1e:	f7ff bfb3 	b.w	12988 <z_log_msg_pending>
	return backend->cb->active;
   12a22:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
   12a24:	795b      	ldrb	r3, [r3, #5]
   12a26:	b123      	cbz	r3, 12a32 <z_impl_log_process+0x9e>
	backend->api->process(backend, msg);
   12a28:	6823      	ldr	r3, [r4, #0]
   12a2a:	4629      	mov	r1, r5
   12a2c:	681b      	ldr	r3, [r3, #0]
   12a2e:	4620      	mov	r0, r4
   12a30:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12a32:	3410      	adds	r4, #16
   12a34:	e7c5      	b.n	129c2 <z_impl_log_process+0x2e>
}
   12a36:	bd70      	pop	{r4, r5, r6, pc}
   12a38:	2000401f 	.word	0x2000401f
   12a3c:	20002bdc 	.word	0x20002bdc
   12a40:	0002823c 	.word	0x0002823c
   12a44:	0002825c 	.word	0x0002825c
   12a48:	20002bd8 	.word	0x20002bd8
   12a4c:	20001bc0 	.word	0x20001bc0

00012a50 <z_impl_log_panic>:
{
   12a50:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
   12a52:	4d0d      	ldr	r5, [pc, #52]	; (12a88 <z_impl_log_panic+0x38>)
   12a54:	7829      	ldrb	r1, [r5, #0]
   12a56:	b961      	cbnz	r1, 12a72 <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
   12a58:	2001      	movs	r0, #1
   12a5a:	f7ff fea9 	bl	127b0 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12a5e:	4c0b      	ldr	r4, [pc, #44]	; (12a8c <z_impl_log_panic+0x3c>)
   12a60:	4e0b      	ldr	r6, [pc, #44]	; (12a90 <z_impl_log_panic+0x40>)
   12a62:	42b4      	cmp	r4, r6
   12a64:	d306      	bcc.n	12a74 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   12a66:	f7ff ff95 	bl	12994 <z_impl_log_process>
		while (log_process() == true) {
   12a6a:	2800      	cmp	r0, #0
   12a6c:	d1fb      	bne.n	12a66 <z_impl_log_panic+0x16>
	panic_mode = true;
   12a6e:	2301      	movs	r3, #1
   12a70:	702b      	strb	r3, [r5, #0]
}
   12a72:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
   12a74:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   12a76:	795b      	ldrb	r3, [r3, #5]
   12a78:	b11b      	cbz	r3, 12a82 <z_impl_log_panic+0x32>
	backend->api->panic(backend);
   12a7a:	6823      	ldr	r3, [r4, #0]
   12a7c:	4620      	mov	r0, r4
   12a7e:	689b      	ldr	r3, [r3, #8]
   12a80:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12a82:	3410      	adds	r4, #16
   12a84:	e7ed      	b.n	12a62 <z_impl_log_panic+0x12>
   12a86:	bf00      	nop
   12a88:	20004020 	.word	0x20004020
   12a8c:	0002823c 	.word	0x0002823c
   12a90:	0002825c 	.word	0x0002825c

00012a94 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
   12a94:	2100      	movs	r1, #0
{
   12a96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
   12a9a:	4608      	mov	r0, r1
   12a9c:	f7ff fe88 	bl	127b0 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   12aa0:	4604      	mov	r4, r0
   12aa2:	b348      	cbz	r0, 12af8 <log_process_thread_func+0x64>
   12aa4:	f240 6867 	movw	r8, #1639	; 0x667
   12aa8:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
   12aac:	f00d fb48 	bl	20140 <z_impl_z_current_get>
	proc_tid = process_tid;
   12ab0:	4b1a      	ldr	r3, [pc, #104]	; (12b1c <log_process_thread_func+0x88>)
   12ab2:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   12ab4:	b130      	cbz	r0, 12ac4 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   12ab6:	4b1a      	ldr	r3, [pc, #104]	; (12b20 <log_process_thread_func+0x8c>)
	    process_tid &&
   12ab8:	681b      	ldr	r3, [r3, #0]
   12aba:	2b09      	cmp	r3, #9
   12abc:	dd02      	ble.n	12ac4 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
   12abe:	4819      	ldr	r0, [pc, #100]	; (12b24 <log_process_thread_func+0x90>)
   12ac0:	f00c fe44 	bl	1f74c <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12ac4:	4f18      	ldr	r7, [pc, #96]	; (12b28 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
   12ac6:	f8df a05c 	ldr.w	sl, [pc, #92]	; 12b24 <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   12aca:	2500      	movs	r5, #0
		if (activate_mask) {
   12acc:	b144      	cbz	r4, 12ae0 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
   12ace:	4620      	mov	r0, r4
   12ad0:	f7ff fe08 	bl	126e4 <activate_foreach_backend>
			if (!activate_mask) {
   12ad4:	4604      	mov	r4, r0
   12ad6:	b918      	cbnz	r0, 12ae0 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
   12ad8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   12adc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   12ae0:	f7ff ff58 	bl	12994 <z_impl_log_process>
		if (log_process() == false) {
   12ae4:	4606      	mov	r6, r0
   12ae6:	b928      	cbnz	r0, 12af4 <log_process_thread_func+0x60>
			if (processed_any) {
   12ae8:	b9b5      	cbnz	r5, 12b18 <log_process_thread_func+0x84>
   12aea:	4642      	mov	r2, r8
   12aec:	464b      	mov	r3, r9
   12aee:	4650      	mov	r0, sl
   12af0:	f00c fe52 	bl	1f798 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   12af4:	4635      	mov	r5, r6
   12af6:	e7e9      	b.n	12acc <log_process_thread_func+0x38>
   12af8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   12afc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   12b00:	e7d4      	b.n	12aac <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
   12b02:	682b      	ldr	r3, [r5, #0]
   12b04:	699b      	ldr	r3, [r3, #24]
   12b06:	b11b      	cbz	r3, 12b10 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
   12b08:	2200      	movs	r2, #0
   12b0a:	4611      	mov	r1, r2
   12b0c:	4628      	mov	r0, r5
   12b0e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12b10:	3510      	adds	r5, #16
   12b12:	42bd      	cmp	r5, r7
   12b14:	d3f5      	bcc.n	12b02 <log_process_thread_func+0x6e>
   12b16:	e7e8      	b.n	12aea <log_process_thread_func+0x56>
   12b18:	4d04      	ldr	r5, [pc, #16]	; (12b2c <log_process_thread_func+0x98>)
   12b1a:	e7fa      	b.n	12b12 <log_process_thread_func+0x7e>
   12b1c:	20002bd4 	.word	0x20002bd4
   12b20:	20002bdc 	.word	0x20002bdc
   12b24:	20000980 	.word	0x20000980
   12b28:	0002825c 	.word	0x0002825c
   12b2c:	0002823c 	.word	0x0002823c

00012b30 <z_log_msg_post_finalize>:
{
   12b30:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
   12b32:	4818      	ldr	r0, [pc, #96]	; (12b94 <z_log_msg_post_finalize+0x64>)
   12b34:	f011 fbf0 	bl	24318 <atomic_inc>
	if (panic_mode) {
   12b38:	4b17      	ldr	r3, [pc, #92]	; (12b98 <z_log_msg_post_finalize+0x68>)
   12b3a:	781b      	ldrb	r3, [r3, #0]
   12b3c:	b17b      	cbz	r3, 12b5e <z_log_msg_post_finalize+0x2e>
   12b3e:	f04f 0340 	mov.w	r3, #64	; 0x40
   12b42:	f3ef 8411 	mrs	r4, BASEPRI
   12b46:	f383 8812 	msr	BASEPRI_MAX, r3
   12b4a:	f3bf 8f6f 	isb	sy
   12b4e:	f7ff ff21 	bl	12994 <z_impl_log_process>
	__asm__ volatile(
   12b52:	f384 8811 	msr	BASEPRI, r4
   12b56:	f3bf 8f6f 	isb	sy
}
   12b5a:	b002      	add	sp, #8
   12b5c:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
   12b5e:	4b0f      	ldr	r3, [pc, #60]	; (12b9c <z_log_msg_post_finalize+0x6c>)
   12b60:	681b      	ldr	r3, [r3, #0]
   12b62:	2b00      	cmp	r3, #0
   12b64:	d0f9      	beq.n	12b5a <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
   12b66:	b950      	cbnz	r0, 12b7e <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
   12b68:	2200      	movs	r2, #0
   12b6a:	2300      	movs	r3, #0
   12b6c:	e9cd 2300 	strd	r2, r3, [sp]
   12b70:	480b      	ldr	r0, [pc, #44]	; (12ba0 <z_log_msg_post_finalize+0x70>)
   12b72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   12b76:	2300      	movs	r3, #0
   12b78:	f00d fd26 	bl	205c8 <z_impl_k_timer_start>
   12b7c:	e7ed      	b.n	12b5a <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   12b7e:	280a      	cmp	r0, #10
   12b80:	d1eb      	bne.n	12b5a <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
   12b82:	4807      	ldr	r0, [pc, #28]	; (12ba0 <z_log_msg_post_finalize+0x70>)
   12b84:	f014 ffab 	bl	27ade <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   12b88:	4806      	ldr	r0, [pc, #24]	; (12ba4 <z_log_msg_post_finalize+0x74>)
}
   12b8a:	b002      	add	sp, #8
   12b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12b90:	f00c bddc 	b.w	1f74c <z_impl_k_sem_give>
   12b94:	20002bdc 	.word	0x20002bdc
   12b98:	20004020 	.word	0x20004020
   12b9c:	20002bd4 	.word	0x20002bd4
   12ba0:	20001bc8 	.word	0x20001bc8
   12ba4:	20000980 	.word	0x20000980

00012ba8 <z_log_msg_commit>:
{
   12ba8:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
   12baa:	4b06      	ldr	r3, [pc, #24]	; (12bc4 <z_log_msg_commit+0x1c>)
   12bac:	681b      	ldr	r3, [r3, #0]
{
   12bae:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   12bb0:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
   12bb2:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
   12bb4:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
   12bb6:	4804      	ldr	r0, [pc, #16]	; (12bc8 <z_log_msg_commit+0x20>)
   12bb8:	f011 fade 	bl	24178 <mpsc_pbuf_commit>
}
   12bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
   12bc0:	f7ff bfb6 	b.w	12b30 <z_log_msg_post_finalize>
   12bc4:	20000564 	.word	0x20000564
   12bc8:	20000870 	.word	0x20000870

00012bcc <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   12bcc:	4a04      	ldr	r2, [pc, #16]	; (12be0 <log_source_name_get+0x14>)
   12bce:	4b05      	ldr	r3, [pc, #20]	; (12be4 <log_source_name_get+0x18>)
   12bd0:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   12bd2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
   12bd6:	bf34      	ite	cc
   12bd8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
   12bdc:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   12bde:	4770      	bx	lr
   12be0:	00028124 	.word	0x00028124
   12be4:	0002823c 	.word	0x0002823c

00012be8 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   12be8:	4b08      	ldr	r3, [pc, #32]	; (12c0c <log_backend_enable+0x24>)
   12bea:	1ac3      	subs	r3, r0, r3
{
   12bec:	b410      	push	{r4}
	id += backend - log_backend_get(0);
   12bee:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
   12bf0:	6844      	ldr	r4, [r0, #4]
   12bf2:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
   12bf4:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
   12bf6:	6843      	ldr	r3, [r0, #4]
   12bf8:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
   12bfa:	6843      	ldr	r3, [r0, #4]
   12bfc:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   12bfe:	6843      	ldr	r3, [r0, #4]
   12c00:	2201      	movs	r2, #1
   12c02:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
   12c04:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
   12c06:	f7ff be31 	b.w	1286c <z_log_notify_backend_enabled>
   12c0a:	bf00      	nop
   12c0c:	0002823c 	.word	0x0002823c

00012c10 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   12c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c14:	b08f      	sub	sp, #60	; 0x3c
   12c16:	af04      	add	r7, sp, #16
   12c18:	f3c1 284a 	ubfx	r8, r1, #9, #11
   12c1c:	60b8      	str	r0, [r7, #8]
   12c1e:	460d      	mov	r5, r1
   12c20:	4691      	mov	r9, r2
   12c22:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
   12c24:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
   12c26:	f1b8 0f00 	cmp.w	r8, #0
   12c2a:	d063      	beq.n	12cf4 <z_impl_z_log_msg_static_create+0xe4>
	struct z_cbprintf_buf_desc buf_desc = {
   12c2c:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
   12c2e:	f107 0314 	add.w	r3, r7, #20
   12c32:	f04f 0b04 	mov.w	fp, #4
   12c36:	f04f 0a0a 	mov.w	sl, #10
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
   12c3a:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
   12c3e:	e9c7 6607 	strd	r6, r6, [r7, #28]
   12c42:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
   12c44:	9301      	str	r3, [sp, #4]
   12c46:	f8cd b008 	str.w	fp, [sp, #8]
   12c4a:	f8cd a000 	str.w	sl, [sp]
   12c4e:	f107 031c 	add.w	r3, r7, #28
   12c52:	68f9      	ldr	r1, [r7, #12]
   12c54:	4632      	mov	r2, r6
   12c56:	4648      	mov	r0, r9
   12c58:	f7fe fe70 	bl	1193c <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
   12c5c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   12c60:	4603      	mov	r3, r0
   12c62:	d31c      	bcc.n	12c9e <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
   12c64:	466c      	mov	r4, sp
   12c66:	b08a      	sub	sp, #40	; 0x28
   12c68:	f8d9 1004 	ldr.w	r1, [r9, #4]
   12c6c:	ab04      	add	r3, sp, #16
   12c6e:	4826      	ldr	r0, [pc, #152]	; (12d08 <z_impl_z_log_msg_static_create+0xf8>)
   12c70:	e9c3 0105 	strd	r0, r1, [r3, #20]
   12c74:	f240 71ff 	movw	r1, #2047	; 0x7ff
   12c78:	61d9      	str	r1, [r3, #28]
   12c7a:	461a      	mov	r2, r3
   12c7c:	f44f 7100 	mov.w	r1, #512	; 0x200
   12c80:	8419      	strh	r1, [r3, #32]
   12c82:	4b22      	ldr	r3, [pc, #136]	; (12d0c <z_impl_z_log_msg_static_create+0xfc>)
   12c84:	f842 3f10 	str.w	r3, [r2, #16]!
   12c88:	4821      	ldr	r0, [pc, #132]	; (12d10 <z_impl_z_log_msg_static_create+0x100>)
   12c8a:	4633      	mov	r3, r6
   12c8c:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   12c90:	f7ff ffbe 	bl	12c10 <z_impl_z_log_msg_static_create>
   12c94:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
   12c96:	372c      	adds	r7, #44	; 0x2c
   12c98:	46bd      	mov	sp, r7
   12c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
   12c9e:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   12ca2:	f104 0017 	add.w	r0, r4, #23
   12ca6:	4418      	add	r0, r3
   12ca8:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   12cac:	0880      	lsrs	r0, r0, #2
   12cae:	603b      	str	r3, [r7, #0]
   12cb0:	f7ff fe54 	bl	1295c <z_log_msg_alloc>
   12cb4:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
   12cb8:	4604      	mov	r4, r0
   12cba:	b190      	cbz	r0, 12ce2 <z_impl_z_log_msg_static_create+0xd2>
	struct z_cbprintf_buf_desc buf_desc = {
   12cbc:	683b      	ldr	r3, [r7, #0]
	return cbprintf_package_convert(in_packaged, in_len,
   12cbe:	4a15      	ldr	r2, [pc, #84]	; (12d14 <z_impl_z_log_msg_static_create+0x104>)
	struct z_cbprintf_buf_desc buf_desc = {
   12cc0:	e9c7 3608 	strd	r3, r6, [r7, #32]
						    msg->data, out_desc.package_len,
   12cc4:	f100 0110 	add.w	r1, r0, #16
	return cbprintf_package_convert(in_packaged, in_len,
   12cc8:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
   12ccc:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
   12cce:	e9cd a300 	strd	sl, r3, [sp]
   12cd2:	f8cd b008 	str.w	fp, [sp, #8]
   12cd6:	68f9      	ldr	r1, [r7, #12]
   12cd8:	f107 031c 	add.w	r3, r7, #28
   12cdc:	4648      	mov	r0, r9
   12cde:	f7fe fe2d 	bl	1193c <cbprintf_package_convert>
	z_log_msg_finalize(msg, source, out_desc, data);
   12ce2:	f368 2553 	bfi	r5, r8, #9, #11
   12ce6:	687b      	ldr	r3, [r7, #4]
   12ce8:	68b9      	ldr	r1, [r7, #8]
   12cea:	462a      	mov	r2, r5
   12cec:	4620      	mov	r0, r4
   12cee:	f011 fb49 	bl	24384 <z_log_msg_finalize>
   12cf2:	e7d0      	b.n	12c96 <z_impl_z_log_msg_static_create+0x86>
   12cf4:	f104 0017 	add.w	r0, r4, #23
   12cf8:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   12cfc:	0880      	lsrs	r0, r0, #2
   12cfe:	f7ff fe2d 	bl	1295c <z_log_msg_alloc>
   12d02:	4604      	mov	r4, r0
   12d04:	e7ed      	b.n	12ce2 <z_impl_z_log_msg_static_create+0xd2>
   12d06:	bf00      	nop
   12d08:	00028fdf 	.word	0x00028fdf
   12d0c:	01000004 	.word	0x01000004
   12d10:	000281e4 	.word	0x000281e4
   12d14:	00024359 	.word	0x00024359

00012d18 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   12d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d1c:	b087      	sub	sp, #28
   12d1e:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
   12d22:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
   12d26:	4604      	mov	r4, r0
   12d28:	460f      	mov	r7, r1
   12d2a:	4693      	mov	fp, r2
   12d2c:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
   12d2e:	b3a6      	cbz	r6, 12d9a <z_impl_z_log_msg_runtime_vcreate+0x82>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
   12d30:	2110      	movs	r1, #16
   12d32:	f8cd 9000 	str.w	r9, [sp]
   12d36:	4633      	mov	r3, r6
   12d38:	4652      	mov	r2, sl
   12d3a:	2000      	movs	r0, #0
		va_copy(ap2, ap);
   12d3c:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
   12d40:	f7fe fc26 	bl	11590 <cbvprintf_package>
   12d44:	4601      	mov	r1, r0
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   12d46:	f105 0017 	add.w	r0, r5, #23
   12d4a:	4408      	add	r0, r1
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   12d4c:	4b14      	ldr	r3, [pc, #80]	; (12da0 <z_impl_z_log_msg_runtime_vcreate+0x88>)
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   12d4e:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
   12d50:	f004 0407 	and.w	r4, r4, #7
   12d54:	f00b 0b07 	and.w	fp, fp, #7
   12d58:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   12d5a:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
   12d5e:	ea03 2341 	and.w	r3, r3, r1, lsl #9
   12d62:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   12d66:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
   12d68:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
   12d6a:	f7ff fdf7 	bl	1295c <z_log_msg_alloc>
	struct log_msg_desc desc =
   12d6e:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   12d72:	4605      	mov	r5, r0
   12d74:	b140      	cbz	r0, 12d88 <z_impl_z_log_msg_runtime_vcreate+0x70>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   12d76:	b13e      	cbz	r6, 12d88 <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   12d78:	9903      	ldr	r1, [sp, #12]
   12d7a:	f8cd 9000 	str.w	r9, [sp]
   12d7e:	4633      	mov	r3, r6
   12d80:	4652      	mov	r2, sl
   12d82:	3010      	adds	r0, #16
   12d84:	f7fe fc04 	bl	11590 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   12d88:	4643      	mov	r3, r8
   12d8a:	4622      	mov	r2, r4
   12d8c:	4639      	mov	r1, r7
   12d8e:	4628      	mov	r0, r5
	}
}
   12d90:	b007      	add	sp, #28
   12d92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
   12d96:	f011 baf5 	b.w	24384 <z_log_msg_finalize>
		plen = 0;
   12d9a:	4631      	mov	r1, r6
   12d9c:	e7d3      	b.n	12d46 <z_impl_z_log_msg_runtime_vcreate+0x2e>
   12d9e:	bf00      	nop
   12da0:	000ffe00 	.word	0x000ffe00

00012da4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   12da4:	b40e      	push	{r1, r2, r3}
   12da6:	b503      	push	{r0, r1, lr}
   12da8:	ab03      	add	r3, sp, #12
   12daa:	4601      	mov	r1, r0
   12dac:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   12db0:	4804      	ldr	r0, [pc, #16]	; (12dc4 <print_formatted+0x20>)
	va_start(args, fmt);
   12db2:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   12db4:	f011 fb0c 	bl	243d0 <cbvprintf>
	va_end(args);

	return length;
}
   12db8:	b002      	add	sp, #8
   12dba:	f85d eb04 	ldr.w	lr, [sp], #4
   12dbe:	b003      	add	sp, #12
   12dc0:	4770      	bx	lr
   12dc2:	bf00      	nop
   12dc4:	000243f9 	.word	0x000243f9

00012dc8 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   12dc8:	06ca      	lsls	r2, r1, #27
   12dca:	d405      	bmi.n	12dd8 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   12dcc:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
   12dce:	bf4c      	ite	mi
   12dd0:	4902      	ldrmi	r1, [pc, #8]	; (12ddc <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
   12dd2:	4903      	ldrpl	r1, [pc, #12]	; (12de0 <newline_print+0x18>)
   12dd4:	f7ff bfe6 	b.w	12da4 <print_formatted>
	}
}
   12dd8:	4770      	bx	lr
   12dda:	bf00      	nop
   12ddc:	0002901f 	.word	0x0002901f
   12de0:	0002901e 	.word	0x0002901e

00012de4 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   12de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12de8:	b089      	sub	sp, #36	; 0x24
   12dea:	469b      	mov	fp, r3
   12dec:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   12df0:	9304      	str	r3, [sp, #16]
   12df2:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
   12df6:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   12df8:	9b04      	ldr	r3, [sp, #16]
{
   12dfa:	9206      	str	r2, [sp, #24]
   12dfc:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
   12e00:	4604      	mov	r4, r0
   12e02:	460d      	mov	r5, r1
	if (!raw_string) {
   12e04:	2b00      	cmp	r3, #0
   12e06:	f000 8087 	beq.w	12f18 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   12e0a:	f006 0308 	and.w	r3, r6, #8
   12e0e:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   12e10:	f011 faa0 	bl	24354 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   12e14:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
   12e18:	4602      	mov	r2, r0
   12e1a:	2800      	cmp	r0, #0
   12e1c:	d04b      	beq.n	12eb6 <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
   12e1e:	4986      	ldr	r1, [pc, #536]	; (13038 <log_output_process+0x254>)
   12e20:	4620      	mov	r0, r4
   12e22:	f7ff ffbf 	bl	12da4 <print_formatted>
   12e26:	4680      	mov	r8, r0
	if (stamp) {
   12e28:	f1ba 0f00 	cmp.w	sl, #0
   12e2c:	d008      	beq.n	12e40 <log_output_process+0x5c>
	if (!format) {
   12e2e:	f016 0f44 	tst.w	r6, #68	; 0x44
   12e32:	d142      	bne.n	12eba <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
   12e34:	4981      	ldr	r1, [pc, #516]	; (1303c <log_output_process+0x258>)
   12e36:	462a      	mov	r2, r5
   12e38:	4620      	mov	r0, r4
   12e3a:	f7ff ffb3 	bl	12da4 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   12e3e:	4480      	add	r8, r0
	if (color) {
   12e40:	f006 0301 	and.w	r3, r6, #1
   12e44:	b15b      	cbz	r3, 12e5e <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
   12e46:	4b7e      	ldr	r3, [pc, #504]	; (13040 <log_output_process+0x25c>)
   12e48:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
   12e4a:	497e      	ldr	r1, [pc, #504]	; (13044 <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
   12e4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
   12e50:	4b7d      	ldr	r3, [pc, #500]	; (13048 <log_output_process+0x264>)
   12e52:	4620      	mov	r0, r4
   12e54:	2a00      	cmp	r2, #0
   12e56:	bf08      	it	eq
   12e58:	461a      	moveq	r2, r3
   12e5a:	f7ff ffa3 	bl	12da4 <print_formatted>
	if (level_on) {
   12e5e:	f006 0308 	and.w	r3, r6, #8
   12e62:	2b00      	cmp	r3, #0
   12e64:	d055      	beq.n	12f12 <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
   12e66:	4b79      	ldr	r3, [pc, #484]	; (1304c <log_output_process+0x268>)
   12e68:	9a04      	ldr	r2, [sp, #16]
   12e6a:	4979      	ldr	r1, [pc, #484]	; (13050 <log_output_process+0x26c>)
   12e6c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   12e70:	4620      	mov	r0, r4
   12e72:	f7ff ff97 	bl	12da4 <print_formatted>
   12e76:	4605      	mov	r5, r0
	if (domain) {
   12e78:	9b06      	ldr	r3, [sp, #24]
   12e7a:	b12b      	cbz	r3, 12e88 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
   12e7c:	4975      	ldr	r1, [pc, #468]	; (13054 <log_output_process+0x270>)
   12e7e:	461a      	mov	r2, r3
   12e80:	4620      	mov	r0, r4
   12e82:	f7ff ff8f 	bl	12da4 <print_formatted>
   12e86:	4405      	add	r5, r0
	if (source) {
   12e88:	f1bb 0f00 	cmp.w	fp, #0
   12e8c:	d005      	beq.n	12e9a <log_output_process+0xb6>
		total += print_formatted(output,
   12e8e:	4972      	ldr	r1, [pc, #456]	; (13058 <log_output_process+0x274>)
   12e90:	465a      	mov	r2, fp
   12e92:	4620      	mov	r0, r4
   12e94:	f7ff ff86 	bl	12da4 <print_formatted>
   12e98:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   12e9a:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
   12e9c:	f1b9 0f00 	cmp.w	r9, #0
   12ea0:	d149      	bne.n	12f36 <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   12ea2:	2f00      	cmp	r7, #0
   12ea4:	d14f      	bne.n	12f46 <log_output_process+0x162>
	if (color) {
   12ea6:	07f3      	lsls	r3, r6, #31
   12ea8:	f100 80c0 	bmi.w	1302c <log_output_process+0x248>
	newline_print(output, flags);
   12eac:	4631      	mov	r1, r6
   12eae:	4620      	mov	r0, r4
   12eb0:	f7ff ff8a 	bl	12dc8 <newline_print>
}
   12eb4:	e0b4      	b.n	13020 <log_output_process+0x23c>
	uint32_t length = 0U;
   12eb6:	4680      	mov	r8, r0
   12eb8:	e7b6      	b.n	12e28 <log_output_process+0x44>
	} else if (freq != 0U) {
   12eba:	4b68      	ldr	r3, [pc, #416]	; (1305c <log_output_process+0x278>)
   12ebc:	6818      	ldr	r0, [r3, #0]
   12ebe:	2800      	cmp	r0, #0
   12ec0:	d0bd      	beq.n	12e3e <log_output_process+0x5a>
		timestamp /= timestamp_div;
   12ec2:	4b67      	ldr	r3, [pc, #412]	; (13060 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
   12ec4:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
   12ec8:	681b      	ldr	r3, [r3, #0]
   12eca:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
   12ece:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   12ed2:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
   12ed6:	fb00 5513 	mls	r5, r0, r3, r5
   12eda:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
   12ede:	fb0e f505 	mul.w	r5, lr, r5
   12ee2:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
   12ee6:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   12ee8:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
   12eec:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   12ef0:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
   12ef4:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   12ef8:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
   12efc:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   12efe:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
   12f02:	4958      	ldr	r1, [pc, #352]	; (13064 <log_output_process+0x280>)
   12f04:	e9cd c501 	strd	ip, r5, [sp, #4]
   12f08:	4652      	mov	r2, sl
   12f0a:	4620      	mov	r0, r4
   12f0c:	f7ff ff4a 	bl	12da4 <print_formatted>
   12f10:	e795      	b.n	12e3e <log_output_process+0x5a>
	int total = 0;
   12f12:	f006 0508 	and.w	r5, r6, #8
   12f16:	e7af      	b.n	12e78 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   12f18:	f1bb 0f01 	cmp.w	fp, #1
   12f1c:	d106      	bne.n	12f2c <log_output_process+0x148>
	if (package) {
   12f1e:	f1b9 0f00 	cmp.w	r9, #0
   12f22:	d164      	bne.n	12fee <log_output_process+0x20a>
	if (data_len) {
   12f24:	2f00      	cmp	r7, #0
   12f26:	d07b      	beq.n	13020 <log_output_process+0x23c>
		prefix_offset = 0;
   12f28:	2500      	movs	r5, #0
   12f2a:	e00c      	b.n	12f46 <log_output_process+0x162>
	if (package) {
   12f2c:	f1b9 0f00 	cmp.w	r9, #0
   12f30:	d0f8      	beq.n	12f24 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   12f32:	484d      	ldr	r0, [pc, #308]	; (13068 <log_output_process+0x284>)
   12f34:	e05c      	b.n	12ff0 <log_output_process+0x20c>
		cb = out_func;
   12f36:	484d      	ldr	r0, [pc, #308]	; (1306c <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   12f38:	494d      	ldr	r1, [pc, #308]	; (13070 <log_output_process+0x28c>)
   12f3a:	464b      	mov	r3, r9
   12f3c:	4622      	mov	r2, r4
   12f3e:	f010 fbda 	bl	236f6 <cbpprintf_external>
	if (data_len) {
   12f42:	2f00      	cmp	r7, #0
   12f44:	d068      	beq.n	13018 <log_output_process+0x234>
		print_formatted(output, " ");
   12f46:	f8df 912c 	ldr.w	r9, [pc, #300]	; 13074 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
   12f4a:	f8df a12c 	ldr.w	sl, [pc, #300]	; 13078 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   12f4e:	2f10      	cmp	r7, #16
	newline_print(output, flags);
   12f50:	4631      	mov	r1, r6
   12f52:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   12f54:	46b8      	mov	r8, r7
   12f56:	bf28      	it	cs
   12f58:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
   12f5c:	f7ff ff34 	bl	12dc8 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   12f60:	f04f 0b00 	mov.w	fp, #0
   12f64:	455d      	cmp	r5, fp
   12f66:	dc45      	bgt.n	12ff4 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
   12f68:	9b05      	ldr	r3, [sp, #20]
   12f6a:	4651      	mov	r1, sl
   12f6c:	781a      	ldrb	r2, [r3, #0]
   12f6e:	4620      	mov	r0, r4
   12f70:	f7ff ff18 	bl	12da4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12f74:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
   12f78:	f01b 0f07 	tst.w	fp, #7
   12f7c:	d103      	bne.n	12f86 <log_output_process+0x1a2>
			print_formatted(output, " ");
   12f7e:	4649      	mov	r1, r9
   12f80:	4620      	mov	r0, r4
   12f82:	f7ff ff0f 	bl	12da4 <print_formatted>
		if (i < length) {
   12f86:	45d8      	cmp	r8, fp
   12f88:	d93b      	bls.n	13002 <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
   12f8a:	9b05      	ldr	r3, [sp, #20]
   12f8c:	4651      	mov	r1, sl
   12f8e:	f813 200b 	ldrb.w	r2, [r3, fp]
   12f92:	4620      	mov	r0, r4
   12f94:	f7ff ff06 	bl	12da4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12f98:	f10b 0b01 	add.w	fp, fp, #1
   12f9c:	f1bb 0f10 	cmp.w	fp, #16
   12fa0:	d1ea      	bne.n	12f78 <log_output_process+0x194>
	print_formatted(output, "|");
   12fa2:	4936      	ldr	r1, [pc, #216]	; (1307c <log_output_process+0x298>)
   12fa4:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12fa6:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
   12faa:	f7ff fefb 	bl	12da4 <print_formatted>
		if (i < length) {
   12fae:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
   12fb0:	9b05      	ldr	r3, [sp, #20]
   12fb2:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
   12fb4:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
   12fb8:	295f      	cmp	r1, #95	; 0x5f
   12fba:	bf28      	it	cs
   12fbc:	222e      	movcs	r2, #46	; 0x2e
   12fbe:	4930      	ldr	r1, [pc, #192]	; (13080 <log_output_process+0x29c>)
   12fc0:	4620      	mov	r0, r4
   12fc2:	f7ff feef 	bl	12da4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12fc6:	f10b 0b01 	add.w	fp, fp, #1
   12fca:	f1bb 0f10 	cmp.w	fp, #16
   12fce:	d01d      	beq.n	1300c <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
   12fd0:	f01b 0f07 	tst.w	fp, #7
   12fd4:	d103      	bne.n	12fde <log_output_process+0x1fa>
			print_formatted(output, " ");
   12fd6:	4649      	mov	r1, r9
   12fd8:	4620      	mov	r0, r4
   12fda:	f7ff fee3 	bl	12da4 <print_formatted>
		if (i < length) {
   12fde:	45d8      	cmp	r8, fp
   12fe0:	465a      	mov	r2, fp
   12fe2:	d8e5      	bhi.n	12fb0 <log_output_process+0x1cc>
			print_formatted(output, " ");
   12fe4:	4649      	mov	r1, r9
   12fe6:	4620      	mov	r0, r4
   12fe8:	f7ff fedc 	bl	12da4 <print_formatted>
   12fec:	e7eb      	b.n	12fc6 <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   12fee:	481f      	ldr	r0, [pc, #124]	; (1306c <log_output_process+0x288>)
		prefix_offset = 0;
   12ff0:	9d04      	ldr	r5, [sp, #16]
   12ff2:	e7a1      	b.n	12f38 <log_output_process+0x154>
		print_formatted(output, " ");
   12ff4:	4649      	mov	r1, r9
   12ff6:	4620      	mov	r0, r4
   12ff8:	f7ff fed4 	bl	12da4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   12ffc:	f10b 0b01 	add.w	fp, fp, #1
   13000:	e7b0      	b.n	12f64 <log_output_process+0x180>
			print_formatted(output, "   ");
   13002:	4920      	ldr	r1, [pc, #128]	; (13084 <log_output_process+0x2a0>)
   13004:	4620      	mov	r0, r4
   13006:	f7ff fecd 	bl	12da4 <print_formatted>
   1300a:	e7c5      	b.n	12f98 <log_output_process+0x1b4>
		data += length;
   1300c:	9b05      	ldr	r3, [sp, #20]
	} while (len);
   1300e:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
   13012:	4443      	add	r3, r8
   13014:	9305      	str	r3, [sp, #20]
	} while (len);
   13016:	d19a      	bne.n	12f4e <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   13018:	9b04      	ldr	r3, [sp, #16]
   1301a:	2b00      	cmp	r3, #0
   1301c:	f47f af43 	bne.w	12ea6 <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   13020:	4620      	mov	r0, r4
}
   13022:	b009      	add	sp, #36	; 0x24
   13024:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   13028:	f011 b9d9 	b.w	243de <log_output_flush>
		print_formatted(output, "%s", log_color);
   1302c:	4a06      	ldr	r2, [pc, #24]	; (13048 <log_output_process+0x264>)
   1302e:	4905      	ldr	r1, [pc, #20]	; (13044 <log_output_process+0x260>)
   13030:	4620      	mov	r0, r4
   13032:	f7ff feb7 	bl	12da4 <print_formatted>
}
   13036:	e739      	b.n	12eac <log_output_process+0xc8>
   13038:	00029026 	.word	0x00029026
   1303c:	0002902a 	.word	0x0002902a
   13040:	000283dc 	.word	0x000283dc
   13044:	00029b9a 	.word	0x00029b9a
   13048:	00029021 	.word	0x00029021
   1304c:	000283f0 	.word	0x000283f0
   13050:	0002904f 	.word	0x0002904f
   13054:	00029055 	.word	0x00029055
   13058:	00029059 	.word	0x00029059
   1305c:	20002be8 	.word	0x20002be8
   13060:	20002be4 	.word	0x20002be4
   13064:	00029033 	.word	0x00029033
   13068:	0002442f 	.word	0x0002442f
   1306c:	000243f9 	.word	0x000243f9
   13070:	000243d1 	.word	0x000243d1
   13074:	00029066 	.word	0x00029066
   13078:	0002905e 	.word	0x0002905e
   1307c:	00029068 	.word	0x00029068
   13080:	0002906a 	.word	0x0002906a
   13084:	00029064 	.word	0x00029064

00013088 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   13088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
   1308c:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   1308e:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   13090:	688e      	ldr	r6, [r1, #8]
   13092:	b086      	sub	sp, #24
   13094:	4605      	mov	r5, r0
   13096:	460c      	mov	r4, r1
   13098:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
   1309a:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   1309e:	b15b      	cbz	r3, 130b8 <log_output_msg_process+0x30>
   130a0:	4a13      	ldr	r2, [pc, #76]	; (130f0 <log_output_msg_process+0x68>)
   130a2:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   130a4:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   130a8:	2900      	cmp	r1, #0
   130aa:	db1f      	blt.n	130ec <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   130ac:	7820      	ldrb	r0, [r4, #0]
   130ae:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   130b2:	f7ff fd8b 	bl	12bcc <log_source_name_get>
   130b6:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   130b8:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
   130ba:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   130bc:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   130c0:	9700      	str	r7, [sp, #0]
   130c2:	f3c2 224a 	ubfx	r2, r2, #9, #11
   130c6:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   130c8:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
   130cc:	f3c0 100b 	ubfx	r0, r0, #4, #12
   130d0:	bf08      	it	eq
   130d2:	2100      	moveq	r1, #0
   130d4:	e9cd 0803 	strd	r0, r8, [sp, #12]
   130d8:	e9cd 1401 	strd	r1, r4, [sp, #4]
   130dc:	2200      	movs	r2, #0
   130de:	4631      	mov	r1, r6
   130e0:	4628      	mov	r0, r5
   130e2:	f7ff fe7f 	bl	12de4 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   130e6:	b006      	add	sp, #24
   130e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   130ec:	2300      	movs	r3, #0
   130ee:	e7e3      	b.n	130b8 <log_output_msg_process+0x30>
   130f0:	00028124 	.word	0x00028124

000130f4 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   130f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   130f6:	f242 730f 	movw	r3, #9999	; 0x270f
   130fa:	428b      	cmp	r3, r1
   130fc:	bf28      	it	cs
   130fe:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   13100:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13102:	4a0f      	ldr	r2, [pc, #60]	; (13140 <log_output_dropped_process+0x4c>)
{
   13104:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13106:	2105      	movs	r1, #5
   13108:	4668      	mov	r0, sp
   1310a:	f010 fb6e 	bl	237ea <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   1310e:	6863      	ldr	r3, [r4, #4]
   13110:	490c      	ldr	r1, [pc, #48]	; (13144 <log_output_dropped_process+0x50>)
   13112:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13114:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   13116:	220b      	movs	r2, #11
   13118:	4628      	mov	r0, r5
   1311a:	f011 f94c 	bl	243b6 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   1311e:	6863      	ldr	r3, [r4, #4]
   13120:	4632      	mov	r2, r6
   13122:	4669      	mov	r1, sp
   13124:	4628      	mov	r0, r5
   13126:	685b      	ldr	r3, [r3, #4]
   13128:	f011 f945 	bl	243b6 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   1312c:	6863      	ldr	r3, [r4, #4]
   1312e:	4906      	ldr	r1, [pc, #24]	; (13148 <log_output_dropped_process+0x54>)
   13130:	685b      	ldr	r3, [r3, #4]
   13132:	221b      	movs	r2, #27
   13134:	4628      	mov	r0, r5
   13136:	f011 f93e 	bl	243b6 <buffer_write>
		     output->control_block->ctx);
}
   1313a:	b002      	add	sp, #8
   1313c:	bd70      	pop	{r4, r5, r6, pc}
   1313e:	bf00      	nop
   13140:	0002b188 	.word	0x0002b188
   13144:	00029089 	.word	0x00029089
   13148:	0002906d 	.word	0x0002906d

0001314c <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   1314c:	4a07      	ldr	r2, [pc, #28]	; (1316c <log_output_timestamp_freq_set+0x20>)
   1314e:	2100      	movs	r1, #0
   13150:	2301      	movs	r3, #1
   13152:	4290      	cmp	r0, r2
   13154:	d806      	bhi.n	13164 <log_output_timestamp_freq_set+0x18>
   13156:	4a06      	ldr	r2, [pc, #24]	; (13170 <log_output_timestamp_freq_set+0x24>)
   13158:	b901      	cbnz	r1, 1315c <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
   1315a:	2301      	movs	r3, #1
   1315c:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   1315e:	4b05      	ldr	r3, [pc, #20]	; (13174 <log_output_timestamp_freq_set+0x28>)
   13160:	6018      	str	r0, [r3, #0]
}
   13162:	4770      	bx	lr
		frequency /= 2U;
   13164:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   13166:	005b      	lsls	r3, r3, #1
   13168:	2101      	movs	r1, #1
   1316a:	e7f2      	b.n	13152 <log_output_timestamp_freq_set+0x6>
   1316c:	000f4240 	.word	0x000f4240
   13170:	20002be4 	.word	0x20002be4
   13174:	20002be8 	.word	0x20002be8

00013178 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   13178:	4b01      	ldr	r3, [pc, #4]	; (13180 <log_backend_rtt_init+0x8>)
   1317a:	2201      	movs	r2, #1
   1317c:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   1317e:	4770      	bx	lr
   13180:	20004021 	.word	0x20004021

00013184 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   13184:	4b01      	ldr	r3, [pc, #4]	; (1318c <format_set+0x8>)
	return 0;
}
   13186:	2000      	movs	r0, #0
	log_format_current = log_type;
   13188:	6019      	str	r1, [r3, #0]
}
   1318a:	4770      	bx	lr
   1318c:	20002c00 	.word	0x20002c00

00013190 <panic>:
	panic_mode = true;
   13190:	4b02      	ldr	r3, [pc, #8]	; (1319c <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   13192:	4803      	ldr	r0, [pc, #12]	; (131a0 <panic+0x10>)
   13194:	2201      	movs	r2, #1
   13196:	701a      	strb	r2, [r3, #0]
   13198:	f011 b921 	b.w	243de <log_output_flush>
   1319c:	20004022 	.word	0x20004022
   131a0:	00028420 	.word	0x00028420

000131a4 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   131a4:	4801      	ldr	r0, [pc, #4]	; (131ac <dropped+0x8>)
   131a6:	f7ff bfa5 	b.w	130f4 <log_output_dropped_process>
   131aa:	bf00      	nop
   131ac:	00028420 	.word	0x00028420

000131b0 <process>:
{
   131b0:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   131b2:	4b06      	ldr	r3, [pc, #24]	; (131cc <process+0x1c>)
   131b4:	6818      	ldr	r0, [r3, #0]
{
   131b6:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   131b8:	f7ff fb42 	bl	12840 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
   131bc:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   131be:	4603      	mov	r3, r0
}
   131c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
   131c4:	4802      	ldr	r0, [pc, #8]	; (131d0 <process+0x20>)
   131c6:	220f      	movs	r2, #15
   131c8:	4718      	bx	r3
   131ca:	bf00      	nop
   131cc:	20002c00 	.word	0x20002c00
   131d0:	00028420 	.word	0x00028420

000131d4 <on_failed_write>:
	if (retry_cnt == 0) {
   131d4:	b910      	cbnz	r0, 131dc <on_failed_write+0x8>
		host_present = false;
   131d6:	4b07      	ldr	r3, [pc, #28]	; (131f4 <on_failed_write+0x20>)
   131d8:	7018      	strb	r0, [r3, #0]
}
   131da:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   131dc:	4b06      	ldr	r3, [pc, #24]	; (131f8 <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
   131de:	781b      	ldrb	r3, [r3, #0]
   131e0:	b11b      	cbz	r3, 131ea <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
   131e2:	f241 3088 	movw	r0, #5000	; 0x1388
   131e6:	f014 bc48 	b.w	27a7a <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   131ea:	20a4      	movs	r0, #164	; 0xa4
   131ec:	2100      	movs	r1, #0
   131ee:	f00c bf8d 	b.w	2010c <z_impl_k_sleep>
   131f2:	bf00      	nop
   131f4:	20004021 	.word	0x20004021
   131f8:	20004022 	.word	0x20004022

000131fc <data_out_block_mode>:
{
   131fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   13200:	f8df 9074 	ldr.w	r9, [pc, #116]	; 13278 <data_out_block_mode+0x7c>
   13204:	4f1d      	ldr	r7, [pc, #116]	; (1327c <data_out_block_mode+0x80>)
{
   13206:	4680      	mov	r8, r0
   13208:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   1320a:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
   1320c:	f899 5000 	ldrb.w	r5, [r9]
   13210:	b995      	cbnz	r5, 13238 <data_out_block_mode+0x3c>
			RTT_LOCK();
   13212:	f00b ff09 	bl	1f028 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   13216:	4628      	mov	r0, r5
   13218:	4632      	mov	r2, r6
   1321a:	4641      	mov	r1, r8
   1321c:	f00b feb2 	bl	1ef84 <SEGGER_RTT_WriteSkipNoLock>
   13220:	4605      	mov	r5, r0
			RTT_UNLOCK();
   13222:	f00b ff0b 	bl	1f03c <zephyr_rtt_mutex_unlock>
		if (ret) {
   13226:	b1e5      	cbz	r5, 13262 <data_out_block_mode+0x66>
	host_present = true;
   13228:	2301      	movs	r3, #1
   1322a:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
   1322c:	f899 3000 	ldrb.w	r3, [r9]
   13230:	b973      	cbnz	r3, 13250 <data_out_block_mode+0x54>
}
   13232:	4630      	mov	r0, r6
   13234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   13238:	4632      	mov	r2, r6
   1323a:	4641      	mov	r1, r8
   1323c:	2000      	movs	r0, #0
   1323e:	f00b fea1 	bl	1ef84 <SEGGER_RTT_WriteSkipNoLock>
   13242:	4605      	mov	r5, r0
   13244:	e7ef      	b.n	13226 <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
   13246:	4620      	mov	r0, r4
   13248:	f7ff ffc4 	bl	131d4 <on_failed_write>
   1324c:	1e65      	subs	r5, r4, #1
   1324e:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   13250:	2000      	movs	r0, #0
   13252:	f00b fedf 	bl	1f014 <SEGGER_RTT_HasDataUp>
   13256:	2800      	cmp	r0, #0
   13258:	d0eb      	beq.n	13232 <data_out_block_mode+0x36>
   1325a:	783b      	ldrb	r3, [r7, #0]
   1325c:	2b00      	cmp	r3, #0
   1325e:	d1f2      	bne.n	13246 <data_out_block_mode+0x4a>
   13260:	e7e7      	b.n	13232 <data_out_block_mode+0x36>
		} else if (host_present) {
   13262:	783b      	ldrb	r3, [r7, #0]
   13264:	2b00      	cmp	r3, #0
   13266:	d0e4      	beq.n	13232 <data_out_block_mode+0x36>
			retry_cnt--;
   13268:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
   1326a:	4620      	mov	r0, r4
   1326c:	f7ff ffb2 	bl	131d4 <on_failed_write>
	} while ((ret == 0) && host_present);
   13270:	783b      	ldrb	r3, [r7, #0]
   13272:	2b00      	cmp	r3, #0
   13274:	d1ca      	bne.n	1320c <data_out_block_mode+0x10>
   13276:	e7dc      	b.n	13232 <data_out_block_mode+0x36>
   13278:	20004022 	.word	0x20004022
   1327c:	20004021 	.word	0x20004021

00013280 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   13280:	4b01      	ldr	r3, [pc, #4]	; (13288 <format_set+0x8>)
	return 0;
}
   13282:	2000      	movs	r0, #0
	log_format_current = log_type;
   13284:	6019      	str	r1, [r3, #0]
}
   13286:	4770      	bx	lr
   13288:	20002c18 	.word	0x20002c18

0001328c <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
   1328c:	4b02      	ldr	r3, [pc, #8]	; (13298 <panic+0xc>)
	log_output_flush(output);
   1328e:	4803      	ldr	r0, [pc, #12]	; (1329c <panic+0x10>)
   13290:	2201      	movs	r2, #1
   13292:	701a      	strb	r2, [r3, #0]
   13294:	f011 b8a3 	b.w	243de <log_output_flush>
   13298:	20004034 	.word	0x20004034
   1329c:	0002844c 	.word	0x0002844c

000132a0 <dropped>:
	log_output_dropped_process(output, cnt);
   132a0:	4801      	ldr	r0, [pc, #4]	; (132a8 <dropped+0x8>)
   132a2:	f7ff bf27 	b.w	130f4 <log_output_dropped_process>
   132a6:	bf00      	nop
   132a8:	0002844c 	.word	0x0002844c

000132ac <process>:
{
   132ac:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   132ae:	4b06      	ldr	r3, [pc, #24]	; (132c8 <process+0x1c>)
   132b0:	6818      	ldr	r0, [r3, #0]
{
   132b2:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   132b4:	f7ff fac4 	bl	12840 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
   132b8:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   132ba:	4603      	mov	r3, r0
}
   132bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
   132c0:	4802      	ldr	r0, [pc, #8]	; (132cc <process+0x20>)
   132c2:	220f      	movs	r2, #15
   132c4:	4718      	bx	r3
   132c6:	bf00      	nop
   132c8:	20002c18 	.word	0x20002c18
   132cc:	0002844c 	.word	0x0002844c

000132d0 <char_out>:
{
   132d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   132d2:	4f07      	ldr	r7, [pc, #28]	; (132f0 <char_out+0x20>)
   132d4:	460d      	mov	r5, r1
   132d6:	4604      	mov	r4, r0
   132d8:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   132da:	42b4      	cmp	r4, r6
   132dc:	d101      	bne.n	132e2 <char_out+0x12>
}
   132de:	4628      	mov	r0, r5
   132e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   132e2:	f814 1b01 	ldrb.w	r1, [r4], #1
   132e6:	68bb      	ldr	r3, [r7, #8]
   132e8:	4801      	ldr	r0, [pc, #4]	; (132f0 <char_out+0x20>)
   132ea:	685b      	ldr	r3, [r3, #4]
   132ec:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   132ee:	e7f4      	b.n	132da <char_out+0xa>
   132f0:	00027f24 	.word	0x00027f24

000132f4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   132f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   132f8:	4605      	mov	r5, r0
	__asm__ volatile(
   132fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   132fe:	f3ef 8611 	mrs	r6, BASEPRI
   13302:	f383 8812 	msr	BASEPRI_MAX, r3
   13306:	f3bf 8f6f 	isb	sy
	return list->head;
   1330a:	4b0e      	ldr	r3, [pc, #56]	; (13344 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   1330c:	4f0e      	ldr	r7, [pc, #56]	; (13348 <pm_state_notify+0x54>)
   1330e:	681c      	ldr	r4, [r3, #0]
   13310:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1334c <pm_state_notify+0x58>
   13314:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   13318:	b92c      	cbnz	r4, 13326 <pm_state_notify+0x32>
	__asm__ volatile(
   1331a:	f386 8811 	msr	BASEPRI, r6
   1331e:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   13322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   13326:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   1332a:	2d00      	cmp	r5, #0
   1332c:	bf18      	it	ne
   1332e:	4613      	movne	r3, r2
		if (callback) {
   13330:	b12b      	cbz	r3, 1333e <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   13332:	f898 2010 	ldrb.w	r2, [r8, #16]
   13336:	fb09 f202 	mul.w	r2, r9, r2
   1333a:	5cb8      	ldrb	r0, [r7, r2]
   1333c:	4798      	blx	r3
	return node->next;
   1333e:	6824      	ldr	r4, [r4, #0]
   13340:	e7ea      	b.n	13318 <pm_state_notify+0x24>
   13342:	bf00      	nop
   13344:	20002c34 	.word	0x20002c34
   13348:	20002c28 	.word	0x20002c28
   1334c:	200034fc 	.word	0x200034fc

00013350 <pm_system_resume>:

void pm_system_resume(void)
{
   13350:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   13352:	4b19      	ldr	r3, [pc, #100]	; (133b8 <pm_system_resume+0x68>)
   13354:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13356:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1335a:	f004 031f 	and.w	r3, r4, #31
   1335e:	2201      	movs	r2, #1
   13360:	409a      	lsls	r2, r3
   13362:	4b16      	ldr	r3, [pc, #88]	; (133bc <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13364:	0961      	lsrs	r1, r4, #5
   13366:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1336a:	43d0      	mvns	r0, r2
   1336c:	e853 1f00 	ldrex	r1, [r3]
   13370:	ea01 0500 	and.w	r5, r1, r0
   13374:	e843 5600 	strex	r6, r5, [r3]
   13378:	2e00      	cmp	r6, #0
   1337a:	d1f7      	bne.n	1336c <pm_system_resume+0x1c>
   1337c:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   13380:	420a      	tst	r2, r1
   13382:	d013      	beq.n	133ac <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   13384:	4b0e      	ldr	r3, [pc, #56]	; (133c0 <pm_system_resume+0x70>)
   13386:	4d0f      	ldr	r5, [pc, #60]	; (133c4 <pm_system_resume+0x74>)
   13388:	b18b      	cbz	r3, 133ae <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   1338a:	230c      	movs	r3, #12
   1338c:	4363      	muls	r3, r4
   1338e:	18ea      	adds	r2, r5, r3
   13390:	5ce8      	ldrb	r0, [r5, r3]
   13392:	7851      	ldrb	r1, [r2, #1]
   13394:	f011 fafe 	bl	24994 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   13398:	2000      	movs	r0, #0
   1339a:	f7ff ffab 	bl	132f4 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   1339e:	230c      	movs	r3, #12
   133a0:	435c      	muls	r4, r3
   133a2:	192a      	adds	r2, r5, r4
   133a4:	2300      	movs	r3, #0
   133a6:	512b      	str	r3, [r5, r4]
   133a8:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   133ac:	bd70      	pop	{r4, r5, r6, pc}
   133ae:	f383 8811 	msr	BASEPRI, r3
   133b2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   133b6:	e7ef      	b.n	13398 <pm_system_resume+0x48>
   133b8:	200034fc 	.word	0x200034fc
   133bc:	20002c3c 	.word	0x20002c3c
   133c0:	00024995 	.word	0x00024995
   133c4:	20002c28 	.word	0x20002c28

000133c8 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   133c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   133cc:	4b35      	ldr	r3, [pc, #212]	; (134a4 <pm_system_suspend+0xdc>)
{
   133ce:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   133d0:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
   133d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   133d6:	f3ef 8811 	mrs	r8, BASEPRI
   133da:	f383 8812 	msr	BASEPRI_MAX, r3
   133de:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   133e2:	240c      	movs	r4, #12
   133e4:	4b30      	ldr	r3, [pc, #192]	; (134a8 <pm_system_suspend+0xe0>)
   133e6:	4e31      	ldr	r6, [pc, #196]	; (134ac <pm_system_suspend+0xe4>)
   133e8:	436c      	muls	r4, r5
   133ea:	191a      	adds	r2, r3, r4
   133ec:	5d19      	ldrb	r1, [r3, r4]
   133ee:	2900      	cmp	r1, #0
   133f0:	d04c      	beq.n	1348c <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   133f2:	ca07      	ldmia	r2, {r0, r1, r2}
   133f4:	eb06 0c04 	add.w	ip, r6, r4
   133f8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   133fc:	2200      	movs	r2, #0
   133fe:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   13400:	f388 8811 	msr	BASEPRI, r8
   13404:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   13408:	230c      	movs	r3, #12
   1340a:	436b      	muls	r3, r5
   1340c:	18f2      	adds	r2, r6, r3
   1340e:	5cf0      	ldrb	r0, [r6, r3]
   13410:	2800      	cmp	r0, #0
   13412:	d039      	beq.n	13488 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   13414:	1c7b      	adds	r3, r7, #1
   13416:	d010      	beq.n	1343a <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
   13418:	f8d2 c008 	ldr.w	ip, [r2, #8]
   1341c:	4c24      	ldr	r4, [pc, #144]	; (134b0 <pm_system_suspend+0xe8>)
   1341e:	4a25      	ldr	r2, [pc, #148]	; (134b4 <pm_system_suspend+0xec>)
   13420:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   13424:	2100      	movs	r1, #0
   13426:	fbec 4100 	umlal	r4, r1, ip, r0
   1342a:	2300      	movs	r3, #0
   1342c:	4620      	mov	r0, r4
   1342e:	f7ec fe67 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
   13432:	2101      	movs	r1, #1
   13434:	1a38      	subs	r0, r7, r0
   13436:	f009 fd5d 	bl	1cef4 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   1343a:	f00c fdad 	bl	1ff98 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   1343e:	2001      	movs	r0, #1
   13440:	f7ff ff58 	bl	132f4 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13444:	f3bf 8f5b 	dmb	ish
   13448:	4b1b      	ldr	r3, [pc, #108]	; (134b8 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1344a:	096a      	lsrs	r2, r5, #5
   1344c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   13450:	f005 011f 	and.w	r1, r5, #31
   13454:	2201      	movs	r2, #1
   13456:	408a      	lsls	r2, r1
   13458:	e853 0f00 	ldrex	r0, [r3]
   1345c:	4310      	orrs	r0, r2
   1345e:	e843 0100 	strex	r1, r0, [r3]
   13462:	2900      	cmp	r1, #0
   13464:	d1f8      	bne.n	13458 <pm_system_suspend+0x90>
   13466:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   1346a:	4b14      	ldr	r3, [pc, #80]	; (134bc <pm_system_suspend+0xf4>)
   1346c:	b13b      	cbz	r3, 1347e <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
   1346e:	230c      	movs	r3, #12
   13470:	fb03 f005 	mul.w	r0, r3, r5
   13474:	1833      	adds	r3, r6, r0
   13476:	5c30      	ldrb	r0, [r6, r0]
   13478:	7859      	ldrb	r1, [r3, #1]
   1347a:	f011 fa7f 	bl	2497c <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   1347e:	f7ff ff67 	bl	13350 <pm_system_resume>
	k_sched_unlock();
   13482:	f00c fd9d 	bl	1ffc0 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   13486:	2001      	movs	r0, #1
}
   13488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   1348c:	4601      	mov	r1, r0
   1348e:	4628      	mov	r0, r5
   13490:	f000 f816 	bl	134c0 <pm_policy_next_state>
		if (info != NULL) {
   13494:	2800      	cmp	r0, #0
   13496:	d0b3      	beq.n	13400 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   13498:	c807      	ldmia	r0, {r0, r1, r2}
   1349a:	4434      	add	r4, r6
   1349c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   134a0:	e7ae      	b.n	13400 <pm_system_suspend+0x38>
   134a2:	bf00      	nop
   134a4:	200034fc 	.word	0x200034fc
   134a8:	20002c1c 	.word	0x20002c1c
   134ac:	20002c28 	.word	0x20002c28
   134b0:	000f423f 	.word	0x000f423f
   134b4:	000f4240 	.word	0x000f4240
   134b8:	20002c3c 	.word	0x20002c3c
   134bc:	0002497d 	.word	0x0002497d

000134c0 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   134c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134c4:	b085      	sub	sp, #20
   134c6:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   134c8:	a903      	add	r1, sp, #12
   134ca:	f000 f843 	bl	13554 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   134ce:	4b1e      	ldr	r3, [pc, #120]	; (13548 <pm_policy_next_state+0x88>)
   134d0:	9d03      	ldr	r5, [sp, #12]
   134d2:	f8d3 a000 	ldr.w	sl, [r3]
   134d6:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1354c <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   134da:	1e43      	subs	r3, r0, #1
   134dc:	b21b      	sxth	r3, r3
   134de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   134e2:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   134e4:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   134e8:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   134ec:	f04f 0b00 	mov.w	fp, #0
   134f0:	b924      	cbnz	r4, 134fc <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   134f2:	46a1      	mov	r9, r4
}
   134f4:	4648      	mov	r0, r9
   134f6:	b005      	add	sp, #20
   134f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134fc:	6868      	ldr	r0, [r5, #4]
   134fe:	4a14      	ldr	r2, [pc, #80]	; (13550 <pm_policy_next_state+0x90>)
   13500:	46c4      	mov	ip, r8
   13502:	4659      	mov	r1, fp
   13504:	fbe0 c107 	umlal	ip, r1, r0, r7
   13508:	2300      	movs	r3, #0
   1350a:	4660      	mov	r0, ip
   1350c:	f7ec fdf8 	bl	100 <__aeabi_uldivmod>
   13510:	9001      	str	r0, [sp, #4]
   13512:	68a8      	ldr	r0, [r5, #8]
   13514:	4a0e      	ldr	r2, [pc, #56]	; (13550 <pm_policy_next_state+0x90>)
   13516:	46c4      	mov	ip, r8
   13518:	4659      	mov	r1, fp
   1351a:	fbe0 c107 	umlal	ip, r1, r0, r7
   1351e:	2300      	movs	r3, #0
   13520:	4660      	mov	r0, ip
   13522:	f7ec fded 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   13526:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
   1352a:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1352c:	d001      	beq.n	13532 <pm_policy_next_state+0x72>
   1352e:	4582      	cmp	sl, r0
   13530:	d905      	bls.n	1353e <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   13532:	1c73      	adds	r3, r6, #1
   13534:	d0de      	beq.n	134f4 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   13536:	9b01      	ldr	r3, [sp, #4]
   13538:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   1353a:	42b0      	cmp	r0, r6
   1353c:	d9da      	bls.n	134f4 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1353e:	3c01      	subs	r4, #1
   13540:	b2a4      	uxth	r4, r4
   13542:	3d0c      	subs	r5, #12
   13544:	e7d4      	b.n	134f0 <pm_policy_next_state+0x30>
   13546:	bf00      	nop
   13548:	20000568 	.word	0x20000568
   1354c:	000f423f 	.word	0x000f423f
   13550:	000f4240 	.word	0x000f4240

00013554 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   13554:	b908      	cbnz	r0, 1355a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   13556:	4b02      	ldr	r3, [pc, #8]	; (13560 <pm_state_cpu_get_all+0xc>)
   13558:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   1355a:	2000      	movs	r0, #0
   1355c:	4770      	bx	lr
   1355e:	bf00      	nop
   13560:	0002845c 	.word	0x0002845c

00013564 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   13564:	4904      	ldr	r1, [pc, #16]	; (13578 <sub_bytes+0x14>)
   13566:	1e43      	subs	r3, r0, #1
   13568:	300f      	adds	r0, #15
   1356a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1356e:	5c8a      	ldrb	r2, [r1, r2]
   13570:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   13572:	4283      	cmp	r3, r0
   13574:	d1f9      	bne.n	1356a <sub_bytes+0x6>
	}
}
   13576:	4770      	bx	lr
   13578:	000290e2 	.word	0x000290e2

0001357c <tc_aes128_set_encrypt_key>:
{
   1357c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   1357e:	4e26      	ldr	r6, [pc, #152]	; (13618 <tc_aes128_set_encrypt_key+0x9c>)
{
   13580:	4607      	mov	r7, r0
   13582:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   13584:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   13586:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   13588:	ad01      	add	r5, sp, #4
   1358a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1358c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1358e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13590:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   13594:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   13598:	4638      	mov	r0, r7
   1359a:	2f00      	cmp	r7, #0
   1359c:	d038      	beq.n	13610 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   1359e:	2c00      	cmp	r4, #0
   135a0:	d038      	beq.n	13614 <tc_aes128_set_encrypt_key+0x98>
   135a2:	1f38      	subs	r0, r7, #4
   135a4:	4621      	mov	r1, r4
   135a6:	4602      	mov	r2, r0
   135a8:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   135aa:	784b      	ldrb	r3, [r1, #1]
   135ac:	780d      	ldrb	r5, [r1, #0]
   135ae:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   135b0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   135b4:	78cd      	ldrb	r5, [r1, #3]
   135b6:	432b      	orrs	r3, r5
   135b8:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   135ba:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   135bc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   135c0:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   135c2:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   135c6:	d1f0      	bne.n	135aa <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   135c8:	4c14      	ldr	r4, [pc, #80]	; (1361c <tc_aes128_set_encrypt_key+0xa0>)
   135ca:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   135cc:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   135ce:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   135d0:	d116      	bne.n	13600 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   135d2:	f3c3 4207 	ubfx	r2, r3, #16, #8
   135d6:	5ca5      	ldrb	r5, [r4, r2]
   135d8:	0e1a      	lsrs	r2, r3, #24
   135da:	5ca2      	ldrb	r2, [r4, r2]
   135dc:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   135e0:	f3c3 2507 	ubfx	r5, r3, #8, #8
   135e4:	b2db      	uxtb	r3, r3
   135e6:	5d65      	ldrb	r5, [r4, r5]
   135e8:	5ce3      	ldrb	r3, [r4, r3]
   135ea:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   135ee:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   135f2:	f021 0303 	bic.w	r3, r1, #3
   135f6:	3330      	adds	r3, #48	; 0x30
   135f8:	446b      	add	r3, sp
   135fa:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   135fe:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   13600:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   13604:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   13606:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   13608:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   1360a:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   1360c:	d1de      	bne.n	135cc <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   1360e:	2001      	movs	r0, #1
}
   13610:	b00d      	add	sp, #52	; 0x34
   13612:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   13614:	4620      	mov	r0, r4
   13616:	e7fb      	b.n	13610 <tc_aes128_set_encrypt_key+0x94>
   13618:	00028274 	.word	0x00028274
   1361c:	000290e2 	.word	0x000290e2

00013620 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   13620:	4801      	ldr	r0, [pc, #4]	; (13628 <nrf_cc3xx_platform_abort_init+0x8>)
   13622:	f00d bc5f 	b.w	20ee4 <nrf_cc3xx_platform_set_abort>
   13626:	bf00      	nop
   13628:	0002845c 	.word	0x0002845c

0001362c <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   1362c:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
   1362e:	4604      	mov	r4, r0
   13630:	b918      	cbnz	r0, 1363a <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   13632:	4b0f      	ldr	r3, [pc, #60]	; (13670 <mutex_free_platform+0x44>)
   13634:	480f      	ldr	r0, [pc, #60]	; (13674 <mutex_free_platform+0x48>)
   13636:	685b      	ldr	r3, [r3, #4]
   13638:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   1363a:	6861      	ldr	r1, [r4, #4]
   1363c:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
   13640:	d00f      	beq.n	13662 <mutex_free_platform+0x36>
   13642:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
   13646:	d00c      	beq.n	13662 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   13648:	4d0b      	ldr	r5, [pc, #44]	; (13678 <mutex_free_platform+0x4c>)
   1364a:	42a9      	cmp	r1, r5
   1364c:	d009      	beq.n	13662 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   1364e:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
   13652:	d007      	beq.n	13664 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   13654:	4809      	ldr	r0, [pc, #36]	; (1367c <mutex_free_platform+0x50>)
   13656:	4621      	mov	r1, r4
   13658:	f013 fec7 	bl	273ea <k_mem_slab_free>
        mutex->mutex = NULL;
   1365c:	2300      	movs	r3, #0
   1365e:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   13660:	6065      	str	r5, [r4, #4]
}
   13662:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   13664:	6820      	ldr	r0, [r4, #0]
   13666:	2214      	movs	r2, #20
   13668:	f011 f97c 	bl	24964 <memset>
   1366c:	e7f8      	b.n	13660 <mutex_free_platform+0x34>
   1366e:	bf00      	nop
   13670:	2000071c 	.word	0x2000071c
   13674:	000291e2 	.word	0x000291e2
   13678:	a95c5f2c 	.word	0xa95c5f2c
   1367c:	20003140 	.word	0x20003140

00013680 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13680:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   13682:	b320      	cbz	r0, 136ce <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
   13684:	6843      	ldr	r3, [r0, #4]
   13686:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   1368a:	d110      	bne.n	136ae <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1368c:	2201      	movs	r2, #1
   1368e:	6803      	ldr	r3, [r0, #0]
   13690:	f3bf 8f5b 	dmb	ish
   13694:	e853 1f00 	ldrex	r1, [r3]
   13698:	2900      	cmp	r1, #0
   1369a:	d103      	bne.n	136a4 <mutex_lock_platform+0x24>
   1369c:	e843 2000 	strex	r0, r2, [r3]
   136a0:	2800      	cmp	r0, #0
   136a2:	d1f7      	bne.n	13694 <mutex_lock_platform+0x14>
   136a4:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   136a8:	d10d      	bne.n	136c6 <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
   136aa:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
   136ac:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   136ae:	4a09      	ldr	r2, [pc, #36]	; (136d4 <mutex_lock_platform+0x54>)
   136b0:	4293      	cmp	r3, r2
   136b2:	d00a      	beq.n	136ca <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
   136b4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   136b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   136ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   136be:	f00b ff5b 	bl	1f578 <z_impl_k_mutex_lock>
        if (ret == 0) {
   136c2:	2800      	cmp	r0, #0
   136c4:	d0f1      	beq.n	136aa <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   136c6:	4804      	ldr	r0, [pc, #16]	; (136d8 <mutex_lock_platform+0x58>)
   136c8:	e7f0      	b.n	136ac <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   136ca:	4804      	ldr	r0, [pc, #16]	; (136dc <mutex_lock_platform+0x5c>)
   136cc:	e7ee      	b.n	136ac <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   136ce:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   136d2:	e7eb      	b.n	136ac <mutex_lock_platform+0x2c>
   136d4:	a95c5f2c 	.word	0xa95c5f2c
   136d8:	ffff8fe9 	.word	0xffff8fe9
   136dc:	ffff8fea 	.word	0xffff8fea

000136e0 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   136e0:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   136e2:	b1d8      	cbz	r0, 1371c <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   136e4:	6843      	ldr	r3, [r0, #4]
   136e6:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   136ea:	d110      	bne.n	1370e <mutex_unlock_platform+0x2e>
   136ec:	2200      	movs	r2, #0
   136ee:	6803      	ldr	r3, [r0, #0]
   136f0:	f3bf 8f5b 	dmb	ish
   136f4:	e853 1f00 	ldrex	r1, [r3]
   136f8:	2901      	cmp	r1, #1
   136fa:	d103      	bne.n	13704 <mutex_unlock_platform+0x24>
   136fc:	e843 2000 	strex	r0, r2, [r3]
   13700:	2800      	cmp	r0, #0
   13702:	d1f7      	bne.n	136f4 <mutex_unlock_platform+0x14>
   13704:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13708:	d10b      	bne.n	13722 <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   1370a:	2000      	movs	r0, #0
    }
}
   1370c:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   1370e:	4a07      	ldr	r2, [pc, #28]	; (1372c <mutex_unlock_platform+0x4c>)
   13710:	4293      	cmp	r3, r2
   13712:	d008      	beq.n	13726 <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
   13714:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   13716:	f00b ffa9 	bl	1f66c <z_impl_k_mutex_unlock>
   1371a:	e7f6      	b.n	1370a <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   1371c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   13720:	e7f4      	b.n	1370c <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13722:	4803      	ldr	r0, [pc, #12]	; (13730 <mutex_unlock_platform+0x50>)
   13724:	e7f2      	b.n	1370c <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   13726:	4803      	ldr	r0, [pc, #12]	; (13734 <mutex_unlock_platform+0x54>)
   13728:	e7f0      	b.n	1370c <mutex_unlock_platform+0x2c>
   1372a:	bf00      	nop
   1372c:	a95c5f2c 	.word	0xa95c5f2c
   13730:	ffff8fe9 	.word	0xffff8fe9
   13734:	ffff8fea 	.word	0xffff8fea

00013738 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13738:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   1373a:	4604      	mov	r4, r0
   1373c:	b918      	cbnz	r0, 13746 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   1373e:	4b1d      	ldr	r3, [pc, #116]	; (137b4 <mutex_init_platform+0x7c>)
   13740:	481d      	ldr	r0, [pc, #116]	; (137b8 <mutex_init_platform+0x80>)
   13742:	685b      	ldr	r3, [r3, #4]
   13744:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   13746:	6863      	ldr	r3, [r4, #4]
   13748:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   1374c:	d02f      	beq.n	137ae <mutex_init_platform+0x76>
   1374e:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
   13752:	d02c      	beq.n	137ae <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
   13754:	4a19      	ldr	r2, [pc, #100]	; (137bc <mutex_init_platform+0x84>)
   13756:	4293      	cmp	r3, r2
   13758:	d119      	bne.n	1378e <mutex_init_platform+0x56>
   1375a:	6823      	ldr	r3, [r4, #0]
   1375c:	bb03      	cbnz	r3, 137a0 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   1375e:	4818      	ldr	r0, [pc, #96]	; (137c0 <mutex_init_platform+0x88>)
   13760:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13764:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13768:	4621      	mov	r1, r4
   1376a:	f00b fe01 	bl	1f370 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   1376e:	b908      	cbnz	r0, 13774 <mutex_init_platform+0x3c>
   13770:	6823      	ldr	r3, [r4, #0]
   13772:	b91b      	cbnz	r3, 1377c <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
   13774:	4b0f      	ldr	r3, [pc, #60]	; (137b4 <mutex_init_platform+0x7c>)
   13776:	4813      	ldr	r0, [pc, #76]	; (137c4 <mutex_init_platform+0x8c>)
   13778:	685b      	ldr	r3, [r3, #4]
   1377a:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   1377c:	6820      	ldr	r0, [r4, #0]
   1377e:	2214      	movs	r2, #20
   13780:	2100      	movs	r1, #0
   13782:	f011 f8ef 	bl	24964 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   13786:	f44f 6368 	mov.w	r3, #3712	; 0xe80
   1378a:	6063      	str	r3, [r4, #4]
   1378c:	e008      	b.n	137a0 <mutex_init_platform+0x68>
    switch(flags){
   1378e:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   13792:	d80d      	bhi.n	137b0 <mutex_init_platform+0x78>
   13794:	2b3a      	cmp	r3, #58	; 0x3a
   13796:	d003      	beq.n	137a0 <mutex_init_platform+0x68>
   13798:	f640 62ba 	movw	r2, #3770	; 0xeba
   1379c:	4293      	cmp	r3, r2
   1379e:	d1de      	bne.n	1375e <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
   137a0:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   137a2:	f013 fe67 	bl	27474 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   137a6:	6863      	ldr	r3, [r4, #4]
   137a8:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
   137ac:	6063      	str	r3, [r4, #4]
}
   137ae:	bd10      	pop	{r4, pc}
    switch(flags){
   137b0:	4a05      	ldr	r2, [pc, #20]	; (137c8 <mutex_init_platform+0x90>)
   137b2:	e7f3      	b.n	1379c <mutex_init_platform+0x64>
   137b4:	2000071c 	.word	0x2000071c
   137b8:	000291e2 	.word	0x000291e2
   137bc:	a95c5f2c 	.word	0xa95c5f2c
   137c0:	20003140 	.word	0x20003140
   137c4:	00029208 	.word	0x00029208
   137c8:	3a00003a 	.word	0x3a00003a

000137cc <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   137cc:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   137ce:	4906      	ldr	r1, [pc, #24]	; (137e8 <nrf_cc3xx_platform_mutex_init+0x1c>)
   137d0:	4806      	ldr	r0, [pc, #24]	; (137ec <nrf_cc3xx_platform_mutex_init+0x20>)
   137d2:	2340      	movs	r3, #64	; 0x40
   137d4:	2214      	movs	r2, #20
   137d6:	f013 fdfa 	bl	273ce <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   137da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   137de:	4904      	ldr	r1, [pc, #16]	; (137f0 <nrf_cc3xx_platform_mutex_init+0x24>)
   137e0:	4804      	ldr	r0, [pc, #16]	; (137f4 <nrf_cc3xx_platform_mutex_init+0x28>)
   137e2:	f00d bc43 	b.w	2106c <nrf_cc3xx_platform_set_mutexes>
   137e6:	bf00      	nop
   137e8:	20002c40 	.word	0x20002c40
   137ec:	20003140 	.word	0x20003140
   137f0:	00028464 	.word	0x00028464
   137f4:	00028478 	.word	0x00028478

000137f8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   137f8:	4901      	ldr	r1, [pc, #4]	; (13800 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   137fa:	2210      	movs	r2, #16
	str	r2, [r1]
   137fc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   137fe:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   13800:	e000ed10 	.word	0xe000ed10

00013804 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   13804:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   13806:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   13808:	f380 8811 	msr	BASEPRI, r0
	isb
   1380c:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   13810:	f3bf 8f4f 	dsb	sy
   13814:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   13816:	b662      	cpsie	i
	isb
   13818:	f3bf 8f6f 	isb	sy

	bx	lr
   1381c:	4770      	bx	lr
   1381e:	bf00      	nop

00013820 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   13820:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   13822:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   13824:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   13828:	f3bf 8f4f 	dsb	sy
   1382c:	bf20      	wfe

	msr	BASEPRI, r0
   1382e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   13832:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   13834:	4770      	bx	lr
   13836:	bf00      	nop

00013838 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   13838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1383c:	4681      	mov	r9, r0
   1383e:	af00      	add	r7, sp, #0

	if (esf != NULL) {
   13840:	460c      	mov	r4, r1
   13842:	2900      	cmp	r1, #0
   13844:	d04c      	beq.n	138e0 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   13846:	466e      	mov	r6, sp
   13848:	b08a      	sub	sp, #40	; 0x28
   1384a:	e9d1 1200 	ldrd	r1, r2, [r1]
   1384e:	68a3      	ldr	r3, [r4, #8]
   13850:	466d      	mov	r5, sp
   13852:	4827      	ldr	r0, [pc, #156]	; (138f0 <z_arm_fatal_error+0xb8>)
   13854:	46a8      	mov	r8, r5
   13856:	f04f 0a05 	mov.w	sl, #5
   1385a:	e9c5 0105 	strd	r0, r1, [r5, #20]
   1385e:	e9c5 2307 	strd	r2, r3, [r5, #28]
   13862:	f848 af10 	str.w	sl, [r8, #16]!
   13866:	4823      	ldr	r0, [pc, #140]	; (138f4 <z_arm_fatal_error+0xbc>)
   13868:	4642      	mov	r2, r8
   1386a:	2300      	movs	r3, #0
   1386c:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   13870:	f7ff f9ce 	bl	12c10 <z_impl_z_log_msg_static_create>
   13874:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   13876:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   1387a:	6963      	ldr	r3, [r4, #20]
   1387c:	46ad      	mov	sp, r5
   1387e:	481e      	ldr	r0, [pc, #120]	; (138f8 <z_arm_fatal_error+0xc0>)
   13880:	f8c5 a010 	str.w	sl, [r5, #16]
   13884:	e9c5 0105 	strd	r0, r1, [r5, #20]
   13888:	e9c5 2307 	strd	r2, r3, [r5, #28]
   1388c:	4819      	ldr	r0, [pc, #100]	; (138f4 <z_arm_fatal_error+0xbc>)
   1388e:	2300      	movs	r3, #0
   13890:	4642      	mov	r2, r8
   13892:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   13896:	f7ff f9bb 	bl	12c10 <z_impl_z_log_msg_static_create>
   1389a:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1389c:	b088      	sub	sp, #32
   1389e:	69e3      	ldr	r3, [r4, #28]
   138a0:	466d      	mov	r5, sp
   138a2:	4a16      	ldr	r2, [pc, #88]	; (138fc <z_arm_fatal_error+0xc4>)
   138a4:	46a8      	mov	r8, r5
   138a6:	f04f 0a03 	mov.w	sl, #3
   138aa:	e9c5 2305 	strd	r2, r3, [r5, #20]
   138ae:	f848 af10 	str.w	sl, [r8, #16]!
   138b2:	4810      	ldr	r0, [pc, #64]	; (138f4 <z_arm_fatal_error+0xbc>)
   138b4:	2300      	movs	r3, #0
   138b6:	4642      	mov	r2, r8
   138b8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   138bc:	f7ff f9a8 	bl	12c10 <z_impl_z_log_msg_static_create>
   138c0:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   138c2:	69a3      	ldr	r3, [r4, #24]
   138c4:	46ad      	mov	sp, r5
   138c6:	4a0e      	ldr	r2, [pc, #56]	; (13900 <z_arm_fatal_error+0xc8>)
   138c8:	f8c5 a010 	str.w	sl, [r5, #16]
   138cc:	e9c5 2305 	strd	r2, r3, [r5, #20]
   138d0:	4808      	ldr	r0, [pc, #32]	; (138f4 <z_arm_fatal_error+0xbc>)
   138d2:	2300      	movs	r3, #0
   138d4:	4642      	mov	r2, r8
   138d6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   138da:	f7ff f999 	bl	12c10 <z_impl_z_log_msg_static_create>
   138de:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   138e0:	4621      	mov	r1, r4
   138e2:	4648      	mov	r0, r9
   138e4:	f00b fbb0 	bl	1f048 <z_fatal_error>
}
   138e8:	46bd      	mov	sp, r7
   138ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   138ee:	bf00      	nop
   138f0:	00029235 	.word	0x00029235
   138f4:	0002821c 	.word	0x0002821c
   138f8:	00029264 	.word	0x00029264
   138fc:	00029293 	.word	0x00029293
   13900:	000292a2 	.word	0x000292a2

00013904 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   13904:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   13906:	2800      	cmp	r0, #0
   13908:	db07      	blt.n	1391a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1390a:	4a04      	ldr	r2, [pc, #16]	; (1391c <arch_irq_enable+0x18>)
   1390c:	0941      	lsrs	r1, r0, #5
   1390e:	2301      	movs	r3, #1
   13910:	f000 001f 	and.w	r0, r0, #31
   13914:	4083      	lsls	r3, r0
   13916:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   1391a:	4770      	bx	lr
   1391c:	e000e100 	.word	0xe000e100

00013920 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   13920:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   13922:	2800      	cmp	r0, #0
   13924:	db0c      	blt.n	13940 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13926:	0943      	lsrs	r3, r0, #5
   13928:	4906      	ldr	r1, [pc, #24]	; (13944 <arch_irq_disable+0x24>)
   1392a:	f000 001f 	and.w	r0, r0, #31
   1392e:	3320      	adds	r3, #32
   13930:	2201      	movs	r2, #1
   13932:	4082      	lsls	r2, r0
   13934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   13938:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1393c:	f3bf 8f6f 	isb	sy
}
   13940:	4770      	bx	lr
   13942:	bf00      	nop
   13944:	e000e100 	.word	0xe000e100

00013948 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   13948:	4b05      	ldr	r3, [pc, #20]	; (13960 <arch_irq_is_enabled+0x18>)
   1394a:	0942      	lsrs	r2, r0, #5
   1394c:	f000 001f 	and.w	r0, r0, #31
   13950:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13954:	2301      	movs	r3, #1
   13956:	fa03 f000 	lsl.w	r0, r3, r0
}
   1395a:	4010      	ands	r0, r2
   1395c:	4770      	bx	lr
   1395e:	bf00      	nop
   13960:	e000e100 	.word	0xe000e100

00013964 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   13964:	b240      	sxtb	r0, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   13966:	07d3      	lsls	r3, r2, #31
		prio += _IRQ_PRIO_OFFSET;
   13968:	bf54      	ite	pl
   1396a:	3102      	addpl	r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   1396c:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1396e:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13970:	bfac      	ite	ge
   13972:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13976:	4a07      	ldrlt	r2, [pc, #28]	; (13994 <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13978:	ea4f 1341 	mov.w	r3, r1, lsl #5
   1397c:	bfac      	ite	ge
   1397e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13982:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13986:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13988:	bfb4      	ite	lt
   1398a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1398c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
   13990:	4770      	bx	lr
   13992:	bf00      	nop
   13994:	e000ed14 	.word	0xe000ed14

00013998 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   13998:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   1399a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   1399c:	4b04      	ldr	r3, [pc, #16]	; (139b0 <_arch_isr_direct_pm+0x18>)
   1399e:	695a      	ldr	r2, [r3, #20]
   139a0:	b11a      	cbz	r2, 139aa <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   139a2:	2200      	movs	r2, #0
   139a4:	615a      	str	r2, [r3, #20]
		z_pm_save_idle_exit();
   139a6:	f013 fd56 	bl	27456 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   139aa:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   139ac:	bd08      	pop	{r3, pc}
   139ae:	bf00      	nop
   139b0:	200034fc 	.word	0x200034fc

000139b4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   139b4:	bf30      	wfi
    b z_SysNmiOnReset
   139b6:	f7ff bffd 	b.w	139b4 <z_SysNmiOnReset>
   139ba:	bf00      	nop

000139bc <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   139bc:	4a0b      	ldr	r2, [pc, #44]	; (139ec <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   139be:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   139c0:	4b0b      	ldr	r3, [pc, #44]	; (139f0 <z_arm_prep_c+0x34>)
   139c2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   139c6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   139c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   139cc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   139d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   139d4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   139d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   139dc:	f00b fbf0 	bl	1f1c0 <z_bss_zero>
	z_data_copy();
   139e0:	f00c fc26 	bl	20230 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   139e4:	f000 fbd6 	bl	14194 <z_arm_interrupt_init>
	z_cstart();
   139e8:	f00b fc2e 	bl	1f248 <z_cstart>
   139ec:	00000000 	.word	0x00000000
   139f0:	e000ed00 	.word	0xe000ed00

000139f4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   139f4:	4a09      	ldr	r2, [pc, #36]	; (13a1c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   139f6:	490a      	ldr	r1, [pc, #40]	; (13a20 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   139f8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   139fa:	6809      	ldr	r1, [r1, #0]
   139fc:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   139fe:	4909      	ldr	r1, [pc, #36]	; (13a24 <arch_swap+0x30>)
	_current->arch.basepri = key;
   13a00:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13a02:	684b      	ldr	r3, [r1, #4]
   13a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13a08:	604b      	str	r3, [r1, #4]
   13a0a:	2300      	movs	r3, #0
   13a0c:	f383 8811 	msr	BASEPRI, r3
   13a10:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   13a14:	6893      	ldr	r3, [r2, #8]
}
   13a16:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   13a18:	4770      	bx	lr
   13a1a:	bf00      	nop
   13a1c:	200034fc 	.word	0x200034fc
   13a20:	000289d4 	.word	0x000289d4
   13a24:	e000ed00 	.word	0xe000ed00

00013a28 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   13a28:	4912      	ldr	r1, [pc, #72]	; (13a74 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   13a2a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   13a2c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   13a30:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   13a32:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   13a36:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13a3a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   13a3c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   13a40:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   13a44:	4f0c      	ldr	r7, [pc, #48]	; (13a78 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   13a46:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   13a4a:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   13a4c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   13a4e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   13a50:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   13a52:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   13a54:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   13a56:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   13a5a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   13a5c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   13a5e:	f000 fc35 	bl	142cc <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   13a62:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   13a66:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   13a6a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   13a6e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   13a72:	4770      	bx	lr
    ldr r1, =_kernel
   13a74:	200034fc 	.word	0x200034fc
    ldr v4, =_SCS_ICSR
   13a78:	e000ed04 	.word	0xe000ed04

00013a7c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   13a7c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   13a80:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   13a82:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   13a86:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   13a8a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   13a8c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   13a90:	2902      	cmp	r1, #2
    beq _oops
   13a92:	d0ff      	beq.n	13a94 <_oops>

00013a94 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   13a94:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   13a96:	f010 ff07 	bl	248a8 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   13a9a:	bd01      	pop	{r0, pc}

00013a9c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   13a9c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   13aa0:	9b00      	ldr	r3, [sp, #0]
   13aa2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   13aa6:	490a      	ldr	r1, [pc, #40]	; (13ad0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   13aa8:	9b01      	ldr	r3, [sp, #4]
   13aaa:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   13aae:	9b02      	ldr	r3, [sp, #8]
   13ab0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   13ab4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   13ab8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   13abc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   13ac0:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   13ac4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   13ac6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   13ac8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   13aca:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   13acc:	4770      	bx	lr
   13ace:	bf00      	nop
   13ad0:	00023805 	.word	0x00023805

00013ad4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   13ad4:	4a09      	ldr	r2, [pc, #36]	; (13afc <z_check_thread_stack_fail+0x28>)
{
   13ad6:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   13ad8:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   13ada:	b170      	cbz	r0, 13afa <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   13adc:	f113 0f16 	cmn.w	r3, #22
   13ae0:	6e80      	ldr	r0, [r0, #104]	; 0x68
   13ae2:	d005      	beq.n	13af0 <z_check_thread_stack_fail+0x1c>
   13ae4:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
   13ae8:	429a      	cmp	r2, r3
   13aea:	d805      	bhi.n	13af8 <z_check_thread_stack_fail+0x24>
   13aec:	4283      	cmp	r3, r0
   13aee:	d203      	bcs.n	13af8 <z_check_thread_stack_fail+0x24>
		return 0;
   13af0:	4281      	cmp	r1, r0
   13af2:	bf28      	it	cs
   13af4:	2000      	movcs	r0, #0
   13af6:	4770      	bx	lr
   13af8:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
   13afa:	4770      	bx	lr
   13afc:	200034fc 	.word	0x200034fc

00013b00 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   13b00:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   13b02:	4b09      	ldr	r3, [pc, #36]	; (13b28 <arch_switch_to_main_thread+0x28>)
{
   13b04:	460d      	mov	r5, r1
   13b06:	4614      	mov	r4, r2
	_current = main_thread;
   13b08:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   13b0a:	f000 fbdf 	bl	142cc <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   13b0e:	4620      	mov	r0, r4
   13b10:	f385 8809 	msr	PSP, r5
   13b14:	2100      	movs	r1, #0
   13b16:	b663      	cpsie	if
   13b18:	f381 8811 	msr	BASEPRI, r1
   13b1c:	f3bf 8f6f 	isb	sy
   13b20:	2200      	movs	r2, #0
   13b22:	2300      	movs	r3, #0
   13b24:	f00f fe6e 	bl	23804 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   13b28:	200034fc 	.word	0x200034fc

00013b2c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   13b2c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   13b2e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   13b30:	4a0b      	ldr	r2, [pc, #44]	; (13b60 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   13b32:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   13b34:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   13b36:	bf1e      	ittt	ne
	movne	r1, #0
   13b38:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   13b3a:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
   13b3c:	f013 fc8b 	blne	27456 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   13b40:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   13b42:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   13b46:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   13b4a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   13b4e:	4905      	ldr	r1, [pc, #20]	; (13b64 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   13b50:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   13b52:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   13b54:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   13b56:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   13b5a:	4903      	ldr	r1, [pc, #12]	; (13b68 <_isr_wrapper+0x3c>)
	bx r1
   13b5c:	4708      	bx	r1
   13b5e:	0000      	.short	0x0000
	ldr r2, =_kernel
   13b60:	200034fc 	.word	0x200034fc
	ldr r1, =_sw_isr_table
   13b64:	00027f3c 	.word	0x00027f3c
	ldr r1, =z_arm_int_exit
   13b68:	00013b6d 	.word	0x00013b6d

00013b6c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   13b6c:	4b04      	ldr	r3, [pc, #16]	; (13b80 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   13b6e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   13b70:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
   13b72:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   13b74:	d003      	beq.n	13b7e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   13b76:	4903      	ldr	r1, [pc, #12]	; (13b84 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   13b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   13b7c:	600a      	str	r2, [r1, #0]

00013b7e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   13b7e:	4770      	bx	lr
	ldr r3, =_kernel
   13b80:	200034fc 	.word	0x200034fc
	ldr r1, =_SCS_ICSR
   13b84:	e000ed04 	.word	0xe000ed04

00013b88 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   13b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13b8c:	b086      	sub	sp, #24
   13b8e:	4606      	mov	r6, r0
   13b90:	af00      	add	r7, sp, #0
   13b92:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
   13b94:	4b47      	ldr	r3, [pc, #284]	; (13cb4 <bus_fault.constprop.0+0x12c>)
   13b96:	617b      	str	r3, [r7, #20]
   13b98:	2402      	movs	r4, #2
   13b9a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13b9e:	4846      	ldr	r0, [pc, #280]	; (13cb8 <bus_fault.constprop.0+0x130>)
   13ba0:	613c      	str	r4, [r7, #16]
   13ba2:	f107 0210 	add.w	r2, r7, #16
   13ba6:	f010 fe8e 	bl	248c6 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   13baa:	4b44      	ldr	r3, [pc, #272]	; (13cbc <bus_fault.constprop.0+0x134>)
   13bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13bae:	04d9      	lsls	r1, r3, #19
   13bb0:	d56d      	bpl.n	13c8e <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
   13bb2:	4b43      	ldr	r3, [pc, #268]	; (13cc0 <bus_fault.constprop.0+0x138>)
   13bb4:	4840      	ldr	r0, [pc, #256]	; (13cb8 <bus_fault.constprop.0+0x130>)
   13bb6:	e9c7 4304 	strd	r4, r3, [r7, #16]
   13bba:	f107 0210 	add.w	r2, r7, #16
   13bbe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13bc2:	f010 fe80 	bl	248c6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
   13bc6:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   13bc8:	4b3c      	ldr	r3, [pc, #240]	; (13cbc <bus_fault.constprop.0+0x134>)
   13bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13bcc:	051a      	lsls	r2, r3, #20
   13bce:	d50b      	bpl.n	13be8 <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
   13bd0:	4b3c      	ldr	r3, [pc, #240]	; (13cc4 <bus_fault.constprop.0+0x13c>)
   13bd2:	617b      	str	r3, [r7, #20]
   13bd4:	2302      	movs	r3, #2
   13bd6:	4838      	ldr	r0, [pc, #224]	; (13cb8 <bus_fault.constprop.0+0x130>)
   13bd8:	613b      	str	r3, [r7, #16]
   13bda:	f107 0210 	add.w	r2, r7, #16
   13bde:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13be2:	f010 fe70 	bl	248c6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
   13be6:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   13be8:	4c34      	ldr	r4, [pc, #208]	; (13cbc <bus_fault.constprop.0+0x134>)
   13bea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13bec:	059b      	lsls	r3, r3, #22
   13bee:	d523      	bpl.n	13c38 <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
   13bf0:	46e8      	mov	r8, sp
   13bf2:	4b35      	ldr	r3, [pc, #212]	; (13cc8 <bus_fault.constprop.0+0x140>)
   13bf4:	617b      	str	r3, [r7, #20]
   13bf6:	2302      	movs	r3, #2
   13bf8:	482f      	ldr	r0, [pc, #188]	; (13cb8 <bus_fault.constprop.0+0x130>)
   13bfa:	613b      	str	r3, [r7, #16]
   13bfc:	f107 0210 	add.w	r2, r7, #16
   13c00:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13c04:	f010 fe5f 	bl	248c6 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   13c08:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   13c0a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   13c0c:	0410      	lsls	r0, r2, #16
   13c0e:	d512      	bpl.n	13c36 <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   13c10:	b088      	sub	sp, #32
   13c12:	466a      	mov	r2, sp
   13c14:	492d      	ldr	r1, [pc, #180]	; (13ccc <bus_fault.constprop.0+0x144>)
   13c16:	4828      	ldr	r0, [pc, #160]	; (13cb8 <bus_fault.constprop.0+0x130>)
   13c18:	e9c2 1305 	strd	r1, r3, [r2, #20]
   13c1c:	2303      	movs	r3, #3
   13c1e:	f842 3f10 	str.w	r3, [r2, #16]!
   13c22:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13c26:	f010 fe4e 	bl	248c6 <z_log_msg_static_create.constprop.0>
   13c2a:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   13c2c:	b11e      	cbz	r6, 13c36 <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   13c2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13c30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   13c34:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
   13c36:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   13c38:	4b20      	ldr	r3, [pc, #128]	; (13cbc <bus_fault.constprop.0+0x134>)
   13c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13c3c:	0559      	lsls	r1, r3, #21
   13c3e:	d50b      	bpl.n	13c58 <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
   13c40:	4b23      	ldr	r3, [pc, #140]	; (13cd0 <bus_fault.constprop.0+0x148>)
   13c42:	617b      	str	r3, [r7, #20]
   13c44:	2302      	movs	r3, #2
   13c46:	481c      	ldr	r0, [pc, #112]	; (13cb8 <bus_fault.constprop.0+0x130>)
   13c48:	613b      	str	r3, [r7, #16]
   13c4a:	f107 0210 	add.w	r2, r7, #16
   13c4e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13c52:	f010 fe38 	bl	248c6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
   13c56:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   13c58:	4b18      	ldr	r3, [pc, #96]	; (13cbc <bus_fault.constprop.0+0x134>)
   13c5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13c5c:	05d2      	lsls	r2, r2, #23
   13c5e:	d518      	bpl.n	13c92 <bus_fault.constprop.0+0x10a>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
   13c60:	4b1c      	ldr	r3, [pc, #112]	; (13cd4 <bus_fault.constprop.0+0x14c>)
   13c62:	617b      	str	r3, [r7, #20]
   13c64:	2302      	movs	r3, #2
   13c66:	4814      	ldr	r0, [pc, #80]	; (13cb8 <bus_fault.constprop.0+0x130>)
   13c68:	613b      	str	r3, [r7, #16]
   13c6a:	f107 0210 	add.w	r2, r7, #16
   13c6e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13c72:	f010 fe28 	bl	248c6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
   13c76:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   13c78:	4a10      	ldr	r2, [pc, #64]	; (13cbc <bus_fault.constprop.0+0x134>)
   13c7a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13c7c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   13c80:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
   13c82:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
   13c84:	2300      	movs	r3, #0
   13c86:	702b      	strb	r3, [r5, #0]
}
   13c88:	46bd      	mov	sp, r7
   13c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
   13c8e:	2016      	movs	r0, #22
   13c90:	e79a      	b.n	13bc8 <bus_fault.constprop.0+0x40>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   13c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13c94:	049b      	lsls	r3, r3, #18
   13c96:	d5ef      	bpl.n	13c78 <bus_fault.constprop.0+0xf0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   13c98:	4b0f      	ldr	r3, [pc, #60]	; (13cd8 <bus_fault.constprop.0+0x150>)
   13c9a:	617b      	str	r3, [r7, #20]
   13c9c:	2302      	movs	r3, #2
   13c9e:	4806      	ldr	r0, [pc, #24]	; (13cb8 <bus_fault.constprop.0+0x130>)
   13ca0:	613b      	str	r3, [r7, #16]
   13ca2:	f107 0210 	add.w	r2, r7, #16
   13ca6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13caa:	f010 fe0c 	bl	248c6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
   13cae:	201c      	movs	r0, #28
   13cb0:	e7e2      	b.n	13c78 <bus_fault.constprop.0+0xf0>
   13cb2:	bf00      	nop
   13cb4:	000292d0 	.word	0x000292d0
   13cb8:	0002821c 	.word	0x0002821c
   13cbc:	e000ed00 	.word	0xe000ed00
   13cc0:	000292e6 	.word	0x000292e6
   13cc4:	000292f7 	.word	0x000292f7
   13cc8:	0002930a 	.word	0x0002930a
   13ccc:	00029323 	.word	0x00029323
   13cd0:	00029338 	.word	0x00029338
   13cd4:	00029353 	.word	0x00029353
   13cd8:	0002936b 	.word	0x0002936b

00013cdc <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   13cdc:	b510      	push	{r4, lr}
   13cde:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   13ce0:	4b36      	ldr	r3, [pc, #216]	; (13dbc <usage_fault.constprop.0+0xe0>)
   13ce2:	4837      	ldr	r0, [pc, #220]	; (13dc0 <usage_fault.constprop.0+0xe4>)
   13ce4:	9305      	str	r3, [sp, #20]
   13ce6:	aa04      	add	r2, sp, #16
   13ce8:	2402      	movs	r4, #2
   13cea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13cee:	9404      	str	r4, [sp, #16]
   13cf0:	f010 fde9 	bl	248c6 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   13cf4:	4b33      	ldr	r3, [pc, #204]	; (13dc4 <usage_fault.constprop.0+0xe8>)
   13cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13cf8:	019a      	lsls	r2, r3, #6
   13cfa:	d55d      	bpl.n	13db8 <usage_fault.constprop.0+0xdc>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
   13cfc:	4b32      	ldr	r3, [pc, #200]	; (13dc8 <usage_fault.constprop.0+0xec>)
   13cfe:	4830      	ldr	r0, [pc, #192]	; (13dc0 <usage_fault.constprop.0+0xe4>)
   13d00:	aa04      	add	r2, sp, #16
   13d02:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13d06:	e9cd 4304 	strd	r4, r3, [sp, #16]
   13d0a:	f010 fddc 	bl	248c6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
   13d0e:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   13d10:	4b2c      	ldr	r3, [pc, #176]	; (13dc4 <usage_fault.constprop.0+0xe8>)
   13d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13d14:	01db      	lsls	r3, r3, #7
   13d16:	d50a      	bpl.n	13d2e <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
   13d18:	4b2c      	ldr	r3, [pc, #176]	; (13dcc <usage_fault.constprop.0+0xf0>)
   13d1a:	4829      	ldr	r0, [pc, #164]	; (13dc0 <usage_fault.constprop.0+0xe4>)
   13d1c:	9305      	str	r3, [sp, #20]
   13d1e:	aa04      	add	r2, sp, #16
   13d20:	2302      	movs	r3, #2
   13d22:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13d26:	9304      	str	r3, [sp, #16]
   13d28:	f010 fdcd 	bl	248c6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
   13d2c:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   13d2e:	4b25      	ldr	r3, [pc, #148]	; (13dc4 <usage_fault.constprop.0+0xe8>)
   13d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13d32:	031c      	lsls	r4, r3, #12
   13d34:	d50a      	bpl.n	13d4c <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
   13d36:	4b26      	ldr	r3, [pc, #152]	; (13dd0 <usage_fault.constprop.0+0xf4>)
   13d38:	4821      	ldr	r0, [pc, #132]	; (13dc0 <usage_fault.constprop.0+0xe4>)
   13d3a:	9305      	str	r3, [sp, #20]
   13d3c:	aa04      	add	r2, sp, #16
   13d3e:	2302      	movs	r3, #2
   13d40:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13d44:	9304      	str	r3, [sp, #16]
   13d46:	f010 fdbe 	bl	248c6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
   13d4a:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   13d4c:	4b1d      	ldr	r3, [pc, #116]	; (13dc4 <usage_fault.constprop.0+0xe8>)
   13d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13d50:	0359      	lsls	r1, r3, #13
   13d52:	d50a      	bpl.n	13d6a <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   13d54:	4b1f      	ldr	r3, [pc, #124]	; (13dd4 <usage_fault.constprop.0+0xf8>)
   13d56:	481a      	ldr	r0, [pc, #104]	; (13dc0 <usage_fault.constprop.0+0xe4>)
   13d58:	9305      	str	r3, [sp, #20]
   13d5a:	aa04      	add	r2, sp, #16
   13d5c:	2302      	movs	r3, #2
   13d5e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13d62:	9304      	str	r3, [sp, #16]
   13d64:	f010 fdaf 	bl	248c6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
   13d68:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   13d6a:	4b16      	ldr	r3, [pc, #88]	; (13dc4 <usage_fault.constprop.0+0xe8>)
   13d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13d6e:	039a      	lsls	r2, r3, #14
   13d70:	d50a      	bpl.n	13d88 <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
   13d72:	4b19      	ldr	r3, [pc, #100]	; (13dd8 <usage_fault.constprop.0+0xfc>)
   13d74:	4812      	ldr	r0, [pc, #72]	; (13dc0 <usage_fault.constprop.0+0xe4>)
   13d76:	9305      	str	r3, [sp, #20]
   13d78:	aa04      	add	r2, sp, #16
   13d7a:	2302      	movs	r3, #2
   13d7c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13d80:	9304      	str	r3, [sp, #16]
   13d82:	f010 fda0 	bl	248c6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
   13d86:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   13d88:	4b0e      	ldr	r3, [pc, #56]	; (13dc4 <usage_fault.constprop.0+0xe8>)
   13d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13d8c:	03db      	lsls	r3, r3, #15
   13d8e:	d50a      	bpl.n	13da6 <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   13d90:	4b12      	ldr	r3, [pc, #72]	; (13ddc <usage_fault.constprop.0+0x100>)
   13d92:	480b      	ldr	r0, [pc, #44]	; (13dc0 <usage_fault.constprop.0+0xe4>)
   13d94:	9305      	str	r3, [sp, #20]
   13d96:	aa04      	add	r2, sp, #16
   13d98:	2302      	movs	r3, #2
   13d9a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13d9e:	9304      	str	r3, [sp, #16]
   13da0:	f010 fd91 	bl	248c6 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
   13da4:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   13da6:	4a07      	ldr	r2, [pc, #28]	; (13dc4 <usage_fault.constprop.0+0xe8>)
   13da8:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13daa:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   13dae:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   13db2:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   13db4:	b006      	add	sp, #24
   13db6:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
   13db8:	201d      	movs	r0, #29
   13dba:	e7a9      	b.n	13d10 <usage_fault.constprop.0+0x34>
   13dbc:	0002939a 	.word	0x0002939a
   13dc0:	0002821c 	.word	0x0002821c
   13dc4:	e000ed00 	.word	0xe000ed00
   13dc8:	000293b2 	.word	0x000293b2
   13dcc:	000293c5 	.word	0x000293c5
   13dd0:	000293df 	.word	0x000293df
   13dd4:	000293fd 	.word	0x000293fd
   13dd8:	00029422 	.word	0x00029422
   13ddc:	0002943c 	.word	0x0002943c

00013de0 <mem_manage_fault>:
{
   13de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13de4:	b086      	sub	sp, #24
   13de6:	4681      	mov	r9, r0
   13de8:	af00      	add	r7, sp, #0
   13dea:	468a      	mov	sl, r1
   13dec:	4690      	mov	r8, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   13dee:	4b51      	ldr	r3, [pc, #324]	; (13f34 <mem_manage_fault+0x154>)
   13df0:	617b      	str	r3, [r7, #20]
   13df2:	2402      	movs	r4, #2
   13df4:	4850      	ldr	r0, [pc, #320]	; (13f38 <mem_manage_fault+0x158>)
   13df6:	613c      	str	r4, [r7, #16]
   13df8:	f107 0210 	add.w	r2, r7, #16
   13dfc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13e00:	f010 fd61 	bl	248c6 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   13e04:	4b4d      	ldr	r3, [pc, #308]	; (13f3c <mem_manage_fault+0x15c>)
   13e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13e08:	06de      	lsls	r6, r3, #27
   13e0a:	d545      	bpl.n	13e98 <mem_manage_fault+0xb8>
		PR_FAULT_INFO("  Stacking error (context area might be"
   13e0c:	4b4c      	ldr	r3, [pc, #304]	; (13f40 <mem_manage_fault+0x160>)
   13e0e:	484a      	ldr	r0, [pc, #296]	; (13f38 <mem_manage_fault+0x158>)
   13e10:	e9c7 4304 	strd	r4, r3, [r7, #16]
   13e14:	f107 0210 	add.w	r2, r7, #16
   13e18:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_STACKING;
   13e1c:	2411      	movs	r4, #17
		PR_FAULT_INFO("  Stacking error (context area might be"
   13e1e:	f010 fd52 	bl	248c6 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   13e22:	4b46      	ldr	r3, [pc, #280]	; (13f3c <mem_manage_fault+0x15c>)
   13e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13e26:	071d      	lsls	r5, r3, #28
   13e28:	d50b      	bpl.n	13e42 <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Unstacking error");
   13e2a:	4b46      	ldr	r3, [pc, #280]	; (13f44 <mem_manage_fault+0x164>)
   13e2c:	617b      	str	r3, [r7, #20]
   13e2e:	2302      	movs	r3, #2
   13e30:	4841      	ldr	r0, [pc, #260]	; (13f38 <mem_manage_fault+0x158>)
   13e32:	613b      	str	r3, [r7, #16]
   13e34:	f107 0210 	add.w	r2, r7, #16
   13e38:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_UNSTACKING;
   13e3c:	2412      	movs	r4, #18
		PR_FAULT_INFO("  Unstacking error");
   13e3e:	f010 fd42 	bl	248c6 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   13e42:	4d3e      	ldr	r5, [pc, #248]	; (13f3c <mem_manage_fault+0x15c>)
   13e44:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13e46:	0798      	lsls	r0, r3, #30
   13e48:	d528      	bpl.n	13e9c <mem_manage_fault+0xbc>
		PR_FAULT_INFO("  Data Access Violation");
   13e4a:	466c      	mov	r4, sp
   13e4c:	4b3e      	ldr	r3, [pc, #248]	; (13f48 <mem_manage_fault+0x168>)
   13e4e:	617b      	str	r3, [r7, #20]
   13e50:	2302      	movs	r3, #2
   13e52:	613b      	str	r3, [r7, #16]
   13e54:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13e58:	4837      	ldr	r0, [pc, #220]	; (13f38 <mem_manage_fault+0x158>)
   13e5a:	f107 0210 	add.w	r2, r7, #16
   13e5e:	f010 fd32 	bl	248c6 <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
   13e62:	6b6e      	ldr	r6, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   13e64:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13e66:	0619      	lsls	r1, r3, #24
   13e68:	d560      	bpl.n	13f2c <mem_manage_fault+0x14c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   13e6a:	b088      	sub	sp, #32
   13e6c:	466a      	mov	r2, sp
   13e6e:	4b37      	ldr	r3, [pc, #220]	; (13f4c <mem_manage_fault+0x16c>)
   13e70:	4831      	ldr	r0, [pc, #196]	; (13f38 <mem_manage_fault+0x158>)
   13e72:	e9c2 3605 	strd	r3, r6, [r2, #20]
   13e76:	2303      	movs	r3, #3
   13e78:	f842 3f10 	str.w	r3, [r2, #16]!
   13e7c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13e80:	f010 fd21 	bl	248c6 <z_log_msg_static_create.constprop.0>
   13e84:	46a5      	mov	sp, r4
			if (from_hard_fault != 0) {
   13e86:	f1ba 0f00 	cmp.w	sl, #0
   13e8a:	d003      	beq.n	13e94 <mem_manage_fault+0xb4>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   13e8c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13e8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13e92:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
   13e94:	2413      	movs	r4, #19
   13e96:	e003      	b.n	13ea0 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
   13e98:	2410      	movs	r4, #16
   13e9a:	e7c2      	b.n	13e22 <mem_manage_fault+0x42>
	uint32_t mmfar = -EINVAL;
   13e9c:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   13ea0:	4b26      	ldr	r3, [pc, #152]	; (13f3c <mem_manage_fault+0x15c>)
   13ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13ea4:	07da      	lsls	r2, r3, #31
   13ea6:	d50b      	bpl.n	13ec0 <mem_manage_fault+0xe0>
		PR_FAULT_INFO("  Instruction Access Violation");
   13ea8:	4b29      	ldr	r3, [pc, #164]	; (13f50 <mem_manage_fault+0x170>)
   13eaa:	617b      	str	r3, [r7, #20]
   13eac:	2302      	movs	r3, #2
   13eae:	4822      	ldr	r0, [pc, #136]	; (13f38 <mem_manage_fault+0x158>)
   13eb0:	613b      	str	r3, [r7, #16]
   13eb2:	f107 0210 	add.w	r2, r7, #16
   13eb6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
   13eba:	2414      	movs	r4, #20
		PR_FAULT_INFO("  Instruction Access Violation");
   13ebc:	f010 fd03 	bl	248c6 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   13ec0:	4b1e      	ldr	r3, [pc, #120]	; (13f3c <mem_manage_fault+0x15c>)
   13ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13ec4:	069b      	lsls	r3, r3, #26
   13ec6:	d50b      	bpl.n	13ee0 <mem_manage_fault+0x100>
		PR_FAULT_INFO(
   13ec8:	4b22      	ldr	r3, [pc, #136]	; (13f54 <mem_manage_fault+0x174>)
   13eca:	617b      	str	r3, [r7, #20]
   13ecc:	2302      	movs	r3, #2
   13ece:	481a      	ldr	r0, [pc, #104]	; (13f38 <mem_manage_fault+0x158>)
   13ed0:	613b      	str	r3, [r7, #16]
   13ed2:	f107 0210 	add.w	r2, r7, #16
   13ed6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
   13eda:	2415      	movs	r4, #21
		PR_FAULT_INFO(
   13edc:	f010 fcf3 	bl	248c6 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   13ee0:	4b16      	ldr	r3, [pc, #88]	; (13f3c <mem_manage_fault+0x15c>)
   13ee2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13ee4:	06d5      	lsls	r5, r2, #27
   13ee6:	d402      	bmi.n	13eee <mem_manage_fault+0x10e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   13ee8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   13eea:	0790      	lsls	r0, r2, #30
   13eec:	d50a      	bpl.n	13f04 <mem_manage_fault+0x124>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   13eee:	685b      	ldr	r3, [r3, #4]
   13ef0:	0519      	lsls	r1, r3, #20
   13ef2:	d507      	bpl.n	13f04 <mem_manage_fault+0x124>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   13ef4:	4649      	mov	r1, r9
   13ef6:	4630      	mov	r0, r6
   13ef8:	f7ff fdec 	bl	13ad4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   13efc:	b110      	cbz	r0, 13f04 <mem_manage_fault+0x124>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   13efe:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   13f02:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   13f04:	4b0d      	ldr	r3, [pc, #52]	; (13f3c <mem_manage_fault+0x15c>)
   13f06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13f08:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   13f0a:	bf42      	ittt	mi
   13f0c:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   13f0e:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   13f12:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   13f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13f16:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   13f1a:	629a      	str	r2, [r3, #40]	; 0x28
}
   13f1c:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
   13f1e:	2300      	movs	r3, #0
}
   13f20:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
   13f22:	f888 3000 	strb.w	r3, [r8]
}
   13f26:	46bd      	mov	sp, r7
   13f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
   13f2c:	f06f 0615 	mvn.w	r6, #21
   13f30:	e7b0      	b.n	13e94 <mem_manage_fault+0xb4>
   13f32:	bf00      	nop
   13f34:	00029467 	.word	0x00029467
   13f38:	0002821c 	.word	0x0002821c
   13f3c:	e000ed00 	.word	0xe000ed00
   13f40:	0002947d 	.word	0x0002947d
   13f44:	000292f7 	.word	0x000292f7
   13f48:	000294b0 	.word	0x000294b0
   13f4c:	000294c8 	.word	0x000294c8
   13f50:	000294de 	.word	0x000294de
   13f54:	0002936b 	.word	0x0002936b

00013f58 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   13f58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13f5c:	4b77      	ldr	r3, [pc, #476]	; (1413c <z_arm_fault+0x1e4>)
{
   13f5e:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13f60:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   13f64:	af00      	add	r7, sp, #0
   13f66:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13f68:	f3c8 0408 	ubfx	r4, r8, #0, #9
   13f6c:	2600      	movs	r6, #0
   13f6e:	f386 8811 	msr	BASEPRI, r6
   13f72:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   13f76:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   13f7a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   13f7e:	d10e      	bne.n	13f9e <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   13f80:	f002 030c 	and.w	r3, r2, #12
   13f84:	2b08      	cmp	r3, #8
   13f86:	d119      	bne.n	13fbc <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   13f88:	4b6d      	ldr	r3, [pc, #436]	; (14140 <z_arm_fault+0x1e8>)
   13f8a:	61fb      	str	r3, [r7, #28]
   13f8c:	2302      	movs	r3, #2
   13f8e:	486d      	ldr	r0, [pc, #436]	; (14144 <z_arm_fault+0x1ec>)
   13f90:	61bb      	str	r3, [r7, #24]
   13f92:	f107 0218 	add.w	r2, r7, #24
   13f96:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13f9a:	f010 fc94 	bl	248c6 <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
   13f9e:	2600      	movs	r6, #0
		return NULL;
   13fa0:	4635      	mov	r5, r6
	*recoverable = false;
   13fa2:	2300      	movs	r3, #0
   13fa4:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
   13fa6:	1ee3      	subs	r3, r4, #3
   13fa8:	2b09      	cmp	r3, #9
   13faa:	f200 80a6 	bhi.w	140fa <z_arm_fault+0x1a2>
   13fae:	e8df f003 	tbb	[pc, r3]
   13fb2:	990a      	.short	0x990a
   13fb4:	a4a4959c 	.word	0xa4a4959c
   13fb8:	9fa4a4a4 	.word	0x9fa4a4a4
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   13fbc:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   13fbe:	bf4c      	ite	mi
   13fc0:	460d      	movmi	r5, r1
			*nested_exc = true;
   13fc2:	2601      	movpl	r6, #1
   13fc4:	e7ed      	b.n	13fa2 <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
   13fc6:	46e9      	mov	r9, sp
   13fc8:	4b5f      	ldr	r3, [pc, #380]	; (14148 <z_arm_fault+0x1f0>)
   13fca:	61fb      	str	r3, [r7, #28]
   13fcc:	f04f 0802 	mov.w	r8, #2
   13fd0:	f107 0218 	add.w	r2, r7, #24
   13fd4:	485b      	ldr	r0, [pc, #364]	; (14144 <z_arm_fault+0x1ec>)
   13fd6:	f8c7 8018 	str.w	r8, [r7, #24]
   13fda:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13fde:	f010 fc72 	bl	248c6 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
   13fe2:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   13fe4:	4c55      	ldr	r4, [pc, #340]	; (1413c <z_arm_fault+0x1e4>)
	*recoverable = false;
   13fe6:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   13fe8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13fea:	079a      	lsls	r2, r3, #30
   13fec:	d50b      	bpl.n	14006 <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
   13fee:	4b57      	ldr	r3, [pc, #348]	; (1414c <z_arm_fault+0x1f4>)
		PR_EXC("  Debug event");
   13ff0:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
   13ff4:	4853      	ldr	r0, [pc, #332]	; (14144 <z_arm_fault+0x1ec>)
   13ff6:	f107 0218 	add.w	r2, r7, #24
   13ffa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13ffe:	f010 fc62 	bl	248c6 <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   14002:	2400      	movs	r4, #0
   14004:	e041      	b.n	1408a <z_arm_fault+0x132>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   14006:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   14008:	2b00      	cmp	r3, #0
   1400a:	da01      	bge.n	14010 <z_arm_fault+0xb8>
		PR_EXC("  Debug event");
   1400c:	4b50      	ldr	r3, [pc, #320]	; (14150 <z_arm_fault+0x1f8>)
   1400e:	e7ef      	b.n	13ff0 <z_arm_fault+0x98>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   14010:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   14012:	005b      	lsls	r3, r3, #1
   14014:	d5f5      	bpl.n	14002 <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
   14016:	4b4f      	ldr	r3, [pc, #316]	; (14154 <z_arm_fault+0x1fc>)
   14018:	484a      	ldr	r0, [pc, #296]	; (14144 <z_arm_fault+0x1ec>)
   1401a:	e9c7 8306 	strd	r8, r3, [r7, #24]
   1401e:	f107 0218 	add.w	r2, r7, #24
   14022:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14026:	f010 fc4e 	bl	248c6 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   1402a:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   1402c:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   1402e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   14032:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   14034:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14038:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   1403c:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   1403e:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   14042:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   14046:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   14048:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1404c:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   14050:	f64d 7302 	movw	r3, #57090	; 0xdf02
   14054:	429a      	cmp	r2, r3
   14056:	d008      	beq.n	1406a <z_arm_fault+0x112>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   14058:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1405a:	b2db      	uxtb	r3, r3
   1405c:	b38b      	cbz	r3, 140c2 <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
   1405e:	1dfa      	adds	r2, r7, #7
   14060:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   14062:	4628      	mov	r0, r5
   14064:	f7ff febc 	bl	13de0 <mem_manage_fault>
   14068:	e03a      	b.n	140e0 <z_arm_fault+0x188>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   1406a:	b088      	sub	sp, #32
   1406c:	682b      	ldr	r3, [r5, #0]
   1406e:	466a      	mov	r2, sp
   14070:	4939      	ldr	r1, [pc, #228]	; (14158 <z_arm_fault+0x200>)
   14072:	4834      	ldr	r0, [pc, #208]	; (14144 <z_arm_fault+0x1ec>)
   14074:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14078:	2303      	movs	r3, #3
   1407a:	f842 3f10 	str.w	r3, [r2, #16]!
   1407e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14082:	f010 fc20 	bl	248c6 <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
   14086:	682c      	ldr	r4, [r5, #0]
   14088:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1408a:	79fb      	ldrb	r3, [r7, #7]
   1408c:	b9ab      	cbnz	r3, 140ba <z_arm_fault+0x162>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1408e:	2220      	movs	r2, #32
   14090:	4629      	mov	r1, r5
   14092:	f107 0008 	add.w	r0, r7, #8
   14096:	f010 fc5a 	bl	2494e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1409c:	2e00      	cmp	r6, #0
   1409e:	d047      	beq.n	14130 <z_arm_fault+0x1d8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   140a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
   140a4:	b922      	cbnz	r2, 140b0 <z_arm_fault+0x158>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   140a6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   140aa:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   140ae:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
   140b0:	f107 0108 	add.w	r1, r7, #8
   140b4:	4620      	mov	r0, r4
   140b6:	f7ff fbbf 	bl	13838 <z_arm_fatal_error>
}
   140ba:	372c      	adds	r7, #44	; 0x2c
   140bc:	46bd      	mov	sp, r7
   140be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   140c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   140c4:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   140c8:	d004      	beq.n	140d4 <z_arm_fault+0x17c>
			reason = bus_fault(esf, 1, recoverable);
   140ca:	1df9      	adds	r1, r7, #7
   140cc:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   140ce:	f7ff fd5b 	bl	13b88 <bus_fault.constprop.0>
   140d2:	e005      	b.n	140e0 <z_arm_fault+0x188>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   140d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   140d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   140da:	d392      	bcc.n	14002 <z_arm_fault+0xaa>
			reason = usage_fault(esf);
   140dc:	f7ff fdfe 	bl	13cdc <usage_fault.constprop.0>
   140e0:	4604      	mov	r4, r0
   140e2:	e7d2      	b.n	1408a <z_arm_fault+0x132>
		reason = mem_manage_fault(esf, 0, recoverable);
   140e4:	1dfa      	adds	r2, r7, #7
   140e6:	2100      	movs	r1, #0
   140e8:	e7bb      	b.n	14062 <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
   140ea:	1df9      	adds	r1, r7, #7
   140ec:	2000      	movs	r0, #0
   140ee:	e7ee      	b.n	140ce <z_arm_fault+0x176>
	PR_FAULT_INFO(
   140f0:	4b1a      	ldr	r3, [pc, #104]	; (1415c <z_arm_fault+0x204>)
   140f2:	61fb      	str	r3, [r7, #28]
   140f4:	2302      	movs	r3, #2
   140f6:	61bb      	str	r3, [r7, #24]
   140f8:	e77c      	b.n	13ff4 <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
   140fa:	4a19      	ldr	r2, [pc, #100]	; (14160 <z_arm_fault+0x208>)
   140fc:	4b19      	ldr	r3, [pc, #100]	; (14164 <z_arm_fault+0x20c>)
   140fe:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   14102:	46e8      	mov	r8, sp
   14104:	b08a      	sub	sp, #40	; 0x28
   14106:	bf18      	it	ne
   14108:	4613      	movne	r3, r2
   1410a:	466a      	mov	r2, sp
   1410c:	4916      	ldr	r1, [pc, #88]	; (14168 <z_arm_fault+0x210>)
   1410e:	480d      	ldr	r0, [pc, #52]	; (14144 <z_arm_fault+0x1ec>)
   14110:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14114:	f44f 7300 	mov.w	r3, #512	; 0x200
   14118:	8413      	strh	r3, [r2, #32]
   1411a:	3c10      	subs	r4, #16
   1411c:	4b13      	ldr	r3, [pc, #76]	; (1416c <z_arm_fault+0x214>)
   1411e:	61d4      	str	r4, [r2, #28]
   14120:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   14124:	f842 3f10 	str.w	r3, [r2, #16]!
   14128:	f010 fbcd 	bl	248c6 <z_log_msg_static_create.constprop.0>
   1412c:	46c5      	mov	sp, r8
}
   1412e:	e768      	b.n	14002 <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   14130:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   14134:	f023 0301 	bic.w	r3, r3, #1
   14138:	e7b9      	b.n	140ae <z_arm_fault+0x156>
   1413a:	bf00      	nop
   1413c:	e000ed00 	.word	0xe000ed00
   14140:	0002952b 	.word	0x0002952b
   14144:	0002821c 	.word	0x0002821c
   14148:	00029556 	.word	0x00029556
   1414c:	0002956d 	.word	0x0002956d
   14150:	0002958e 	.word	0x0002958e
   14154:	0002959c 	.word	0x0002959c
   14158:	000295bb 	.word	0x000295bb
   1415c:	000295d7 	.word	0x000295d7
   14160:	00029512 	.word	0x00029512
   14164:	000294fd 	.word	0x000294fd
   14168:	000295fb 	.word	0x000295fb
   1416c:	01000004 	.word	0x01000004

00014170 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   14170:	4a02      	ldr	r2, [pc, #8]	; (1417c <z_arm_fault_init+0xc>)
   14172:	6953      	ldr	r3, [r2, #20]
   14174:	f043 0310 	orr.w	r3, r3, #16
   14178:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   1417a:	4770      	bx	lr
   1417c:	e000ed00 	.word	0xe000ed00

00014180 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   14180:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   14184:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   14188:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1418a:	4672      	mov	r2, lr
	bl z_arm_fault
   1418c:	f7ff fee4 	bl	13f58 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   14190:	bd01      	pop	{r0, pc}
   14192:	bf00      	nop

00014194 <z_arm_interrupt_init>:
   14194:	4804      	ldr	r0, [pc, #16]	; (141a8 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   14196:	2300      	movs	r3, #0
   14198:	2140      	movs	r1, #64	; 0x40
   1419a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1419c:	3301      	adds	r3, #1
   1419e:	2b30      	cmp	r3, #48	; 0x30
   141a0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   141a4:	d1f9      	bne.n	1419a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   141a6:	4770      	bx	lr
   141a8:	e000e100 	.word	0xe000e100

000141ac <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   141ac:	2000      	movs	r0, #0
    msr CONTROL, r0
   141ae:	f380 8814 	msr	CONTROL, r0
    isb
   141b2:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   141b6:	f7fe fa93 	bl	126e0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   141ba:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   141bc:	490d      	ldr	r1, [pc, #52]	; (141f4 <__start+0x48>)
    str r0, [r1]
   141be:	6008      	str	r0, [r1, #0]
    dsb
   141c0:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   141c4:	480c      	ldr	r0, [pc, #48]	; (141f8 <__start+0x4c>)
    msr msp, r0
   141c6:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   141ca:	f000 f82b 	bl	14224 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   141ce:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   141d0:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   141d4:	4809      	ldr	r0, [pc, #36]	; (141fc <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   141d6:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   141da:	1840      	adds	r0, r0, r1
    msr PSP, r0
   141dc:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   141e0:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   141e4:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   141e6:	4308      	orrs	r0, r1
    msr CONTROL, r0
   141e8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   141ec:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   141f0:	f7ff fbe4 	bl	139bc <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   141f4:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   141f8:	20007580 	.word	0x20007580
    ldr r0, =z_interrupt_stacks
   141fc:	200063c0 	.word	0x200063c0

00014200 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   14200:	4907      	ldr	r1, [pc, #28]	; (14220 <z_arm_clear_arm_mpu_config+0x20>)
   14202:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   14206:	2300      	movs	r3, #0
	int num_regions =
   14208:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   1420c:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   1420e:	4293      	cmp	r3, r2
   14210:	db00      	blt.n	14214 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   14212:	4770      	bx	lr
  MPU->RNR = rnr;
   14214:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   14218:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   1421c:	3301      	adds	r3, #1
   1421e:	e7f6      	b.n	1420e <z_arm_clear_arm_mpu_config+0xe>
   14220:	e000ed00 	.word	0xe000ed00

00014224 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   14224:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   14226:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   14228:	2300      	movs	r3, #0
   1422a:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1422e:	f7ff ffe7 	bl	14200 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   14232:	4b14      	ldr	r3, [pc, #80]	; (14284 <z_arm_init_arch_hw_at_boot+0x60>)
   14234:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14238:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   1423c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   14240:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   14244:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   14248:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   1424c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   14250:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   14254:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   14258:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1425c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   14260:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   14264:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   14268:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   1426c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   14270:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   14274:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   14278:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   1427a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1427e:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   14282:	bd08      	pop	{r3, pc}
   14284:	e000e100 	.word	0xe000e100

00014288 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   14288:	4b08      	ldr	r3, [pc, #32]	; (142ac <z_impl_k_thread_abort+0x24>)
   1428a:	689b      	ldr	r3, [r3, #8]
   1428c:	4283      	cmp	r3, r0
   1428e:	d10b      	bne.n	142a8 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14290:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   14294:	b143      	cbz	r3, 142a8 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14296:	4b06      	ldr	r3, [pc, #24]	; (142b0 <z_impl_k_thread_abort+0x28>)
   14298:	685a      	ldr	r2, [r3, #4]
   1429a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   1429e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   142a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   142a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   142a6:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   142a8:	f00b bf50 	b.w	2014c <z_thread_abort>
   142ac:	200034fc 	.word	0x200034fc
   142b0:	e000ed00 	.word	0xe000ed00

000142b4 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   142b4:	4b02      	ldr	r3, [pc, #8]	; (142c0 <z_arm_configure_static_mpu_regions+0xc>)
   142b6:	4a03      	ldr	r2, [pc, #12]	; (142c4 <z_arm_configure_static_mpu_regions+0x10>)
   142b8:	4803      	ldr	r0, [pc, #12]	; (142c8 <z_arm_configure_static_mpu_regions+0x14>)
   142ba:	2101      	movs	r1, #1
   142bc:	f000 b892 	b.w	143e4 <arm_core_mpu_configure_static_mpu_regions>
   142c0:	20040000 	.word	0x20040000
   142c4:	20000000 	.word	0x20000000
   142c8:	00028488 	.word	0x00028488

000142cc <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   142cc:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   142ce:	4b05      	ldr	r3, [pc, #20]	; (142e4 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   142d0:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
   142d2:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   142d4:	4a04      	ldr	r2, [pc, #16]	; (142e8 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   142d6:	2140      	movs	r1, #64	; 0x40
   142d8:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   142dc:	4618      	mov	r0, r3
   142de:	2101      	movs	r1, #1
   142e0:	f000 b88a 	b.w	143f8 <arm_core_mpu_configure_dynamic_mpu_regions>
   142e4:	2000315c 	.word	0x2000315c
   142e8:	150b0000 	.word	0x150b0000

000142ec <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   142ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   142f0:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 143a8 <mpu_configure_regions+0xbc>
   142f4:	469c      	mov	ip, r3
   142f6:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
   142f8:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
   142fa:	2300      	movs	r3, #0
   142fc:	428b      	cmp	r3, r1
   142fe:	da1a      	bge.n	14336 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
   14300:	6844      	ldr	r4, [r0, #4]
   14302:	2c00      	cmp	r4, #0
   14304:	d04d      	beq.n	143a2 <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   14306:	f1bc 0f00 	cmp.w	ip, #0
   1430a:	d01d      	beq.n	14348 <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   1430c:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   1430e:	4234      	tst	r4, r6
   14310:	d015      	beq.n	1433e <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   14312:	466c      	mov	r4, sp
   14314:	b088      	sub	sp, #32
   14316:	466a      	mov	r2, sp
   14318:	4924      	ldr	r1, [pc, #144]	; (143ac <mpu_configure_regions+0xc0>)
   1431a:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1431e:	2303      	movs	r3, #3
   14320:	f842 3f10 	str.w	r3, [r2, #16]!
   14324:	4822      	ldr	r0, [pc, #136]	; (143b0 <mpu_configure_regions+0xc4>)
   14326:	2300      	movs	r3, #0
   14328:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1432c:	f7fe fc70 	bl	12c10 <z_impl_z_log_msg_static_create>
			return -EINVAL;
   14330:	f06f 0515 	mvn.w	r5, #21
   14334:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   14336:	4628      	mov	r0, r5
   14338:	46bd      	mov	sp, r7
   1433a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
   1433e:	2c1f      	cmp	r4, #31
   14340:	d9e7      	bls.n	14312 <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
   14342:	6802      	ldr	r2, [r0, #0]
		&&
   14344:	4216      	tst	r6, r2
   14346:	d1e4      	bne.n	14312 <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   14348:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   1434a:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   1434c:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   1434e:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
   14352:	d914      	bls.n	1437e <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
   14354:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   14358:	d813      	bhi.n	14382 <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   1435a:	3c01      	subs	r4, #1
   1435c:	fab4 f484 	clz	r4, r4
   14360:	f1c4 041f 	rsb	r4, r4, #31
   14364:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   14366:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   1436a:	ea46 0604 	orr.w	r6, r6, r4
   1436e:	d90a      	bls.n	14386 <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   14370:	466c      	mov	r4, sp
   14372:	b088      	sub	sp, #32
   14374:	466a      	mov	r2, sp
   14376:	4b0f      	ldr	r3, [pc, #60]	; (143b4 <mpu_configure_regions+0xc8>)
   14378:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1437c:	e7cf      	b.n	1431e <mpu_configure_regions+0x32>
		return REGION_32B;
   1437e:	2408      	movs	r4, #8
   14380:	e7f1      	b.n	14366 <mpu_configure_regions+0x7a>
		return REGION_4G;
   14382:	243e      	movs	r4, #62	; 0x3e
   14384:	e7ef      	b.n	14366 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14386:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   1438a:	432a      	orrs	r2, r5
   1438c:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14390:	f046 0601 	orr.w	r6, r6, #1
   14394:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14398:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
   1439c:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1439e:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   143a2:	3301      	adds	r3, #1
   143a4:	300c      	adds	r0, #12
   143a6:	e7a9      	b.n	142fc <mpu_configure_regions+0x10>
   143a8:	e000ed00 	.word	0xe000ed00
   143ac:	00029612 	.word	0x00029612
   143b0:	00028204 	.word	0x00028204
   143b4:	00029635 	.word	0x00029635

000143b8 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   143b8:	4b04      	ldr	r3, [pc, #16]	; (143cc <arm_core_mpu_enable+0x14>)
   143ba:	2205      	movs	r2, #5
   143bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   143c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   143c4:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   143c8:	4770      	bx	lr
   143ca:	bf00      	nop
   143cc:	e000ed00 	.word	0xe000ed00

000143d0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   143d0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   143d4:	4b02      	ldr	r3, [pc, #8]	; (143e0 <arm_core_mpu_disable+0x10>)
   143d6:	2200      	movs	r2, #0
   143d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   143dc:	4770      	bx	lr
   143de:	bf00      	nop
   143e0:	e000ed00 	.word	0xe000ed00

000143e4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   143e4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   143e6:	4c03      	ldr	r4, [pc, #12]	; (143f4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   143e8:	2301      	movs	r3, #1
   143ea:	7822      	ldrb	r2, [r4, #0]
   143ec:	f7ff ff7e 	bl	142ec <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   143f0:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   143f2:	bd10      	pop	{r4, pc}
   143f4:	20004035 	.word	0x20004035

000143f8 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
   143f8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   143fa:	4a09      	ldr	r2, [pc, #36]	; (14420 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
   143fc:	2300      	movs	r3, #0
   143fe:	7812      	ldrb	r2, [r2, #0]
   14400:	f7ff ff74 	bl	142ec <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   14404:	f110 0f16 	cmn.w	r0, #22
   14408:	d003      	beq.n	14412 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
   1440a:	4b06      	ldr	r3, [pc, #24]	; (14424 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
   1440c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   1440e:	2807      	cmp	r0, #7
   14410:	dd00      	ble.n	14414 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   14412:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   14414:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   14418:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   1441c:	3001      	adds	r0, #1
   1441e:	e7f6      	b.n	1440e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   14420:	20004035 	.word	0x20004035
   14424:	e000ed00 	.word	0xe000ed00

00014428 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   14428:	4914      	ldr	r1, [pc, #80]	; (1447c <z_arm_mpu_init+0x54>)
   1442a:	6808      	ldr	r0, [r1, #0]
   1442c:	2808      	cmp	r0, #8
{
   1442e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   14430:	d821      	bhi.n	14476 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   14432:	f7ff ffcd 	bl	143d0 <arm_core_mpu_disable>
   14436:	4c12      	ldr	r4, [pc, #72]	; (14480 <z_arm_mpu_init+0x58>)
   14438:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1443a:	2200      	movs	r2, #0
   1443c:	4290      	cmp	r0, r2
   1443e:	f101 010c 	add.w	r1, r1, #12
   14442:	d105      	bne.n	14450 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   14444:	4b0f      	ldr	r3, [pc, #60]	; (14484 <z_arm_mpu_init+0x5c>)
   14446:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   14448:	f7ff ffb6 	bl	143b8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   1444c:	2000      	movs	r0, #0
}
   1444e:	bd10      	pop	{r4, pc}
   14450:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14454:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   14458:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   1445c:	4313      	orrs	r3, r2
   1445e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14462:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14466:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1446a:	f043 0301 	orr.w	r3, r3, #1
   1446e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14472:	3201      	adds	r2, #1
   14474:	e7e2      	b.n	1443c <z_arm_mpu_init+0x14>
		return -1;
   14476:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1447a:	e7e8      	b.n	1444e <z_arm_mpu_init+0x26>
   1447c:	00028494 	.word	0x00028494
   14480:	e000ed00 	.word	0xe000ed00
   14484:	20004035 	.word	0x20004035

00014488 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   14488:	4b01      	ldr	r3, [pc, #4]	; (14490 <__stdout_hook_install+0x8>)
   1448a:	6018      	str	r0, [r3, #0]
}
   1448c:	4770      	bx	lr
   1448e:	bf00      	nop
   14490:	2000058c 	.word	0x2000058c

00014494 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(void)
{
   14494:	b510      	push	{r4, lr}
	__asm__ volatile(
   14496:	f04f 0340 	mov.w	r3, #64	; 0x40
   1449a:	f3ef 8011 	mrs	r0, BASEPRI
   1449e:	f383 8812 	msr	BASEPRI_MAX, r3
   144a2:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   144a6:	4a11      	ldr	r2, [pc, #68]	; (144ec <nordicsemi_nrf52_init+0x58>)
   144a8:	2301      	movs	r3, #1
   144aa:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   144ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   144b2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   144b6:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   144ba:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
   144be:	2c08      	cmp	r4, #8
   144c0:	d108      	bne.n	144d4 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   144c2:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
   144c6:	2905      	cmp	r1, #5
   144c8:	d804      	bhi.n	144d4 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   144ca:	4c09      	ldr	r4, [pc, #36]	; (144f0 <nordicsemi_nrf52_init+0x5c>)
   144cc:	5c61      	ldrb	r1, [r4, r1]
   144ce:	b109      	cbz	r1, 144d4 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   144d0:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   144d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   144d8:	2201      	movs	r2, #1
   144da:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   144de:	f380 8811 	msr	BASEPRI, r0
   144e2:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   144e6:	2000      	movs	r0, #0
   144e8:	bd10      	pop	{r4, pc}
   144ea:	bf00      	nop
   144ec:	4001e000 	.word	0x4001e000
   144f0:	0002966a 	.word	0x0002966a

000144f4 <sys_arch_reboot>:
    *p_gpregret = val;
   144f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   144f8:	b2c0      	uxtb	r0, r0
   144fa:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   144fe:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   14502:	4905      	ldr	r1, [pc, #20]	; (14518 <sys_arch_reboot+0x24>)
   14504:	4b05      	ldr	r3, [pc, #20]	; (1451c <sys_arch_reboot+0x28>)
   14506:	68ca      	ldr	r2, [r1, #12]
   14508:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1450c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1450e:	60cb      	str	r3, [r1, #12]
   14510:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14514:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14516:	e7fd      	b.n	14514 <sys_arch_reboot+0x20>
   14518:	e000ed00 	.word	0xe000ed00
   1451c:	05fa0004 	.word	0x05fa0004

00014520 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   14520:	b120      	cbz	r0, 1452c <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   14522:	4b03      	ldr	r3, [pc, #12]	; (14530 <arch_busy_wait+0x10>)
   14524:	0180      	lsls	r0, r0, #6
   14526:	f043 0301 	orr.w	r3, r3, #1
   1452a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   1452c:	4770      	bx	lr
   1452e:	bf00      	nop
   14530:	00028320 	.word	0x00028320

00014534 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(void)
{
   14534:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   14536:	4804      	ldr	r0, [pc, #16]	; (14548 <xoshiro128_initialize+0x14>)
   14538:	f012 feb2 	bl	272a0 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   1453c:	2800      	cmp	r0, #0
}
   1453e:	bf0c      	ite	eq
   14540:	f06f 0012 	mvneq.w	r0, #18
   14544:	2000      	movne	r0, #0
   14546:	bd08      	pop	{r3, pc}
   14548:	00027f0c 	.word	0x00027f0c

0001454c <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   1454c:	4b0e      	ldr	r3, [pc, #56]	; (14588 <bt_hex+0x3c>)
   1454e:	2940      	cmp	r1, #64	; 0x40
{
   14550:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   14552:	bf28      	it	cs
   14554:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   14556:	4c0d      	ldr	r4, [pc, #52]	; (1458c <bt_hex+0x40>)
   14558:	1846      	adds	r6, r0, r1
   1455a:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   1455c:	42b0      	cmp	r0, r6
   1455e:	f103 0302 	add.w	r3, r3, #2
   14562:	d104      	bne.n	1456e <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   14564:	2300      	movs	r3, #0
   14566:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   1456a:	4807      	ldr	r0, [pc, #28]	; (14588 <bt_hex+0x3c>)
   1456c:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   1456e:	7802      	ldrb	r2, [r0, #0]
   14570:	0912      	lsrs	r2, r2, #4
   14572:	5ca2      	ldrb	r2, [r4, r2]
   14574:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   14578:	f810 2b01 	ldrb.w	r2, [r0], #1
   1457c:	f002 020f 	and.w	r2, r2, #15
   14580:	5ca2      	ldrb	r2, [r4, r2]
   14582:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   14586:	e7e9      	b.n	1455c <bt_hex+0x10>
   14588:	20004054 	.word	0x20004054
   1458c:	0002968e 	.word	0x0002968e

00014590 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   14590:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   14592:	7803      	ldrb	r3, [r0, #0]
   14594:	b08b      	sub	sp, #44	; 0x2c
   14596:	4604      	mov	r4, r0
   14598:	ad07      	add	r5, sp, #28
   1459a:	2b03      	cmp	r3, #3
   1459c:	d821      	bhi.n	145e2 <bt_addr_le_str+0x52>
   1459e:	e8df f003 	tbb	[pc, r3]
   145a2:	1a02      	.short	0x1a02
   145a4:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   145a6:	4912      	ldr	r1, [pc, #72]	; (145f0 <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   145a8:	4628      	mov	r0, r5
   145aa:	f010 f98f 	bl	248cc <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   145ae:	9505      	str	r5, [sp, #20]
   145b0:	7863      	ldrb	r3, [r4, #1]
   145b2:	9304      	str	r3, [sp, #16]
   145b4:	78a3      	ldrb	r3, [r4, #2]
   145b6:	9303      	str	r3, [sp, #12]
   145b8:	78e3      	ldrb	r3, [r4, #3]
   145ba:	9302      	str	r3, [sp, #8]
   145bc:	7923      	ldrb	r3, [r4, #4]
   145be:	9301      	str	r3, [sp, #4]
   145c0:	7963      	ldrb	r3, [r4, #5]
   145c2:	9300      	str	r3, [sp, #0]
   145c4:	79a3      	ldrb	r3, [r4, #6]
   145c6:	4a0b      	ldr	r2, [pc, #44]	; (145f4 <bt_addr_le_str+0x64>)
   145c8:	480b      	ldr	r0, [pc, #44]	; (145f8 <bt_addr_le_str+0x68>)
   145ca:	211e      	movs	r1, #30
   145cc:	f00f f90d 	bl	237ea <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   145d0:	4809      	ldr	r0, [pc, #36]	; (145f8 <bt_addr_le_str+0x68>)
   145d2:	b00b      	add	sp, #44	; 0x2c
   145d4:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   145d6:	4909      	ldr	r1, [pc, #36]	; (145fc <bt_addr_le_str+0x6c>)
   145d8:	e7e6      	b.n	145a8 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   145da:	4909      	ldr	r1, [pc, #36]	; (14600 <bt_addr_le_str+0x70>)
   145dc:	e7e4      	b.n	145a8 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   145de:	4909      	ldr	r1, [pc, #36]	; (14604 <bt_addr_le_str+0x74>)
   145e0:	e7e2      	b.n	145a8 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   145e2:	4a09      	ldr	r2, [pc, #36]	; (14608 <bt_addr_le_str+0x78>)
   145e4:	210a      	movs	r1, #10
   145e6:	4628      	mov	r0, r5
   145e8:	f00f f8ff 	bl	237ea <snprintk>
		break;
   145ec:	e7df      	b.n	145ae <bt_addr_le_str+0x1e>
   145ee:	bf00      	nop
   145f0:	00028ccd 	.word	0x00028ccd
   145f4:	00028cef 	.word	0x00028cef
   145f8:	20004036 	.word	0x20004036
   145fc:	00028cd4 	.word	0x00028cd4
   14600:	00028cdb 	.word	0x00028cdb
   14604:	00028ce5 	.word	0x00028ce5
   14608:	0002ac0e 	.word	0x0002ac0e

0001460c <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(void)
{
   1460c:	b530      	push	{r4, r5, lr}

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   1460e:	4d0a      	ldr	r5, [pc, #40]	; (14638 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   14610:	4b0a      	ldr	r3, [pc, #40]	; (1463c <long_wq_init+0x30>)
{
   14612:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   14614:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   14616:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   14618:	9302      	str	r3, [sp, #8]
   1461a:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   1461c:	f013 f889 	bl	27732 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   14620:	ab02      	add	r3, sp, #8
   14622:	9300      	str	r3, [sp, #0]
   14624:	4628      	mov	r0, r5
   14626:	4906      	ldr	r1, [pc, #24]	; (14640 <long_wq_init+0x34>)
   14628:	230a      	movs	r3, #10
   1462a:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   1462e:	f00b fa0f 	bl	1fa50 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   14632:	4620      	mov	r0, r4
   14634:	b005      	add	sp, #20
   14636:	bd30      	pop	{r4, r5, pc}
   14638:	20001c00 	.word	0x20001c00
   1463c:	000296a6 	.word	0x000296a6
   14640:	20004980 	.word	0x20004980

00014644 <bt_long_wq_schedule>:
{
   14644:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   14646:	4801      	ldr	r0, [pc, #4]	; (1464c <bt_long_wq_schedule+0x8>)
   14648:	f00b ba3a 	b.w	1fac0 <k_work_schedule_for_queue>
   1464c:	20001c00 	.word	0x20001c00

00014650 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   14650:	b430      	push	{r4, r5}
   14652:	4603      	mov	r3, r0
   14654:	4608      	mov	r0, r1
	switch (src->type) {
   14656:	781a      	ldrb	r2, [r3, #0]
   14658:	2a01      	cmp	r2, #1
   1465a:	d013      	beq.n	14684 <uuid_to_uuid128+0x34>
   1465c:	2a02      	cmp	r2, #2
   1465e:	d026      	beq.n	146ae <uuid_to_uuid128+0x5e>
   14660:	b972      	cbnz	r2, 14680 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   14662:	4a15      	ldr	r2, [pc, #84]	; (146b8 <uuid_to_uuid128+0x68>)
   14664:	f102 0410 	add.w	r4, r2, #16
   14668:	f852 5b04 	ldr.w	r5, [r2], #4
   1466c:	f841 5b04 	str.w	r5, [r1], #4
   14670:	42a2      	cmp	r2, r4
   14672:	d1f9      	bne.n	14668 <uuid_to_uuid128+0x18>
   14674:	7812      	ldrb	r2, [r2, #0]
   14676:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   14678:	885b      	ldrh	r3, [r3, #2]
	dst[0] = val;
   1467a:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   1467c:	0a1b      	lsrs	r3, r3, #8
   1467e:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   14680:	bc30      	pop	{r4, r5}
   14682:	4770      	bx	lr
		*dst = uuid128_base;
   14684:	4a0c      	ldr	r2, [pc, #48]	; (146b8 <uuid_to_uuid128+0x68>)
   14686:	f102 0410 	add.w	r4, r2, #16
   1468a:	f852 5b04 	ldr.w	r5, [r2], #4
   1468e:	f841 5b04 	str.w	r5, [r1], #4
   14692:	42a2      	cmp	r2, r4
   14694:	d1f9      	bne.n	1468a <uuid_to_uuid128+0x3a>
   14696:	7812      	ldrb	r2, [r2, #0]
   14698:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   1469a:	685b      	ldr	r3, [r3, #4]
	dst[0] = val;
   1469c:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   1469e:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   146a2:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   146a4:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   146a6:	0a1b      	lsrs	r3, r3, #8
   146a8:	7382      	strb	r2, [r0, #14]
   146aa:	7403      	strb	r3, [r0, #16]
}
   146ac:	e7e8      	b.n	14680 <uuid_to_uuid128+0x30>
}
   146ae:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   146b0:	2211      	movs	r2, #17
   146b2:	4619      	mov	r1, r3
   146b4:	f010 b94b 	b.w	2494e <memcpy>
   146b8:	000296af 	.word	0x000296af

000146bc <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   146bc:	b538      	push	{r3, r4, r5, lr}
   146be:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   146c0:	4805      	ldr	r0, [pc, #20]	; (146d8 <bt_buf_get_rx+0x1c>)
   146c2:	f012 fa21 	bl	26b08 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   146c6:	4604      	mov	r4, r0
   146c8:	b120      	cbz	r0, 146d4 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   146ca:	2100      	movs	r1, #0
   146cc:	300c      	adds	r0, #12
   146ce:	f012 fa77 	bl	26bc0 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   146d2:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   146d4:	4620      	mov	r0, r4
   146d6:	bd38      	pop	{r3, r4, r5, pc}
   146d8:	20000a90 	.word	0x20000a90

000146dc <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   146dc:	b570      	push	{r4, r5, r6, lr}
   146de:	4602      	mov	r2, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   146e0:	480d      	ldr	r0, [pc, #52]	; (14718 <bt_buf_get_cmd_complete+0x3c>)
   146e2:	f3bf 8f5b 	dmb	ish
   146e6:	460b      	mov	r3, r1
   146e8:	2100      	movs	r1, #0
   146ea:	e850 4f00 	ldrex	r4, [r0]
   146ee:	e840 1500 	strex	r5, r1, [r0]
   146f2:	2d00      	cmp	r5, #0
   146f4:	d1f9      	bne.n	146ea <bt_buf_get_cmd_complete+0xe>
   146f6:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	buf = (struct net_buf *)atomic_ptr_clear((atomic_ptr_t *)&bt_dev.sent_cmd);
	if (buf) {
   146fa:	b924      	cbnz	r4, 14706 <bt_buf_get_cmd_complete+0x2a>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   146fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   14700:	2001      	movs	r0, #1
   14702:	f7ff bfdb 	b.w	146bc <bt_buf_get_rx>
   14706:	2301      	movs	r3, #1
   14708:	f104 000c 	add.w	r0, r4, #12
   1470c:	7623      	strb	r3, [r4, #24]
		buf->len = 0U;
   1470e:	8221      	strh	r1, [r4, #16]
   14710:	f012 fa56 	bl	26bc0 <net_buf_simple_reserve>
}
   14714:	4620      	mov	r0, r4
   14716:	bd70      	pop	{r4, r5, r6, pc}
   14718:	200004c8 	.word	0x200004c8

0001471c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   1471c:	b570      	push	{r4, r5, r6, lr}
   1471e:	4604      	mov	r4, r0
	switch (evt) {
   14720:	2c0f      	cmp	r4, #15
{
   14722:	460d      	mov	r5, r1
   14724:	4610      	mov	r0, r2
   14726:	4619      	mov	r1, r3
	switch (evt) {
   14728:	d805      	bhi.n	14736 <bt_buf_get_evt+0x1a>
   1472a:	2c0d      	cmp	r4, #13
   1472c:	d90d      	bls.n	1474a <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   1472e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   14732:	f7ff bfd3 	b.w	146dc <bt_buf_get_cmd_complete>
	switch (evt) {
   14736:	2c13      	cmp	r4, #19
   14738:	d107      	bne.n	1474a <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   1473a:	480c      	ldr	r0, [pc, #48]	; (1476c <bt_buf_get_evt+0x50>)
   1473c:	f012 f9e4 	bl	26b08 <net_buf_alloc_fixed>
			if (buf) {
   14740:	4604      	mov	r4, r0
   14742:	b938      	cbnz	r0, 14754 <bt_buf_get_evt+0x38>
{
   14744:	2400      	movs	r4, #0
}
   14746:	4620      	mov	r0, r4
   14748:	bd70      	pop	{r4, r5, r6, pc}
   1474a:	4602      	mov	r2, r0
   1474c:	460b      	mov	r3, r1
		if (discardable) {
   1474e:	b145      	cbz	r5, 14762 <bt_buf_get_evt+0x46>
   14750:	4807      	ldr	r0, [pc, #28]	; (14770 <bt_buf_get_evt+0x54>)
   14752:	e7f3      	b.n	1473c <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   14754:	2100      	movs	r1, #0
   14756:	300c      	adds	r0, #12
   14758:	f012 fa32 	bl	26bc0 <net_buf_simple_reserve>
   1475c:	2301      	movs	r3, #1
   1475e:	7623      	strb	r3, [r4, #24]
}
   14760:	e7f1      	b.n	14746 <bt_buf_get_evt+0x2a>
}
   14762:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   14766:	2001      	movs	r0, #1
   14768:	f7ff bfa8 	b.w	146bc <bt_buf_get_rx>
   1476c:	20000abc 	.word	0x20000abc
   14770:	20000a0c 	.word	0x20000a0c

00014774 <ver_str>:
{
   14774:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   14776:	4d0c      	ldr	r5, [pc, #48]	; (147a8 <ver_str+0x34>)
{
   14778:	4606      	mov	r6, r0
	const char * const str[] = {
   1477a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   1477c:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
   1477e:	466c      	mov	r4, sp
   14780:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   14782:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   14784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   14786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   14788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1478a:	e895 0003 	ldmia.w	r5, {r0, r1}
	if (ver < ARRAY_SIZE(str)) {
   1478e:	2e0d      	cmp	r6, #13
	const char * const str[] = {
   14790:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
   14794:	bf9b      	ittet	ls
   14796:	ab0e      	addls	r3, sp, #56	; 0x38
   14798:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
   1479c:	4803      	ldrhi	r0, [pc, #12]	; (147ac <ver_str+0x38>)
		return str[ver];
   1479e:	f856 0c38 	ldrls.w	r0, [r6, #-56]
}
   147a2:	b00e      	add	sp, #56	; 0x38
   147a4:	bd70      	pop	{r4, r5, r6, pc}
   147a6:	bf00      	nop
   147a8:	000282a0 	.word	0x000282a0
   147ac:	000296c8 	.word	0x000296c8

000147b0 <hci_disconn_complete_prio>:
{
   147b0:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   147b2:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   147b4:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   147b8:	781b      	ldrb	r3, [r3, #0]
   147ba:	b963      	cbnz	r3, 147d6 <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   147bc:	4620      	mov	r0, r4
   147be:	f002 fed3 	bl	17568 <bt_conn_lookup_handle>
	if (!conn) {
   147c2:	4605      	mov	r5, r0
   147c4:	b940      	cbnz	r0, 147d8 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   147c6:	4b08      	ldr	r3, [pc, #32]	; (147e8 <hci_disconn_complete_prio+0x38>)
   147c8:	881a      	ldrh	r2, [r3, #0]
   147ca:	b922      	cbnz	r2, 147d6 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   147cc:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   147d0:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   147d4:	8018      	strh	r0, [r3, #0]
}
   147d6:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   147d8:	2101      	movs	r1, #1
   147da:	f002 fecd 	bl	17578 <bt_conn_set_state>
	bt_conn_unref(conn);
   147de:	4628      	mov	r0, r5
}
   147e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   147e4:	f010 bcd5 	b.w	25192 <bt_conn_unref>
   147e8:	20004000 	.word	0x20004000

000147ec <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   147ec:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   147ee:	4c08      	ldr	r4, [pc, #32]	; (14810 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   147f0:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   147f2:	2205      	movs	r2, #5
   147f4:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   147f8:	f003 f922 	bl	17a40 <bt_conn_lookup_state_le>
		if (!conn) {
   147fc:	b938      	cbnz	r0, 1480e <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   147fe:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   14802:	4904      	ldr	r1, [pc, #16]	; (14814 <find_pending_connect.part.0+0x28>)
}
   14804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   14808:	2204      	movs	r2, #4
   1480a:	f003 b919 	b.w	17a40 <bt_conn_lookup_state_le>
}
   1480e:	bd10      	pop	{r4, pc}
   14810:	20000388 	.word	0x20000388
   14814:	00029674 	.word	0x00029674

00014818 <hci_data_buf_overflow>:
{
   14818:	b580      	push	{r7, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   1481a:	68c3      	ldr	r3, [r0, #12]
{
   1481c:	af00      	add	r7, sp, #0
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   1481e:	b088      	sub	sp, #32
   14820:	781b      	ldrb	r3, [r3, #0]
   14822:	466a      	mov	r2, sp
   14824:	4906      	ldr	r1, [pc, #24]	; (14840 <hci_data_buf_overflow+0x28>)
   14826:	4807      	ldr	r0, [pc, #28]	; (14844 <hci_data_buf_overflow+0x2c>)
   14828:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1482c:	2303      	movs	r3, #3
   1482e:	f842 3f10 	str.w	r3, [r2, #16]!
   14832:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   14836:	f010 f982 	bl	24b3e <z_log_msg_static_create.constprop.0>
}
   1483a:	46bd      	mov	sp, r7
   1483c:	bd80      	pop	{r7, pc}
   1483e:	bf00      	nop
   14840:	000296d0 	.word	0x000296d0
   14844:	00028174 	.word	0x00028174

00014848 <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
   14848:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to allocate buffer");
   1484a:	4b06      	ldr	r3, [pc, #24]	; (14864 <le_conn_param_neg_reply.part.0+0x1c>)
   1484c:	9305      	str	r3, [sp, #20]
   1484e:	4806      	ldr	r0, [pc, #24]	; (14868 <le_conn_param_neg_reply.part.0+0x20>)
   14850:	2302      	movs	r3, #2
   14852:	aa04      	add	r2, sp, #16
   14854:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14858:	9304      	str	r3, [sp, #16]
   1485a:	f010 f970 	bl	24b3e <z_log_msg_static_create.constprop.0>
}
   1485e:	b007      	add	sp, #28
   14860:	f85d fb04 	ldr.w	pc, [sp], #4
   14864:	000296f8 	.word	0x000296f8
   14868:	00028174 	.word	0x00028174

0001486c <rx_queue_put>:
{
   1486c:	b598      	push	{r3, r4, r7, lr}
   1486e:	4601      	mov	r1, r0
   14870:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   14872:	480d      	ldr	r0, [pc, #52]	; (148a8 <rx_queue_put+0x3c>)
   14874:	f012 f94f 	bl	26b16 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   14878:	490c      	ldr	r1, [pc, #48]	; (148ac <rx_queue_put+0x40>)
   1487a:	480d      	ldr	r0, [pc, #52]	; (148b0 <rx_queue_put+0x44>)
   1487c:	f012 ff48 	bl	27710 <k_work_submit_to_queue>
	if (err < 0) {
   14880:	2800      	cmp	r0, #0
   14882:	da0e      	bge.n	148a2 <rx_queue_put+0x36>
		LOG_ERR("Could not submit rx_work: %d", err);
   14884:	466c      	mov	r4, sp
   14886:	b088      	sub	sp, #32
   14888:	466a      	mov	r2, sp
   1488a:	4b0a      	ldr	r3, [pc, #40]	; (148b4 <rx_queue_put+0x48>)
   1488c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14890:	2303      	movs	r3, #3
   14892:	f842 3f10 	str.w	r3, [r2, #16]!
   14896:	4808      	ldr	r0, [pc, #32]	; (148b8 <rx_queue_put+0x4c>)
   14898:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1489c:	f010 f94f 	bl	24b3e <z_log_msg_static_create.constprop.0>
   148a0:	46a5      	mov	sp, r4
}
   148a2:	46bd      	mov	sp, r7
   148a4:	bd98      	pop	{r3, r4, r7, pc}
   148a6:	bf00      	nop
   148a8:	200004cc 	.word	0x200004cc
   148ac:	200005cc 	.word	0x200005cc
   148b0:	20001d20 	.word	0x20001d20
   148b4:	00029712 	.word	0x00029712
   148b8:	00028174 	.word	0x00028174

000148bc <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   148bc:	b5b0      	push	{r4, r5, r7, lr}
   148be:	460b      	mov	r3, r1
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   148c0:	8a0d      	ldrh	r5, [r1, #16]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   148c2:	af00      	add	r7, sp, #0
   148c4:	4604      	mov	r4, r0
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   148c6:	4629      	mov	r1, r5
   148c8:	68d8      	ldr	r0, [r3, #12]
   148ca:	f7ff fe3f 	bl	1454c <bt_hex>
   148ce:	b08a      	sub	sp, #40	; 0x28
   148d0:	466a      	mov	r2, sp
   148d2:	4b09      	ldr	r3, [pc, #36]	; (148f8 <handle_event.part.0+0x3c>)
   148d4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   148d8:	f240 4302 	movw	r3, #1026	; 0x402
   148dc:	8493      	strh	r3, [r2, #36]	; 0x24
   148de:	4b07      	ldr	r3, [pc, #28]	; (148fc <handle_event.part.0+0x40>)
   148e0:	e9c2 5007 	strd	r5, r0, [r2, #28]
   148e4:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   148e8:	f842 3f10 	str.w	r3, [r2, #16]!
   148ec:	4804      	ldr	r0, [pc, #16]	; (14900 <handle_event.part.0+0x44>)
   148ee:	f010 f926 	bl	24b3e <z_log_msg_static_create.constprop.0>
}
   148f2:	46bd      	mov	sp, r7
   148f4:	bdb0      	pop	{r4, r5, r7, pc}
   148f6:	bf00      	nop
   148f8:	0002972f 	.word	0x0002972f
   148fc:	01000005 	.word	0x01000005
   14900:	00028174 	.word	0x00028174

00014904 <hci_hardware_error>:
{
   14904:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   14906:	2101      	movs	r1, #1
   14908:	af00      	add	r7, sp, #0
   1490a:	300c      	adds	r0, #12
   1490c:	f012 f983 	bl	26c16 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   14910:	b088      	sub	sp, #32
   14912:	7803      	ldrb	r3, [r0, #0]
   14914:	466a      	mov	r2, sp
   14916:	4906      	ldr	r1, [pc, #24]	; (14930 <hci_hardware_error+0x2c>)
   14918:	4806      	ldr	r0, [pc, #24]	; (14934 <hci_hardware_error+0x30>)
   1491a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1491e:	2303      	movs	r3, #3
   14920:	f842 3f10 	str.w	r3, [r2, #16]!
   14924:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14928:	f010 f909 	bl	24b3e <z_log_msg_static_create.constprop.0>
}
   1492c:	46bd      	mov	sp, r7
   1492e:	bd80      	pop	{r7, pc}
   14930:	00029751 	.word	0x00029751
   14934:	00028174 	.word	0x00028174

00014938 <le_data_len_change>:
{
   14938:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1493a:	68c3      	ldr	r3, [r0, #12]
   1493c:	881c      	ldrh	r4, [r3, #0]
{
   1493e:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   14940:	4620      	mov	r0, r4
   14942:	f002 fe11 	bl	17568 <bt_conn_lookup_handle>
	if (!conn) {
   14946:	b980      	cbnz	r0, 1496a <le_data_len_change+0x32>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   14948:	466d      	mov	r5, sp
   1494a:	b088      	sub	sp, #32
   1494c:	466a      	mov	r2, sp
   1494e:	4b08      	ldr	r3, [pc, #32]	; (14970 <le_data_len_change+0x38>)
   14950:	4808      	ldr	r0, [pc, #32]	; (14974 <le_data_len_change+0x3c>)
   14952:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14956:	2303      	movs	r3, #3
   14958:	f842 3f10 	str.w	r3, [r2, #16]!
   1495c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14960:	f010 f8ed 	bl	24b3e <z_log_msg_static_create.constprop.0>
   14964:	46ad      	mov	sp, r5
}
   14966:	46bd      	mov	sp, r7
   14968:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   1496a:	f010 fc12 	bl	25192 <bt_conn_unref>
   1496e:	e7fa      	b.n	14966 <le_data_len_change+0x2e>
   14970:	00029773 	.word	0x00029773
   14974:	00028174 	.word	0x00028174

00014978 <le_phy_update_complete>:
{
   14978:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1497a:	68c3      	ldr	r3, [r0, #12]
   1497c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
{
   14980:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   14982:	4620      	mov	r0, r4
   14984:	f002 fdf0 	bl	17568 <bt_conn_lookup_handle>
	if (!conn) {
   14988:	b980      	cbnz	r0, 149ac <le_phy_update_complete+0x34>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1498a:	466d      	mov	r5, sp
   1498c:	b088      	sub	sp, #32
   1498e:	466a      	mov	r2, sp
   14990:	4b08      	ldr	r3, [pc, #32]	; (149b4 <le_phy_update_complete+0x3c>)
   14992:	4809      	ldr	r0, [pc, #36]	; (149b8 <le_phy_update_complete+0x40>)
   14994:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14998:	2303      	movs	r3, #3
   1499a:	f842 3f10 	str.w	r3, [r2, #16]!
   1499e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   149a2:	f010 f8cc 	bl	24b3e <z_log_msg_static_create.constprop.0>
   149a6:	46ad      	mov	sp, r5
}
   149a8:	46bd      	mov	sp, r7
   149aa:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   149ac:	f010 fbf1 	bl	25192 <bt_conn_unref>
   149b0:	e7fa      	b.n	149a8 <le_phy_update_complete+0x30>
   149b2:	bf00      	nop
   149b4:	00029773 	.word	0x00029773
   149b8:	00028174 	.word	0x00028174

000149bc <hci_disconn_complete>:
{
   149bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   149c0:	68c5      	ldr	r5, [r0, #12]
	if (evt->status) {
   149c2:	782e      	ldrb	r6, [r5, #0]
{
   149c4:	af00      	add	r7, sp, #0
	if (evt->status) {
   149c6:	b9ae      	cbnz	r6, 149f4 <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   149c8:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   149cc:	4640      	mov	r0, r8
   149ce:	f002 fdcb 	bl	17568 <bt_conn_lookup_handle>
	if (!conn) {
   149d2:	4604      	mov	r4, r0
   149d4:	b988      	cbnz	r0, 149fa <hci_disconn_complete+0x3e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   149d6:	466c      	mov	r4, sp
   149d8:	b088      	sub	sp, #32
   149da:	466a      	mov	r2, sp
   149dc:	4b0b      	ldr	r3, [pc, #44]	; (14a0c <hci_disconn_complete+0x50>)
   149de:	480c      	ldr	r0, [pc, #48]	; (14a10 <hci_disconn_complete+0x54>)
   149e0:	e9c2 3805 	strd	r3, r8, [r2, #20]
   149e4:	2303      	movs	r3, #3
   149e6:	f842 3f10 	str.w	r3, [r2, #16]!
   149ea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   149ee:	f010 f8a6 	bl	24b3e <z_log_msg_static_create.constprop.0>
   149f2:	46a5      	mov	sp, r4
}
   149f4:	46bd      	mov	sp, r7
   149f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
   149fa:	78eb      	ldrb	r3, [r5, #3]
   149fc:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   149fe:	4631      	mov	r1, r6
   14a00:	f002 fdba 	bl	17578 <bt_conn_set_state>
		bt_conn_unref(conn);
   14a04:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   14a06:	f010 fbc4 	bl	25192 <bt_conn_unref>
   14a0a:	e7f3      	b.n	149f4 <hci_disconn_complete+0x38>
   14a0c:	00029797 	.word	0x00029797
   14a10:	00028174 	.word	0x00028174

00014a14 <handle_event>:
{
   14a14:	b5b0      	push	{r4, r5, r7, lr}
   14a16:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   14a1a:	af00      	add	r7, sp, #0
   14a1c:	4604      	mov	r4, r0
	for (i = 0; i < num_handlers; i++) {
   14a1e:	4293      	cmp	r3, r2
   14a20:	d103      	bne.n	14a2a <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
   14a22:	4620      	mov	r0, r4
   14a24:	f7ff ff4a 	bl	148bc <handle_event.part.0>
}
   14a28:	e018      	b.n	14a5c <handle_event+0x48>
		if (handler->event != event) {
   14a2a:	4610      	mov	r0, r2
   14a2c:	f810 5b08 	ldrb.w	r5, [r0], #8
   14a30:	42a5      	cmp	r5, r4
   14a32:	d119      	bne.n	14a68 <handle_event+0x54>
		if (buf->len < handler->min_len) {
   14a34:	8a0b      	ldrh	r3, [r1, #16]
   14a36:	7850      	ldrb	r0, [r2, #1]
   14a38:	4298      	cmp	r0, r3
   14a3a:	d911      	bls.n	14a60 <handle_event+0x4c>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   14a3c:	466d      	mov	r5, sp
   14a3e:	b088      	sub	sp, #32
   14a40:	466a      	mov	r2, sp
   14a42:	490a      	ldr	r1, [pc, #40]	; (14a6c <handle_event+0x58>)
   14a44:	61d4      	str	r4, [r2, #28]
   14a46:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14a4a:	2304      	movs	r3, #4
   14a4c:	f842 3f10 	str.w	r3, [r2, #16]!
   14a50:	4807      	ldr	r0, [pc, #28]	; (14a70 <handle_event+0x5c>)
   14a52:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   14a56:	f010 f872 	bl	24b3e <z_log_msg_static_create.constprop.0>
   14a5a:	46ad      	mov	sp, r5
}
   14a5c:	46bd      	mov	sp, r7
   14a5e:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
   14a60:	6853      	ldr	r3, [r2, #4]
   14a62:	4608      	mov	r0, r1
   14a64:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
   14a66:	e7f9      	b.n	14a5c <handle_event+0x48>
   14a68:	4602      	mov	r2, r0
   14a6a:	e7d8      	b.n	14a1e <handle_event+0xa>
   14a6c:	000297bd 	.word	0x000297bd
   14a70:	00028174 	.word	0x00028174

00014a74 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   14a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   14a76:	4855      	ldr	r0, [pc, #340]	; (14bcc <rx_work_handler+0x158>)
{
   14a78:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   14a7a:	f012 f862 	bl	26b42 <net_buf_slist_get>
	if (!buf) {
   14a7e:	4604      	mov	r4, r0
   14a80:	2800      	cmp	r0, #0
   14a82:	d06a      	beq.n	14b5a <rx_work_handler+0xe6>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   14a84:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   14a86:	2b01      	cmp	r3, #1
   14a88:	d069      	beq.n	14b5e <rx_work_handler+0xea>
   14a8a:	2b03      	cmp	r3, #3
   14a8c:	f040 8099 	bne.w	14bc2 <rx_work_handler+0x14e>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14a90:	8a03      	ldrh	r3, [r0, #16]
   14a92:	2b03      	cmp	r3, #3
   14a94:	d80c      	bhi.n	14ab0 <rx_work_handler+0x3c>
   14a96:	4a4e      	ldr	r2, [pc, #312]	; (14bd0 <rx_work_handler+0x15c>)
   14a98:	494e      	ldr	r1, [pc, #312]	; (14bd4 <rx_work_handler+0x160>)
   14a9a:	484f      	ldr	r0, [pc, #316]	; (14bd8 <rx_work_handler+0x164>)
   14a9c:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   14aa0:	f00f f9c4 	bl	23e2c <assert_print>
   14aa4:	4040      	eors	r0, r0
   14aa6:	f380 8811 	msr	BASEPRI, r0
   14aaa:	f04f 0003 	mov.w	r0, #3
   14aae:	df02      	svc	2
   14ab0:	2104      	movs	r1, #4
   14ab2:	f104 000c 	add.w	r0, r4, #12
   14ab6:	f012 f8ae 	bl	26c16 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   14aba:	8a21      	ldrh	r1, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
   14abc:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   14abe:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   14ac0:	22ff      	movs	r2, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   14ac2:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   14ac6:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
   14ac8:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   14aca:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
   14acc:	d010      	beq.n	14af0 <rx_work_handler+0x7c>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   14ace:	466d      	mov	r5, sp
   14ad0:	b088      	sub	sp, #32
   14ad2:	466a      	mov	r2, sp
   14ad4:	4841      	ldr	r0, [pc, #260]	; (14bdc <rx_work_handler+0x168>)
   14ad6:	61d3      	str	r3, [r2, #28]
   14ad8:	2304      	movs	r3, #4
   14ada:	e9c2 0105 	strd	r0, r1, [r2, #20]
   14ade:	f842 3f10 	str.w	r3, [r2, #16]!
   14ae2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   14ae6:	483e      	ldr	r0, [pc, #248]	; (14be0 <rx_work_handler+0x16c>)
   14ae8:	f010 f829 	bl	24b3e <z_log_msg_static_create.constprop.0>
   14aec:	46ad      	mov	sp, r5
   14aee:	e064      	b.n	14bba <rx_work_handler+0x146>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   14af0:	f002 fd3a 	bl	17568 <bt_conn_lookup_handle>
	if (!conn) {
   14af4:	4605      	mov	r5, r0
   14af6:	b960      	cbnz	r0, 14b12 <rx_work_handler+0x9e>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   14af8:	466d      	mov	r5, sp
   14afa:	b088      	sub	sp, #32
   14afc:	8b63      	ldrh	r3, [r4, #26]
   14afe:	466a      	mov	r2, sp
   14b00:	4938      	ldr	r1, [pc, #224]	; (14be4 <rx_work_handler+0x170>)
	switch (bt_buf_get_type(buf)) {
   14b02:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   14b06:	2303      	movs	r3, #3
   14b08:	f842 3f10 	str.w	r3, [r2, #16]!
   14b0c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14b10:	e7e9      	b.n	14ae6 <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   14b12:	f002 fe33 	bl	1777c <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   14b16:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   14b18:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   14b1a:	4621      	mov	r1, r4
   14b1c:	4628      	mov	r0, r5
   14b1e:	f002 fbcd 	bl	172bc <bt_conn_recv>
	bt_conn_unref(conn);
   14b22:	4628      	mov	r0, r5
   14b24:	f010 fb35 	bl	25192 <bt_conn_unref>
	return list->head;
   14b28:	4b2f      	ldr	r3, [pc, #188]	; (14be8 <rx_work_handler+0x174>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   14b2a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   14b2e:	b1a3      	cbz	r3, 14b5a <rx_work_handler+0xe6>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   14b30:	492e      	ldr	r1, [pc, #184]	; (14bec <rx_work_handler+0x178>)
   14b32:	482f      	ldr	r0, [pc, #188]	; (14bf0 <rx_work_handler+0x17c>)
   14b34:	f012 fdec 	bl	27710 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   14b38:	2800      	cmp	r0, #0
   14b3a:	da0e      	bge.n	14b5a <rx_work_handler+0xe6>
			LOG_ERR("Could not submit rx_work: %d", err);
   14b3c:	466c      	mov	r4, sp
   14b3e:	b088      	sub	sp, #32
   14b40:	466a      	mov	r2, sp
   14b42:	4b2c      	ldr	r3, [pc, #176]	; (14bf4 <rx_work_handler+0x180>)
   14b44:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14b48:	2303      	movs	r3, #3
   14b4a:	f842 3f10 	str.w	r3, [r2, #16]!
   14b4e:	4824      	ldr	r0, [pc, #144]	; (14be0 <rx_work_handler+0x16c>)
   14b50:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14b54:	f00f fff3 	bl	24b3e <z_log_msg_static_create.constprop.0>
   14b58:	46a5      	mov	sp, r4
		}
	}
}
   14b5a:	46bd      	mov	sp, r7
   14b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14b5e:	8a03      	ldrh	r3, [r0, #16]
   14b60:	2b01      	cmp	r3, #1
   14b62:	d80c      	bhi.n	14b7e <rx_work_handler+0x10a>
   14b64:	4a1a      	ldr	r2, [pc, #104]	; (14bd0 <rx_work_handler+0x15c>)
   14b66:	491b      	ldr	r1, [pc, #108]	; (14bd4 <rx_work_handler+0x160>)
   14b68:	481b      	ldr	r0, [pc, #108]	; (14bd8 <rx_work_handler+0x164>)
   14b6a:	f640 2347 	movw	r3, #2631	; 0xa47
   14b6e:	f00f f95d 	bl	23e2c <assert_print>
   14b72:	4040      	eors	r0, r0
   14b74:	f380 8811 	msr	BASEPRI, r0
   14b78:	f04f 0003 	mov.w	r0, #3
   14b7c:	df02      	svc	2
   14b7e:	2102      	movs	r1, #2
   14b80:	f104 000c 	add.w	r0, r4, #12
   14b84:	f012 f847 	bl	26c16 <net_buf_simple_pull_mem>
   14b88:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   14b8a:	7800      	ldrb	r0, [r0, #0]
   14b8c:	f00f ff9d 	bl	24aca <bt_hci_evt_get_flags>
   14b90:	0783      	lsls	r3, r0, #30
   14b92:	d40c      	bmi.n	14bae <rx_work_handler+0x13a>
   14b94:	4a0e      	ldr	r2, [pc, #56]	; (14bd0 <rx_work_handler+0x15c>)
   14b96:	4918      	ldr	r1, [pc, #96]	; (14bf8 <rx_work_handler+0x184>)
   14b98:	480f      	ldr	r0, [pc, #60]	; (14bd8 <rx_work_handler+0x164>)
   14b9a:	f640 234b 	movw	r3, #2635	; 0xa4b
   14b9e:	f00f f945 	bl	23e2c <assert_print>
   14ba2:	4040      	eors	r0, r0
   14ba4:	f380 8811 	msr	BASEPRI, r0
   14ba8:	f04f 0003 	mov.w	r0, #3
   14bac:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   14bae:	4a13      	ldr	r2, [pc, #76]	; (14bfc <rx_work_handler+0x188>)
   14bb0:	7828      	ldrb	r0, [r5, #0]
   14bb2:	2306      	movs	r3, #6
   14bb4:	4621      	mov	r1, r4
   14bb6:	f7ff ff2d 	bl	14a14 <handle_event>
		net_buf_unref(buf);
   14bba:	4620      	mov	r0, r4
   14bbc:	f007 f904 	bl	1bdc8 <net_buf_unref>
		break;
   14bc0:	e7b2      	b.n	14b28 <rx_work_handler+0xb4>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   14bc2:	466d      	mov	r5, sp
   14bc4:	b088      	sub	sp, #32
   14bc6:	466a      	mov	r2, sp
   14bc8:	490d      	ldr	r1, [pc, #52]	; (14c00 <rx_work_handler+0x18c>)
   14bca:	e79a      	b.n	14b02 <rx_work_handler+0x8e>
   14bcc:	200004cc 	.word	0x200004cc
   14bd0:	000297df 	.word	0x000297df
   14bd4:	00029813 	.word	0x00029813
   14bd8:	0002982c 	.word	0x0002982c
   14bdc:	00029849 	.word	0x00029849
   14be0:	00028174 	.word	0x00028174
   14be4:	0002986d 	.word	0x0002986d
   14be8:	20000388 	.word	0x20000388
   14bec:	200005cc 	.word	0x200005cc
   14bf0:	20001d20 	.word	0x20001d20
   14bf4:	00029712 	.word	0x00029712
   14bf8:	0002988f 	.word	0x0002988f
   14bfc:	0002853c 	.word	0x0002853c
   14c00:	000298bd 	.word	0x000298bd

00014c04 <hci_le_meta_event>:
{
   14c04:	b510      	push	{r4, lr}
   14c06:	2101      	movs	r1, #1
   14c08:	4604      	mov	r4, r0
   14c0a:	300c      	adds	r0, #12
   14c0c:	f012 f803 	bl	26c16 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   14c10:	4621      	mov	r1, r4
   14c12:	4a03      	ldr	r2, [pc, #12]	; (14c20 <hci_le_meta_event+0x1c>)
   14c14:	7800      	ldrb	r0, [r0, #0]
}
   14c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   14c1a:	230a      	movs	r3, #10
   14c1c:	f7ff befa 	b.w	14a14 <handle_event>
   14c20:	0002856c 	.word	0x0002856c

00014c24 <le_remote_feat_complete>:
{
   14c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   14c26:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14c28:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   14c2c:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   14c2e:	4630      	mov	r0, r6
   14c30:	f002 fc9a 	bl	17568 <bt_conn_lookup_handle>
	if (!conn) {
   14c34:	4604      	mov	r4, r0
   14c36:	b980      	cbnz	r0, 14c5a <le_remote_feat_complete+0x36>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   14c38:	466c      	mov	r4, sp
   14c3a:	b088      	sub	sp, #32
   14c3c:	466a      	mov	r2, sp
   14c3e:	4b0f      	ldr	r3, [pc, #60]	; (14c7c <le_remote_feat_complete+0x58>)
   14c40:	480f      	ldr	r0, [pc, #60]	; (14c80 <le_remote_feat_complete+0x5c>)
   14c42:	e9c2 3605 	strd	r3, r6, [r2, #20]
   14c46:	2303      	movs	r3, #3
   14c48:	f842 3f10 	str.w	r3, [r2, #16]!
   14c4c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14c50:	f00f ff75 	bl	24b3e <z_log_msg_static_create.constprop.0>
   14c54:	46a5      	mov	sp, r4
}
   14c56:	46bd      	mov	sp, r7
   14c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
   14c5a:	782b      	ldrb	r3, [r5, #0]
   14c5c:	b923      	cbnz	r3, 14c68 <le_remote_feat_complete+0x44>
		memcpy(conn->le.features, evt->features,
   14c5e:	2208      	movs	r2, #8
   14c60:	1ce9      	adds	r1, r5, #3
   14c62:	30ad      	adds	r0, #173	; 0xad
   14c64:	f00f fe73 	bl	2494e <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14c68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   14c6c:	1d20      	adds	r0, r4, #4
   14c6e:	f00f ff57 	bl	24b20 <atomic_or>
	bt_conn_unref(conn);
   14c72:	4620      	mov	r0, r4
   14c74:	f010 fa8d 	bl	25192 <bt_conn_unref>
   14c78:	e7ed      	b.n	14c56 <le_remote_feat_complete+0x32>
   14c7a:	bf00      	nop
   14c7c:	00029773 	.word	0x00029773
   14c80:	00028174 	.word	0x00028174

00014c84 <hci_cmd_done>:
{
   14c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14c88:	4606      	mov	r6, r0
   14c8a:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   14c8c:	7a90      	ldrb	r0, [r2, #10]
   14c8e:	4d43      	ldr	r5, [pc, #268]	; (14d9c <hci_cmd_done+0x118>)
{
   14c90:	4688      	mov	r8, r1
   14c92:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   14c94:	f006 ffd6 	bl	1bc44 <net_buf_pool_get>
   14c98:	4285      	cmp	r5, r0
   14c9a:	d018      	beq.n	14cce <hci_cmd_done+0x4a>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   14c9c:	7aa4      	ldrb	r4, [r4, #10]
   14c9e:	4620      	mov	r0, r4
   14ca0:	f006 ffd0 	bl	1bc44 <net_buf_pool_get>
   14ca4:	46e8      	mov	r8, sp
   14ca6:	b08a      	sub	sp, #40	; 0x28
   14ca8:	466a      	mov	r2, sp
   14caa:	4b3d      	ldr	r3, [pc, #244]	; (14da0 <hci_cmd_done+0x11c>)
   14cac:	6255      	str	r5, [r2, #36]	; 0x24
   14cae:	e9c2 3605 	strd	r3, r6, [r2, #20]
   14cb2:	2306      	movs	r3, #6
   14cb4:	e9c2 4007 	strd	r4, r0, [r2, #28]
   14cb8:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   14cbc:	f842 3f10 	str.w	r3, [r2, #16]!
   14cc0:	4838      	ldr	r0, [pc, #224]	; (14da4 <hci_cmd_done+0x120>)
   14cc2:	f00f ff3c 	bl	24b3e <z_log_msg_static_create.constprop.0>
   14cc6:	46c5      	mov	sp, r8
}
   14cc8:	46bd      	mov	sp, r7
   14cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   14cce:	4620      	mov	r0, r4
   14cd0:	f006 ffc0 	bl	1bc54 <net_buf_id>
   14cd4:	4d34      	ldr	r5, [pc, #208]	; (14da8 <hci_cmd_done+0x124>)
   14cd6:	f04f 090c 	mov.w	r9, #12
   14cda:	fb09 5000 	mla	r0, r9, r0, r5
   14cde:	8843      	ldrh	r3, [r0, #2]
   14ce0:	42b3      	cmp	r3, r6
   14ce2:	d016      	beq.n	14d12 <hci_cmd_done+0x8e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   14ce4:	4620      	mov	r0, r4
   14ce6:	f006 ffb5 	bl	1bc54 <net_buf_id>
   14cea:	fb09 5000 	mla	r0, r9, r0, r5
   14cee:	466c      	mov	r4, sp
   14cf0:	b088      	sub	sp, #32
   14cf2:	8843      	ldrh	r3, [r0, #2]
   14cf4:	466a      	mov	r2, sp
   14cf6:	492d      	ldr	r1, [pc, #180]	; (14dac <hci_cmd_done+0x128>)
   14cf8:	61d3      	str	r3, [r2, #28]
   14cfa:	2304      	movs	r3, #4
   14cfc:	e9c2 1605 	strd	r1, r6, [r2, #20]
   14d00:	4828      	ldr	r0, [pc, #160]	; (14da4 <hci_cmd_done+0x120>)
   14d02:	f842 3f10 	str.w	r3, [r2, #16]!
   14d06:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   14d0a:	f00f ff18 	bl	24b3e <z_log_msg_static_create.constprop.0>
   14d0e:	46a5      	mov	sp, r4
		return;
   14d10:	e7da      	b.n	14cc8 <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
   14d12:	4e27      	ldr	r6, [pc, #156]	; (14db0 <hci_cmd_done+0x12c>)
   14d14:	f8d6 0140 	ldr.w	r0, [r6, #320]	; 0x140
   14d18:	b120      	cbz	r0, 14d24 <hci_cmd_done+0xa0>
		net_buf_unref(bt_dev.sent_cmd);
   14d1a:	f007 f855 	bl	1bdc8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   14d1e:	2300      	movs	r3, #0
   14d20:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
	if (cmd(buf)->state && !status) {
   14d24:	4620      	mov	r0, r4
   14d26:	f006 ff95 	bl	1bc54 <net_buf_id>
   14d2a:	260c      	movs	r6, #12
   14d2c:	fb06 5000 	mla	r0, r6, r0, r5
   14d30:	6843      	ldr	r3, [r0, #4]
   14d32:	b1ab      	cbz	r3, 14d60 <hci_cmd_done+0xdc>
   14d34:	f1b8 0f00 	cmp.w	r8, #0
   14d38:	d112      	bne.n	14d60 <hci_cmd_done+0xdc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   14d3a:	4620      	mov	r0, r4
   14d3c:	f006 ff8a 	bl	1bc54 <net_buf_id>
   14d40:	fb06 5000 	mla	r0, r6, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   14d44:	2101      	movs	r1, #1
   14d46:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   14d48:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   14d4c:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   14d4e:	f003 061f 	and.w	r6, r3, #31
   14d52:	40b1      	lsls	r1, r6
	if (val) {
   14d54:	095b      	lsrs	r3, r3, #5
   14d56:	b1da      	cbz	r2, 14d90 <hci_cmd_done+0x10c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14d58:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   14d5c:	f00f fee0 	bl	24b20 <atomic_or>
	if (cmd(buf)->sync) {
   14d60:	4620      	mov	r0, r4
   14d62:	f006 ff77 	bl	1bc54 <net_buf_id>
   14d66:	260c      	movs	r6, #12
   14d68:	fb06 5000 	mla	r0, r6, r0, r5
   14d6c:	6883      	ldr	r3, [r0, #8]
   14d6e:	2b00      	cmp	r3, #0
   14d70:	d0aa      	beq.n	14cc8 <hci_cmd_done+0x44>
		cmd(buf)->status = status;
   14d72:	4620      	mov	r0, r4
   14d74:	f006 ff6e 	bl	1bc54 <net_buf_id>
   14d78:	4370      	muls	r0, r6
   14d7a:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   14d7e:	4620      	mov	r0, r4
   14d80:	f006 ff68 	bl	1bc54 <net_buf_id>
   14d84:	fb06 5500 	mla	r5, r6, r0, r5
   14d88:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   14d8a:	f00a fcdf 	bl	1f74c <z_impl_k_sem_give>
}
   14d8e:	e79b      	b.n	14cc8 <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14d90:	43c9      	mvns	r1, r1
   14d92:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   14d96:	f00f fed5 	bl	24b44 <atomic_and.isra.0>
   14d9a:	e7e1      	b.n	14d60 <hci_cmd_done+0xdc>
   14d9c:	20000a64 	.word	0x20000a64
   14da0:	000298d1 	.word	0x000298d1
   14da4:	00028174 	.word	0x00028174
   14da8:	20003168 	.word	0x20003168
   14dac:	00029906 	.word	0x00029906
   14db0:	20000388 	.word	0x20000388

00014db4 <hci_cmd_status>:
{
   14db4:	b538      	push	{r3, r4, r5, lr}
   14db6:	2104      	movs	r1, #4
   14db8:	4604      	mov	r4, r0
   14dba:	300c      	adds	r0, #12
   14dbc:	f011 ff2b 	bl	26c16 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   14dc0:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   14dc2:	7801      	ldrb	r1, [r0, #0]
   14dc4:	8840      	ldrh	r0, [r0, #2]
   14dc6:	4622      	mov	r2, r4
   14dc8:	f7ff ff5c 	bl	14c84 <hci_cmd_done>
	if (ncmd) {
   14dcc:	b125      	cbz	r5, 14dd8 <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
   14dce:	4803      	ldr	r0, [pc, #12]	; (14ddc <hci_cmd_status+0x28>)
}
   14dd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14dd4:	f00a bcba 	b.w	1f74c <z_impl_k_sem_give>
   14dd8:	bd38      	pop	{r3, r4, r5, pc}
   14dda:	bf00      	nop
   14ddc:	200004b0 	.word	0x200004b0

00014de0 <hci_cmd_complete>:
{
   14de0:	b538      	push	{r3, r4, r5, lr}
   14de2:	2103      	movs	r1, #3
   14de4:	4604      	mov	r4, r0
   14de6:	300c      	adds	r0, #12
   14de8:	f011 ff15 	bl	26c16 <net_buf_simple_pull_mem>
	status = buf->data[0];
   14dec:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   14dee:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   14df0:	7819      	ldrb	r1, [r3, #0]
   14df2:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   14df6:	4622      	mov	r2, r4
   14df8:	f7ff ff44 	bl	14c84 <hci_cmd_done>
	if (ncmd) {
   14dfc:	b125      	cbz	r5, 14e08 <hci_cmd_complete+0x28>
   14dfe:	4803      	ldr	r0, [pc, #12]	; (14e0c <hci_cmd_complete+0x2c>)
}
   14e00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   14e04:	f00a bca2 	b.w	1f74c <z_impl_k_sem_give>
   14e08:	bd38      	pop	{r3, r4, r5, pc}
   14e0a:	bf00      	nop
   14e0c:	200004b0 	.word	0x200004b0

00014e10 <hci_num_completed_packets>:
{
   14e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e14:	b087      	sub	sp, #28
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   14e16:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   14e1a:	8a01      	ldrh	r1, [r0, #16]
   14e1c:	f898 4000 	ldrb.w	r4, [r8]
   14e20:	2301      	movs	r3, #1
   14e22:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   14e26:	428b      	cmp	r3, r1
{
   14e28:	af00      	add	r7, sp, #0
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   14e2a:	f240 808c 	bls.w	14f46 <hci_num_completed_packets+0x136>
		LOG_ERR("evt num_handles (=%u) too large (%u > %u)",
   14e2e:	466d      	mov	r5, sp
   14e30:	b08a      	sub	sp, #40	; 0x28
   14e32:	466a      	mov	r2, sp
   14e34:	4846      	ldr	r0, [pc, #280]	; (14f50 <hci_num_completed_packets+0x140>)
   14e36:	e9c2 3107 	strd	r3, r1, [r2, #28]
   14e3a:	2305      	movs	r3, #5
   14e3c:	e9c2 0405 	strd	r0, r4, [r2, #20]
   14e40:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   14e44:	f842 3f10 	str.w	r3, [r2, #16]!
   14e48:	4842      	ldr	r0, [pc, #264]	; (14f54 <hci_num_completed_packets+0x144>)
   14e4a:	f00f fe78 	bl	24b3e <z_log_msg_static_create.constprop.0>
   14e4e:	46ad      	mov	sp, r5
}
   14e50:	371c      	adds	r7, #28
   14e52:	46bd      	mov	sp, r7
   14e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("No connection for handle %u", handle);
   14e58:	466c      	mov	r4, sp
   14e5a:	b088      	sub	sp, #32
   14e5c:	466a      	mov	r2, sp
   14e5e:	4b3e      	ldr	r3, [pc, #248]	; (14f58 <hci_num_completed_packets+0x148>)
   14e60:	483c      	ldr	r0, [pc, #240]	; (14f54 <hci_num_completed_packets+0x144>)
   14e62:	e9c2 3b05 	strd	r3, fp, [r2, #20]
   14e66:	2303      	movs	r3, #3
   14e68:	f842 3f10 	str.w	r3, [r2, #16]!
   14e6c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14e70:	f00f fe65 	bl	24b3e <z_log_msg_static_create.constprop.0>
   14e74:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
   14e76:	3501      	adds	r5, #1
   14e78:	f898 3000 	ldrb.w	r3, [r8]
   14e7c:	429d      	cmp	r5, r3
   14e7e:	dae7      	bge.n	14e50 <hci_num_completed_packets+0x40>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   14e80:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   14e84:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   14e88:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   14e8c:	4658      	mov	r0, fp
   14e8e:	f002 fb6b 	bl	17568 <bt_conn_lookup_handle>
		if (!conn) {
   14e92:	4604      	mov	r4, r0
   14e94:	2800      	cmp	r0, #0
   14e96:	d0df      	beq.n	14e58 <hci_num_completed_packets+0x48>
			k_work_submit(&conn->tx_complete_work);
   14e98:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   14e9c:	b346      	cbz	r6, 14ef0 <hci_num_completed_packets+0xe0>
	__asm__ volatile(
   14e9e:	f04f 0340 	mov.w	r3, #64	; 0x40
   14ea2:	f3ef 8211 	mrs	r2, BASEPRI
   14ea6:	f383 8812 	msr	BASEPRI_MAX, r3
   14eaa:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   14eae:	69e3      	ldr	r3, [r4, #28]
   14eb0:	b16b      	cbz	r3, 14ece <hci_num_completed_packets+0xbe>
				conn->pending_no_cb--;
   14eb2:	3b01      	subs	r3, #1
   14eb4:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   14eb6:	f382 8811 	msr	BASEPRI, r2
   14eba:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   14ebe:	4620      	mov	r0, r4
   14ec0:	f002 f9be 	bl	17240 <bt_conn_get_pkts>
   14ec4:	3e01      	subs	r6, #1
   14ec6:	f00a fc41 	bl	1f74c <z_impl_k_sem_give>
   14eca:	b2b6      	uxth	r6, r6
   14ecc:	e7e6      	b.n	14e9c <hci_num_completed_packets+0x8c>
   14ece:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   14ed0:	b993      	cbnz	r3, 14ef8 <hci_num_completed_packets+0xe8>
   14ed2:	f382 8811 	msr	BASEPRI, r2
   14ed6:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   14eda:	2302      	movs	r3, #2
   14edc:	481d      	ldr	r0, [pc, #116]	; (14f54 <hci_num_completed_packets+0x144>)
   14ede:	f8c7 a014 	str.w	sl, [r7, #20]
   14ee2:	f107 0210 	add.w	r2, r7, #16
   14ee6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14eea:	613b      	str	r3, [r7, #16]
   14eec:	f00f fe27 	bl	24b3e <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   14ef0:	4620      	mov	r0, r4
   14ef2:	f010 f94e 	bl	25192 <bt_conn_unref>
   14ef6:	e7be      	b.n	14e76 <hci_num_completed_packets+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14ef8:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   14efa:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   14efc:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14efe:	428b      	cmp	r3, r1
	list->tail = node;
   14f00:	bf08      	it	eq
   14f02:	61a0      	streq	r0, [r4, #24]
   14f04:	f382 8811 	msr	BASEPRI, r2
   14f08:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   14f0c:	f04f 0240 	mov.w	r2, #64	; 0x40
   14f10:	f3ef 8111 	mrs	r1, BASEPRI
   14f14:	f382 8812 	msr	BASEPRI_MAX, r2
   14f18:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   14f1c:	68da      	ldr	r2, [r3, #12]
   14f1e:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   14f20:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
   14f24:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
   14f28:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   14f2a:	b94a      	cbnz	r2, 14f40 <hci_num_completed_packets+0x130>
	list->head = node;
   14f2c:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   14f30:	f381 8811 	msr	BASEPRI, r1
   14f34:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   14f38:	4658      	mov	r0, fp
   14f3a:	f00a fd83 	bl	1fa44 <k_work_submit>
   14f3e:	e7be      	b.n	14ebe <hci_num_completed_packets+0xae>
	parent->next = child;
   14f40:	6013      	str	r3, [r2, #0]
	list->tail = node;
   14f42:	6263      	str	r3, [r4, #36]	; 0x24
}
   14f44:	e7f4      	b.n	14f30 <hci_num_completed_packets+0x120>
	for (i = 0; i < evt->num_handles; i++) {
   14f46:	2500      	movs	r5, #0
				LOG_ERR("packets count mismatch");
   14f48:	f8df a010 	ldr.w	sl, [pc, #16]	; 14f5c <hci_num_completed_packets+0x14c>
			tx->pending_no_cb = 0U;
   14f4c:	46a9      	mov	r9, r5
   14f4e:	e793      	b.n	14e78 <hci_num_completed_packets+0x68>
   14f50:	00029939 	.word	0x00029939
   14f54:	00028174 	.word	0x00028174
   14f58:	00029963 	.word	0x00029963
   14f5c:	0002997f 	.word	0x0002997f

00014f60 <le_conn_update_complete>:
{
   14f60:	b5f0      	push	{r4, r5, r6, r7, lr}
   14f62:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   14f64:	68c5      	ldr	r5, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   14f66:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   14f6a:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   14f6c:	4630      	mov	r0, r6
   14f6e:	f002 fafb 	bl	17568 <bt_conn_lookup_handle>
	if (!conn) {
   14f72:	4604      	mov	r4, r0
   14f74:	b988      	cbnz	r0, 14f9a <le_conn_update_complete+0x3a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   14f76:	466c      	mov	r4, sp
   14f78:	b088      	sub	sp, #32
   14f7a:	466a      	mov	r2, sp
   14f7c:	4b2d      	ldr	r3, [pc, #180]	; (15034 <le_conn_update_complete+0xd4>)
   14f7e:	482e      	ldr	r0, [pc, #184]	; (15038 <le_conn_update_complete+0xd8>)
   14f80:	e9c2 3605 	strd	r3, r6, [r2, #20]
   14f84:	2303      	movs	r3, #3
   14f86:	f842 3f10 	str.w	r3, [r2, #16]!
   14f8a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14f8e:	f00f fdd6 	bl	24b3e <z_log_msg_static_create.constprop.0>
   14f92:	46a5      	mov	sp, r4
}
   14f94:	370c      	adds	r7, #12
   14f96:	46bd      	mov	sp, r7
   14f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   14f9a:	782b      	ldrb	r3, [r5, #0]
   14f9c:	2b1a      	cmp	r3, #26
	    !atomic_test_and_set_bit(conn->flags,
   14f9e:	f100 0604 	add.w	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   14fa2:	d117      	bne.n	14fd4 <le_conn_update_complete+0x74>
   14fa4:	78c3      	ldrb	r3, [r0, #3]
   14fa6:	2b01      	cmp	r3, #1
   14fa8:	d128      	bne.n	14ffc <le_conn_update_complete+0x9c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   14faa:	f44f 6180 	mov.w	r1, #1024	; 0x400
   14fae:	4630      	mov	r0, r6
   14fb0:	f00f fdb6 	bl	24b20 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   14fb4:	0542      	lsls	r2, r0, #21
   14fb6:	d40d      	bmi.n	14fd4 <le_conn_update_complete+0x74>
		param.interval_min = conn->le.interval_min;
   14fb8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   14fbc:	603b      	str	r3, [r7, #0]
		bt_l2cap_update_conn_param(conn, &param);
   14fbe:	4639      	mov	r1, r7
		param.latency = conn->le.pending_latency;
   14fc0:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   14fc4:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
   14fc6:	4620      	mov	r0, r4
   14fc8:	f003 f828 	bl	1801c <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   14fcc:	4620      	mov	r0, r4
   14fce:	f010 f8e0 	bl	25192 <bt_conn_unref>
   14fd2:	e7df      	b.n	14f94 <le_conn_update_complete+0x34>
		if (!evt->status) {
   14fd4:	782b      	ldrb	r3, [r5, #0]
   14fd6:	b98b      	cbnz	r3, 14ffc <le_conn_update_complete+0x9c>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   14fd8:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   14fdc:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   14fe0:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   14fe4:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   14fe8:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   14fec:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14ff0:	f46f 7180 	mvn.w	r1, #256	; 0x100
   14ff4:	4630      	mov	r0, r6
   14ff6:	f00f fda5 	bl	24b44 <atomic_and.isra.0>
}
   14ffa:	e017      	b.n	1502c <le_conn_update_complete+0xcc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14ffc:	f3bf 8f5b 	dmb	ish
   15000:	6863      	ldr	r3, [r4, #4]
   15002:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(conn->flags,
   15006:	05db      	lsls	r3, r3, #23
   15008:	d5f2      	bpl.n	14ff0 <le_conn_update_complete+0x90>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   1500a:	782b      	ldrb	r3, [r5, #0]
   1500c:	2b20      	cmp	r3, #32
   1500e:	d1ef      	bne.n	14ff0 <le_conn_update_complete+0x90>
			   conn->le.conn_param_retry_countdown) {
   15010:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   15014:	2b00      	cmp	r3, #0
   15016:	d0eb      	beq.n	14ff0 <le_conn_update_complete+0x90>
			conn->le.conn_param_retry_countdown--;
   15018:	3b01      	subs	r3, #1
   1501a:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   1501e:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   15022:	2300      	movs	r3, #0
   15024:	f104 0058 	add.w	r0, r4, #88	; 0x58
   15028:	f00a fd74 	bl	1fb14 <k_work_schedule>
		notify_le_param_updated(conn);
   1502c:	4620      	mov	r0, r4
   1502e:	f002 fbc7 	bl	177c0 <notify_le_param_updated>
   15032:	e7cb      	b.n	14fcc <le_conn_update_complete+0x6c>
   15034:	00029773 	.word	0x00029773
   15038:	00028174 	.word	0x00028174

0001503c <bt_hci_cmd_state_set_init>:
{
   1503c:	b510      	push	{r4, lr}
	state->bit = bit;
   1503e:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   15042:	f89d 3008 	ldrb.w	r3, [sp, #8]
   15046:	720b      	strb	r3, [r1, #8]
{
   15048:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   1504a:	f006 fe03 	bl	1bc54 <net_buf_id>
   1504e:	4b03      	ldr	r3, [pc, #12]	; (1505c <bt_hci_cmd_state_set_init+0x20>)
   15050:	220c      	movs	r2, #12
   15052:	fb02 3300 	mla	r3, r2, r0, r3
   15056:	605c      	str	r4, [r3, #4]
}
   15058:	bd10      	pop	{r4, pc}
   1505a:	bf00      	nop
   1505c:	20003168 	.word	0x20003168

00015060 <bt_hci_cmd_create>:
{
   15060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   15064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15068:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1506c:	4606      	mov	r6, r0
   1506e:	4817      	ldr	r0, [pc, #92]	; (150cc <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   15070:	4d17      	ldr	r5, [pc, #92]	; (150d0 <bt_hci_cmd_create+0x70>)
{
   15072:	460f      	mov	r7, r1
   15074:	f011 fd48 	bl	26b08 <net_buf_alloc_fixed>
   15078:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   1507a:	f100 0a0c 	add.w	sl, r0, #12
   1507e:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   15080:	f04f 0800 	mov.w	r8, #0
   15084:	4650      	mov	r0, sl
   15086:	f011 fd9b 	bl	26bc0 <net_buf_simple_reserve>
   1508a:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
   1508e:	4620      	mov	r0, r4
   15090:	f006 fde0 	bl	1bc54 <net_buf_id>
   15094:	f04f 090c 	mov.w	r9, #12
   15098:	fb09 5000 	mla	r0, r9, r0, r5
   1509c:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   1509e:	4620      	mov	r0, r4
   150a0:	f006 fdd8 	bl	1bc54 <net_buf_id>
   150a4:	fb09 5000 	mla	r0, r9, r0, r5
   150a8:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   150ac:	4620      	mov	r0, r4
   150ae:	f006 fdd1 	bl	1bc54 <net_buf_id>
   150b2:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   150b6:	2103      	movs	r1, #3
   150b8:	4650      	mov	r0, sl
   150ba:	f8c5 8004 	str.w	r8, [r5, #4]
   150be:	f011 fd83 	bl	26bc8 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   150c2:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   150c4:	7087      	strb	r7, [r0, #2]
}
   150c6:	4620      	mov	r0, r4
   150c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   150cc:	20000a64 	.word	0x20000a64
   150d0:	20003168 	.word	0x20003168

000150d4 <bt_hci_cmd_send_sync>:
{
   150d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   150d8:	b087      	sub	sp, #28
   150da:	4606      	mov	r6, r0
   150dc:	af00      	add	r7, sp, #0
   150de:	4615      	mov	r5, r2
	if (!buf) {
   150e0:	460c      	mov	r4, r1
   150e2:	b921      	cbnz	r1, 150ee <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
   150e4:	f7ff ffbc 	bl	15060 <bt_hci_cmd_create>
		if (!buf) {
   150e8:	4604      	mov	r4, r0
   150ea:	2800      	cmp	r0, #0
   150ec:	d05f      	beq.n	151ae <bt_hci_cmd_send_sync+0xda>
	return z_impl_k_sem_init(sem, initial_count, limit);
   150ee:	2201      	movs	r2, #1
   150f0:	2100      	movs	r1, #0
   150f2:	4638      	mov	r0, r7
   150f4:	f012 fa5c 	bl	275b0 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   150f8:	4620      	mov	r0, r4
   150fa:	f006 fdab 	bl	1bc54 <net_buf_id>
   150fe:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 151b4 <bt_hci_cmd_send_sync+0xe0>
   15102:	230c      	movs	r3, #12
   15104:	fb03 9000 	mla	r0, r3, r0, r9
   15108:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   1510a:	4620      	mov	r0, r4
   1510c:	f011 fd32 	bl	26b74 <net_buf_ref>
   15110:	4601      	mov	r1, r0
   15112:	4829      	ldr	r0, [pc, #164]	; (151b8 <bt_hci_cmd_send_sync+0xe4>)
   15114:	f011 fd2c 	bl	26b70 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   15118:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1511c:	2300      	movs	r3, #0
   1511e:	4638      	mov	r0, r7
   15120:	f00a fb3a 	bl	1f798 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
   15124:	4680      	mov	r8, r0
   15126:	b188      	cbz	r0, 1514c <bt_hci_cmd_send_sync+0x78>
   15128:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   1512c:	4a23      	ldr	r2, [pc, #140]	; (151bc <bt_hci_cmd_send_sync+0xe8>)
   1512e:	4924      	ldr	r1, [pc, #144]	; (151c0 <bt_hci_cmd_send_sync+0xec>)
   15130:	4824      	ldr	r0, [pc, #144]	; (151c4 <bt_hci_cmd_send_sync+0xf0>)
   15132:	f00e fe7b 	bl	23e2c <assert_print>
   15136:	4824      	ldr	r0, [pc, #144]	; (151c8 <bt_hci_cmd_send_sync+0xf4>)
   15138:	4642      	mov	r2, r8
   1513a:	4631      	mov	r1, r6
   1513c:	f00e fe76 	bl	23e2c <assert_print>
   15140:	4040      	eors	r0, r0
   15142:	f380 8811 	msr	BASEPRI, r0
   15146:	f04f 0003 	mov.w	r0, #3
   1514a:	df02      	svc	2
	status = cmd(buf)->status;
   1514c:	4620      	mov	r0, r4
   1514e:	f006 fd81 	bl	1bc54 <net_buf_id>
   15152:	230c      	movs	r3, #12
   15154:	4358      	muls	r0, r3
   15156:	f819 8000 	ldrb.w	r8, [r9, r0]
	if (status) {
   1515a:	f1b8 0f00 	cmp.w	r8, #0
   1515e:	d01e      	beq.n	1519e <bt_hci_cmd_send_sync+0xca>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   15160:	466d      	mov	r5, sp
   15162:	b088      	sub	sp, #32
   15164:	466a      	mov	r2, sp
   15166:	4b19      	ldr	r3, [pc, #100]	; (151cc <bt_hci_cmd_send_sync+0xf8>)
   15168:	f8c2 801c 	str.w	r8, [r2, #28]
   1516c:	e9c2 3605 	strd	r3, r6, [r2, #20]
   15170:	2304      	movs	r3, #4
   15172:	f842 3f10 	str.w	r3, [r2, #16]!
   15176:	4816      	ldr	r0, [pc, #88]	; (151d0 <bt_hci_cmd_send_sync+0xfc>)
   15178:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1517c:	f00f fcdf 	bl	24b3e <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   15180:	4620      	mov	r0, r4
   15182:	46ad      	mov	sp, r5
   15184:	f006 fe20 	bl	1bdc8 <net_buf_unref>
			return -ECONNREFUSED;
   15188:	f1b8 0f09 	cmp.w	r8, #9
   1518c:	bf14      	ite	ne
   1518e:	f06f 0004 	mvnne.w	r0, #4
   15192:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   15196:	371c      	adds	r7, #28
   15198:	46bd      	mov	sp, r7
   1519a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
   1519e:	b115      	cbz	r5, 151a6 <bt_hci_cmd_send_sync+0xd2>
		*rsp = buf;
   151a0:	602c      	str	r4, [r5, #0]
	return 0;
   151a2:	2000      	movs	r0, #0
   151a4:	e7f7      	b.n	15196 <bt_hci_cmd_send_sync+0xc2>
		net_buf_unref(buf);
   151a6:	4620      	mov	r0, r4
   151a8:	f006 fe0e 	bl	1bdc8 <net_buf_unref>
   151ac:	e7f9      	b.n	151a2 <bt_hci_cmd_send_sync+0xce>
			return -ENOBUFS;
   151ae:	f06f 0068 	mvn.w	r0, #104	; 0x68
   151b2:	e7f0      	b.n	15196 <bt_hci_cmd_send_sync+0xc2>
   151b4:	20003168 	.word	0x20003168
   151b8:	200004d4 	.word	0x200004d4
   151bc:	000297df 	.word	0x000297df
   151c0:	00029996 	.word	0x00029996
   151c4:	0002982c 	.word	0x0002982c
   151c8:	0002999f 	.word	0x0002999f
   151cc:	000299cb 	.word	0x000299cb
   151d0:	00028174 	.word	0x00028174

000151d4 <hci_le_read_max_data_len>:
{
   151d4:	b570      	push	{r4, r5, r6, lr}
   151d6:	b088      	sub	sp, #32
   151d8:	4606      	mov	r6, r0
   151da:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   151dc:	aa01      	add	r2, sp, #4
   151de:	2100      	movs	r1, #0
   151e0:	f242 002f 	movw	r0, #8239	; 0x202f
   151e4:	f7ff ff76 	bl	150d4 <bt_hci_cmd_send_sync>
	if (err) {
   151e8:	4604      	mov	r4, r0
   151ea:	b160      	cbz	r0, 15206 <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
   151ec:	4b0b      	ldr	r3, [pc, #44]	; (1521c <hci_le_read_max_data_len+0x48>)
   151ee:	9307      	str	r3, [sp, #28]
   151f0:	480b      	ldr	r0, [pc, #44]	; (15220 <hci_le_read_max_data_len+0x4c>)
   151f2:	2302      	movs	r3, #2
   151f4:	aa06      	add	r2, sp, #24
   151f6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   151fa:	9306      	str	r3, [sp, #24]
   151fc:	f00f fc9f 	bl	24b3e <z_log_msg_static_create.constprop.0>
}
   15200:	4620      	mov	r0, r4
   15202:	b008      	add	sp, #32
   15204:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   15206:	9801      	ldr	r0, [sp, #4]
   15208:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1520a:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1520e:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   15210:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   15214:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   15216:	f006 fdd7 	bl	1bdc8 <net_buf_unref>
	return 0;
   1521a:	e7f1      	b.n	15200 <hci_le_read_max_data_len+0x2c>
   1521c:	000299e7 	.word	0x000299e7
   15220:	00028174 	.word	0x00028174

00015224 <bt_hci_le_rand>:
{
   15224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   15226:	4b14      	ldr	r3, [pc, #80]	; (15278 <bt_hci_le_rand+0x54>)
   15228:	f993 309b 	ldrsb.w	r3, [r3, #155]	; 0x9b
   1522c:	2b00      	cmp	r3, #0
{
   1522e:	4605      	mov	r5, r0
   15230:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   15232:	da1d      	bge.n	15270 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   15234:	b914      	cbnz	r4, 1523c <bt_hci_le_rand+0x18>
	return 0;
   15236:	4620      	mov	r0, r4
}
   15238:	b003      	add	sp, #12
   1523a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   1523c:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   1523e:	aa01      	add	r2, sp, #4
   15240:	f04f 0100 	mov.w	r1, #0
   15244:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   15248:	4626      	mov	r6, r4
   1524a:	bf28      	it	cs
   1524c:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   1524e:	f7ff ff41 	bl	150d4 <bt_hci_cmd_send_sync>
		if (err) {
   15252:	2800      	cmp	r0, #0
   15254:	d1f0      	bne.n	15238 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   15256:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
   15258:	68f9      	ldr	r1, [r7, #12]
   1525a:	4632      	mov	r2, r6
   1525c:	3101      	adds	r1, #1
   1525e:	4628      	mov	r0, r5
   15260:	f00f fb75 	bl	2494e <memcpy>
		net_buf_unref(rsp);
   15264:	4638      	mov	r0, r7
   15266:	f006 fdaf 	bl	1bdc8 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   1526a:	4435      	add	r5, r6
		len -= count;
   1526c:	1ba4      	subs	r4, r4, r6
   1526e:	e7e1      	b.n	15234 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   15270:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15274:	e7e0      	b.n	15238 <bt_hci_le_rand+0x14>
   15276:	bf00      	nop
   15278:	20000388 	.word	0x20000388

0001527c <bt_hci_le_enh_conn_complete>:
{
   1527c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15280:	b08c      	sub	sp, #48	; 0x30
		if (disconnected_handles[i] == handle) {
   15282:	4baf      	ldr	r3, [pc, #700]	; (15540 <bt_hci_le_enh_conn_complete+0x2c4>)
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15284:	f8b0 8001 	ldrh.w	r8, [r0, #1]
		if (disconnected_handles[i] == handle) {
   15288:	8819      	ldrh	r1, [r3, #0]
{
   1528a:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
   1528c:	f448 4270 	orr.w	r2, r8, #61440	; 0xf000
   15290:	4291      	cmp	r1, r2
   15292:	f04f 0600 	mov.w	r6, #0
{
   15296:	af02      	add	r7, sp, #8
			disconnected_handles[i] = 0;
   15298:	bf04      	itt	eq
   1529a:	801e      	strheq	r6, [r3, #0]
			return true;
   1529c:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   1529e:	f000 ffe3 	bl	16268 <bt_id_pending_keys_update>
	if (evt->status) {
   152a2:	782c      	ldrb	r4, [r5, #0]
   152a4:	b3a4      	cbz	r4, 15310 <bt_hci_le_enh_conn_complete+0x94>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   152a6:	2c3c      	cmp	r4, #60	; 0x3c
   152a8:	d122      	bne.n	152f0 <bt_hci_le_enh_conn_complete+0x74>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   152aa:	f001 fae5 	bl	16878 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   152ae:	f06f 0180 	mvn.w	r1, #128	; 0x80
   152b2:	3010      	adds	r0, #16
   152b4:	f00f fc46 	bl	24b44 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   152b8:	2000      	movs	r0, #0
   152ba:	f7ff fa97 	bl	147ec <find_pending_connect.part.0>
		if (!conn) {
   152be:	4605      	mov	r5, r0
   152c0:	b970      	cbnz	r0, 152e0 <bt_hci_le_enh_conn_complete+0x64>
			LOG_ERR("No pending peripheral connection");
   152c2:	4ba0      	ldr	r3, [pc, #640]	; (15544 <bt_hci_le_enh_conn_complete+0x2c8>)
   152c4:	627b      	str	r3, [r7, #36]	; 0x24
   152c6:	2302      	movs	r3, #2
   152c8:	489f      	ldr	r0, [pc, #636]	; (15548 <bt_hci_le_enh_conn_complete+0x2cc>)
   152ca:	623b      	str	r3, [r7, #32]
   152cc:	f107 0220 	add.w	r2, r7, #32
   152d0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   152d4:	f00f fc33 	bl	24b3e <z_log_msg_static_create.constprop.0>
}
   152d8:	3728      	adds	r7, #40	; 0x28
   152da:	46bd      	mov	sp, r7
   152dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   152e0:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   152e2:	2100      	movs	r1, #0
   152e4:	f002 f948 	bl	17578 <bt_conn_set_state>
		bt_conn_unref(conn);
   152e8:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   152ea:	f00f ff52 	bl	25192 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   152ee:	e7f3      	b.n	152d8 <bt_hci_le_enh_conn_complete+0x5c>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   152f0:	466d      	mov	r5, sp
   152f2:	b088      	sub	sp, #32
   152f4:	aa02      	add	r2, sp, #8
   152f6:	4b95      	ldr	r3, [pc, #596]	; (1554c <bt_hci_le_enh_conn_complete+0x2d0>)
   152f8:	4893      	ldr	r0, [pc, #588]	; (15548 <bt_hci_le_enh_conn_complete+0x2cc>)
   152fa:	e9c2 3405 	strd	r3, r4, [r2, #20]
   152fe:	2303      	movs	r3, #3
   15300:	f842 3f10 	str.w	r3, [r2, #16]!
   15304:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15308:	f00f fc19 	bl	24b3e <z_log_msg_static_create.constprop.0>
   1530c:	46ad      	mov	sp, r5
		return;
   1530e:	e7e3      	b.n	152d8 <bt_hci_le_enh_conn_complete+0x5c>
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   15310:	78eb      	ldrb	r3, [r5, #3]
   15312:	2b01      	cmp	r3, #1
   15314:	bf08      	it	eq
   15316:	4b8e      	ldreq	r3, [pc, #568]	; (15550 <bt_hci_le_enh_conn_complete+0x2d4>)
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   15318:	f105 0904 	add.w	r9, r5, #4
   1531c:	4648      	mov	r0, r9
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   1531e:	bf08      	it	eq
   15320:	f893 406f 	ldrbeq.w	r4, [r3, #111]	; 0x6f
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   15324:	f00f fbcd 	bl	24ac2 <bt_addr_le_is_resolved>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
   15328:	4649      	mov	r1, r9
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   1532a:	b348      	cbz	r0, 15380 <bt_hci_le_enh_conn_complete+0x104>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
   1532c:	f107 0010 	add.w	r0, r7, #16
   15330:	f00f fbbd 	bl	24aae <bt_addr_le_copy_resolved>
	memcpy(dst, src, sizeof(*dst));
   15334:	2206      	movs	r2, #6
   15336:	f105 0111 	add.w	r1, r5, #17
   1533a:	f107 0009 	add.w	r0, r7, #9
   1533e:	f00f fb06 	bl	2494e <memcpy>
		peer_addr->type = BT_ADDR_LE_RANDOM;
   15342:	2301      	movs	r3, #1
   15344:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   15346:	78eb      	ldrb	r3, [r5, #3]
   15348:	2b01      	cmp	r3, #1
   1534a:	d029      	beq.n	153a0 <bt_hci_le_enh_conn_complete+0x124>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   1534c:	4648      	mov	r0, r9
   1534e:	f7ff f91f 	bl	14590 <bt_addr_le_str>
   15352:	466c      	mov	r4, sp
   15354:	b088      	sub	sp, #32
   15356:	aa02      	add	r2, sp, #8
   15358:	4b7e      	ldr	r3, [pc, #504]	; (15554 <bt_hci_le_enh_conn_complete+0x2d8>)
   1535a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1535e:	f44f 7300 	mov.w	r3, #512	; 0x200
   15362:	8393      	strh	r3, [r2, #28]
   15364:	4b7c      	ldr	r3, [pc, #496]	; (15558 <bt_hci_le_enh_conn_complete+0x2dc>)
   15366:	f842 3f10 	str.w	r3, [r2, #16]!
   1536a:	4877      	ldr	r0, [pc, #476]	; (15548 <bt_hci_le_enh_conn_complete+0x2cc>)
   1536c:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   15370:	f00f fbe5 	bl	24b3e <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   15374:	211f      	movs	r1, #31
   15376:	46a5      	mov	sp, r4
   15378:	4640      	mov	r0, r8
   1537a:	f00f fbff 	bl	24b7c <bt_hci_disconnect>
		return;
   1537e:	e7ab      	b.n	152d8 <bt_hci_le_enh_conn_complete+0x5c>
		bt_addr_le_copy(id_addr, bt_lookup_id_addr(id, &evt->peer_addr));
   15380:	4620      	mov	r0, r4
   15382:	f00f fd63 	bl	24e4c <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   15386:	2207      	movs	r2, #7
   15388:	4601      	mov	r1, r0
   1538a:	f107 0010 	add.w	r0, r7, #16
   1538e:	f00f fade 	bl	2494e <memcpy>
   15392:	2207      	movs	r2, #7
   15394:	4649      	mov	r1, r9
   15396:	f107 0008 	add.w	r0, r7, #8
   1539a:	f00f fad8 	bl	2494e <memcpy>
}
   1539e:	e7d2      	b.n	15346 <bt_hci_le_enh_conn_complete+0xca>
   153a0:	f107 0010 	add.w	r0, r7, #16
   153a4:	f7ff fa22 	bl	147ec <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   153a8:	78eb      	ldrb	r3, [r5, #3]
   153aa:	2b01      	cmp	r3, #1
   153ac:	4604      	mov	r4, r0
   153ae:	d10a      	bne.n	153c6 <bt_hci_le_enh_conn_complete+0x14a>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   153b0:	f001 fa62 	bl	16878 <bt_le_adv_lookup_legacy>
   153b4:	f06f 0180 	mvn.w	r1, #128	; 0x80
   153b8:	4682      	mov	sl, r0
   153ba:	3010      	adds	r0, #16
   153bc:	f00f fbc2 	bl	24b44 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   153c0:	4650      	mov	r0, sl
   153c2:	f00f fe6b 	bl	2509c <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   153c6:	2c00      	cmp	r4, #0
   153c8:	d0c0      	beq.n	1534c <bt_hci_le_enh_conn_complete+0xd0>
	conn->handle = sys_le16_to_cpu(evt->handle);
   153ca:	4620      	mov	r0, r4
   153cc:	f8b5 3001 	ldrh.w	r3, [r5, #1]
   153d0:	f820 3b88 	strh.w	r3, [r0], #136
	memcpy(dst, src, sizeof(*dst));
   153d4:	2207      	movs	r2, #7
   153d6:	f107 0110 	add.w	r1, r7, #16
   153da:	f00f fab8 	bl	2494e <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   153de:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   153e2:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   153e6:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   153ea:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   153ee:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   153f2:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   153f6:	78eb      	ldrb	r3, [r5, #3]
   153f8:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   153fa:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   153fc:	2b01      	cmp	r3, #1
	conn->err = 0U;
   153fe:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15400:	d118      	bne.n	15434 <bt_hci_le_enh_conn_complete+0x1b8>
   15402:	2207      	movs	r2, #7
   15404:	f107 0108 	add.w	r1, r7, #8
   15408:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   1540c:	f00f fa9f 	bl	2494e <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   15410:	f001 fa32 	bl	16878 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   15414:	7a21      	ldrb	r1, [r4, #8]
   15416:	4d4e      	ldr	r5, [pc, #312]	; (15550 <bt_hci_le_enh_conn_complete+0x2d4>)
   15418:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   1541c:	4429      	add	r1, r5
   1541e:	2207      	movs	r2, #7
   15420:	f104 0096 	add.w	r0, r4, #150	; 0x96
   15424:	f00f fa93 	bl	2494e <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   15428:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
   1542c:	065d      	lsls	r5, r3, #25
   1542e:	d501      	bpl.n	15434 <bt_hci_le_enh_conn_complete+0x1b8>
			bt_le_adv_resume();
   15430:	f001 fbea 	bl	16c08 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   15434:	2107      	movs	r1, #7
   15436:	4620      	mov	r0, r4
   15438:	f002 f89e 	bl	17578 <bt_conn_set_state>
	if (is_disconnected) {
   1543c:	b11e      	cbz	r6, 15446 <bt_hci_le_enh_conn_complete+0x1ca>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1543e:	2101      	movs	r1, #1
   15440:	4620      	mov	r0, r4
   15442:	f002 f899 	bl	17578 <bt_conn_set_state>
	bt_conn_connected(conn);
   15446:	4620      	mov	r0, r4
   15448:	f00f fee1 	bl	2520e <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   1544c:	7b63      	ldrb	r3, [r4, #13]
   1544e:	2b07      	cmp	r3, #7
   15450:	d170      	bne.n	15534 <bt_hci_le_enh_conn_complete+0x2b8>
   15452:	f3bf 8f5b 	dmb	ish
   15456:	6863      	ldr	r3, [r4, #4]
   15458:	4d3d      	ldr	r5, [pc, #244]	; (15550 <bt_hci_le_enh_conn_complete+0x2d4>)
   1545a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   1545e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   15462:	d129      	bne.n	154b8 <bt_hci_le_enh_conn_complete+0x23c>
   15464:	78e3      	ldrb	r3, [r4, #3]
   15466:	b11b      	cbz	r3, 15470 <bt_hci_le_enh_conn_complete+0x1f4>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   15468:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   1546c:	0718      	lsls	r0, r3, #28
   1546e:	d523      	bpl.n	154b8 <bt_hci_le_enh_conn_complete+0x23c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   15470:	2102      	movs	r1, #2
   15472:	f242 0016 	movw	r0, #8214	; 0x2016
   15476:	f7ff fdf3 	bl	15060 <bt_hci_cmd_create>
	if (!buf) {
   1547a:	4606      	mov	r6, r0
   1547c:	2800      	cmp	r0, #0
   1547e:	d05b      	beq.n	15538 <bt_hci_le_enh_conn_complete+0x2bc>
   15480:	2102      	movs	r1, #2
   15482:	300c      	adds	r0, #12
   15484:	f011 fba0 	bl	26bc8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   15488:	8823      	ldrh	r3, [r4, #0]
   1548a:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   1548c:	2200      	movs	r2, #0
   1548e:	4631      	mov	r1, r6
   15490:	f242 0016 	movw	r0, #8214	; 0x2016
   15494:	f7ff fe1e 	bl	150d4 <bt_hci_cmd_send_sync>
		if (err) {
   15498:	b170      	cbz	r0, 154b8 <bt_hci_le_enh_conn_complete+0x23c>
			LOG_ERR("Failed read remote features (%d)", err);
   1549a:	466e      	mov	r6, sp
   1549c:	b088      	sub	sp, #32
   1549e:	aa02      	add	r2, sp, #8
   154a0:	4b2e      	ldr	r3, [pc, #184]	; (1555c <bt_hci_le_enh_conn_complete+0x2e0>)
   154a2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   154a6:	2303      	movs	r3, #3
   154a8:	f842 3f10 	str.w	r3, [r2, #16]!
   154ac:	4826      	ldr	r0, [pc, #152]	; (15548 <bt_hci_le_enh_conn_complete+0x2cc>)
   154ae:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   154b2:	f00f fb44 	bl	24b3e <z_log_msg_static_create.constprop.0>
   154b6:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   154b8:	f895 30d9 	ldrb.w	r3, [r5, #217]	; 0xd9
   154bc:	07d9      	lsls	r1, r3, #31
   154be:	d516      	bpl.n	154ee <bt_hci_le_enh_conn_complete+0x272>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   154c0:	2100      	movs	r1, #0
   154c2:	2302      	movs	r3, #2
   154c4:	9100      	str	r1, [sp, #0]
   154c6:	461a      	mov	r2, r3
   154c8:	4620      	mov	r0, r4
   154ca:	f00f fb90 	bl	24bee <bt_le_set_phy>
		if (err) {
   154ce:	b170      	cbz	r0, 154ee <bt_hci_le_enh_conn_complete+0x272>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   154d0:	466e      	mov	r6, sp
   154d2:	b088      	sub	sp, #32
   154d4:	aa02      	add	r2, sp, #8
   154d6:	4b22      	ldr	r3, [pc, #136]	; (15560 <bt_hci_le_enh_conn_complete+0x2e4>)
   154d8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   154dc:	2303      	movs	r3, #3
   154de:	f842 3f10 	str.w	r3, [r2, #16]!
   154e2:	4819      	ldr	r0, [pc, #100]	; (15548 <bt_hci_le_enh_conn_complete+0x2cc>)
   154e4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   154e8:	f00f fb29 	bl	24b3e <z_log_msg_static_create.constprop.0>
   154ec:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   154ee:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   154f2:	069a      	lsls	r2, r3, #26
   154f4:	d51e      	bpl.n	15534 <bt_hci_le_enh_conn_complete+0x2b8>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   154f6:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   154fa:	689b      	ldr	r3, [r3, #8]
   154fc:	079b      	lsls	r3, r3, #30
   154fe:	d519      	bpl.n	15534 <bt_hci_le_enh_conn_complete+0x2b8>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   15500:	1db9      	adds	r1, r7, #6
   15502:	1d38      	adds	r0, r7, #4
   15504:	f7ff fe66 	bl	151d4 <hci_le_read_max_data_len>
			if (!err) {
   15508:	b9a0      	cbnz	r0, 15534 <bt_hci_le_enh_conn_complete+0x2b8>
				err = bt_le_set_data_len(conn,
   1550a:	88fa      	ldrh	r2, [r7, #6]
   1550c:	88b9      	ldrh	r1, [r7, #4]
   1550e:	4620      	mov	r0, r4
   15510:	f00f fb4f 	bl	24bb2 <bt_le_set_data_len>
				if (err) {
   15514:	b170      	cbz	r0, 15534 <bt_hci_le_enh_conn_complete+0x2b8>
					LOG_ERR("Failed to set data len (%d)", err);
   15516:	466d      	mov	r5, sp
   15518:	b088      	sub	sp, #32
   1551a:	aa02      	add	r2, sp, #8
   1551c:	4b11      	ldr	r3, [pc, #68]	; (15564 <bt_hci_le_enh_conn_complete+0x2e8>)
   1551e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15522:	2303      	movs	r3, #3
   15524:	f842 3f10 	str.w	r3, [r2, #16]!
   15528:	4807      	ldr	r0, [pc, #28]	; (15548 <bt_hci_le_enh_conn_complete+0x2cc>)
   1552a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1552e:	f00f fb06 	bl	24b3e <z_log_msg_static_create.constprop.0>
   15532:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
   15534:	4620      	mov	r0, r4
   15536:	e6d8      	b.n	152ea <bt_hci_le_enh_conn_complete+0x6e>
		return -ENOBUFS;
   15538:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1553c:	e7ad      	b.n	1549a <bt_hci_le_enh_conn_complete+0x21e>
   1553e:	bf00      	nop
   15540:	20004000 	.word	0x20004000
   15544:	00029a07 	.word	0x00029a07
   15548:	00028174 	.word	0x00028174
   1554c:	00029a28 	.word	0x00029a28
   15550:	20000388 	.word	0x20000388
   15554:	00029a41 	.word	0x00029a41
   15558:	01000003 	.word	0x01000003
   1555c:	00029a5d 	.word	0x00029a5d
   15560:	00029a7e 	.word	0x00029a7e
   15564:	00029a95 	.word	0x00029a95

00015568 <le_legacy_conn_complete>:
{
   15568:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1556a:	68c1      	ldr	r1, [r0, #12]
	memcpy(dst, src, sizeof(*dst));
   1556c:	4c18      	ldr	r4, [pc, #96]	; (155d0 <le_legacy_conn_complete+0x68>)
	enh.status         = evt->status;
   1556e:	780b      	ldrb	r3, [r1, #0]
{
   15570:	b088      	sub	sp, #32
	memcpy(dst, src, sizeof(*dst));
   15572:	2207      	movs	r2, #7
	enh.status         = evt->status;
   15574:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   15578:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   1557c:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   15580:	78cb      	ldrb	r3, [r1, #3]
   15582:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   15586:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1558a:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   1558e:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   15592:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   15596:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1559a:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   1559e:	7c4b      	ldrb	r3, [r1, #17]
   155a0:	f88d 301d 	strb.w	r3, [sp, #29]
   155a4:	3104      	adds	r1, #4
   155a6:	a801      	add	r0, sp, #4
   155a8:	f00f f9d1 	bl	2494e <memcpy>
	memcpy(dst, src, sizeof(*dst));
   155ac:	4621      	mov	r1, r4
   155ae:	2206      	movs	r2, #6
   155b0:	f10d 000b 	add.w	r0, sp, #11
   155b4:	f00f f9cb 	bl	2494e <memcpy>
   155b8:	2206      	movs	r2, #6
   155ba:	4621      	mov	r1, r4
   155bc:	f10d 0011 	add.w	r0, sp, #17
   155c0:	f00f f9c5 	bl	2494e <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   155c4:	4668      	mov	r0, sp
   155c6:	f7ff fe59 	bl	1527c <bt_hci_le_enh_conn_complete>
}
   155ca:	b008      	add	sp, #32
   155cc:	bd10      	pop	{r4, pc}
   155ce:	bf00      	nop
   155d0:	00029688 	.word	0x00029688

000155d4 <bt_security_err_get>:
	switch (hci_err) {
   155d4:	2829      	cmp	r0, #41	; 0x29
   155d6:	bf9a      	itte	ls
   155d8:	4b01      	ldrls	r3, [pc, #4]	; (155e0 <bt_security_err_get+0xc>)
   155da:	5c18      	ldrbls	r0, [r3, r0]
{
   155dc:	2009      	movhi	r0, #9
}
   155de:	4770      	bx	lr
   155e0:	00029d5e 	.word	0x00029d5e

000155e4 <hci_encrypt_key_refresh_complete>:
{
   155e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   155e6:	b087      	sub	sp, #28
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   155e8:	68c3      	ldr	r3, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   155ea:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   155ee:	781d      	ldrb	r5, [r3, #0]
{
   155f0:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   155f2:	4630      	mov	r0, r6
   155f4:	f001 ffb8 	bl	17568 <bt_conn_lookup_handle>
	if (!conn) {
   155f8:	4604      	mov	r4, r0
   155fa:	b988      	cbnz	r0, 15620 <hci_encrypt_key_refresh_complete+0x3c>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   155fc:	466c      	mov	r4, sp
   155fe:	b088      	sub	sp, #32
   15600:	466a      	mov	r2, sp
   15602:	4b1f      	ldr	r3, [pc, #124]	; (15680 <hci_encrypt_key_refresh_complete+0x9c>)
   15604:	481f      	ldr	r0, [pc, #124]	; (15684 <hci_encrypt_key_refresh_complete+0xa0>)
   15606:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1560a:	2303      	movs	r3, #3
   1560c:	f842 3f10 	str.w	r3, [r2, #16]!
   15610:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15614:	f00f fa93 	bl	24b3e <z_log_msg_static_create.constprop.0>
   15618:	46a5      	mov	sp, r4
}
   1561a:	371c      	adds	r7, #28
   1561c:	46bd      	mov	sp, r7
   1561e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
   15620:	b15d      	cbz	r5, 1563a <hci_encrypt_key_refresh_complete+0x56>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   15622:	4628      	mov	r0, r5
   15624:	f7ff ffd6 	bl	155d4 <bt_security_err_get>
   15628:	4629      	mov	r1, r5
   1562a:	4602      	mov	r2, r0
   1562c:	4620      	mov	r0, r4
   1562e:	f002 f973 	bl	17918 <bt_conn_security_changed>
	bt_conn_unref(conn);
   15632:	4620      	mov	r0, r4
   15634:	f00f fdad 	bl	25192 <bt_conn_unref>
   15638:	e7ef      	b.n	1561a <hci_encrypt_key_refresh_complete+0x36>
	if (conn->type == BT_CONN_TYPE_LE) {
   1563a:	7883      	ldrb	r3, [r0, #2]
   1563c:	2b01      	cmp	r3, #1
   1563e:	d1f0      	bne.n	15622 <hci_encrypt_key_refresh_complete+0x3e>
		bt_smp_update_keys(conn);
   15640:	f006 f902 	bl	1b848 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   15644:	4620      	mov	r0, r4
   15646:	f00f fa52 	bl	24aee <update_sec_level>
   1564a:	2800      	cmp	r0, #0
   1564c:	d1e9      	bne.n	15622 <hci_encrypt_key_refresh_complete+0x3e>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1564e:	2005      	movs	r0, #5
   15650:	f7ff ffc0 	bl	155d4 <bt_security_err_get>
   15654:	2105      	movs	r1, #5
   15656:	4602      	mov	r2, r0
   15658:	4620      	mov	r0, r4
   1565a:	f002 f95d 	bl	17918 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   1565e:	4b0a      	ldr	r3, [pc, #40]	; (15688 <hci_encrypt_key_refresh_complete+0xa4>)
   15660:	617b      	str	r3, [r7, #20]
   15662:	4808      	ldr	r0, [pc, #32]	; (15684 <hci_encrypt_key_refresh_complete+0xa0>)
   15664:	2302      	movs	r3, #2
   15666:	f107 0210 	add.w	r2, r7, #16
   1566a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1566e:	613b      	str	r3, [r7, #16]
   15670:	f00f fa65 	bl	24b3e <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   15674:	2105      	movs	r1, #5
   15676:	4620      	mov	r0, r4
   15678:	f00f fdd2 	bl	25220 <bt_conn_disconnect>
   1567c:	e7d9      	b.n	15632 <hci_encrypt_key_refresh_complete+0x4e>
   1567e:	bf00      	nop
   15680:	00029797 	.word	0x00029797
   15684:	00028174 	.word	0x00028174
   15688:	00029ab1 	.word	0x00029ab1

0001568c <hci_encrypt_change>:
{
   1568c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15690:	b086      	sub	sp, #24
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   15692:	68c6      	ldr	r6, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15694:	f8b6 8001 	ldrh.w	r8, [r6, #1]
	uint8_t status = evt->status;
   15698:	7835      	ldrb	r5, [r6, #0]
{
   1569a:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   1569c:	4640      	mov	r0, r8
   1569e:	f001 ff63 	bl	17568 <bt_conn_lookup_handle>
	if (!conn) {
   156a2:	4604      	mov	r4, r0
   156a4:	b990      	cbnz	r0, 156cc <hci_encrypt_change+0x40>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   156a6:	466c      	mov	r4, sp
   156a8:	b088      	sub	sp, #32
   156aa:	466a      	mov	r2, sp
   156ac:	4b23      	ldr	r3, [pc, #140]	; (1573c <hci_encrypt_change+0xb0>)
   156ae:	4824      	ldr	r0, [pc, #144]	; (15740 <hci_encrypt_change+0xb4>)
   156b0:	e9c2 3805 	strd	r3, r8, [r2, #20]
   156b4:	2303      	movs	r3, #3
   156b6:	f842 3f10 	str.w	r3, [r2, #16]!
   156ba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   156be:	f00f fa3e 	bl	24b3e <z_log_msg_static_create.constprop.0>
   156c2:	46a5      	mov	sp, r4
}
   156c4:	3718      	adds	r7, #24
   156c6:	46bd      	mov	sp, r7
   156c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (status) {
   156cc:	b15d      	cbz	r5, 156e6 <hci_encrypt_change+0x5a>
		bt_conn_security_changed(conn, status,
   156ce:	4628      	mov	r0, r5
   156d0:	f7ff ff80 	bl	155d4 <bt_security_err_get>
   156d4:	4629      	mov	r1, r5
   156d6:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   156d8:	4620      	mov	r0, r4
   156da:	f002 f91d 	bl	17918 <bt_conn_security_changed>
	bt_conn_unref(conn);
   156de:	4620      	mov	r0, r4
   156e0:	f00f fd57 	bl	25192 <bt_conn_unref>
   156e4:	e7ee      	b.n	156c4 <hci_encrypt_change+0x38>
	if (conn->type == BT_CONN_TYPE_LE) {
   156e6:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   156e8:	78f3      	ldrb	r3, [r6, #3]
   156ea:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   156ec:	2a01      	cmp	r2, #1
   156ee:	d005      	beq.n	156fc <hci_encrypt_change+0x70>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   156f0:	2000      	movs	r0, #0
   156f2:	f7ff ff6f 	bl	155d4 <bt_security_err_get>
   156f6:	2100      	movs	r1, #0
   156f8:	4602      	mov	r2, r0
   156fa:	e7ed      	b.n	156d8 <hci_encrypt_change+0x4c>
		if (conn->encrypt) {
   156fc:	b10b      	cbz	r3, 15702 <hci_encrypt_change+0x76>
			bt_smp_update_keys(conn);
   156fe:	f006 f8a3 	bl	1b848 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   15702:	4620      	mov	r0, r4
   15704:	f00f f9f3 	bl	24aee <update_sec_level>
   15708:	2800      	cmp	r0, #0
   1570a:	d1f1      	bne.n	156f0 <hci_encrypt_change+0x64>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1570c:	2005      	movs	r0, #5
   1570e:	f7ff ff61 	bl	155d4 <bt_security_err_get>
   15712:	2105      	movs	r1, #5
   15714:	4602      	mov	r2, r0
   15716:	4620      	mov	r0, r4
   15718:	f002 f8fe 	bl	17918 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   1571c:	4b09      	ldr	r3, [pc, #36]	; (15744 <hci_encrypt_change+0xb8>)
   1571e:	617b      	str	r3, [r7, #20]
   15720:	4807      	ldr	r0, [pc, #28]	; (15740 <hci_encrypt_change+0xb4>)
   15722:	2302      	movs	r3, #2
   15724:	f107 0210 	add.w	r2, r7, #16
   15728:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1572c:	613b      	str	r3, [r7, #16]
   1572e:	f00f fa06 	bl	24b3e <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   15732:	2105      	movs	r1, #5
   15734:	4620      	mov	r0, r4
   15736:	f00f fd73 	bl	25220 <bt_conn_disconnect>
   1573a:	e7d0      	b.n	156de <hci_encrypt_change+0x52>
   1573c:	00029797 	.word	0x00029797
   15740:	00028174 	.word	0x00028174
   15744:	00029ab1 	.word	0x00029ab1

00015748 <bt_send>:
	return bt_dev.drv->send(buf);
   15748:	4b02      	ldr	r3, [pc, #8]	; (15754 <bt_send+0xc>)
   1574a:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   1574e:	695b      	ldr	r3, [r3, #20]
   15750:	4718      	bx	r3
   15752:	bf00      	nop
   15754:	20000388 	.word	0x20000388

00015758 <bt_hci_cmd_send>:
{
   15758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1575a:	4605      	mov	r5, r0
   1575c:	af00      	add	r7, sp, #0
	if (!buf) {
   1575e:	460c      	mov	r4, r1
   15760:	b919      	cbnz	r1, 1576a <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   15762:	f7ff fc7d 	bl	15060 <bt_hci_cmd_create>
		if (!buf) {
   15766:	4604      	mov	r4, r0
   15768:	b318      	cbz	r0, 157b2 <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   1576a:	f640 4335 	movw	r3, #3125	; 0xc35
   1576e:	429d      	cmp	r5, r3
   15770:	d119      	bne.n	157a6 <bt_hci_cmd_send+0x4e>
		err = bt_send(buf);
   15772:	4620      	mov	r0, r4
   15774:	f7ff ffe8 	bl	15748 <bt_send>
		if (err) {
   15778:	4605      	mov	r5, r0
   1577a:	b188      	cbz	r0, 157a0 <bt_hci_cmd_send+0x48>
			LOG_ERR("Unable to send to driver (err %d)", err);
   1577c:	466e      	mov	r6, sp
   1577e:	b088      	sub	sp, #32
   15780:	466a      	mov	r2, sp
   15782:	4b0d      	ldr	r3, [pc, #52]	; (157b8 <bt_hci_cmd_send+0x60>)
   15784:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15788:	2303      	movs	r3, #3
   1578a:	480c      	ldr	r0, [pc, #48]	; (157bc <bt_hci_cmd_send+0x64>)
   1578c:	f842 3f10 	str.w	r3, [r2, #16]!
   15790:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15794:	f00f f9d3 	bl	24b3e <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
   15798:	4620      	mov	r0, r4
   1579a:	46b5      	mov	sp, r6
   1579c:	f006 fb14 	bl	1bdc8 <net_buf_unref>
}
   157a0:	4628      	mov	r0, r5
   157a2:	46bd      	mov	sp, r7
   157a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   157a6:	4806      	ldr	r0, [pc, #24]	; (157c0 <bt_hci_cmd_send+0x68>)
   157a8:	4621      	mov	r1, r4
   157aa:	f011 f9e1 	bl	26b70 <net_buf_put>
	return 0;
   157ae:	2500      	movs	r5, #0
   157b0:	e7f6      	b.n	157a0 <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
   157b2:	f06f 0568 	mvn.w	r5, #104	; 0x68
   157b6:	e7f3      	b.n	157a0 <bt_hci_cmd_send+0x48>
   157b8:	00029ad7 	.word	0x00029ad7
   157bc:	00028174 	.word	0x00028174
   157c0:	200004d4 	.word	0x200004d4

000157c4 <le_ltk_request>:
{
   157c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   157c8:	b08c      	sub	sp, #48	; 0x30
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   157ca:	68c4      	ldr	r4, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   157cc:	8826      	ldrh	r6, [r4, #0]
   157ce:	fa1f f886 	uxth.w	r8, r6
{
   157d2:	af02      	add	r7, sp, #8
	conn = bt_conn_lookup_handle(handle);
   157d4:	4640      	mov	r0, r8
   157d6:	f001 fec7 	bl	17568 <bt_conn_lookup_handle>
	if (!conn) {
   157da:	4605      	mov	r5, r0
   157dc:	b990      	cbnz	r0, 15804 <le_ltk_request+0x40>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   157de:	466c      	mov	r4, sp
   157e0:	b088      	sub	sp, #32
   157e2:	aa02      	add	r2, sp, #8
   157e4:	4b28      	ldr	r3, [pc, #160]	; (15888 <le_ltk_request+0xc4>)
   157e6:	4829      	ldr	r0, [pc, #164]	; (1588c <le_ltk_request+0xc8>)
   157e8:	e9c2 3805 	strd	r3, r8, [r2, #20]
   157ec:	2303      	movs	r3, #3
   157ee:	f842 3f10 	str.w	r3, [r2, #16]!
   157f2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   157f6:	f00f f9a2 	bl	24b3e <z_log_msg_static_create.constprop.0>
   157fa:	46a5      	mov	sp, r4
}
   157fc:	3728      	adds	r7, #40	; 0x28
   157fe:	46bd      	mov	sp, r7
   15800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   15804:	f8d4 2002 	ldr.w	r2, [r4, #2]
   15808:	f8d4 3006 	ldr.w	r3, [r4, #6]
   1580c:	9701      	str	r7, [sp, #4]
   1580e:	8961      	ldrh	r1, [r4, #10]
   15810:	9100      	str	r1, [sp, #0]
   15812:	f010 ff98 	bl	26746 <bt_smp_request_ltk>
   15816:	b328      	cbz	r0, 15864 <le_ltk_request+0xa0>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   15818:	2112      	movs	r1, #18
   1581a:	f242 001a 	movw	r0, #8218	; 0x201a
   1581e:	f7ff fc1f 	bl	15060 <bt_hci_cmd_create>
	if (!buf) {
   15822:	4604      	mov	r4, r0
   15824:	b970      	cbnz	r0, 15844 <le_ltk_request+0x80>
		LOG_ERR("Out of command buffers");
   15826:	4b1a      	ldr	r3, [pc, #104]	; (15890 <le_ltk_request+0xcc>)
   15828:	627b      	str	r3, [r7, #36]	; 0x24
   1582a:	2302      	movs	r3, #2
   1582c:	4817      	ldr	r0, [pc, #92]	; (1588c <le_ltk_request+0xc8>)
   1582e:	623b      	str	r3, [r7, #32]
   15830:	f107 0220 	add.w	r2, r7, #32
   15834:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15838:	f00f f981 	bl	24b3e <z_log_msg_static_create.constprop.0>
	bt_conn_unref(conn);
   1583c:	4628      	mov	r0, r5
   1583e:	f00f fca8 	bl	25192 <bt_conn_unref>
   15842:	e7db      	b.n	157fc <le_ltk_request+0x38>
   15844:	2112      	movs	r1, #18
   15846:	300c      	adds	r0, #12
   15848:	f011 f9be 	bl	26bc8 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   1584c:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   1584e:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   15852:	2210      	movs	r2, #16
   15854:	f00f f87b 	bl	2494e <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   15858:	4621      	mov	r1, r4
   1585a:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1585e:	f7ff ff7b 	bl	15758 <bt_hci_cmd_send>
   15862:	e7eb      	b.n	1583c <le_ltk_request+0x78>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   15864:	2102      	movs	r1, #2
   15866:	f242 001b 	movw	r0, #8219	; 0x201b
   1586a:	f7ff fbf9 	bl	15060 <bt_hci_cmd_create>
	if (!buf) {
   1586e:	4604      	mov	r4, r0
   15870:	2800      	cmp	r0, #0
   15872:	d0d8      	beq.n	15826 <le_ltk_request+0x62>
   15874:	2102      	movs	r1, #2
   15876:	300c      	adds	r0, #12
   15878:	f011 f9a6 	bl	26bc8 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1587c:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   1587e:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   15880:	f242 001b 	movw	r0, #8219	; 0x201b
   15884:	e7eb      	b.n	1585e <le_ltk_request+0x9a>
   15886:	bf00      	nop
   15888:	00029773 	.word	0x00029773
   1588c:	00028174 	.word	0x00028174
   15890:	00029af9 	.word	0x00029af9

00015894 <le_conn_param_req>:
{
   15894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15898:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1589a:	68c3      	ldr	r3, [r0, #12]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1589c:	78d9      	ldrb	r1, [r3, #3]
   1589e:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   158a0:	f8b3 8000 	ldrh.w	r8, [r3]
{
   158a4:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   158a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   158aa:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   158ac:	7959      	ldrb	r1, [r3, #5]
   158ae:	791a      	ldrb	r2, [r3, #4]
   158b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   158b4:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   158b6:	799a      	ldrb	r2, [r3, #6]
   158b8:	79d9      	ldrb	r1, [r3, #7]
   158ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   158be:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   158c0:	7a1a      	ldrb	r2, [r3, #8]
   158c2:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   158c4:	fa1f f488 	uxth.w	r4, r8
	param.timeout = sys_le16_to_cpu(evt->timeout);
   158c8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   158cc:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   158ce:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
   158d0:	f001 fe4a 	bl	17568 <bt_conn_lookup_handle>
	if (!conn) {
   158d4:	4606      	mov	r6, r0
   158d6:	b9b0      	cbnz	r0, 15906 <le_conn_param_req+0x72>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   158d8:	466d      	mov	r5, sp
   158da:	b088      	sub	sp, #32
   158dc:	466a      	mov	r2, sp
   158de:	4b20      	ldr	r3, [pc, #128]	; (15960 <le_conn_param_req+0xcc>)
   158e0:	4820      	ldr	r0, [pc, #128]	; (15964 <le_conn_param_req+0xd0>)
   158e2:	e9c2 3405 	strd	r3, r4, [r2, #20]
   158e6:	2303      	movs	r3, #3
   158e8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   158ec:	f842 3f10 	str.w	r3, [r2, #16]!
   158f0:	f00f f925 	bl	24b3e <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   158f4:	2102      	movs	r1, #2
   158f6:	46ad      	mov	sp, r5
   158f8:	4620      	mov	r0, r4
   158fa:	f00f f9c4 	bl	24c86 <le_conn_param_neg_reply>
}
   158fe:	3708      	adds	r7, #8
   15900:	46bd      	mov	sp, r7
   15902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!le_param_req(conn, &param)) {
   15906:	4639      	mov	r1, r7
   15908:	f001 ff9e 	bl	17848 <le_param_req>
   1590c:	b938      	cbnz	r0, 1591e <le_conn_param_req+0x8a>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1590e:	211e      	movs	r1, #30
   15910:	4620      	mov	r0, r4
   15912:	f00f f9b8 	bl	24c86 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   15916:	4630      	mov	r0, r6
   15918:	f00f fc3b 	bl	25192 <bt_conn_unref>
   1591c:	e7ef      	b.n	158fe <le_conn_param_req+0x6a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1591e:	210e      	movs	r1, #14
   15920:	f242 0020 	movw	r0, #8224	; 0x2020
   15924:	f7ff fb9c 	bl	15060 <bt_hci_cmd_create>
	if (!buf) {
   15928:	4605      	mov	r5, r0
   1592a:	2800      	cmp	r0, #0
   1592c:	d0f3      	beq.n	15916 <le_conn_param_req+0x82>
   1592e:	210e      	movs	r1, #14
   15930:	300c      	adds	r0, #12
   15932:	f011 f949 	bl	26bc8 <net_buf_simple_add>
   15936:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   15938:	220e      	movs	r2, #14
   1593a:	2100      	movs	r1, #0
   1593c:	f00f f812 	bl	24964 <memset>
	cp->handle = sys_cpu_to_le16(handle);
   15940:	f8a4 8000 	strh.w	r8, [r4]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   15944:	883b      	ldrh	r3, [r7, #0]
   15946:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   15948:	887b      	ldrh	r3, [r7, #2]
   1594a:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1594c:	88bb      	ldrh	r3, [r7, #4]
   1594e:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   15950:	88fb      	ldrh	r3, [r7, #6]
   15952:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   15954:	4629      	mov	r1, r5
   15956:	f242 0020 	movw	r0, #8224	; 0x2020
   1595a:	f7ff fefd 	bl	15758 <bt_hci_cmd_send>
   1595e:	e7da      	b.n	15916 <le_conn_param_req+0x82>
   15960:	00029773 	.word	0x00029773
   15964:	00028174 	.word	0x00028174

00015968 <hci_tx_thread>:
{
   15968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   1596c:	f8df 8154 	ldr.w	r8, [pc, #340]	; 15ac4 <hci_tx_thread+0x15c>
		BT_ASSERT(err == 0);
   15970:	f8df 9154 	ldr.w	r9, [pc, #340]	; 15ac8 <hci_tx_thread+0x160>
{
   15974:	b087      	sub	sp, #28
   15976:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
   15978:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1597c:	4853      	ldr	r0, [pc, #332]	; (15acc <hci_tx_thread+0x164>)
		events[0].state = K_POLL_STATE_NOT_READY;
   1597e:	f36f 3394 	bfc	r3, #14, #7
   15982:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   15986:	f001 fda5 	bl	174d4 <bt_conn_prepare_events>
   1598a:	1c45      	adds	r5, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1598c:	484d      	ldr	r0, [pc, #308]	; (15ac4 <hci_tx_thread+0x15c>)
   1598e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15996:	4629      	mov	r1, r5
   15998:	f00a fe46 	bl	20628 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   1599c:	b160      	cbz	r0, 159b8 <hci_tx_thread+0x50>
   1599e:	494c      	ldr	r1, [pc, #304]	; (15ad0 <hci_tx_thread+0x168>)
   159a0:	484c      	ldr	r0, [pc, #304]	; (15ad4 <hci_tx_thread+0x16c>)
   159a2:	f640 23c8 	movw	r3, #2760	; 0xac8
   159a6:	464a      	mov	r2, r9
   159a8:	f00e fa40 	bl	23e2c <assert_print>
   159ac:	4040      	eors	r0, r0
   159ae:	f380 8811 	msr	BASEPRI, r0
   159b2:	f04f 0003 	mov.w	r0, #3
   159b6:	df02      	svc	2
{
   159b8:	4e42      	ldr	r6, [pc, #264]	; (15ac4 <hci_tx_thread+0x15c>)
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   159ba:	f04f 0a03 	mov.w	sl, #3
	for (; count; ev++, count--) {
   159be:	b915      	cbnz	r5, 159c6 <hci_tx_thread+0x5e>
	z_impl_k_yield();
   159c0:	f00a fb22 	bl	20008 <z_impl_k_yield>
	while (1) {
   159c4:	e7d8      	b.n	15978 <hci_tx_thread+0x10>
		switch (ev->state) {
   159c6:	68f3      	ldr	r3, [r6, #12]
   159c8:	f3c3 3386 	ubfx	r3, r3, #14, #7
   159cc:	2b02      	cmp	r3, #2
   159ce:	d960      	bls.n	15a92 <hci_tx_thread+0x12a>
   159d0:	2b04      	cmp	r3, #4
   159d2:	d168      	bne.n	15aa6 <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   159d4:	7b33      	ldrb	r3, [r6, #12]
   159d6:	2b00      	cmp	r3, #0
   159d8:	d15e      	bne.n	15a98 <hci_tx_thread+0x130>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   159da:	483f      	ldr	r0, [pc, #252]	; (15ad8 <hci_tx_thread+0x170>)
   159dc:	2200      	movs	r2, #0
   159de:	2300      	movs	r3, #0
   159e0:	f011 f897 	bl	26b12 <net_buf_get>
	BT_ASSERT(buf);
   159e4:	4604      	mov	r4, r0
   159e6:	b960      	cbnz	r0, 15a02 <hci_tx_thread+0x9a>
   159e8:	493c      	ldr	r1, [pc, #240]	; (15adc <hci_tx_thread+0x174>)
   159ea:	483a      	ldr	r0, [pc, #232]	; (15ad4 <hci_tx_thread+0x16c>)
   159ec:	f640 235a 	movw	r3, #2650	; 0xa5a
   159f0:	464a      	mov	r2, r9
   159f2:	f00e fa1b 	bl	23e2c <assert_print>
   159f6:	4040      	eors	r0, r0
   159f8:	f380 8811 	msr	BASEPRI, r0
   159fc:	f04f 0003 	mov.w	r0, #3
   15a00:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   15a02:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 15ae0 <hci_tx_thread+0x178>
	return z_impl_k_sem_take(sem, timeout);
   15a06:	4837      	ldr	r0, [pc, #220]	; (15ae4 <hci_tx_thread+0x17c>)
   15a08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15a0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15a10:	f009 fec2 	bl	1f798 <z_impl_k_sem_take>
   15a14:	f8db 3140 	ldr.w	r3, [fp, #320]	; 0x140
   15a18:	b18b      	cbz	r3, 15a3e <hci_tx_thread+0xd6>
		LOG_ERR("Uncleared pending sent_cmd");
   15a1a:	4b33      	ldr	r3, [pc, #204]	; (15ae8 <hci_tx_thread+0x180>)
   15a1c:	4833      	ldr	r0, [pc, #204]	; (15aec <hci_tx_thread+0x184>)
   15a1e:	617b      	str	r3, [r7, #20]
   15a20:	f107 0210 	add.w	r2, r7, #16
   15a24:	2302      	movs	r3, #2
   15a26:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15a2a:	613b      	str	r3, [r7, #16]
   15a2c:	f00f f887 	bl	24b3e <z_log_msg_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   15a30:	f8db 0140 	ldr.w	r0, [fp, #320]	; 0x140
   15a34:	f006 f9c8 	bl	1bdc8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   15a38:	2300      	movs	r3, #0
   15a3a:	f8cb 3140 	str.w	r3, [fp, #320]	; 0x140
	bt_dev.sent_cmd = net_buf_ref(buf);
   15a3e:	4620      	mov	r0, r4
   15a40:	f011 f898 	bl	26b74 <net_buf_ref>
   15a44:	f8cb 0140 	str.w	r0, [fp, #320]	; 0x140
	err = bt_send(buf);
   15a48:	4620      	mov	r0, r4
   15a4a:	f7ff fe7d 	bl	15748 <bt_send>
	if (err) {
   15a4e:	b300      	cbz	r0, 15a92 <hci_tx_thread+0x12a>
		LOG_ERR("Unable to send to driver (err %d)", err);
   15a50:	46eb      	mov	fp, sp
   15a52:	b088      	sub	sp, #32
   15a54:	466a      	mov	r2, sp
   15a56:	4b26      	ldr	r3, [pc, #152]	; (15af0 <hci_tx_thread+0x188>)
   15a58:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15a5c:	2303      	movs	r3, #3
   15a5e:	f842 3f10 	str.w	r3, [r2, #16]!
   15a62:	4822      	ldr	r0, [pc, #136]	; (15aec <hci_tx_thread+0x184>)
   15a64:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15a68:	f00f f869 	bl	24b3e <z_log_msg_static_create.constprop.0>
   15a6c:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
   15a6e:	481d      	ldr	r0, [pc, #116]	; (15ae4 <hci_tx_thread+0x17c>)
   15a70:	f009 fe6c 	bl	1f74c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   15a74:	4620      	mov	r0, r4
   15a76:	f006 f8ed 	bl	1bc54 <net_buf_id>
   15a7a:	4b1e      	ldr	r3, [pc, #120]	; (15af4 <hci_tx_thread+0x18c>)
   15a7c:	220c      	movs	r2, #12
   15a7e:	fb02 3000 	mla	r0, r2, r0, r3
   15a82:	211f      	movs	r1, #31
   15a84:	8840      	ldrh	r0, [r0, #2]
   15a86:	4622      	mov	r2, r4
   15a88:	f7ff f8fc 	bl	14c84 <hci_cmd_done>
		net_buf_unref(buf);
   15a8c:	4620      	mov	r0, r4
   15a8e:	f006 f99b 	bl	1bdc8 <net_buf_unref>
	for (; count; ev++, count--) {
   15a92:	3614      	adds	r6, #20
   15a94:	3d01      	subs	r5, #1
   15a96:	e792      	b.n	159be <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   15a98:	2b01      	cmp	r3, #1
   15a9a:	d1fa      	bne.n	15a92 <hci_tx_thread+0x12a>
					conn = CONTAINER_OF(ev->fifo,
   15a9c:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   15a9e:	3838      	subs	r0, #56	; 0x38
   15aa0:	f002 f8ba 	bl	17c18 <bt_conn_process_tx>
   15aa4:	e7f5      	b.n	15a92 <hci_tx_thread+0x12a>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   15aa6:	466c      	mov	r4, sp
   15aa8:	b088      	sub	sp, #32
   15aaa:	466a      	mov	r2, sp
   15aac:	4912      	ldr	r1, [pc, #72]	; (15af8 <hci_tx_thread+0x190>)
   15aae:	480f      	ldr	r0, [pc, #60]	; (15aec <hci_tx_thread+0x184>)
		switch (ev->state) {
   15ab0:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   15ab4:	f842 af10 	str.w	sl, [r2, #16]!
   15ab8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15abc:	f00f f83f 	bl	24b3e <z_log_msg_static_create.constprop.0>
   15ac0:	46a5      	mov	sp, r4
   15ac2:	e7e6      	b.n	15a92 <hci_tx_thread+0x12a>
   15ac4:	20000590 	.word	0x20000590
   15ac8:	000297df 	.word	0x000297df
   15acc:	200005a4 	.word	0x200005a4
   15ad0:	00029996 	.word	0x00029996
   15ad4:	0002982c 	.word	0x0002982c
   15ad8:	200004d4 	.word	0x200004d4
   15adc:	0002adab 	.word	0x0002adab
   15ae0:	20000388 	.word	0x20000388
   15ae4:	200004b0 	.word	0x200004b0
   15ae8:	00029b10 	.word	0x00029b10
   15aec:	00028174 	.word	0x00028174
   15af0:	00029ad7 	.word	0x00029ad7
   15af4:	20003168 	.word	0x20003168
   15af8:	00029b2b 	.word	0x00029b2b

00015afc <hci_event_prio>:
{
   15afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15b00:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   15b02:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   15b06:	4630      	mov	r0, r6
   15b08:	f011 f895 	bl	26c36 <net_buf_simple_headroom>
	state->len = buf->len;
   15b0c:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15b10:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   15b14:	4605      	mov	r5, r0
   15b16:	d80c      	bhi.n	15b32 <hci_event_prio+0x36>
   15b18:	4a1c      	ldr	r2, [pc, #112]	; (15b8c <hci_event_prio+0x90>)
   15b1a:	491d      	ldr	r1, [pc, #116]	; (15b90 <hci_event_prio+0x94>)
   15b1c:	481d      	ldr	r0, [pc, #116]	; (15b94 <hci_event_prio+0x98>)
   15b1e:	f640 636f 	movw	r3, #3695	; 0xe6f
   15b22:	f00e f983 	bl	23e2c <assert_print>
   15b26:	4040      	eors	r0, r0
   15b28:	f380 8811 	msr	BASEPRI, r0
   15b2c:	f04f 0003 	mov.w	r0, #3
   15b30:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   15b32:	4630      	mov	r0, r6
   15b34:	2102      	movs	r1, #2
   15b36:	f011 f86e 	bl	26c16 <net_buf_simple_pull_mem>
   15b3a:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15b3c:	7800      	ldrb	r0, [r0, #0]
   15b3e:	f00e ffc4 	bl	24aca <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   15b42:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15b44:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   15b46:	d40c      	bmi.n	15b62 <hci_event_prio+0x66>
   15b48:	4a10      	ldr	r2, [pc, #64]	; (15b8c <hci_event_prio+0x90>)
   15b4a:	4913      	ldr	r1, [pc, #76]	; (15b98 <hci_event_prio+0x9c>)
   15b4c:	4811      	ldr	r0, [pc, #68]	; (15b94 <hci_event_prio+0x98>)
   15b4e:	f640 6373 	movw	r3, #3699	; 0xe73
   15b52:	f00e f96b 	bl	23e2c <assert_print>
   15b56:	4040      	eors	r0, r0
   15b58:	f380 8811 	msr	BASEPRI, r0
   15b5c:	f04f 0003 	mov.w	r0, #3
   15b60:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   15b62:	2305      	movs	r3, #5
   15b64:	4a0d      	ldr	r2, [pc, #52]	; (15b9c <hci_event_prio+0xa0>)
   15b66:	7838      	ldrb	r0, [r7, #0]
   15b68:	4621      	mov	r1, r4
   15b6a:	f7fe ff53 	bl	14a14 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   15b6e:	07b3      	lsls	r3, r6, #30
   15b70:	d507      	bpl.n	15b82 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   15b72:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   15b74:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   15b78:	fa13 f585 	uxtah	r5, r3, r5
   15b7c:	60e5      	str	r5, [r4, #12]
}
   15b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   15b82:	4620      	mov	r0, r4
}
   15b84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   15b88:	f006 b91e 	b.w	1bdc8 <net_buf_unref>
   15b8c:	000297df 	.word	0x000297df
   15b90:	00029813 	.word	0x00029813
   15b94:	0002982c 	.word	0x0002982c
   15b98:	00029b4c 	.word	0x00029b4c
   15b9c:	00028514 	.word	0x00028514

00015ba0 <bt_recv>:
{
   15ba0:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   15ba2:	7e03      	ldrb	r3, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   15ba4:	2b01      	cmp	r3, #1
{
   15ba6:	af00      	add	r7, sp, #0
   15ba8:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   15baa:	d006      	beq.n	15bba <bt_recv+0x1a>
   15bac:	2b03      	cmp	r3, #3
   15bae:	d112      	bne.n	15bd6 <bt_recv+0x36>
			rx_queue_put(buf);
   15bb0:	f7fe fe5c 	bl	1486c <rx_queue_put>
		return 0;
   15bb4:	2000      	movs	r0, #0
}
   15bb6:	46bd      	mov	sp, r7
   15bb8:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15bba:	68c3      	ldr	r3, [r0, #12]
   15bbc:	7818      	ldrb	r0, [r3, #0]
   15bbe:	f00e ff84 	bl	24aca <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   15bc2:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15bc4:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   15bc6:	d502      	bpl.n	15bce <bt_recv+0x2e>
			hci_event_prio(buf);
   15bc8:	4620      	mov	r0, r4
   15bca:	f7ff ff97 	bl	15afc <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   15bce:	07ab      	lsls	r3, r5, #30
   15bd0:	d5f0      	bpl.n	15bb4 <bt_recv+0x14>
			rx_queue_put(buf);
   15bd2:	4620      	mov	r0, r4
   15bd4:	e7ec      	b.n	15bb0 <bt_recv+0x10>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   15bd6:	466d      	mov	r5, sp
   15bd8:	b088      	sub	sp, #32
   15bda:	466a      	mov	r2, sp
   15bdc:	4908      	ldr	r1, [pc, #32]	; (15c00 <bt_recv+0x60>)
   15bde:	4809      	ldr	r0, [pc, #36]	; (15c04 <bt_recv+0x64>)
	switch (bt_buf_get_type(buf)) {
   15be0:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   15be4:	2303      	movs	r3, #3
   15be6:	f842 3f10 	str.w	r3, [r2, #16]!
   15bea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15bee:	f00e ffa6 	bl	24b3e <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   15bf2:	4620      	mov	r0, r4
   15bf4:	46ad      	mov	sp, r5
   15bf6:	f006 f8e7 	bl	1bdc8 <net_buf_unref>
		return -EINVAL;
   15bfa:	f06f 0015 	mvn.w	r0, #21
   15bfe:	e7da      	b.n	15bb6 <bt_recv+0x16>
   15c00:	00029b65 	.word	0x00029b65
   15c04:	00028174 	.word	0x00028174

00015c08 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   15c08:	4a08      	ldr	r2, [pc, #32]	; (15c2c <bt_hci_driver_register+0x24>)
{
   15c0a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   15c0c:	f8d2 0164 	ldr.w	r0, [r2, #356]	; 0x164
   15c10:	b930      	cbnz	r0, 15c20 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   15c12:	68d9      	ldr	r1, [r3, #12]
   15c14:	b139      	cbz	r1, 15c26 <bt_hci_driver_register+0x1e>
   15c16:	6959      	ldr	r1, [r3, #20]
   15c18:	b129      	cbz	r1, 15c26 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   15c1a:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
	return 0;
   15c1e:	4770      	bx	lr
		return -EALREADY;
   15c20:	f06f 0077 	mvn.w	r0, #119	; 0x77
   15c24:	4770      	bx	lr
		return -EINVAL;
   15c26:	f06f 0015 	mvn.w	r0, #21
}
   15c2a:	4770      	bx	lr
   15c2c:	20000388 	.word	0x20000388

00015c30 <bt_finalize_init>:
{
   15c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   15c34:	4c45      	ldr	r4, [pc, #276]	; (15d4c <bt_finalize_init+0x11c>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15c36:	4846      	ldr	r0, [pc, #280]	; (15d50 <bt_finalize_init+0x120>)
   15c38:	4d46      	ldr	r5, [pc, #280]	; (15d54 <bt_finalize_init+0x124>)
{
   15c3a:	b083      	sub	sp, #12
   15c3c:	2104      	movs	r1, #4
   15c3e:	af00      	add	r7, sp, #0
   15c40:	f00e ff6e 	bl	24b20 <atomic_or>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   15c44:	79e2      	ldrb	r2, [r4, #7]
   15c46:	4b44      	ldr	r3, [pc, #272]	; (15d58 <bt_finalize_init+0x128>)
   15c48:	4620      	mov	r0, r4
   15c4a:	2a01      	cmp	r2, #1
   15c4c:	bf88      	it	hi
   15c4e:	461d      	movhi	r5, r3
   15c50:	466e      	mov	r6, sp
   15c52:	f7fe fc9d 	bl	14590 <bt_addr_le_str>
   15c56:	b08a      	sub	sp, #40	; 0x28
   15c58:	466b      	mov	r3, sp
   15c5a:	4940      	ldr	r1, [pc, #256]	; (15d5c <bt_finalize_init+0x12c>)
   15c5c:	61d8      	str	r0, [r3, #28]
   15c5e:	e9c3 1505 	strd	r1, r5, [r3, #20]
   15c62:	493f      	ldr	r1, [pc, #252]	; (15d60 <bt_finalize_init+0x130>)
   15c64:	6079      	str	r1, [r7, #4]
   15c66:	f103 0210 	add.w	r2, r3, #16
   15c6a:	1d38      	adds	r0, r7, #4
   15c6c:	f103 011f 	add.w	r1, r3, #31
   15c70:	f103 0523 	add.w	r5, r3, #35	; 0x23
   15c74:	f810 cb01 	ldrb.w	ip, [r0], #1
   15c78:	f801 cf01 	strb.w	ip, [r1, #1]!
   15c7c:	42a9      	cmp	r1, r5
   15c7e:	d1f9      	bne.n	15c74 <bt_finalize_init+0x44>
   15c80:	4938      	ldr	r1, [pc, #224]	; (15d64 <bt_finalize_init+0x134>)
   15c82:	6119      	str	r1, [r3, #16]
   15c84:	4838      	ldr	r0, [pc, #224]	; (15d68 <bt_finalize_init+0x138>)
   15c86:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 15d4c <bt_finalize_init+0x11c>
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   15c8a:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 15d6c <bt_finalize_init+0x13c>
   15c8e:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 15d68 <bt_finalize_init+0x138>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   15c92:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
   15c96:	f00e ff52 	bl	24b3e <z_log_msg_static_create.constprop.0>
   15c9a:	46b5      	mov	sp, r6
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   15c9c:	4e34      	ldr	r6, [pc, #208]	; (15d70 <bt_finalize_init+0x140>)
	for (i = 1; i < bt_dev.id_count; i++) {
   15c9e:	2501      	movs	r5, #1
   15ca0:	79e3      	ldrb	r3, [r4, #7]
   15ca2:	429d      	cmp	r5, r3
   15ca4:	f10b 0b07 	add.w	fp, fp, #7
   15ca8:	db39      	blt.n	15d1e <bt_finalize_init+0xee>
	LOG_INF("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   15caa:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
   15cae:	4628      	mov	r0, r5
   15cb0:	f7fe fd60 	bl	14774 <ver_str>
   15cb4:	466e      	mov	r6, sp
   15cb6:	b08c      	sub	sp, #48	; 0x30
   15cb8:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
   15cbc:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
   15cc0:	466a      	mov	r2, sp
   15cc2:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 15d74 <bt_finalize_init+0x144>
   15cc6:	6253      	str	r3, [r2, #36]	; 0x24
   15cc8:	e9c2 5107 	strd	r5, r1, [r2, #28]
   15ccc:	4b2a      	ldr	r3, [pc, #168]	; (15d78 <bt_finalize_init+0x148>)
   15cce:	f44f 7500 	mov.w	r5, #512	; 0x200
   15cd2:	e9c2 c005 	strd	ip, r0, [r2, #20]
   15cd6:	8515      	strh	r5, [r2, #40]	; 0x28
   15cd8:	f44f 5153 	mov.w	r1, #13504	; 0x34c0
   15cdc:	f842 3f10 	str.w	r3, [r2, #16]!
   15ce0:	4821      	ldr	r0, [pc, #132]	; (15d68 <bt_finalize_init+0x138>)
   15ce2:	f00e ff2c 	bl	24b3e <z_log_msg_static_create.constprop.0>
   15ce6:	46b5      	mov	sp, r6
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
   15ce8:	f894 6071 	ldrb.w	r6, [r4, #113]	; 0x71
   15cec:	4630      	mov	r0, r6
   15cee:	f7fe fd41 	bl	14774 <ver_str>
   15cf2:	b08a      	sub	sp, #40	; 0x28
   15cf4:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
   15cf8:	466a      	mov	r2, sp
   15cfa:	4920      	ldr	r1, [pc, #128]	; (15d7c <bt_finalize_init+0x14c>)
   15cfc:	8495      	strh	r5, [r2, #36]	; 0x24
   15cfe:	e9c2 6307 	strd	r6, r3, [r2, #28]
   15d02:	4b1f      	ldr	r3, [pc, #124]	; (15d80 <bt_finalize_init+0x150>)
   15d04:	e9c2 1005 	strd	r1, r0, [r2, #20]
   15d08:	f842 3f10 	str.w	r3, [r2, #16]!
   15d0c:	4816      	ldr	r0, [pc, #88]	; (15d68 <bt_finalize_init+0x138>)
   15d0e:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
   15d12:	f00e ff14 	bl	24b3e <z_log_msg_static_create.constprop.0>
}
   15d16:	370c      	adds	r7, #12
   15d18:	46bd      	mov	sp, r7
   15d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   15d1e:	4658      	mov	r0, fp
   15d20:	f7fe fc36 	bl	14590 <bt_addr_le_str>
   15d24:	46ea      	mov	sl, sp
   15d26:	b08a      	sub	sp, #40	; 0x28
   15d28:	466a      	mov	r2, sp
   15d2a:	f240 3301 	movw	r3, #769	; 0x301
   15d2e:	e9c2 6505 	strd	r6, r5, [r2, #20]
   15d32:	61d0      	str	r0, [r2, #28]
   15d34:	8413      	strh	r3, [r2, #32]
   15d36:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   15d3a:	f842 8f10 	str.w	r8, [r2, #16]!
   15d3e:	4648      	mov	r0, r9
   15d40:	f00e fefd 	bl	24b3e <z_log_msg_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
   15d44:	3501      	adds	r5, #1
   15d46:	46d5      	mov	sp, sl
   15d48:	e7aa      	b.n	15ca0 <bt_finalize_init+0x70>
   15d4a:	bf00      	nop
   15d4c:	20000388 	.word	0x20000388
   15d50:	2000045c 	.word	0x2000045c
   15d54:	00029020 	.word	0x00029020
   15d58:	00029b79 	.word	0x00029b79
   15d5c:	00029b7d 	.word	0x00029b7d
   15d60:	03010200 	.word	0x03010200
   15d64:	02000004 	.word	0x02000004
   15d68:	00028174 	.word	0x00028174
   15d6c:	01000004 	.word	0x01000004
   15d70:	00029b8c 	.word	0x00029b8c
   15d74:	00029b9d 	.word	0x00029b9d
   15d78:	01000006 	.word	0x01000006
   15d7c:	00029bdb 	.word	0x00029bdb
   15d80:	01000005 	.word	0x01000005

00015d84 <init_work>:
{
   15d84:	b510      	push	{r4, lr}
	err = bt_init();
   15d86:	f7fa ff07 	bl	10b98 <bt_init>
	if (ready_cb) {
   15d8a:	4b03      	ldr	r3, [pc, #12]	; (15d98 <init_work+0x14>)
   15d8c:	681b      	ldr	r3, [r3, #0]
   15d8e:	b113      	cbz	r3, 15d96 <init_work+0x12>
}
   15d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   15d94:	4718      	bx	r3
}
   15d96:	bd10      	pop	{r4, pc}
   15d98:	20003180 	.word	0x20003180

00015d9c <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   15d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
   15d9e:	4d3c      	ldr	r5, [pc, #240]	; (15e90 <bt_enable+0xf4>)
{
   15da0:	b08f      	sub	sp, #60	; 0x3c
	if (!bt_dev.drv) {
   15da2:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
{
   15da6:	af08      	add	r7, sp, #32
   15da8:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   15daa:	b983      	cbnz	r3, 15dce <bt_enable+0x32>
		LOG_ERR("No HCI driver registered");
   15dac:	4b39      	ldr	r3, [pc, #228]	; (15e94 <bt_enable+0xf8>)
   15dae:	617b      	str	r3, [r7, #20]
   15db0:	4839      	ldr	r0, [pc, #228]	; (15e98 <bt_enable+0xfc>)
   15db2:	2302      	movs	r3, #2
   15db4:	f107 0210 	add.w	r2, r7, #16
   15db8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   15dbc:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("No HCI driver registered");
   15dc0:	613b      	str	r3, [r7, #16]
   15dc2:	f00e febc 	bl	24b3e <z_log_msg_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   15dc6:	4620      	mov	r0, r4
   15dc8:	371c      	adds	r7, #28
   15dca:	46bd      	mov	sp, r7
   15dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15dce:	f06f 0102 	mvn.w	r1, #2
   15dd2:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
   15dd6:	f00e feb5 	bl	24b44 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   15dda:	2101      	movs	r1, #1
   15ddc:	f00e fea0 	bl	24b20 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15de0:	ea10 0401 	ands.w	r4, r0, r1
   15de4:	d150      	bne.n	15e88 <bt_enable+0xec>
	ready_cb = cb;
   15de6:	4b2d      	ldr	r3, [pc, #180]	; (15e9c <bt_enable+0x100>)
   15de8:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   15dea:	460a      	mov	r2, r1
   15dec:	f505 7094 	add.w	r0, r5, #296	; 0x128
   15df0:	f011 fbde 	bl	275b0 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   15df4:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
   15df8:	f011 fbb5 	bl	27566 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   15dfc:	2200      	movs	r2, #0
   15dfe:	2300      	movs	r3, #0
   15e00:	e9cd 2306 	strd	r2, r3, [sp, #24]
   15e04:	f06f 0308 	mvn.w	r3, #8
   15e08:	e9cd 4302 	strd	r4, r3, [sp, #8]
   15e0c:	e9cd 4400 	strd	r4, r4, [sp]
   15e10:	4b23      	ldr	r3, [pc, #140]	; (15ea0 <bt_enable+0x104>)
   15e12:	4924      	ldr	r1, [pc, #144]	; (15ea4 <bt_enable+0x108>)
   15e14:	9404      	str	r4, [sp, #16]
   15e16:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   15e1a:	4823      	ldr	r0, [pc, #140]	; (15ea8 <bt_enable+0x10c>)
   15e1c:	f009 fb08 	bl	1f430 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   15e20:	4922      	ldr	r1, [pc, #136]	; (15eac <bt_enable+0x110>)
   15e22:	4821      	ldr	r0, [pc, #132]	; (15ea8 <bt_enable+0x10c>)
   15e24:	f011 fb10 	bl	27448 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   15e28:	4821      	ldr	r0, [pc, #132]	; (15eb0 <bt_enable+0x114>)
   15e2a:	f011 fc82 	bl	27732 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   15e2e:	4921      	ldr	r1, [pc, #132]	; (15eb4 <bt_enable+0x118>)
   15e30:	481f      	ldr	r0, [pc, #124]	; (15eb0 <bt_enable+0x114>)
   15e32:	9400      	str	r4, [sp, #0]
   15e34:	f06f 0307 	mvn.w	r3, #7
   15e38:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   15e3c:	f009 fe08 	bl	1fa50 <k_work_queue_start>
   15e40:	491d      	ldr	r1, [pc, #116]	; (15eb8 <bt_enable+0x11c>)
   15e42:	481b      	ldr	r0, [pc, #108]	; (15eb0 <bt_enable+0x114>)
   15e44:	f011 fb00 	bl	27448 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   15e48:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   15e4c:	68db      	ldr	r3, [r3, #12]
   15e4e:	4798      	blx	r3
	if (err) {
   15e50:	4604      	mov	r4, r0
   15e52:	b178      	cbz	r0, 15e74 <bt_enable+0xd8>
		LOG_ERR("HCI driver open failed (%d)", err);
   15e54:	466d      	mov	r5, sp
   15e56:	462a      	mov	r2, r5
   15e58:	b088      	sub	sp, #32
   15e5a:	4b18      	ldr	r3, [pc, #96]	; (15ebc <bt_enable+0x120>)
   15e5c:	e9c5 3005 	strd	r3, r0, [r5, #20]
   15e60:	2303      	movs	r3, #3
   15e62:	f842 3f10 	str.w	r3, [r2, #16]!
   15e66:	480c      	ldr	r0, [pc, #48]	; (15e98 <bt_enable+0xfc>)
   15e68:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15e6c:	f00e fe67 	bl	24b3e <z_log_msg_static_create.constprop.0>
   15e70:	46ad      	mov	sp, r5
		return err;
   15e72:	e7a8      	b.n	15dc6 <bt_enable+0x2a>
	if (!cb) {
   15e74:	b91e      	cbnz	r6, 15e7e <bt_enable+0xe2>
		return bt_init();
   15e76:	f7fa fe8f 	bl	10b98 <bt_init>
   15e7a:	4604      	mov	r4, r0
   15e7c:	e7a3      	b.n	15dc6 <bt_enable+0x2a>
	k_work_submit(&bt_dev.init);
   15e7e:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   15e82:	f009 fddf 	bl	1fa44 <k_work_submit>
	return 0;
   15e86:	e79e      	b.n	15dc6 <bt_enable+0x2a>
		return -EALREADY;
   15e88:	f06f 0477 	mvn.w	r4, #119	; 0x77
   15e8c:	e79b      	b.n	15dc6 <bt_enable+0x2a>
   15e8e:	bf00      	nop
   15e90:	20000388 	.word	0x20000388
   15e94:	00029d1d 	.word	0x00029d1d
   15e98:	00028174 	.word	0x00028174
   15e9c:	20003180 	.word	0x20003180
   15ea0:	00015969 	.word	0x00015969
   15ea4:	20004f00 	.word	0x20004f00
   15ea8:	20001ca0 	.word	0x20001ca0
   15eac:	00029d36 	.word	0x00029d36
   15eb0:	20001d20 	.word	0x20001d20
   15eb4:	20005540 	.word	0x20005540
   15eb8:	00029d3c 	.word	0x00029d3c
   15ebc:	00029d42 	.word	0x00029d42

00015ec0 <bt_is_ready>:
   15ec0:	4b04      	ldr	r3, [pc, #16]	; (15ed4 <bt_is_ready+0x14>)
   15ec2:	f3bf 8f5b 	dmb	ish
   15ec6:	6818      	ldr	r0, [r3, #0]
   15ec8:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   15ecc:	f3c0 0080 	ubfx	r0, r0, #2, #1
   15ed0:	4770      	bx	lr
   15ed2:	bf00      	nop
   15ed4:	2000045c 	.word	0x2000045c

00015ed8 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   15ed8:	4800      	ldr	r0, [pc, #0]	; (15edc <bt_get_name+0x4>)
   15eda:	4770      	bx	lr
   15edc:	00028ec3 	.word	0x00028ec3

00015ee0 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   15ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   15ee2:	4f0a      	ldr	r7, [pc, #40]	; (15f0c <id_find+0x2c>)
{
   15ee4:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   15ee6:	2500      	movs	r5, #0
   15ee8:	79fb      	ldrb	r3, [r7, #7]
   15eea:	b2ec      	uxtb	r4, r5
   15eec:	42a3      	cmp	r3, r4
   15eee:	d802      	bhi.n	15ef6 <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   15ef0:	f06f 0001 	mvn.w	r0, #1
   15ef4:	e009      	b.n	15f0a <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   15ef6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   15efa:	4439      	add	r1, r7
   15efc:	4630      	mov	r0, r6
   15efe:	f00e fee8 	bl	24cd2 <bt_addr_le_eq>
   15f02:	3501      	adds	r5, #1
   15f04:	2800      	cmp	r0, #0
   15f06:	d0ef      	beq.n	15ee8 <id_find+0x8>
   15f08:	4620      	mov	r0, r4
}
   15f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15f0c:	20000388 	.word	0x20000388

00015f10 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   15f10:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15f12:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   15f14:	460d      	mov	r5, r1
   15f16:	b171      	cbz	r1, 15f36 <id_create.constprop.0+0x26>
   15f18:	4912      	ldr	r1, [pc, #72]	; (15f64 <id_create.constprop.0+0x54>)
   15f1a:	4628      	mov	r0, r5
   15f1c:	f00e fed9 	bl	24cd2 <bt_addr_le_eq>
   15f20:	b948      	cbnz	r0, 15f36 <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   15f22:	4811      	ldr	r0, [pc, #68]	; (15f68 <id_create.constprop.0+0x58>)
   15f24:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   15f28:	4629      	mov	r1, r5
   15f2a:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   15f2c:	f00e fed9 	bl	24ce2 <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   15f30:	2000      	movs	r0, #0
}
   15f32:	b003      	add	sp, #12
   15f34:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   15f36:	4668      	mov	r0, sp
   15f38:	f00e fdab 	bl	24a92 <bt_addr_le_create_static>
			if (err) {
   15f3c:	2800      	cmp	r0, #0
   15f3e:	d1f8      	bne.n	15f32 <id_create.constprop.0+0x22>
		} while (id_find(&new_addr) >= 0);
   15f40:	4668      	mov	r0, sp
   15f42:	f7ff ffcd 	bl	15ee0 <id_find>
   15f46:	2800      	cmp	r0, #0
   15f48:	daf5      	bge.n	15f36 <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   15f4a:	4b07      	ldr	r3, [pc, #28]	; (15f68 <id_create.constprop.0+0x58>)
   15f4c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   15f50:	441c      	add	r4, r3
   15f52:	4669      	mov	r1, sp
   15f54:	4620      	mov	r0, r4
   15f56:	f00e fec4 	bl	24ce2 <bt_addr_le_copy>
		if (addr) {
   15f5a:	2d00      	cmp	r5, #0
   15f5c:	d0e8      	beq.n	15f30 <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   15f5e:	4621      	mov	r1, r4
   15f60:	4628      	mov	r0, r5
   15f62:	e7e3      	b.n	15f2c <id_create.constprop.0+0x1c>
   15f64:	0002967b 	.word	0x0002967b
   15f68:	20000388 	.word	0x20000388

00015f6c <bt_id_add.part.0>:
void bt_id_add(struct bt_keys *keys)
   15f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   15f6e:	2100      	movs	r1, #0
void bt_id_add(struct bt_keys *keys)
   15f70:	b087      	sub	sp, #28
   15f72:	4604      	mov	r4, r0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   15f74:	2206      	movs	r2, #6
   15f76:	4608      	mov	r0, r1
   15f78:	f001 fd62 	bl	17a40 <bt_conn_lookup_state_le>
	if (conn) {
   15f7c:	4606      	mov	r6, r0
   15f7e:	b1a8      	cbz	r0, 15fac <bt_id_add.part.0+0x40>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15f80:	f3bf 8f5b 	dmb	ish
   15f84:	4b4a      	ldr	r3, [pc, #296]	; (160b0 <bt_id_add.part.0+0x144>)
   15f86:	e853 1f00 	ldrex	r1, [r3]
   15f8a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   15f8e:	e843 1200 	strex	r2, r1, [r3]
   15f92:	2a00      	cmp	r2, #0
   15f94:	d1f7      	bne.n	15f86 <bt_id_add.part.0+0x1a>
   15f96:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   15f9a:	7a23      	ldrb	r3, [r4, #8]
   15f9c:	f043 0301 	orr.w	r3, r3, #1
   15fa0:	7223      	strb	r3, [r4, #8]
}
   15fa2:	b007      	add	sp, #28
   15fa4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   15fa8:	f00f b8f3 	b.w	25192 <bt_conn_unref>
	if (bt_dev.le.rl_entries) {
   15fac:	4d41      	ldr	r5, [pc, #260]	; (160b4 <bt_id_add.part.0+0x148>)
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   15fae:	4601      	mov	r1, r0
   15fb0:	4841      	ldr	r0, [pc, #260]	; (160b8 <bt_id_add.part.0+0x14c>)
   15fb2:	f000 fc5b 	bl	1686c <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   15fb6:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   15fba:	b173      	cbz	r3, 15fda <bt_id_add.part.0+0x6e>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   15fbc:	4630      	mov	r0, r6
   15fbe:	f00e fed0 	bl	24d62 <addr_res_enable>
		if (err) {
   15fc2:	b150      	cbz	r0, 15fda <bt_id_add.part.0+0x6e>
			LOG_WRN("Failed to disable address resolution");
   15fc4:	4b3d      	ldr	r3, [pc, #244]	; (160bc <bt_id_add.part.0+0x150>)
		LOG_WRN("Set privacy mode command is not supported");
   15fc6:	9305      	str	r3, [sp, #20]
   15fc8:	2302      	movs	r3, #2
   15fca:	9304      	str	r3, [sp, #16]
   15fcc:	aa04      	add	r2, sp, #16
   15fce:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		LOG_ERR("Failed to set privacy mode");
   15fd2:	483b      	ldr	r0, [pc, #236]	; (160c0 <bt_id_add.part.0+0x154>)
   15fd4:	f00e fec2 	bl	24d5c <z_log_msg_static_create.constprop.0>
		goto done;
   15fd8:	e026      	b.n	16028 <bt_id_add.part.0+0xbc>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   15fda:	f895 2121 	ldrb.w	r2, [r5, #289]	; 0x121
   15fde:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
   15fe2:	429a      	cmp	r2, r3
   15fe4:	d12a      	bne.n	1603c <bt_id_add.part.0+0xd0>
		LOG_WRN("Resolving list size exceeded. Switching to host.");
   15fe6:	4b37      	ldr	r3, [pc, #220]	; (160c4 <bt_id_add.part.0+0x158>)
   15fe8:	4835      	ldr	r0, [pc, #212]	; (160c0 <bt_id_add.part.0+0x154>)
   15fea:	9305      	str	r3, [sp, #20]
   15fec:	aa04      	add	r2, sp, #16
   15fee:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   15ff2:	2602      	movs	r6, #2
   15ff4:	9604      	str	r6, [sp, #16]
   15ff6:	f00e feb1 	bl	24d5c <z_log_msg_static_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   15ffa:	2200      	movs	r2, #0
   15ffc:	4611      	mov	r1, r2
   15ffe:	f242 0029 	movw	r0, #8233	; 0x2029
   16002:	f7ff f867 	bl	150d4 <bt_hci_cmd_send_sync>
		if (err) {
   16006:	b130      	cbz	r0, 16016 <bt_id_add.part.0+0xaa>
			LOG_ERR("Failed to clear resolution list");
   16008:	4b2f      	ldr	r3, [pc, #188]	; (160c8 <bt_id_add.part.0+0x15c>)
   1600a:	e9cd 6304 	strd	r6, r3, [sp, #16]
		LOG_ERR("Failed to set privacy mode");
   1600e:	aa04      	add	r2, sp, #16
   16010:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16014:	e7dd      	b.n	15fd2 <bt_id_add.part.0+0x66>
		bt_dev.le.rl_entries++;
   16016:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   1601a:	3301      	adds	r3, #1
   1601c:	f885 3121 	strb.w	r3, [r5, #289]	; 0x121
		keys->state |= BT_KEYS_ID_ADDED;
   16020:	7a23      	ldrb	r3, [r4, #8]
   16022:	f043 0304 	orr.w	r3, r3, #4
   16026:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   16028:	2001      	movs	r0, #1
   1602a:	f00e fe9a 	bl	24d62 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1602e:	4827      	ldr	r0, [pc, #156]	; (160cc <bt_id_add.part.0+0x160>)
   16030:	2100      	movs	r1, #0
}
   16032:	b007      	add	sp, #28
   16034:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   16038:	f000 bc18 	b.w	1686c <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1603c:	4622      	mov	r2, r4
   1603e:	1c67      	adds	r7, r4, #1
   16040:	f812 0b2a 	ldrb.w	r0, [r2], #42
   16044:	4639      	mov	r1, r7
   16046:	f00e fe4f 	bl	24ce8 <hci_id_add>
	if (err) {
   1604a:	4606      	mov	r6, r0
   1604c:	b120      	cbz	r0, 16058 <bt_id_add.part.0+0xec>
		LOG_ERR("Failed to add IRK to controller");
   1604e:	4b20      	ldr	r3, [pc, #128]	; (160d0 <bt_id_add.part.0+0x164>)
		LOG_ERR("Failed to set privacy mode");
   16050:	9305      	str	r3, [sp, #20]
   16052:	2302      	movs	r3, #2
   16054:	9304      	str	r3, [sp, #16]
   16056:	e7da      	b.n	1600e <bt_id_add.part.0+0xa2>
	bt_dev.le.rl_entries++;
   16058:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   1605c:	3301      	adds	r3, #1
   1605e:	f885 3121 	strb.w	r3, [r5, #289]	; 0x121
	keys->state |= BT_KEYS_ID_ADDED;
   16062:	7a23      	ldrb	r3, [r4, #8]
   16064:	f043 0304 	orr.w	r3, r3, #4
   16068:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   1606a:	f895 30a7 	ldrb.w	r3, [r5, #167]	; 0xa7
   1606e:	075b      	lsls	r3, r3, #29
   16070:	d401      	bmi.n	16076 <bt_id_add.part.0+0x10a>
		LOG_WRN("Set privacy mode command is not supported");
   16072:	4b18      	ldr	r3, [pc, #96]	; (160d4 <bt_id_add.part.0+0x168>)
   16074:	e7a7      	b.n	15fc6 <bt_id_add.part.0+0x5a>
	bt_addr_le_copy(&cp.id_addr, addr);
   16076:	4639      	mov	r1, r7
   16078:	4668      	mov	r0, sp
   1607a:	f00e fe32 	bl	24ce2 <bt_addr_le_copy>
	cp.mode = mode;
   1607e:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   16080:	2108      	movs	r1, #8
   16082:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   16086:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   1608a:	f7fe ffe9 	bl	15060 <bt_hci_cmd_create>
	if (!buf) {
   1608e:	4604      	mov	r4, r0
   16090:	b160      	cbz	r0, 160ac <bt_id_add.part.0+0x140>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16092:	2208      	movs	r2, #8
   16094:	4669      	mov	r1, sp
   16096:	300c      	adds	r0, #12
   16098:	f010 fd9c 	bl	26bd4 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   1609c:	4632      	mov	r2, r6
   1609e:	4621      	mov	r1, r4
   160a0:	f242 004e 	movw	r0, #8270	; 0x204e
   160a4:	f7ff f816 	bl	150d4 <bt_hci_cmd_send_sync>
	if (err) {
   160a8:	2800      	cmp	r0, #0
   160aa:	d0bd      	beq.n	16028 <bt_id_add.part.0+0xbc>
		LOG_ERR("Failed to set privacy mode");
   160ac:	4b0a      	ldr	r3, [pc, #40]	; (160d8 <bt_id_add.part.0+0x16c>)
   160ae:	e7cf      	b.n	16050 <bt_id_add.part.0+0xe4>
   160b0:	2000045c 	.word	0x2000045c
   160b4:	20000388 	.word	0x20000388
   160b8:	00024e1b 	.word	0x00024e1b
   160bc:	00029e7b 	.word	0x00029e7b
   160c0:	0002817c 	.word	0x0002817c
   160c4:	00029ea0 	.word	0x00029ea0
   160c8:	00029ed1 	.word	0x00029ed1
   160cc:	00024d93 	.word	0x00024d93
   160d0:	00029ef1 	.word	0x00029ef1
   160d4:	00029f11 	.word	0x00029f11
   160d8:	00029f3b 	.word	0x00029f3b

000160dc <set_random_address>:
{
   160dc:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   160de:	4913      	ldr	r1, [pc, #76]	; (1612c <set_random_address+0x50>)
   160e0:	2206      	movs	r2, #6
   160e2:	4605      	mov	r5, r0
   160e4:	f00e fc0c 	bl	24900 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   160e8:	b1d8      	cbz	r0, 16122 <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   160ea:	2106      	movs	r1, #6
   160ec:	f242 0005 	movw	r0, #8197	; 0x2005
   160f0:	f7fe ffb6 	bl	15060 <bt_hci_cmd_create>
	if (!buf) {
   160f4:	4604      	mov	r4, r0
   160f6:	b1b0      	cbz	r0, 16126 <set_random_address+0x4a>
   160f8:	2206      	movs	r2, #6
   160fa:	4629      	mov	r1, r5
   160fc:	300c      	adds	r0, #12
   160fe:	f010 fd69 	bl	26bd4 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   16102:	2200      	movs	r2, #0
   16104:	4621      	mov	r1, r4
   16106:	f242 0005 	movw	r0, #8197	; 0x2005
   1610a:	f7fe ffe3 	bl	150d4 <bt_hci_cmd_send_sync>
	if (err) {
   1610e:	b948      	cbnz	r0, 16124 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
   16110:	2206      	movs	r2, #6
   16112:	4806      	ldr	r0, [pc, #24]	; (1612c <set_random_address+0x50>)
   16114:	4629      	mov	r1, r5
   16116:	f00e fc1a 	bl	2494e <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   1611a:	4b05      	ldr	r3, [pc, #20]	; (16130 <set_random_address+0x54>)
   1611c:	2201      	movs	r2, #1
   1611e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		return 0;
   16122:	2000      	movs	r0, #0
}
   16124:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   16126:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1612a:	e7fb      	b.n	16124 <set_random_address+0x48>
   1612c:	200003f1 	.word	0x200003f1
   16130:	20000388 	.word	0x20000388

00016134 <bt_id_del.part.0>:
void bt_id_del(struct bt_keys *keys)
   16134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   16138:	2100      	movs	r1, #0
void bt_id_del(struct bt_keys *keys)
   1613a:	b087      	sub	sp, #28
   1613c:	4604      	mov	r4, r0
   1613e:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   16140:	2206      	movs	r2, #6
   16142:	4608      	mov	r0, r1
   16144:	f001 fc7c 	bl	17a40 <bt_conn_lookup_state_le>
	if (conn) {
   16148:	4605      	mov	r5, r0
   1614a:	b1b0      	cbz	r0, 1617a <bt_id_del.part.0+0x46>
   1614c:	f3bf 8f5b 	dmb	ish
   16150:	4b3d      	ldr	r3, [pc, #244]	; (16248 <bt_id_del.part.0+0x114>)
   16152:	e853 1f00 	ldrex	r1, [r3]
   16156:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   1615a:	e843 1200 	strex	r2, r1, [r3]
   1615e:	2a00      	cmp	r2, #0
   16160:	d1f7      	bne.n	16152 <bt_id_del.part.0+0x1e>
   16162:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   16166:	7a23      	ldrb	r3, [r4, #8]
   16168:	f043 0302 	orr.w	r3, r3, #2
   1616c:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   1616e:	f00f f810 	bl	25192 <bt_conn_unref>
}
   16172:	371c      	adds	r7, #28
   16174:	46bd      	mov	sp, r7
   16176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   1617a:	4601      	mov	r1, r0
   1617c:	4833      	ldr	r0, [pc, #204]	; (1624c <bt_id_del.part.0+0x118>)
   1617e:	f000 fb75 	bl	1686c <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   16182:	4628      	mov	r0, r5
   16184:	f00e fded 	bl	24d62 <addr_res_enable>
	if (err) {
   16188:	4d31      	ldr	r5, [pc, #196]	; (16250 <bt_id_del.part.0+0x11c>)
   1618a:	4606      	mov	r6, r0
   1618c:	b1d0      	cbz	r0, 161c4 <bt_id_del.part.0+0x90>
		LOG_ERR("Disabling address resolution failed (err %d)", err);
   1618e:	466c      	mov	r4, sp
   16190:	b088      	sub	sp, #32
   16192:	466b      	mov	r3, sp
   16194:	4a2f      	ldr	r2, [pc, #188]	; (16254 <bt_id_del.part.0+0x120>)
   16196:	e9c3 2005 	strd	r2, r0, [r3, #20]
   1619a:	461a      	mov	r2, r3
   1619c:	2303      	movs	r3, #3
   1619e:	f842 3f10 	str.w	r3, [r2, #16]!
   161a2:	482d      	ldr	r0, [pc, #180]	; (16258 <bt_id_del.part.0+0x124>)
   161a4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   161a8:	f00e fdd8 	bl	24d5c <z_log_msg_static_create.constprop.0>
   161ac:	46a5      	mov	sp, r4
	if (bt_dev.le.rl_entries) {
   161ae:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   161b2:	b113      	cbz	r3, 161ba <bt_id_del.part.0+0x86>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   161b4:	2001      	movs	r0, #1
   161b6:	f00e fdd4 	bl	24d62 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   161ba:	4828      	ldr	r0, [pc, #160]	; (1625c <bt_id_del.part.0+0x128>)
   161bc:	2100      	movs	r1, #0
   161be:	f000 fb55 	bl	1686c <bt_le_ext_adv_foreach>
   161c2:	e7d6      	b.n	16172 <bt_id_del.part.0+0x3e>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   161c4:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   161c8:	f895 2120 	ldrb.w	r2, [r5, #288]	; 0x120
   161cc:	429a      	cmp	r2, r3
   161ce:	d20c      	bcs.n	161ea <bt_id_del.part.0+0xb6>
		bt_dev.le.rl_entries--;
   161d0:	3b01      	subs	r3, #1
   161d2:	f885 3121 	strb.w	r3, [r5, #289]	; 0x121
		keys->state &= ~BT_KEYS_ID_ADDED;
   161d6:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   161d8:	4921      	ldr	r1, [pc, #132]	; (16260 <bt_id_del.part.0+0x12c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   161da:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   161de:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   161e0:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   161e2:	2002      	movs	r0, #2
   161e4:	f005 fc0c 	bl	1ba00 <bt_keys_foreach_type>
		goto done;
   161e8:	e7e1      	b.n	161ae <bt_id_del.part.0+0x7a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   161ea:	2107      	movs	r1, #7
   161ec:	f242 0028 	movw	r0, #8232	; 0x2028
   161f0:	f7fe ff36 	bl	15060 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   161f4:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
   161f8:	4680      	mov	r8, r0
   161fa:	b958      	cbnz	r0, 16214 <bt_id_del.part.0+0xe0>
		LOG_ERR("Failed to remove IRK from controller");
   161fc:	4b19      	ldr	r3, [pc, #100]	; (16264 <bt_id_del.part.0+0x130>)
   161fe:	617b      	str	r3, [r7, #20]
   16200:	4815      	ldr	r0, [pc, #84]	; (16258 <bt_id_del.part.0+0x124>)
   16202:	2302      	movs	r3, #2
   16204:	f107 0210 	add.w	r2, r7, #16
   16208:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1620c:	613b      	str	r3, [r7, #16]
   1620e:	f00e fda5 	bl	24d5c <z_log_msg_static_create.constprop.0>
		goto done;
   16212:	e7cc      	b.n	161ae <bt_id_del.part.0+0x7a>
	return net_buf_simple_add(&buf->b, len);
   16214:	2107      	movs	r1, #7
   16216:	300c      	adds	r0, #12
   16218:	f010 fcd6 	bl	26bc8 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1621c:	4649      	mov	r1, r9
   1621e:	f00e fd60 	bl	24ce2 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   16222:	4632      	mov	r2, r6
   16224:	4641      	mov	r1, r8
   16226:	f242 0028 	movw	r0, #8232	; 0x2028
   1622a:	f7fe ff53 	bl	150d4 <bt_hci_cmd_send_sync>
	if (err) {
   1622e:	2800      	cmp	r0, #0
   16230:	d1e4      	bne.n	161fc <bt_id_del.part.0+0xc8>
	bt_dev.le.rl_entries--;
   16232:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   16236:	3b01      	subs	r3, #1
   16238:	f885 3121 	strb.w	r3, [r5, #289]	; 0x121
	keys->state &= ~BT_KEYS_ID_ADDED;
   1623c:	7a23      	ldrb	r3, [r4, #8]
   1623e:	f023 0304 	bic.w	r3, r3, #4
   16242:	7223      	strb	r3, [r4, #8]
   16244:	e7b3      	b.n	161ae <bt_id_del.part.0+0x7a>
   16246:	bf00      	nop
   16248:	2000045c 	.word	0x2000045c
   1624c:	00024e1b 	.word	0x00024e1b
   16250:	20000388 	.word	0x20000388
   16254:	00029f56 	.word	0x00029f56
   16258:	0002817c 	.word	0x0002817c
   1625c:	00024d93 	.word	0x00024d93
   16260:	00024d47 	.word	0x00024d47
   16264:	00029f83 	.word	0x00029f83

00016268 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16268:	4b0a      	ldr	r3, [pc, #40]	; (16294 <bt_id_pending_keys_update+0x2c>)
   1626a:	f3bf 8f5b 	dmb	ish
   1626e:	e853 2f00 	ldrex	r2, [r3]
   16272:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   16276:	e843 1000 	strex	r0, r1, [r3]
   1627a:	2800      	cmp	r0, #0
   1627c:	d1f7      	bne.n	1626e <bt_id_pending_keys_update+0x6>
   1627e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   16282:	0413      	lsls	r3, r2, #16
   16284:	d504      	bpl.n	16290 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
   16286:	4904      	ldr	r1, [pc, #16]	; (16298 <bt_id_pending_keys_update+0x30>)
   16288:	2200      	movs	r2, #0
   1628a:	2002      	movs	r0, #2
   1628c:	f005 bbb8 	b.w	1ba00 <bt_keys_foreach_type>
}
   16290:	4770      	bx	lr
   16292:	bf00      	nop
   16294:	2000045c 	.word	0x2000045c
   16298:	00024eab 	.word	0x00024eab

0001629c <bt_id_find_conflict>:
{
   1629c:	b507      	push	{r0, r1, r2, lr}
	struct bt_id_conflict conflict = {
   1629e:	2300      	movs	r3, #0
   162a0:	e9cd 0300 	strd	r0, r3, [sp]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   162a4:	4904      	ldr	r1, [pc, #16]	; (162b8 <bt_id_find_conflict+0x1c>)
   162a6:	466a      	mov	r2, sp
   162a8:	2002      	movs	r0, #2
   162aa:	f005 fba9 	bl	1ba00 <bt_keys_foreach_type>
}
   162ae:	9801      	ldr	r0, [sp, #4]
   162b0:	b003      	add	sp, #12
   162b2:	f85d fb04 	ldr.w	pc, [sp], #4
   162b6:	bf00      	nop
   162b8:	00024dc1 	.word	0x00024dc1

000162bc <bt_id_add>:
{
   162bc:	b410      	push	{r4}
	CHECKIF(keys == NULL) {
   162be:	4603      	mov	r3, r0
   162c0:	b170      	cbz	r0, 162e0 <bt_id_add+0x24>
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   162c2:	490a      	ldr	r1, [pc, #40]	; (162ec <bt_id_add+0x30>)
   162c4:	f891 4120 	ldrb.w	r4, [r1, #288]	; 0x120
   162c8:	f891 2121 	ldrb.w	r2, [r1, #289]	; 0x121
   162cc:	b10c      	cbz	r4, 162d2 <bt_id_add+0x16>
   162ce:	4294      	cmp	r4, r2
   162d0:	d208      	bcs.n	162e4 <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
   162d2:	3201      	adds	r2, #1
   162d4:	f881 2121 	strb.w	r2, [r1, #289]	; 0x121
		keys->state |= BT_KEYS_ID_ADDED;
   162d8:	7a1a      	ldrb	r2, [r3, #8]
   162da:	f042 0204 	orr.w	r2, r2, #4
   162de:	721a      	strb	r2, [r3, #8]
}
   162e0:	bc10      	pop	{r4}
   162e2:	4770      	bx	lr
   162e4:	bc10      	pop	{r4}
   162e6:	f7ff be41 	b.w	15f6c <bt_id_add.part.0>
   162ea:	bf00      	nop
   162ec:	20000388 	.word	0x20000388

000162f0 <bt_id_del>:
{
   162f0:	b410      	push	{r4}
	CHECKIF(keys == NULL) {
   162f2:	4603      	mov	r3, r0
   162f4:	b198      	cbz	r0, 1631e <bt_id_del+0x2e>
	if (!bt_dev.le.rl_size ||
   162f6:	4c0b      	ldr	r4, [pc, #44]	; (16324 <bt_id_del+0x34>)
   162f8:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   162fc:	f894 2121 	ldrb.w	r2, [r4, #289]	; 0x121
	if (!bt_dev.le.rl_size ||
   16300:	b129      	cbz	r1, 1630e <bt_id_del+0x1e>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   16302:	3101      	adds	r1, #1
	if (!bt_dev.le.rl_size ||
   16304:	428a      	cmp	r2, r1
   16306:	dc03      	bgt.n	16310 <bt_id_del+0x20>
}
   16308:	bc10      	pop	{r4}
   1630a:	f7ff bf13 	b.w	16134 <bt_id_del.part.0>
		if (bt_dev.le.rl_entries > 0) {
   1630e:	b112      	cbz	r2, 16316 <bt_id_del+0x26>
			bt_dev.le.rl_entries--;
   16310:	3a01      	subs	r2, #1
   16312:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
		keys->state &= ~BT_KEYS_ID_ADDED;
   16316:	7a1a      	ldrb	r2, [r3, #8]
   16318:	f022 0204 	bic.w	r2, r2, #4
   1631c:	721a      	strb	r2, [r3, #8]
}
   1631e:	bc10      	pop	{r4}
   16320:	4770      	bx	lr
   16322:	bf00      	nop
   16324:	20000388 	.word	0x20000388

00016328 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   16328:	b570      	push	{r4, r5, r6, lr}
   1632a:	460d      	mov	r5, r1
   1632c:	b086      	sub	sp, #24
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1632e:	4604      	mov	r4, r0
   16330:	b920      	cbnz	r0, 1633c <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   16332:	b31d      	cbz	r5, 1637c <bt_id_create+0x54>
			return -EINVAL;
   16334:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   16338:	b006      	add	sp, #24
   1633a:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1633c:	4921      	ldr	r1, [pc, #132]	; (163c4 <bt_id_create+0x9c>)
   1633e:	f00e fcc8 	bl	24cd2 <bt_addr_le_eq>
   16342:	2800      	cmp	r0, #0
   16344:	d1f5      	bne.n	16332 <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   16346:	7823      	ldrb	r3, [r4, #0]
   16348:	2b01      	cmp	r3, #1
   1634a:	d104      	bne.n	16356 <bt_id_create+0x2e>
   1634c:	79a3      	ldrb	r3, [r4, #6]
   1634e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16352:	2bc0      	cmp	r3, #192	; 0xc0
   16354:	d00a      	beq.n	1636c <bt_id_create+0x44>
			LOG_ERR("Only static random identity address supported");
   16356:	4b1c      	ldr	r3, [pc, #112]	; (163c8 <bt_id_create+0xa0>)
   16358:	9305      	str	r3, [sp, #20]
   1635a:	481c      	ldr	r0, [pc, #112]	; (163cc <bt_id_create+0xa4>)
   1635c:	2302      	movs	r3, #2
   1635e:	aa04      	add	r2, sp, #16
   16360:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16364:	9304      	str	r3, [sp, #16]
   16366:	f00e fcf9 	bl	24d5c <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1636a:	e7e3      	b.n	16334 <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
   1636c:	4620      	mov	r0, r4
   1636e:	f7ff fdb7 	bl	15ee0 <id_find>
   16372:	2800      	cmp	r0, #0
   16374:	dbdd      	blt.n	16332 <bt_id_create+0xa>
			return -EALREADY;
   16376:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1637a:	e7dd      	b.n	16338 <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   1637c:	4d14      	ldr	r5, [pc, #80]	; (163d0 <bt_id_create+0xa8>)
   1637e:	79eb      	ldrb	r3, [r5, #7]
   16380:	2b01      	cmp	r3, #1
   16382:	d01c      	beq.n	163be <bt_id_create+0x96>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16384:	f3bf 8f5b 	dmb	ish
   16388:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
   1638c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   16390:	07db      	lsls	r3, r3, #31
   16392:	d50b      	bpl.n	163ac <bt_id_create+0x84>
	new_id = bt_dev.id_count;
   16394:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   16396:	4621      	mov	r1, r4
   16398:	4630      	mov	r0, r6
   1639a:	f7ff fdb9 	bl	15f10 <id_create.constprop.0>
	if (err) {
   1639e:	2800      	cmp	r0, #0
   163a0:	d1ca      	bne.n	16338 <bt_id_create+0x10>
		bt_dev.id_count++;
   163a2:	79eb      	ldrb	r3, [r5, #7]
   163a4:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
   163a6:	4630      	mov	r0, r6
		bt_dev.id_count++;
   163a8:	71eb      	strb	r3, [r5, #7]
	return new_id;
   163aa:	e7c5      	b.n	16338 <bt_id_create+0x10>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   163ac:	2c00      	cmp	r4, #0
   163ae:	d0c1      	beq.n	16334 <bt_id_create+0xc>
   163b0:	4904      	ldr	r1, [pc, #16]	; (163c4 <bt_id_create+0x9c>)
   163b2:	4620      	mov	r0, r4
   163b4:	f00e fc8d 	bl	24cd2 <bt_addr_le_eq>
   163b8:	2800      	cmp	r0, #0
   163ba:	d0eb      	beq.n	16394 <bt_id_create+0x6c>
   163bc:	e7ba      	b.n	16334 <bt_id_create+0xc>
		return -ENOMEM;
   163be:	f06f 000b 	mvn.w	r0, #11
   163c2:	e7b9      	b.n	16338 <bt_id_create+0x10>
   163c4:	0002967b 	.word	0x0002967b
   163c8:	00029fa8 	.word	0x00029fa8
   163cc:	0002817c 	.word	0x0002817c
   163d0:	20000388 	.word	0x20000388

000163d4 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   163d4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   163d6:	4604      	mov	r4, r0
{
   163d8:	b088      	sub	sp, #32
	CHECKIF(addr == NULL) {
   163da:	b960      	cbnz	r0, 163f6 <bt_id_read_public_addr+0x22>
		LOG_WRN("Invalid input parameters");
   163dc:	4b1a      	ldr	r3, [pc, #104]	; (16448 <bt_id_read_public_addr+0x74>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   163de:	9307      	str	r3, [sp, #28]
   163e0:	481a      	ldr	r0, [pc, #104]	; (1644c <bt_id_read_public_addr+0x78>)
   163e2:	2302      	movs	r3, #2
   163e4:	aa06      	add	r2, sp, #24
   163e6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   163ea:	9306      	str	r3, [sp, #24]
   163ec:	f00e fcb6 	bl	24d5c <z_log_msg_static_create.constprop.0>
		return 0U;
   163f0:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   163f2:	b008      	add	sp, #32
   163f4:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   163f6:	aa01      	add	r2, sp, #4
   163f8:	2100      	movs	r1, #0
   163fa:	f241 0009 	movw	r0, #4105	; 0x1009
   163fe:	f7fe fe69 	bl	150d4 <bt_hci_cmd_send_sync>
	if (err) {
   16402:	4606      	mov	r6, r0
   16404:	b108      	cbz	r0, 1640a <bt_id_read_public_addr+0x36>
		LOG_WRN("Failed to read public address");
   16406:	4b12      	ldr	r3, [pc, #72]	; (16450 <bt_id_read_public_addr+0x7c>)
   16408:	e7e9      	b.n	163de <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
   1640a:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
   1640c:	4911      	ldr	r1, [pc, #68]	; (16454 <bt_id_read_public_addr+0x80>)
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1640e:	68dd      	ldr	r5, [r3, #12]
   16410:	3501      	adds	r5, #1
   16412:	2206      	movs	r2, #6
   16414:	4628      	mov	r0, r5
   16416:	f00e fa73 	bl	24900 <memcmp>
   1641a:	b918      	cbnz	r0, 16424 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   1641c:	9801      	ldr	r0, [sp, #4]
   1641e:	f005 fcd3 	bl	1bdc8 <net_buf_unref>
		return 0U;
   16422:	e7e5      	b.n	163f0 <bt_id_read_public_addr+0x1c>
   16424:	490c      	ldr	r1, [pc, #48]	; (16458 <bt_id_read_public_addr+0x84>)
   16426:	2206      	movs	r2, #6
   16428:	4628      	mov	r0, r5
   1642a:	f00e fa69 	bl	24900 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1642e:	2800      	cmp	r0, #0
   16430:	d0f4      	beq.n	1641c <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
   16432:	2206      	movs	r2, #6
   16434:	4629      	mov	r1, r5
   16436:	1c60      	adds	r0, r4, #1
   16438:	f00e fa89 	bl	2494e <memcpy>
	net_buf_unref(rsp);
   1643c:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   1643e:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   16440:	f005 fcc2 	bl	1bdc8 <net_buf_unref>
	return 1U;
   16444:	2001      	movs	r0, #1
   16446:	e7d4      	b.n	163f2 <bt_id_read_public_addr+0x1e>
   16448:	00029fd6 	.word	0x00029fd6
   1644c:	0002817c 	.word	0x0002817c
   16450:	00029fef 	.word	0x00029fef
   16454:	00029688 	.word	0x00029688
   16458:	00029682 	.word	0x00029682

0001645c <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   1645c:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   1645e:	4668      	mov	r0, sp
   16460:	f7ff ffb8 	bl	163d4 <bt_id_read_public_addr>
   16464:	4b04      	ldr	r3, [pc, #16]	; (16478 <bt_setup_public_id_addr+0x1c>)
   16466:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   16468:	b118      	cbz	r0, 16472 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   1646a:	4669      	mov	r1, sp
   1646c:	2000      	movs	r0, #0
   1646e:	f7ff fd4f 	bl	15f10 <id_create.constprop.0>
}
   16472:	b003      	add	sp, #12
   16474:	f85d fb04 	ldr.w	pc, [sp], #4
   16478:	20000388 	.word	0x20000388

0001647c <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   1647c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   16480:	4b22      	ldr	r3, [pc, #136]	; (1650c <bt_read_static_addr+0x90>)
   16482:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
   16486:	07db      	lsls	r3, r3, #31
{
   16488:	b088      	sub	sp, #32
   1648a:	4607      	mov	r7, r0
   1648c:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1648e:	d40e      	bmi.n	164ae <bt_read_static_addr+0x32>
		LOG_WRN("Read Static Addresses command not available");
   16490:	4b1f      	ldr	r3, [pc, #124]	; (16510 <bt_read_static_addr+0x94>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   16492:	9307      	str	r3, [sp, #28]
   16494:	481f      	ldr	r0, [pc, #124]	; (16514 <bt_read_static_addr+0x98>)
   16496:	2302      	movs	r3, #2
   16498:	aa06      	add	r2, sp, #24
   1649a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return 0;
   1649e:	2500      	movs	r5, #0
		LOG_WRN("Failed to read static addresses");
   164a0:	9306      	str	r3, [sp, #24]
   164a2:	f00e fc5b 	bl	24d5c <z_log_msg_static_create.constprop.0>
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   164a6:	4628      	mov	r0, r5
   164a8:	b008      	add	sp, #32
   164aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   164ae:	aa01      	add	r2, sp, #4
   164b0:	2100      	movs	r1, #0
   164b2:	f64f 4009 	movw	r0, #64521	; 0xfc09
   164b6:	f7fe fe0d 	bl	150d4 <bt_hci_cmd_send_sync>
	if (err) {
   164ba:	4604      	mov	r4, r0
   164bc:	b108      	cbz	r0, 164c2 <bt_read_static_addr+0x46>
		LOG_WRN("Failed to read static addresses");
   164be:	4b16      	ldr	r3, [pc, #88]	; (16518 <bt_read_static_addr+0x9c>)
   164c0:	e7e7      	b.n	16492 <bt_read_static_addr+0x16>
	rp = (void *)rsp->data;
   164c2:	9b01      	ldr	r3, [sp, #4]
   164c4:	68de      	ldr	r6, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
   164c6:	7875      	ldrb	r5, [r6, #1]
   164c8:	4545      	cmp	r5, r8
   164ca:	bf28      	it	cs
   164cc:	4645      	movcs	r5, r8
	for (i = 0; i < cnt; i++) {
   164ce:	3602      	adds	r6, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   164d0:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
   164d4:	42a5      	cmp	r5, r4
   164d6:	dc0f      	bgt.n	164f8 <bt_read_static_addr+0x7c>
	net_buf_unref(rsp);
   164d8:	9801      	ldr	r0, [sp, #4]
   164da:	f005 fc75 	bl	1bdc8 <net_buf_unref>
	if (!cnt) {
   164de:	2d00      	cmp	r5, #0
   164e0:	d1e1      	bne.n	164a6 <bt_read_static_addr+0x2a>
		LOG_WRN("No static addresses stored in controller");
   164e2:	4b0e      	ldr	r3, [pc, #56]	; (1651c <bt_read_static_addr+0xa0>)
   164e4:	9307      	str	r3, [sp, #28]
   164e6:	480b      	ldr	r0, [pc, #44]	; (16514 <bt_read_static_addr+0x98>)
   164e8:	2302      	movs	r3, #2
   164ea:	aa06      	add	r2, sp, #24
   164ec:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   164f0:	9306      	str	r3, [sp, #24]
   164f2:	f00e fc33 	bl	24d5c <z_log_msg_static_create.constprop.0>
   164f6:	e7d6      	b.n	164a6 <bt_read_static_addr+0x2a>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   164f8:	4631      	mov	r1, r6
   164fa:	fb08 7004 	mla	r0, r8, r4, r7
   164fe:	2216      	movs	r2, #22
   16500:	f00e fa25 	bl	2494e <memcpy>
	for (i = 0; i < cnt; i++) {
   16504:	3401      	adds	r4, #1
   16506:	3616      	adds	r6, #22
   16508:	e7e4      	b.n	164d4 <bt_read_static_addr+0x58>
   1650a:	bf00      	nop
   1650c:	20000388 	.word	0x20000388
   16510:	0002a00d 	.word	0x0002a00d
   16514:	0002817c 	.word	0x0002817c
   16518:	0002a039 	.word	0x0002a039
   1651c:	0002a059 	.word	0x0002a059

00016520 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   16520:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   16522:	4e15      	ldr	r6, [pc, #84]	; (16578 <bt_setup_random_id_addr+0x58>)
   16524:	79f4      	ldrb	r4, [r6, #7]
{
   16526:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   16528:	b92c      	cbnz	r4, 16536 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1652a:	2101      	movs	r1, #1
   1652c:	a802      	add	r0, sp, #8
   1652e:	f7ff ffa5 	bl	1647c <bt_read_static_addr>
   16532:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   16534:	b9c8      	cbnz	r0, 1656a <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   16536:	2100      	movs	r1, #0
   16538:	4608      	mov	r0, r1
}
   1653a:	b009      	add	sp, #36	; 0x24
   1653c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   16540:	f7ff bef2 	b.w	16328 <bt_id_create>
   16544:	ab02      	add	r3, sp, #8
   16546:	fb07 3105 	mla	r1, r7, r5, r3
   1654a:	2206      	movs	r2, #6
   1654c:	f10d 0001 	add.w	r0, sp, #1
   16550:	f00e f9fd 	bl	2494e <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   16554:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   16556:	4669      	mov	r1, sp
   16558:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   1655a:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   1655e:	f7ff fcd7 	bl	15f10 <id_create.constprop.0>
				if (err) {
   16562:	3401      	adds	r4, #1
   16564:	b110      	cbz	r0, 1656c <bt_setup_random_id_addr+0x4c>
}
   16566:	b009      	add	sp, #36	; 0x24
   16568:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1656a:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1656c:	79f3      	ldrb	r3, [r6, #7]
   1656e:	b2e5      	uxtb	r5, r4
   16570:	42ab      	cmp	r3, r5
   16572:	d8e7      	bhi.n	16544 <bt_setup_random_id_addr+0x24>
			return 0;
   16574:	2000      	movs	r0, #0
   16576:	e7f6      	b.n	16566 <bt_setup_random_id_addr+0x46>
   16578:	20000388 	.word	0x20000388

0001657c <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   1657c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16580:	4690      	mov	r8, r2
   16582:	460e      	mov	r6, r1
   16584:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   16586:	4602      	mov	r2, r0
   16588:	2800      	cmp	r0, #0
   1658a:	d04b      	beq.n	16624 <bt_id_set_adv_own_addr+0xa8>
   1658c:	2b00      	cmp	r3, #0
   1658e:	d049      	beq.n	16624 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   16590:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   16592:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   16594:	d531      	bpl.n	165fa <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   16596:	4f25      	ldr	r7, [pc, #148]	; (1662c <bt_id_set_adv_own_addr+0xb0>)
   16598:	f1b8 0f00 	cmp.w	r8, #0
   1659c:	d013      	beq.n	165c6 <bt_id_set_adv_own_addr+0x4a>
   1659e:	0688      	lsls	r0, r1, #26
   165a0:	d40a      	bmi.n	165b8 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   165a2:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   165a6:	5cfb      	ldrb	r3, [r7, r3]
   165a8:	2b01      	cmp	r3, #1
   165aa:	d015      	beq.n	165d8 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   165ac:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   165ae:	06b2      	lsls	r2, r6, #26
   165b0:	d50f      	bpl.n	165d2 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   165b2:	f043 0302 	orr.w	r3, r3, #2
   165b6:	e00b      	b.n	165d0 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   165b8:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
   165bc:	0659      	lsls	r1, r3, #25
   165be:	d4f0      	bmi.n	165a2 <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   165c0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   165c4:	e006      	b.n	165d4 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   165c6:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   165ca:	5cfb      	ldrb	r3, [r7, r3]
   165cc:	2b01      	cmp	r3, #1
   165ce:	d003      	beq.n	165d8 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   165d0:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   165d2:	2000      	movs	r0, #0
}
   165d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   165d8:	2107      	movs	r1, #7
   165da:	fb01 7104 	mla	r1, r1, r4, r7
   165de:	3101      	adds	r1, #1
   165e0:	4610      	mov	r0, r2
   165e2:	f00e fc3f 	bl	24e64 <bt_id_set_adv_random_addr>
				if (err) {
   165e6:	2800      	cmp	r0, #0
   165e8:	d1f4      	bne.n	165d4 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   165ea:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   165ee:	5d3b      	ldrb	r3, [r7, r4]
   165f0:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   165f2:	f1b8 0f00 	cmp.w	r8, #0
   165f6:	d0ec      	beq.n	165d2 <bt_id_set_adv_own_addr+0x56>
   165f8:	e7d9      	b.n	165ae <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   165fa:	074b      	lsls	r3, r1, #29
   165fc:	d50e      	bpl.n	1661c <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   165fe:	4e0b      	ldr	r6, [pc, #44]	; (1662c <bt_id_set_adv_own_addr+0xb0>)
   16600:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   16604:	5df3      	ldrb	r3, [r6, r7]
   16606:	2b01      	cmp	r3, #1
   16608:	d1e2      	bne.n	165d0 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1660a:	2107      	movs	r1, #7
   1660c:	fb11 3104 	smlabb	r1, r1, r4, r3
   16610:	4431      	add	r1, r6
   16612:	f00e fc27 	bl	24e64 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   16616:	5df3      	ldrb	r3, [r6, r7]
   16618:	702b      	strb	r3, [r5, #0]
		if (err) {
   1661a:	e7db      	b.n	165d4 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   1661c:	f00e fc2a 	bl	24e74 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   16620:	2301      	movs	r3, #1
   16622:	e7f9      	b.n	16618 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   16624:	f06f 0015 	mvn.w	r0, #21
   16628:	e7d4      	b.n	165d4 <bt_id_set_adv_own_addr+0x58>
   1662a:	bf00      	nop
   1662c:	20000388 	.word	0x20000388

00016630 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   16630:	b530      	push	{r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   16632:	4d13      	ldr	r5, [pc, #76]	; (16680 <bt_id_init+0x50>)
   16634:	79eb      	ldrb	r3, [r5, #7]
{
   16636:	b087      	sub	sp, #28
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   16638:	b11b      	cbz	r3, 16642 <bt_id_init+0x12>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   1663a:	2400      	movs	r4, #0
}
   1663c:	4620      	mov	r0, r4
   1663e:	b007      	add	sp, #28
   16640:	bd30      	pop	{r4, r5, pc}
		err = bt_setup_public_id_addr();
   16642:	f7ff ff0b 	bl	1645c <bt_setup_public_id_addr>
		if (err) {
   16646:	4604      	mov	r4, r0
   16648:	b150      	cbz	r0, 16660 <bt_id_init+0x30>
			LOG_ERR("Unable to set identity address");
   1664a:	4b0e      	ldr	r3, [pc, #56]	; (16684 <bt_id_init+0x54>)
			LOG_ERR("Unable to set random address");
   1664c:	9305      	str	r3, [sp, #20]
   1664e:	480e      	ldr	r0, [pc, #56]	; (16688 <bt_id_init+0x58>)
   16650:	2302      	movs	r3, #2
   16652:	aa04      	add	r2, sp, #16
   16654:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16658:	9304      	str	r3, [sp, #16]
   1665a:	f00e fb7f 	bl	24d5c <z_log_msg_static_create.constprop.0>
			return err;
   1665e:	e7ed      	b.n	1663c <bt_id_init+0xc>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   16660:	79eb      	ldrb	r3, [r5, #7]
   16662:	2b00      	cmp	r3, #0
   16664:	d1e9      	bne.n	1663a <bt_id_init+0xa>
		err = bt_setup_random_id_addr();
   16666:	f7ff ff5b 	bl	16520 <bt_setup_random_id_addr>
		if (err) {
   1666a:	4604      	mov	r4, r0
   1666c:	2800      	cmp	r0, #0
   1666e:	d1ec      	bne.n	1664a <bt_id_init+0x1a>
		err = set_random_address(&bt_dev.id_addr[0].a);
   16670:	1c68      	adds	r0, r5, #1
   16672:	f7ff fd33 	bl	160dc <set_random_address>
		if (err) {
   16676:	4604      	mov	r4, r0
   16678:	2800      	cmp	r0, #0
   1667a:	d0df      	beq.n	1663c <bt_id_init+0xc>
			LOG_ERR("Unable to set random address");
   1667c:	4b03      	ldr	r3, [pc, #12]	; (1668c <bt_id_init+0x5c>)
   1667e:	e7e5      	b.n	1664c <bt_id_init+0x1c>
   16680:	20000388 	.word	0x20000388
   16684:	0002a082 	.word	0x0002a082
   16688:	0002817c 	.word	0x0002817c
   1668c:	0002a0a1 	.word	0x0002a0a1

00016690 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   16690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16694:	b089      	sub	sp, #36	; 0x24
   16696:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   16698:	2120      	movs	r1, #32
{
   1669a:	9000      	str	r0, [sp, #0]
   1669c:	4692      	mov	sl, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1669e:	f7fe fcdf 	bl	15060 <bt_hci_cmd_create>
	if (!buf) {
   166a2:	4605      	mov	r5, r0
   166a4:	2800      	cmp	r0, #0
   166a6:	d05b      	beq.n	16760 <hci_set_ad+0xd0>
   166a8:	2120      	movs	r1, #32
   166aa:	300c      	adds	r0, #12
   166ac:	f010 fa8c 	bl	26bc8 <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
   166b0:	2220      	movs	r2, #32
   166b2:	2100      	movs	r1, #0
   166b4:	4681      	mov	r9, r0
   166b6:	f00e f955 	bl	24964 <memset>

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   166ba:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   166be:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
	uint8_t set_data_len = 0;
   166c2:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   166c4:	f8d4 8000 	ldr.w	r8, [r4]
   166c8:	2300      	movs	r3, #0
   166ca:	6862      	ldr	r2, [r4, #4]
   166cc:	4293      	cmp	r3, r2
   166ce:	d30c      	bcc.n	166ea <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
   166d0:	3408      	adds	r4, #8
   166d2:	45a2      	cmp	sl, r4
   166d4:	d1f6      	bne.n	166c4 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   166d6:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
   166d8:	f889 6000 	strb.w	r6, [r9]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   166dc:	2200      	movs	r2, #0
   166de:	4629      	mov	r1, r5
}
   166e0:	b009      	add	sp, #36	; 0x24
   166e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   166e6:	f7fe bcf5 	b.w	150d4 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   166ea:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   166ee:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   166f2:	1cb0      	adds	r0, r6, #2
   166f4:	1811      	adds	r1, r2, r0
   166f6:	291f      	cmp	r1, #31
   166f8:	d91b      	bls.n	16732 <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   166fa:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   166fe:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   16702:	d101      	bne.n	16708 <hci_set_ad+0x78>
   16704:	2a00      	cmp	r2, #0
   16706:	dc12      	bgt.n	1672e <hci_set_ad+0x9e>
					LOG_ERR("Too big advertising data");
   16708:	4b17      	ldr	r3, [pc, #92]	; (16768 <hci_set_ad+0xd8>)
   1670a:	9307      	str	r3, [sp, #28]
   1670c:	2302      	movs	r3, #2
   1670e:	9306      	str	r3, [sp, #24]
   16710:	4816      	ldr	r0, [pc, #88]	; (1676c <hci_set_ad+0xdc>)
   16712:	2300      	movs	r3, #0
   16714:	aa06      	add	r2, sp, #24
   16716:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1671a:	f7fc fa79 	bl	12c10 <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   1671e:	4628      	mov	r0, r5
   16720:	f005 fb52 	bl	1bdc8 <net_buf_unref>
					return -EINVAL;
   16724:	f06f 0015 	mvn.w	r0, #21
}
   16728:	b009      	add	sp, #36	; 0x24
   1672a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   1672e:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   16732:	b2d7      	uxtb	r7, r2
   16734:	1c79      	adds	r1, r7, #1
   16736:	f80b 1006 	strb.w	r1, [fp, r6]
   1673a:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   1673c:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   1673e:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   16742:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   16746:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1674a:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   1674c:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   1674e:	f00e f8fe 	bl	2494e <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   16752:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   16754:	4437      	add	r7, r6
   16756:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   16758:	3301      	adds	r3, #1
   1675a:	f108 0808 	add.w	r8, r8, #8
   1675e:	e7b4      	b.n	166ca <hci_set_ad+0x3a>
		return -ENOBUFS;
   16760:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16764:	e7e0      	b.n	16728 <hci_set_ad+0x98>
   16766:	bf00      	nop
   16768:	0002a0c4 	.word	0x0002a0c4
   1676c:	0002813c 	.word	0x0002813c

00016770 <adv_is_directed>:

	return channel_map;
}

static inline bool adv_is_directed(const struct bt_le_ext_adv *adv)
{
   16770:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   16772:	4904      	ldr	r1, [pc, #16]	; (16784 <adv_is_directed+0x14>)
   16774:	2207      	movs	r2, #7
   16776:	3009      	adds	r0, #9
   16778:	f00e f8c2 	bl	24900 <memcmp>
	/* The advertiser is assumed to be directed when the peer address has
	 * been set.
	 */
	return !bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY);
}
   1677c:	3800      	subs	r0, #0
   1677e:	bf18      	it	ne
   16780:	2001      	movne	r0, #1
   16782:	bd08      	pop	{r3, pc}
   16784:	0002967b 	.word	0x0002967b

00016788 <le_adv_start_add_conn>:

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   16788:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   1678a:	4b15      	ldr	r3, [pc, #84]	; (167e0 <le_adv_start_add_conn+0x58>)
   1678c:	7802      	ldrb	r2, [r0, #0]
   1678e:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
{
   16792:	4604      	mov	r4, r0
   16794:	460d      	mov	r5, r1

	if (!adv_is_directed(adv)) {
   16796:	f7ff ffeb 	bl	16770 <adv_is_directed>
   1679a:	4603      	mov	r3, r0
   1679c:	7820      	ldrb	r0, [r4, #0]
   1679e:	b96b      	cbnz	r3, 167bc <le_adv_start_add_conn+0x34>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   167a0:	4910      	ldr	r1, [pc, #64]	; (167e4 <le_adv_start_add_conn+0x5c>)
   167a2:	f001 f8e7 	bl	17974 <bt_conn_add_le>
		if (!conn) {
   167a6:	4604      	mov	r4, r0
   167a8:	b910      	cbnz	r0, 167b0 <le_adv_start_add_conn+0x28>
			return -ENOMEM;
   167aa:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   167ae:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   167b0:	2104      	movs	r1, #4
   167b2:	f000 fee1 	bl	17578 <bt_conn_set_state>
		*out_conn = conn;
   167b6:	602c      	str	r4, [r5, #0]
		return 0;
   167b8:	2000      	movs	r0, #0
   167ba:	e7f8      	b.n	167ae <le_adv_start_add_conn+0x26>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   167bc:	f104 0609 	add.w	r6, r4, #9
   167c0:	4631      	mov	r1, r6
   167c2:	f001 f90d 	bl	179e0 <bt_conn_exists_le>
   167c6:	b940      	cbnz	r0, 167da <le_adv_start_add_conn+0x52>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   167c8:	7820      	ldrb	r0, [r4, #0]
   167ca:	4631      	mov	r1, r6
   167cc:	f001 f8d2 	bl	17974 <bt_conn_add_le>
	if (!conn) {
   167d0:	4604      	mov	r4, r0
   167d2:	2800      	cmp	r0, #0
   167d4:	d0e9      	beq.n	167aa <le_adv_start_add_conn+0x22>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   167d6:	2105      	movs	r1, #5
   167d8:	e7eb      	b.n	167b2 <le_adv_start_add_conn+0x2a>
		return -EINVAL;
   167da:	f06f 0015 	mvn.w	r0, #21
   167de:	e7e6      	b.n	167ae <le_adv_start_add_conn+0x26>
   167e0:	20000388 	.word	0x20000388
   167e4:	00029674 	.word	0x00029674

000167e8 <valid_adv_param>:
{
   167e8:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   167ea:	6843      	ldr	r3, [r0, #4]
{
   167ec:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   167ee:	0558      	lsls	r0, r3, #21
   167f0:	d501      	bpl.n	167f6 <valid_adv_param+0xe>
		return false;
   167f2:	2000      	movs	r0, #0
}
   167f4:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   167f6:	6922      	ldr	r2, [r4, #16]
   167f8:	b10a      	cbz	r2, 167fe <valid_adv_param+0x16>
   167fa:	07d9      	lsls	r1, r3, #31
   167fc:	d5f9      	bpl.n	167f2 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   167fe:	4d19      	ldr	r5, [pc, #100]	; (16864 <valid_adv_param+0x7c>)
   16800:	7820      	ldrb	r0, [r4, #0]
   16802:	79eb      	ldrb	r3, [r5, #7]
   16804:	4283      	cmp	r3, r0
   16806:	d9f4      	bls.n	167f2 <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   16808:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1680c:	4916      	ldr	r1, [pc, #88]	; (16868 <valid_adv_param+0x80>)
   1680e:	2207      	movs	r2, #7
   16810:	4428      	add	r0, r5
   16812:	f00e f875 	bl	24900 <memcmp>
	if (param->id >= bt_dev.id_count ||
   16816:	2800      	cmp	r0, #0
   16818:	d0eb      	beq.n	167f2 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1681a:	6860      	ldr	r0, [r4, #4]
   1681c:	07c2      	lsls	r2, r0, #31
   1681e:	d406      	bmi.n	1682e <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   16820:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
   16824:	2b08      	cmp	r3, #8
   16826:	d802      	bhi.n	1682e <valid_adv_param+0x46>
   16828:	68a3      	ldr	r3, [r4, #8]
   1682a:	2b9f      	cmp	r3, #159	; 0x9f
   1682c:	d9e1      	bls.n	167f2 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   1682e:	f010 0f30 	tst.w	r0, #48	; 0x30
   16832:	d002      	beq.n	1683a <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   16834:	6923      	ldr	r3, [r4, #16]
   16836:	2b00      	cmp	r3, #0
   16838:	d0db      	beq.n	167f2 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   1683a:	06c3      	lsls	r3, r0, #27
   1683c:	d401      	bmi.n	16842 <valid_adv_param+0x5a>
   1683e:	6923      	ldr	r3, [r4, #16]
   16840:	b943      	cbnz	r3, 16854 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   16842:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   16846:	429a      	cmp	r2, r3
   16848:	d8d3      	bhi.n	167f2 <valid_adv_param+0xa>
   1684a:	2a1f      	cmp	r2, #31
   1684c:	d9d1      	bls.n	167f2 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   1684e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   16852:	d8ce      	bhi.n	167f2 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   16854:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   16858:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   1685c:	bf18      	it	ne
   1685e:	2001      	movne	r0, #1
   16860:	e7c8      	b.n	167f4 <valid_adv_param+0xc>
   16862:	bf00      	nop
   16864:	20000388 	.word	0x20000388
   16868:	0002967b 	.word	0x0002967b

0001686c <bt_le_ext_adv_foreach>:
{
   1686c:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   1686e:	4801      	ldr	r0, [pc, #4]	; (16874 <bt_le_ext_adv_foreach+0x8>)
   16870:	4718      	bx	r3
   16872:	bf00      	nop
   16874:	200003a0 	.word	0x200003a0

00016878 <bt_le_adv_lookup_legacy>:
}
   16878:	4800      	ldr	r0, [pc, #0]	; (1687c <bt_le_adv_lookup_legacy+0x4>)
   1687a:	4770      	bx	lr
   1687c:	200003a0 	.word	0x200003a0

00016880 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   16880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16884:	b093      	sub	sp, #76	; 0x4c
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   16886:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
   1688a:	9305      	str	r3, [sp, #20]
	struct bt_conn *conn = NULL;
   1688c:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   1688e:	ebba 0403 	subs.w	r4, sl, r3
{
   16892:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16894:	4892      	ldr	r0, [pc, #584]	; (16ae0 <bt_le_adv_start_legacy+0x260>)
	struct bt_conn *conn = NULL;
   16896:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable = false;
   16898:	bf18      	it	ne
   1689a:	2401      	movne	r4, #1
   1689c:	f00e fb24 	bl	24ee8 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   168a0:	0747      	lsls	r7, r0, #29
{
   168a2:	460d      	mov	r5, r1
   168a4:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   168a6:	f140 8112 	bpl.w	16ace <bt_le_adv_start_legacy+0x24e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   168aa:	4608      	mov	r0, r1
   168ac:	f7ff ff9c 	bl	167e8 <valid_adv_param>
   168b0:	b928      	cbnz	r0, 168be <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   168b2:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   168b6:	4620      	mov	r0, r4
   168b8:	b013      	add	sp, #76	; 0x4c
   168ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   168be:	4628      	mov	r0, r5
   168c0:	f00e faef 	bl	24ea2 <bt_id_adv_random_addr_check>
   168c4:	4681      	mov	r9, r0
   168c6:	2800      	cmp	r0, #0
   168c8:	d0f3      	beq.n	168b2 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   168ca:	f106 0810 	add.w	r8, r6, #16
   168ce:	4640      	mov	r0, r8
   168d0:	f00e fb0a 	bl	24ee8 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   168d4:	f3c0 17c0 	ubfx	r7, r0, #7, #1
   168d8:	0600      	lsls	r0, r0, #24
   168da:	f100 80fb 	bmi.w	16ad4 <bt_le_adv_start_legacy+0x254>
	(void)memset(&set_param, 0, sizeof(set_param));
   168de:	220f      	movs	r2, #15
   168e0:	4639      	mov	r1, r7
   168e2:	a808      	add	r0, sp, #32
   168e4:	f00e f83e 	bl	24964 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   168e8:	68ab      	ldr	r3, [r5, #8]
   168ea:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
   168ee:	6868      	ldr	r0, [r5, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   168f0:	68eb      	ldr	r3, [r5, #12]
   168f2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   168f6:	f00e fae8 	bl	24eca <get_adv_channel_map>
	if (adv->id != param->id) {
   168fa:	7832      	ldrb	r2, [r6, #0]
   168fc:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   168fe:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   16902:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   16904:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
   16908:	d004      	beq.n	16914 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1690a:	4875      	ldr	r0, [pc, #468]	; (16ae0 <bt_le_adv_start_legacy+0x260>)
   1690c:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   16910:	f00e faf0 	bl	24ef4 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   16914:	4a73      	ldr	r2, [pc, #460]	; (16ae4 <bt_le_adv_start_legacy+0x264>)
	adv->id = param->id;
   16916:	782b      	ldrb	r3, [r5, #0]
   16918:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   1691a:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   1691e:	6869      	ldr	r1, [r5, #4]
   16920:	4622      	mov	r2, r4
   16922:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   16926:	4630      	mov	r0, r6
   16928:	f7ff fe28 	bl	1657c <bt_id_set_adv_own_addr>
	if (err) {
   1692c:	4604      	mov	r4, r0
   1692e:	2800      	cmp	r0, #0
   16930:	d1c1      	bne.n	168b6 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   16932:	f106 0009 	add.w	r0, r6, #9
	memcpy(dst, src, sizeof(*dst));
   16936:	2207      	movs	r2, #7
	if (dir_adv) {
   16938:	f1ba 0f00 	cmp.w	sl, #0
   1693c:	d013      	beq.n	16966 <bt_le_adv_start_legacy+0xe6>
   1693e:	6929      	ldr	r1, [r5, #16]
   16940:	f00e f805 	bl	2494e <memcpy>
	name_type = get_adv_name_type_param(param);
   16944:	4628      	mov	r0, r5
   16946:	f00e fb72 	bl	2502e <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1694a:	686b      	ldr	r3, [r5, #4]
   1694c:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   1694e:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   16950:	d416      	bmi.n	16980 <bt_le_adv_start_legacy+0x100>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   16952:	059b      	lsls	r3, r3, #22
   16954:	d403      	bmi.n	1695e <bt_le_adv_start_legacy+0xde>
   16956:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   16958:	b90b      	cbnz	r3, 1695e <bt_le_adv_start_legacy+0xde>
   1695a:	2f02      	cmp	r7, #2
   1695c:	d15a      	bne.n	16a14 <bt_le_adv_start_legacy+0x194>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   1695e:	2302      	movs	r3, #2
   16960:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   16964:	e01a      	b.n	1699c <bt_le_adv_start_legacy+0x11c>
   16966:	4960      	ldr	r1, [pc, #384]	; (16ae8 <bt_le_adv_start_legacy+0x268>)
   16968:	f00d fff1 	bl	2494e <memcpy>
	name_type = get_adv_name_type_param(param);
   1696c:	4628      	mov	r0, r5
   1696e:	f00e fb5e 	bl	2502e <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   16972:	686b      	ldr	r3, [r5, #4]
   16974:	07da      	lsls	r2, r3, #31
	name_type = get_adv_name_type_param(param);
   16976:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   16978:	d5eb      	bpl.n	16952 <bt_le_adv_start_legacy+0xd2>
			set_param.type = BT_HCI_ADV_IND;
   1697a:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
   1697e:	e00d      	b.n	1699c <bt_le_adv_start_legacy+0x11c>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   16980:	f013 0f10 	tst.w	r3, #16
   16984:	bf0c      	ite	eq
   16986:	2301      	moveq	r3, #1
   16988:	2304      	movne	r3, #4
   1698a:	6929      	ldr	r1, [r5, #16]
   1698c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   16990:	2207      	movs	r2, #7
   16992:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   16996:	f00d ffda 	bl	2494e <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   1699a:	46a1      	mov	r9, r4
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   1699c:	210f      	movs	r1, #15
   1699e:	f242 0006 	movw	r0, #8198	; 0x2006
   169a2:	f7fe fb5d 	bl	15060 <bt_hci_cmd_create>
	if (!buf) {
   169a6:	4604      	mov	r4, r0
   169a8:	2800      	cmp	r0, #0
   169aa:	f000 8096 	beq.w	16ada <bt_le_adv_start_legacy+0x25a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   169ae:	220f      	movs	r2, #15
   169b0:	a908      	add	r1, sp, #32
   169b2:	300c      	adds	r0, #12
   169b4:	f010 f90e 	bl	26bd4 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   169b8:	4621      	mov	r1, r4
   169ba:	2200      	movs	r2, #0
   169bc:	f242 0006 	movw	r0, #8198	; 0x2006
   169c0:	f7fe fb88 	bl	150d4 <bt_hci_cmd_send_sync>
	if (err) {
   169c4:	4604      	mov	r4, r0
   169c6:	2800      	cmp	r0, #0
   169c8:	f47f af75 	bne.w	168b6 <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
   169cc:	f1ba 0f00 	cmp.w	sl, #0
   169d0:	d026      	beq.n	16a20 <bt_le_adv_start_legacy+0x1a0>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   169d2:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   169d4:	07dc      	lsls	r4, r3, #31
   169d6:	d431      	bmi.n	16a3c <bt_le_adv_start_legacy+0x1bc>
	return bt_le_adv_set_enable_legacy(adv, enable);
   169d8:	2101      	movs	r1, #1
   169da:	4630      	mov	r0, r6
   169dc:	f00e fb37 	bl	2504e <bt_le_adv_set_enable_legacy>
	if (err) {
   169e0:	4604      	mov	r4, r0
   169e2:	2800      	cmp	r0, #0
   169e4:	d06b      	beq.n	16abe <bt_le_adv_start_legacy+0x23e>
		LOG_ERR("Failed to start advertiser");
   169e6:	4b41      	ldr	r3, [pc, #260]	; (16aec <bt_le_adv_start_legacy+0x26c>)
   169e8:	9311      	str	r3, [sp, #68]	; 0x44
   169ea:	2302      	movs	r3, #2
   169ec:	9310      	str	r3, [sp, #64]	; 0x40
   169ee:	4840      	ldr	r0, [pc, #256]	; (16af0 <bt_le_adv_start_legacy+0x270>)
   169f0:	2300      	movs	r3, #0
   169f2:	aa10      	add	r2, sp, #64	; 0x40
   169f4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   169f8:	f7fc f90a 	bl	12c10 <z_impl_z_log_msg_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   169fc:	9d07      	ldr	r5, [sp, #28]
   169fe:	2d00      	cmp	r5, #0
   16a00:	f43f af59 	beq.w	168b6 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16a04:	4628      	mov	r0, r5
   16a06:	2100      	movs	r1, #0
   16a08:	f000 fdb6 	bl	17578 <bt_conn_set_state>
			bt_conn_unref(conn);
   16a0c:	4628      	mov	r0, r5
   16a0e:	f00e fbc0 	bl	25192 <bt_conn_unref>
   16a12:	e750      	b.n	168b6 <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   16a14:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   16a16:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   16a1a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   16a1e:	e7bd      	b.n	1699c <bt_le_adv_start_legacy+0x11c>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   16a20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   16a22:	9300      	str	r3, [sp, #0]
   16a24:	e9cd 9701 	strd	r9, r7, [sp, #4]
   16a28:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   16a2a:	9a05      	ldr	r2, [sp, #20]
   16a2c:	4659      	mov	r1, fp
   16a2e:	4630      	mov	r0, r6
   16a30:	f00e fa86 	bl	24f40 <le_adv_update.constprop.0>
		if (err) {
   16a34:	4604      	mov	r4, r0
   16a36:	2800      	cmp	r0, #0
   16a38:	d0cb      	beq.n	169d2 <bt_le_adv_start_legacy+0x152>
   16a3a:	e73c      	b.n	168b6 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   16a3c:	a907      	add	r1, sp, #28
   16a3e:	4630      	mov	r0, r6
   16a40:	f7ff fea2 	bl	16788 <le_adv_start_add_conn>
		if (err) {
   16a44:	4604      	mov	r4, r0
   16a46:	2800      	cmp	r0, #0
   16a48:	d0c6      	beq.n	169d8 <bt_le_adv_start_legacy+0x158>
			if (err == -ENOMEM && !dir_adv &&
   16a4a:	f110 0f0c 	cmn.w	r0, #12
   16a4e:	f47f af32 	bne.w	168b6 <bt_le_adv_start_legacy+0x36>
   16a52:	f1ba 0f00 	cmp.w	sl, #0
   16a56:	f47f af2e 	bne.w	168b6 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   16a5a:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   16a5c:	0798      	lsls	r0, r3, #30
   16a5e:	f53f af2a 	bmi.w	168b6 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   16a62:	686c      	ldr	r4, [r5, #4]
   16a64:	f084 0402 	eor.w	r4, r4, #2
   16a68:	f3c4 0440 	ubfx	r4, r4, #1, #1
   16a6c:	f004 0201 	and.w	r2, r4, #1
   16a70:	210e      	movs	r1, #14
   16a72:	4640      	mov	r0, r8
   16a74:	f00e fa4d 	bl	24f12 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   16a78:	1e7b      	subs	r3, r7, #1
   16a7a:	425a      	negs	r2, r3
   16a7c:	415a      	adcs	r2, r3
   16a7e:	2108      	movs	r1, #8
   16a80:	4640      	mov	r0, r8
   16a82:	f00e fa46 	bl	24f12 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   16a86:	1eb9      	subs	r1, r7, #2
   16a88:	424a      	negs	r2, r1
   16a8a:	414a      	adcs	r2, r1
   16a8c:	4640      	mov	r0, r8
   16a8e:	2109      	movs	r1, #9
   16a90:	f00e fa3f 	bl	24f12 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   16a94:	686a      	ldr	r2, [r5, #4]
   16a96:	210a      	movs	r1, #10
   16a98:	f002 0201 	and.w	r2, r2, #1
   16a9c:	4640      	mov	r0, r8
   16a9e:	f00e fa38 	bl	24f12 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   16aa2:	464a      	mov	r2, r9
   16aa4:	210b      	movs	r1, #11
   16aa6:	4640      	mov	r0, r8
   16aa8:	f00e fa33 	bl	24f12 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   16aac:	686a      	ldr	r2, [r5, #4]
   16aae:	210d      	movs	r1, #13
   16ab0:	f3c2 0280 	ubfx	r2, r2, #2, #1
   16ab4:	4640      	mov	r0, r8
   16ab6:	f00e fa2c 	bl	24f12 <atomic_set_bit_to>
	return 0;
   16aba:	2400      	movs	r4, #0
   16abc:	e6fb      	b.n	168b6 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   16abe:	9807      	ldr	r0, [sp, #28]
   16ac0:	b108      	cbz	r0, 16ac6 <bt_le_adv_start_legacy+0x246>
		bt_conn_unref(conn);
   16ac2:	f00e fb66 	bl	25192 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   16ac6:	f1ba 0f00 	cmp.w	sl, #0
   16aca:	d1cf      	bne.n	16a6c <bt_le_adv_start_legacy+0x1ec>
   16acc:	e7c9      	b.n	16a62 <bt_le_adv_start_legacy+0x1e2>
		return -EAGAIN;
   16ace:	f06f 040a 	mvn.w	r4, #10
   16ad2:	e6f0      	b.n	168b6 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   16ad4:	f06f 0477 	mvn.w	r4, #119	; 0x77
   16ad8:	e6ed      	b.n	168b6 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   16ada:	f06f 0468 	mvn.w	r4, #104	; 0x68
   16ade:	e6ea      	b.n	168b6 <bt_le_adv_start_legacy+0x36>
   16ae0:	2000045c 	.word	0x2000045c
   16ae4:	20000388 	.word	0x20000388
   16ae8:	0002967b 	.word	0x0002967b
   16aec:	0002a0dd 	.word	0x0002a0dd
   16af0:	0002813c 	.word	0x0002813c

00016af4 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   16af4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   16af6:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   16af8:	9a06      	ldr	r2, [sp, #24]
{
   16afa:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   16afc:	e9cd 3200 	strd	r3, r2, [sp]
   16b00:	462b      	mov	r3, r5
   16b02:	460a      	mov	r2, r1
   16b04:	4601      	mov	r1, r0
   16b06:	4811      	ldr	r0, [pc, #68]	; (16b4c <bt_le_adv_start+0x58>)
   16b08:	f7ff feba 	bl	16880 <bt_le_adv_start_legacy>
   16b0c:	4621      	mov	r1, r4
   16b0e:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   16b10:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   16b12:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   16b16:	429d      	cmp	r5, r3
   16b18:	d102      	bne.n	16b20 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   16b1a:	4630      	mov	r0, r6
   16b1c:	b002      	add	sp, #8
   16b1e:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   16b20:	880a      	ldrh	r2, [r1, #0]
   16b22:	4282      	cmp	r2, r0
   16b24:	d104      	bne.n	16b30 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   16b26:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   16b28:	b112      	cbz	r2, 16b30 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   16b2a:	7812      	ldrb	r2, [r2, #0]
   16b2c:	07d2      	lsls	r2, r2, #31
   16b2e:	d402      	bmi.n	16b36 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   16b30:	3301      	adds	r3, #1
   16b32:	3108      	adds	r1, #8
   16b34:	e7ef      	b.n	16b16 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   16b36:	4906      	ldr	r1, [pc, #24]	; (16b50 <bt_le_adv_start+0x5c>)
   16b38:	4806      	ldr	r0, [pc, #24]	; (16b54 <bt_le_adv_start+0x60>)
   16b3a:	f010 fe00 	bl	2773e <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   16b3e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   16b42:	2300      	movs	r3, #0
   16b44:	4803      	ldr	r0, [pc, #12]	; (16b54 <bt_le_adv_start+0x60>)
   16b46:	f009 f819 	bl	1fb7c <k_work_reschedule>
   16b4a:	e7e6      	b.n	16b1a <bt_le_adv_start+0x26>
   16b4c:	200003a0 	.word	0x200003a0
   16b50:	00016bd1 	.word	0x00016bd1
   16b54:	200003b8 	.word	0x200003b8

00016b58 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   16b58:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   16b5a:	4819      	ldr	r0, [pc, #100]	; (16bc0 <bt_le_adv_stop+0x68>)
   16b5c:	f00e fa9e 	bl	2509c <bt_le_lim_adv_cancel_timeout>
   16b60:	4818      	ldr	r0, [pc, #96]	; (16bc4 <bt_le_adv_stop+0x6c>)
   16b62:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   16b66:	f00e f9c5 	bl	24ef4 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16b6a:	4816      	ldr	r0, [pc, #88]	; (16bc4 <bt_le_adv_stop+0x6c>)
   16b6c:	f00e f9bc 	bl	24ee8 <atomic_get>
   16b70:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   16b72:	061a      	lsls	r2, r3, #24
   16b74:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   16b78:	d521      	bpl.n	16bbe <bt_le_adv_stop+0x66>
   16b7a:	4812      	ldr	r0, [pc, #72]	; (16bc4 <bt_le_adv_stop+0x6c>)
   16b7c:	f00e f9b4 	bl	24ee8 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16b80:	0543      	lsls	r3, r0, #21
   16b82:	d512      	bpl.n	16baa <bt_le_adv_stop+0x52>
	if (!adv_is_directed(adv)) {
   16b84:	480e      	ldr	r0, [pc, #56]	; (16bc0 <bt_le_adv_stop+0x68>)
   16b86:	f7ff fdf3 	bl	16770 <adv_is_directed>
   16b8a:	4b0f      	ldr	r3, [pc, #60]	; (16bc8 <bt_le_adv_stop+0x70>)
   16b8c:	b998      	cbnz	r0, 16bb6 <bt_le_adv_stop+0x5e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   16b8e:	490f      	ldr	r1, [pc, #60]	; (16bcc <bt_le_adv_stop+0x74>)
   16b90:	2204      	movs	r2, #4
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   16b92:	7e18      	ldrb	r0, [r3, #24]
   16b94:	f000 ff54 	bl	17a40 <bt_conn_lookup_state_le>
   16b98:	4604      	mov	r4, r0
	if (conn) {
   16b9a:	b130      	cbz	r0, 16baa <bt_le_adv_stop+0x52>
		conn->err = status;
   16b9c:	2100      	movs	r1, #0
   16b9e:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16ba0:	f000 fcea 	bl	17578 <bt_conn_set_state>
		bt_conn_unref(conn);
   16ba4:	4620      	mov	r0, r4
   16ba6:	f00e faf4 	bl	25192 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   16baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   16bae:	4804      	ldr	r0, [pc, #16]	; (16bc0 <bt_le_adv_stop+0x68>)
   16bb0:	2100      	movs	r1, #0
   16bb2:	f00e ba4c 	b.w	2504e <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   16bb6:	2205      	movs	r2, #5
   16bb8:	f103 0121 	add.w	r1, r3, #33	; 0x21
   16bbc:	e7e9      	b.n	16b92 <bt_le_adv_stop+0x3a>
}
   16bbe:	bd10      	pop	{r4, pc}
   16bc0:	200003a0 	.word	0x200003a0
   16bc4:	200003b0 	.word	0x200003b0
   16bc8:	20000388 	.word	0x20000388
   16bcc:	00029674 	.word	0x00029674

00016bd0 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   16bd0:	b598      	push	{r3, r4, r7, lr}
   16bd2:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   16bd4:	f7ff ffc0 	bl	16b58 <bt_le_adv_stop>
#endif
	if (err) {
   16bd8:	b178      	cbz	r0, 16bfa <adv_timeout+0x2a>
		LOG_WRN("Failed to stop advertising: %d", err);
   16bda:	466c      	mov	r4, sp
   16bdc:	b088      	sub	sp, #32
   16bde:	466a      	mov	r2, sp
   16be0:	4b07      	ldr	r3, [pc, #28]	; (16c00 <adv_timeout+0x30>)
   16be2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16be6:	2303      	movs	r3, #3
   16be8:	f842 3f10 	str.w	r3, [r2, #16]!
   16bec:	4805      	ldr	r0, [pc, #20]	; (16c04 <adv_timeout+0x34>)
   16bee:	2300      	movs	r3, #0
   16bf0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   16bf4:	f7fc f80c 	bl	12c10 <z_impl_z_log_msg_static_create>
   16bf8:	46a5      	mov	sp, r4
	}
}
   16bfa:	46bd      	mov	sp, r7
   16bfc:	bd98      	pop	{r3, r4, r7, pc}
   16bfe:	bf00      	nop
   16c00:	0002a0f8 	.word	0x0002a0f8
   16c04:	0002813c 	.word	0x0002813c

00016c08 <bt_le_adv_resume>:
{
   16c08:	b5f0      	push	{r4, r5, r6, r7, lr}
   16c0a:	b083      	sub	sp, #12
   16c0c:	4839      	ldr	r0, [pc, #228]	; (16cf4 <bt_le_adv_resume+0xec>)
   16c0e:	4c39      	ldr	r4, [pc, #228]	; (16cf4 <bt_le_adv_resume+0xec>)
   16c10:	af00      	add	r7, sp, #0
   16c12:	f00e f969 	bl	24ee8 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   16c16:	f410 4f80 	tst.w	r0, #16384	; 0x4000
   16c1a:	d041      	beq.n	16ca0 <bt_le_adv_resume+0x98>
   16c1c:	4620      	mov	r0, r4
   16c1e:	f00e f963 	bl	24ee8 <atomic_get>
   16c22:	0603      	lsls	r3, r0, #24
   16c24:	d43c      	bmi.n	16ca0 <bt_le_adv_resume+0x98>
   16c26:	4620      	mov	r0, r4
   16c28:	f00e f95e 	bl	24ee8 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   16c2c:	0546      	lsls	r6, r0, #21
   16c2e:	d537      	bpl.n	16ca0 <bt_le_adv_resume+0x98>
	err = le_adv_start_add_conn(adv, &conn);
   16c30:	1d39      	adds	r1, r7, #4
   16c32:	f1a4 0010 	sub.w	r0, r4, #16
   16c36:	f7ff fda7 	bl	16788 <le_adv_start_add_conn>
	if (err) {
   16c3a:	bb88      	cbnz	r0, 16ca0 <bt_le_adv_resume+0x98>
		bool dir_adv = adv_is_directed(adv);
   16c3c:	f1a4 0010 	sub.w	r0, r4, #16
   16c40:	f7ff fd96 	bl	16770 <adv_is_directed>
   16c44:	4602      	mov	r2, r0
   16c46:	4620      	mov	r0, r4
   16c48:	f00e f94e 	bl	24ee8 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   16c4c:	f3c0 3180 	ubfx	r1, r0, #14, #1
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16c50:	4620      	mov	r0, r4
   16c52:	f00e f949 	bl	24ee8 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
   16c56:	f081 0101 	eor.w	r1, r1, #1
	if (atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   16c5a:	0545      	lsls	r5, r0, #21
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
   16c5c:	ea4f 0141 	mov.w	r1, r1, lsl #1
   16c60:	4824      	ldr	r0, [pc, #144]	; (16cf4 <bt_le_adv_resume+0xec>)
		options |= BT_LE_ADV_OPT_CONNECTABLE;
   16c62:	bf48      	it	mi
   16c64:	f041 0101 	orrmi.w	r1, r1, #1
   16c68:	f00e f93e 	bl	24ee8 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   16c6c:	0480      	lsls	r0, r0, #18
		options |= BT_LE_ADV_OPT_USE_IDENTITY;
   16c6e:	bf48      	it	mi
   16c70:	f041 0104 	orrmi.w	r1, r1, #4
		err = bt_id_set_adv_own_addr(adv, options, dir_adv, &own_addr_type);
   16c74:	4820      	ldr	r0, [pc, #128]	; (16cf8 <bt_le_adv_resume+0xf0>)
   16c76:	1cfb      	adds	r3, r7, #3
   16c78:	f7ff fc80 	bl	1657c <bt_id_set_adv_own_addr>
		if (err) {
   16c7c:	4605      	mov	r5, r0
   16c7e:	b190      	cbz	r0, 16ca6 <bt_le_adv_resume+0x9e>
			LOG_ERR("Controller cannot resume connectable advertising (%d)", err);
   16c80:	466c      	mov	r4, sp
   16c82:	b088      	sub	sp, #32
   16c84:	466a      	mov	r2, sp
   16c86:	4b1d      	ldr	r3, [pc, #116]	; (16cfc <bt_le_adv_resume+0xf4>)
   16c88:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16c8c:	2303      	movs	r3, #3
   16c8e:	f842 3f10 	str.w	r3, [r2, #16]!
   16c92:	481b      	ldr	r0, [pc, #108]	; (16d00 <bt_le_adv_resume+0xf8>)
   16c94:	2300      	movs	r3, #0
   16c96:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16c9a:	f7fb ffb9 	bl	12c10 <z_impl_z_log_msg_static_create>
   16c9e:	46a5      	mov	sp, r4
}
   16ca0:	370c      	adds	r7, #12
   16ca2:	46bd      	mov	sp, r7
   16ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_le_adv_set_enable_legacy(adv, enable);
   16ca6:	4814      	ldr	r0, [pc, #80]	; (16cf8 <bt_le_adv_resume+0xf0>)
   16ca8:	2101      	movs	r1, #1
   16caa:	f00e f9d0 	bl	2504e <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   16cae:	687e      	ldr	r6, [r7, #4]
	if (err) {
   16cb0:	b918      	cbnz	r0, 16cba <bt_le_adv_resume+0xb2>
	bt_conn_unref(conn);
   16cb2:	4630      	mov	r0, r6
   16cb4:	f00e fa6d 	bl	25192 <bt_conn_unref>
	if (persist_paused) {
   16cb8:	e7f2      	b.n	16ca0 <bt_le_adv_resume+0x98>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16cba:	4629      	mov	r1, r5
   16cbc:	4630      	mov	r0, r6
   16cbe:	f000 fc5b 	bl	17578 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16cc2:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   16cc6:	480b      	ldr	r0, [pc, #44]	; (16cf4 <bt_le_adv_resume+0xec>)
   16cc8:	f00e f914 	bl	24ef4 <atomic_and>
   16ccc:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   16cce:	4630      	mov	r0, r6
   16cd0:	f00e fa5f 	bl	25192 <bt_conn_unref>
	if (persist_paused) {
   16cd4:	046b      	lsls	r3, r5, #17
   16cd6:	d5e3      	bpl.n	16ca0 <bt_le_adv_resume+0x98>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16cd8:	f3bf 8f5b 	dmb	ish
   16cdc:	e854 3f00 	ldrex	r3, [r4]
   16ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   16ce4:	e844 3200 	strex	r2, r3, [r4]
   16ce8:	2a00      	cmp	r2, #0
   16cea:	d1f7      	bne.n	16cdc <bt_le_adv_resume+0xd4>
   16cec:	f3bf 8f5b 	dmb	ish
   16cf0:	e7d6      	b.n	16ca0 <bt_le_adv_resume+0x98>
   16cf2:	bf00      	nop
   16cf4:	200003b0 	.word	0x200003b0
   16cf8:	200003a0 	.word	0x200003a0
   16cfc:	0002a117 	.word	0x0002a117
   16d00:	0002813c 	.word	0x0002813c

00016d04 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   16d04:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   16d06:	4904      	ldr	r1, [pc, #16]	; (16d18 <bt_pub_key_is_debug+0x14>)
   16d08:	2240      	movs	r2, #64	; 0x40
   16d0a:	f00d fdf9 	bl	24900 <memcmp>
}
   16d0e:	fab0 f080 	clz	r0, r0
   16d12:	0940      	lsrs	r0, r0, #5
   16d14:	bd08      	pop	{r3, pc}
   16d16:	bf00      	nop
   16d18:	0002a1db 	.word	0x0002a1db

00016d1c <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   16d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   16d1e:	4b43      	ldr	r3, [pc, #268]	; (16e2c <bt_pub_key_gen+0x110>)
   16d20:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
   16d24:	f003 0306 	and.w	r3, r3, #6
   16d28:	2b06      	cmp	r3, #6
{
   16d2a:	b087      	sub	sp, #28
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   16d2c:	d00f      	beq.n	16d4e <bt_pub_key_gen+0x32>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		LOG_WRN("ECC HCI commands not available");
   16d2e:	4b40      	ldr	r3, [pc, #256]	; (16e30 <bt_pub_key_gen+0x114>)
   16d30:	9305      	str	r3, [sp, #20]
   16d32:	2302      	movs	r3, #2
   16d34:	9304      	str	r3, [sp, #16]
   16d36:	483f      	ldr	r0, [pc, #252]	; (16e34 <bt_pub_key_gen+0x118>)
   16d38:	2300      	movs	r3, #0
   16d3a:	aa04      	add	r2, sp, #16
   16d3c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -ENOTSUP;
   16d40:	f06f 0585 	mvn.w	r5, #133	; 0x85
   16d44:	f7fb ff64 	bl	12c10 <z_impl_z_log_msg_static_create>
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   16d48:	4628      	mov	r0, r5
   16d4a:	b007      	add	sp, #28
   16d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!new_cb) {
   16d4e:	2800      	cmp	r0, #0
   16d50:	d069      	beq.n	16e26 <bt_pub_key_gen+0x10a>
	return list->head;
   16d52:	4e39      	ldr	r6, [pc, #228]	; (16e38 <bt_pub_key_gen+0x11c>)
   16d54:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16d56:	b1a2      	cbz	r2, 16d82 <bt_pub_key_gen+0x66>
   16d58:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   16d5a:	4283      	cmp	r3, r0
   16d5c:	d10d      	bne.n	16d7a <bt_pub_key_gen+0x5e>
			LOG_WRN("Callback already registered");
   16d5e:	4b37      	ldr	r3, [pc, #220]	; (16e3c <bt_pub_key_gen+0x120>)
   16d60:	9305      	str	r3, [sp, #20]
   16d62:	2302      	movs	r3, #2
   16d64:	9304      	str	r3, [sp, #16]
   16d66:	4833      	ldr	r0, [pc, #204]	; (16e34 <bt_pub_key_gen+0x118>)
   16d68:	2300      	movs	r3, #0
   16d6a:	aa04      	add	r2, sp, #16
   16d6c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   16d70:	f7fb ff4e 	bl	12c10 <z_impl_z_log_msg_static_create>
			return -EALREADY;
   16d74:	f06f 0577 	mvn.w	r5, #119	; 0x77
   16d78:	e7e6      	b.n	16d48 <bt_pub_key_gen+0x2c>
	return node->next;
   16d7a:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16d7c:	b10b      	cbz	r3, 16d82 <bt_pub_key_gen+0x66>
   16d7e:	3b04      	subs	r3, #4
   16d80:	e7eb      	b.n	16d5a <bt_pub_key_gen+0x3e>
	parent->next = child;
   16d82:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   16d84:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   16d86:	1d03      	adds	r3, r0, #4
	list->head = node;
   16d88:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   16d8a:	b902      	cbnz	r2, 16d8e <bt_pub_key_gen+0x72>
	list->tail = node;
   16d8c:	6073      	str	r3, [r6, #4]
   16d8e:	4c2c      	ldr	r4, [pc, #176]	; (16e40 <bt_pub_key_gen+0x124>)
   16d90:	f3bf 8f5b 	dmb	ish
   16d94:	e854 7f00 	ldrex	r7, [r4]
   16d98:	f047 0320 	orr.w	r3, r7, #32
   16d9c:	e844 3200 	strex	r2, r3, [r4]
   16da0:	2a00      	cmp	r2, #0
   16da2:	d1f7      	bne.n	16d94 <bt_pub_key_gen+0x78>
   16da4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   16da8:	f017 0720 	ands.w	r7, r7, #32
   16dac:	d001      	beq.n	16db2 <bt_pub_key_gen+0x96>
	return 0;
   16dae:	2500      	movs	r5, #0
   16db0:	e7ca      	b.n	16d48 <bt_pub_key_gen+0x2c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16db2:	f3bf 8f5b 	dmb	ish
   16db6:	e854 3f00 	ldrex	r3, [r4]
   16dba:	f023 0310 	bic.w	r3, r3, #16
   16dbe:	e844 3200 	strex	r2, r3, [r4]
   16dc2:	2a00      	cmp	r2, #0
   16dc4:	d1f7      	bne.n	16db6 <bt_pub_key_gen+0x9a>
   16dc6:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   16dca:	463a      	mov	r2, r7
   16dcc:	4639      	mov	r1, r7
   16dce:	f242 0025 	movw	r0, #8229	; 0x2025
   16dd2:	f7fe f97f 	bl	150d4 <bt_hci_cmd_send_sync>
	if (err) {
   16dd6:	4605      	mov	r5, r0
   16dd8:	2800      	cmp	r0, #0
   16dda:	d0e8      	beq.n	16dae <bt_pub_key_gen+0x92>
		LOG_ERR("Sending LE P256 Public Key command failed");
   16ddc:	4b19      	ldr	r3, [pc, #100]	; (16e44 <bt_pub_key_gen+0x128>)
   16dde:	9305      	str	r3, [sp, #20]
   16de0:	2302      	movs	r3, #2
   16de2:	9304      	str	r3, [sp, #16]
   16de4:	4813      	ldr	r0, [pc, #76]	; (16e34 <bt_pub_key_gen+0x118>)
   16de6:	463b      	mov	r3, r7
   16de8:	aa04      	add	r2, sp, #16
   16dea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16dee:	f7fb ff0f 	bl	12c10 <z_impl_z_log_msg_static_create>
   16df2:	f3bf 8f5b 	dmb	ish
   16df6:	e854 3f00 	ldrex	r3, [r4]
   16dfa:	f023 0320 	bic.w	r3, r3, #32
   16dfe:	e844 3200 	strex	r2, r3, [r4]
   16e02:	2a00      	cmp	r2, #0
   16e04:	d1f7      	bne.n	16df6 <bt_pub_key_gen+0xda>
   16e06:	f3bf 8f5b 	dmb	ish
	return list->head;
   16e0a:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16e0c:	b13c      	cbz	r4, 16e1e <bt_pub_key_gen+0x102>
			if (cb->func) {
   16e0e:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16e12:	3c04      	subs	r4, #4
			if (cb->func) {
   16e14:	b10b      	cbz	r3, 16e1a <bt_pub_key_gen+0xfe>
				cb->func(NULL);
   16e16:	2000      	movs	r0, #0
   16e18:	4798      	blx	r3
	return node->next;
   16e1a:	6864      	ldr	r4, [r4, #4]
   16e1c:	e7f6      	b.n	16e0c <bt_pub_key_gen+0xf0>
	list->head = NULL;
   16e1e:	2300      	movs	r3, #0
	list->tail = NULL;
   16e20:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   16e24:	e790      	b.n	16d48 <bt_pub_key_gen+0x2c>
		return -EINVAL;
   16e26:	f06f 0515 	mvn.w	r5, #21
   16e2a:	e78d      	b.n	16d48 <bt_pub_key_gen+0x2c>
   16e2c:	20000388 	.word	0x20000388
   16e30:	0002a154 	.word	0x0002a154
   16e34:	00028164 	.word	0x00028164
   16e38:	20003188 	.word	0x20003188
   16e3c:	0002a173 	.word	0x0002a173
   16e40:	2000045c 	.word	0x2000045c
   16e44:	0002a18f 	.word	0x0002a18f

00016e48 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16e48:	4b05      	ldr	r3, [pc, #20]	; (16e60 <bt_pub_key_get+0x18>)
   16e4a:	f3bf 8f5b 	dmb	ish
   16e4e:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   16e50:	4804      	ldr	r0, [pc, #16]	; (16e64 <bt_pub_key_get+0x1c>)
   16e52:	f3bf 8f5b 	dmb	ish
	return NULL;
   16e56:	f013 0f10 	tst.w	r3, #16
}
   16e5a:	bf08      	it	eq
   16e5c:	2000      	moveq	r0, #0
   16e5e:	4770      	bx	lr
   16e60:	2000045c 	.word	0x2000045c
   16e64:	200040d5 	.word	0x200040d5

00016e68 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   16e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err;

	if (dh_key_cb == cb) {
   16e6c:	4d28      	ldr	r5, [pc, #160]	; (16f10 <bt_dh_key_gen+0xa8>)
   16e6e:	682b      	ldr	r3, [r5, #0]
   16e70:	428b      	cmp	r3, r1
{
   16e72:	af00      	add	r7, sp, #0
   16e74:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   16e76:	d045      	beq.n	16f04 <bt_dh_key_gen+0x9c>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   16e78:	b12b      	cbz	r3, 16e86 <bt_dh_key_gen+0x1e>
		return -EBUSY;
   16e7a:	f06f 040f 	mvn.w	r4, #15
		LOG_WRN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   16e7e:	4620      	mov	r0, r4
   16e80:	46bd      	mov	sp, r7
   16e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16e86:	4b23      	ldr	r3, [pc, #140]	; (16f14 <bt_dh_key_gen+0xac>)
   16e88:	f3bf 8f5b 	dmb	ish
   16e8c:	681a      	ldr	r2, [r3, #0]
   16e8e:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   16e92:	f3c2 1840 	ubfx	r8, r2, #5, #1
   16e96:	0692      	lsls	r2, r2, #26
   16e98:	d4ef      	bmi.n	16e7a <bt_dh_key_gen+0x12>
   16e9a:	f3bf 8f5b 	dmb	ish
   16e9e:	681b      	ldr	r3, [r3, #0]
   16ea0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   16ea4:	06db      	lsls	r3, r3, #27
   16ea6:	d530      	bpl.n	16f0a <bt_dh_key_gen+0xa2>
	dh_key_cb = cb;
   16ea8:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   16eaa:	f242 0026 	movw	r0, #8230	; 0x2026
   16eae:	2140      	movs	r1, #64	; 0x40
   16eb0:	f7fe f8d6 	bl	15060 <bt_hci_cmd_create>
	if (!buf) {
   16eb4:	4604      	mov	r4, r0
   16eb6:	b310      	cbz	r0, 16efe <bt_dh_key_gen+0x96>
	return net_buf_simple_add(&buf->b, len);
   16eb8:	2140      	movs	r1, #64	; 0x40
   16eba:	300c      	adds	r0, #12
   16ebc:	f00f fe84 	bl	26bc8 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   16ec0:	2240      	movs	r2, #64	; 0x40
   16ec2:	4631      	mov	r1, r6
   16ec4:	f00d fd43 	bl	2494e <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   16ec8:	4621      	mov	r1, r4
   16eca:	4642      	mov	r2, r8
   16ecc:	f242 0026 	movw	r0, #8230	; 0x2026
   16ed0:	f7fe f900 	bl	150d4 <bt_hci_cmd_send_sync>
	if (err) {
   16ed4:	4604      	mov	r4, r0
   16ed6:	2800      	cmp	r0, #0
   16ed8:	d0d1      	beq.n	16e7e <bt_dh_key_gen+0x16>
		dh_key_cb = NULL;
   16eda:	2300      	movs	r3, #0
   16edc:	602b      	str	r3, [r5, #0]
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   16ede:	466d      	mov	r5, sp
   16ee0:	b088      	sub	sp, #32
   16ee2:	466a      	mov	r2, sp
   16ee4:	490c      	ldr	r1, [pc, #48]	; (16f18 <bt_dh_key_gen+0xb0>)
   16ee6:	e9c2 1405 	strd	r1, r4, [r2, #20]
   16eea:	2103      	movs	r1, #3
   16eec:	f842 1f10 	str.w	r1, [r2, #16]!
   16ef0:	480a      	ldr	r0, [pc, #40]	; (16f1c <bt_dh_key_gen+0xb4>)
   16ef2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   16ef6:	f7fb fe8b 	bl	12c10 <z_impl_z_log_msg_static_create>
   16efa:	46ad      	mov	sp, r5
		return err;
   16efc:	e7bf      	b.n	16e7e <bt_dh_key_gen+0x16>
		return -ENOBUFS;
   16efe:	f06f 0468 	mvn.w	r4, #104	; 0x68
   16f02:	e7ea      	b.n	16eda <bt_dh_key_gen+0x72>
		return -EALREADY;
   16f04:	f06f 0477 	mvn.w	r4, #119	; 0x77
   16f08:	e7b9      	b.n	16e7e <bt_dh_key_gen+0x16>
		return -EADDRNOTAVAIL;
   16f0a:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   16f0e:	e7b6      	b.n	16e7e <bt_dh_key_gen+0x16>
   16f10:	20003184 	.word	0x20003184
   16f14:	2000045c 	.word	0x2000045c
   16f18:	0002a1b9 	.word	0x0002a1b9
   16f1c:	00028164 	.word	0x00028164

00016f20 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   16f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16f22:	4c1b      	ldr	r4, [pc, #108]	; (16f90 <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   16f24:	68c6      	ldr	r6, [r0, #12]
   16f26:	f3bf 8f5b 	dmb	ish
   16f2a:	e854 3f00 	ldrex	r3, [r4]
   16f2e:	f023 0320 	bic.w	r3, r3, #32
   16f32:	e844 3200 	strex	r2, r3, [r4]
   16f36:	2a00      	cmp	r2, #0
   16f38:	d1f7      	bne.n	16f2a <bt_hci_evt_le_pkey_complete+0xa>
   16f3a:	f3bf 8f5b 	dmb	ish

	LOG_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   16f3e:	7833      	ldrb	r3, [r6, #0]
   16f40:	b983      	cbnz	r3, 16f64 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   16f42:	4814      	ldr	r0, [pc, #80]	; (16f94 <bt_hci_evt_le_pkey_complete+0x74>)
   16f44:	2240      	movs	r2, #64	; 0x40
   16f46:	1c71      	adds	r1, r6, #1
   16f48:	f00d fd01 	bl	2494e <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16f4c:	f3bf 8f5b 	dmb	ish
   16f50:	e854 3f00 	ldrex	r3, [r4]
   16f54:	f043 0310 	orr.w	r3, r3, #16
   16f58:	e844 3200 	strex	r2, r3, [r4]
   16f5c:	2a00      	cmp	r2, #0
   16f5e:	d1f7      	bne.n	16f50 <bt_hci_evt_le_pkey_complete+0x30>
   16f60:	f3bf 8f5b 	dmb	ish
	return list->head;
   16f64:	4d0c      	ldr	r5, [pc, #48]	; (16f98 <bt_hci_evt_le_pkey_complete+0x78>)
   16f66:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16f68:	b16c      	cbz	r4, 16f86 <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   16f6a:	4f0a      	ldr	r7, [pc, #40]	; (16f94 <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16f6c:	3c04      	subs	r4, #4
		if (cb->func) {
   16f6e:	6823      	ldr	r3, [r4, #0]
   16f70:	b12b      	cbz	r3, 16f7e <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
   16f72:	7832      	ldrb	r2, [r6, #0]
   16f74:	2a00      	cmp	r2, #0
   16f76:	bf0c      	ite	eq
   16f78:	4638      	moveq	r0, r7
   16f7a:	2000      	movne	r0, #0
   16f7c:	4798      	blx	r3
	return node->next;
   16f7e:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   16f80:	b10c      	cbz	r4, 16f86 <bt_hci_evt_le_pkey_complete+0x66>
   16f82:	3c04      	subs	r4, #4
   16f84:	e7f3      	b.n	16f6e <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
   16f86:	2300      	movs	r3, #0
	list->tail = NULL;
   16f88:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   16f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16f8e:	bf00      	nop
   16f90:	2000045c 	.word	0x2000045c
   16f94:	200040d5 	.word	0x200040d5
   16f98:	20003188 	.word	0x20003188

00016f9c <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	LOG_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   16f9c:	4905      	ldr	r1, [pc, #20]	; (16fb4 <bt_hci_evt_le_dhkey_complete+0x18>)
   16f9e:	680b      	ldr	r3, [r1, #0]
   16fa0:	b133      	cbz	r3, 16fb0 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   16fa2:	68c2      	ldr	r2, [r0, #12]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   16fa4:	2000      	movs	r0, #0
   16fa6:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   16fa8:	7811      	ldrb	r1, [r2, #0]
   16faa:	b901      	cbnz	r1, 16fae <bt_hci_evt_le_dhkey_complete+0x12>
   16fac:	1c50      	adds	r0, r2, #1
   16fae:	4718      	bx	r3
	}
}
   16fb0:	4770      	bx	lr
   16fb2:	bf00      	nop
   16fb4:	20003184 	.word	0x20003184

00016fb8 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   16fb8:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   16fba:	4b0b      	ldr	r3, [pc, #44]	; (16fe8 <notify_connected+0x30>)
   16fbc:	681d      	ldr	r5, [r3, #0]
{
   16fbe:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   16fc0:	b925      	cbnz	r5, 16fcc <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16fc2:	4d0a      	ldr	r5, [pc, #40]	; (16fec <notify_connected+0x34>)
   16fc4:	4e0a      	ldr	r6, [pc, #40]	; (16ff0 <notify_connected+0x38>)
   16fc6:	42b5      	cmp	r5, r6
   16fc8:	d307      	bcc.n	16fda <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   16fca:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
   16fcc:	682b      	ldr	r3, [r5, #0]
   16fce:	b113      	cbz	r3, 16fd6 <notify_connected+0x1e>
			cb->connected(conn, conn->err);
   16fd0:	7b21      	ldrb	r1, [r4, #12]
   16fd2:	4620      	mov	r0, r4
   16fd4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   16fd6:	69ad      	ldr	r5, [r5, #24]
   16fd8:	e7f2      	b.n	16fc0 <notify_connected+0x8>
		if (cb->connected) {
   16fda:	682b      	ldr	r3, [r5, #0]
   16fdc:	b113      	cbz	r3, 16fe4 <notify_connected+0x2c>
			cb->connected(conn, conn->err);
   16fde:	7b21      	ldrb	r1, [r4, #12]
   16fe0:	4620      	mov	r0, r4
   16fe2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16fe4:	351c      	adds	r5, #28
   16fe6:	e7ee      	b.n	16fc6 <notify_connected+0xe>
   16fe8:	200031c0 	.word	0x200031c0
   16fec:	0002810c 	.word	0x0002810c
   16ff0:	0002810c 	.word	0x0002810c

00016ff4 <bt_conn_create_pdu_timeout.part.0>:
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
   16ff4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_WRN("Unable to allocate buffer within timeout");
   16ff6:	4b07      	ldr	r3, [pc, #28]	; (17014 <bt_conn_create_pdu_timeout.part.0+0x20>)
   16ff8:	9305      	str	r3, [sp, #20]
   16ffa:	4807      	ldr	r0, [pc, #28]	; (17018 <bt_conn_create_pdu_timeout.part.0+0x24>)
   16ffc:	2302      	movs	r3, #2
   16ffe:	aa04      	add	r2, sp, #16
   17000:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17004:	9304      	str	r3, [sp, #16]
   17006:	f00e f876 	bl	250f6 <z_log_msg_static_create.constprop.0>
}
   1700a:	2000      	movs	r0, #0
   1700c:	b007      	add	sp, #28
   1700e:	f85d fb04 	ldr.w	pc, [sp], #4
   17012:	bf00      	nop
   17014:	0002a222 	.word	0x0002a222
   17018:	0002814c 	.word	0x0002814c

0001701c <tx_notify>:
{
   1701c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   17020:	4f15      	ldr	r7, [pc, #84]	; (17078 <tx_notify+0x5c>)
{
   17022:	4604      	mov	r4, r0
	tx->cb = NULL;
   17024:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
   17028:	f04f 0240 	mov.w	r2, #64	; 0x40
   1702c:	f3ef 8311 	mrs	r3, BASEPRI
   17030:	f382 8812 	msr	BASEPRI_MAX, r2
   17034:	f3bf 8f6f 	isb	sy
	return list->head;
   17038:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   1703a:	b929      	cbnz	r1, 17048 <tx_notify+0x2c>
	__asm__ volatile(
   1703c:	f383 8811 	msr	BASEPRI, r3
   17040:	f3bf 8f6f 	isb	sy
}
   17044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17048:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   1704a:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   1704c:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1704e:	4281      	cmp	r1, r0
	list->tail = node;
   17050:	bf08      	it	eq
   17052:	6262      	streq	r2, [r4, #36]	; 0x24
   17054:	f383 8811 	msr	BASEPRI, r3
   17058:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1705c:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   17060:	f8c1 800c 	str.w	r8, [r1, #12]
	tx->user_data = NULL;
   17064:	e9c1 8801 	strd	r8, r8, [r1, #4]
	k_fifo_put(&free_tx, tx);
   17068:	4638      	mov	r0, r7
   1706a:	f010 fa88 	bl	2757e <k_queue_append>
		cb(conn, user_data, 0);
   1706e:	2200      	movs	r2, #0
   17070:	4631      	mov	r1, r6
   17072:	4620      	mov	r0, r4
   17074:	47a8      	blx	r5
	while (1) {
   17076:	e7d7      	b.n	17028 <tx_notify+0xc>
   17078:	200009c8 	.word	0x200009c8

0001707c <conn_tx_destroy>:
{
   1707c:	b570      	push	{r4, r5, r6, lr}
	void *user_data = tx->user_data;
   1707e:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   17082:	2200      	movs	r2, #0
	tx->user_data = NULL;
   17084:	e9c1 2201 	strd	r2, r2, [r1, #4]
{
   17088:	4604      	mov	r4, r0
	tx->pending_no_cb = 0U;
   1708a:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   1708c:	4805      	ldr	r0, [pc, #20]	; (170a4 <conn_tx_destroy+0x28>)
   1708e:	f010 fa76 	bl	2757e <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   17092:	4631      	mov	r1, r6
   17094:	4620      	mov	r0, r4
   17096:	462b      	mov	r3, r5
   17098:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   1709c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   170a0:	4718      	bx	r3
   170a2:	bf00      	nop
   170a4:	200009c8 	.word	0x200009c8

000170a8 <send_frag>:
{
   170a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_dev.le.acl_mtu) {
   170ac:	f8df 9180 	ldr.w	r9, [pc, #384]	; 17230 <send_frag+0x188>
{
   170b0:	b083      	sub	sp, #12
   170b2:	4698      	mov	r8, r3
	if (bt_dev.le.acl_mtu) {
   170b4:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	return NULL;
   170b8:	2b00      	cmp	r3, #0
{
   170ba:	af00      	add	r7, sp, #0
   170bc:	4604      	mov	r4, r0
   170be:	460e      	mov	r6, r1
	return NULL;
   170c0:	f509 7084 	add.w	r0, r9, #264	; 0x108
{
   170c4:	4615      	mov	r5, r2
	return NULL;
   170c6:	bf08      	it	eq
   170c8:	2000      	moveq	r0, #0
	return z_impl_k_sem_take(sem, timeout);
   170ca:	2200      	movs	r2, #0
   170cc:	2300      	movs	r3, #0
   170ce:	f008 fb63 	bl	1f798 <z_impl_k_sem_take>
	if (k_sem_take(bt_conn_get_pkts(conn), K_NO_WAIT)) {
   170d2:	2800      	cmp	r0, #0
   170d4:	f040 80a9 	bne.w	1722a <send_frag+0x182>
	if (frag) {
   170d8:	2d00      	cmp	r5, #0
   170da:	f000 8085 	beq.w	171e8 <send_frag+0x140>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   170de:	f105 0b0c 	add.w	fp, r5, #12
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   170e2:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   170e6:	607b      	str	r3, [r7, #4]
   170e8:	4658      	mov	r0, fp
   170ea:	f00f fda8 	bl	26c3e <net_buf_simple_tailroom>
   170ee:	687b      	ldr	r3, [r7, #4]
   170f0:	4298      	cmp	r0, r3
   170f2:	d974      	bls.n	171de <send_frag+0x136>
	return bt_dev.le.acl_mtu;
   170f4:	f8b9 2104 	ldrh.w	r2, [r9, #260]	; 0x104
	return net_buf_simple_add_mem(&buf->b, mem, len);
   170f8:	f856 1f0c 	ldr.w	r1, [r6, #12]!
   170fc:	607a      	str	r2, [r7, #4]
   170fe:	4658      	mov	r0, fp
   17100:	f00f fd68 	bl	26bd4 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   17104:	687a      	ldr	r2, [r7, #4]
   17106:	4630      	mov	r0, r6
   17108:	4611      	mov	r1, r2
   1710a:	f00f fd7c 	bl	26c06 <net_buf_simple_pull>
	if (conn->state != BT_CONN_CONNECTED) {
   1710e:	7b63      	ldrb	r3, [r4, #13]
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   17110:	69ae      	ldr	r6, [r5, #24]
	if (conn->state != BT_CONN_CONNECTED) {
   17112:	2b07      	cmp	r3, #7
   17114:	f040 8086 	bne.w	17224 <send_frag+0x17c>
	__asm__ volatile(
   17118:	f04f 0340 	mov.w	r3, #64	; 0x40
   1711c:	f3ef 8211 	mrs	r2, BASEPRI
   17120:	f383 8812 	msr	BASEPRI_MAX, r3
   17124:	f3bf 8f6f 	isb	sy
	if (tx) {
   17128:	2e00      	cmp	r6, #0
   1712a:	d068      	beq.n	171fe <send_frag+0x156>
	parent->next = child;
   1712c:	2300      	movs	r3, #0
   1712e:	6033      	str	r3, [r6, #0]
	return list->tail;
   17130:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   17132:	2b00      	cmp	r3, #0
   17134:	d160      	bne.n	171f8 <send_frag+0x150>
	list->head = node;
   17136:	e9c4 6605 	strd	r6, r6, [r4, #20]
	__asm__ volatile(
   1713a:	f382 8811 	msr	BASEPRI, r2
   1713e:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   17142:	2104      	movs	r1, #4
   17144:	f105 000c 	add.w	r0, r5, #12
   17148:	f00f fd55 	bl	26bf6 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1714c:	8823      	ldrh	r3, [r4, #0]
   1714e:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   17152:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
   17156:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1715a:	8a2b      	ldrh	r3, [r5, #16]
   1715c:	3b04      	subs	r3, #4
   1715e:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   17160:	2302      	movs	r3, #2
   17162:	762b      	strb	r3, [r5, #24]
	return bt_send(buf);
   17164:	4628      	mov	r0, r5
   17166:	f7fe faef 	bl	15748 <bt_send>
	if (err) {
   1716a:	4680      	mov	r8, r0
   1716c:	b390      	cbz	r0, 171d4 <send_frag+0x12c>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1716e:	46eb      	mov	fp, sp
   17170:	b088      	sub	sp, #32
   17172:	466a      	mov	r2, sp
   17174:	4b2f      	ldr	r3, [pc, #188]	; (17234 <send_frag+0x18c>)
   17176:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1717a:	2303      	movs	r3, #3
   1717c:	f842 3f10 	str.w	r3, [r2, #16]!
   17180:	482d      	ldr	r0, [pc, #180]	; (17238 <send_frag+0x190>)
   17182:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17186:	f00d ffb6 	bl	250f6 <z_log_msg_static_create.constprop.0>
   1718a:	46dd      	mov	sp, fp
	__asm__ volatile(
   1718c:	f04f 0340 	mov.w	r3, #64	; 0x40
   17190:	f3ef 8811 	mrs	r8, BASEPRI
   17194:	f383 8812 	msr	BASEPRI_MAX, r3
   17198:	f3bf 8f6f 	isb	sy
		if (tx) {
   1719c:	2e00      	cmp	r6, #0
   1719e:	d03b      	beq.n	17218 <send_frag+0x170>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   171a0:	4631      	mov	r1, r6
   171a2:	f104 0014 	add.w	r0, r4, #20
   171a6:	f00d ff7c 	bl	250a2 <sys_slist_find_and_remove>
	__asm__ volatile(
   171aa:	f388 8811 	msr	BASEPRI, r8
   171ae:	f3bf 8f6f 	isb	sy
		err = -EIO;
   171b2:	f06f 0804 	mvn.w	r8, #4
	if (bt_dev.le.acl_mtu) {
   171b6:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	return NULL;
   171ba:	4820      	ldr	r0, [pc, #128]	; (1723c <send_frag+0x194>)
   171bc:	2b00      	cmp	r3, #0
   171be:	bf08      	it	eq
   171c0:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
   171c2:	f008 fac3 	bl	1f74c <z_impl_k_sem_give>
	if (tx) {
   171c6:	b12e      	cbz	r6, 171d4 <send_frag+0x12c>
		tx_data(buf)->tx = NULL;
   171c8:	2300      	movs	r3, #0
   171ca:	61ab      	str	r3, [r5, #24]
		conn_tx_destroy(conn, tx);
   171cc:	4631      	mov	r1, r6
   171ce:	4620      	mov	r0, r4
   171d0:	f7ff ff54 	bl	1707c <conn_tx_destroy>
}
   171d4:	4640      	mov	r0, r8
   171d6:	370c      	adds	r7, #12
   171d8:	46bd      	mov	sp, r7
   171da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_tailroom(&buf->b);
   171de:	4658      	mov	r0, fp
   171e0:	f00f fd2d 	bl	26c3e <net_buf_simple_tailroom>
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   171e4:	b282      	uxth	r2, r0
   171e6:	e787      	b.n	170f8 <send_frag+0x50>
		buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   171e8:	2200      	movs	r2, #0
   171ea:	2300      	movs	r3, #0
   171ec:	f104 0038 	add.w	r0, r4, #56	; 0x38
   171f0:	f00f fc8f 	bl	26b12 <net_buf_get>
   171f4:	4605      	mov	r5, r0
		frag = buf;
   171f6:	e78a      	b.n	1710e <send_frag+0x66>
	parent->next = child;
   171f8:	601e      	str	r6, [r3, #0]
	list->tail = node;
   171fa:	61a6      	str	r6, [r4, #24]
}
   171fc:	e79d      	b.n	1713a <send_frag+0x92>
	return list->tail;
   171fe:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   17200:	b133      	cbz	r3, 17210 <send_frag+0x168>
			pending_no_cb = &tail_tx->pending_no_cb;
   17202:	f103 0a0c 	add.w	sl, r3, #12
   17206:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   17208:	3301      	adds	r3, #1
   1720a:	f8ca 3000 	str.w	r3, [sl]
   1720e:	e794      	b.n	1713a <send_frag+0x92>
			pending_no_cb = &conn->pending_no_cb;
   17210:	69e3      	ldr	r3, [r4, #28]
   17212:	f104 0a1c 	add.w	sl, r4, #28
   17216:	e7f7      	b.n	17208 <send_frag+0x160>
			(*pending_no_cb)--;
   17218:	f8da 3000 	ldr.w	r3, [sl]
   1721c:	3b01      	subs	r3, #1
   1721e:	f8ca 3000 	str.w	r3, [sl]
   17222:	e7c2      	b.n	171aa <send_frag+0x102>
		err = -ENOTCONN;
   17224:	f06f 087f 	mvn.w	r8, #127	; 0x7f
   17228:	e7c5      	b.n	171b6 <send_frag+0x10e>
		return -ENOBUFS;
   1722a:	f06f 0868 	mvn.w	r8, #104	; 0x68
   1722e:	e7d1      	b.n	171d4 <send_frag+0x12c>
   17230:	20000388 	.word	0x20000388
   17234:	00029ad7 	.word	0x00029ad7
   17238:	0002814c 	.word	0x0002814c
   1723c:	20000490 	.word	0x20000490

00017240 <bt_conn_get_pkts>:
	if (bt_dev.le.acl_mtu) {
   17240:	4804      	ldr	r0, [pc, #16]	; (17254 <bt_conn_get_pkts+0x14>)
   17242:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
	return NULL;
   17246:	2b00      	cmp	r3, #0
   17248:	f500 7084 	add.w	r0, r0, #264	; 0x108
}
   1724c:	bf08      	it	eq
   1724e:	2000      	moveq	r0, #0
   17250:	4770      	bx	lr
   17252:	bf00      	nop
   17254:	20000388 	.word	0x20000388

00017258 <bt_conn_new>:
{
   17258:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   1725a:	2200      	movs	r2, #0
   1725c:	4604      	mov	r4, r0
   1725e:	428a      	cmp	r2, r1
   17260:	d102      	bne.n	17268 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   17262:	2400      	movs	r4, #0
}
   17264:	4620      	mov	r0, r4
   17266:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   17268:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
   1726c:	2001      	movs	r0, #1
   1726e:	f3bf 8f5b 	dmb	ish
   17272:	e853 5f00 	ldrex	r5, [r3]
   17276:	2d00      	cmp	r5, #0
   17278:	d104      	bne.n	17284 <bt_conn_new+0x2c>
   1727a:	e843 0c00 	strex	ip, r0, [r3]
   1727e:	f1bc 0f00 	cmp.w	ip, #0
   17282:	d1f6      	bne.n	17272 <bt_conn_new+0x1a>
   17284:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   17288:	d002      	beq.n	17290 <bt_conn_new+0x38>
   1728a:	34c0      	adds	r4, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1728c:	4402      	add	r2, r0
   1728e:	e7e6      	b.n	1725e <bt_conn_new+0x6>
	if (!conn) {
   17290:	2c00      	cmp	r4, #0
   17292:	d0e6      	beq.n	17262 <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   17294:	22bc      	movs	r2, #188	; 0xbc
   17296:	2100      	movs	r1, #0
   17298:	4620      	mov	r0, r4
   1729a:	f00d fb63 	bl	24964 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1729e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   172a2:	4904      	ldr	r1, [pc, #16]	; (172b4 <bt_conn_new+0x5c>)
   172a4:	f010 fa4b 	bl	2773e <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   172a8:	4903      	ldr	r1, [pc, #12]	; (172b8 <bt_conn_new+0x60>)
   172aa:	f104 0028 	add.w	r0, r4, #40	; 0x28
   172ae:	f010 fa02 	bl	276b6 <k_work_init>
	return conn;
   172b2:	e7d7      	b.n	17264 <bt_conn_new+0xc>
   172b4:	00017af1 	.word	0x00017af1
   172b8:	000250fd 	.word	0x000250fd

000172bc <bt_conn_recv>:
{
   172bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   172c0:	b086      	sub	sp, #24
   172c2:	4616      	mov	r6, r2
   172c4:	af00      	add	r7, sp, #0
   172c6:	4604      	mov	r4, r0
   172c8:	460d      	mov	r5, r1
	tx_notify(conn);
   172ca:	f7ff fea7 	bl	1701c <tx_notify>
	switch (flags) {
   172ce:	2e01      	cmp	r6, #1
   172d0:	d030      	beq.n	17334 <bt_conn_recv+0x78>
   172d2:	2e02      	cmp	r6, #2
   172d4:	d16a      	bne.n	173ac <bt_conn_recv+0xf0>
		if (conn->rx) {
   172d6:	6923      	ldr	r3, [r4, #16]
   172d8:	b163      	cbz	r3, 172f4 <bt_conn_recv+0x38>
			LOG_ERR("Unexpected first L2CAP frame");
   172da:	4b40      	ldr	r3, [pc, #256]	; (173dc <bt_conn_recv+0x120>)
   172dc:	4840      	ldr	r0, [pc, #256]	; (173e0 <bt_conn_recv+0x124>)
   172de:	e9c7 6304 	strd	r6, r3, [r7, #16]
   172e2:	f107 0210 	add.w	r2, r7, #16
   172e6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   172ea:	f00d ff04 	bl	250f6 <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   172ee:	4620      	mov	r0, r4
   172f0:	f00d ff07 	bl	25102 <bt_conn_reset_rx_state>
		conn->rx = buf;
   172f4:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   172f6:	6921      	ldr	r1, [r4, #16]
   172f8:	8a08      	ldrh	r0, [r1, #16]
   172fa:	2801      	cmp	r0, #1
   172fc:	d930      	bls.n	17360 <bt_conn_recv+0xa4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   172fe:	68cb      	ldr	r3, [r1, #12]
   17300:	881b      	ldrh	r3, [r3, #0]
   17302:	3304      	adds	r3, #4
   17304:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   17306:	4298      	cmp	r0, r3
   17308:	d32a      	bcc.n	17360 <bt_conn_recv+0xa4>
	if (conn->rx->len > acl_total_len) {
   1730a:	d95f      	bls.n	173cc <bt_conn_recv+0x110>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   1730c:	466d      	mov	r5, sp
   1730e:	b088      	sub	sp, #32
   17310:	466a      	mov	r2, sp
   17312:	4934      	ldr	r1, [pc, #208]	; (173e4 <bt_conn_recv+0x128>)
   17314:	61d3      	str	r3, [r2, #28]
   17316:	2304      	movs	r3, #4
   17318:	e9c2 1005 	strd	r1, r0, [r2, #20]
   1731c:	f842 3f10 	str.w	r3, [r2, #16]!
   17320:	482f      	ldr	r0, [pc, #188]	; (173e0 <bt_conn_recv+0x124>)
   17322:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   17326:	f00d fee6 	bl	250f6 <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   1732a:	4620      	mov	r0, r4
   1732c:	46ad      	mov	sp, r5
   1732e:	f00d fee8 	bl	25102 <bt_conn_reset_rx_state>
		return;
   17332:	e015      	b.n	17360 <bt_conn_recv+0xa4>
		if (!conn->rx) {
   17334:	6920      	ldr	r0, [r4, #16]
   17336:	b970      	cbnz	r0, 17356 <bt_conn_recv+0x9a>
			LOG_ERR("Unexpected L2CAP continuation");
   17338:	4b2b      	ldr	r3, [pc, #172]	; (173e8 <bt_conn_recv+0x12c>)
   1733a:	617b      	str	r3, [r7, #20]
   1733c:	2302      	movs	r3, #2
   1733e:	4828      	ldr	r0, [pc, #160]	; (173e0 <bt_conn_recv+0x124>)
   17340:	613b      	str	r3, [r7, #16]
   17342:	f107 0210 	add.w	r2, r7, #16
   17346:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1734a:	f00d fed4 	bl	250f6 <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   1734e:	4620      	mov	r0, r4
   17350:	f00d fed7 	bl	25102 <bt_conn_reset_rx_state>
   17354:	e001      	b.n	1735a <bt_conn_recv+0x9e>
		if (!buf->len) {
   17356:	8a2e      	ldrh	r6, [r5, #16]
   17358:	b936      	cbnz	r6, 17368 <bt_conn_recv+0xac>
		net_buf_unref(buf);
   1735a:	4628      	mov	r0, r5
   1735c:	f004 fd34 	bl	1bdc8 <net_buf_unref>
}
   17360:	3718      	adds	r7, #24
   17362:	46bd      	mov	sp, r7
   17364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17368:	300c      	adds	r0, #12
   1736a:	f00f fc68 	bl	26c3e <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1736e:	4286      	cmp	r6, r0
   17370:	d912      	bls.n	17398 <bt_conn_recv+0xdc>
			LOG_ERR("Not enough buffer space for L2CAP data");
   17372:	4b1e      	ldr	r3, [pc, #120]	; (173ec <bt_conn_recv+0x130>)
   17374:	617b      	str	r3, [r7, #20]
   17376:	2302      	movs	r3, #2
   17378:	613b      	str	r3, [r7, #16]
   1737a:	4819      	ldr	r0, [pc, #100]	; (173e0 <bt_conn_recv+0x124>)
   1737c:	f107 0210 	add.w	r2, r7, #16
   17380:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17384:	f00d feb7 	bl	250f6 <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   17388:	2200      	movs	r2, #0
   1738a:	6921      	ldr	r1, [r4, #16]
   1738c:	4620      	mov	r0, r4
   1738e:	f000 fe07 	bl	17fa0 <bt_l2cap_recv>
			conn->rx = NULL;
   17392:	2300      	movs	r3, #0
   17394:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   17396:	e7e0      	b.n	1735a <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17398:	6920      	ldr	r0, [r4, #16]
   1739a:	8a2a      	ldrh	r2, [r5, #16]
   1739c:	68e9      	ldr	r1, [r5, #12]
   1739e:	300c      	adds	r0, #12
   173a0:	f00f fc18 	bl	26bd4 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   173a4:	4628      	mov	r0, r5
   173a6:	f004 fd0f 	bl	1bdc8 <net_buf_unref>
		break;
   173aa:	e7a4      	b.n	172f6 <bt_conn_recv+0x3a>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   173ac:	46e8      	mov	r8, sp
   173ae:	b088      	sub	sp, #32
   173b0:	466a      	mov	r2, sp
   173b2:	4b0f      	ldr	r3, [pc, #60]	; (173f0 <bt_conn_recv+0x134>)
   173b4:	480a      	ldr	r0, [pc, #40]	; (173e0 <bt_conn_recv+0x124>)
	switch (flags) {
   173b6:	e9c2 3605 	strd	r3, r6, [r2, #20]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   173ba:	2303      	movs	r3, #3
   173bc:	f842 3f10 	str.w	r3, [r2, #16]!
   173c0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   173c4:	f00d fe97 	bl	250f6 <z_log_msg_static_create.constprop.0>
   173c8:	46c5      	mov	sp, r8
   173ca:	e7c0      	b.n	1734e <bt_conn_recv+0x92>
	conn->rx = NULL;
   173cc:	2300      	movs	r3, #0
   173ce:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   173d0:	2201      	movs	r2, #1
   173d2:	4620      	mov	r0, r4
   173d4:	f000 fde4 	bl	17fa0 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   173d8:	e7c2      	b.n	17360 <bt_conn_recv+0xa4>
   173da:	bf00      	nop
   173dc:	0002a24b 	.word	0x0002a24b
   173e0:	0002814c 	.word	0x0002814c
   173e4:	0002a2cb 	.word	0x0002a2cb
   173e8:	0002a268 	.word	0x0002a268
   173ec:	0002a286 	.word	0x0002a286
   173f0:	0002a2ad 	.word	0x0002a2ad

000173f4 <bt_conn_send_cb>:
{
   173f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   173f8:	4698      	mov	r8, r3
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   173fa:	7acb      	ldrb	r3, [r1, #11]
   173fc:	2b07      	cmp	r3, #7
{
   173fe:	b086      	sub	sp, #24
   17400:	4606      	mov	r6, r0
   17402:	460d      	mov	r5, r1
   17404:	4617      	mov	r7, r2
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   17406:	d80e      	bhi.n	17426 <bt_conn_send_cb+0x32>
		LOG_ERR("not enough room in user_data");
   17408:	4b2c      	ldr	r3, [pc, #176]	; (174bc <bt_conn_send_cb+0xc8>)
   1740a:	482d      	ldr	r0, [pc, #180]	; (174c0 <bt_conn_send_cb+0xcc>)
   1740c:	9305      	str	r3, [sp, #20]
   1740e:	aa04      	add	r2, sp, #16
   17410:	2302      	movs	r3, #2
   17412:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17416:	9304      	str	r3, [sp, #16]
   17418:	f00d fe6d 	bl	250f6 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1741c:	f06f 0015 	mvn.w	r0, #21
}
   17420:	b006      	add	sp, #24
   17422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   17426:	7b43      	ldrb	r3, [r0, #13]
   17428:	2b07      	cmp	r3, #7
   1742a:	d00c      	beq.n	17446 <bt_conn_send_cb+0x52>
		LOG_ERR("not connected!");
   1742c:	4b25      	ldr	r3, [pc, #148]	; (174c4 <bt_conn_send_cb+0xd0>)
   1742e:	9305      	str	r3, [sp, #20]
   17430:	4823      	ldr	r0, [pc, #140]	; (174c0 <bt_conn_send_cb+0xcc>)
   17432:	2302      	movs	r3, #2
   17434:	aa04      	add	r2, sp, #16
   17436:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1743a:	9304      	str	r3, [sp, #16]
   1743c:	f00d fe5b 	bl	250f6 <z_log_msg_static_create.constprop.0>
		return -ENOTCONN;
   17440:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   17444:	e7ec      	b.n	17420 <bt_conn_send_cb+0x2c>
	if (cb) {
   17446:	2a00      	cmp	r2, #0
   17448:	d033      	beq.n	174b2 <bt_conn_send_cb+0xbe>
	return z_impl_z_current_get();
   1744a:	f008 fe79 	bl	20140 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1744e:	4b1e      	ldr	r3, [pc, #120]	; (174c8 <bt_conn_send_cb+0xd4>)
   17450:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   17452:	481e      	ldr	r0, [pc, #120]	; (174cc <bt_conn_send_cb+0xd8>)
   17454:	bf07      	ittee	eq
   17456:	2200      	moveq	r2, #0
   17458:	2300      	moveq	r3, #0
   1745a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   1745e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   17462:	f008 f93f 	bl	1f6e4 <z_impl_k_queue_get>
   17466:	4604      	mov	r4, r0
		if (!tx) {
   17468:	b328      	cbz	r0, 174b6 <bt_conn_send_cb+0xc2>
		if (conn->state != BT_CONN_CONNECTED) {
   1746a:	7b73      	ldrb	r3, [r6, #13]
   1746c:	2b07      	cmp	r3, #7
   1746e:	d012      	beq.n	17496 <bt_conn_send_cb+0xa2>
			LOG_WRN("Disconnected while allocating context");
   17470:	4b17      	ldr	r3, [pc, #92]	; (174d0 <bt_conn_send_cb+0xdc>)
   17472:	9305      	str	r3, [sp, #20]
   17474:	4812      	ldr	r0, [pc, #72]	; (174c0 <bt_conn_send_cb+0xcc>)
   17476:	2302      	movs	r3, #2
   17478:	aa04      	add	r2, sp, #16
   1747a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1747e:	9304      	str	r3, [sp, #16]
   17480:	f00d fe39 	bl	250f6 <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   17484:	2300      	movs	r3, #0
	tx->user_data = NULL;
   17486:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   1748a:	4810      	ldr	r0, [pc, #64]	; (174cc <bt_conn_send_cb+0xd8>)
	tx->pending_no_cb = 0U;
   1748c:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   1748e:	4621      	mov	r1, r4
   17490:	f010 f875 	bl	2757e <k_queue_append>
}
   17494:	e7d4      	b.n	17440 <bt_conn_send_cb+0x4c>
		tx->user_data = user_data;
   17496:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   1749a:	2300      	movs	r3, #0
   1749c:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   1749e:	61ac      	str	r4, [r5, #24]
	tx_data(buf)->is_cont = false;
   174a0:	2400      	movs	r4, #0
	net_buf_put(&conn->tx_queue, buf);
   174a2:	f106 0038 	add.w	r0, r6, #56	; 0x38
	tx_data(buf)->is_cont = false;
   174a6:	772c      	strb	r4, [r5, #28]
	net_buf_put(&conn->tx_queue, buf);
   174a8:	4629      	mov	r1, r5
   174aa:	f00f fb61 	bl	26b70 <net_buf_put>
	return 0;
   174ae:	4620      	mov	r0, r4
   174b0:	e7b6      	b.n	17420 <bt_conn_send_cb+0x2c>
   174b2:	4614      	mov	r4, r2
   174b4:	e7f3      	b.n	1749e <bt_conn_send_cb+0xaa>
			return -ENOBUFS;
   174b6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   174ba:	e7b1      	b.n	17420 <bt_conn_send_cb+0x2c>
   174bc:	0002a2e6 	.word	0x0002a2e6
   174c0:	0002814c 	.word	0x0002814c
   174c4:	0002a303 	.word	0x0002a303
   174c8:	20002b08 	.word	0x20002b08
   174cc:	200009c8 	.word	0x200009c8
   174d0:	0002a312 	.word	0x0002a312

000174d4 <bt_conn_prepare_events>:
{
   174d4:	b570      	push	{r4, r5, r6, lr}
   174d6:	4604      	mov	r4, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
   174d8:	481f      	ldr	r0, [pc, #124]	; (17558 <bt_conn_prepare_events+0x84>)
   174da:	f010 fc6b 	bl	27db4 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   174de:	4b1e      	ldr	r3, [pc, #120]	; (17558 <bt_conn_prepare_events+0x84>)
   174e0:	2200      	movs	r2, #0
   174e2:	2101      	movs	r1, #1
   174e4:	4620      	mov	r0, r4
   174e6:	f010 fc48 	bl	27d7a <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   174ea:	f3bf 8f5b 	dmb	ish
   174ee:	4b1b      	ldr	r3, [pc, #108]	; (1755c <bt_conn_prepare_events+0x88>)
   174f0:	681a      	ldr	r2, [r3, #0]
   174f2:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   174f6:	f104 0614 	add.w	r6, r4, #20
	if (!atomic_get(&conn->ref)) {
   174fa:	b90a      	cbnz	r2, 17500 <bt_conn_prepare_events+0x2c>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   174fc:	2001      	movs	r0, #1
}
   174fe:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   17500:	f1a3 05bc 	sub.w	r5, r3, #188	; 0xbc
   17504:	f813 3caf 	ldrb.w	r3, [r3, #-175]
   17508:	b953      	cbnz	r3, 17520 <bt_conn_prepare_events+0x4c>
   1750a:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1750e:	1d28      	adds	r0, r5, #4
   17510:	f00d fde2 	bl	250d8 <atomic_and>
   17514:	0643      	lsls	r3, r0, #25
   17516:	d503      	bpl.n	17520 <bt_conn_prepare_events+0x4c>
		conn_cleanup(conn);
   17518:	4628      	mov	r0, r5
   1751a:	f00d fdfb 	bl	25114 <conn_cleanup>
		return -ENOTCONN;
   1751e:	e7ed      	b.n	174fc <bt_conn_prepare_events+0x28>
	if (conn->state != BT_CONN_CONNECTED) {
   17520:	7b6b      	ldrb	r3, [r5, #13]
   17522:	2b07      	cmp	r3, #7
   17524:	d1ea      	bne.n	174fc <bt_conn_prepare_events+0x28>
	if (bt_dev.le.acl_mtu) {
   17526:	4b0e      	ldr	r3, [pc, #56]	; (17560 <bt_conn_prepare_events+0x8c>)
   17528:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   1752c:	2a00      	cmp	r2, #0
   1752e:	d0e5      	beq.n	174fc <bt_conn_prepare_events+0x28>
	return sem->count;
   17530:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (packets_waiting && !buffers_available) {
   17534:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   17536:	b159      	cbz	r1, 17550 <bt_conn_prepare_events+0x7c>
   17538:	b952      	cbnz	r2, 17550 <bt_conn_prepare_events+0x7c>
		k_poll_event_init(&events[0],
   1753a:	f503 7384 	add.w	r3, r3, #264	; 0x108
   1753e:	2102      	movs	r1, #2
		k_poll_event_init(&events[0],
   17540:	4630      	mov	r0, r6
   17542:	f010 fc1a 	bl	27d7a <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   17546:	2301      	movs	r3, #1
   17548:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   1754c:	2002      	movs	r0, #2
	return ev_count;
   1754e:	e7d6      	b.n	174fe <bt_conn_prepare_events+0x2a>
		k_poll_event_init(&events[0],
   17550:	4b04      	ldr	r3, [pc, #16]	; (17564 <bt_conn_prepare_events+0x90>)
   17552:	2200      	movs	r2, #0
   17554:	2104      	movs	r1, #4
   17556:	e7f3      	b.n	17540 <bt_conn_prepare_events+0x6c>
   17558:	200005dc 	.word	0x200005dc
   1755c:	20001e7c 	.word	0x20001e7c
   17560:	20000388 	.word	0x20000388
   17564:	20001df8 	.word	0x20001df8

00017568 <bt_conn_lookup_handle>:
{
   17568:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1756a:	2101      	movs	r1, #1
   1756c:	4801      	ldr	r0, [pc, #4]	; (17574 <bt_conn_lookup_handle+0xc>)
   1756e:	f00d be2c 	b.w	251ca <conn_lookup_handle>
   17572:	bf00      	nop
   17574:	20001dc0 	.word	0x20001dc0

00017578 <bt_conn_set_state>:
{
   17578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
   1757c:	7b46      	ldrb	r6, [r0, #13]
   1757e:	428e      	cmp	r6, r1
{
   17580:	af00      	add	r7, sp, #0
   17582:	4604      	mov	r4, r0
   17584:	460d      	mov	r5, r1
	if (conn->state == state) {
   17586:	d118      	bne.n	175ba <bt_conn_set_state+0x42>
	switch (state) {
   17588:	2e08      	cmp	r6, #8
   1758a:	bf96      	itet	ls
   1758c:	4b72      	ldrls	r3, [pc, #456]	; (17758 <bt_conn_set_state+0x1e0>)
	if (conn->state == state) {
   1758e:	4b73      	ldrhi	r3, [pc, #460]	; (1775c <bt_conn_set_state+0x1e4>)
   17590:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
		LOG_WRN("no transition %s", state2str(state));
   17594:	466c      	mov	r4, sp
   17596:	b088      	sub	sp, #32
   17598:	466a      	mov	r2, sp
   1759a:	4971      	ldr	r1, [pc, #452]	; (17760 <bt_conn_set_state+0x1e8>)
   1759c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   175a0:	f44f 7300 	mov.w	r3, #512	; 0x200
   175a4:	8393      	strh	r3, [r2, #28]
   175a6:	4b6f      	ldr	r3, [pc, #444]	; (17764 <bt_conn_set_state+0x1ec>)
   175a8:	f842 3f10 	str.w	r3, [r2, #16]!
   175ac:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
		LOG_WRN("no valid (%u) state was set", state);
   175b0:	486d      	ldr	r0, [pc, #436]	; (17768 <bt_conn_set_state+0x1f0>)
   175b2:	f00d fda0 	bl	250f6 <z_log_msg_static_create.constprop.0>
   175b6:	46a5      	mov	sp, r4
   175b8:	e04c      	b.n	17654 <bt_conn_set_state+0xdc>
	conn->state = state;
   175ba:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   175bc:	b926      	cbnz	r6, 175c8 <bt_conn_set_state+0x50>
		if (conn->type != BT_CONN_TYPE_ISO) {
   175be:	7883      	ldrb	r3, [r0, #2]
   175c0:	2b08      	cmp	r3, #8
   175c2:	d001      	beq.n	175c8 <bt_conn_set_state+0x50>
			bt_conn_ref(conn);
   175c4:	f00d fdc9 	bl	2515a <bt_conn_ref>
	switch (conn->state) {
   175c8:	7b63      	ldrb	r3, [r4, #13]
   175ca:	2b08      	cmp	r3, #8
   175cc:	f200 80bf 	bhi.w	1774e <bt_conn_set_state+0x1d6>
   175d0:	e8df f003 	tbb	[pc, r3]
   175d4:	40400543 	.word	0x40400543
   175d8:	25404040 	.word	0x25404040
   175dc:	40          	.byte	0x40
   175dd:	00          	.byte	0x00
	if (bt_dev.le.acl_mtu) {
   175de:	4d63      	ldr	r5, [pc, #396]	; (1776c <bt_conn_set_state+0x1f4>)
		tx->pending_no_cb = 0U;
   175e0:	f04f 0800 	mov.w	r8, #0
	return NULL;
   175e4:	f505 7684 	add.w	r6, r5, #264	; 0x108
	__asm__ volatile(
   175e8:	f04f 0240 	mov.w	r2, #64	; 0x40
   175ec:	f3ef 8311 	mrs	r3, BASEPRI
   175f0:	f382 8812 	msr	BASEPRI_MAX, r2
   175f4:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   175f8:	69e2      	ldr	r2, [r4, #28]
   175fa:	2a00      	cmp	r2, #0
   175fc:	f000 8082 	beq.w	17704 <bt_conn_set_state+0x18c>
			conn->pending_no_cb--;
   17600:	3a01      	subs	r2, #1
   17602:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   17604:	f383 8811 	msr	BASEPRI, r3
   17608:	f3bf 8f6f 	isb	sy
	if (bt_dev.le.acl_mtu) {
   1760c:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	return NULL;
   17610:	2b00      	cmp	r3, #0
   17612:	bf14      	ite	ne
   17614:	4630      	movne	r0, r6
   17616:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
   17618:	f008 f898 	bl	1f74c <z_impl_k_sem_give>
}
   1761c:	e7e4      	b.n	175e8 <bt_conn_set_state+0x70>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1761e:	78a3      	ldrb	r3, [r4, #2]
   17620:	2b04      	cmp	r3, #4
   17622:	d017      	beq.n	17654 <bt_conn_set_state+0xdc>
	z_impl_k_queue_init(queue);
   17624:	f104 0038 	add.w	r0, r4, #56	; 0x38
   17628:	f00f ff9d 	bl	27566 <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1762c:	4850      	ldr	r0, [pc, #320]	; (17770 <bt_conn_set_state+0x1f8>)
   1762e:	2100      	movs	r1, #0
   17630:	f009 f856 	bl	206e0 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   17634:	2300      	movs	r3, #0
	list->tail = NULL;
   17636:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1763a:	78e3      	ldrb	r3, [r4, #3]
   1763c:	2b01      	cmp	r3, #1
   1763e:	d109      	bne.n	17654 <bt_conn_set_state+0xdc>
			conn->le.conn_param_retry_countdown =
   17640:	2303      	movs	r3, #3
   17642:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   17646:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   1764a:	2300      	movs	r3, #0
   1764c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   17650:	f008 fa60 	bl	1fb14 <k_work_schedule>
}
   17654:	46bd      	mov	sp, r7
   17656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   1765a:	78a3      	ldrb	r3, [r4, #2]
   1765c:	2b04      	cmp	r3, #4
   1765e:	d103      	bne.n	17668 <bt_conn_set_state+0xf0>
			bt_conn_unref(conn);
   17660:	4620      	mov	r0, r4
   17662:	f00d fd96 	bl	25192 <bt_conn_unref>
			break;
   17666:	e7f5      	b.n	17654 <bt_conn_set_state+0xdc>
		switch (old_state) {
   17668:	2e08      	cmp	r6, #8
   1766a:	d8f3      	bhi.n	17654 <bt_conn_set_state+0xdc>
   1766c:	a301      	add	r3, pc, #4	; (adr r3, 17674 <bt_conn_set_state+0xfc>)
   1766e:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   17672:	bf00      	nop
   17674:	000176ed 	.word	0x000176ed
   17678:	00017699 	.word	0x00017699
   1767c:	000176df 	.word	0x000176df
   17680:	00017661 	.word	0x00017661
   17684:	00017661 	.word	0x00017661
   17688:	000176df 	.word	0x000176df
   1768c:	000176df 	.word	0x000176df
   17690:	000176ed 	.word	0x000176ed
   17694:	000176ed 	.word	0x000176ed
			tx_notify(conn);
   17698:	4620      	mov	r0, r4
   1769a:	f7ff fcbf 	bl	1701c <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1769e:	78a3      	ldrb	r3, [r4, #2]
   176a0:	2b01      	cmp	r3, #1
   176a2:	d10a      	bne.n	176ba <bt_conn_set_state+0x142>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   176a4:	f104 0558 	add.w	r5, r4, #88	; 0x58
   176a8:	4628      	mov	r0, r5
   176aa:	f010 f854 	bl	27756 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   176ae:	f010 0f0c 	tst.w	r0, #12
   176b2:	d002      	beq.n	176ba <bt_conn_set_state+0x142>
				k_work_cancel_delayable(&conn->deferred_work);
   176b4:	4628      	mov	r0, r5
   176b6:	f010 f850 	bl	2775a <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   176ba:	f3bf 8f5b 	dmb	ish
   176be:	3404      	adds	r4, #4
   176c0:	e854 3f00 	ldrex	r3, [r4]
   176c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   176c8:	e844 3200 	strex	r2, r3, [r4]
   176cc:	2a00      	cmp	r2, #0
   176ce:	d1f7      	bne.n	176c0 <bt_conn_set_state+0x148>
   176d0:	f3bf 8f5b 	dmb	ish
   176d4:	2100      	movs	r1, #0
   176d6:	4826      	ldr	r0, [pc, #152]	; (17770 <bt_conn_set_state+0x1f8>)
   176d8:	f009 f802 	bl	206e0 <z_impl_k_poll_signal_raise>
   176dc:	e7ba      	b.n	17654 <bt_conn_set_state+0xdc>
			if (conn->err) {
   176de:	7b23      	ldrb	r3, [r4, #12]
   176e0:	2b00      	cmp	r3, #0
   176e2:	d0bd      	beq.n	17660 <bt_conn_set_state+0xe8>
				notify_connected(conn);
   176e4:	4620      	mov	r0, r4
   176e6:	f7ff fc67 	bl	16fb8 <notify_connected>
   176ea:	e7b9      	b.n	17660 <bt_conn_set_state+0xe8>
			LOG_WRN("Invalid (%u) old state", state);
   176ec:	466c      	mov	r4, sp
   176ee:	b088      	sub	sp, #32
   176f0:	466a      	mov	r2, sp
   176f2:	4b20      	ldr	r3, [pc, #128]	; (17774 <bt_conn_set_state+0x1fc>)
		LOG_WRN("no valid (%u) state was set", state);
   176f4:	e9c2 3505 	strd	r3, r5, [r2, #20]
   176f8:	2303      	movs	r3, #3
   176fa:	f842 3f10 	str.w	r3, [r2, #16]!
   176fe:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17702:	e755      	b.n	175b0 <bt_conn_set_state+0x38>
	return list->head;
   17704:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   17706:	b921      	cbnz	r1, 17712 <bt_conn_set_state+0x19a>
   17708:	f383 8811 	msr	BASEPRI, r3
   1770c:	f3bf 8f6f 	isb	sy
		if (!node) {
   17710:	e7a0      	b.n	17654 <bt_conn_set_state+0xdc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17712:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   17714:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   17716:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17718:	4281      	cmp	r1, r0
	list->tail = node;
   1771a:	bf08      	it	eq
   1771c:	61a2      	streq	r2, [r4, #24]
   1771e:	f383 8811 	msr	BASEPRI, r3
   17722:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   17726:	f04f 0240 	mov.w	r2, #64	; 0x40
   1772a:	f3ef 8311 	mrs	r3, BASEPRI
   1772e:	f382 8812 	msr	BASEPRI_MAX, r2
   17732:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   17736:	68ca      	ldr	r2, [r1, #12]
   17738:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   1773a:	f8c1 800c 	str.w	r8, [r1, #12]
	__asm__ volatile(
   1773e:	f383 8811 	msr	BASEPRI, r3
   17742:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   17746:	4620      	mov	r0, r4
   17748:	f7ff fc98 	bl	1707c <conn_tx_destroy>
   1774c:	e75e      	b.n	1760c <bt_conn_set_state+0x94>
		LOG_WRN("no valid (%u) state was set", state);
   1774e:	466c      	mov	r4, sp
   17750:	b088      	sub	sp, #32
   17752:	466a      	mov	r2, sp
   17754:	4b08      	ldr	r3, [pc, #32]	; (17778 <bt_conn_set_state+0x200>)
   17756:	e7cd      	b.n	176f4 <bt_conn_set_state+0x17c>
   17758:	000285cc 	.word	0x000285cc
   1775c:	0002a338 	.word	0x0002a338
   17760:	0002a342 	.word	0x0002a342
   17764:	01000003 	.word	0x01000003
   17768:	0002814c 	.word	0x0002814c
   1776c:	20000388 	.word	0x20000388
   17770:	200005dc 	.word	0x200005dc
   17774:	0002a353 	.word	0x0002a353
   17778:	0002a36a 	.word	0x0002a36a

0001777c <bt_conn_index>:
		index = conn - acl_conns;
   1777c:	4b03      	ldr	r3, [pc, #12]	; (1778c <bt_conn_index+0x10>)
   1777e:	1ac0      	subs	r0, r0, r3
   17780:	4b03      	ldr	r3, [pc, #12]	; (17790 <bt_conn_index+0x14>)
   17782:	1180      	asrs	r0, r0, #6
   17784:	4358      	muls	r0, r3
}
   17786:	b2c0      	uxtb	r0, r0
   17788:	4770      	bx	lr
   1778a:	bf00      	nop
   1778c:	20001dc0 	.word	0x20001dc0
   17790:	aaaaaaab 	.word	0xaaaaaaab

00017794 <bt_conn_create_pdu_timeout>:
{
   17794:	b538      	push	{r3, r4, r5, lr}
   17796:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   17798:	4908      	ldr	r1, [pc, #32]	; (177bc <bt_conn_create_pdu_timeout+0x28>)
   1779a:	2800      	cmp	r0, #0
   1779c:	bf08      	it	eq
   1779e:	4608      	moveq	r0, r1
   177a0:	f00f f9b2 	bl	26b08 <net_buf_alloc_fixed>
	if (!buf) {
   177a4:	4604      	mov	r4, r0
   177a6:	b918      	cbnz	r0, 177b0 <bt_conn_create_pdu_timeout+0x1c>
}
   177a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   177ac:	f7ff bc22 	b.w	16ff4 <bt_conn_create_pdu_timeout.part.0>
	net_buf_simple_reserve(&buf->b, reserve);
   177b0:	1d29      	adds	r1, r5, #4
   177b2:	300c      	adds	r0, #12
   177b4:	f00f fa04 	bl	26bc0 <net_buf_simple_reserve>
   177b8:	4620      	mov	r0, r4
   177ba:	bd38      	pop	{r3, r4, r5, pc}
   177bc:	200009e0 	.word	0x200009e0

000177c0 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   177c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   177c2:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   177c4:	f3bf 8f5b 	dmb	ish
   177c8:	6863      	ldr	r3, [r4, #4]
   177ca:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   177ce:	059b      	lsls	r3, r3, #22
   177d0:	f100 0004 	add.w	r0, r0, #4
   177d4:	d511      	bpl.n	177fa <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   177d6:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   177da:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
   177de:	429a      	cmp	r2, r3
   177e0:	d80b      	bhi.n	177fa <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   177e2:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
   177e6:	429a      	cmp	r2, r3
   177e8:	d307      	bcc.n	177fa <notify_le_param_updated+0x3a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   177ea:	e9d4 2329 	ldrd	r2, r3, [r4, #164]	; 0xa4
   177ee:	429a      	cmp	r2, r3
   177f0:	d103      	bne.n	177fa <notify_le_param_updated+0x3a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   177f2:	f46f 7100 	mvn.w	r1, #512	; 0x200
   177f6:	f00d fc6f 	bl	250d8 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   177fa:	4b10      	ldr	r3, [pc, #64]	; (1783c <notify_le_param_updated+0x7c>)
   177fc:	681d      	ldr	r5, [r3, #0]
   177fe:	b925      	cbnz	r5, 1780a <notify_le_param_updated+0x4a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17800:	4d0f      	ldr	r5, [pc, #60]	; (17840 <notify_le_param_updated+0x80>)
   17802:	4f10      	ldr	r7, [pc, #64]	; (17844 <notify_le_param_updated+0x84>)
   17804:	42bd      	cmp	r5, r7
   17806:	d30c      	bcc.n	17822 <notify_le_param_updated+0x62>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   17808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   1780a:	68ee      	ldr	r6, [r5, #12]
   1780c:	b13e      	cbz	r6, 1781e <notify_le_param_updated+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
   1780e:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   17812:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   17816:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1781a:	4620      	mov	r0, r4
   1781c:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1781e:	69ad      	ldr	r5, [r5, #24]
   17820:	e7ed      	b.n	177fe <notify_le_param_updated+0x3e>
		if (cb->le_param_updated) {
   17822:	68ee      	ldr	r6, [r5, #12]
   17824:	b13e      	cbz	r6, 17836 <notify_le_param_updated+0x76>
			cb->le_param_updated(conn, conn->le.interval,
   17826:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1782a:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1782e:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   17832:	4620      	mov	r0, r4
   17834:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17836:	351c      	adds	r5, #28
   17838:	e7e4      	b.n	17804 <notify_le_param_updated+0x44>
   1783a:	bf00      	nop
   1783c:	200031c0 	.word	0x200031c0
   17840:	0002810c 	.word	0x0002810c
   17844:	0002810c 	.word	0x0002810c

00017848 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   17848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1784c:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   1784e:	4608      	mov	r0, r1
{
   17850:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   17852:	f00d f9f7 	bl	24c44 <bt_le_conn_params_valid>
   17856:	4605      	mov	r5, r0
   17858:	b918      	cbnz	r0, 17862 <le_param_req+0x1a>
		return false;
   1785a:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   1785c:	4628      	mov	r0, r5
   1785e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   17862:	4b13      	ldr	r3, [pc, #76]	; (178b0 <le_param_req+0x68>)
   17864:	681e      	ldr	r6, [r3, #0]
   17866:	b946      	cbnz	r6, 1787a <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17868:	4e12      	ldr	r6, [pc, #72]	; (178b4 <le_param_req+0x6c>)
   1786a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 178b8 <le_param_req+0x70>
   1786e:	4546      	cmp	r6, r8
   17870:	d2f4      	bcs.n	1785c <le_param_req+0x14>
		if (!cb->le_param_req) {
   17872:	68b3      	ldr	r3, [r6, #8]
   17874:	b983      	cbnz	r3, 17898 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17876:	361c      	adds	r6, #28
   17878:	e7f9      	b.n	1786e <le_param_req+0x26>
		if (!cb->le_param_req) {
   1787a:	68b3      	ldr	r3, [r6, #8]
   1787c:	b90b      	cbnz	r3, 17882 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   1787e:	69b6      	ldr	r6, [r6, #24]
   17880:	e7f1      	b.n	17866 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   17882:	4621      	mov	r1, r4
   17884:	4638      	mov	r0, r7
   17886:	4798      	blx	r3
   17888:	2800      	cmp	r0, #0
   1788a:	d0e6      	beq.n	1785a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1788c:	4620      	mov	r0, r4
   1788e:	f00d f9d9 	bl	24c44 <bt_le_conn_params_valid>
   17892:	2800      	cmp	r0, #0
   17894:	d1f3      	bne.n	1787e <le_param_req+0x36>
   17896:	e7e0      	b.n	1785a <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   17898:	4621      	mov	r1, r4
   1789a:	4638      	mov	r0, r7
   1789c:	4798      	blx	r3
   1789e:	2800      	cmp	r0, #0
   178a0:	d0db      	beq.n	1785a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   178a2:	4620      	mov	r0, r4
   178a4:	f00d f9ce 	bl	24c44 <bt_le_conn_params_valid>
   178a8:	2800      	cmp	r0, #0
   178aa:	d1e4      	bne.n	17876 <le_param_req+0x2e>
   178ac:	e7d5      	b.n	1785a <le_param_req+0x12>
   178ae:	bf00      	nop
   178b0:	200031c0 	.word	0x200031c0
   178b4:	0002810c 	.word	0x0002810c
   178b8:	0002810c 	.word	0x0002810c

000178bc <bt_conn_identity_resolved>:

	return false;
}

void bt_conn_identity_resolved(struct bt_conn *conn)
{
   178bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   178c0:	78c3      	ldrb	r3, [r0, #3]
{
   178c2:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   178c4:	b973      	cbnz	r3, 178e4 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
   178c6:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   178ca:	4b10      	ldr	r3, [pc, #64]	; (1790c <bt_conn_identity_resolved+0x50>)
   178cc:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   178ce:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   178d2:	b955      	cbnz	r5, 178ea <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   178d4:	4d0e      	ldr	r5, [pc, #56]	; (17910 <bt_conn_identity_resolved+0x54>)
   178d6:	4f0f      	ldr	r7, [pc, #60]	; (17914 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   178d8:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   178dc:	42bd      	cmp	r5, r7
   178de:	d30c      	bcc.n	178fa <bt_conn_identity_resolved+0x3e>
		}
	}
}
   178e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   178e4:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   178e8:	e7ef      	b.n	178ca <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   178ea:	692b      	ldr	r3, [r5, #16]
   178ec:	b11b      	cbz	r3, 178f6 <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   178ee:	463a      	mov	r2, r7
   178f0:	4631      	mov	r1, r6
   178f2:	4620      	mov	r0, r4
   178f4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   178f6:	69ad      	ldr	r5, [r5, #24]
   178f8:	e7eb      	b.n	178d2 <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   178fa:	692b      	ldr	r3, [r5, #16]
   178fc:	b11b      	cbz	r3, 17906 <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   178fe:	4642      	mov	r2, r8
   17900:	4631      	mov	r1, r6
   17902:	4620      	mov	r0, r4
   17904:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17906:	351c      	adds	r5, #28
   17908:	e7e8      	b.n	178dc <bt_conn_identity_resolved+0x20>
   1790a:	bf00      	nop
   1790c:	200031c0 	.word	0x200031c0
   17910:	0002810c 	.word	0x0002810c
   17914:	0002810c 	.word	0x0002810c

00017918 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   17918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   1791a:	7a43      	ldrb	r3, [r0, #9]
   1791c:	7283      	strb	r3, [r0, #10]
{
   1791e:	4604      	mov	r4, r0
   17920:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   17922:	f00d fd7d 	bl	25420 <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   17926:	4b0c      	ldr	r3, [pc, #48]	; (17958 <bt_conn_security_changed+0x40>)
   17928:	681d      	ldr	r5, [r3, #0]
   1792a:	b925      	cbnz	r5, 17936 <bt_conn_security_changed+0x1e>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1792c:	4d0b      	ldr	r5, [pc, #44]	; (1795c <bt_conn_security_changed+0x44>)
   1792e:	4f0c      	ldr	r7, [pc, #48]	; (17960 <bt_conn_security_changed+0x48>)
   17930:	42bd      	cmp	r5, r7
   17932:	d308      	bcc.n	17946 <bt_conn_security_changed+0x2e>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   17934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->security_changed) {
   17936:	696b      	ldr	r3, [r5, #20]
   17938:	b11b      	cbz	r3, 17942 <bt_conn_security_changed+0x2a>
			cb->security_changed(conn, conn->sec_level, err);
   1793a:	7a61      	ldrb	r1, [r4, #9]
   1793c:	4632      	mov	r2, r6
   1793e:	4620      	mov	r0, r4
   17940:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   17942:	69ad      	ldr	r5, [r5, #24]
   17944:	e7f1      	b.n	1792a <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   17946:	696b      	ldr	r3, [r5, #20]
   17948:	b11b      	cbz	r3, 17952 <bt_conn_security_changed+0x3a>
			cb->security_changed(conn, conn->sec_level, err);
   1794a:	7a61      	ldrb	r1, [r4, #9]
   1794c:	4632      	mov	r2, r6
   1794e:	4620      	mov	r0, r4
   17950:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17952:	351c      	adds	r5, #28
   17954:	e7ec      	b.n	17930 <bt_conn_security_changed+0x18>
   17956:	bf00      	nop
   17958:	200031c0 	.word	0x200031c0
   1795c:	0002810c 	.word	0x0002810c
   17960:	0002810c 	.word	0x0002810c

00017964 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   17964:	4b02      	ldr	r3, [pc, #8]	; (17970 <bt_conn_cb_register+0xc>)
   17966:	681a      	ldr	r2, [r3, #0]
   17968:	6182      	str	r2, [r0, #24]
	callback_list = cb;
   1796a:	6018      	str	r0, [r3, #0]
}
   1796c:	4770      	bx	lr
   1796e:	bf00      	nop
   17970:	200031c0 	.word	0x200031c0

00017974 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   17974:	b570      	push	{r4, r5, r6, lr}
   17976:	4606      	mov	r6, r0
   17978:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1797a:	480a      	ldr	r0, [pc, #40]	; (179a4 <bt_conn_add_le+0x30>)
   1797c:	2101      	movs	r1, #1
   1797e:	f7ff fc6b 	bl	17258 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   17982:	4604      	mov	r4, r0
   17984:	b160      	cbz	r0, 179a0 <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   17986:	7206      	strb	r6, [r0, #8]
   17988:	2207      	movs	r2, #7
   1798a:	4629      	mov	r1, r5
   1798c:	3088      	adds	r0, #136	; 0x88
   1798e:	f00c ffde 	bl	2494e <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   17992:	2301      	movs	r3, #1
   17994:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   17996:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   17998:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   1799a:	4b03      	ldr	r3, [pc, #12]	; (179a8 <bt_conn_add_le+0x34>)
   1799c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   179a0:	4620      	mov	r0, r4
   179a2:	bd70      	pop	{r4, r5, r6, pc}
   179a4:	20001dc0 	.word	0x20001dc0
   179a8:	00280018 	.word	0x00280018

000179ac <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   179ac:	b570      	push	{r4, r5, r6, lr}
   179ae:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   179b0:	480a      	ldr	r0, [pc, #40]	; (179dc <bt_conn_lookup_addr_le+0x30>)
{
   179b2:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   179b4:	f00d fbd1 	bl	2515a <bt_conn_ref>
   179b8:	4604      	mov	r4, r0

		if (!conn) {
   179ba:	b120      	cbz	r0, 179c6 <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   179bc:	7883      	ldrb	r3, [r0, #2]
   179be:	2b01      	cmp	r3, #1
   179c0:	d004      	beq.n	179cc <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   179c2:	f00d fbe6 	bl	25192 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   179c6:	2400      	movs	r4, #0
}
   179c8:	4620      	mov	r0, r4
   179ca:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   179cc:	4632      	mov	r2, r6
   179ce:	4629      	mov	r1, r5
   179d0:	f00d fc8f 	bl	252f2 <bt_conn_is_peer_addr_le>
   179d4:	2800      	cmp	r0, #0
   179d6:	d1f7      	bne.n	179c8 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   179d8:	4620      	mov	r0, r4
   179da:	e7f2      	b.n	179c2 <bt_conn_lookup_addr_le+0x16>
   179dc:	20001dc0 	.word	0x20001dc0

000179e0 <bt_conn_exists_le>:
{
   179e0:	b5b0      	push	{r4, r5, r7, lr}
   179e2:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   179e4:	f7ff ffe2 	bl	179ac <bt_conn_lookup_addr_le>
	if (conn) {
   179e8:	4604      	mov	r4, r0
   179ea:	b1e0      	cbz	r0, 17a26 <bt_conn_exists_le+0x46>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   179ec:	7b43      	ldrb	r3, [r0, #13]
	switch (state) {
   179ee:	2b08      	cmp	r3, #8
   179f0:	bf96      	itet	ls
   179f2:	4a0e      	ldrls	r2, [pc, #56]	; (17a2c <bt_conn_exists_le+0x4c>)
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   179f4:	4b0e      	ldrhi	r3, [pc, #56]	; (17a30 <bt_conn_exists_le+0x50>)
   179f6:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   179fa:	466d      	mov	r5, sp
   179fc:	b088      	sub	sp, #32
   179fe:	466a      	mov	r2, sp
   17a00:	490c      	ldr	r1, [pc, #48]	; (17a34 <bt_conn_exists_le+0x54>)
   17a02:	480d      	ldr	r0, [pc, #52]	; (17a38 <bt_conn_exists_le+0x58>)
   17a04:	e9c2 1305 	strd	r1, r3, [r2, #20]
   17a08:	f44f 7300 	mov.w	r3, #512	; 0x200
   17a0c:	8393      	strh	r3, [r2, #28]
   17a0e:	4b0b      	ldr	r3, [pc, #44]	; (17a3c <bt_conn_exists_le+0x5c>)
   17a10:	f842 3f10 	str.w	r3, [r2, #16]!
   17a14:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   17a18:	f00d fb6d 	bl	250f6 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   17a1c:	4620      	mov	r0, r4
   17a1e:	46ad      	mov	sp, r5
   17a20:	f00d fbb7 	bl	25192 <bt_conn_unref>
		return true;
   17a24:	2001      	movs	r0, #1
}
   17a26:	46bd      	mov	sp, r7
   17a28:	bdb0      	pop	{r4, r5, r7, pc}
   17a2a:	bf00      	nop
   17a2c:	000285cc 	.word	0x000285cc
   17a30:	0002a338 	.word	0x0002a338
   17a34:	0002a386 	.word	0x0002a386
   17a38:	0002814c 	.word	0x0002814c
   17a3c:	01000003 	.word	0x01000003

00017a40 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   17a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17a42:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17a44:	480e      	ldr	r0, [pc, #56]	; (17a80 <bt_conn_lookup_state_le+0x40>)
{
   17a46:	460e      	mov	r6, r1
   17a48:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17a4a:	f00d fb86 	bl	2515a <bt_conn_ref>

		if (!conn) {
   17a4e:	4604      	mov	r4, r0
   17a50:	b120      	cbz	r0, 17a5c <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   17a52:	7883      	ldrb	r3, [r0, #2]
   17a54:	2b01      	cmp	r3, #1
   17a56:	d003      	beq.n	17a60 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   17a58:	f00d fb9b 	bl	25192 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   17a5c:	2400      	movs	r4, #0
   17a5e:	e00d      	b.n	17a7c <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   17a60:	b136      	cbz	r6, 17a70 <bt_conn_lookup_state_le+0x30>
   17a62:	4632      	mov	r2, r6
   17a64:	4629      	mov	r1, r5
   17a66:	f00d fc44 	bl	252f2 <bt_conn_is_peer_addr_le>
   17a6a:	b908      	cbnz	r0, 17a70 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   17a6c:	4620      	mov	r0, r4
   17a6e:	e7f3      	b.n	17a58 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   17a70:	7b63      	ldrb	r3, [r4, #13]
   17a72:	42bb      	cmp	r3, r7
   17a74:	d1fa      	bne.n	17a6c <bt_conn_lookup_state_le+0x2c>
   17a76:	7a23      	ldrb	r3, [r4, #8]
   17a78:	42ab      	cmp	r3, r5
   17a7a:	d1f7      	bne.n	17a6c <bt_conn_lookup_state_le+0x2c>
}
   17a7c:	4620      	mov	r0, r4
   17a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17a80:	20001dc0 	.word	0x20001dc0

00017a84 <send_conn_le_param_update>:
{
   17a84:	b538      	push	{r3, r4, r5, lr}
   17a86:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   17a88:	4608      	mov	r0, r1
{
   17a8a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   17a8c:	f00d f8da 	bl	24c44 <bt_le_conn_params_valid>
   17a90:	b348      	cbz	r0, 17ae6 <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   17a92:	4b16      	ldr	r3, [pc, #88]	; (17aec <send_conn_le_param_update+0x68>)
   17a94:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
   17a98:	0799      	lsls	r1, r3, #30
   17a9a:	d407      	bmi.n	17aac <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   17a9c:	78e3      	ldrb	r3, [r4, #3]
   17a9e:	b183      	cbz	r3, 17ac2 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   17aa0:	4629      	mov	r1, r5
   17aa2:	4620      	mov	r0, r4
}
   17aa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   17aa8:	f000 bab8 	b.w	1801c <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   17aac:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
   17ab0:	079a      	lsls	r2, r3, #30
   17ab2:	d5f3      	bpl.n	17a9c <send_conn_le_param_update+0x18>
   17ab4:	f3bf 8f5b 	dmb	ish
   17ab8:	6863      	ldr	r3, [r4, #4]
   17aba:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   17abe:	055b      	lsls	r3, r3, #21
   17ac0:	d4ec      	bmi.n	17a9c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   17ac2:	4629      	mov	r1, r5
   17ac4:	4620      	mov	r0, r4
   17ac6:	f00d fc36 	bl	25336 <bt_conn_le_conn_update>
		if (rc == 0) {
   17aca:	b958      	cbnz	r0, 17ae4 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   17acc:	882b      	ldrh	r3, [r5, #0]
   17ace:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   17ad2:	886b      	ldrh	r3, [r5, #2]
   17ad4:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   17ad8:	88ab      	ldrh	r3, [r5, #4]
   17ada:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   17ade:	88eb      	ldrh	r3, [r5, #6]
   17ae0:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   17ae4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   17ae6:	f06f 0015 	mvn.w	r0, #21
   17aea:	e7fb      	b.n	17ae4 <send_conn_le_param_update+0x60>
   17aec:	20000388 	.word	0x20000388

00017af0 <deferred_work>:
{
   17af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17af4:	b082      	sub	sp, #8
	if (conn->state == BT_CONN_DISCONNECTED) {
   17af6:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   17afa:	af00      	add	r7, sp, #0
   17afc:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   17afe:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   17b02:	bb0b      	cbnz	r3, 17b48 <deferred_work+0x58>
		bt_l2cap_disconnected(conn);
   17b04:	4630      	mov	r0, r6
   17b06:	f00d fc73 	bl	253f0 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   17b0a:	4b39      	ldr	r3, [pc, #228]	; (17bf0 <deferred_work+0x100>)
   17b0c:	681d      	ldr	r5, [r3, #0]
   17b0e:	b95d      	cbnz	r5, 17b28 <deferred_work+0x38>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17b10:	4d38      	ldr	r5, [pc, #224]	; (17bf4 <deferred_work+0x104>)
   17b12:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 17bf8 <deferred_work+0x108>
   17b16:	4545      	cmp	r5, r8
   17b18:	d30e      	bcc.n	17b38 <deferred_work+0x48>
		bt_conn_unref(conn);
   17b1a:	4630      	mov	r0, r6
   17b1c:	f00d fb39 	bl	25192 <bt_conn_unref>
}
   17b20:	3708      	adds	r7, #8
   17b22:	46bd      	mov	sp, r7
   17b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cb->disconnected) {
   17b28:	686b      	ldr	r3, [r5, #4]
   17b2a:	b11b      	cbz	r3, 17b34 <deferred_work+0x44>
			cb->disconnected(conn, conn->err);
   17b2c:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   17b30:	4630      	mov	r0, r6
   17b32:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   17b34:	69ad      	ldr	r5, [r5, #24]
   17b36:	e7ea      	b.n	17b0e <deferred_work+0x1e>
		if (cb->disconnected) {
   17b38:	686b      	ldr	r3, [r5, #4]
   17b3a:	b11b      	cbz	r3, 17b44 <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
   17b3c:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   17b40:	4630      	mov	r0, r6
   17b42:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17b44:	351c      	adds	r5, #28
   17b46:	e7e6      	b.n	17b16 <deferred_work+0x26>
	if (conn->type != BT_CONN_TYPE_LE) {
   17b48:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   17b4c:	2b01      	cmp	r3, #1
   17b4e:	d1e7      	bne.n	17b20 <deferred_work+0x30>
	if (atomic_test_and_clear_bit(conn->flags,
   17b50:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17b54:	f46f 7100 	mvn.w	r1, #512	; 0x200
   17b58:	4628      	mov	r0, r5
   17b5a:	f00d fabd 	bl	250d8 <atomic_and>
   17b5e:	0581      	lsls	r1, r0, #22
   17b60:	d52a      	bpl.n	17bb8 <deferred_work+0xc8>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   17b62:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   17b64:	603b      	str	r3, [r7, #0]
   17b66:	6d23      	ldr	r3, [r4, #80]	; 0x50
   17b68:	607b      	str	r3, [r7, #4]
		err = send_conn_le_param_update(conn, param);
   17b6a:	4639      	mov	r1, r7
   17b6c:	4630      	mov	r0, r6
   17b6e:	f7ff ff89 	bl	17a84 <send_conn_le_param_update>
		if (!err) {
   17b72:	b988      	cbnz	r0, 17b98 <deferred_work+0xa8>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17b74:	f46f 7180 	mvn.w	r1, #256	; 0x100
   17b78:	4628      	mov	r0, r5
   17b7a:	f00d faad 	bl	250d8 <atomic_and>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17b7e:	f3bf 8f5b 	dmb	ish
   17b82:	e855 3f00 	ldrex	r3, [r5]
   17b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   17b8a:	e845 3200 	strex	r2, r3, [r5]
   17b8e:	2a00      	cmp	r2, #0
   17b90:	d1f7      	bne.n	17b82 <deferred_work+0x92>
   17b92:	f3bf 8f5b 	dmb	ish
   17b96:	e7c3      	b.n	17b20 <deferred_work+0x30>
			LOG_WRN("Send LE param update failed (err %d)", err);
   17b98:	466c      	mov	r4, sp
   17b9a:	b088      	sub	sp, #32
   17b9c:	466a      	mov	r2, sp
   17b9e:	4b17      	ldr	r3, [pc, #92]	; (17bfc <deferred_work+0x10c>)
			LOG_WRN("Send auto LE param update failed (err %d)",
   17ba0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17ba4:	2303      	movs	r3, #3
   17ba6:	f842 3f10 	str.w	r3, [r2, #16]!
   17baa:	4815      	ldr	r0, [pc, #84]	; (17c00 <deferred_work+0x110>)
   17bac:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17bb0:	f00d faa1 	bl	250f6 <z_log_msg_static_create.constprop.0>
   17bb4:	46a5      	mov	sp, r4
   17bb6:	e7e2      	b.n	17b7e <deferred_work+0x8e>
		param = BT_LE_CONN_PARAM(
   17bb8:	4a12      	ldr	r2, [pc, #72]	; (17c04 <deferred_work+0x114>)
   17bba:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
   17bbe:	e9c7 2300 	strd	r2, r3, [r7]
		err = send_conn_le_param_update(conn, param);
   17bc2:	4639      	mov	r1, r7
   17bc4:	4630      	mov	r0, r6
   17bc6:	f7ff ff5d 	bl	17a84 <send_conn_le_param_update>
		if (!err) {
   17bca:	b960      	cbnz	r0, 17be6 <deferred_work+0xf6>
   17bcc:	f3bf 8f5b 	dmb	ish
   17bd0:	e855 3f00 	ldrex	r3, [r5]
   17bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   17bd8:	e845 3200 	strex	r2, r3, [r5]
   17bdc:	2a00      	cmp	r2, #0
   17bde:	d1f7      	bne.n	17bd0 <deferred_work+0xe0>
   17be0:	f3bf 8f5b 	dmb	ish
   17be4:	e7cb      	b.n	17b7e <deferred_work+0x8e>
			LOG_WRN("Send auto LE param update failed (err %d)",
   17be6:	466c      	mov	r4, sp
   17be8:	b088      	sub	sp, #32
   17bea:	466a      	mov	r2, sp
   17bec:	4b06      	ldr	r3, [pc, #24]	; (17c08 <deferred_work+0x118>)
   17bee:	e7d7      	b.n	17ba0 <deferred_work+0xb0>
   17bf0:	200031c0 	.word	0x200031c0
   17bf4:	0002810c 	.word	0x0002810c
   17bf8:	0002810c 	.word	0x0002810c
   17bfc:	0002a3a9 	.word	0x0002a3a9
   17c00:	0002814c 	.word	0x0002814c
   17c04:	00280018 	.word	0x00280018
   17c08:	0002a3ce 	.word	0x0002a3ce

00017c0c <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   17c0c:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   17c0e:	4801      	ldr	r0, [pc, #4]	; (17c14 <bt_conn_create_frag_timeout+0x8>)
   17c10:	f7ff bdc0 	b.w	17794 <bt_conn_create_pdu_timeout>
   17c14:	20000a38 	.word	0x20000a38

00017c18 <bt_conn_process_tx>:
{
   17c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   17c1c:	7b43      	ldrb	r3, [r0, #13]
{
   17c1e:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   17c20:	b95b      	cbnz	r3, 17c3a <bt_conn_process_tx+0x22>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17c22:	f06f 0140 	mvn.w	r1, #64	; 0x40
   17c26:	3004      	adds	r0, #4
   17c28:	f00d fa56 	bl	250d8 <atomic_and>
   17c2c:	0643      	lsls	r3, r0, #25
   17c2e:	d504      	bpl.n	17c3a <bt_conn_process_tx+0x22>
		conn_cleanup(conn);
   17c30:	4628      	mov	r0, r5
}
   17c32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		conn_cleanup(conn);
   17c36:	f00d ba6d 	b.w	25114 <conn_cleanup>
	return z_impl_k_queue_peek_head(queue);
   17c3a:	f105 0038 	add.w	r0, r5, #56	; 0x38
   17c3e:	f00f fcb3 	bl	275a8 <z_impl_k_queue_peek_head>
	BT_ASSERT(buf);
   17c42:	4604      	mov	r4, r0
   17c44:	b960      	cbnz	r0, 17c60 <bt_conn_process_tx+0x48>
   17c46:	4a34      	ldr	r2, [pc, #208]	; (17d18 <bt_conn_process_tx+0x100>)
   17c48:	4934      	ldr	r1, [pc, #208]	; (17d1c <bt_conn_process_tx+0x104>)
   17c4a:	4835      	ldr	r0, [pc, #212]	; (17d20 <bt_conn_process_tx+0x108>)
   17c4c:	f44f 735d 	mov.w	r3, #884	; 0x374
   17c50:	f00c f8ec 	bl	23e2c <assert_print>
   17c54:	4040      	eors	r0, r0
   17c56:	f380 8811 	msr	BASEPRI, r0
   17c5a:	f04f 0003 	mov.w	r0, #3
   17c5e:	df02      	svc	2
	buf = net_buf_ref(buf);
   17c60:	4620      	mov	r0, r4
   17c62:	f00e ff87 	bl	26b74 <net_buf_ref>
	return bt_dev.le.acl_mtu;
   17c66:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 17d24 <bt_conn_process_tx+0x10c>
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   17c6a:	8a02      	ldrh	r2, [r0, #16]
   17c6c:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   17c70:	429a      	cmp	r2, r3
	buf = net_buf_ref(buf);
   17c72:	4604      	mov	r4, r0
	return bt_dev.le.acl_mtu;
   17c74:	7f02      	ldrb	r2, [r0, #28]
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   17c76:	d807      	bhi.n	17c88 <bt_conn_process_tx+0x70>
   17c78:	b932      	cbnz	r2, 17c88 <bt_conn_process_tx+0x70>
		return send_frag(conn, buf, NULL, FRAG_SINGLE);
   17c7a:	2302      	movs	r3, #2
	return send_frag(conn, buf, NULL, FRAG_END);
   17c7c:	4621      	mov	r1, r4
   17c7e:	4628      	mov	r0, r5
   17c80:	f7ff fa12 	bl	170a8 <send_frag>
   17c84:	4606      	mov	r6, r0
   17c86:	e030      	b.n	17cea <bt_conn_process_tx+0xd2>
	if (tx_data(buf)->is_cont) {
   17c88:	4617      	mov	r7, r2
		frag = bt_conn_create_frag(0);
   17c8a:	f04f 0a00 	mov.w	sl, #0
	while (buf->len > conn_mtu(conn)) {
   17c8e:	8a22      	ldrh	r2, [r4, #16]
   17c90:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   17c94:	429a      	cmp	r2, r3
   17c96:	d804      	bhi.n	17ca2 <bt_conn_process_tx+0x8a>
	tx_data(buf)->is_cont = true;
   17c98:	2301      	movs	r3, #1
   17c9a:	7723      	strb	r3, [r4, #28]
	return send_frag(conn, buf, NULL, FRAG_END);
   17c9c:	2200      	movs	r2, #0
   17c9e:	2303      	movs	r3, #3
   17ca0:	e7ec      	b.n	17c7c <bt_conn_process_tx+0x64>
		frag = bt_conn_create_frag(0);
   17ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17ca6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17caa:	2000      	movs	r0, #0
   17cac:	f7ff ffae 	bl	17c0c <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   17cb0:	7b6b      	ldrb	r3, [r5, #13]
   17cb2:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   17cb4:	4680      	mov	r8, r0
	if (conn->state != BT_CONN_CONNECTED) {
   17cb6:	d006      	beq.n	17cc6 <bt_conn_process_tx+0xae>
		net_buf_unref(frag);
   17cb8:	f004 f886 	bl	1bdc8 <net_buf_unref>
	net_buf_unref(buf);
   17cbc:	4620      	mov	r0, r4
}
   17cbe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	net_buf_unref(buf);
   17cc2:	f004 b881 	b.w	1bdc8 <net_buf_unref>
	tx_data(frag)->tx = NULL;
   17cc6:	f8c0 a018 	str.w	sl, [r0, #24]
	tx_data(frag)->is_cont = false;
   17cca:	f880 a01c 	strb.w	sl, [r0, #28]
		err = send_frag(conn, buf, frag, flags);
   17cce:	4602      	mov	r2, r0
   17cd0:	463b      	mov	r3, r7
   17cd2:	4621      	mov	r1, r4
   17cd4:	4628      	mov	r0, r5
   17cd6:	f7ff f9e7 	bl	170a8 <send_frag>
		if (err) {
   17cda:	4606      	mov	r6, r0
   17cdc:	b1b8      	cbz	r0, 17d0e <bt_conn_process_tx+0xf6>
			tx_data(buf)->is_cont = flags != FRAG_START;
   17cde:	f007 0701 	and.w	r7, r7, #1
   17ce2:	7727      	strb	r7, [r4, #28]
			net_buf_unref(frag);
   17ce4:	4640      	mov	r0, r8
   17ce6:	f004 f86f 	bl	1bdc8 <net_buf_unref>
	net_buf_unref(buf);
   17cea:	4620      	mov	r0, r4
   17cec:	f004 f86c 	bl	1bdc8 <net_buf_unref>
	if (err  == -EIO) {
   17cf0:	3605      	adds	r6, #5
   17cf2:	d10e      	bne.n	17d12 <bt_conn_process_tx+0xfa>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   17cf4:	69a6      	ldr	r6, [r4, #24]
		tx_data(buf)->tx = NULL;
   17cf6:	2300      	movs	r3, #0
   17cf8:	61a3      	str	r3, [r4, #24]
		net_buf_unref(buf);
   17cfa:	4620      	mov	r0, r4
   17cfc:	f004 f864 	bl	1bdc8 <net_buf_unref>
		if (tx) {
   17d00:	b13e      	cbz	r6, 17d12 <bt_conn_process_tx+0xfa>
			conn_tx_destroy(conn, tx);
   17d02:	4631      	mov	r1, r6
   17d04:	4628      	mov	r0, r5
}
   17d06:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			conn_tx_destroy(conn, tx);
   17d0a:	f7ff b9b7 	b.w	1707c <conn_tx_destroy>
		flags = FRAG_CONT;
   17d0e:	2701      	movs	r7, #1
   17d10:	e7bd      	b.n	17c8e <bt_conn_process_tx+0x76>
}
   17d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17d16:	bf00      	nop
   17d18:	0002a3f8 	.word	0x0002a3f8
   17d1c:	0002adab 	.word	0x0002adab
   17d20:	0002982c 	.word	0x0002982c
   17d24:	20000388 	.word	0x20000388

00017d28 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   17d28:	4b0b      	ldr	r3, [pc, #44]	; (17d58 <bt_conn_auth_cb_register+0x30>)
   17d2a:	b158      	cbz	r0, 17d44 <bt_conn_auth_cb_register+0x1c>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   17d2c:	681a      	ldr	r2, [r3, #0]
   17d2e:	b962      	cbnz	r2, 17d4a <bt_conn_auth_cb_register+0x22>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   17d30:	6902      	ldr	r2, [r0, #16]
   17d32:	b93a      	cbnz	r2, 17d44 <bt_conn_auth_cb_register+0x1c>
   17d34:	6802      	ldr	r2, [r0, #0]
   17d36:	b95a      	cbnz	r2, 17d50 <bt_conn_auth_cb_register+0x28>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   17d38:	6842      	ldr	r2, [r0, #4]
   17d3a:	b94a      	cbnz	r2, 17d50 <bt_conn_auth_cb_register+0x28>
   17d3c:	6882      	ldr	r2, [r0, #8]
   17d3e:	b93a      	cbnz	r2, 17d50 <bt_conn_auth_cb_register+0x28>
   17d40:	6942      	ldr	r2, [r0, #20]
   17d42:	b92a      	cbnz	r2, 17d50 <bt_conn_auth_cb_register+0x28>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   17d44:	6018      	str	r0, [r3, #0]
		return 0;
   17d46:	2000      	movs	r0, #0
   17d48:	4770      	bx	lr
		return -EALREADY;
   17d4a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17d4e:	4770      	bx	lr
		return -EINVAL;
   17d50:	f06f 0015 	mvn.w	r0, #21
	return 0;
}
   17d54:	4770      	bx	lr
   17d56:	bf00      	nop
   17d58:	200031cc 	.word	0x200031cc

00017d5c <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   17d5c:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   17d5e:	480c      	ldr	r0, [pc, #48]	; (17d90 <bt_conn_init+0x34>)
   17d60:	f00f fc01 	bl	27566 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   17d64:	490b      	ldr	r1, [pc, #44]	; (17d94 <bt_conn_init+0x38>)
   17d66:	480a      	ldr	r0, [pc, #40]	; (17d90 <bt_conn_init+0x34>)
   17d68:	f00f fc09 	bl	2757e <k_queue_append>
   17d6c:	490a      	ldr	r1, [pc, #40]	; (17d98 <bt_conn_init+0x3c>)
   17d6e:	4808      	ldr	r0, [pc, #32]	; (17d90 <bt_conn_init+0x34>)
   17d70:	f00f fc05 	bl	2757e <k_queue_append>
   17d74:	4909      	ldr	r1, [pc, #36]	; (17d9c <bt_conn_init+0x40>)
   17d76:	4806      	ldr	r0, [pc, #24]	; (17d90 <bt_conn_init+0x34>)
   17d78:	f00f fc01 	bl	2757e <k_queue_append>
	}

	bt_att_init();
   17d7c:	f001 f8d2 	bl	18f24 <bt_att_init>

	err = bt_smp_init();
   17d80:	f003 fe02 	bl	1b988 <bt_smp_init>
	if (err) {
   17d84:	4604      	mov	r4, r0
   17d86:	b908      	cbnz	r0, 17d8c <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
   17d88:	f00d fb97 	bl	254ba <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   17d8c:	4620      	mov	r0, r4
   17d8e:	bd10      	pop	{r4, pc}
   17d90:	200009c8 	.word	0x200009c8
   17d94:	20003190 	.word	0x20003190
   17d98:	200031a0 	.word	0x200031a0
   17d9c:	200031b0 	.word	0x200031b0

00017da0 <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   17da0:	b580      	push	{r7, lr}
   17da2:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   17da4:	b088      	sub	sp, #32
   17da6:	466a      	mov	r2, sp
   17da8:	4b06      	ldr	r3, [pc, #24]	; (17dc4 <l2cap_create_le_sig_pdu.part.0+0x24>)
   17daa:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17dae:	2303      	movs	r3, #3
   17db0:	f842 3f10 	str.w	r3, [r2, #16]!
   17db4:	4804      	ldr	r0, [pc, #16]	; (17dc8 <l2cap_create_le_sig_pdu.part.0+0x28>)
   17db6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17dba:	f00d fae5 	bl	25388 <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   17dbe:	2000      	movs	r0, #0
   17dc0:	46bd      	mov	sp, r7
   17dc2:	bd80      	pop	{r7, pc}
   17dc4:	0002a4a1 	.word	0x0002a4a1
   17dc8:	0002818c 	.word	0x0002818c

00017dcc <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   17dcc:	b580      	push	{r7, lr}
   17dce:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
   17dd0:	b088      	sub	sp, #32
   17dd2:	466a      	mov	r2, sp
   17dd4:	4b07      	ldr	r3, [pc, #28]	; (17df4 <l2cap_accept.part.0+0x28>)
   17dd6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17dda:	2303      	movs	r3, #3
   17ddc:	f842 3f10 	str.w	r3, [r2, #16]!
   17de0:	4805      	ldr	r0, [pc, #20]	; (17df8 <l2cap_accept.part.0+0x2c>)
   17de2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17de6:	f00d facf 	bl	25388 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   17dea:	f06f 000b 	mvn.w	r0, #11
   17dee:	46bd      	mov	sp, r7
   17df0:	bd80      	pop	{r7, pc}
   17df2:	bf00      	nop
   17df4:	0002a4c9 	.word	0x0002a4c9
   17df8:	0002818c 	.word	0x0002818c

00017dfc <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   17dfc:	4b04      	ldr	r3, [pc, #16]	; (17e10 <l2cap_accept+0x14>)
   17dfe:	681a      	ldr	r2, [r3, #0]
   17e00:	b10a      	cbz	r2, 17e06 <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   17e02:	f7ff bfe3 	b.w	17dcc <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   17e06:	4803      	ldr	r0, [pc, #12]	; (17e14 <l2cap_accept+0x18>)
   17e08:	6058      	str	r0, [r3, #4]
		*chan = &l2cap->chan.chan;
   17e0a:	600b      	str	r3, [r1, #0]
}
   17e0c:	4610      	mov	r0, r2
   17e0e:	4770      	bx	lr
   17e10:	200031d0 	.word	0x200031d0
   17e14:	00028610 	.word	0x00028610

00017e18 <bt_l2cap_connected>:
{
   17e18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   17e1a:	4d24      	ldr	r5, [pc, #144]	; (17eac <bt_l2cap_connected+0x94>)
   17e1c:	4f24      	ldr	r7, [pc, #144]	; (17eb0 <bt_l2cap_connected+0x98>)
{
   17e1e:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17e20:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   17e22:	42bd      	cmp	r5, r7
   17e24:	d301      	bcc.n	17e2a <bt_l2cap_connected+0x12>
}
   17e26:	b003      	add	sp, #12
   17e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   17e2a:	686b      	ldr	r3, [r5, #4]
   17e2c:	a901      	add	r1, sp, #4
   17e2e:	4620      	mov	r0, r4
   17e30:	4798      	blx	r3
   17e32:	2800      	cmp	r0, #0
   17e34:	db34      	blt.n	17ea0 <bt_l2cap_connected+0x88>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   17e36:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   17e38:	882a      	ldrh	r2, [r5, #0]
   17e3a:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   17e3c:	849a      	strh	r2, [r3, #36]	; 0x24
   17e3e:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   17e42:	68a8      	ldr	r0, [r5, #8]
   17e44:	f3bf 8f5b 	dmb	ish
   17e48:	e852 1f00 	ldrex	r1, [r2]
   17e4c:	e842 6c00 	strex	ip, r6, [r2]
   17e50:	f1bc 0f00 	cmp.w	ip, #0
   17e54:	d1f8      	bne.n	17e48 <bt_l2cap_connected+0x30>
   17e56:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   17e5a:	609e      	str	r6, [r3, #8]
	return list->tail;
   17e5c:	6d61      	ldr	r1, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   17e5e:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   17e62:	b9f9      	cbnz	r1, 17ea4 <bt_l2cap_connected+0x8c>
	list->head = node;
   17e64:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->conn = conn;
   17e68:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   17e6a:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   17e6c:	9801      	ldr	r0, [sp, #4]
   17e6e:	6843      	ldr	r3, [r0, #4]
   17e70:	681b      	ldr	r3, [r3, #0]
   17e72:	b103      	cbz	r3, 17e76 <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
   17e74:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17e76:	9b01      	ldr	r3, [sp, #4]
   17e78:	f3bf 8f5b 	dmb	ish
   17e7c:	3310      	adds	r3, #16
   17e7e:	e853 1f00 	ldrex	r1, [r3]
   17e82:	f041 0101 	orr.w	r1, r1, #1
   17e86:	e843 1200 	strex	r2, r1, [r3]
   17e8a:	2a00      	cmp	r2, #0
   17e8c:	d1f7      	bne.n	17e7e <bt_l2cap_connected+0x66>
   17e8e:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   17e92:	9801      	ldr	r0, [sp, #4]
   17e94:	6843      	ldr	r3, [r0, #4]
   17e96:	69db      	ldr	r3, [r3, #28]
   17e98:	b113      	cbz	r3, 17ea0 <bt_l2cap_connected+0x88>
			chan->ops->status(chan, chan->status);
   17e9a:	f100 0110 	add.w	r1, r0, #16
   17e9e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   17ea0:	350c      	adds	r5, #12
   17ea2:	e7be      	b.n	17e22 <bt_l2cap_connected+0xa>
	parent->next = child;
   17ea4:	600a      	str	r2, [r1, #0]
	list->tail = node;
   17ea6:	6562      	str	r2, [r4, #84]	; 0x54
}
   17ea8:	e7de      	b.n	17e68 <bt_l2cap_connected+0x50>
   17eaa:	bf00      	nop
   17eac:	000280e8 	.word	0x000280e8
   17eb0:	0002810c 	.word	0x0002810c

00017eb4 <l2cap_recv>:
{
   17eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   17eb6:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
   17eb8:	8a0b      	ldrh	r3, [r1, #16]
   17eba:	2b03      	cmp	r3, #3
{
   17ebc:	af02      	add	r7, sp, #8
   17ebe:	4606      	mov	r6, r0
   17ec0:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   17ec2:	d80b      	bhi.n	17edc <l2cap_recv+0x28>
		LOG_ERR("Too small L2CAP signaling PDU");
   17ec4:	4b30      	ldr	r3, [pc, #192]	; (17f88 <l2cap_recv+0xd4>)
		LOG_ERR("Invalid ident value in L2CAP PDU");
   17ec6:	617b      	str	r3, [r7, #20]
   17ec8:	2302      	movs	r3, #2
   17eca:	4830      	ldr	r0, [pc, #192]	; (17f8c <l2cap_recv+0xd8>)
   17ecc:	613b      	str	r3, [r7, #16]
   17ece:	f107 0210 	add.w	r2, r7, #16
   17ed2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17ed6:	f00d fa57 	bl	25388 <z_log_msg_static_create.constprop.0>
		return 0;
   17eda:	e019      	b.n	17f10 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   17edc:	2104      	movs	r1, #4
   17ede:	f105 000c 	add.w	r0, r5, #12
   17ee2:	f00e fe98 	bl	26c16 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   17ee6:	8a29      	ldrh	r1, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
   17ee8:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   17eea:	4299      	cmp	r1, r3
   17eec:	4604      	mov	r4, r0
   17eee:	d013      	beq.n	17f18 <l2cap_recv+0x64>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   17ef0:	466c      	mov	r4, sp
   17ef2:	b088      	sub	sp, #32
   17ef4:	aa02      	add	r2, sp, #8
   17ef6:	4826      	ldr	r0, [pc, #152]	; (17f90 <l2cap_recv+0xdc>)
   17ef8:	61d3      	str	r3, [r2, #28]
   17efa:	2304      	movs	r3, #4
   17efc:	e9c2 0105 	strd	r0, r1, [r2, #20]
   17f00:	f842 3f10 	str.w	r3, [r2, #16]!
   17f04:	4821      	ldr	r0, [pc, #132]	; (17f8c <l2cap_recv+0xd8>)
   17f06:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   17f0a:	f00d fa3d 	bl	25388 <z_log_msg_static_create.constprop.0>
   17f0e:	46a5      	mov	sp, r4
}
   17f10:	2000      	movs	r0, #0
   17f12:	371c      	adds	r7, #28
   17f14:	46bd      	mov	sp, r7
   17f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   17f18:	7843      	ldrb	r3, [r0, #1]
   17f1a:	b90b      	cbnz	r3, 17f20 <l2cap_recv+0x6c>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   17f1c:	4b1d      	ldr	r3, [pc, #116]	; (17f94 <l2cap_recv+0xe0>)
   17f1e:	e7d2      	b.n	17ec6 <l2cap_recv+0x12>
	switch (hdr->code) {
   17f20:	7803      	ldrb	r3, [r0, #0]
   17f22:	2b01      	cmp	r3, #1
   17f24:	d0f4      	beq.n	17f10 <l2cap_recv+0x5c>
   17f26:	2b13      	cmp	r3, #19
   17f28:	d103      	bne.n	17f32 <l2cap_recv+0x7e>
	if (buf->len < sizeof(*rsp)) {
   17f2a:	2901      	cmp	r1, #1
   17f2c:	d8f0      	bhi.n	17f10 <l2cap_recv+0x5c>
		LOG_ERR("Too small LE conn param rsp");
   17f2e:	4b1a      	ldr	r3, [pc, #104]	; (17f98 <l2cap_recv+0xe4>)
   17f30:	e7c9      	b.n	17ec6 <l2cap_recv+0x12>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   17f32:	466d      	mov	r5, sp
   17f34:	b088      	sub	sp, #32
   17f36:	aa02      	add	r2, sp, #8
   17f38:	4918      	ldr	r1, [pc, #96]	; (17f9c <l2cap_recv+0xe8>)
   17f3a:	4814      	ldr	r0, [pc, #80]	; (17f8c <l2cap_recv+0xd8>)
	switch (hdr->code) {
   17f3c:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   17f40:	2303      	movs	r3, #3
   17f42:	f842 3f10 	str.w	r3, [r2, #16]!
   17f46:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17f4a:	f00d fa1d 	bl	25388 <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   17f4e:	2202      	movs	r2, #2
   17f50:	7861      	ldrb	r1, [r4, #1]
   17f52:	46ad      	mov	sp, r5
   17f54:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   17f56:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   17f58:	f00d fa19 	bl	2538e <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   17f5c:	4604      	mov	r4, r0
   17f5e:	2800      	cmp	r0, #0
   17f60:	d0d6      	beq.n	17f10 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   17f62:	2102      	movs	r1, #2
   17f64:	300c      	adds	r0, #12
   17f66:	f00e fe2f 	bl	26bc8 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   17f6a:	2300      	movs	r3, #0
   17f6c:	7003      	strb	r3, [r0, #0]
   17f6e:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   17f70:	4622      	mov	r2, r4
   17f72:	9300      	str	r3, [sp, #0]
   17f74:	2105      	movs	r1, #5
   17f76:	4628      	mov	r0, r5
   17f78:	f00d fa72 	bl	25460 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   17f7c:	2800      	cmp	r0, #0
   17f7e:	d0c7      	beq.n	17f10 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   17f80:	4620      	mov	r0, r4
   17f82:	f003 ff21 	bl	1bdc8 <net_buf_unref>
   17f86:	e7c3      	b.n	17f10 <l2cap_recv+0x5c>
   17f88:	0002a4f0 	.word	0x0002a4f0
   17f8c:	0002818c 	.word	0x0002818c
   17f90:	0002a50e 	.word	0x0002a50e
   17f94:	0002a52f 	.word	0x0002a52f
   17f98:	0002a550 	.word	0x0002a550
   17f9c:	0002a56c 	.word	0x0002a56c

00017fa0 <bt_l2cap_recv>:
{
   17fa0:	b5b0      	push	{r4, r5, r7, lr}
   17fa2:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   17fa4:	8a0b      	ldrh	r3, [r1, #16]
   17fa6:	2b03      	cmp	r3, #3
{
   17fa8:	af00      	add	r7, sp, #0
   17faa:	4605      	mov	r5, r0
   17fac:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   17fae:	d810      	bhi.n	17fd2 <bt_l2cap_recv+0x32>
		LOG_ERR("Too small L2CAP PDU received");
   17fb0:	4b17      	ldr	r3, [pc, #92]	; (18010 <bt_l2cap_recv+0x70>)
   17fb2:	617b      	str	r3, [r7, #20]
   17fb4:	4817      	ldr	r0, [pc, #92]	; (18014 <bt_l2cap_recv+0x74>)
   17fb6:	2302      	movs	r3, #2
   17fb8:	f107 0210 	add.w	r2, r7, #16
   17fbc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17fc0:	613b      	str	r3, [r7, #16]
   17fc2:	f00d f9e1 	bl	25388 <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
   17fc6:	4620      	mov	r0, r4
   17fc8:	f003 fefe 	bl	1bdc8 <net_buf_unref>
}
   17fcc:	3718      	adds	r7, #24
   17fce:	46bd      	mov	sp, r7
   17fd0:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   17fd2:	2104      	movs	r1, #4
   17fd4:	f104 000c 	add.w	r0, r4, #12
   17fd8:	f00e fe1d 	bl	26c16 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   17fdc:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   17fde:	4628      	mov	r0, r5
   17fe0:	f00d fa61 	bl	254a6 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   17fe4:	b978      	cbnz	r0, 18006 <bt_l2cap_recv+0x66>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   17fe6:	466d      	mov	r5, sp
   17fe8:	b088      	sub	sp, #32
   17fea:	466a      	mov	r2, sp
   17fec:	4b0a      	ldr	r3, [pc, #40]	; (18018 <bt_l2cap_recv+0x78>)
   17fee:	4809      	ldr	r0, [pc, #36]	; (18014 <bt_l2cap_recv+0x74>)
   17ff0:	e9c2 3105 	strd	r3, r1, [r2, #20]
   17ff4:	2303      	movs	r3, #3
   17ff6:	f842 3f10 	str.w	r3, [r2, #16]!
   17ffa:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17ffe:	f00d f9c3 	bl	25388 <z_log_msg_static_create.constprop.0>
   18002:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   18004:	e7df      	b.n	17fc6 <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   18006:	6843      	ldr	r3, [r0, #4]
   18008:	4621      	mov	r1, r4
   1800a:	695b      	ldr	r3, [r3, #20]
   1800c:	4798      	blx	r3
   1800e:	e7da      	b.n	17fc6 <bt_l2cap_recv+0x26>
   18010:	0002a594 	.word	0x0002a594
   18014:	0002818c 	.word	0x0002818c
   18018:	0002a5b1 	.word	0x0002a5b1

0001801c <bt_l2cap_update_conn_param>:
{
   1801c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   1801e:	4b17      	ldr	r3, [pc, #92]	; (1807c <bt_l2cap_update_conn_param+0x60>)
{
   18020:	460e      	mov	r6, r1
	ident++;
   18022:	7819      	ldrb	r1, [r3, #0]
   18024:	3101      	adds	r1, #1
   18026:	b2c9      	uxtb	r1, r1
   18028:	2901      	cmp	r1, #1
   1802a:	bf38      	it	cc
   1802c:	2101      	movcc	r1, #1
{
   1802e:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   18030:	2208      	movs	r2, #8
   18032:	2012      	movs	r0, #18
	ident++;
   18034:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   18036:	f00d f9aa 	bl	2538e <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1803a:	4604      	mov	r4, r0
   1803c:	b1d0      	cbz	r0, 18074 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   1803e:	2108      	movs	r1, #8
   18040:	300c      	adds	r0, #12
   18042:	f00e fdc1 	bl	26bc8 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   18046:	8833      	ldrh	r3, [r6, #0]
   18048:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   1804a:	8873      	ldrh	r3, [r6, #2]
   1804c:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1804e:	88b3      	ldrh	r3, [r6, #4]
   18050:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   18052:	88f3      	ldrh	r3, [r6, #6]
   18054:	80c3      	strh	r3, [r0, #6]
   18056:	2300      	movs	r3, #0
   18058:	4628      	mov	r0, r5
   1805a:	9300      	str	r3, [sp, #0]
   1805c:	4622      	mov	r2, r4
   1805e:	2105      	movs	r1, #5
   18060:	f00d f9fe 	bl	25460 <bt_l2cap_send_cb>
	if (err) {
   18064:	4605      	mov	r5, r0
   18066:	b110      	cbz	r0, 1806e <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   18068:	4620      	mov	r0, r4
   1806a:	f003 fead 	bl	1bdc8 <net_buf_unref>
}
   1806e:	4628      	mov	r0, r5
   18070:	b002      	add	sp, #8
   18072:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   18074:	f06f 050b 	mvn.w	r5, #11
   18078:	e7f9      	b.n	1806e <bt_l2cap_update_conn_param+0x52>
   1807a:	bf00      	nop
   1807c:	20004115 	.word	0x20004115

00018080 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   18080:	2823      	cmp	r0, #35	; 0x23
   18082:	d81f      	bhi.n	180c4 <att_op_get_type+0x44>
   18084:	281a      	cmp	r0, #26
   18086:	d804      	bhi.n	18092 <att_op_get_type+0x12>
   18088:	1e43      	subs	r3, r0, #1
   1808a:	2b18      	cmp	r3, #24
   1808c:	d90e      	bls.n	180ac <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   1808e:	2006      	movs	r0, #6
   18090:	4770      	bx	lr
	switch (op) {
   18092:	f1a0 031b 	sub.w	r3, r0, #27
   18096:	2b08      	cmp	r3, #8
   18098:	d81e      	bhi.n	180d8 <att_op_get_type+0x58>
   1809a:	e8df f003 	tbb	[pc, r3]
   1809e:	1d05      	.short	0x1d05
   180a0:	191d231b 	.word	0x191d231b
   180a4:	1d25      	.short	0x1d25
   180a6:	05          	.byte	0x05
   180a7:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   180a8:	2003      	movs	r0, #3
   180aa:	4770      	bx	lr
	switch (op) {
   180ac:	4a0f      	ldr	r2, [pc, #60]	; (180ec <att_op_get_type+0x6c>)
   180ae:	2301      	movs	r3, #1
   180b0:	4083      	lsls	r3, r0
   180b2:	401a      	ands	r2, r3
   180b4:	b9c2      	cbnz	r2, 180e8 <att_op_get_type+0x68>
   180b6:	4a0e      	ldr	r2, [pc, #56]	; (180f0 <att_op_get_type+0x70>)
   180b8:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   180ba:	2a00      	cmp	r2, #0
   180bc:	bf14      	ite	ne
   180be:	2001      	movne	r0, #1
   180c0:	2006      	moveq	r0, #6
   180c2:	4770      	bx	lr
	switch (op) {
   180c4:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   180c8:	2b52      	cmp	r3, #82	; 0x52
   180ca:	d105      	bne.n	180d8 <att_op_get_type+0x58>
		return ATT_COMMAND;
   180cc:	2000      	movs	r0, #0
}
   180ce:	4770      	bx	lr
		return ATT_REQUEST;
   180d0:	2001      	movs	r0, #1
   180d2:	4770      	bx	lr
		return ATT_INDICATION;
   180d4:	2005      	movs	r0, #5
   180d6:	4770      	bx	lr
		return ATT_COMMAND;
   180d8:	f010 0f40 	tst.w	r0, #64	; 0x40
   180dc:	bf0c      	ite	eq
   180de:	2006      	moveq	r0, #6
   180e0:	2000      	movne	r0, #0
   180e2:	4770      	bx	lr
	switch (op) {
   180e4:	2004      	movs	r0, #4
   180e6:	4770      	bx	lr
		return ATT_RESPONSE;
   180e8:	2002      	movs	r0, #2
   180ea:	4770      	bx	lr
   180ec:	028aaaaa 	.word	0x028aaaaa
   180f0:	01455554 	.word	0x01455554

000180f4 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   180f4:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   180f6:	3804      	subs	r0, #4
   180f8:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   180fa:	a901      	add	r1, sp, #4
   180fc:	4802      	ldr	r0, [pc, #8]	; (18108 <bt_att_released+0x14>)
   180fe:	f00f f974 	bl	273ea <k_mem_slab_free>
}
   18102:	b003      	add	sp, #12
   18104:	f85d fb04 	ldr.w	pc, [sp], #4
   18108:	200008d0 	.word	0x200008d0

0001810c <tx_meta_data_free>:
{
   1810c:	b510      	push	{r4, lr}
	(void)memset(data, 0, sizeof(*data));
   1810e:	2100      	movs	r1, #0
{
   18110:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
   18112:	2214      	movs	r2, #20
   18114:	f00c fc26 	bl	24964 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   18118:	4621      	mov	r1, r4
   1811a:	4802      	ldr	r0, [pc, #8]	; (18124 <tx_meta_data_free+0x18>)
}
   1811c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   18120:	f00f ba2d 	b.w	2757e <k_queue_append>
   18124:	200009b0 	.word	0x200009b0

00018128 <find_type_cb>:
{
   18128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1812c:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   1812e:	f8d2 a000 	ldr.w	sl, [r2]
{
   18132:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
   18134:	f8da 3004 	ldr.w	r3, [sl, #4]
   18138:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1813a:	2500      	movs	r5, #0
   1813c:	f642 0301 	movw	r3, #10241	; 0x2801
{
   18140:	4680      	mov	r8, r0
   18142:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18144:	6800      	ldr	r0, [r0, #0]
   18146:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   1814a:	85fb      	strh	r3, [r7, #46]	; 0x2e
   1814c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   18150:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18152:	f00c fc55 	bl	24a00 <bt_uuid_cmp>
   18156:	2800      	cmp	r0, #0
   18158:	d070      	beq.n	1823c <find_type_cb+0x114>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1815a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1815e:	f8d8 0000 	ldr.w	r0, [r8]
   18162:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   18166:	85fb      	strh	r3, [r7, #46]	; 0x2e
   18168:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1816c:	f00c fc48 	bl	24a00 <bt_uuid_cmp>
   18170:	b138      	cbz	r0, 18182 <find_type_cb+0x5a>
		if (data->group &&
   18172:	68a3      	ldr	r3, [r4, #8]
   18174:	b11b      	cbz	r3, 1817e <find_type_cb+0x56>
   18176:	885a      	ldrh	r2, [r3, #2]
   18178:	42b2      	cmp	r2, r6
   1817a:	d200      	bcs.n	1817e <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
   1817c:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1817e:	2001      	movs	r0, #1
   18180:	e009      	b.n	18196 <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   18182:	6861      	ldr	r1, [r4, #4]
   18184:	4608      	mov	r0, r1
   18186:	f00d f9a3 	bl	254d0 <net_buf_frags_len>
   1818a:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   1818e:	1a1b      	subs	r3, r3, r0
   18190:	2b03      	cmp	r3, #3
   18192:	d804      	bhi.n	1819e <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
   18194:	2000      	movs	r0, #0
}
   18196:	3744      	adds	r7, #68	; 0x44
   18198:	46bd      	mov	sp, r7
   1819a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1819e:	4608      	mov	r0, r1
   181a0:	f00e fcec 	bl	26b7c <net_buf_frag_last>
   181a4:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   181a6:	6860      	ldr	r0, [r4, #4]
   181a8:	f00d f992 	bl	254d0 <net_buf_frags_len>
   181ac:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   181b0:	f105 090c 	add.w	r9, r5, #12
   181b4:	ebab 0b00 	sub.w	fp, fp, r0
   181b8:	4648      	mov	r0, r9
   181ba:	f00e fd40 	bl	26c3e <net_buf_simple_tailroom>
   181be:	4558      	cmp	r0, fp
   181c0:	d93f      	bls.n	18242 <find_type_cb+0x11a>
   181c2:	6860      	ldr	r0, [r4, #4]
   181c4:	f00d f984 	bl	254d0 <net_buf_frags_len>
   181c8:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   181cc:	1a18      	subs	r0, r3, r0
	if (!len) {
   181ce:	b970      	cbnz	r0, 181ee <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   181d0:	6863      	ldr	r3, [r4, #4]
   181d2:	7a98      	ldrb	r0, [r3, #10]
   181d4:	f003 fd36 	bl	1bc44 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   181d8:	2200      	movs	r2, #0
   181da:	2300      	movs	r3, #0
   181dc:	f00e fc94 	bl	26b08 <net_buf_alloc_fixed>
		if (!frag) {
   181e0:	4605      	mov	r5, r0
   181e2:	2800      	cmp	r0, #0
   181e4:	d0d6      	beq.n	18194 <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
   181e6:	4601      	mov	r1, r0
   181e8:	6860      	ldr	r0, [r4, #4]
   181ea:	f00e fcd8 	bl	26b9e <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   181ee:	2300      	movs	r3, #0
   181f0:	9300      	str	r3, [sp, #0]
   181f2:	f8d8 a004 	ldr.w	sl, [r8, #4]
   181f6:	6878      	ldr	r0, [r7, #4]
   181f8:	4641      	mov	r1, r8
   181fa:	2310      	movs	r3, #16
   181fc:	f107 0208 	add.w	r2, r7, #8
   18200:	47d0      	blx	sl
	if (read < 0) {
   18202:	f1b0 0800 	subs.w	r8, r0, #0
   18206:	db19      	blt.n	1823c <find_type_cb+0x114>
	if (read != data->value_len) {
   18208:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1820a:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   1820c:	4542      	cmp	r2, r8
   1820e:	d03f      	beq.n	18290 <find_type_cb+0x168>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   18210:	4601      	mov	r1, r0
   18212:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   18216:	f00c fc21 	bl	24a5c <bt_uuid_create>
   1821a:	b9b0      	cbnz	r0, 1824a <find_type_cb+0x122>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   1821c:	466d      	mov	r5, sp
   1821e:	b088      	sub	sp, #32
   18220:	7c23      	ldrb	r3, [r4, #16]
   18222:	aa02      	add	r2, sp, #8
   18224:	491d      	ldr	r1, [pc, #116]	; (1829c <find_type_cb+0x174>)
   18226:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unable to create UUID: size %d", read);
   1822a:	2303      	movs	r3, #3
   1822c:	f842 3f10 	str.w	r3, [r2, #16]!
   18230:	481b      	ldr	r0, [pc, #108]	; (182a0 <find_type_cb+0x178>)
   18232:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18236:	f00d fa39 	bl	256ac <z_log_msg_static_create.constprop.0>
   1823a:	46ad      	mov	sp, r5
	data->group = NULL;
   1823c:	2300      	movs	r3, #0
   1823e:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   18240:	e79d      	b.n	1817e <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
   18242:	4648      	mov	r0, r9
   18244:	f00e fcfb 	bl	26c3e <net_buf_simple_tailroom>
   18248:	e7c1      	b.n	181ce <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1824a:	fa5f f288 	uxtb.w	r2, r8
   1824e:	f107 0108 	add.w	r1, r7, #8
   18252:	f107 0018 	add.w	r0, r7, #24
   18256:	f00c fc01 	bl	24a5c <bt_uuid_create>
   1825a:	b930      	cbnz	r0, 1826a <find_type_cb+0x142>
			LOG_WRN("Unable to create UUID: size %d", read);
   1825c:	466d      	mov	r5, sp
   1825e:	b088      	sub	sp, #32
   18260:	aa02      	add	r2, sp, #8
   18262:	4b10      	ldr	r3, [pc, #64]	; (182a4 <find_type_cb+0x17c>)
   18264:	e9c2 3805 	strd	r3, r8, [r2, #20]
   18268:	e7df      	b.n	1822a <find_type_cb+0x102>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1826a:	f107 0118 	add.w	r1, r7, #24
   1826e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   18272:	f00c fbc5 	bl	24a00 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   18276:	2800      	cmp	r0, #0
   18278:	d1e0      	bne.n	1823c <find_type_cb+0x114>
	data->err = 0x00;
   1827a:	2300      	movs	r3, #0
   1827c:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1827e:	2104      	movs	r1, #4
   18280:	f105 000c 	add.w	r0, r5, #12
   18284:	f00e fca0 	bl	26bc8 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   18288:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1828a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1828c:	68a3      	ldr	r3, [r4, #8]
   1828e:	e775      	b.n	1817c <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   18290:	f107 0108 	add.w	r1, r7, #8
   18294:	f00c fb34 	bl	24900 <memcmp>
   18298:	e7ed      	b.n	18276 <find_type_cb+0x14e>
   1829a:	bf00      	nop
   1829c:	0002a5ed 	.word	0x0002a5ed
   182a0:	00028144 	.word	0x00028144
   182a4:	0002a60c 	.word	0x0002a60c

000182a8 <chan_send>:
{
   182a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   182ac:	4606      	mov	r6, r0
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   182ae:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   182b2:	68cb      	ldr	r3, [r1, #12]
{
   182b4:	b089      	sub	sp, #36	; 0x24
   182b6:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   182b8:	3034      	adds	r0, #52	; 0x34
   182ba:	2102      	movs	r1, #2
   182bc:	f00d f922 	bl	25504 <atomic_test_bit>
   182c0:	b970      	cbnz	r0, 182e0 <chan_send+0x38>
		LOG_ERR("ATT channel not connected");
   182c2:	4b2e      	ldr	r3, [pc, #184]	; (1837c <chan_send+0xd4>)
   182c4:	482e      	ldr	r0, [pc, #184]	; (18380 <chan_send+0xd8>)
   182c6:	e9cd 1306 	strd	r1, r3, [sp, #24]
   182ca:	aa06      	add	r2, sp, #24
   182cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EINVAL;
   182d0:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("ATT channel not connected");
   182d4:	f00d f9ea 	bl	256ac <z_log_msg_static_create.constprop.0>
}
   182d8:	4628      	mov	r0, r5
   182da:	b009      	add	sp, #36	; 0x24
   182dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   182e0:	781b      	ldrb	r3, [r3, #0]
   182e2:	2bd2      	cmp	r3, #210	; 0xd2
   182e4:	d117      	bne.n	18316 <chan_send+0x6e>
		err = bt_smp_sign(chan->att->conn, buf);
   182e6:	6833      	ldr	r3, [r6, #0]
   182e8:	4621      	mov	r1, r4
   182ea:	6818      	ldr	r0, [r3, #0]
   182ec:	f00e fab5 	bl	2685a <bt_smp_sign>
		if (err) {
   182f0:	4605      	mov	r5, r0
   182f2:	b180      	cbz	r0, 18316 <chan_send+0x6e>
			LOG_ERR("Error signing data");
   182f4:	4b23      	ldr	r3, [pc, #140]	; (18384 <chan_send+0xdc>)
   182f6:	9307      	str	r3, [sp, #28]
   182f8:	aa06      	add	r2, sp, #24
   182fa:	2302      	movs	r3, #2
   182fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18300:	481f      	ldr	r0, [pc, #124]	; (18380 <chan_send+0xd8>)
   18302:	9306      	str	r3, [sp, #24]
   18304:	f00d f9d2 	bl	256ac <z_log_msg_static_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   18308:	69a0      	ldr	r0, [r4, #24]
   1830a:	f7ff feff 	bl	1810c <tx_meta_data_free>
			net_buf_unref(buf);
   1830e:	4620      	mov	r0, r4
   18310:	f003 fd5a 	bl	1bdc8 <net_buf_unref>
			return err;
   18314:	e7e0      	b.n	182d8 <chan_send+0x30>
	state->offset = net_buf_simple_headroom(buf);
   18316:	f104 000c 	add.w	r0, r4, #12
   1831a:	f00e fc8c 	bl	26c36 <net_buf_simple_headroom>
	state->len = buf->len;
   1831e:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
   18322:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   18326:	6833      	ldr	r3, [r6, #0]
   18328:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1832a:	68e3      	ldr	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   1832c:	4607      	mov	r7, r0
   1832e:	7818      	ldrb	r0, [r3, #0]
   18330:	f7ff fea6 	bl	18080 <att_op_get_type>
	switch (op_type) {
   18334:	2805      	cmp	r0, #5
   18336:	bf96      	itet	ls
   18338:	4b13      	ldrls	r3, [pc, #76]	; (18388 <chan_send+0xe0>)
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1833a:	4b14      	ldrhi	r3, [pc, #80]	; (1838c <chan_send+0xe4>)
   1833c:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   18340:	f8cd 9000 	str.w	r9, [sp]
   18344:	4628      	mov	r0, r5
   18346:	4622      	mov	r2, r4
   18348:	2104      	movs	r1, #4
   1834a:	f00d f889 	bl	25460 <bt_l2cap_send_cb>
	if (err) {
   1834e:	4605      	mov	r5, r0
   18350:	2800      	cmp	r0, #0
   18352:	d0c1      	beq.n	182d8 <chan_send+0x30>
		if (err == -ENOBUFS) {
   18354:	f110 0f69 	cmn.w	r0, #105	; 0x69
   18358:	d109      	bne.n	1836e <chan_send+0xc6>
			LOG_ERR("Ran out of TX buffers or contexts.");
   1835a:	4b0d      	ldr	r3, [pc, #52]	; (18390 <chan_send+0xe8>)
   1835c:	9307      	str	r3, [sp, #28]
   1835e:	4808      	ldr	r0, [pc, #32]	; (18380 <chan_send+0xd8>)
   18360:	2302      	movs	r3, #2
   18362:	aa06      	add	r2, sp, #24
   18364:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18368:	9306      	str	r3, [sp, #24]
   1836a:	f00d f99f 	bl	256ac <z_log_msg_static_create.constprop.0>
	buf->data = buf->__buf + state->offset;
   1836e:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   18370:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   18374:	fa13 f787 	uxtah	r7, r3, r7
   18378:	60e7      	str	r7, [r4, #12]
}
   1837a:	e7ad      	b.n	182d8 <chan_send+0x30>
   1837c:	0002a62b 	.word	0x0002a62b
   18380:	00028144 	.word	0x00028144
   18384:	0002a645 	.word	0x0002a645
   18388:	00028638 	.word	0x00028638
   1838c:	00025aa1 	.word	0x00025aa1
   18390:	0002a658 	.word	0x0002a658

00018394 <att_get>:
{
   18394:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   18396:	7b43      	ldrb	r3, [r0, #13]
   18398:	2b07      	cmp	r3, #7
   1839a:	d00d      	beq.n	183b8 <att_get+0x24>
		LOG_WRN("Not connected");
   1839c:	4b13      	ldr	r3, [pc, #76]	; (183ec <att_get+0x58>)
   1839e:	9305      	str	r3, [sp, #20]
   183a0:	2302      	movs	r3, #2
   183a2:	9304      	str	r3, [sp, #16]
   183a4:	aa04      	add	r2, sp, #16
   183a6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		LOG_ERR("Unable to find ATT channel");
   183aa:	4811      	ldr	r0, [pc, #68]	; (183f0 <att_get+0x5c>)
   183ac:	f00d f97e 	bl	256ac <z_log_msg_static_create.constprop.0>
		return NULL;
   183b0:	2000      	movs	r0, #0
}
   183b2:	b007      	add	sp, #28
   183b4:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   183b8:	2104      	movs	r1, #4
   183ba:	f00d f874 	bl	254a6 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   183be:	4603      	mov	r3, r0
   183c0:	b938      	cbnz	r0, 183d2 <att_get+0x3e>
		LOG_ERR("Unable to find ATT channel");
   183c2:	4b0c      	ldr	r3, [pc, #48]	; (183f4 <att_get+0x60>)
   183c4:	9305      	str	r3, [sp, #20]
   183c6:	2302      	movs	r3, #2
   183c8:	9304      	str	r3, [sp, #16]
   183ca:	aa04      	add	r2, sp, #16
   183cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   183d0:	e7eb      	b.n	183aa <att_get+0x16>
	if (!atomic_test_bit(att_chan->flags, ATT_CONNECTED)) {
   183d2:	2102      	movs	r1, #2
   183d4:	3030      	adds	r0, #48	; 0x30
   183d6:	f00d f895 	bl	25504 <atomic_test_bit>
   183da:	b918      	cbnz	r0, 183e4 <att_get+0x50>
		LOG_ERR("ATT channel not connected");
   183dc:	4b06      	ldr	r3, [pc, #24]	; (183f8 <att_get+0x64>)
   183de:	e9cd 1304 	strd	r1, r3, [sp, #16]
   183e2:	e7f2      	b.n	183ca <att_get+0x36>
	return att_chan->att;
   183e4:	f853 0c04 	ldr.w	r0, [r3, #-4]
   183e8:	e7e3      	b.n	183b2 <att_get+0x1e>
   183ea:	bf00      	nop
   183ec:	0002a67b 	.word	0x0002a67b
   183f0:	00028144 	.word	0x00028144
   183f4:	0002a689 	.word	0x0002a689
   183f8:	0002a62b 	.word	0x0002a62b

000183fc <bt_att_connected>:
{
   183fc:	b510      	push	{r4, lr}
   183fe:	f100 0330 	add.w	r3, r0, #48	; 0x30
   18402:	4604      	mov	r4, r0
   18404:	f3bf 8f5b 	dmb	ish
   18408:	e853 1f00 	ldrex	r1, [r3]
   1840c:	f041 0104 	orr.w	r1, r1, #4
   18410:	e843 1200 	strex	r2, r1, [r3]
   18414:	2a00      	cmp	r2, #0
   18416:	d1f7      	bne.n	18408 <bt_att_connected+0xc>
   18418:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1841c:	2317      	movs	r3, #23
   1841e:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   18420:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   18422:	1f20      	subs	r0, r4, #4
   18424:	f00d f8ff 	bl	25626 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   18428:	f104 0054 	add.w	r0, r4, #84	; 0x54
   1842c:	4903      	ldr	r1, [pc, #12]	; (1843c <bt_att_connected+0x40>)
   1842e:	f00f f986 	bl	2773e <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   18432:	6820      	ldr	r0, [r4, #0]
}
   18434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   18438:	f001 bd64 	b.w	19f04 <bt_gatt_connected>
   1843c:	0001912d 	.word	0x0001912d

00018440 <read_group_cb>:
{
   18440:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   18444:	4605      	mov	r5, r0
   18446:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18448:	f04f 0800 	mov.w	r8, #0
   1844c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18450:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   18452:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18454:	f88d 8008 	strb.w	r8, [sp, #8]
   18458:	a902      	add	r1, sp, #8
{
   1845a:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1845c:	f8ad 300a 	strh.w	r3, [sp, #10]
   18460:	f00c face 	bl	24a00 <bt_uuid_cmp>
   18464:	b1a0      	cbz	r0, 18490 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18466:	f642 0301 	movw	r3, #10241	; 0x2801
   1846a:	6828      	ldr	r0, [r5, #0]
   1846c:	f88d 800c 	strb.w	r8, [sp, #12]
   18470:	a903      	add	r1, sp, #12
   18472:	f8ad 300e 	strh.w	r3, [sp, #14]
   18476:	f00c fac3 	bl	24a00 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1847a:	b148      	cbz	r0, 18490 <read_group_cb+0x50>
		if (data->group &&
   1847c:	6923      	ldr	r3, [r4, #16]
   1847e:	b11b      	cbz	r3, 18488 <read_group_cb+0x48>
   18480:	885a      	ldrh	r2, [r3, #2]
   18482:	42b2      	cmp	r2, r6
   18484:	d200      	bcs.n	18488 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   18486:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   18488:	2001      	movs	r0, #1
}
   1848a:	b004      	add	sp, #16
   1848c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   18490:	6861      	ldr	r1, [r4, #4]
   18492:	6828      	ldr	r0, [r5, #0]
   18494:	f00c fab4 	bl	24a00 <bt_uuid_cmp>
   18498:	b110      	cbz	r0, 184a0 <read_group_cb+0x60>
		data->group = NULL;
   1849a:	2300      	movs	r3, #0
   1849c:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1849e:	e7f3      	b.n	18488 <read_group_cb+0x48>
	if (data->rsp->len &&
   184a0:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   184a2:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   184a4:	781a      	ldrb	r2, [r3, #0]
   184a6:	b132      	cbz	r2, 184b6 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   184a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   184aa:	8a01      	ldrh	r1, [r0, #16]
   184ac:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   184ae:	4293      	cmp	r3, r2
   184b0:	da01      	bge.n	184b6 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   184b2:	2000      	movs	r0, #0
   184b4:	e7e9      	b.n	1848a <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   184b6:	2104      	movs	r1, #4
   184b8:	300c      	adds	r0, #12
   184ba:	f00e fb85 	bl	26bc8 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   184be:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   184c0:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   184c2:	6923      	ldr	r3, [r4, #16]
   184c4:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   184c6:	4b08      	ldr	r3, [pc, #32]	; (184e8 <read_group_cb+0xa8>)
   184c8:	9300      	str	r3, [sp, #0]
   184ca:	9401      	str	r4, [sp, #4]
   184cc:	68a2      	ldr	r2, [r4, #8]
   184ce:	2300      	movs	r3, #0
   184d0:	4629      	mov	r1, r5
   184d2:	4638      	mov	r0, r7
   184d4:	f00d f92c 	bl	25730 <att_chan_read>
	if (read < 0) {
   184d8:	2800      	cmp	r0, #0
   184da:	dbea      	blt.n	184b2 <read_group_cb+0x72>
	if (!data->group) {
   184dc:	6920      	ldr	r0, [r4, #16]
   184de:	3800      	subs	r0, #0
   184e0:	bf18      	it	ne
   184e2:	2001      	movne	r0, #1
   184e4:	e7d1      	b.n	1848a <read_group_cb+0x4a>
   184e6:	bf00      	nop
   184e8:	0002568d 	.word	0x0002568d

000184ec <read_type_cb>:
{
   184ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   184f0:	6817      	ldr	r7, [r2, #0]
{
   184f2:	4605      	mov	r5, r0
   184f4:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   184f6:	6800      	ldr	r0, [r0, #0]
   184f8:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   184fa:	687e      	ldr	r6, [r7, #4]
{
   184fc:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   184fe:	f00c fa7f 	bl	24a00 <bt_uuid_cmp>
   18502:	4681      	mov	r9, r0
   18504:	2800      	cmp	r0, #0
   18506:	d13c      	bne.n	18582 <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   18508:	4630      	mov	r0, r6
   1850a:	2295      	movs	r2, #149	; 0x95
   1850c:	4629      	mov	r1, r5
   1850e:	f00d fe60 	bl	261d2 <bt_gatt_check_perm>
   18512:	4606      	mov	r6, r0
   18514:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   18516:	b140      	cbz	r0, 1852a <read_type_cb+0x3e>
		if (data->rsp->len) {
   18518:	68e3      	ldr	r3, [r4, #12]
   1851a:	781b      	ldrb	r3, [r3, #0]
   1851c:	b10b      	cbz	r3, 18522 <read_type_cb+0x36>
			data->err = 0x00;
   1851e:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   18522:	2000      	movs	r0, #0
}
   18524:	b003      	add	sp, #12
   18526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1852a:	68a0      	ldr	r0, [r4, #8]
   1852c:	f00e fb26 	bl	26b7c <net_buf_frag_last>
   18530:	2102      	movs	r1, #2
   18532:	300c      	adds	r0, #12
   18534:	f00e fb48 	bl	26bc8 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   18538:	4b13      	ldr	r3, [pc, #76]	; (18588 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1853a:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   1853c:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   18540:	9300      	str	r3, [sp, #0]
   18542:	9401      	str	r4, [sp, #4]
   18544:	68a2      	ldr	r2, [r4, #8]
   18546:	4633      	mov	r3, r6
   18548:	4629      	mov	r1, r5
   1854a:	4638      	mov	r0, r7
   1854c:	f00d f8f0 	bl	25730 <att_chan_read>
	if (read < 0) {
   18550:	2800      	cmp	r0, #0
   18552:	da07      	bge.n	18564 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   18554:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   18558:	bf26      	itte	cs
   1855a:	4240      	negcs	r0, r0
   1855c:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   1855e:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   18560:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   18562:	e7de      	b.n	18522 <read_type_cb+0x36>
	if (!data->item) {
   18564:	6923      	ldr	r3, [r4, #16]
   18566:	2b00      	cmp	r3, #0
   18568:	d0db      	beq.n	18522 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1856a:	68a0      	ldr	r0, [r4, #8]
   1856c:	f00c ffb0 	bl	254d0 <net_buf_frags_len>
   18570:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   18572:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   18574:	68e3      	ldr	r3, [r4, #12]
   18576:	781b      	ldrb	r3, [r3, #0]
   18578:	4298      	cmp	r0, r3
   1857a:	bf94      	ite	ls
   1857c:	2000      	movls	r0, #0
   1857e:	2001      	movhi	r0, #1
   18580:	e7d0      	b.n	18524 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   18582:	2001      	movs	r0, #1
   18584:	e7ce      	b.n	18524 <read_type_cb+0x38>
   18586:	bf00      	nop
   18588:	000254e1 	.word	0x000254e1

0001858c <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1858c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18590:	b082      	sub	sp, #8
   18592:	af00      	add	r7, sp, #0
   18594:	4604      	mov	r4, r0
   18596:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   18598:	483b      	ldr	r0, [pc, #236]	; (18688 <bt_att_accept+0xfc>)
   1859a:	2200      	movs	r2, #0
   1859c:	2300      	movs	r3, #0
   1859e:	4639      	mov	r1, r7
   185a0:	f006 fee6 	bl	1f370 <k_mem_slab_alloc>
   185a4:	4605      	mov	r5, r0
   185a6:	b1a8      	cbz	r0, 185d4 <bt_att_accept+0x48>
		LOG_ERR("No available ATT context for conn %p", conn);
   185a8:	466d      	mov	r5, sp
   185aa:	b088      	sub	sp, #32
   185ac:	466a      	mov	r2, sp
   185ae:	4b37      	ldr	r3, [pc, #220]	; (1868c <bt_att_accept+0x100>)
   185b0:	4837      	ldr	r0, [pc, #220]	; (18690 <bt_att_accept+0x104>)
   185b2:	e9c2 3405 	strd	r3, r4, [r2, #20]
   185b6:	2303      	movs	r3, #3
   185b8:	f842 3f10 	str.w	r3, [r2, #16]!
   185bc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   185c0:	f00d f874 	bl	256ac <z_log_msg_static_create.constprop.0>
   185c4:	46ad      	mov	sp, r5
		return -ENOMEM;
   185c6:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   185ca:	4628      	mov	r0, r5
   185cc:	3708      	adds	r7, #8
   185ce:	46bd      	mov	sp, r7
   185d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   185d4:	f007 fdb4 	bl	20140 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   185d8:	4b2e      	ldr	r3, [pc, #184]	; (18694 <bt_att_accept+0x108>)
	(void)memset(att, 0, sizeof(*att));
   185da:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   185dc:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   185de:	222c      	movs	r2, #44	; 0x2c
   185e0:	6838      	ldr	r0, [r7, #0]
   185e2:	f00c f9bf 	bl	24964 <memset>
	att->conn = conn;
   185e6:	683b      	ldr	r3, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   185e8:	482b      	ldr	r0, [pc, #172]	; (18698 <bt_att_accept+0x10c>)
	att->conn = conn;
   185ea:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   185ec:	683c      	ldr	r4, [r7, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   185ee:	607d      	str	r5, [r7, #4]
	list->tail = NULL;
   185f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
   185f4:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   185f8:	2200      	movs	r2, #0
   185fa:	2300      	movs	r3, #0
   185fc:	1d39      	adds	r1, r7, #4
   185fe:	f006 feb7 	bl	1f370 <k_mem_slab_alloc>
   18602:	4605      	mov	r5, r0
   18604:	b180      	cbz	r0, 18628 <bt_att_accept+0x9c>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   18606:	6823      	ldr	r3, [r4, #0]
   18608:	466c      	mov	r4, sp
   1860a:	b088      	sub	sp, #32
   1860c:	466a      	mov	r2, sp
   1860e:	4923      	ldr	r1, [pc, #140]	; (1869c <bt_att_accept+0x110>)
   18610:	481f      	ldr	r0, [pc, #124]	; (18690 <bt_att_accept+0x104>)
   18612:	e9c2 1305 	strd	r1, r3, [r2, #20]
   18616:	2303      	movs	r3, #3
   18618:	f842 3f10 	str.w	r3, [r2, #16]!
   1861c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18620:	f00d f844 	bl	256ac <z_log_msg_static_create.constprop.0>
   18624:	46a5      	mov	sp, r4
	if (!chan) {
   18626:	e7ce      	b.n	185c6 <bt_att_accept+0x3a>
	(void)memset(chan, 0, sizeof(*chan));
   18628:	4601      	mov	r1, r0
   1862a:	2290      	movs	r2, #144	; 0x90
   1862c:	6878      	ldr	r0, [r7, #4]
   1862e:	f00c f999 	bl	24964 <memset>
	chan->chan.chan.ops = &ops;
   18632:	6878      	ldr	r0, [r7, #4]
   18634:	4b1a      	ldr	r3, [pc, #104]	; (186a0 <bt_att_accept+0x114>)
   18636:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   18638:	303c      	adds	r0, #60	; 0x3c
   1863a:	f00e ff94 	bl	27566 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1863e:	687b      	ldr	r3, [r7, #4]
   18640:	f3bf 8f5b 	dmb	ish
   18644:	3334      	adds	r3, #52	; 0x34
   18646:	e853 2f00 	ldrex	r2, [r3]
   1864a:	e843 5100 	strex	r1, r5, [r3]
   1864e:	2900      	cmp	r1, #0
   18650:	d1f9      	bne.n	18646 <bt_att_accept+0xba>
   18652:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   18656:	687b      	ldr	r3, [r7, #4]
   18658:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   1865a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	att_chan_attach(att, chan);
   1865c:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   18660:	b91b      	cbnz	r3, 1866a <bt_att_accept+0xde>
   18662:	f104 000c 	add.w	r0, r4, #12
   18666:	f00e ff7e 	bl	27566 <z_impl_k_queue_init>
	return list->head;
   1866a:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   1866c:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
Z_GENLIST_PREPEND(slist, snode)
   18670:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   18672:	f108 0388 	add.w	r3, r8, #136	; 0x88
	list->head = node;
   18676:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   18678:	b902      	cbnz	r2, 1867c <bt_att_accept+0xf0>
	list->tail = node;
   1867a:	62a3      	str	r3, [r4, #40]	; 0x28
	return chan;
   1867c:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   1867e:	2b00      	cmp	r3, #0
   18680:	d0a1      	beq.n	185c6 <bt_att_accept+0x3a>
	*ch = &chan->chan.chan;
   18682:	3304      	adds	r3, #4
   18684:	6033      	str	r3, [r6, #0]
	return 0;
   18686:	e7a0      	b.n	185ca <bt_att_accept+0x3e>
   18688:	200008b4 	.word	0x200008b4
   1868c:	0002a6a4 	.word	0x0002a6a4
   18690:	00028144 	.word	0x00028144
   18694:	2000323c 	.word	0x2000323c
   18698:	200008d0 	.word	0x200008d0
   1869c:	0002a6c9 	.word	0x0002a6c9
   186a0:	200005ec 	.word	0x200005ec

000186a4 <bt_att_chan_create_pdu>:
{
   186a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   186a8:	b086      	sub	sp, #24
   186aa:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   186ac:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   186ae:	1c53      	adds	r3, r2, #1
   186b0:	428b      	cmp	r3, r1
{
   186b2:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   186b4:	d915      	bls.n	186e2 <bt_att_chan_create_pdu+0x3e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   186b6:	466c      	mov	r4, sp
   186b8:	b088      	sub	sp, #32
   186ba:	466a      	mov	r2, sp
   186bc:	482d      	ldr	r0, [pc, #180]	; (18774 <bt_att_chan_create_pdu+0xd0>)
   186be:	61d3      	str	r3, [r2, #28]
   186c0:	2304      	movs	r3, #4
   186c2:	e9c2 0105 	strd	r0, r1, [r2, #20]
   186c6:	f842 3f10 	str.w	r3, [r2, #16]!
   186ca:	f44f 5102 	mov.w	r1, #8320	; 0x2080
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   186ce:	482a      	ldr	r0, [pc, #168]	; (18778 <bt_att_chan_create_pdu+0xd4>)
   186d0:	f00c ffec 	bl	256ac <z_log_msg_static_create.constprop.0>
   186d4:	46a5      	mov	sp, r4
		return NULL;
   186d6:	2400      	movs	r4, #0
}
   186d8:	4620      	mov	r0, r4
   186da:	3718      	adds	r7, #24
   186dc:	46bd      	mov	sp, r7
   186de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   186e2:	4628      	mov	r0, r5
   186e4:	f7ff fccc 	bl	18080 <att_op_get_type>
   186e8:	2802      	cmp	r0, #2
   186ea:	d019      	beq.n	18720 <bt_att_chan_create_pdu+0x7c>
   186ec:	2804      	cmp	r0, #4
   186ee:	d017      	beq.n	18720 <bt_att_chan_create_pdu+0x7c>
		timeout = K_FOREVER;
   186f0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   186f4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   186f8:	2100      	movs	r1, #0
   186fa:	4642      	mov	r2, r8
   186fc:	464b      	mov	r3, r9
   186fe:	4608      	mov	r0, r1
   18700:	f00c feab 	bl	2545a <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   18704:	4604      	mov	r4, r0
   18706:	b980      	cbnz	r0, 1872a <bt_att_chan_create_pdu+0x86>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   18708:	466c      	mov	r4, sp
   1870a:	b088      	sub	sp, #32
   1870c:	466a      	mov	r2, sp
   1870e:	4b1b      	ldr	r3, [pc, #108]	; (1877c <bt_att_chan_create_pdu+0xd8>)
   18710:	e9c2 3505 	strd	r3, r5, [r2, #20]
   18714:	2303      	movs	r3, #3
   18716:	f842 3f10 	str.w	r3, [r2, #16]!
   1871a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1871e:	e7d6      	b.n	186ce <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
   18720:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   18724:	f04f 0900 	mov.w	r9, #0
   18728:	e7e6      	b.n	186f8 <bt_att_chan_create_pdu+0x54>
	return z_impl_z_current_get();
   1872a:	f007 fd09 	bl	20140 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1872e:	4b14      	ldr	r3, [pc, #80]	; (18780 <bt_att_chan_create_pdu+0xdc>)
   18730:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   18732:	4814      	ldr	r0, [pc, #80]	; (18784 <bt_att_chan_create_pdu+0xe0>)
   18734:	bf07      	ittee	eq
   18736:	2200      	moveq	r2, #0
   18738:	2300      	moveq	r3, #0
   1873a:	4642      	movne	r2, r8
   1873c:	464b      	movne	r3, r9
   1873e:	f006 ffd1 	bl	1f6e4 <z_impl_k_queue_get>
	if (!data) {
   18742:	b970      	cbnz	r0, 18762 <bt_att_chan_create_pdu+0xbe>
		LOG_WRN("Unable to allocate ATT TX meta");
   18744:	4b10      	ldr	r3, [pc, #64]	; (18788 <bt_att_chan_create_pdu+0xe4>)
   18746:	617b      	str	r3, [r7, #20]
   18748:	480b      	ldr	r0, [pc, #44]	; (18778 <bt_att_chan_create_pdu+0xd4>)
   1874a:	2302      	movs	r3, #2
   1874c:	f107 0210 	add.w	r2, r7, #16
   18750:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18754:	613b      	str	r3, [r7, #16]
   18756:	f00c ffa9 	bl	256ac <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1875a:	4620      	mov	r0, r4
   1875c:	f003 fb34 	bl	1bdc8 <net_buf_unref>
		return NULL;
   18760:	e7b9      	b.n	186d6 <bt_att_chan_create_pdu+0x32>
	bt_att_tx_meta_data(buf) = data;
   18762:	61a0      	str	r0, [r4, #24]
   18764:	2101      	movs	r1, #1
   18766:	f104 000c 	add.w	r0, r4, #12
   1876a:	f00e fa2d 	bl	26bc8 <net_buf_simple_add>
	hdr->code = op;
   1876e:	7005      	strb	r5, [r0, #0]
	return buf;
   18770:	e7b2      	b.n	186d8 <bt_att_chan_create_pdu+0x34>
   18772:	bf00      	nop
   18774:	0002a6ee 	.word	0x0002a6ee
   18778:	00028144 	.word	0x00028144
   1877c:	0002a4a1 	.word	0x0002a4a1
   18780:	20002b08 	.word	0x20002b08
   18784:	200009b0 	.word	0x200009b0
   18788:	0002a713 	.word	0x0002a713

0001878c <bt_att_recv>:
{
   1878c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18790:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   18792:	8a0b      	ldrh	r3, [r1, #16]
{
   18794:	af00      	add	r7, sp, #0
   18796:	4682      	mov	sl, r0
   18798:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1879a:	b97b      	cbnz	r3, 187bc <bt_att_recv+0x30>
		LOG_ERR("Too small ATT PDU received");
   1879c:	4b4c      	ldr	r3, [pc, #304]	; (188d0 <bt_att_recv+0x144>)
   1879e:	617b      	str	r3, [r7, #20]
   187a0:	2302      	movs	r3, #2
   187a2:	613b      	str	r3, [r7, #16]
   187a4:	f107 0210 	add.w	r2, r7, #16
   187a8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			LOG_WRN("Ignoring unexpected request");
   187ac:	4849      	ldr	r0, [pc, #292]	; (188d4 <bt_att_recv+0x148>)
   187ae:	f00c ff7d 	bl	256ac <z_log_msg_static_create.constprop.0>
}
   187b2:	2000      	movs	r0, #0
   187b4:	371c      	adds	r7, #28
   187b6:	46bd      	mov	sp, r7
   187b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   187bc:	2101      	movs	r1, #1
   187be:	f104 000c 	add.w	r0, r4, #12
   187c2:	f00e fa28 	bl	26c16 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   187c6:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   187ca:	4605      	mov	r5, r0
   187cc:	2b00      	cmp	r3, #0
   187ce:	d0f0      	beq.n	187b2 <bt_att_recv+0x26>
		if (hdr->code == handlers[i].op) {
   187d0:	7801      	ldrb	r1, [r0, #0]
   187d2:	f8df 8104 	ldr.w	r8, [pc, #260]	; 188d8 <bt_att_recv+0x14c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   187d6:	f1aa 0604 	sub.w	r6, sl, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   187da:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   187dc:	f818 0033 	ldrb.w	r0, [r8, r3, lsl #3]
   187e0:	4288      	cmp	r0, r1
   187e2:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   187e6:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   187ea:	d114      	bne.n	18816 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   187ec:	f892 9002 	ldrb.w	r9, [r2, #2]
   187f0:	f1b9 0f01 	cmp.w	r9, #1
   187f4:	d131      	bne.n	1885a <bt_att_recv+0xce>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   187f6:	2100      	movs	r1, #0
   187f8:	f10a 0030 	add.w	r0, sl, #48	; 0x30
   187fc:	f00d f84d 	bl	2589a <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   18800:	2800      	cmp	r0, #0
   18802:	d035      	beq.n	18870 <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected request");
   18804:	4b35      	ldr	r3, [pc, #212]	; (188dc <bt_att_recv+0x150>)
   18806:	617b      	str	r3, [r7, #20]
   18808:	2302      	movs	r3, #2
   1880a:	613b      	str	r3, [r7, #16]
   1880c:	f107 0210 	add.w	r2, r7, #16
   18810:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18814:	e7ca      	b.n	187ac <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   18816:	3301      	adds	r3, #1
   18818:	2b0e      	cmp	r3, #14
   1881a:	d1df      	bne.n	187dc <bt_att_recv+0x50>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   1881c:	466c      	mov	r4, sp
   1881e:	b088      	sub	sp, #32
   18820:	466a      	mov	r2, sp
   18822:	4b2f      	ldr	r3, [pc, #188]	; (188e0 <bt_att_recv+0x154>)
   18824:	482b      	ldr	r0, [pc, #172]	; (188d4 <bt_att_recv+0x148>)
   18826:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1882a:	2303      	movs	r3, #3
   1882c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18830:	f842 3f10 	str.w	r3, [r2, #16]!
   18834:	f00c ff3a 	bl	256ac <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   18838:	7829      	ldrb	r1, [r5, #0]
   1883a:	46a5      	mov	sp, r4
   1883c:	4608      	mov	r0, r1
   1883e:	f7ff fc1f 	bl	18080 <att_op_get_type>
   18842:	2800      	cmp	r0, #0
   18844:	d0b5      	beq.n	187b2 <bt_att_recv+0x26>
   18846:	2805      	cmp	r0, #5
   18848:	d0b3      	beq.n	187b2 <bt_att_recv+0x26>
	if (!req) {
   1884a:	2900      	cmp	r1, #0
   1884c:	d0b1      	beq.n	187b2 <bt_att_recv+0x26>
   1884e:	2306      	movs	r3, #6
   18850:	2200      	movs	r2, #0
   18852:	4630      	mov	r0, r6
   18854:	f00d f97f 	bl	25b56 <send_err_rsp.part.0>
   18858:	e7ab      	b.n	187b2 <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   1885a:	f1b9 0f05 	cmp.w	r9, #5
   1885e:	d107      	bne.n	18870 <bt_att_recv+0xe4>
			   atomic_test_and_set_bit(att_chan->flags,
   18860:	2101      	movs	r1, #1
   18862:	f10a 0030 	add.w	r0, sl, #48	; 0x30
   18866:	f00d f818 	bl	2589a <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   1886a:	b108      	cbz	r0, 18870 <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected indication");
   1886c:	4b1d      	ldr	r3, [pc, #116]	; (188e4 <bt_att_recv+0x158>)
   1886e:	e7ca      	b.n	18806 <bt_att_recv+0x7a>
	if (buf->len < handler->expect_len) {
   18870:	44d8      	add	r8, fp
   18872:	8a23      	ldrh	r3, [r4, #16]
   18874:	f898 2001 	ldrb.w	r2, [r8, #1]
   18878:	429a      	cmp	r2, r3
   1887a:	d916      	bls.n	188aa <bt_att_recv+0x11e>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1887c:	46e9      	mov	r9, sp
   1887e:	b088      	sub	sp, #32
   18880:	7829      	ldrb	r1, [r5, #0]
   18882:	466a      	mov	r2, sp
   18884:	4818      	ldr	r0, [pc, #96]	; (188e8 <bt_att_recv+0x15c>)
   18886:	61d1      	str	r1, [r2, #28]
   18888:	2404      	movs	r4, #4
   1888a:	e9c2 0305 	strd	r0, r3, [r2, #20]
   1888e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   18892:	f842 4f10 	str.w	r4, [r2, #16]!
   18896:	480f      	ldr	r0, [pc, #60]	; (188d4 <bt_att_recv+0x148>)
   18898:	f00c ff08 	bl	256ac <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   1889c:	f898 3002 	ldrb.w	r3, [r8, #2]
   188a0:	2b01      	cmp	r3, #1
   188a2:	46cd      	mov	sp, r9
   188a4:	d185      	bne.n	187b2 <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
   188a6:	4623      	mov	r3, r4
   188a8:	e00c      	b.n	188c4 <bt_att_recv+0x138>
		err = handler->func(att_chan, buf);
   188aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
   188ae:	4621      	mov	r1, r4
   188b0:	4630      	mov	r0, r6
   188b2:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   188b4:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   188b8:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   188ba:	f47f af7a 	bne.w	187b2 <bt_att_recv+0x26>
   188be:	2800      	cmp	r0, #0
   188c0:	f43f af77 	beq.w	187b2 <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   188c4:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   188c6:	2900      	cmp	r1, #0
   188c8:	f43f af73 	beq.w	187b2 <bt_att_recv+0x26>
   188cc:	e7c0      	b.n	18850 <bt_att_recv+0xc4>
   188ce:	bf00      	nop
   188d0:	0002a732 	.word	0x0002a732
   188d4:	00028144 	.word	0x00028144
   188d8:	00028650 	.word	0x00028650
   188dc:	0002a767 	.word	0x0002a767
   188e0:	0002a74d 	.word	0x0002a74d
   188e4:	0002a783 	.word	0x0002a783
   188e8:	0002a7a2 	.word	0x0002a7a2

000188ec <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   188ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   188ee:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   188f0:	6803      	ldr	r3, [r0, #0]
   188f2:	460d      	mov	r5, r1
   188f4:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   188f6:	b087      	sub	sp, #28
   188f8:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   188fa:	bf18      	it	ne
   188fc:	2101      	movne	r1, #1
   188fe:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   18900:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   18902:	f00d fd2d 	bl	26360 <bt_gatt_change_aware>
   18906:	b948      	cbnz	r0, 1891c <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   18908:	2105      	movs	r1, #5
   1890a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1890e:	f00c ffc4 	bl	2589a <atomic_test_and_set_bit>
   18912:	2800      	cmp	r0, #0
   18914:	d048      	beq.n	189a8 <att_write_rsp.constprop.0+0xbc>
			return 0;
   18916:	2000      	movs	r0, #0
}
   18918:	b007      	add	sp, #28
   1891a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   1891c:	2e00      	cmp	r6, #0
   1891e:	d045      	beq.n	189ac <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   18920:	2218      	movs	r2, #24
   18922:	2100      	movs	r1, #0
   18924:	4668      	mov	r0, sp
   18926:	f00c f81d 	bl	24964 <memset>
	if (rsp) {
   1892a:	bb67      	cbnz	r7, 18986 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   1892c:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1892e:	4a20      	ldr	r2, [pc, #128]	; (189b0 <att_write_rsp.constprop.0+0xc4>)
	data.conn = chan->att->conn;
   18930:	681b      	ldr	r3, [r3, #0]
   18932:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   18934:	2300      	movs	r3, #0
   18936:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   1893a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1893c:	9303      	str	r3, [sp, #12]
	data.len = len;
   1893e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   18942:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   18946:	2301      	movs	r3, #1
   18948:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1894c:	4631      	mov	r1, r6
   1894e:	466b      	mov	r3, sp
   18950:	4630      	mov	r0, r6
	data.req = req;
   18952:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   18956:	f00c fe0f 	bl	25578 <bt_gatt_foreach_attr>
	if (data.err) {
   1895a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1895e:	b1e3      	cbz	r3, 1899a <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   18960:	2f00      	cmp	r7, #0
   18962:	d0d8      	beq.n	18916 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18964:	9b01      	ldr	r3, [sp, #4]
   18966:	6998      	ldr	r0, [r3, #24]
   18968:	f7ff fbd0 	bl	1810c <tx_meta_data_free>
			net_buf_unref(data.buf);
   1896c:	9801      	ldr	r0, [sp, #4]
   1896e:	f003 fa2b 	bl	1bdc8 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   18972:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   18976:	2d00      	cmp	r5, #0
   18978:	d0cd      	beq.n	18916 <att_write_rsp.constprop.0+0x2a>
   1897a:	4632      	mov	r2, r6
   1897c:	4629      	mov	r1, r5
   1897e:	4620      	mov	r0, r4
   18980:	f00d f8e9 	bl	25b56 <send_err_rsp.part.0>
   18984:	e7c7      	b.n	18916 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   18986:	2200      	movs	r2, #0
   18988:	4639      	mov	r1, r7
   1898a:	4620      	mov	r0, r4
   1898c:	f7ff fe8a 	bl	186a4 <bt_att_chan_create_pdu>
   18990:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   18992:	2800      	cmp	r0, #0
   18994:	d1ca      	bne.n	1892c <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   18996:	200e      	movs	r0, #14
   18998:	e7be      	b.n	18918 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   1899a:	9901      	ldr	r1, [sp, #4]
   1899c:	2900      	cmp	r1, #0
   1899e:	d0ba      	beq.n	18916 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   189a0:	4620      	mov	r0, r4
   189a2:	f00c feb7 	bl	25714 <bt_att_chan_send_rsp>
   189a6:	e7b6      	b.n	18916 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   189a8:	2012      	movs	r0, #18
   189aa:	e7b5      	b.n	18918 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   189ac:	2001      	movs	r0, #1
   189ae:	e7b3      	b.n	18918 <att_write_rsp.constprop.0+0x2c>
   189b0:	00025517 	.word	0x00025517

000189b4 <bt_att_create_pdu>:
{
   189b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   189b6:	af00      	add	r7, sp, #0
   189b8:	460e      	mov	r6, r1
   189ba:	4615      	mov	r5, r2
	att = att_get(conn);
   189bc:	f7ff fcea 	bl	18394 <att_get>
	if (!att) {
   189c0:	b1e0      	cbz	r0, 189fc <bt_att_create_pdu+0x48>
	return list->head;
   189c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   189c4:	4618      	mov	r0, r3
   189c6:	b11b      	cbz	r3, 189d0 <bt_att_create_pdu+0x1c>
	return node->next;
   189c8:	f850 3988 	ldr.w	r3, [r0], #-136
   189cc:	b103      	cbz	r3, 189d0 <bt_att_create_pdu+0x1c>
   189ce:	3b88      	subs	r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   189d0:	1c6c      	adds	r4, r5, #1
   189d2:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   189d4:	b118      	cbz	r0, 189de <bt_att_create_pdu+0x2a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   189d6:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   189d8:	42a1      	cmp	r1, r4
   189da:	d21a      	bcs.n	18a12 <bt_att_create_pdu+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   189dc:	b983      	cbnz	r3, 18a00 <bt_att_create_pdu+0x4c>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   189de:	466d      	mov	r5, sp
   189e0:	b088      	sub	sp, #32
   189e2:	466a      	mov	r2, sp
   189e4:	4b0f      	ldr	r3, [pc, #60]	; (18a24 <bt_att_create_pdu+0x70>)
   189e6:	4810      	ldr	r0, [pc, #64]	; (18a28 <bt_att_create_pdu+0x74>)
   189e8:	e9c2 3405 	strd	r3, r4, [r2, #20]
   189ec:	2303      	movs	r3, #3
   189ee:	f842 3f10 	str.w	r3, [r2, #16]!
   189f2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   189f6:	f00c fe59 	bl	256ac <z_log_msg_static_create.constprop.0>
   189fa:	46ad      	mov	sp, r5
		return NULL;
   189fc:	2000      	movs	r0, #0
   189fe:	e00c      	b.n	18a1a <bt_att_create_pdu+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18a00:	4618      	mov	r0, r3
   18a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   18a06:	b153      	cbz	r3, 18a1e <bt_att_create_pdu+0x6a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   18a08:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   18a0a:	428a      	cmp	r2, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18a0c:	f1a3 0388 	sub.w	r3, r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   18a10:	d8f6      	bhi.n	18a00 <bt_att_create_pdu+0x4c>
		return bt_att_chan_create_pdu(chan, op, len);
   18a12:	462a      	mov	r2, r5
   18a14:	4631      	mov	r1, r6
   18a16:	f7ff fe45 	bl	186a4 <bt_att_chan_create_pdu>
}
   18a1a:	46bd      	mov	sp, r7
   18a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   18a1e:	4614      	mov	r4, r2
   18a20:	e7d9      	b.n	189d6 <bt_att_create_pdu+0x22>
   18a22:	bf00      	nop
   18a24:	0002a7c1 	.word	0x0002a7c1
   18a28:	00028144 	.word	0x00028144

00018a2c <att_read_group_req>:
{
   18a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   18a30:	8a0e      	ldrh	r6, [r1, #16]
   18a32:	3e04      	subs	r6, #4
   18a34:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   18a36:	2e02      	cmp	r6, #2
{
   18a38:	4604      	mov	r4, r0
   18a3a:	b08c      	sub	sp, #48	; 0x30
   18a3c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   18a3e:	d001      	beq.n	18a44 <att_read_group_req+0x18>
   18a40:	2e10      	cmp	r6, #16
   18a42:	d16a      	bne.n	18b1a <att_read_group_req+0xee>
   18a44:	2104      	movs	r1, #4
   18a46:	300c      	adds	r0, #12
   18a48:	f00e f8e5 	bl	26c16 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   18a4c:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   18a50:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   18a52:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   18a54:	1d01      	adds	r1, r0, #4
   18a56:	4632      	mov	r2, r6
   18a58:	4640      	mov	r0, r8
   18a5a:	f00b ffff 	bl	24a5c <bt_uuid_create>
   18a5e:	2800      	cmp	r0, #0
   18a60:	d05d      	beq.n	18b1e <att_read_group_req+0xf2>
	if (!start || !end) {
   18a62:	2d00      	cmp	r5, #0
   18a64:	d03a      	beq.n	18adc <att_read_group_req+0xb0>
   18a66:	2600      	movs	r6, #0
   18a68:	2f00      	cmp	r7, #0
   18a6a:	d036      	beq.n	18ada <att_read_group_req+0xae>
	if (start > end) {
   18a6c:	42bd      	cmp	r5, r7
   18a6e:	d835      	bhi.n	18adc <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   18a70:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18a74:	a901      	add	r1, sp, #4
   18a76:	4640      	mov	r0, r8
   18a78:	f88d 6004 	strb.w	r6, [sp, #4]
   18a7c:	f8ad 3006 	strh.w	r3, [sp, #6]
   18a80:	f00b ffbe 	bl	24a00 <bt_uuid_cmp>
   18a84:	bb70      	cbnz	r0, 18ae4 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   18a86:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   18a88:	2214      	movs	r2, #20
   18a8a:	2100      	movs	r1, #0
   18a8c:	a807      	add	r0, sp, #28
   18a8e:	f00b ff69 	bl	24964 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   18a92:	2201      	movs	r2, #1
   18a94:	2111      	movs	r1, #17
   18a96:	4630      	mov	r0, r6
   18a98:	f7ff ff8c 	bl	189b4 <bt_att_create_pdu>
   18a9c:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   18a9e:	2800      	cmp	r0, #0
   18aa0:	d03d      	beq.n	18b1e <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   18aa2:	2101      	movs	r1, #1
   18aa4:	300c      	adds	r0, #12
	data.uuid = uuid;
   18aa6:	e9cd 4807 	strd	r4, r8, [sp, #28]
   18aaa:	f00e f88d 	bl	26bc8 <net_buf_simple_add>
	data.rsp->len = 0U;
   18aae:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   18ab0:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   18ab2:	4a1c      	ldr	r2, [pc, #112]	; (18b24 <att_read_group_req+0xf8>)
	data.rsp->len = 0U;
   18ab4:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   18ab6:	4639      	mov	r1, r7
	data.group = NULL;
   18ab8:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   18aba:	4628      	mov	r0, r5
   18abc:	ab07      	add	r3, sp, #28
   18abe:	f00c fd5b 	bl	25578 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   18ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18ac4:	781b      	ldrb	r3, [r3, #0]
   18ac6:	bb1b      	cbnz	r3, 18b10 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18aca:	6998      	ldr	r0, [r3, #24]
   18acc:	f7ff fb1e 	bl	1810c <tx_meta_data_free>
		net_buf_unref(data.buf);
   18ad0:	9809      	ldr	r0, [sp, #36]	; 0x24
   18ad2:	f003 f979 	bl	1bdc8 <net_buf_unref>
	if (!req) {
   18ad6:	230a      	movs	r3, #10
   18ad8:	e001      	b.n	18ade <att_read_group_req+0xb2>
			*err = 0U;
   18ada:	463d      	mov	r5, r7
	if (!req) {
   18adc:	2301      	movs	r3, #1
   18ade:	462a      	mov	r2, r5
   18ae0:	2110      	movs	r1, #16
   18ae2:	e00e      	b.n	18b02 <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   18ae4:	f642 0301 	movw	r3, #10241	; 0x2801
   18ae8:	a907      	add	r1, sp, #28
   18aea:	4640      	mov	r0, r8
   18aec:	f88d 601c 	strb.w	r6, [sp, #28]
   18af0:	f8ad 301e 	strh.w	r3, [sp, #30]
   18af4:	f00b ff84 	bl	24a00 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   18af8:	2800      	cmp	r0, #0
   18afa:	d0c4      	beq.n	18a86 <att_read_group_req+0x5a>
	if (!req) {
   18afc:	2310      	movs	r3, #16
   18afe:	462a      	mov	r2, r5
   18b00:	4619      	mov	r1, r3
   18b02:	4620      	mov	r0, r4
   18b04:	f00d f827 	bl	25b56 <send_err_rsp.part.0>
		return 0;
   18b08:	2000      	movs	r0, #0
}
   18b0a:	b00c      	add	sp, #48	; 0x30
   18b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   18b10:	9909      	ldr	r1, [sp, #36]	; 0x24
   18b12:	4620      	mov	r0, r4
   18b14:	f00c fdfe 	bl	25714 <bt_att_chan_send_rsp>
	return 0;
   18b18:	e7f6      	b.n	18b08 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   18b1a:	2004      	movs	r0, #4
   18b1c:	e7f5      	b.n	18b0a <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   18b1e:	200e      	movs	r0, #14
   18b20:	e7f3      	b.n	18b0a <att_read_group_req+0xde>
   18b22:	bf00      	nop
   18b24:	00018441 	.word	0x00018441

00018b28 <att_read_mult_vl_req>:
{
   18b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   18b2c:	6846      	ldr	r6, [r0, #4]
{
   18b2e:	b085      	sub	sp, #20
   18b30:	4604      	mov	r4, r0
   18b32:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   18b34:	4630      	mov	r0, r6
   18b36:	2101      	movs	r1, #1
   18b38:	f00d fc12 	bl	26360 <bt_gatt_change_aware>
   18b3c:	b950      	cbnz	r0, 18b54 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   18b3e:	2105      	movs	r1, #5
   18b40:	f104 0034 	add.w	r0, r4, #52	; 0x34
   18b44:	f00c fea9 	bl	2589a <atomic_test_and_set_bit>
   18b48:	2800      	cmp	r0, #0
   18b4a:	d13b      	bne.n	18bc4 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   18b4c:	2012      	movs	r0, #18
}
   18b4e:	b005      	add	sp, #20
   18b50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   18b54:	2210      	movs	r2, #16
   18b56:	2100      	movs	r1, #0
   18b58:	4668      	mov	r0, sp
   18b5a:	f00b ff03 	bl	24964 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   18b5e:	2200      	movs	r2, #0
   18b60:	2121      	movs	r1, #33	; 0x21
   18b62:	4630      	mov	r0, r6
   18b64:	f7ff ff26 	bl	189b4 <bt_att_create_pdu>
   18b68:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   18b6a:	b368      	cbz	r0, 18bc8 <att_read_mult_vl_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   18b6c:	f8df 905c 	ldr.w	r9, [pc, #92]	; 18bcc <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   18b70:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   18b72:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   18b76:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   18b7a:	8a2b      	ldrh	r3, [r5, #16]
   18b7c:	2b01      	cmp	r3, #1
   18b7e:	d804      	bhi.n	18b8a <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   18b80:	9902      	ldr	r1, [sp, #8]
   18b82:	4620      	mov	r0, r4
   18b84:	f00c fdc6 	bl	25714 <bt_att_chan_send_rsp>
	return 0;
   18b88:	e01c      	b.n	18bc4 <att_read_mult_vl_req+0x9c>
   18b8a:	4638      	mov	r0, r7
   18b8c:	f00e f84b 	bl	26c26 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   18b90:	466b      	mov	r3, sp
   18b92:	464a      	mov	r2, r9
   18b94:	4601      	mov	r1, r0
   18b96:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   18b98:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   18b9c:	f00c fcec 	bl	25578 <bt_gatt_foreach_attr>
		if (data.err) {
   18ba0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   18ba4:	2b00      	cmp	r3, #0
   18ba6:	d0e8      	beq.n	18b7a <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18ba8:	9b02      	ldr	r3, [sp, #8]
   18baa:	6998      	ldr	r0, [r3, #24]
   18bac:	f7ff faae 	bl	1810c <tx_meta_data_free>
			net_buf_unref(data.buf);
   18bb0:	9802      	ldr	r0, [sp, #8]
   18bb2:	f003 f909 	bl	1bdc8 <net_buf_unref>
	if (!req) {
   18bb6:	f89d 300c 	ldrb.w	r3, [sp, #12]
   18bba:	4632      	mov	r2, r6
   18bbc:	2120      	movs	r1, #32
   18bbe:	4620      	mov	r0, r4
   18bc0:	f00c ffc9 	bl	25b56 <send_err_rsp.part.0>
			return 0;
   18bc4:	2000      	movs	r0, #0
   18bc6:	e7c2      	b.n	18b4e <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   18bc8:	200e      	movs	r0, #14
   18bca:	e7c0      	b.n	18b4e <att_read_mult_vl_req+0x26>
   18bcc:	0002590b 	.word	0x0002590b

00018bd0 <att_read_mult_req>:
{
   18bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   18bd4:	6846      	ldr	r6, [r0, #4]
{
   18bd6:	b085      	sub	sp, #20
   18bd8:	4604      	mov	r4, r0
   18bda:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   18bdc:	4630      	mov	r0, r6
   18bde:	2101      	movs	r1, #1
   18be0:	f00d fbbe 	bl	26360 <bt_gatt_change_aware>
   18be4:	b950      	cbnz	r0, 18bfc <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   18be6:	2105      	movs	r1, #5
   18be8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   18bec:	f00c fe55 	bl	2589a <atomic_test_and_set_bit>
   18bf0:	2800      	cmp	r0, #0
   18bf2:	d13b      	bne.n	18c6c <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   18bf4:	2012      	movs	r0, #18
}
   18bf6:	b005      	add	sp, #20
   18bf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   18bfc:	2210      	movs	r2, #16
   18bfe:	2100      	movs	r1, #0
   18c00:	4668      	mov	r0, sp
   18c02:	f00b feaf 	bl	24964 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   18c06:	2200      	movs	r2, #0
   18c08:	210f      	movs	r1, #15
   18c0a:	4630      	mov	r0, r6
   18c0c:	f7ff fed2 	bl	189b4 <bt_att_create_pdu>
   18c10:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   18c12:	b368      	cbz	r0, 18c70 <att_read_mult_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18c14:	f8df 905c 	ldr.w	r9, [pc, #92]	; 18c74 <att_read_mult_req+0xa4>
	data.chan = chan;
   18c18:	9400      	str	r4, [sp, #0]
   18c1a:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   18c1e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   18c22:	8a2b      	ldrh	r3, [r5, #16]
   18c24:	2b01      	cmp	r3, #1
   18c26:	d804      	bhi.n	18c32 <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   18c28:	9902      	ldr	r1, [sp, #8]
   18c2a:	4620      	mov	r0, r4
   18c2c:	f00c fd72 	bl	25714 <bt_att_chan_send_rsp>
	return 0;
   18c30:	e01c      	b.n	18c6c <att_read_mult_req+0x9c>
   18c32:	4638      	mov	r0, r7
   18c34:	f00d fff7 	bl	26c26 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18c38:	466b      	mov	r3, sp
   18c3a:	464a      	mov	r2, r9
   18c3c:	4601      	mov	r1, r0
   18c3e:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   18c40:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18c44:	f00c fc98 	bl	25578 <bt_gatt_foreach_attr>
		if (data.err) {
   18c48:	f89d 300c 	ldrb.w	r3, [sp, #12]
   18c4c:	2b00      	cmp	r3, #0
   18c4e:	d0e8      	beq.n	18c22 <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18c50:	9b02      	ldr	r3, [sp, #8]
   18c52:	6998      	ldr	r0, [r3, #24]
   18c54:	f7ff fa5a 	bl	1810c <tx_meta_data_free>
			net_buf_unref(data.buf);
   18c58:	9802      	ldr	r0, [sp, #8]
   18c5a:	f003 f8b5 	bl	1bdc8 <net_buf_unref>
	if (!req) {
   18c5e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   18c62:	4632      	mov	r2, r6
   18c64:	210e      	movs	r1, #14
   18c66:	4620      	mov	r0, r4
   18c68:	f00c ff75 	bl	25b56 <send_err_rsp.part.0>
			return 0;
   18c6c:	2000      	movs	r0, #0
   18c6e:	e7c2      	b.n	18bf6 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   18c70:	200e      	movs	r0, #14
   18c72:	e7c0      	b.n	18bf6 <att_read_mult_req+0x26>
   18c74:	000258c5 	.word	0x000258c5

00018c78 <att_read_rsp>:
{
   18c78:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   18c7c:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   18c80:	4604      	mov	r4, r0
   18c82:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   18c84:	4640      	mov	r0, r8
   18c86:	2101      	movs	r1, #1
{
   18c88:	4617      	mov	r7, r2
   18c8a:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   18c8c:	f00d fb68 	bl	26360 <bt_gatt_change_aware>
   18c90:	b948      	cbnz	r0, 18ca6 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   18c92:	2105      	movs	r1, #5
   18c94:	f104 0034 	add.w	r0, r4, #52	; 0x34
   18c98:	f00c fdff 	bl	2589a <atomic_test_and_set_bit>
   18c9c:	bb78      	cbnz	r0, 18cfe <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   18c9e:	2012      	movs	r0, #18
}
   18ca0:	b004      	add	sp, #16
   18ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   18ca6:	b38d      	cbz	r5, 18d0c <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   18ca8:	2210      	movs	r2, #16
   18caa:	2100      	movs	r1, #0
   18cac:	4668      	mov	r0, sp
   18cae:	f00b fe59 	bl	24964 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   18cb2:	2200      	movs	r2, #0
   18cb4:	4639      	mov	r1, r7
   18cb6:	4640      	mov	r0, r8
   18cb8:	f7ff fe7c 	bl	189b4 <bt_att_create_pdu>
   18cbc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   18cbe:	b338      	cbz	r0, 18d10 <att_read_rsp+0x98>
	data.offset = offset;
   18cc0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   18cc4:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   18cc8:	2301      	movs	r3, #1
   18cca:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18cce:	4a11      	ldr	r2, [pc, #68]	; (18d14 <att_read_rsp+0x9c>)
	data.chan = chan;
   18cd0:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18cd2:	466b      	mov	r3, sp
   18cd4:	4629      	mov	r1, r5
   18cd6:	4628      	mov	r0, r5
   18cd8:	f00c fc4e 	bl	25578 <bt_gatt_foreach_attr>
	if (data.err) {
   18cdc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   18ce0:	b17b      	cbz	r3, 18d02 <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18ce2:	9b02      	ldr	r3, [sp, #8]
   18ce4:	6998      	ldr	r0, [r3, #24]
   18ce6:	f7ff fa11 	bl	1810c <tx_meta_data_free>
		net_buf_unref(data.buf);
   18cea:	9802      	ldr	r0, [sp, #8]
   18cec:	f003 f86c 	bl	1bdc8 <net_buf_unref>
	if (!req) {
   18cf0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   18cf4:	462a      	mov	r2, r5
   18cf6:	4631      	mov	r1, r6
   18cf8:	4620      	mov	r0, r4
   18cfa:	f00c ff2c 	bl	25b56 <send_err_rsp.part.0>
			return 0;
   18cfe:	2000      	movs	r0, #0
   18d00:	e7ce      	b.n	18ca0 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   18d02:	9902      	ldr	r1, [sp, #8]
   18d04:	4620      	mov	r0, r4
   18d06:	f00c fd05 	bl	25714 <bt_att_chan_send_rsp>
	return 0;
   18d0a:	e7f8      	b.n	18cfe <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   18d0c:	2001      	movs	r0, #1
   18d0e:	e7c7      	b.n	18ca0 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   18d10:	200e      	movs	r0, #14
   18d12:	e7c5      	b.n	18ca0 <att_read_rsp+0x28>
   18d14:	000258c5 	.word	0x000258c5

00018d18 <att_read_type_req>:
{
   18d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   18d1c:	8a0d      	ldrh	r5, [r1, #16]
   18d1e:	3d04      	subs	r5, #4
   18d20:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   18d22:	2d02      	cmp	r5, #2
{
   18d24:	4604      	mov	r4, r0
   18d26:	b08c      	sub	sp, #48	; 0x30
   18d28:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   18d2a:	d001      	beq.n	18d30 <att_read_type_req+0x18>
   18d2c:	2d10      	cmp	r5, #16
   18d2e:	d150      	bne.n	18dd2 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   18d30:	2104      	movs	r1, #4
   18d32:	300c      	adds	r0, #12
   18d34:	f00d ff6f 	bl	26c16 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   18d38:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   18d3c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   18d3e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   18d40:	1d01      	adds	r1, r0, #4
   18d42:	462a      	mov	r2, r5
   18d44:	4640      	mov	r0, r8
   18d46:	f00b fe89 	bl	24a5c <bt_uuid_create>
   18d4a:	b188      	cbz	r0, 18d70 <att_read_type_req+0x58>
	if (!start || !end) {
   18d4c:	b19e      	cbz	r6, 18d76 <att_read_type_req+0x5e>
   18d4e:	b18f      	cbz	r7, 18d74 <att_read_type_req+0x5c>
	if (start > end) {
   18d50:	42b7      	cmp	r7, r6
   18d52:	d310      	bcc.n	18d76 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   18d54:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   18d56:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   18d58:	2100      	movs	r1, #0
   18d5a:	eb0d 0002 	add.w	r0, sp, r2
   18d5e:	f00b fe01 	bl	24964 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   18d62:	2201      	movs	r2, #1
   18d64:	2109      	movs	r1, #9
   18d66:	4628      	mov	r0, r5
   18d68:	f7ff fe24 	bl	189b4 <bt_att_create_pdu>
   18d6c:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   18d6e:	b960      	cbnz	r0, 18d8a <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   18d70:	200e      	movs	r0, #14
   18d72:	e007      	b.n	18d84 <att_read_type_req+0x6c>
			*err = 0U;
   18d74:	463e      	mov	r6, r7
	if (!req) {
   18d76:	2301      	movs	r3, #1
   18d78:	4632      	mov	r2, r6
   18d7a:	2108      	movs	r1, #8
   18d7c:	4620      	mov	r0, r4
   18d7e:	f00c feea 	bl	25b56 <send_err_rsp.part.0>
		return 0;
   18d82:	2000      	movs	r0, #0
}
   18d84:	b00c      	add	sp, #48	; 0x30
   18d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   18d8a:	2101      	movs	r1, #1
   18d8c:	300c      	adds	r0, #12
	data.uuid = uuid;
   18d8e:	e9cd 4806 	strd	r4, r8, [sp, #24]
   18d92:	f00d ff19 	bl	26bc8 <net_buf_simple_add>
	data.rsp->len = 0U;
   18d96:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   18d98:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   18d9a:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   18d9c:	230a      	movs	r3, #10
   18d9e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   18da2:	4a0d      	ldr	r2, [pc, #52]	; (18dd8 <att_read_type_req+0xc0>)
   18da4:	ab06      	add	r3, sp, #24
   18da6:	4639      	mov	r1, r7
   18da8:	4630      	mov	r0, r6
   18daa:	f00c fbe5 	bl	25578 <bt_gatt_foreach_attr>
	if (data.err) {
   18dae:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   18db2:	b14b      	cbz	r3, 18dc8 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18db4:	9b08      	ldr	r3, [sp, #32]
   18db6:	6998      	ldr	r0, [r3, #24]
   18db8:	f7ff f9a8 	bl	1810c <tx_meta_data_free>
		net_buf_unref(data.buf);
   18dbc:	9808      	ldr	r0, [sp, #32]
   18dbe:	f003 f803 	bl	1bdc8 <net_buf_unref>
	if (!req) {
   18dc2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   18dc6:	e7d7      	b.n	18d78 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   18dc8:	9908      	ldr	r1, [sp, #32]
   18dca:	4620      	mov	r0, r4
   18dcc:	f00c fca2 	bl	25714 <bt_att_chan_send_rsp>
	return 0;
   18dd0:	e7d7      	b.n	18d82 <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   18dd2:	2004      	movs	r0, #4
   18dd4:	e7d6      	b.n	18d84 <att_read_type_req+0x6c>
   18dd6:	bf00      	nop
   18dd8:	000184ed 	.word	0x000184ed

00018ddc <att_find_type_req>:
{
   18ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18de0:	460f      	mov	r7, r1
   18de2:	b086      	sub	sp, #24
   18de4:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   18de6:	2106      	movs	r1, #6
   18de8:	f107 000c 	add.w	r0, r7, #12
   18dec:	f00d ff13 	bl	26c16 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   18df0:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   18df2:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   18df6:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   18df8:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   18dfc:	b1c5      	cbz	r5, 18e30 <att_find_type_req+0x54>
   18dfe:	2300      	movs	r3, #0
   18e00:	f1b8 0f00 	cmp.w	r8, #0
   18e04:	d013      	beq.n	18e2e <att_find_type_req+0x52>
	if (start > end) {
   18e06:	4545      	cmp	r5, r8
   18e08:	d812      	bhi.n	18e30 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   18e0a:	f88d 3000 	strb.w	r3, [sp]
   18e0e:	f88d 3004 	strb.w	r3, [sp, #4]
   18e12:	a901      	add	r1, sp, #4
   18e14:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18e18:	4668      	mov	r0, sp
   18e1a:	f8ad 2002 	strh.w	r2, [sp, #2]
   18e1e:	f8ad 3006 	strh.w	r3, [sp, #6]
   18e22:	f00b fded 	bl	24a00 <bt_uuid_cmp>
   18e26:	4606      	mov	r6, r0
   18e28:	b160      	cbz	r0, 18e44 <att_find_type_req+0x68>
	if (!req) {
   18e2a:	230a      	movs	r3, #10
   18e2c:	e001      	b.n	18e32 <att_find_type_req+0x56>
			*err = 0U;
   18e2e:	4645      	mov	r5, r8
	if (!req) {
   18e30:	2301      	movs	r3, #1
   18e32:	462a      	mov	r2, r5
   18e34:	2106      	movs	r1, #6
   18e36:	4620      	mov	r0, r4
   18e38:	f00c fe8d 	bl	25b56 <send_err_rsp.part.0>
		return 0;
   18e3c:	2000      	movs	r0, #0
}
   18e3e:	b006      	add	sp, #24
   18e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   18e44:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   18e48:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   18e4a:	4601      	mov	r1, r0
   18e4c:	2214      	movs	r2, #20
   18e4e:	a801      	add	r0, sp, #4
   18e50:	f00b fd88 	bl	24964 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   18e54:	4632      	mov	r2, r6
   18e56:	2107      	movs	r1, #7
   18e58:	4650      	mov	r0, sl
   18e5a:	f7ff fdab 	bl	189b4 <bt_att_create_pdu>
   18e5e:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   18e60:	b1f8      	cbz	r0, 18ea2 <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   18e62:	230a      	movs	r3, #10
   18e64:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   18e68:	4a0f      	ldr	r2, [pc, #60]	; (18ea8 <att_find_type_req+0xcc>)
	data.chan = chan;
   18e6a:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   18e6c:	ab01      	add	r3, sp, #4
   18e6e:	4641      	mov	r1, r8
   18e70:	4628      	mov	r0, r5
	data.value = value;
   18e72:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
   18e76:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   18e7a:	f00c fb7d 	bl	25578 <bt_gatt_foreach_attr>
	if (data.err) {
   18e7e:	f89d 3015 	ldrb.w	r3, [sp, #21]
   18e82:	b14b      	cbz	r3, 18e98 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18e84:	9b02      	ldr	r3, [sp, #8]
   18e86:	6998      	ldr	r0, [r3, #24]
   18e88:	f7ff f940 	bl	1810c <tx_meta_data_free>
		net_buf_unref(data.buf);
   18e8c:	9802      	ldr	r0, [sp, #8]
   18e8e:	f002 ff9b 	bl	1bdc8 <net_buf_unref>
	if (!req) {
   18e92:	f89d 3015 	ldrb.w	r3, [sp, #21]
   18e96:	e7cc      	b.n	18e32 <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   18e98:	9902      	ldr	r1, [sp, #8]
   18e9a:	4620      	mov	r0, r4
   18e9c:	f00c fc3a 	bl	25714 <bt_att_chan_send_rsp>
	return 0;
   18ea0:	e7cc      	b.n	18e3c <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   18ea2:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   18ea4:	e7cb      	b.n	18e3e <att_find_type_req+0x62>
   18ea6:	bf00      	nop
   18ea8:	00018129 	.word	0x00018129

00018eac <att_find_info_req>:
{
   18eac:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   18eae:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
   18eb0:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   18eb2:	885e      	ldrh	r6, [r3, #2]
{
   18eb4:	b085      	sub	sp, #20
   18eb6:	4604      	mov	r4, r0
	if (!start || !end) {
   18eb8:	b195      	cbz	r5, 18ee0 <att_find_info_req+0x34>
   18eba:	b186      	cbz	r6, 18ede <att_find_info_req+0x32>
	if (start > end) {
   18ebc:	42b5      	cmp	r5, r6
   18ebe:	d80f      	bhi.n	18ee0 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   18ec0:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   18ec2:	2210      	movs	r2, #16
   18ec4:	2100      	movs	r1, #0
   18ec6:	4668      	mov	r0, sp
   18ec8:	f00b fd4c 	bl	24964 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   18ecc:	2200      	movs	r2, #0
   18ece:	2105      	movs	r1, #5
   18ed0:	4638      	mov	r0, r7
   18ed2:	f7ff fd6f 	bl	189b4 <bt_att_create_pdu>
   18ed6:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   18ed8:	b958      	cbnz	r0, 18ef2 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   18eda:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   18edc:	e007      	b.n	18eee <att_find_info_req+0x42>
			*err = 0U;
   18ede:	4635      	mov	r5, r6
	if (!req) {
   18ee0:	2301      	movs	r3, #1
   18ee2:	462a      	mov	r2, r5
   18ee4:	2104      	movs	r1, #4
   18ee6:	4620      	mov	r0, r4
   18ee8:	f00c fe35 	bl	25b56 <send_err_rsp.part.0>
		return 0;
   18eec:	2000      	movs	r0, #0
}
   18eee:	b005      	add	sp, #20
   18ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   18ef2:	466b      	mov	r3, sp
   18ef4:	4a0a      	ldr	r2, [pc, #40]	; (18f20 <att_find_info_req+0x74>)
	data.chan = chan;
   18ef6:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   18ef8:	4631      	mov	r1, r6
   18efa:	4628      	mov	r0, r5
   18efc:	f00c fb3c 	bl	25578 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   18f00:	9b02      	ldr	r3, [sp, #8]
   18f02:	b943      	cbnz	r3, 18f16 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18f04:	9b01      	ldr	r3, [sp, #4]
   18f06:	6998      	ldr	r0, [r3, #24]
   18f08:	f7ff f900 	bl	1810c <tx_meta_data_free>
		net_buf_unref(data.buf);
   18f0c:	9801      	ldr	r0, [sp, #4]
   18f0e:	f002 ff5b 	bl	1bdc8 <net_buf_unref>
	if (!req) {
   18f12:	230a      	movs	r3, #10
   18f14:	e7e5      	b.n	18ee2 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   18f16:	9901      	ldr	r1, [sp, #4]
   18f18:	4620      	mov	r0, r4
   18f1a:	f00c fbfb 	bl	25714 <bt_att_chan_send_rsp>
	return 0;
   18f1e:	e7e5      	b.n	18eec <att_find_info_req+0x40>
   18f20:	0002558f 	.word	0x0002558f

00018f24 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   18f24:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   18f26:	4c0b      	ldr	r4, [pc, #44]	; (18f54 <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   18f28:	4d0b      	ldr	r5, [pc, #44]	; (18f58 <bt_att_init+0x34>)
   18f2a:	4620      	mov	r0, r4
   18f2c:	f00e fb1b 	bl	27566 <z_impl_k_queue_init>
   18f30:	4629      	mov	r1, r5
   18f32:	4620      	mov	r0, r4
   18f34:	f00e fb23 	bl	2757e <k_queue_append>
   18f38:	f105 0114 	add.w	r1, r5, #20
   18f3c:	4620      	mov	r0, r4
   18f3e:	f00e fb1e 	bl	2757e <k_queue_append>
   18f42:	f105 0128 	add.w	r1, r5, #40	; 0x28
   18f46:	4620      	mov	r0, r4
   18f48:	f00e fb19 	bl	2757e <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   18f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   18f50:	f000 bb24 	b.w	1959c <bt_gatt_init>
   18f54:	200009b0 	.word	0x200009b0
   18f58:	20003200 	.word	0x20003200

00018f5c <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   18f5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   18f5e:	2300      	movs	r3, #0
{
   18f60:	4605      	mov	r5, r0
   18f62:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   18f64:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   18f66:	f007 f8eb 	bl	20140 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   18f6a:	4b0b      	ldr	r3, [pc, #44]	; (18f98 <bt_att_req_alloc+0x3c>)
   18f6c:	681b      	ldr	r3, [r3, #0]
   18f6e:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   18f70:	bf04      	itt	eq
   18f72:	2500      	moveq	r5, #0
   18f74:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   18f76:	a901      	add	r1, sp, #4
   18f78:	4808      	ldr	r0, [pc, #32]	; (18f9c <bt_att_req_alloc+0x40>)
   18f7a:	462a      	mov	r2, r5
   18f7c:	4623      	mov	r3, r4
   18f7e:	f006 f9f7 	bl	1f370 <k_mem_slab_alloc>
   18f82:	4601      	mov	r1, r0
   18f84:	b930      	cbnz	r0, 18f94 <bt_att_req_alloc+0x38>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   18f86:	9801      	ldr	r0, [sp, #4]
   18f88:	221c      	movs	r2, #28
   18f8a:	f00b fceb 	bl	24964 <memset>

	return req;
   18f8e:	9801      	ldr	r0, [sp, #4]
}
   18f90:	b003      	add	sp, #12
   18f92:	bd30      	pop	{r4, r5, pc}
		return NULL;
   18f94:	2000      	movs	r0, #0
   18f96:	e7fb      	b.n	18f90 <bt_att_req_alloc+0x34>
   18f98:	2000323c 	.word	0x2000323c
   18f9c:	200008ec 	.word	0x200008ec

00018fa0 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   18fa0:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   18fa2:	6883      	ldr	r3, [r0, #8]
{
   18fa4:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   18fa6:	b14b      	cbz	r3, 18fbc <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   18fa8:	6998      	ldr	r0, [r3, #24]
   18faa:	f7ff f8af 	bl	1810c <tx_meta_data_free>
		net_buf_unref(req->buf);
   18fae:	9b01      	ldr	r3, [sp, #4]
   18fb0:	6898      	ldr	r0, [r3, #8]
   18fb2:	f002 ff09 	bl	1bdc8 <net_buf_unref>
		req->buf = NULL;
   18fb6:	9b01      	ldr	r3, [sp, #4]
   18fb8:	2200      	movs	r2, #0
   18fba:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   18fbc:	4803      	ldr	r0, [pc, #12]	; (18fcc <bt_att_req_free+0x2c>)
   18fbe:	a901      	add	r1, sp, #4
   18fc0:	f00e fa13 	bl	273ea <k_mem_slab_free>
}
   18fc4:	b003      	add	sp, #12
   18fc6:	f85d fb04 	ldr.w	pc, [sp], #4
   18fca:	bf00      	nop
   18fcc:	200008ec 	.word	0x200008ec

00018fd0 <att_handle_rsp>:
{
   18fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18fd4:	4604      	mov	r4, r0
   18fd6:	b088      	sub	sp, #32
	k_work_cancel_delayable(&chan->timeout_work);
   18fd8:	3058      	adds	r0, #88	; 0x58
{
   18fda:	460e      	mov	r6, r1
   18fdc:	4617      	mov	r7, r2
   18fde:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   18fe0:	f00e fbbb 	bl	2775a <k_work_cancel_delayable>
	if (!chan->req) {
   18fe4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   18fe6:	b980      	cbnz	r0, 1900a <att_handle_rsp+0x3a>
		LOG_WRN("No pending ATT request");
   18fe8:	4b19      	ldr	r3, [pc, #100]	; (19050 <att_handle_rsp+0x80>)
   18fea:	9307      	str	r3, [sp, #28]
   18fec:	4819      	ldr	r0, [pc, #100]	; (19054 <att_handle_rsp+0x84>)
   18fee:	2302      	movs	r3, #2
   18ff0:	aa06      	add	r2, sp, #24
   18ff2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18ff6:	9306      	str	r3, [sp, #24]
   18ff8:	f00c fb58 	bl	256ac <z_log_msg_static_create.constprop.0>
	att_req_send_process(chan->att);
   18ffc:	6820      	ldr	r0, [r4, #0]
   18ffe:	f00c fce5 	bl	259cc <att_req_send_process>
}
   19002:	2000      	movs	r0, #0
   19004:	b008      	add	sp, #32
   19006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   1900a:	4b13      	ldr	r3, [pc, #76]	; (19058 <att_handle_rsp+0x88>)
   1900c:	4298      	cmp	r0, r3
   1900e:	f04f 0800 	mov.w	r8, #0
   19012:	d102      	bne.n	1901a <att_handle_rsp+0x4a>
		chan->req = NULL;
   19014:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
   19018:	e7f0      	b.n	18ffc <att_handle_rsp+0x2c>
	func = chan->req->func;
   1901a:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   1901e:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   19022:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   19024:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   19028:	f7ff ffba 	bl	18fa0 <bt_att_req_free>
	att_req_send_process(chan->att);
   1902c:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   1902e:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
	att_req_send_process(chan->att);
   19032:	f00c fccb 	bl	259cc <att_req_send_process>
	if (func) {
   19036:	f1b9 0f00 	cmp.w	r9, #0
   1903a:	d0e2      	beq.n	19002 <att_handle_rsp+0x32>
		func(chan->att->conn, err, pdu, len, params);
   1903c:	6820      	ldr	r0, [r4, #0]
   1903e:	f8cd a000 	str.w	sl, [sp]
   19042:	6800      	ldr	r0, [r0, #0]
   19044:	463b      	mov	r3, r7
   19046:	4632      	mov	r2, r6
   19048:	4629      	mov	r1, r5
   1904a:	47c8      	blx	r9
   1904c:	e7d9      	b.n	19002 <att_handle_rsp+0x32>
   1904e:	bf00      	nop
   19050:	0002a7dc 	.word	0x0002a7dc
   19054:	00028144 	.word	0x00028144
   19058:	20003240 	.word	0x20003240

0001905c <bt_att_disconnected>:
{
   1905c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   19060:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   19064:	4604      	mov	r4, r0
	if (!att_chan->att) {
   19066:	2e00      	cmp	r6, #0
   19068:	d05a      	beq.n	19120 <bt_att_disconnected+0xc4>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1906a:	f100 0184 	add.w	r1, r0, #132	; 0x84
   1906e:	f106 0024 	add.w	r0, r6, #36	; 0x24
   19072:	f00c fbe8 	bl	25846 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   19076:	1f27      	subs	r7, r4, #4
   19078:	f104 0838 	add.w	r8, r4, #56	; 0x38
   1907c:	2200      	movs	r2, #0
   1907e:	2300      	movs	r3, #0
   19080:	4640      	mov	r0, r8
   19082:	f00d fd46 	bl	26b12 <net_buf_get>
   19086:	4605      	mov	r5, r0
   19088:	bb48      	cbnz	r0, 190de <bt_att_disconnected+0x82>
	if (chan->req) {
   1908a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1908c:	b12b      	cbz	r3, 1909a <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1908e:	4602      	mov	r2, r0
   19090:	4601      	mov	r1, r0
   19092:	230e      	movs	r3, #14
   19094:	4638      	mov	r0, r7
   19096:	f7ff ff9b 	bl	18fd0 <att_handle_rsp>
	chan->att = NULL;
   1909a:	2300      	movs	r3, #0
   1909c:	f844 3c04 	str.w	r3, [r4, #-4]
	atomic_clear_bit(chan->flags, ATT_CONNECTED);
   190a0:	2102      	movs	r1, #2
   190a2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   190a6:	f00c fbe7 	bl	25878 <atomic_clear_bit>
	if (!sys_slist_is_empty(&att->chans)) {
   190aa:	6a73      	ldr	r3, [r6, #36]	; 0x24
   190ac:	2b00      	cmp	r3, #0
   190ae:	d137      	bne.n	19120 <bt_att_disconnected+0xc4>
	att_reset(att);
   190b0:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   190b2:	9803      	ldr	r0, [sp, #12]
   190b4:	2200      	movs	r2, #0
   190b6:	2300      	movs	r3, #0
   190b8:	300c      	adds	r0, #12
   190ba:	f00d fd2a 	bl	26b12 <net_buf_get>
   190be:	4605      	mov	r5, r0
   190c0:	b9a0      	cbnz	r0, 190ec <bt_att_disconnected+0x90>
	while (!sys_slist_is_empty(&att->reqs)) {
   190c2:	9803      	ldr	r0, [sp, #12]
	return list->head;
   190c4:	6845      	ldr	r5, [r0, #4]
   190c6:	b9c5      	cbnz	r5, 190fa <bt_att_disconnected+0x9e>
	att->conn = NULL;
   190c8:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   190ca:	a903      	add	r1, sp, #12
   190cc:	4816      	ldr	r0, [pc, #88]	; (19128 <bt_att_disconnected+0xcc>)
   190ce:	f00e f98c 	bl	273ea <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   190d2:	6820      	ldr	r0, [r4, #0]
}
   190d4:	b004      	add	sp, #16
   190d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   190da:	f000 bf67 	b.w	19fac <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   190de:	69a8      	ldr	r0, [r5, #24]
   190e0:	f7ff f814 	bl	1810c <tx_meta_data_free>
		net_buf_unref(buf);
   190e4:	4628      	mov	r0, r5
   190e6:	f002 fe6f 	bl	1bdc8 <net_buf_unref>
   190ea:	e7c7      	b.n	1907c <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   190ec:	69a8      	ldr	r0, [r5, #24]
   190ee:	f7ff f80d 	bl	1810c <tx_meta_data_free>
		net_buf_unref(buf);
   190f2:	4628      	mov	r0, r5
   190f4:	f002 fe68 	bl	1bdc8 <net_buf_unref>
   190f8:	e7db      	b.n	190b2 <bt_att_disconnected+0x56>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   190fa:	6882      	ldr	r2, [r0, #8]
	return node->next;
   190fc:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   190fe:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19100:	4295      	cmp	r5, r2
	list->tail = node;
   19102:	bf08      	it	eq
   19104:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   19106:	686e      	ldr	r6, [r5, #4]
   19108:	b136      	cbz	r6, 19118 <bt_att_disconnected+0xbc>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1910a:	69ab      	ldr	r3, [r5, #24]
   1910c:	9300      	str	r3, [sp, #0]
   1910e:	2300      	movs	r3, #0
   19110:	6800      	ldr	r0, [r0, #0]
   19112:	461a      	mov	r2, r3
   19114:	210e      	movs	r1, #14
   19116:	47b0      	blx	r6
		bt_att_req_free(req);
   19118:	4628      	mov	r0, r5
   1911a:	f7ff ff41 	bl	18fa0 <bt_att_req_free>
   1911e:	e7d0      	b.n	190c2 <bt_att_disconnected+0x66>
}
   19120:	b004      	add	sp, #16
   19122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19126:	bf00      	nop
   19128:	200008b4 	.word	0x200008b4

0001912c <att_timeout>:
{
   1912c:	b510      	push	{r4, lr}
   1912e:	4604      	mov	r4, r0
   19130:	b086      	sub	sp, #24
	LOG_ERR("ATT Timeout");
   19132:	4b08      	ldr	r3, [pc, #32]	; (19154 <att_timeout+0x28>)
   19134:	9305      	str	r3, [sp, #20]
   19136:	4808      	ldr	r0, [pc, #32]	; (19158 <att_timeout+0x2c>)
   19138:	2302      	movs	r3, #2
   1913a:	aa04      	add	r2, sp, #16
   1913c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19140:	9304      	str	r3, [sp, #16]
   19142:	f00c fab3 	bl	256ac <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   19146:	f1a4 0054 	sub.w	r0, r4, #84	; 0x54
}
   1914a:	b006      	add	sp, #24
   1914c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   19150:	f7ff bf84 	b.w	1905c <bt_att_disconnected>
   19154:	0002a7f3 	.word	0x0002a7f3
   19158:	00028144 	.word	0x00028144

0001915c <find_cf_cfg>:
	}
#endif	/* CONFIG_BT_SETTINGS */
}

static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   1915c:	b570      	push	{r4, r5, r6, lr}
   1915e:	4d14      	ldr	r5, [pc, #80]	; (191b0 <find_cf_cfg+0x54>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   19160:	4606      	mov	r6, r0
   19162:	b140      	cbz	r0, 19176 <find_cf_cfg+0x1a>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   19164:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   19168:	462a      	mov	r2, r5
   1916a:	1e6c      	subs	r4, r5, #1
   1916c:	f00c f8c1 	bl	252f2 <bt_conn_is_peer_addr_le>
   19170:	b198      	cbz	r0, 1919a <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   19172:	4620      	mov	r0, r4
   19174:	e00c      	b.n	19190 <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   19176:	490f      	ldr	r1, [pc, #60]	; (191b4 <find_cf_cfg+0x58>)
   19178:	4628      	mov	r0, r5
   1917a:	f00c feb0 	bl	25ede <bt_addr_le_eq>
   1917e:	b940      	cbnz	r0, 19192 <find_cf_cfg+0x36>
   19180:	490c      	ldr	r1, [pc, #48]	; (191b4 <find_cf_cfg+0x58>)
   19182:	f105 0010 	add.w	r0, r5, #16
   19186:	f00c feaa 	bl	25ede <bt_addr_le_eq>
   1918a:	b120      	cbz	r0, 19196 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1918c:	f105 000f 	add.w	r0, r5, #15
			return cfg;
		}
	}

	return NULL;
}
   19190:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   19192:	1e68      	subs	r0, r5, #1
   19194:	e7fc      	b.n	19190 <find_cf_cfg+0x34>
	return NULL;
   19196:	2000      	movs	r0, #0
   19198:	e7fa      	b.n	19190 <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1919a:	7c21      	ldrb	r1, [r4, #16]
   1919c:	f104 0211 	add.w	r2, r4, #17
   191a0:	4630      	mov	r0, r6
   191a2:	f00c f8a6 	bl	252f2 <bt_conn_is_peer_addr_le>
   191a6:	2800      	cmp	r0, #0
   191a8:	d0f5      	beq.n	19196 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   191aa:	f104 0010 	add.w	r0, r4, #16
   191ae:	e7ef      	b.n	19190 <find_cf_cfg+0x34>
   191b0:	20003275 	.word	0x20003275
   191b4:	0002967b 	.word	0x0002967b

000191b8 <find_sc_cfg>:
{
   191b8:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   191ba:	4c0e      	ldr	r4, [pc, #56]	; (191f4 <find_sc_cfg+0x3c>)
   191bc:	7823      	ldrb	r3, [r4, #0]
   191be:	4283      	cmp	r3, r0
{
   191c0:	4605      	mov	r5, r0
   191c2:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   191c4:	d00c      	beq.n	191e0 <find_sc_cfg+0x28>
   191c6:	7b23      	ldrb	r3, [r4, #12]
   191c8:	42ab      	cmp	r3, r5
   191ca:	d110      	bne.n	191ee <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   191cc:	480a      	ldr	r0, [pc, #40]	; (191f8 <find_sc_cfg+0x40>)
   191ce:	4631      	mov	r1, r6
   191d0:	f00c fe85 	bl	25ede <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   191d4:	b158      	cbz	r0, 191ee <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   191d6:	2301      	movs	r3, #1
			return &sc_cfg[i];
   191d8:	220c      	movs	r2, #12
   191da:	fb02 4003 	mla	r0, r2, r3, r4
   191de:	e007      	b.n	191f0 <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   191e0:	1c60      	adds	r0, r4, #1
   191e2:	f00c fe7c 	bl	25ede <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   191e6:	2800      	cmp	r0, #0
   191e8:	d0ed      	beq.n	191c6 <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   191ea:	2300      	movs	r3, #0
   191ec:	e7f4      	b.n	191d8 <find_sc_cfg+0x20>
	return NULL;
   191ee:	2000      	movs	r0, #0
}
   191f0:	bd70      	pop	{r4, r5, r6, pc}
   191f2:	bf00      	nop
   191f4:	20004002 	.word	0x20004002
   191f8:	2000400f 	.word	0x2000400f

000191fc <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   191fc:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   191fe:	1c4a      	adds	r2, r1, #1
{
   19200:	460c      	mov	r4, r1
		if (conn) {
   19202:	4605      	mov	r5, r0
   19204:	b968      	cbnz	r0, 19222 <find_ccc_cfg+0x26>
				return cfg;
			}
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   19206:	490e      	ldr	r1, [pc, #56]	; (19240 <find_ccc_cfg+0x44>)
   19208:	4610      	mov	r0, r2
   1920a:	f00c fe68 	bl	25ede <bt_addr_le_eq>
   1920e:	b930      	cbnz	r0, 1921e <find_ccc_cfg+0x22>
   19210:	490b      	ldr	r1, [pc, #44]	; (19240 <find_ccc_cfg+0x44>)
   19212:	f104 000b 	add.w	r0, r4, #11
   19216:	f00c fe62 	bl	25ede <bt_addr_le_eq>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1921a:	b170      	cbz	r0, 1923a <find_ccc_cfg+0x3e>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1921c:	340a      	adds	r4, #10
   1921e:	4620      	mov	r0, r4
   19220:	e00c      	b.n	1923c <find_ccc_cfg+0x40>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   19222:	7809      	ldrb	r1, [r1, #0]
   19224:	f00c f865 	bl	252f2 <bt_conn_is_peer_addr_le>
   19228:	2800      	cmp	r0, #0
   1922a:	d1f8      	bne.n	1921e <find_ccc_cfg+0x22>
   1922c:	7aa1      	ldrb	r1, [r4, #10]
   1922e:	f104 020b 	add.w	r2, r4, #11
   19232:	4628      	mov	r0, r5
   19234:	f00c f85d 	bl	252f2 <bt_conn_is_peer_addr_le>
   19238:	e7ef      	b.n	1921a <find_ccc_cfg+0x1e>
			return cfg;
		}
	}

	return NULL;
   1923a:	2000      	movs	r0, #0
}
   1923c:	bd38      	pop	{r3, r4, r5, pc}
   1923e:	bf00      	nop
   19240:	0002967b 	.word	0x0002967b

00019244 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   19244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19248:	b087      	sub	sp, #28
   1924a:	461e      	mov	r6, r3
   1924c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	struct _bt_gatt_ccc *ccc = attr->user_data;
   19250:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   19254:	4681      	mov	r9, r0
   19256:	460f      	mov	r7, r1
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   19258:	2b00      	cmp	r3, #0
   1925a:	d14b      	bne.n	192f4 <bt_gatt_attr_write_ccc+0xb0>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   1925c:	1e73      	subs	r3, r6, #1
   1925e:	2b01      	cmp	r3, #1
   19260:	d84b      	bhi.n	192fa <bt_gatt_attr_write_ccc+0xb6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   19262:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   19264:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   19266:	7815      	ldrb	r5, [r2, #0]
   19268:	bf18      	it	ne
   1926a:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   1926c:	f7ff ffc6 	bl	191fc <find_ccc_cfg>
	if (!cfg) {
   19270:	4604      	mov	r4, r0
   19272:	b9f0      	cbnz	r0, 192b2 <bt_gatt_attr_write_ccc+0x6e>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   19274:	b91d      	cbnz	r5, 1927e <bt_gatt_attr_write_ccc+0x3a>
			return len;
   19276:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   19278:	b007      	add	sp, #28
   1927a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1927e:	4641      	mov	r1, r8
   19280:	f7ff ffbc 	bl	191fc <find_ccc_cfg>
		if (!cfg) {
   19284:	4604      	mov	r4, r0
   19286:	b960      	cbnz	r0, 192a2 <bt_gatt_attr_write_ccc+0x5e>
			LOG_WRN("No space to store CCC cfg");
   19288:	4b1d      	ldr	r3, [pc, #116]	; (19300 <bt_gatt_attr_write_ccc+0xbc>)
   1928a:	481e      	ldr	r0, [pc, #120]	; (19304 <bt_gatt_attr_write_ccc+0xc0>)
   1928c:	9305      	str	r3, [sp, #20]
   1928e:	aa04      	add	r2, sp, #16
   19290:	2302      	movs	r3, #2
   19292:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19296:	9304      	str	r3, [sp, #16]
   19298:	f00c fe3b 	bl	25f12 <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1929c:	f06f 0010 	mvn.w	r0, #16
   192a0:	e7ea      	b.n	19278 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   192a2:	f109 0188 	add.w	r1, r9, #136	; 0x88
   192a6:	3001      	adds	r0, #1
   192a8:	f00c fe30 	bl	25f0c <bt_addr_le_copy>
		cfg->id = conn->id;
   192ac:	f899 3008 	ldrb.w	r3, [r9, #8]
   192b0:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   192b2:	f8d8 301c 	ldr.w	r3, [r8, #28]
   192b6:	b98b      	cbnz	r3, 192dc <bt_gatt_attr_write_ccc+0x98>
	cfg->value = value;
   192b8:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   192ba:	f8b8 3014 	ldrh.w	r3, [r8, #20]
   192be:	42ab      	cmp	r3, r5
   192c0:	d003      	beq.n	192ca <bt_gatt_attr_write_ccc+0x86>
		gatt_ccc_changed(attr, ccc);
   192c2:	4641      	mov	r1, r8
   192c4:	4638      	mov	r0, r7
   192c6:	f00c fd92 	bl	25dee <gatt_ccc_changed>
	if (!value) {
   192ca:	2d00      	cmp	r5, #0
   192cc:	d1d3      	bne.n	19276 <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   192ce:	490e      	ldr	r1, [pc, #56]	; (19308 <bt_gatt_attr_write_ccc+0xc4>)
   192d0:	1c60      	adds	r0, r4, #1
   192d2:	f00c fe1b 	bl	25f0c <bt_addr_le_copy>
	cfg->id = 0U;
   192d6:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   192d8:	8125      	strh	r5, [r4, #8]
}
   192da:	e7cc      	b.n	19276 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   192dc:	462a      	mov	r2, r5
   192de:	4639      	mov	r1, r7
   192e0:	4648      	mov	r0, r9
   192e2:	4798      	blx	r3
		if (write < 0) {
   192e4:	2800      	cmp	r0, #0
   192e6:	dbc7      	blt.n	19278 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   192e8:	3801      	subs	r0, #1
   192ea:	2801      	cmp	r0, #1
   192ec:	d9e4      	bls.n	192b8 <bt_gatt_attr_write_ccc+0x74>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   192ee:	f06f 000d 	mvn.w	r0, #13
   192f2:	e7c1      	b.n	19278 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   192f4:	f06f 0006 	mvn.w	r0, #6
   192f8:	e7be      	b.n	19278 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   192fa:	f06f 000c 	mvn.w	r0, #12
   192fe:	e7bb      	b.n	19278 <bt_gatt_attr_write_ccc+0x34>
   19300:	0002a806 	.word	0x0002a806
   19304:	0002816c 	.word	0x0002816c
   19308:	0002967b 	.word	0x0002967b

0001930c <clear_cf_cfg>:
{
   1930c:	b510      	push	{r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1930e:	490c      	ldr	r1, [pc, #48]	; (19340 <clear_cf_cfg+0x34>)
{
   19310:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   19312:	3001      	adds	r0, #1
   19314:	f00c fdfa 	bl	25f0c <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   19318:	f104 0008 	add.w	r0, r4, #8
   1931c:	2201      	movs	r2, #1
   1931e:	2100      	movs	r1, #0
   19320:	f00b fb20 	bl	24964 <memset>
   19324:	f3bf 8f5b 	dmb	ish
   19328:	340c      	adds	r4, #12
   1932a:	2300      	movs	r3, #0
   1932c:	e854 2f00 	ldrex	r2, [r4]
   19330:	e844 3100 	strex	r1, r3, [r4]
   19334:	2900      	cmp	r1, #0
   19336:	d1f9      	bne.n	1932c <clear_cf_cfg+0x20>
   19338:	f3bf 8f5b 	dmb	ish
}
   1933c:	bd10      	pop	{r4, pc}
   1933e:	bf00      	nop
   19340:	0002967b 	.word	0x0002967b

00019344 <sc_save>:
{
   19344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19348:	b086      	sub	sp, #24
   1934a:	4680      	mov	r8, r0
   1934c:	460f      	mov	r7, r1
   1934e:	4616      	mov	r6, r2
   19350:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   19352:	f7ff ff31 	bl	191b8 <find_sc_cfg>
	if (!cfg) {
   19356:	4604      	mov	r4, r0
   19358:	b9b0      	cbnz	r0, 19388 <sc_save+0x44>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1935a:	4912      	ldr	r1, [pc, #72]	; (193a4 <sc_save+0x60>)
   1935c:	f7ff ff2c 	bl	191b8 <find_sc_cfg>
		if (!cfg) {
   19360:	4604      	mov	r4, r0
   19362:	b960      	cbnz	r0, 1937e <sc_save+0x3a>
			LOG_ERR("unable to save SC: no cfg left");
   19364:	4b10      	ldr	r3, [pc, #64]	; (193a8 <sc_save+0x64>)
   19366:	9305      	str	r3, [sp, #20]
   19368:	4810      	ldr	r0, [pc, #64]	; (193ac <sc_save+0x68>)
   1936a:	2302      	movs	r3, #2
   1936c:	aa04      	add	r2, sp, #16
   1936e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19372:	9304      	str	r3, [sp, #16]
   19374:	f00c fdcd 	bl	25f12 <z_log_msg_static_create.constprop.0>
}
   19378:	b006      	add	sp, #24
   1937a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   1937e:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   19382:	4639      	mov	r1, r7
   19384:	f00c fdc2 	bl	25f0c <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   19388:	8922      	ldrh	r2, [r4, #8]
   1938a:	8963      	ldrh	r3, [r4, #10]
   1938c:	b91a      	cbnz	r2, 19396 <sc_save+0x52>
   1938e:	b92b      	cbnz	r3, 1939c <sc_save+0x58>
		cfg->data.start = start;
   19390:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   19392:	8165      	strh	r5, [r4, #10]
   19394:	e7f0      	b.n	19378 <sc_save+0x34>
	if (new_start >= *start && new_end <= *end) {
   19396:	4296      	cmp	r6, r2
		*start = new_start;
   19398:	bf38      	it	cc
   1939a:	8126      	strhcc	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   1939c:	429d      	cmp	r5, r3
   1939e:	d9eb      	bls.n	19378 <sc_save+0x34>
   193a0:	e7f7      	b.n	19392 <sc_save+0x4e>
   193a2:	bf00      	nop
   193a4:	0002967b 	.word	0x0002967b
   193a8:	0002a820 	.word	0x0002a820
   193ac:	0002816c 	.word	0x0002816c

000193b0 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   193b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   193b4:	4b28      	ldr	r3, [pc, #160]	; (19458 <disconnected_cb+0xa8>)
{
   193b6:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   193b8:	6882      	ldr	r2, [r0, #8]
   193ba:	429a      	cmp	r2, r3
{
   193bc:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   193be:	d12b      	bne.n	19418 <disconnected_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   193c0:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   193c2:	8aab      	ldrh	r3, [r5, #20]
   193c4:	b343      	cbz	r3, 19418 <disconnected_cb+0x68>
   193c6:	1c6c      	adds	r4, r5, #1
   193c8:	f105 0915 	add.w	r9, r5, #21
		return BT_GATT_ITER_CONTINUE;
	}

	/* Checking if all values are disabled */
	value_used = false;
   193cc:	f04f 0800 	mov.w	r8, #0

	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		/* Ignore configurations with disabled value */
		if (!cfg->value) {
   193d0:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   193d4:	b19b      	cbz	r3, 193fe <disconnected_cb+0x4e>
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   193d6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   193da:	4622      	mov	r2, r4
   193dc:	4630      	mov	r0, r6
   193de:	f00b ff88 	bl	252f2 <bt_conn_is_peer_addr_le>
   193e2:	b9e0      	cbnz	r0, 1941e <disconnected_cb+0x6e>
			struct bt_conn *tmp;

			/* Skip if there is another peer connected */
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   193e4:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   193e8:	4621      	mov	r1, r4
   193ea:	f7fe fadf 	bl	179ac <bt_conn_lookup_addr_le>
			if (tmp) {
   193ee:	b130      	cbz	r0, 193fe <disconnected_cb+0x4e>
				if (tmp->state == BT_CONN_CONNECTED) {
   193f0:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   193f2:	2b07      	cmp	r3, #7
   193f4:	bf08      	it	eq
   193f6:	f04f 0801 	moveq.w	r8, #1
				}

				bt_conn_unref(tmp);
   193fa:	f00b feca 	bl	25192 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   193fe:	340a      	adds	r4, #10
   19400:	454c      	cmp	r4, r9
   19402:	d1e5      	bne.n	193d0 <disconnected_cb+0x20>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
   19404:	f1b8 0f00 	cmp.w	r8, #0
   19408:	d106      	bne.n	19418 <disconnected_cb+0x68>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
   1940a:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
   1940c:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
   19410:	b113      	cbz	r3, 19418 <disconnected_cb+0x68>
			ccc->cfg_changed(attr, ccc->value);
   19412:	4641      	mov	r1, r8
   19414:	4638      	mov	r0, r7
   19416:	4798      	blx	r3

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   19418:	2001      	movs	r0, #1
   1941a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1941e:	f106 0a88 	add.w	sl, r6, #136	; 0x88
   19422:	7a30      	ldrb	r0, [r6, #8]
   19424:	4651      	mov	r1, sl
   19426:	f00b fc4b 	bl	24cc0 <bt_addr_le_is_bonded>
   1942a:	b978      	cbnz	r0, 1944c <disconnected_cb+0x9c>
				if (ccc == &sc_ccc) {
   1942c:	4b0b      	ldr	r3, [pc, #44]	; (1945c <disconnected_cb+0xac>)
   1942e:	429d      	cmp	r5, r3
   19430:	d102      	bne.n	19438 <disconnected_cb+0x88>
					sc_clear(conn);
   19432:	4630      	mov	r0, r6
   19434:	f00c fd70 	bl	25f18 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   19438:	4909      	ldr	r1, [pc, #36]	; (19460 <disconnected_cb+0xb0>)
   1943a:	4620      	mov	r0, r4
   1943c:	f00c fd66 	bl	25f0c <bt_addr_le_copy>
	cfg->id = 0U;
   19440:	2300      	movs	r3, #0
   19442:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
   19446:	f8a4 3007 	strh.w	r3, [r4, #7]
}
   1944a:	e7d8      	b.n	193fe <disconnected_cb+0x4e>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1944c:	4651      	mov	r1, sl
   1944e:	4620      	mov	r0, r4
   19450:	f00c fd5c 	bl	25f0c <bt_addr_le_copy>
   19454:	e7d3      	b.n	193fe <disconnected_cb+0x4e>
   19456:	bf00      	nop
   19458:	00019245 	.word	0x00019245
   1945c:	2000062c 	.word	0x2000062c
   19460:	0002967b 	.word	0x0002967b

00019464 <read_ppcp>:
{
   19464:	b513      	push	{r0, r1, r4, lr}
   19466:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1946a:	4c0b      	ldr	r4, [pc, #44]	; (19498 <read_ppcp+0x34>)
{
   1946c:	4610      	mov	r0, r2
	if (offset > value_len) {
   1946e:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   19470:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   19474:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   19478:	d80b      	bhi.n	19492 <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   1947a:	f1c1 0408 	rsb	r4, r1, #8
   1947e:	429c      	cmp	r4, r3
   19480:	bfa8      	it	ge
   19482:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   19484:	4622      	mov	r2, r4
   19486:	4469      	add	r1, sp
   19488:	f00b fa61 	bl	2494e <memcpy>
}
   1948c:	4620      	mov	r0, r4
   1948e:	b002      	add	sp, #8
   19490:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19492:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   19496:	e7f9      	b.n	1948c <read_ppcp+0x28>
   19498:	00280018 	.word	0x00280018

0001949c <cf_write>:
{
   1949c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   194a0:	b086      	sub	sp, #24
   194a2:	461f      	mov	r7, r3
   194a4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	if (offset > sizeof(cfg->data)) {
   194a8:	2b01      	cmp	r3, #1
{
   194aa:	4606      	mov	r6, r0
   194ac:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   194ae:	d83a      	bhi.n	19526 <cf_write+0x8a>
	if (offset + len > sizeof(cfg->data)) {
   194b0:	443b      	add	r3, r7
   194b2:	2b01      	cmp	r3, #1
   194b4:	463d      	mov	r5, r7
   194b6:	dc39      	bgt.n	1952c <cf_write+0x90>
	cfg = find_cf_cfg(conn);
   194b8:	f7ff fe50 	bl	1915c <find_cf_cfg>
	if (!cfg) {
   194bc:	4604      	mov	r4, r0
   194be:	b998      	cbnz	r0, 194e8 <cf_write+0x4c>
		cfg = find_cf_cfg(NULL);
   194c0:	f7ff fe4c 	bl	1915c <find_cf_cfg>
	if (!cfg) {
   194c4:	4604      	mov	r4, r0
   194c6:	b978      	cbnz	r0, 194e8 <cf_write+0x4c>
		LOG_WRN("No space to store Client Supported Features");
   194c8:	4b1b      	ldr	r3, [pc, #108]	; (19538 <cf_write+0x9c>)
   194ca:	9305      	str	r3, [sp, #20]
   194cc:	481b      	ldr	r0, [pc, #108]	; (1953c <cf_write+0xa0>)
   194ce:	2302      	movs	r3, #2
   194d0:	aa04      	add	r2, sp, #16
   194d2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   194d6:	f06f 0510 	mvn.w	r5, #16
		LOG_WRN("No space to store Client Supported Features");
   194da:	9304      	str	r3, [sp, #16]
   194dc:	f00c fd19 	bl	25f12 <z_log_msg_static_create.constprop.0>
}
   194e0:	4628      	mov	r0, r5
   194e2:	b006      	add	sp, #24
   194e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   194e8:	b197      	cbz	r7, 19510 <cf_write+0x74>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   194ea:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   194ec:	f898 2000 	ldrb.w	r2, [r8]
   194f0:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   194f2:	fa21 f003 	lsr.w	r0, r1, r3
   194f6:	07c7      	lsls	r7, r0, #31
   194f8:	d503      	bpl.n	19502 <cf_write+0x66>
		    !(value[i / 8] & BIT(i % 8))) {
   194fa:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   194fe:	07c0      	lsls	r0, r0, #31
   19500:	d517      	bpl.n	19532 <cf_write+0x96>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   19502:	3301      	adds	r3, #1
   19504:	2b03      	cmp	r3, #3
   19506:	d1f4      	bne.n	194f2 <cf_write+0x56>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   19508:	f002 0207 	and.w	r2, r2, #7
   1950c:	4311      	orrs	r1, r2
   1950e:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19510:	1c60      	adds	r0, r4, #1
   19512:	f106 0188 	add.w	r1, r6, #136	; 0x88
   19516:	f00c fcf9 	bl	25f0c <bt_addr_le_copy>
	cfg->id = conn->id;
   1951a:	7a33      	ldrb	r3, [r6, #8]
   1951c:	7023      	strb	r3, [r4, #0]
	bool changed = set_change_aware_no_store(cfg, aware);
   1951e:	4620      	mov	r0, r4
   19520:	f00c fdc5 	bl	260ae <set_change_aware_no_store.constprop.0.isra.0>
	return len;
   19524:	e7dc      	b.n	194e0 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19526:	f06f 0506 	mvn.w	r5, #6
   1952a:	e7d9      	b.n	194e0 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1952c:	f06f 050c 	mvn.w	r5, #12
   19530:	e7d6      	b.n	194e0 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   19532:	f06f 0512 	mvn.w	r5, #18
   19536:	e7d3      	b.n	194e0 <cf_write+0x44>
   19538:	0002a83f 	.word	0x0002a83f
   1953c:	0002816c 	.word	0x0002816c

00019540 <sc_indicate_rsp>:
{
   19540:	b510      	push	{r4, lr}
   19542:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19544:	4814      	ldr	r0, [pc, #80]	; (19598 <sc_indicate_rsp+0x58>)
   19546:	f3bf 8f5b 	dmb	ish
   1954a:	e850 3f00 	ldrex	r3, [r0]
   1954e:	f023 0302 	bic.w	r3, r3, #2
   19552:	e840 3200 	strex	r2, r3, [r0]
   19556:	2a00      	cmp	r2, #0
   19558:	d1f7      	bne.n	1954a <sc_indicate_rsp+0xa>
   1955a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1955e:	f3bf 8f5b 	dmb	ish
   19562:	6803      	ldr	r3, [r0, #0]
   19564:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   19568:	07da      	lsls	r2, r3, #31
   1956a:	d504      	bpl.n	19576 <sc_indicate_rsp+0x36>
	k_work_reschedule(&gatt_sc.work, timeout);
   1956c:	2200      	movs	r2, #0
   1956e:	2300      	movs	r3, #0
   19570:	3830      	subs	r0, #48	; 0x30
   19572:	f006 fb03 	bl	1fb7c <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   19576:	4620      	mov	r0, r4
   19578:	f00c fc11 	bl	25d9e <bt_att_fixed_chan_only>
   1957c:	b150      	cbz	r0, 19594 <sc_indicate_rsp+0x54>
		cfg = find_cf_cfg(conn);
   1957e:	4620      	mov	r0, r4
   19580:	f7ff fdec 	bl	1915c <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   19584:	b130      	cbz	r0, 19594 <sc_indicate_rsp+0x54>
   19586:	7a03      	ldrb	r3, [r0, #8]
   19588:	07db      	lsls	r3, r3, #31
   1958a:	d503      	bpl.n	19594 <sc_indicate_rsp+0x54>
}
   1958c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bool changed = set_change_aware_no_store(cfg, aware);
   19590:	f00c bd8d 	b.w	260ae <set_change_aware_no_store.constprop.0.isra.0>
}
   19594:	bd10      	pop	{r4, pc}
   19596:	bf00      	nop
   19598:	20001f38 	.word	0x20001f38

0001959c <bt_gatt_init>:
{
   1959c:	b510      	push	{r4, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1959e:	4817      	ldr	r0, [pc, #92]	; (195fc <bt_gatt_init+0x60>)
   195a0:	2101      	movs	r1, #1
   195a2:	f00c fca4 	bl	25eee <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_INITIALIZED)) {
   195a6:	07c3      	lsls	r3, r0, #31
   195a8:	d427      	bmi.n	195fa <bt_gatt_init+0x5e>
   195aa:	2102      	movs	r1, #2
   195ac:	4813      	ldr	r0, [pc, #76]	; (195fc <bt_gatt_init+0x60>)
   195ae:	f00c fc9e 	bl	25eee <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_SERVICE_INITIALIZED)) {
   195b2:	4008      	ands	r0, r1
   195b4:	d107      	bne.n	195c6 <bt_gatt_init+0x2a>
   195b6:	4912      	ldr	r1, [pc, #72]	; (19600 <bt_gatt_init+0x64>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   195b8:	4a12      	ldr	r2, [pc, #72]	; (19604 <bt_gatt_init+0x68>)
   195ba:	880b      	ldrh	r3, [r1, #0]
   195bc:	4c12      	ldr	r4, [pc, #72]	; (19608 <bt_gatt_init+0x6c>)
   195be:	42a2      	cmp	r2, r4
   195c0:	d315      	bcc.n	195ee <bt_gatt_init+0x52>
   195c2:	b100      	cbz	r0, 195c6 <bt_gatt_init+0x2a>
   195c4:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   195c6:	4b11      	ldr	r3, [pc, #68]	; (1960c <bt_gatt_init+0x70>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   195c8:	4911      	ldr	r1, [pc, #68]	; (19610 <bt_gatt_init+0x74>)
   195ca:	4812      	ldr	r0, [pc, #72]	; (19614 <bt_gatt_init+0x78>)
   195cc:	2200      	movs	r2, #0
	list->tail = NULL;
   195ce:	e9c3 2200 	strd	r2, r2, [r3]
   195d2:	f00e f8b4 	bl	2773e <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   195d6:	480f      	ldr	r0, [pc, #60]	; (19614 <bt_gatt_init+0x78>)
   195d8:	f44f 72a4 	mov.w	r2, #328	; 0x148
   195dc:	2300      	movs	r3, #0
   195de:	f7fb f831 	bl	14644 <bt_long_wq_schedule>
}
   195e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   195e6:	490c      	ldr	r1, [pc, #48]	; (19618 <bt_gatt_init+0x7c>)
   195e8:	480c      	ldr	r0, [pc, #48]	; (1961c <bt_gatt_init+0x80>)
   195ea:	f00e b8a8 	b.w	2773e <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   195ee:	6850      	ldr	r0, [r2, #4]
   195f0:	4403      	add	r3, r0
   195f2:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   195f4:	3208      	adds	r2, #8
   195f6:	2001      	movs	r0, #1
   195f8:	e7e1      	b.n	195be <bt_gatt_init+0x22>
}
   195fa:	bd10      	pop	{r4, pc}
   195fc:	20003294 	.word	0x20003294
   19600:	2000401a 	.word	0x2000401a
   19604:	0002810c 	.word	0x0002810c
   19608:	00028124 	.word	0x00028124
   1960c:	20003298 	.word	0x20003298
   19610:	00019841 	.word	0x00019841
   19614:	20001e90 	.word	0x20001e90
   19618:	00019a7d 	.word	0x00019a7d
   1961c:	20001f08 	.word	0x20001f08

00019620 <bt_gatt_attr_get_handle>:
{
   19620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   19624:	4603      	mov	r3, r0
   19626:	b148      	cbz	r0, 1963c <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   19628:	8a00      	ldrh	r0, [r0, #16]
   1962a:	b938      	cbnz	r0, 1963c <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1962c:	4912      	ldr	r1, [pc, #72]	; (19678 <bt_gatt_attr_get_handle+0x58>)
   1962e:	f8df e04c 	ldr.w	lr, [pc, #76]	; 1967c <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   19632:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   19634:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19638:	4571      	cmp	r1, lr
   1963a:	d301      	bcc.n	19640 <bt_gatt_attr_get_handle+0x20>
}
   1963c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   19640:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   19644:	42bb      	cmp	r3, r7
   19646:	d304      	bcc.n	19652 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   19648:	fb0c 7206 	mla	r2, ip, r6, r7
   1964c:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   1964e:	4293      	cmp	r3, r2
   19650:	d90e      	bls.n	19670 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   19652:	4434      	add	r4, r6
   19654:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19656:	3108      	adds	r1, #8
   19658:	4614      	mov	r4, r2
   1965a:	e7ed      	b.n	19638 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1965c:	fb0c 7805 	mla	r8, ip, r5, r7
   19660:	4543      	cmp	r3, r8
   19662:	d007      	beq.n	19674 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   19664:	3501      	adds	r5, #1
   19666:	1962      	adds	r2, r4, r5
   19668:	42b5      	cmp	r5, r6
   1966a:	b292      	uxth	r2, r2
   1966c:	d1f6      	bne.n	1965c <bt_gatt_attr_get_handle+0x3c>
   1966e:	e7f2      	b.n	19656 <bt_gatt_attr_get_handle+0x36>
   19670:	2500      	movs	r5, #0
   19672:	e7f8      	b.n	19666 <bt_gatt_attr_get_handle+0x46>
   19674:	4610      	mov	r0, r2
   19676:	e7e1      	b.n	1963c <bt_gatt_attr_get_handle+0x1c>
   19678:	0002810c 	.word	0x0002810c
   1967c:	00028124 	.word	0x00028124

00019680 <bt_gatt_foreach_attr_type>:
{
   19680:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19684:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   19688:	9100      	str	r1, [sp, #0]
   1968a:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1968c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19690:	2d00      	cmp	r5, #0
   19692:	bf08      	it	eq
   19694:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   19696:	4b24      	ldr	r3, [pc, #144]	; (19728 <bt_gatt_foreach_attr_type+0xa8>)
   19698:	881b      	ldrh	r3, [r3, #0]
   1969a:	4283      	cmp	r3, r0
{
   1969c:	4607      	mov	r7, r0
   1969e:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   196a0:	d23c      	bcs.n	1971c <bt_gatt_foreach_attr_type+0x9c>
}
   196a2:	b003      	add	sp, #12
   196a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   196a8:	6873      	ldr	r3, [r6, #4]
   196aa:	4423      	add	r3, r4
   196ac:	42bb      	cmp	r3, r7
   196ae:	d232      	bcs.n	19716 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   196b0:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   196b2:	3608      	adds	r6, #8
   196b4:	4b1d      	ldr	r3, [pc, #116]	; (1972c <bt_gatt_foreach_attr_type+0xac>)
   196b6:	429e      	cmp	r6, r3
   196b8:	d3f6      	bcc.n	196a8 <bt_gatt_foreach_attr_type+0x28>
   196ba:	e7f2      	b.n	196a2 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   196bc:	5889      	ldr	r1, [r1, r2]
   196be:	9301      	str	r3, [sp, #4]
   196c0:	4640      	mov	r0, r8
   196c2:	f00b f99d 	bl	24a00 <bt_uuid_cmp>
   196c6:	9b01      	ldr	r3, [sp, #4]
   196c8:	b190      	cbz	r0, 196f0 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   196ca:	3401      	adds	r4, #1
   196cc:	f10a 0a01 	add.w	sl, sl, #1
   196d0:	b2a4      	uxth	r4, r4
   196d2:	6873      	ldr	r3, [r6, #4]
   196d4:	4553      	cmp	r3, sl
   196d6:	d9ec      	bls.n	196b2 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   196d8:	9b00      	ldr	r3, [sp, #0]
   196da:	429c      	cmp	r4, r3
   196dc:	d8e1      	bhi.n	196a2 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   196de:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
   196e0:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
   196e2:	d3f2      	bcc.n	196ca <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   196e4:	fb0b f20a 	mul.w	r2, fp, sl
   196e8:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   196ea:	f1b8 0f00 	cmp.w	r8, #0
   196ee:	d1e5      	bne.n	196bc <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   196f0:	f1b9 0f00 	cmp.w	r9, #0
   196f4:	d10b      	bne.n	1970e <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   196f6:	3d01      	subs	r5, #1
   196f8:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   196fa:	4618      	mov	r0, r3
   196fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   196fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19700:	4621      	mov	r1, r4
   19702:	4798      	blx	r3
	if (!*num_matches) {
   19704:	2d00      	cmp	r5, #0
   19706:	d0cc      	beq.n	196a2 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   19708:	2800      	cmp	r0, #0
   1970a:	d1de      	bne.n	196ca <bt_gatt_foreach_attr_type+0x4a>
   1970c:	e7c9      	b.n	196a2 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1970e:	68da      	ldr	r2, [r3, #12]
   19710:	4591      	cmp	r9, r2
   19712:	d1da      	bne.n	196ca <bt_gatt_foreach_attr_type+0x4a>
   19714:	e7ef      	b.n	196f6 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   19716:	f04f 0a00 	mov.w	sl, #0
   1971a:	e7da      	b.n	196d2 <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1971c:	4e04      	ldr	r6, [pc, #16]	; (19730 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   1971e:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   19720:	f04f 0b14 	mov.w	fp, #20
   19724:	e7c6      	b.n	196b4 <bt_gatt_foreach_attr_type+0x34>
   19726:	bf00      	nop
   19728:	2000401a 	.word	0x2000401a
   1972c:	00028124 	.word	0x00028124
   19730:	0002810c 	.word	0x0002810c

00019734 <db_hash_gen>:
{
   19734:	b510      	push	{r4, lr}
   19736:	b0ce      	sub	sp, #312	; 0x138
	uint8_t key[16] = {};
   19738:	2400      	movs	r4, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1973a:	aa22      	add	r2, sp, #136	; 0x88
   1973c:	4669      	mov	r1, sp
   1973e:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   19740:	e9cd 4400 	strd	r4, r4, [sp]
   19744:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   19748:	f00a ffe0 	bl	2470c <tc_cmac_setup>
   1974c:	b958      	cbnz	r0, 19766 <db_hash_gen+0x32>
		LOG_ERR("Unable to setup AES CMAC");
   1974e:	4b15      	ldr	r3, [pc, #84]	; (197a4 <db_hash_gen+0x70>)
		LOG_ERR("Unable to calculate hash");
   19750:	9309      	str	r3, [sp, #36]	; 0x24
   19752:	4815      	ldr	r0, [pc, #84]	; (197a8 <db_hash_gen+0x74>)
   19754:	2302      	movs	r3, #2
   19756:	aa08      	add	r2, sp, #32
   19758:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1975c:	9308      	str	r3, [sp, #32]
   1975e:	f00c fbd8 	bl	25f12 <z_log_msg_static_create.constprop.0>
}
   19762:	b04e      	add	sp, #312	; 0x138
   19764:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   19766:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1976a:	2001      	movs	r0, #1
   1976c:	4a0f      	ldr	r2, [pc, #60]	; (197ac <db_hash_gen+0x78>)
   1976e:	ab0a      	add	r3, sp, #40	; 0x28
   19770:	f00c fd24 	bl	261bc <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   19774:	480e      	ldr	r0, [pc, #56]	; (197b0 <db_hash_gen+0x7c>)
   19776:	a90a      	add	r1, sp, #40	; 0x28
   19778:	f00b f85d 	bl	24836 <tc_cmac_final>
   1977c:	b908      	cbnz	r0, 19782 <db_hash_gen+0x4e>
		LOG_ERR("Unable to calculate hash");
   1977e:	4b0d      	ldr	r3, [pc, #52]	; (197b4 <db_hash_gen+0x80>)
   19780:	e7e6      	b.n	19750 <db_hash_gen+0x1c>
   19782:	4b0b      	ldr	r3, [pc, #44]	; (197b0 <db_hash_gen+0x7c>)
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   19784:	4621      	mov	r1, r4
   19786:	f103 0210 	add.w	r2, r3, #16
   1978a:	3101      	adds	r1, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
   1978c:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1978e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   19792:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   19796:	2908      	cmp	r1, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
   19798:	7010      	strb	r0, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1979a:	d1f6      	bne.n	1978a <db_hash_gen+0x56>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1979c:	4806      	ldr	r0, [pc, #24]	; (197b8 <db_hash_gen+0x84>)
   1979e:	f00c fba6 	bl	25eee <atomic_or>
   197a2:	e7de      	b.n	19762 <db_hash_gen+0x2e>
   197a4:	0002a86b 	.word	0x0002a86b
   197a8:	0002816c 	.word	0x0002816c
   197ac:	00025e39 	.word	0x00025e39
   197b0:	20001e80 	.word	0x20001e80
   197b4:	0002a884 	.word	0x0002a884
   197b8:	20001f38 	.word	0x20001f38

000197bc <db_hash_read>:
{
   197bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   197be:	491d      	ldr	r1, [pc, #116]	; (19834 <db_hash_read+0x78>)
{
   197c0:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   197c4:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   197c6:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   197ca:	461f      	mov	r7, r3
   197cc:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   197ce:	f00d ffd8 	bl	27782 <k_work_cancel_delayable_sync>
   197d2:	f3bf 8f5b 	dmb	ish
   197d6:	4b18      	ldr	r3, [pc, #96]	; (19838 <db_hash_read+0x7c>)
   197d8:	681b      	ldr	r3, [r3, #0]
   197da:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   197de:	0719      	lsls	r1, r3, #28
   197e0:	d401      	bmi.n	197e6 <db_hash_read+0x2a>
		db_hash_gen();
   197e2:	f7ff ffa7 	bl	19734 <db_hash_gen>
	cfg = find_cf_cfg(conn);
   197e6:	4620      	mov	r0, r4
   197e8:	f7ff fcb8 	bl	1915c <find_cf_cfg>
	if (cfg &&
   197ec:	4601      	mov	r1, r0
   197ee:	b170      	cbz	r0, 1980e <db_hash_read+0x52>
   197f0:	7a03      	ldrb	r3, [r0, #8]
   197f2:	07da      	lsls	r2, r3, #31
   197f4:	d50b      	bpl.n	1980e <db_hash_read+0x52>
   197f6:	f3bf 8f5b 	dmb	ish
   197fa:	68cb      	ldr	r3, [r1, #12]
   197fc:	f3bf 8f5b 	dmb	ish
	    CF_ROBUST_CACHING(cfg) &&
   19800:	07db      	lsls	r3, r3, #31
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   19802:	f100 000c 	add.w	r0, r0, #12
	    CF_ROBUST_CACHING(cfg) &&
   19806:	d402      	bmi.n	1980e <db_hash_read+0x52>
   19808:	2102      	movs	r1, #2
   1980a:	f00c fb70 	bl	25eee <atomic_or>
	if (offset > value_len) {
   1980e:	2e10      	cmp	r6, #16
   19810:	d80c      	bhi.n	1982c <db_hash_read+0x70>
	len = MIN(buf_len, value_len - offset);
   19812:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   19816:	4909      	ldr	r1, [pc, #36]	; (1983c <db_hash_read+0x80>)
	len = MIN(buf_len, value_len - offset);
   19818:	42bc      	cmp	r4, r7
   1981a:	bfa8      	it	ge
   1981c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1981e:	4622      	mov	r2, r4
   19820:	4431      	add	r1, r6
   19822:	4628      	mov	r0, r5
   19824:	f00b f893 	bl	2494e <memcpy>
}
   19828:	4620      	mov	r0, r4
   1982a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1982c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   19830:	e7fa      	b.n	19828 <db_hash_read+0x6c>
   19832:	bf00      	nop
   19834:	20001ec0 	.word	0x20001ec0
   19838:	20001f38 	.word	0x20001f38
   1983c:	20001e80 	.word	0x20001e80

00019840 <db_hash_process>:
   19840:	4b05      	ldr	r3, [pc, #20]	; (19858 <db_hash_process+0x18>)
   19842:	f3bf 8f5b 	dmb	ish
   19846:	681b      	ldr	r3, [r3, #0]
   19848:	f3bf 8f5b 	dmb	ish
	if (new_hash) {
   1984c:	071b      	lsls	r3, r3, #28
   1984e:	d401      	bmi.n	19854 <db_hash_process+0x14>
		db_hash_gen();
   19850:	f7ff bf70 	b.w	19734 <db_hash_gen>
}
   19854:	4770      	bx	lr
   19856:	bf00      	nop
   19858:	20001f38 	.word	0x20001f38

0001985c <bt_gatt_attr_next>:
{
   1985c:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1985e:	2300      	movs	r3, #0
   19860:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   19862:	f7ff fedd 	bl	19620 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   19866:	1c41      	adds	r1, r0, #1
   19868:	b289      	uxth	r1, r1
   1986a:	4608      	mov	r0, r1
   1986c:	4a03      	ldr	r2, [pc, #12]	; (1987c <bt_gatt_attr_next+0x20>)
   1986e:	ab01      	add	r3, sp, #4
   19870:	f00c fca4 	bl	261bc <bt_gatt_foreach_attr>
}
   19874:	9801      	ldr	r0, [sp, #4]
   19876:	b003      	add	sp, #12
   19878:	f85d fb04 	ldr.w	pc, [sp], #4
   1987c:	00025de9 	.word	0x00025de9

00019880 <gatt_indicate>:
{
   19880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19884:	4615      	mov	r5, r2
   19886:	b086      	sub	sp, #24
   19888:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1988a:	2294      	movs	r2, #148	; 0x94
   1988c:	6869      	ldr	r1, [r5, #4]
{
   1988e:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   19890:	f00c fc9f 	bl	261d2 <bt_gatt_check_perm>
   19894:	4680      	mov	r8, r0
   19896:	b178      	cbz	r0, 198b8 <gatt_indicate+0x38>
		LOG_WRN("Link is not encrypted");
   19898:	4b36      	ldr	r3, [pc, #216]	; (19974 <gatt_indicate+0xf4>)
   1989a:	9305      	str	r3, [sp, #20]
   1989c:	4836      	ldr	r0, [pc, #216]	; (19978 <gatt_indicate+0xf8>)
   1989e:	2302      	movs	r3, #2
   198a0:	aa04      	add	r2, sp, #16
   198a2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -EPERM;
   198a6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		LOG_WRN("Link is not encrypted");
   198aa:	9304      	str	r3, [sp, #16]
   198ac:	f00c fb31 	bl	25f12 <z_log_msg_static_create.constprop.0>
}
   198b0:	4628      	mov	r0, r5
   198b2:	b006      	add	sp, #24
   198b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   198b8:	6869      	ldr	r1, [r5, #4]
   198ba:	2202      	movs	r2, #2
   198bc:	4630      	mov	r0, r6
   198be:	f00c fcc2 	bl	26246 <bt_gatt_is_subscribed>
   198c2:	b960      	cbnz	r0, 198de <gatt_indicate+0x5e>
			LOG_WRN("Device is not subscribed to characteristic");
   198c4:	4b2d      	ldr	r3, [pc, #180]	; (1997c <gatt_indicate+0xfc>)
   198c6:	9305      	str	r3, [sp, #20]
   198c8:	482b      	ldr	r0, [pc, #172]	; (19978 <gatt_indicate+0xf8>)
   198ca:	2302      	movs	r3, #2
   198cc:	aa04      	add	r2, sp, #16
   198ce:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   198d2:	9304      	str	r3, [sp, #16]
			return -EINVAL;
   198d4:	f06f 0515 	mvn.w	r5, #21
			LOG_WRN("Device is not subscribed to characteristic");
   198d8:	f00c fb1b 	bl	25f12 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   198dc:	e7e8      	b.n	198b0 <gatt_indicate+0x30>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   198de:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   198e2:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   198e4:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   198e6:	f7ff fb39 	bl	18f5c <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   198ea:	3702      	adds	r7, #2
	if (!req) {
   198ec:	4604      	mov	r4, r0
   198ee:	b1d0      	cbz	r0, 19926 <gatt_indicate+0xa6>
	req->func = func;
   198f0:	4b23      	ldr	r3, [pc, #140]	; (19980 <gatt_indicate+0x100>)
	req->len = len;
   198f2:	6147      	str	r7, [r0, #20]
	req->att_op = op;
   198f4:	211d      	movs	r1, #29
   198f6:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   198f8:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   198fc:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   198fe:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   19900:	463a      	mov	r2, r7
   19902:	4630      	mov	r0, r6
   19904:	f7ff f856 	bl	189b4 <bt_att_create_pdu>
	if (!buf) {
   19908:	4607      	mov	r7, r0
   1990a:	b978      	cbnz	r0, 1992c <gatt_indicate+0xac>
		LOG_WRN("No buffer available to send indication");
   1990c:	4b1d      	ldr	r3, [pc, #116]	; (19984 <gatt_indicate+0x104>)
   1990e:	481a      	ldr	r0, [pc, #104]	; (19978 <gatt_indicate+0xf8>)
   19910:	9305      	str	r3, [sp, #20]
   19912:	aa04      	add	r2, sp, #16
   19914:	2302      	movs	r3, #2
   19916:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1991a:	9304      	str	r3, [sp, #16]
   1991c:	f00c faf9 	bl	25f12 <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   19920:	4620      	mov	r0, r4
   19922:	f7ff fb3d 	bl	18fa0 <bt_att_req_free>
		return -ENOMEM;
   19926:	f06f 050b 	mvn.w	r5, #11
   1992a:	e7c1      	b.n	198b0 <gatt_indicate+0x30>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1992c:	2301      	movs	r3, #1
   1992e:	4642      	mov	r2, r8
   19930:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   19932:	f107 0a0c 	add.w	sl, r7, #12
   19936:	f00c fa50 	bl	25dda <bt_att_set_tx_meta_data>
   1993a:	2102      	movs	r1, #2
   1993c:	4650      	mov	r0, sl
   1993e:	f00d f943 	bl	26bc8 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   19942:	4680      	mov	r8, r0
   19944:	4650      	mov	r0, sl
   19946:	f828 9b02 	strh.w	r9, [r8], #2
   1994a:	8aa9      	ldrh	r1, [r5, #20]
   1994c:	f00d f93c 	bl	26bc8 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   19950:	8aaa      	ldrh	r2, [r5, #20]
   19952:	6929      	ldr	r1, [r5, #16]
   19954:	4640      	mov	r0, r8
   19956:	f00a fffa 	bl	2494e <memcpy>
	req->buf = buf;
   1995a:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   1995c:	4621      	mov	r1, r4
   1995e:	4630      	mov	r0, r6
   19960:	f00c fa08 	bl	25d74 <bt_att_req_send>
	if (err) {
   19964:	4605      	mov	r5, r0
   19966:	2800      	cmp	r0, #0
   19968:	d0a2      	beq.n	198b0 <gatt_indicate+0x30>
		bt_att_req_free(req);
   1996a:	4620      	mov	r0, r4
   1996c:	f7ff fb18 	bl	18fa0 <bt_att_req_free>
   19970:	e79e      	b.n	198b0 <gatt_indicate+0x30>
   19972:	bf00      	nop
   19974:	0002a89d 	.word	0x0002a89d
   19978:	0002816c 	.word	0x0002816c
   1997c:	0002a8b3 	.word	0x0002a8b3
   19980:	00025e0b 	.word	0x00025e0b
   19984:	0002a8de 	.word	0x0002a8de

00019988 <bt_gatt_indicate>:
{
   19988:	b530      	push	{r4, r5, lr}
   1998a:	4b39      	ldr	r3, [pc, #228]	; (19a70 <bt_gatt_indicate+0xe8>)
   1998c:	f3bf 8f5b 	dmb	ish
   19990:	681b      	ldr	r3, [r3, #0]
   19992:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   19996:	075a      	lsls	r2, r3, #29
{
   19998:	b08b      	sub	sp, #44	; 0x2c
   1999a:	4604      	mov	r4, r0
   1999c:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1999e:	d561      	bpl.n	19a64 <bt_gatt_indicate+0xdc>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   199a0:	b110      	cbz	r0, 199a8 <bt_gatt_indicate+0x20>
   199a2:	7b43      	ldrb	r3, [r0, #13]
   199a4:	2b07      	cmp	r3, #7
   199a6:	d160      	bne.n	19a6a <bt_gatt_indicate+0xe2>
	data.attr = params->attr;
   199a8:	6868      	ldr	r0, [r5, #4]
   199aa:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   199ac:	f7ff fe38 	bl	19620 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   199b0:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   199b2:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   199b6:	b33a      	cbz	r2, 19a08 <bt_gatt_indicate+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   199b8:	a905      	add	r1, sp, #20
   199ba:	9102      	str	r1, [sp, #8]
   199bc:	492d      	ldr	r1, [pc, #180]	; (19a74 <bt_gatt_indicate+0xec>)
   199be:	9101      	str	r1, [sp, #4]
   199c0:	2101      	movs	r1, #1
	found->attr = NULL;
   199c2:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   199c4:	9100      	str	r1, [sp, #0]
   199c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   199ca:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   199cc:	f7ff fe58 	bl	19680 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   199d0:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   199d2:	b91b      	cbnz	r3, 199dc <bt_gatt_indicate+0x54>
			return -ENOENT;
   199d4:	f06f 0001 	mvn.w	r0, #1
}
   199d8:	b00b      	add	sp, #44	; 0x2c
   199da:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   199dc:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   199de:	9b05      	ldr	r3, [sp, #20]
   199e0:	6818      	ldr	r0, [r3, #0]
   199e2:	2300      	movs	r3, #0
   199e4:	f88d 3010 	strb.w	r3, [sp, #16]
   199e8:	a904      	add	r1, sp, #16
   199ea:	f642 0303 	movw	r3, #10243	; 0x2803
   199ee:	f8ad 3012 	strh.w	r3, [sp, #18]
   199f2:	f00b f805 	bl	24a00 <bt_uuid_cmp>
   199f6:	b970      	cbnz	r0, 19a16 <bt_gatt_indicate+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   199f8:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   199fa:	68c3      	ldr	r3, [r0, #12]
   199fc:	799b      	ldrb	r3, [r3, #6]
   199fe:	069b      	lsls	r3, r3, #26
   19a00:	d405      	bmi.n	19a0e <bt_gatt_indicate+0x86>
			return -EINVAL;
   19a02:	f06f 0015 	mvn.w	r0, #21
   19a06:	e7e7      	b.n	199d8 <bt_gatt_indicate+0x50>
		if (!data.handle) {
   19a08:	2800      	cmp	r0, #0
   19a0a:	d1e8      	bne.n	199de <bt_gatt_indicate+0x56>
   19a0c:	e7e2      	b.n	199d4 <bt_gatt_indicate+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   19a0e:	f00c fb87 	bl	26120 <bt_gatt_attr_value_handle>
   19a12:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   19a16:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   19a1a:	b13c      	cbz	r4, 19a2c <bt_gatt_indicate+0xa4>
		params->_ref = 1;
   19a1c:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   19a1e:	4601      	mov	r1, r0
		params->_ref = 1;
   19a20:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   19a22:	462a      	mov	r2, r5
   19a24:	4620      	mov	r0, r4
   19a26:	f7ff ff2b 	bl	19880 <gatt_indicate>
   19a2a:	e7d5      	b.n	199d8 <bt_gatt_indicate+0x50>
	data.err = -ENOTCONN;
   19a2c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   19a30:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   19a32:	2302      	movs	r3, #2
   19a34:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   19a38:	f642 1302 	movw	r3, #10498	; 0x2902
   19a3c:	f8ad 3012 	strh.w	r3, [sp, #18]
   19a40:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   19a42:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   19a44:	9302      	str	r3, [sp, #8]
   19a46:	4b0c      	ldr	r3, [pc, #48]	; (19a78 <bt_gatt_indicate+0xf0>)
   19a48:	9301      	str	r3, [sp, #4]
   19a4a:	2301      	movs	r3, #1
   19a4c:	9300      	str	r3, [sp, #0]
   19a4e:	aa04      	add	r2, sp, #16
   19a50:	4623      	mov	r3, r4
   19a52:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   19a56:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   19a58:	f88d 4010 	strb.w	r4, [sp, #16]
   19a5c:	f7ff fe10 	bl	19680 <bt_gatt_foreach_attr_type>
	return data.err;
   19a60:	9807      	ldr	r0, [sp, #28]
   19a62:	e7b9      	b.n	199d8 <bt_gatt_indicate+0x50>
		return -EAGAIN;
   19a64:	f06f 000a 	mvn.w	r0, #10
   19a68:	e7b6      	b.n	199d8 <bt_gatt_indicate+0x50>
		return -ENOTCONN;
   19a6a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19a6e:	e7b3      	b.n	199d8 <bt_gatt_indicate+0x50>
   19a70:	2000045c 	.word	0x2000045c
   19a74:	00025e31 	.word	0x00025e31
   19a78:	00019dcd 	.word	0x00019dcd

00019a7c <sc_process>:
{
   19a7c:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   19a7e:	f850 2c08 	ldr.w	r2, [r0, #-8]
   19a82:	9201      	str	r2, [sp, #4]
{
   19a84:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   19a86:	f1a0 0120 	sub.w	r1, r0, #32
   19a8a:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19a8e:	f3bf 8f5b 	dmb	ish
   19a92:	e854 2f00 	ldrex	r2, [r4]
   19a96:	f022 0201 	bic.w	r2, r2, #1
   19a9a:	e844 2000 	strex	r0, r2, [r4]
   19a9e:	2800      	cmp	r0, #0
   19aa0:	d1f7      	bne.n	19a92 <sc_process+0x16>
   19aa2:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   19aa6:	4a0d      	ldr	r2, [pc, #52]	; (19adc <sc_process+0x60>)
   19aa8:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   19aac:	4a0c      	ldr	r2, [pc, #48]	; (19ae0 <sc_process+0x64>)
   19aae:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   19ab2:	aa01      	add	r2, sp, #4
	sc->start = 0U;
   19ab4:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   19ab6:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   19aba:	2204      	movs	r2, #4
	sc->start = 0U;
   19abc:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   19ac0:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   19ac4:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   19ac8:	f7ff ff5e 	bl	19988 <bt_gatt_indicate>
   19acc:	b918      	cbnz	r0, 19ad6 <sc_process+0x5a>
   19ace:	2102      	movs	r1, #2
   19ad0:	4620      	mov	r0, r4
   19ad2:	f00c fa0c 	bl	25eee <atomic_or>
}
   19ad6:	b002      	add	sp, #8
   19ad8:	bd10      	pop	{r4, pc}
   19ada:	bf00      	nop
   19adc:	000286e8 	.word	0x000286e8
   19ae0:	00019541 	.word	0x00019541

00019ae4 <update_ccc>:
{
   19ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ae8:	b089      	sub	sp, #36	; 0x24
	struct bt_conn *conn = data->conn;
   19aea:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   19aec:	4b3f      	ldr	r3, [pc, #252]	; (19bec <update_ccc+0x108>)
{
   19aee:	4690      	mov	r8, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   19af0:	6882      	ldr	r2, [r0, #8]
   19af2:	429a      	cmp	r2, r3
{
   19af4:	af00      	add	r7, sp, #0
   19af6:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   19af8:	d173      	bne.n	19be2 <update_ccc+0xfe>
	ccc = attr->user_data;
   19afa:	f8d0 900c 	ldr.w	r9, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   19afe:	f109 0601 	add.w	r6, r9, #1
   19b02:	f109 0a15 	add.w	sl, r9, #21
		if (!cfg->value ||
   19b06:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   19b0a:	b1eb      	cbz	r3, 19b48 <update_ccc+0x64>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   19b0c:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   19b10:	4632      	mov	r2, r6
   19b12:	4620      	mov	r0, r4
   19b14:	f00b fbed 	bl	252f2 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   19b18:	b1b0      	cbz	r0, 19b48 <update_ccc+0x64>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   19b1a:	f44f 7295 	mov.w	r2, #298	; 0x12a
   19b1e:	4629      	mov	r1, r5
   19b20:	4620      	mov	r0, r4
   19b22:	f00c fb56 	bl	261d2 <bt_gatt_check_perm>
		if (err) {
   19b26:	b328      	cbz	r0, 19b74 <update_ccc+0x90>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   19b28:	2803      	cmp	r0, #3
   19b2a:	d111      	bne.n	19b50 <update_ccc+0x6c>
				LOG_WRN("CCC %p not writable", attr);
   19b2c:	46eb      	mov	fp, sp
   19b2e:	b088      	sub	sp, #32
   19b30:	466a      	mov	r2, sp
   19b32:	4b2f      	ldr	r3, [pc, #188]	; (19bf0 <update_ccc+0x10c>)
   19b34:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19b38:	e9c2 3505 	strd	r3, r5, [r2, #20]
   19b3c:	f842 0f10 	str.w	r0, [r2, #16]!
   19b40:	482c      	ldr	r0, [pc, #176]	; (19bf4 <update_ccc+0x110>)
   19b42:	f00c f9e6 	bl	25f12 <z_log_msg_static_create.constprop.0>
   19b46:	46dd      	mov	sp, fp
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   19b48:	360a      	adds	r6, #10
   19b4a:	4556      	cmp	r6, sl
   19b4c:	d1db      	bne.n	19b06 <update_ccc+0x22>
   19b4e:	e048      	b.n	19be2 <update_ccc+0xfe>
			sec = BT_SECURITY_L2;
   19b50:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   19b52:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   19b54:	bf0c      	ite	eq
   19b56:	f04f 0b03 	moveq.w	fp, #3
   19b5a:	f04f 0b02 	movne.w	fp, #2
			    bt_conn_get_security(conn) < sec) {
   19b5e:	f00b fbc6 	bl	252ee <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   19b62:	4583      	cmp	fp, r0
   19b64:	d906      	bls.n	19b74 <update_ccc+0x90>
				if (data->sec < sec) {
   19b66:	f898 3004 	ldrb.w	r3, [r8, #4]
   19b6a:	455b      	cmp	r3, fp
   19b6c:	d2ec      	bcs.n	19b48 <update_ccc+0x64>
					data->sec = sec;
   19b6e:	f888 b004 	strb.w	fp, [r8, #4]
   19b72:	e7e9      	b.n	19b48 <update_ccc+0x64>
		gatt_ccc_changed(attr, ccc);
   19b74:	4649      	mov	r1, r9
   19b76:	4628      	mov	r0, r5
   19b78:	f00c f939 	bl	25dee <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   19b7c:	4b1e      	ldr	r3, [pc, #120]	; (19bf8 <update_ccc+0x114>)
   19b7e:	4599      	cmp	r9, r3
   19b80:	d12f      	bne.n	19be2 <update_ccc+0xfe>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   19b82:	7a20      	ldrb	r0, [r4, #8]
   19b84:	f104 0188 	add.w	r1, r4, #136	; 0x88
   19b88:	f7ff fb16 	bl	191b8 <find_sc_cfg>
	if (!cfg) {
   19b8c:	b348      	cbz	r0, 19be2 <update_ccc+0xfe>
	if (!(cfg->data.start || cfg->data.end)) {
   19b8e:	8902      	ldrh	r2, [r0, #8]
   19b90:	8943      	ldrh	r3, [r0, #10]
   19b92:	ea53 0102 	orrs.w	r1, r3, r2
   19b96:	d024      	beq.n	19be2 <update_ccc+0xfe>
	index = bt_conn_index(conn);
   19b98:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   19b9a:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   19b9c:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   19b9e:	f7fd fded 	bl	1777c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   19ba2:	4916      	ldr	r1, [pc, #88]	; (19bfc <update_ccc+0x118>)
   19ba4:	4a16      	ldr	r2, [pc, #88]	; (19c00 <update_ccc+0x11c>)
   19ba6:	2318      	movs	r3, #24
   19ba8:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   19bac:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   19bae:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   19bb0:	4a14      	ldr	r2, [pc, #80]	; (19c04 <update_ccc+0x120>)
   19bb2:	609a      	str	r2, [r3, #8]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   19bb4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   19bb8:	1d3a      	adds	r2, r7, #4
   19bba:	611a      	str	r2, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   19bbc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   19bc0:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   19bc2:	4620      	mov	r0, r4
	sc_restore_params[index].len = sizeof(sc_range);
   19bc4:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   19bc6:	f7ff fedf 	bl	19988 <bt_gatt_indicate>
   19bca:	b150      	cbz	r0, 19be2 <update_ccc+0xfe>
		LOG_ERR("SC restore indication failed");
   19bcc:	4b0e      	ldr	r3, [pc, #56]	; (19c08 <update_ccc+0x124>)
   19bce:	61fb      	str	r3, [r7, #28]
   19bd0:	4808      	ldr	r0, [pc, #32]	; (19bf4 <update_ccc+0x110>)
   19bd2:	2302      	movs	r3, #2
   19bd4:	f107 0218 	add.w	r2, r7, #24
   19bd8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19bdc:	61bb      	str	r3, [r7, #24]
   19bde:	f00c f998 	bl	25f12 <z_log_msg_static_create.constprop.0>
}
   19be2:	2001      	movs	r0, #1
   19be4:	3724      	adds	r7, #36	; 0x24
   19be6:	46bd      	mov	sp, r7
   19be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19bec:	00019245 	.word	0x00019245
   19bf0:	0002a905 	.word	0x0002a905
   19bf4:	0002816c 	.word	0x0002816c
   19bf8:	2000062c 	.word	0x2000062c
   19bfc:	2000325c 	.word	0x2000325c
   19c00:	000286e8 	.word	0x000286e8
   19c04:	000260b7 	.word	0x000260b7
   19c08:	0002a919 	.word	0x0002a919

00019c0c <gatt_notify>:
{
   19c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19c10:	4614      	mov	r4, r2
   19c12:	b087      	sub	sp, #28
   19c14:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   19c16:	2294      	movs	r2, #148	; 0x94
   19c18:	6861      	ldr	r1, [r4, #4]
{
   19c1a:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   19c1c:	f00c fad9 	bl	261d2 <bt_gatt_check_perm>
   19c20:	b170      	cbz	r0, 19c40 <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   19c22:	4b2b      	ldr	r3, [pc, #172]	; (19cd0 <gatt_notify+0xc4>)
   19c24:	482b      	ldr	r0, [pc, #172]	; (19cd4 <gatt_notify+0xc8>)
   19c26:	9305      	str	r3, [sp, #20]
   19c28:	aa04      	add	r2, sp, #16
   19c2a:	2302      	movs	r3, #2
   19c2c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19c30:	9304      	str	r3, [sp, #16]
   19c32:	f00c f96e 	bl	25f12 <z_log_msg_static_create.constprop.0>
		return -EPERM;
   19c36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19c3a:	b007      	add	sp, #28
   19c3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   19c40:	6861      	ldr	r1, [r4, #4]
   19c42:	2201      	movs	r2, #1
   19c44:	4630      	mov	r0, r6
   19c46:	f00c fafe 	bl	26246 <bt_gatt_is_subscribed>
   19c4a:	b960      	cbnz	r0, 19c66 <gatt_notify+0x5a>
			LOG_WRN("Device is not subscribed to characteristic");
   19c4c:	4b22      	ldr	r3, [pc, #136]	; (19cd8 <gatt_notify+0xcc>)
   19c4e:	4821      	ldr	r0, [pc, #132]	; (19cd4 <gatt_notify+0xc8>)
   19c50:	9305      	str	r3, [sp, #20]
   19c52:	aa04      	add	r2, sp, #16
   19c54:	2302      	movs	r3, #2
   19c56:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19c5a:	9304      	str	r3, [sp, #16]
   19c5c:	f00c f959 	bl	25f12 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   19c60:	f06f 0015 	mvn.w	r0, #21
   19c64:	e7e9      	b.n	19c3a <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   19c66:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   19c68:	211b      	movs	r1, #27
   19c6a:	3202      	adds	r2, #2
   19c6c:	4630      	mov	r0, r6
   19c6e:	f7fe fea1 	bl	189b4 <bt_att_create_pdu>
	if (!buf) {
   19c72:	4605      	mov	r5, r0
   19c74:	b960      	cbnz	r0, 19c90 <gatt_notify+0x84>
		LOG_WRN("No buffer available to send notification");
   19c76:	4b19      	ldr	r3, [pc, #100]	; (19cdc <gatt_notify+0xd0>)
   19c78:	4816      	ldr	r0, [pc, #88]	; (19cd4 <gatt_notify+0xc8>)
   19c7a:	9305      	str	r3, [sp, #20]
   19c7c:	aa04      	add	r2, sp, #16
   19c7e:	2302      	movs	r3, #2
   19c80:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19c84:	9304      	str	r3, [sp, #16]
   19c86:	f00c f944 	bl	25f12 <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   19c8a:	f06f 000b 	mvn.w	r0, #11
   19c8e:	e7d4      	b.n	19c3a <gatt_notify+0x2e>
   19c90:	f100 090c 	add.w	r9, r0, #12
   19c94:	2102      	movs	r1, #2
   19c96:	4648      	mov	r0, r9
   19c98:	f00c ff96 	bl	26bc8 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   19c9c:	4607      	mov	r7, r0
   19c9e:	4648      	mov	r0, r9
   19ca0:	f827 8b02 	strh.w	r8, [r7], #2
   19ca4:	89a1      	ldrh	r1, [r4, #12]
   19ca6:	f00c ff8f 	bl	26bc8 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   19caa:	89a2      	ldrh	r2, [r4, #12]
   19cac:	68a1      	ldr	r1, [r4, #8]
   19cae:	4638      	mov	r0, r7
   19cb0:	f00a fe4d 	bl	2494e <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   19cb4:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   19cb8:	4628      	mov	r0, r5
   19cba:	2301      	movs	r3, #1
   19cbc:	f00c f88d 	bl	25dda <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   19cc0:	4629      	mov	r1, r5
   19cc2:	4630      	mov	r0, r6
}
   19cc4:	b007      	add	sp, #28
   19cc6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   19cca:	f00c b815 	b.w	25cf8 <bt_att_send>
   19cce:	bf00      	nop
   19cd0:	0002a89d 	.word	0x0002a89d
   19cd4:	0002816c 	.word	0x0002816c
   19cd8:	0002a8b3 	.word	0x0002a8b3
   19cdc:	0002a936 	.word	0x0002a936

00019ce0 <bt_gatt_notify_cb>:
{
   19ce0:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19ce2:	4b37      	ldr	r3, [pc, #220]	; (19dc0 <bt_gatt_notify_cb+0xe0>)
   19ce4:	f3bf 8f5b 	dmb	ish
   19ce8:	681b      	ldr	r3, [r3, #0]
   19cea:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   19cee:	075a      	lsls	r2, r3, #29
{
   19cf0:	b08b      	sub	sp, #44	; 0x2c
   19cf2:	4604      	mov	r4, r0
   19cf4:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   19cf6:	d55d      	bpl.n	19db4 <bt_gatt_notify_cb+0xd4>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   19cf8:	b110      	cbz	r0, 19d00 <bt_gatt_notify_cb+0x20>
   19cfa:	7b43      	ldrb	r3, [r0, #13]
   19cfc:	2b07      	cmp	r3, #7
   19cfe:	d15c      	bne.n	19dba <bt_gatt_notify_cb+0xda>
	data.attr = params->attr;
   19d00:	6868      	ldr	r0, [r5, #4]
   19d02:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   19d04:	f7ff fc8c 	bl	19620 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   19d08:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   19d0a:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   19d0e:	b33a      	cbz	r2, 19d60 <bt_gatt_notify_cb+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19d10:	a905      	add	r1, sp, #20
   19d12:	9102      	str	r1, [sp, #8]
   19d14:	492b      	ldr	r1, [pc, #172]	; (19dc4 <bt_gatt_notify_cb+0xe4>)
   19d16:	9101      	str	r1, [sp, #4]
   19d18:	2101      	movs	r1, #1
	found->attr = NULL;
   19d1a:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19d1c:	9100      	str	r1, [sp, #0]
   19d1e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   19d22:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19d24:	f7ff fcac 	bl	19680 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   19d28:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   19d2a:	b91b      	cbnz	r3, 19d34 <bt_gatt_notify_cb+0x54>
			return -ENOENT;
   19d2c:	f06f 0001 	mvn.w	r0, #1
}
   19d30:	b00b      	add	sp, #44	; 0x2c
   19d32:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   19d34:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   19d36:	9b05      	ldr	r3, [sp, #20]
   19d38:	6818      	ldr	r0, [r3, #0]
   19d3a:	2300      	movs	r3, #0
   19d3c:	f88d 3010 	strb.w	r3, [sp, #16]
   19d40:	a904      	add	r1, sp, #16
   19d42:	f642 0303 	movw	r3, #10243	; 0x2803
   19d46:	f8ad 3012 	strh.w	r3, [sp, #18]
   19d4a:	f00a fe59 	bl	24a00 <bt_uuid_cmp>
   19d4e:	b970      	cbnz	r0, 19d6e <bt_gatt_notify_cb+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   19d50:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   19d52:	68c3      	ldr	r3, [r0, #12]
   19d54:	799b      	ldrb	r3, [r3, #6]
   19d56:	06db      	lsls	r3, r3, #27
   19d58:	d405      	bmi.n	19d66 <bt_gatt_notify_cb+0x86>
			return -EINVAL;
   19d5a:	f06f 0015 	mvn.w	r0, #21
   19d5e:	e7e7      	b.n	19d30 <bt_gatt_notify_cb+0x50>
		if (!data.handle) {
   19d60:	2800      	cmp	r0, #0
   19d62:	d1e8      	bne.n	19d36 <bt_gatt_notify_cb+0x56>
   19d64:	e7e2      	b.n	19d2c <bt_gatt_notify_cb+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   19d66:	f00c f9db 	bl	26120 <bt_gatt_attr_value_handle>
   19d6a:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   19d6e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   19d72:	b12c      	cbz	r4, 19d80 <bt_gatt_notify_cb+0xa0>
		return gatt_notify(conn, data.handle, params);
   19d74:	4601      	mov	r1, r0
   19d76:	462a      	mov	r2, r5
   19d78:	4620      	mov	r0, r4
   19d7a:	f7ff ff47 	bl	19c0c <gatt_notify>
   19d7e:	e7d7      	b.n	19d30 <bt_gatt_notify_cb+0x50>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   19d80:	f642 1202 	movw	r2, #10498	; 0x2902
   19d84:	f8ad 2012 	strh.w	r2, [sp, #18]
   19d88:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   19d8a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   19d8e:	9202      	str	r2, [sp, #8]
   19d90:	4a0d      	ldr	r2, [pc, #52]	; (19dc8 <bt_gatt_notify_cb+0xe8>)
	data.err = -ENOTCONN;
   19d92:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   19d94:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   19d96:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   19d9a:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   19d9e:	aa04      	add	r2, sp, #16
   19da0:	4623      	mov	r3, r4
   19da2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   19da6:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   19da8:	f88d 4010 	strb.w	r4, [sp, #16]
   19dac:	f7ff fc68 	bl	19680 <bt_gatt_foreach_attr_type>
	return data.err;
   19db0:	9807      	ldr	r0, [sp, #28]
   19db2:	e7bd      	b.n	19d30 <bt_gatt_notify_cb+0x50>
		return -EAGAIN;
   19db4:	f06f 000a 	mvn.w	r0, #10
   19db8:	e7ba      	b.n	19d30 <bt_gatt_notify_cb+0x50>
		return -ENOTCONN;
   19dba:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19dbe:	e7b7      	b.n	19d30 <bt_gatt_notify_cb+0x50>
   19dc0:	2000045c 	.word	0x2000045c
   19dc4:	00025e31 	.word	0x00025e31
   19dc8:	00019dcd 	.word	0x00019dcd

00019dcc <notify_cb>:
{
   19dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   19dd0:	4b46      	ldr	r3, [pc, #280]	; (19eec <notify_cb+0x120>)
{
   19dd2:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   19dd4:	6882      	ldr	r2, [r0, #8]
   19dd6:	429a      	cmp	r2, r3
{
   19dd8:	b087      	sub	sp, #28
   19dda:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   19ddc:	d136      	bne.n	19e4c <notify_cb+0x80>
	ccc = attr->user_data;
   19dde:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   19de2:	4b43      	ldr	r3, [pc, #268]	; (19ef0 <notify_cb+0x124>)
   19de4:	459a      	cmp	sl, r3
   19de6:	d119      	bne.n	19e1c <notify_cb+0x50>
   19de8:	4c42      	ldr	r4, [pc, #264]	; (19ef4 <notify_cb+0x128>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   19dea:	4f43      	ldr	r7, [pc, #268]	; (19ef8 <notify_cb+0x12c>)
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   19dec:	2600      	movs	r6, #0
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   19dee:	4639      	mov	r1, r7
   19df0:	4620      	mov	r0, r4
   19df2:	f00c f874 	bl	25ede <bt_addr_le_eq>
   19df6:	b978      	cbnz	r0, 19e18 <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   19df8:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   19dfc:	2207      	movs	r2, #7
   19dfe:	4621      	mov	r1, r4
   19e00:	f7fd fe1e 	bl	17a40 <bt_conn_lookup_state_le>
			if (!conn) {
   19e04:	bb38      	cbnz	r0, 19e56 <notify_cb+0x8a>
				sc = (struct sc_data *)data->ind_params->data;
   19e06:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   19e08:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   19e0c:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   19e0e:	4621      	mov	r1, r4
   19e10:	8853      	ldrh	r3, [r2, #2]
   19e12:	8812      	ldrh	r2, [r2, #0]
   19e14:	f7ff fa96 	bl	19344 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   19e18:	340c      	adds	r4, #12
   19e1a:	b1d6      	cbz	r6, 19e52 <notify_cb+0x86>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   19e1c:	f10a 0601 	add.w	r6, sl, #1
   19e20:	f10a 0b15 	add.w	fp, sl, #21
		if (cfg->value != data->type) {
   19e24:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   19e28:	89ab      	ldrh	r3, [r5, #12]
   19e2a:	429a      	cmp	r2, r3
   19e2c:	d10b      	bne.n	19e46 <notify_cb+0x7a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   19e2e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   19e32:	4631      	mov	r1, r6
   19e34:	f7fd fdba 	bl	179ac <bt_conn_lookup_addr_le>
		if (!conn) {
   19e38:	4604      	mov	r4, r0
   19e3a:	b120      	cbz	r0, 19e46 <notify_cb+0x7a>
		if (conn->state != BT_CONN_CONNECTED) {
   19e3c:	7b43      	ldrb	r3, [r0, #13]
   19e3e:	2b07      	cmp	r3, #7
   19e40:	d00c      	beq.n	19e5c <notify_cb+0x90>
			bt_conn_unref(conn);
   19e42:	f00b f9a6 	bl	25192 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   19e46:	360a      	adds	r6, #10
   19e48:	45b3      	cmp	fp, r6
   19e4a:	d1eb      	bne.n	19e24 <notify_cb+0x58>
		return BT_GATT_ITER_CONTINUE;
   19e4c:	f04f 0901 	mov.w	r9, #1
   19e50:	e048      	b.n	19ee4 <notify_cb+0x118>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   19e52:	2601      	movs	r6, #1
   19e54:	e7cb      	b.n	19dee <notify_cb+0x22>
			bt_conn_unref(conn);
   19e56:	f00b f99c 	bl	25192 <bt_conn_unref>
   19e5a:	e7dd      	b.n	19e18 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   19e5c:	f8da 3020 	ldr.w	r3, [sl, #32]
   19e60:	b123      	cbz	r3, 19e6c <notify_cb+0xa0>
   19e62:	4641      	mov	r1, r8
   19e64:	4798      	blx	r3
   19e66:	b908      	cbnz	r0, 19e6c <notify_cb+0xa0>
			bt_conn_unref(conn);
   19e68:	4620      	mov	r0, r4
   19e6a:	e7ea      	b.n	19e42 <notify_cb+0x76>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   19e6c:	2294      	movs	r2, #148	; 0x94
   19e6e:	4641      	mov	r1, r8
   19e70:	4620      	mov	r0, r4
   19e72:	f00c f9ae 	bl	261d2 <bt_gatt_check_perm>
   19e76:	4681      	mov	r9, r0
   19e78:	b150      	cbz	r0, 19e90 <notify_cb+0xc4>
			LOG_WRN("Link is not encrypted");
   19e7a:	4b20      	ldr	r3, [pc, #128]	; (19efc <notify_cb+0x130>)
   19e7c:	9305      	str	r3, [sp, #20]
   19e7e:	4820      	ldr	r0, [pc, #128]	; (19f00 <notify_cb+0x134>)
   19e80:	2302      	movs	r3, #2
   19e82:	aa04      	add	r2, sp, #16
   19e84:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19e88:	9304      	str	r3, [sp, #16]
   19e8a:	f00c f842 	bl	25f12 <z_log_msg_static_create.constprop.0>
			bt_conn_unref(conn);
   19e8e:	e7eb      	b.n	19e68 <notify_cb+0x9c>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   19e90:	89ab      	ldrh	r3, [r5, #12]
   19e92:	2b02      	cmp	r3, #2
   19e94:	d115      	bne.n	19ec2 <notify_cb+0xf6>
   19e96:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   19e9a:	079a      	lsls	r2, r3, #30
   19e9c:	d405      	bmi.n	19eaa <notify_cb+0xde>
		bt_conn_unref(conn);
   19e9e:	4620      	mov	r0, r4
   19ea0:	f00b f977 	bl	25192 <bt_conn_unref>
		data->err = 0;
   19ea4:	2300      	movs	r3, #0
   19ea6:	60ab      	str	r3, [r5, #8]
   19ea8:	e7cd      	b.n	19e46 <notify_cb+0x7a>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   19eaa:	692a      	ldr	r2, [r5, #16]
   19eac:	88a9      	ldrh	r1, [r5, #4]
   19eae:	4620      	mov	r0, r4
   19eb0:	f7ff fce6 	bl	19880 <gatt_indicate>
			if (err == 0) {
   19eb4:	4607      	mov	r7, r0
   19eb6:	b980      	cbnz	r0, 19eda <notify_cb+0x10e>
				data->ind_params->_ref++;
   19eb8:	692a      	ldr	r2, [r5, #16]
   19eba:	7d93      	ldrb	r3, [r2, #22]
   19ebc:	3301      	adds	r3, #1
   19ebe:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   19ec0:	e7ed      	b.n	19e9e <notify_cb+0xd2>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   19ec2:	2b01      	cmp	r3, #1
   19ec4:	d1eb      	bne.n	19e9e <notify_cb+0xd2>
   19ec6:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   19eca:	07db      	lsls	r3, r3, #31
   19ecc:	d5e7      	bpl.n	19e9e <notify_cb+0xd2>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   19ece:	692a      	ldr	r2, [r5, #16]
   19ed0:	88a9      	ldrh	r1, [r5, #4]
   19ed2:	4620      	mov	r0, r4
   19ed4:	f7ff fe9a 	bl	19c0c <gatt_notify>
   19ed8:	4607      	mov	r7, r0
		bt_conn_unref(conn);
   19eda:	4620      	mov	r0, r4
   19edc:	f00b f959 	bl	25192 <bt_conn_unref>
		if (err < 0) {
   19ee0:	2f00      	cmp	r7, #0
   19ee2:	dadf      	bge.n	19ea4 <notify_cb+0xd8>
}
   19ee4:	4648      	mov	r0, r9
   19ee6:	b007      	add	sp, #28
   19ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19eec:	00019245 	.word	0x00019245
   19ef0:	2000062c 	.word	0x2000062c
   19ef4:	20004003 	.word	0x20004003
   19ef8:	0002967b 	.word	0x0002967b
   19efc:	0002a89d 	.word	0x0002a89d
   19f00:	0002816c 	.word	0x0002816c

00019f04 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   19f04:	b590      	push	{r4, r7, lr}
   19f06:	b083      	sub	sp, #12
   19f08:	af00      	add	r7, sp, #0
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   19f0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19f0e:	4a12      	ldr	r2, [pc, #72]	; (19f58 <bt_gatt_connected+0x54>)
	data.conn = conn;
   19f10:	6038      	str	r0, [r7, #0]
{
   19f12:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   19f14:	463b      	mov	r3, r7
	data.sec = BT_SECURITY_L1;
   19f16:	2001      	movs	r0, #1
   19f18:	7138      	strb	r0, [r7, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   19f1a:	f00c f94f 	bl	261bc <bt_gatt_foreach_attr>
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    (conn->role == BT_HCI_ROLE_CENTRAL ||
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
	    bt_conn_get_security(conn) < data.sec) {
   19f1e:	4620      	mov	r0, r4
   19f20:	f00b f9e5 	bl	252ee <bt_conn_get_security>
   19f24:	7939      	ldrb	r1, [r7, #4]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   19f26:	4288      	cmp	r0, r1
   19f28:	d212      	bcs.n	19f50 <bt_gatt_connected+0x4c>
		int err = bt_conn_set_security(conn, data.sec);
   19f2a:	4620      	mov	r0, r4
   19f2c:	f00b f9af 	bl	2528e <bt_conn_set_security>

		if (err) {
   19f30:	b170      	cbz	r0, 19f50 <bt_gatt_connected+0x4c>
			LOG_WRN("Failed to set security for bonded peer (%d)", err);
   19f32:	466c      	mov	r4, sp
   19f34:	b088      	sub	sp, #32
   19f36:	466a      	mov	r2, sp
   19f38:	4b08      	ldr	r3, [pc, #32]	; (19f5c <bt_gatt_connected+0x58>)
   19f3a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19f3e:	2303      	movs	r3, #3
   19f40:	f842 3f10 	str.w	r3, [r2, #16]!
   19f44:	4806      	ldr	r0, [pc, #24]	; (19f60 <bt_gatt_connected+0x5c>)
   19f46:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19f4a:	f00b ffe2 	bl	25f12 <z_log_msg_static_create.constprop.0>
   19f4e:	46a5      	mov	sp, r4
	err = bt_gatt_exchange_mtu(conn, &gatt_exchange_params);
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
}
   19f50:	370c      	adds	r7, #12
   19f52:	46bd      	mov	sp, r7
   19f54:	bd90      	pop	{r4, r7, pc}
   19f56:	bf00      	nop
   19f58:	00019ae5 	.word	0x00019ae5
   19f5c:	0002a95f 	.word	0x0002a95f
   19f60:	0002816c 	.word	0x0002816c

00019f64 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   19f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   19f66:	4b08      	ldr	r3, [pc, #32]	; (19f88 <bt_gatt_att_max_mtu_changed+0x24>)
   19f68:	681c      	ldr	r4, [r3, #0]
   19f6a:	4605      	mov	r5, r0
   19f6c:	460e      	mov	r6, r1
   19f6e:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   19f70:	b14c      	cbz	r4, 19f86 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   19f72:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   19f76:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   19f78:	b11b      	cbz	r3, 19f82 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   19f7a:	463a      	mov	r2, r7
   19f7c:	4631      	mov	r1, r6
   19f7e:	4628      	mov	r0, r5
   19f80:	4798      	blx	r3
	return node->next;
   19f82:	6864      	ldr	r4, [r4, #4]
   19f84:	e7f4      	b.n	19f70 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   19f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19f88:	20003298 	.word	0x20003298

00019f8c <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
   19f8c:	b507      	push	{r0, r1, r2, lr}

#if defined(CONFIG_BT_GATT_AUTO_RESUBSCRIBE)
	add_subscriptions(conn);
#endif	/* CONFIG_BT_GATT_AUTO_RESUBSCRIBE */

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   19f8e:	4a06      	ldr	r2, [pc, #24]	; (19fa8 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   19f90:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   19f92:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   19f94:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   19f96:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   19f9a:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   19f9e:	f00c f90d 	bl	261bc <bt_gatt_foreach_attr>
		 * marked as change-unaware.
		 */
		sc_indicate(0x0001, 0xffff);
	}
#endif	/* CONFIG_BT_SETTINGS && CONFIG_BT_GATT_SERVICE_CHANGED */
}
   19fa2:	b003      	add	sp, #12
   19fa4:	f85d fb04 	ldr.w	pc, [sp], #4
   19fa8:	00019ae5 	.word	0x00019ae5

00019fac <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   19fac:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   19fae:	4603      	mov	r3, r0
   19fb0:	4a0f      	ldr	r2, [pc, #60]	; (19ff0 <bt_gatt_disconnected+0x44>)
{
   19fb2:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   19fb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19fb8:	2001      	movs	r0, #1
   19fba:	f00c f8ff 	bl	261bc <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   19fbe:	4620      	mov	r0, r4
   19fc0:	f7ff f8cc 	bl	1915c <find_cf_cfg>
	if (!cfg) {
   19fc4:	4605      	mov	r5, r0
   19fc6:	b188      	cbz	r0, 19fec <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19fc8:	f104 0688 	add.w	r6, r4, #136	; 0x88
   19fcc:	7a20      	ldrb	r0, [r4, #8]
   19fce:	4631      	mov	r1, r6
   19fd0:	f00a fe76 	bl	24cc0 <bt_addr_le_is_bonded>
   19fd4:	b920      	cbnz	r0, 19fe0 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   19fd6:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   19fd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   19fdc:	f7ff b996 	b.w	1930c <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19fe0:	4631      	mov	r1, r6
   19fe2:	1c68      	adds	r0, r5, #1
}
   19fe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19fe8:	f00b bf90 	b.w	25f0c <bt_addr_le_copy>
}
   19fec:	bd70      	pop	{r4, r5, r6, pc}
   19fee:	bf00      	nop
   19ff0:	000193b1 	.word	0x000193b1

00019ff4 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   19ff4:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   19ff6:	4b05      	ldr	r3, [pc, #20]	; (1a00c <smp_find+0x18>)
{
   19ff8:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   19ffa:	4618      	mov	r0, r3
   19ffc:	f00c f9f7 	bl	263ee <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   1a000:	3b04      	subs	r3, #4
   1a002:	2800      	cmp	r0, #0
}
   1a004:	bf14      	ite	ne
   1a006:	4618      	movne	r0, r3
   1a008:	2000      	moveq	r0, #0
   1a00a:	bd08      	pop	{r3, pc}
   1a00c:	20001f44 	.word	0x20001f44

0001a010 <latch_auth_cb>:
{
   1a010:	b510      	push	{r4, lr}
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   1a012:	4a0c      	ldr	r2, [pc, #48]	; (1a044 <latch_auth_cb+0x34>)
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a014:	6811      	ldr	r1, [r2, #0]
   1a016:	4a0c      	ldr	r2, [pc, #48]	; (1a048 <latch_auth_cb+0x38>)
   1a018:	f3bf 8f5b 	dmb	ish
   1a01c:	f500 73a8 	add.w	r3, r0, #336	; 0x150
   1a020:	e853 4f00 	ldrex	r4, [r3]
   1a024:	4294      	cmp	r4, r2
   1a026:	d104      	bne.n	1a032 <latch_auth_cb+0x22>
   1a028:	e843 1c00 	strex	ip, r1, [r3]
   1a02c:	f1bc 0f00 	cmp.w	ip, #0
   1a030:	d1f6      	bne.n	1a020 <latch_auth_cb+0x10>
   1a032:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a036:	f3bf 8f5b 	dmb	ish
   1a03a:	f8d0 0150 	ldr.w	r0, [r0, #336]	; 0x150
   1a03e:	f3bf 8f5b 	dmb	ish
}
   1a042:	bd10      	pop	{r4, pc}
   1a044:	200031cc 	.word	0x200031cc
   1a048:	20001f40 	.word	0x20001f40

0001a04c <get_io_capa>:
{
   1a04c:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1a04e:	f7ff ffdf 	bl	1a010 <latch_auth_cb>
	if (!smp_auth_cb) {
   1a052:	4603      	mov	r3, r0
   1a054:	b1c8      	cbz	r0, 1a08a <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1a056:	e9d0 1200 	ldrd	r1, r2, [r0]
   1a05a:	b921      	cbnz	r1, 1a066 <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   1a05c:	2a00      	cmp	r2, #0
   1a05e:	bf0c      	ite	eq
   1a060:	2003      	moveq	r0, #3
   1a062:	2002      	movne	r0, #2
   1a064:	e010      	b.n	1a088 <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1a066:	b132      	cbz	r2, 1a076 <get_io_capa+0x2a>
   1a068:	6883      	ldr	r3, [r0, #8]
   1a06a:	b913      	cbnz	r3, 1a072 <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   1a06c:	4b09      	ldr	r3, [pc, #36]	; (1a094 <get_io_capa+0x48>)
   1a06e:	781b      	ldrb	r3, [r3, #0]
   1a070:	b933      	cbnz	r3, 1a080 <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1a072:	2004      	movs	r0, #4
   1a074:	e008      	b.n	1a088 <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   1a076:	4907      	ldr	r1, [pc, #28]	; (1a094 <get_io_capa+0x48>)
   1a078:	7808      	ldrb	r0, [r1, #0]
   1a07a:	b128      	cbz	r0, 1a088 <get_io_capa+0x3c>
   1a07c:	689b      	ldr	r3, [r3, #8]
   1a07e:	b933      	cbnz	r3, 1a08e <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   1a080:	3a00      	subs	r2, #0
   1a082:	bf18      	it	ne
   1a084:	2201      	movne	r2, #1
   1a086:	0050      	lsls	r0, r2, #1
}
   1a088:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1a08a:	2003      	movs	r0, #3
   1a08c:	e7fc      	b.n	1a088 <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   1a08e:	2001      	movs	r0, #1
   1a090:	e7fa      	b.n	1a088 <get_io_capa+0x3c>
   1a092:	bf00      	nop
   1a094:	20004116 	.word	0x20004116

0001a098 <get_auth>:
{
   1a098:	b510      	push	{r4, lr}
	if (sc_supported) {
   1a09a:	4b0c      	ldr	r3, [pc, #48]	; (1a0cc <get_auth+0x34>)
   1a09c:	781b      	ldrb	r3, [r3, #0]
   1a09e:	b17b      	cbz	r3, 1a0c0 <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   1a0a0:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1a0a4:	f7ff ffd2 	bl	1a04c <get_io_capa>
	if (bondable) {
   1a0a8:	4b09      	ldr	r3, [pc, #36]	; (1a0d0 <get_auth+0x38>)
   1a0aa:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1a0ac:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   1a0ae:	bf0c      	ite	eq
   1a0b0:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   1a0b4:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   1a0b8:	b12b      	cbz	r3, 1a0c6 <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   1a0ba:	f044 0001 	orr.w	r0, r4, #1
}
   1a0be:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   1a0c0:	f001 0407 	and.w	r4, r1, #7
   1a0c4:	e7ee      	b.n	1a0a4 <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   1a0c6:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   1a0ca:	e7f8      	b.n	1a0be <get_auth+0x26>
   1a0cc:	20004116 	.word	0x20004116
   1a0d0:	2000085e 	.word	0x2000085e

0001a0d4 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1a0d4:	b530      	push	{r4, r5, lr}
   1a0d6:	b089      	sub	sp, #36	; 0x24
   1a0d8:	4613      	mov	r3, r2
	int err = bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   1a0da:	2200      	movs	r2, #0
   1a0dc:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1a0de:	4604      	mov	r4, r0
   1a0e0:	460d      	mov	r5, r1
	int err = bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   1a0e2:	460a      	mov	r2, r1
   1a0e4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   1a0e8:	2106      	movs	r1, #6
   1a0ea:	f00b f9b9 	bl	25460 <bt_l2cap_send_cb>
	if (err) {
   1a0ee:	b188      	cbz	r0, 1a114 <smp_send.constprop.0+0x40>
		if (err == -ENOBUFS) {
   1a0f0:	3069      	adds	r0, #105	; 0x69
   1a0f2:	d109      	bne.n	1a108 <smp_send.constprop.0+0x34>
			LOG_ERR("Ran out of TX buffers or contexts.");
   1a0f4:	4b0c      	ldr	r3, [pc, #48]	; (1a128 <smp_send.constprop.0+0x54>)
   1a0f6:	9307      	str	r3, [sp, #28]
   1a0f8:	480c      	ldr	r0, [pc, #48]	; (1a12c <smp_send.constprop.0+0x58>)
   1a0fa:	2302      	movs	r3, #2
   1a0fc:	aa06      	add	r2, sp, #24
   1a0fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a102:	9306      	str	r3, [sp, #24]
   1a104:	f00c f9ae 	bl	26464 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1a108:	4628      	mov	r0, r5
}
   1a10a:	b009      	add	sp, #36	; 0x24
   1a10c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   1a110:	f001 be5a 	b.w	1bdc8 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   1a114:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1a118:	2300      	movs	r3, #0
   1a11a:	f504 7090 	add.w	r0, r4, #288	; 0x120
}
   1a11e:	b009      	add	sp, #36	; 0x24
   1a120:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   1a124:	f005 bd2a 	b.w	1fb7c <k_work_reschedule>
   1a128:	0002a658 	.word	0x0002a658
   1a12c:	000281bc 	.word	0x000281bc

0001a130 <bt_smp_pkey_ready.part.0>:
	}

	return 0;
}

static void bt_smp_pkey_ready(const uint8_t *pkey)
   1a130:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("");

	sc_public_key = pkey;

	if (!pkey) {
		LOG_WRN("Public key not available");
   1a132:	4b06      	ldr	r3, [pc, #24]	; (1a14c <bt_smp_pkey_ready.part.0+0x1c>)
   1a134:	9305      	str	r3, [sp, #20]
   1a136:	4806      	ldr	r0, [pc, #24]	; (1a150 <bt_smp_pkey_ready.part.0+0x20>)
   1a138:	2302      	movs	r3, #2
   1a13a:	aa04      	add	r2, sp, #16
   1a13c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a140:	9304      	str	r3, [sp, #16]
   1a142:	f00c f98f 	bl	26464 <z_log_msg_static_create.constprop.0>
		if (err) {
			smp_error(smp, err);
		}
#endif /* CONFIG_BT_PERIPHERAL */
	}
}
   1a146:	b007      	add	sp, #28
   1a148:	f85d fb04 	ldr.w	pc, [sp], #4
   1a14c:	0002a99a 	.word	0x0002a99a
   1a150:	000281bc 	.word	0x000281bc

0001a154 <bt_smp_accept.part.0>:
	} else {
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   1a154:	b580      	push	{r7, lr}
   1a156:	af00      	add	r7, sp, #0
		*chan = &smp->chan.chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   1a158:	b088      	sub	sp, #32
   1a15a:	466a      	mov	r2, sp
   1a15c:	4b07      	ldr	r3, [pc, #28]	; (1a17c <bt_smp_accept.part.0+0x28>)
   1a15e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a162:	2303      	movs	r3, #3
   1a164:	f842 3f10 	str.w	r3, [r2, #16]!
   1a168:	4805      	ldr	r0, [pc, #20]	; (1a180 <bt_smp_accept.part.0+0x2c>)
   1a16a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a16e:	f00c f979 	bl	26464 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   1a172:	f06f 000b 	mvn.w	r0, #11
   1a176:	46bd      	mov	sp, r7
   1a178:	bd80      	pop	{r7, pc}
   1a17a:	bf00      	nop
   1a17c:	0002a9b3 	.word	0x0002a9b3
   1a180:	000281bc 	.word	0x000281bc

0001a184 <bt_smp_accept>:
		if (smp->chan.chan.conn) {
   1a184:	4b06      	ldr	r3, [pc, #24]	; (1a1a0 <bt_smp_accept+0x1c>)
   1a186:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
   1a18a:	b10a      	cbz	r2, 1a190 <bt_smp_accept+0xc>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1a18c:	f7ff bfe2 	b.w	1a154 <bt_smp_accept.part.0>
		smp->chan.chan.ops = &ops;
   1a190:	4804      	ldr	r0, [pc, #16]	; (1a1a4 <bt_smp_accept+0x20>)
   1a192:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
		*chan = &smp->chan.chan;
   1a196:	33ec      	adds	r3, #236	; 0xec
   1a198:	600b      	str	r3, [r1, #0]
}
   1a19a:	4610      	mov	r0, r2
   1a19c:	4770      	bx	lr
   1a19e:	bf00      	nop
   1a1a0:	20001f40 	.word	0x20001f40
   1a1a4:	000287ec 	.word	0x000287ec

0001a1a8 <smp_chan_get.part.0>:
static struct bt_smp *smp_chan_get(struct bt_conn *conn)
   1a1a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to find SMP channel");
   1a1aa:	4b07      	ldr	r3, [pc, #28]	; (1a1c8 <smp_chan_get.part.0+0x20>)
   1a1ac:	9305      	str	r3, [sp, #20]
   1a1ae:	4807      	ldr	r0, [pc, #28]	; (1a1cc <smp_chan_get.part.0+0x24>)
   1a1b0:	2302      	movs	r3, #2
   1a1b2:	aa04      	add	r2, sp, #16
   1a1b4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a1b8:	9304      	str	r3, [sp, #16]
   1a1ba:	f00c f953 	bl	26464 <z_log_msg_static_create.constprop.0>
}
   1a1be:	2000      	movs	r0, #0
   1a1c0:	b007      	add	sp, #28
   1a1c2:	f85d fb04 	ldr.w	pc, [sp], #4
   1a1c6:	bf00      	nop
   1a1c8:	0002a9d8 	.word	0x0002a9d8
   1a1cc:	000281bc 	.word	0x000281bc

0001a1d0 <smp_init>:
{
   1a1d0:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1a1d2:	22ec      	movs	r2, #236	; 0xec
{
   1a1d4:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1a1d6:	2100      	movs	r1, #0
   1a1d8:	f00a fbc4 	bl	24964 <memset>
	if (bt_rand(smp->prnd, 16)) {
   1a1dc:	2110      	movs	r1, #16
   1a1de:	f105 0027 	add.w	r0, r5, #39	; 0x27
   1a1e2:	f003 ffcb 	bl	1e17c <bt_rand>
   1a1e6:	4604      	mov	r4, r0
   1a1e8:	b948      	cbnz	r0, 1a1fe <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1a1ea:	2105      	movs	r1, #5
   1a1ec:	4628      	mov	r0, r5
   1a1ee:	f00c f947 	bl	26480 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1a1f2:	f7fc fe29 	bl	16e48 <bt_pub_key_get>
   1a1f6:	4b03      	ldr	r3, [pc, #12]	; (1a204 <smp_init+0x34>)
   1a1f8:	6018      	str	r0, [r3, #0]
}
   1a1fa:	4620      	mov	r0, r4
   1a1fc:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1a1fe:	2408      	movs	r4, #8
   1a200:	e7fb      	b.n	1a1fa <smp_init+0x2a>
   1a202:	bf00      	nop
   1a204:	200032a0 	.word	0x200032a0

0001a208 <smp_dhkey_generate>:
{
   1a208:	b530      	push	{r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1a20a:	1d05      	adds	r5, r0, #4
{
   1a20c:	b087      	sub	sp, #28
   1a20e:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1a210:	2108      	movs	r1, #8
   1a212:	4628      	mov	r0, r5
   1a214:	f00c f934 	bl	26480 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1a218:	490b      	ldr	r1, [pc, #44]	; (1a248 <smp_dhkey_generate+0x40>)
   1a21a:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1a21e:	f7fc fe23 	bl	16e68 <bt_dh_key_gen>
	if (err) {
   1a222:	b170      	cbz	r0, 1a242 <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1a224:	2108      	movs	r1, #8
   1a226:	4628      	mov	r0, r5
   1a228:	f00c f90b 	bl	26442 <atomic_clear_bit>
		LOG_ERR("Failed to generate DHKey");
   1a22c:	4b07      	ldr	r3, [pc, #28]	; (1a24c <smp_dhkey_generate+0x44>)
   1a22e:	4808      	ldr	r0, [pc, #32]	; (1a250 <smp_dhkey_generate+0x48>)
   1a230:	9305      	str	r3, [sp, #20]
   1a232:	aa04      	add	r2, sp, #16
   1a234:	2302      	movs	r3, #2
   1a236:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a23a:	9304      	str	r3, [sp, #16]
   1a23c:	f00c f912 	bl	26464 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1a240:	2008      	movs	r0, #8
}
   1a242:	b007      	add	sp, #28
   1a244:	bd30      	pop	{r4, r5, pc}
   1a246:	bf00      	nop
   1a248:	00026861 	.word	0x00026861
   1a24c:	0002a9f3 	.word	0x0002a9f3
   1a250:	000281bc 	.word	0x000281bc

0001a254 <smp_ident_info>:
{
   1a254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a256:	4604      	mov	r4, r0
   1a258:	af00      	add	r7, sp, #0
   1a25a:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1a25c:	3004      	adds	r0, #4
   1a25e:	210d      	movs	r1, #13
   1a260:	f00c f8c5 	bl	263ee <atomic_test_bit>
   1a264:	b338      	cbz	r0, 1a2b6 <smp_ident_info+0x62>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1a266:	68de      	ldr	r6, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   1a268:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1a26c:	f103 0588 	add.w	r5, r3, #136	; 0x88
   1a270:	7a19      	ldrb	r1, [r3, #8]
   1a272:	462a      	mov	r2, r5
   1a274:	2002      	movs	r0, #2
   1a276:	f00c fb7d 	bl	26974 <bt_keys_get_type>
		if (!keys) {
   1a27a:	b9b8      	cbnz	r0, 1a2ac <smp_ident_info+0x58>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1a27c:	4628      	mov	r0, r5
   1a27e:	f7fa f987 	bl	14590 <bt_addr_le_str>
   1a282:	466c      	mov	r4, sp
   1a284:	b088      	sub	sp, #32
   1a286:	466a      	mov	r2, sp
   1a288:	4b0e      	ldr	r3, [pc, #56]	; (1a2c4 <smp_ident_info+0x70>)
   1a28a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a28e:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a292:	8393      	strh	r3, [r2, #28]
   1a294:	4b0c      	ldr	r3, [pc, #48]	; (1a2c8 <smp_ident_info+0x74>)
   1a296:	480d      	ldr	r0, [pc, #52]	; (1a2cc <smp_ident_info+0x78>)
   1a298:	f842 3f10 	str.w	r3, [r2, #16]!
   1a29c:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1a2a0:	f00c f8e0 	bl	26464 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1a2a4:	2008      	movs	r0, #8
   1a2a6:	46a5      	mov	sp, r4
}
   1a2a8:	46bd      	mov	sp, r7
   1a2aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->irk.val, req->irk, 16);
   1a2ac:	2210      	movs	r2, #16
   1a2ae:	4631      	mov	r1, r6
   1a2b0:	302a      	adds	r0, #42	; 0x2a
   1a2b2:	f00a fb4c 	bl	2494e <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1a2b6:	4620      	mov	r0, r4
   1a2b8:	2109      	movs	r1, #9
   1a2ba:	f00c f8e1 	bl	26480 <atomic_set_bit>
	return 0;
   1a2be:	2000      	movs	r0, #0
   1a2c0:	e7f2      	b.n	1a2a8 <smp_ident_info+0x54>
   1a2c2:	bf00      	nop
   1a2c4:	0002aa0c 	.word	0x0002aa0c
   1a2c8:	01000003 	.word	0x01000003
   1a2cc:	000281bc 	.word	0x000281bc

0001a2d0 <smp_encrypt_info>:
{
   1a2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a2d2:	4604      	mov	r4, r0
   1a2d4:	af00      	add	r7, sp, #0
   1a2d6:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1a2d8:	3004      	adds	r0, #4
   1a2da:	210d      	movs	r1, #13
   1a2dc:	f00c f887 	bl	263ee <atomic_test_bit>
   1a2e0:	b338      	cbz	r0, 1a332 <smp_encrypt_info+0x62>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1a2e2:	68de      	ldr	r6, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   1a2e4:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1a2e8:	f103 0588 	add.w	r5, r3, #136	; 0x88
   1a2ec:	7a19      	ldrb	r1, [r3, #8]
   1a2ee:	462a      	mov	r2, r5
   1a2f0:	2004      	movs	r0, #4
   1a2f2:	f00c fb3f 	bl	26974 <bt_keys_get_type>
		if (!keys) {
   1a2f6:	b9b8      	cbnz	r0, 1a328 <smp_encrypt_info+0x58>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1a2f8:	4628      	mov	r0, r5
   1a2fa:	f7fa f949 	bl	14590 <bt_addr_le_str>
   1a2fe:	466c      	mov	r4, sp
   1a300:	b088      	sub	sp, #32
   1a302:	466a      	mov	r2, sp
   1a304:	4b0e      	ldr	r3, [pc, #56]	; (1a340 <smp_encrypt_info+0x70>)
   1a306:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a30a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1a30e:	8393      	strh	r3, [r2, #28]
   1a310:	4b0c      	ldr	r3, [pc, #48]	; (1a344 <smp_encrypt_info+0x74>)
   1a312:	480d      	ldr	r0, [pc, #52]	; (1a348 <smp_encrypt_info+0x78>)
   1a314:	f842 3f10 	str.w	r3, [r2, #16]!
   1a318:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1a31c:	f00c f8a2 	bl	26464 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1a320:	2008      	movs	r0, #8
   1a322:	46a5      	mov	sp, r4
}
   1a324:	46bd      	mov	sp, r7
   1a326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   1a328:	2210      	movs	r2, #16
   1a32a:	4631      	mov	r1, r6
   1a32c:	301a      	adds	r0, #26
   1a32e:	f00a fb0e 	bl	2494e <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   1a332:	4620      	mov	r0, r4
   1a334:	2107      	movs	r1, #7
   1a336:	f00c f8a3 	bl	26480 <atomic_set_bit>
	return 0;
   1a33a:	2000      	movs	r0, #0
   1a33c:	e7f2      	b.n	1a324 <smp_encrypt_info+0x54>
   1a33e:	bf00      	nop
   1a340:	0002aa0c 	.word	0x0002aa0c
   1a344:	01000003 	.word	0x01000003
   1a348:	000281bc 	.word	0x000281bc

0001a34c <smp_send_pairing_confirm>:
{
   1a34c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a34e:	b083      	sub	sp, #12
	switch (smp->method) {
   1a350:	7a04      	ldrb	r4, [r0, #8]
   1a352:	2c02      	cmp	r4, #2
{
   1a354:	af02      	add	r7, sp, #8
   1a356:	4605      	mov	r5, r0
	switch (smp->method) {
   1a358:	d823      	bhi.n	1a3a2 <smp_send_pairing_confirm+0x56>
   1a35a:	b144      	cbz	r4, 1a36e <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1a35c:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   1a360:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1a364:	40dc      	lsrs	r4, r3
   1a366:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1a36a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1a36e:	2103      	movs	r1, #3
   1a370:	4628      	mov	r0, r5
   1a372:	f00c f899 	bl	264a8 <smp_create_pdu.constprop.0>
	if (!buf) {
   1a376:	4606      	mov	r6, r0
   1a378:	b320      	cbz	r0, 1a3c4 <smp_send_pairing_confirm+0x78>
   1a37a:	2110      	movs	r1, #16
   1a37c:	300c      	adds	r0, #12
   1a37e:	f00c fc23 	bl	26bc8 <net_buf_simple_add>
	if (bt_crypto_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1a382:	9000      	str	r0, [sp, #0]
   1a384:	4818      	ldr	r0, [pc, #96]	; (1a3e8 <smp_send_pairing_confirm+0x9c>)
   1a386:	4623      	mov	r3, r4
   1a388:	6800      	ldr	r0, [r0, #0]
   1a38a:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1a38e:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1a392:	f00c fb47 	bl	26a24 <bt_crypto_f4>
   1a396:	4604      	mov	r4, r0
   1a398:	b1d0      	cbz	r0, 1a3d0 <smp_send_pairing_confirm+0x84>
		net_buf_unref(buf);
   1a39a:	4630      	mov	r0, r6
   1a39c:	f001 fd14 	bl	1bdc8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1a3a0:	e010      	b.n	1a3c4 <smp_send_pairing_confirm+0x78>
	switch (smp->method) {
   1a3a2:	2c03      	cmp	r4, #3
   1a3a4:	d012      	beq.n	1a3cc <smp_send_pairing_confirm+0x80>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1a3a6:	466d      	mov	r5, sp
   1a3a8:	b088      	sub	sp, #32
   1a3aa:	aa02      	add	r2, sp, #8
   1a3ac:	4b0f      	ldr	r3, [pc, #60]	; (1a3ec <smp_send_pairing_confirm+0xa0>)
   1a3ae:	4810      	ldr	r0, [pc, #64]	; (1a3f0 <smp_send_pairing_confirm+0xa4>)
	switch (smp->method) {
   1a3b0:	e9c2 3405 	strd	r3, r4, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1a3b4:	2303      	movs	r3, #3
   1a3b6:	f842 3f10 	str.w	r3, [r2, #16]!
   1a3ba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a3be:	f00c f851 	bl	26464 <z_log_msg_static_create.constprop.0>
   1a3c2:	46ad      	mov	sp, r5
		return BT_SMP_ERR_UNSPECIFIED;
   1a3c4:	2008      	movs	r0, #8
}
   1a3c6:	3704      	adds	r7, #4
   1a3c8:	46bd      	mov	sp, r7
   1a3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (smp->method) {
   1a3cc:	2400      	movs	r4, #0
   1a3ce:	e7ce      	b.n	1a36e <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
   1a3d0:	4602      	mov	r2, r0
   1a3d2:	4631      	mov	r1, r6
   1a3d4:	4628      	mov	r0, r5
   1a3d6:	f7ff fe7d 	bl	1a0d4 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1a3da:	1d28      	adds	r0, r5, #4
   1a3dc:	4621      	mov	r1, r4
   1a3de:	f00c f830 	bl	26442 <atomic_clear_bit>
	return 0;
   1a3e2:	4620      	mov	r0, r4
   1a3e4:	e7ef      	b.n	1a3c6 <smp_send_pairing_confirm+0x7a>
   1a3e6:	bf00      	nop
   1a3e8:	200032a0 	.word	0x200032a0
   1a3ec:	0002aa26 	.word	0x0002aa26
   1a3f0:	000281bc 	.word	0x000281bc

0001a3f4 <smp_public_key_periph>:
{
   1a3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a3f8:	b086      	sub	sp, #24
   1a3fa:	af00      	add	r7, sp, #0
   1a3fc:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1a3fe:	f7ff fe07 	bl	1a010 <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1a402:	1d26      	adds	r6, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1a404:	4680      	mov	r8, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1a406:	210e      	movs	r1, #14
   1a408:	4630      	mov	r0, r6
   1a40a:	f00b fff0 	bl	263ee <atomic_test_bit>
   1a40e:	b9a0      	cbnz	r0, 1a43a <smp_public_key_periph+0x46>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   1a410:	4b52      	ldr	r3, [pc, #328]	; (1a55c <smp_public_key_periph+0x168>)
   1a412:	2220      	movs	r2, #32
   1a414:	6819      	ldr	r1, [r3, #0]
   1a416:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1a41a:	f00a fa71 	bl	24900 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1a41e:	b960      	cbnz	r0, 1a43a <smp_public_key_periph+0x46>
		LOG_WRN("Remote public key rejected");
   1a420:	4b4f      	ldr	r3, [pc, #316]	; (1a560 <smp_public_key_periph+0x16c>)
   1a422:	617b      	str	r3, [r7, #20]
   1a424:	484f      	ldr	r0, [pc, #316]	; (1a564 <smp_public_key_periph+0x170>)
   1a426:	2302      	movs	r3, #2
   1a428:	f107 0210 	add.w	r2, r7, #16
   1a42c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a430:	613b      	str	r3, [r7, #16]
   1a432:	f00c f817 	bl	26464 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1a436:	2008      	movs	r0, #8
   1a438:	e02f      	b.n	1a49a <smp_public_key_periph+0xa6>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1a43a:	210c      	movs	r1, #12
   1a43c:	4620      	mov	r0, r4
   1a43e:	f00c f833 	bl	264a8 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1a442:	4605      	mov	r5, r0
   1a444:	2800      	cmp	r0, #0
   1a446:	d0f6      	beq.n	1a436 <smp_public_key_periph+0x42>
   1a448:	2140      	movs	r1, #64	; 0x40
   1a44a:	300c      	adds	r0, #12
   1a44c:	f00c fbbc 	bl	26bc8 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1a450:	f8df a108 	ldr.w	sl, [pc, #264]	; 1a55c <smp_public_key_periph+0x168>
   1a454:	2220      	movs	r2, #32
   1a456:	f8da 1000 	ldr.w	r1, [sl]
   1a45a:	4681      	mov	r9, r0
   1a45c:	f00a fa77 	bl	2494e <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   1a460:	f8da 1000 	ldr.w	r1, [sl]
   1a464:	2220      	movs	r2, #32
   1a466:	4411      	add	r1, r2
   1a468:	eb09 0002 	add.w	r0, r9, r2
   1a46c:	f00a fa6f 	bl	2494e <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1a470:	2200      	movs	r2, #0
   1a472:	4629      	mov	r1, r5
   1a474:	4620      	mov	r0, r4
   1a476:	f7ff fe2d 	bl	1a0d4 <smp_send.constprop.0>
	switch (smp->method) {
   1a47a:	7a23      	ldrb	r3, [r4, #8]
   1a47c:	2b05      	cmp	r3, #5
   1a47e:	d85b      	bhi.n	1a538 <smp_public_key_periph+0x144>
   1a480:	e8df f003 	tbb	[pc, r3]
   1a484:	030f3b03 	.word	0x030f3b03
   1a488:	575a      	.short	0x575a
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1a48a:	2104      	movs	r1, #4
   1a48c:	4620      	mov	r0, r4
   1a48e:	f00b fff7 	bl	26480 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   1a492:	f7ff ff5b 	bl	1a34c <smp_send_pairing_confirm>
		if (err) {
   1a496:	2800      	cmp	r0, #0
   1a498:	d03f      	beq.n	1a51a <smp_public_key_periph+0x126>
}
   1a49a:	3718      	adds	r7, #24
   1a49c:	46bd      	mov	sp, r7
   1a49e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1a4a2:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1a4a4:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1a4a8:	f7ff fdb2 	bl	1a010 <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1a4ac:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1a4ae:	4605      	mov	r5, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1a4b0:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1a4b4:	f003 fe62 	bl	1e17c <bt_rand>
   1a4b8:	2800      	cmp	r0, #0
   1a4ba:	d1bc      	bne.n	1a436 <smp_public_key_periph+0x42>
		smp->passkey %= 1000000;
   1a4bc:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1a4c0:	4a29      	ldr	r2, [pc, #164]	; (1a568 <smp_public_key_periph+0x174>)
   1a4c2:	fbb3 f1f2 	udiv	r1, r3, r2
   1a4c6:	fb02 3311 	mls	r3, r2, r1, r3
   1a4ca:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	smp->passkey_round = 0U;
   1a4ce:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1a4d2:	b155      	cbz	r5, 1a4ea <smp_public_key_periph+0xf6>
   1a4d4:	682b      	ldr	r3, [r5, #0]
   1a4d6:	b143      	cbz	r3, 1a4ea <smp_public_key_periph+0xf6>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1a4d8:	210b      	movs	r1, #11
   1a4da:	4630      	mov	r0, r6
   1a4dc:	f00b ffd0 	bl	26480 <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   1a4e0:	682b      	ldr	r3, [r5, #0]
   1a4e2:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1a4e6:	4640      	mov	r0, r8
   1a4e8:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1a4ea:	2103      	movs	r1, #3
   1a4ec:	4620      	mov	r0, r4
   1a4ee:	f00b ffc7 	bl	26480 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1a4f2:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1a4f4:	f00b ffc4 	bl	26480 <atomic_set_bit>
		break;
   1a4f8:	e00f      	b.n	1a51a <smp_public_key_periph+0x126>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1a4fa:	4620      	mov	r0, r4
   1a4fc:	2103      	movs	r1, #3
   1a4fe:	f00b ffbf 	bl	26480 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1a502:	210e      	movs	r1, #14
   1a504:	f00b ffbc 	bl	26480 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1a508:	4630      	mov	r0, r6
   1a50a:	210a      	movs	r1, #10
   1a50c:	f00b ffb8 	bl	26480 <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   1a510:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1a514:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1a518:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1a51a:	4630      	mov	r0, r6
   1a51c:	2107      	movs	r1, #7
   1a51e:	f00b ffaf 	bl	26480 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1a522:	2008      	movs	r0, #8
   1a524:	f7ff fd66 	bl	19ff4 <smp_find>
   1a528:	b9b0      	cbnz	r0, 1a558 <smp_public_key_periph+0x164>
		return smp_dhkey_generate(smp);
   1a52a:	4620      	mov	r0, r4
   1a52c:	f7ff fe6c 	bl	1a208 <smp_dhkey_generate>
   1a530:	e7b3      	b.n	1a49a <smp_public_key_periph+0xa6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1a532:	2104      	movs	r1, #4
   1a534:	4620      	mov	r0, r4
   1a536:	e7dd      	b.n	1a4f4 <smp_public_key_periph+0x100>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1a538:	466c      	mov	r4, sp
   1a53a:	b088      	sub	sp, #32
   1a53c:	466a      	mov	r2, sp
   1a53e:	490b      	ldr	r1, [pc, #44]	; (1a56c <smp_public_key_periph+0x178>)
   1a540:	4808      	ldr	r0, [pc, #32]	; (1a564 <smp_public_key_periph+0x170>)
	switch (smp->method) {
   1a542:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1a546:	2303      	movs	r3, #3
   1a548:	f842 3f10 	str.w	r3, [r2, #16]!
   1a54c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a550:	f00b ff88 	bl	26464 <z_log_msg_static_create.constprop.0>
   1a554:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1a556:	e76e      	b.n	1a436 <smp_public_key_periph+0x42>
	return 0;
   1a558:	2000      	movs	r0, #0
   1a55a:	e79e      	b.n	1a49a <smp_public_key_periph+0xa6>
   1a55c:	200032a0 	.word	0x200032a0
   1a560:	0002aa42 	.word	0x0002aa42
   1a564:	000281bc 	.word	0x000281bc
   1a568:	000f4240 	.word	0x000f4240
   1a56c:	0002aa26 	.word	0x0002aa26

0001a570 <smp_public_key>:
{
   1a570:	b570      	push	{r4, r5, r6, lr}
   1a572:	460d      	mov	r5, r1
   1a574:	b086      	sub	sp, #24
   1a576:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1a578:	f7ff fd4a 	bl	1a010 <latch_auth_cb>
	struct bt_smp_public_key *req = (void *)buf->data;
   1a57c:	68ee      	ldr	r6, [r5, #12]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1a57e:	f104 0557 	add.w	r5, r4, #87	; 0x57
   1a582:	2220      	movs	r2, #32
   1a584:	4631      	mov	r1, r6
   1a586:	4628      	mov	r0, r5
   1a588:	f00a f9e1 	bl	2494e <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   1a58c:	2220      	movs	r2, #32
   1a58e:	18b1      	adds	r1, r6, r2
   1a590:	f104 0077 	add.w	r0, r4, #119	; 0x77
   1a594:	f00a f9db 	bl	2494e <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1a598:	4628      	mov	r0, r5
   1a59a:	f7fc fbb3 	bl	16d04 <bt_pub_key_is_debug>
   1a59e:	b940      	cbnz	r0, 1a5b2 <smp_public_key+0x42>
	if (!sc_public_key) {
   1a5a0:	4b1b      	ldr	r3, [pc, #108]	; (1a610 <smp_public_key+0xa0>)
   1a5a2:	681d      	ldr	r5, [r3, #0]
   1a5a4:	bb75      	cbnz	r5, 1a604 <smp_public_key+0x94>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1a5a6:	1d20      	adds	r0, r4, #4
   1a5a8:	2106      	movs	r1, #6
   1a5aa:	f00b ff69 	bl	26480 <atomic_set_bit>
	return 0;
   1a5ae:	4628      	mov	r0, r5
		return 0;
   1a5b0:	e026      	b.n	1a600 <smp_public_key+0x90>
		LOG_INF("Remote is using Debug Public key");
   1a5b2:	4b18      	ldr	r3, [pc, #96]	; (1a614 <smp_public_key+0xa4>)
   1a5b4:	4818      	ldr	r0, [pc, #96]	; (1a618 <smp_public_key+0xa8>)
   1a5b6:	9305      	str	r3, [sp, #20]
   1a5b8:	aa04      	add	r2, sp, #16
   1a5ba:	2302      	movs	r3, #2
   1a5bc:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   1a5c0:	9304      	str	r3, [sp, #16]
   1a5c2:	f00b ff4f 	bl	26464 <z_log_msg_static_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1a5c6:	210e      	movs	r1, #14
   1a5c8:	1d20      	adds	r0, r4, #4
   1a5ca:	f00b ff59 	bl	26480 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1a5ce:	f8d4 50ec 	ldr.w	r5, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   1a5d2:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   1a5d6:	b933      	cbnz	r3, 1a5e6 <smp_public_key+0x76>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1a5d8:	7a28      	ldrb	r0, [r5, #8]
   1a5da:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1a5de:	f001 f9e9 	bl	1b9b4 <bt_keys_get_addr>
   1a5e2:	f8c5 00b8 	str.w	r0, [r5, #184]	; 0xb8
	if (!conn->le.keys ||
   1a5e6:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   1a5ea:	2b00      	cmp	r3, #0
   1a5ec:	d0d8      	beq.n	1a5a0 <smp_public_key+0x30>
   1a5ee:	89da      	ldrh	r2, [r3, #14]
   1a5f0:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1a5f4:	2a00      	cmp	r2, #0
   1a5f6:	d0d3      	beq.n	1a5a0 <smp_public_key+0x30>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1a5f8:	7b5b      	ldrb	r3, [r3, #13]
   1a5fa:	079b      	lsls	r3, r3, #30
   1a5fc:	d4d0      	bmi.n	1a5a0 <smp_public_key+0x30>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1a5fe:	2003      	movs	r0, #3
}
   1a600:	b006      	add	sp, #24
   1a602:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_periph(smp);
   1a604:	4620      	mov	r0, r4
}
   1a606:	b006      	add	sp, #24
   1a608:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_periph(smp);
   1a60c:	f7ff bef2 	b.w	1a3f4 <smp_public_key_periph>
   1a610:	200032a0 	.word	0x200032a0
   1a614:	0002aa5d 	.word	0x0002aa5d
   1a618:	000281bc 	.word	0x000281bc

0001a61c <smp_pairing_req>:
{
   1a61c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a620:	460d      	mov	r5, r1
   1a622:	b087      	sub	sp, #28
   1a624:	af00      	add	r7, sp, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   1a626:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
{
   1a62a:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1a62c:	f7ff fcf0 	bl	1a010 <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   1a630:	f8d5 900c 	ldr.w	r9, [r5, #12]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1a634:	f899 3003 	ldrb.w	r3, [r9, #3]
   1a638:	3b07      	subs	r3, #7
   1a63a:	2b09      	cmp	r3, #9
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1a63c:	4680      	mov	r8, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1a63e:	d904      	bls.n	1a64a <smp_pairing_req+0x2e>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1a640:	2006      	movs	r0, #6
}
   1a642:	371c      	adds	r7, #28
   1a644:	46bd      	mov	sp, r7
   1a646:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   1a64a:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
   1a64e:	b15b      	cbz	r3, 1a668 <smp_pairing_req+0x4c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1a650:	1d25      	adds	r5, r4, #4
   1a652:	210f      	movs	r1, #15
   1a654:	4628      	mov	r0, r5
   1a656:	f00b feca 	bl	263ee <atomic_test_bit>
   1a65a:	b980      	cbnz	r0, 1a67e <smp_pairing_req+0x62>
		int ret = smp_init(smp);
   1a65c:	4620      	mov	r0, r4
   1a65e:	f7ff fdb7 	bl	1a1d0 <smp_init>
		if (ret) {
   1a662:	b160      	cbz	r0, 1a67e <smp_pairing_req+0x62>
			return ret;
   1a664:	b2c0      	uxtb	r0, r0
   1a666:	e7ec      	b.n	1a642 <smp_pairing_req+0x26>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1a668:	7a30      	ldrb	r0, [r6, #8]
   1a66a:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1a66e:	f001 f9a1 	bl	1b9b4 <bt_keys_get_addr>
   1a672:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
		if (!conn->le.keys) {
   1a676:	2800      	cmp	r0, #0
   1a678:	d1ea      	bne.n	1a650 <smp_pairing_req+0x34>
			return BT_SMP_ERR_UNSPECIFIED;
   1a67a:	2008      	movs	r0, #8
   1a67c:	e7e1      	b.n	1a642 <smp_pairing_req+0x26>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1a67e:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   1a680:	2206      	movs	r2, #6
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1a682:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   1a684:	4649      	mov	r1, r9
   1a686:	f104 000a 	add.w	r0, r4, #10
   1a68a:	f00a f960 	bl	2494e <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1a68e:	2302      	movs	r3, #2
   1a690:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   1a692:	f899 1002 	ldrb.w	r1, [r9, #2]
   1a696:	4620      	mov	r0, r4
   1a698:	f7ff fcfe 	bl	1a098 <get_auth>
   1a69c:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   1a69e:	4620      	mov	r0, r4
   1a6a0:	f7ff fcd4 	bl	1a04c <get_io_capa>
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1a6a4:	2310      	movs	r3, #16
	rsp->io_capability = get_io_capa(smp);
   1a6a6:	7460      	strb	r0, [r4, #17]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1a6a8:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   1a6aa:	f899 3004 	ldrb.w	r3, [r9, #4]
   1a6ae:	f003 0303 	and.w	r3, r3, #3
   1a6b2:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1a6b4:	f899 3005 	ldrb.w	r3, [r9, #5]
   1a6b8:	f003 0301 	and.w	r3, r3, #1
   1a6bc:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1a6be:	7ce3      	ldrb	r3, [r4, #19]
   1a6c0:	071b      	lsls	r3, r3, #28
   1a6c2:	d50d      	bpl.n	1a6e0 <smp_pairing_req+0xc4>
   1a6c4:	f899 3002 	ldrb.w	r3, [r9, #2]
   1a6c8:	0718      	lsls	r0, r3, #28
   1a6ca:	d509      	bpl.n	1a6e0 <smp_pairing_req+0xc4>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1a6cc:	2105      	movs	r1, #5
   1a6ce:	4628      	mov	r0, r5
   1a6d0:	f00b fed6 	bl	26480 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   1a6d4:	7d63      	ldrb	r3, [r4, #21]
   1a6d6:	f003 0302 	and.w	r3, r3, #2
   1a6da:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   1a6dc:	2300      	movs	r3, #0
   1a6de:	75a3      	strb	r3, [r4, #22]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a6e0:	2105      	movs	r1, #5
   1a6e2:	4628      	mov	r0, r5
   1a6e4:	f00b fe83 	bl	263ee <atomic_test_bit>
   1a6e8:	2800      	cmp	r0, #0
   1a6ea:	d051      	beq.n	1a790 <smp_pairing_req+0x174>
		rsp->oob_flag = sc_oobd_present ? BT_SMP_OOB_PRESENT :
   1a6ec:	4baa      	ldr	r3, [pc, #680]	; (1a998 <smp_pairing_req+0x37c>)
		rsp->oob_flag = legacy_oobd_present ? BT_SMP_OOB_PRESENT :
   1a6ee:	781b      	ldrb	r3, [r3, #0]
   1a6f0:	74a3      	strb	r3, [r4, #18]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1a6f2:	7ce3      	ldrb	r3, [r4, #19]
   1a6f4:	0699      	lsls	r1, r3, #26
   1a6f6:	d507      	bpl.n	1a708 <smp_pairing_req+0xec>
   1a6f8:	f899 3002 	ldrb.w	r3, [r9, #2]
   1a6fc:	069a      	lsls	r2, r3, #26
   1a6fe:	d503      	bpl.n	1a708 <smp_pairing_req+0xec>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1a700:	2114      	movs	r1, #20
   1a702:	4628      	mov	r0, r5
   1a704:	f00b febc 	bl	26480 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1a708:	7ce3      	ldrb	r3, [r4, #19]
   1a70a:	07db      	lsls	r3, r3, #31
   1a70c:	d542      	bpl.n	1a794 <smp_pairing_req+0x178>
   1a70e:	f899 3002 	ldrb.w	r3, [r9, #2]
   1a712:	07d8      	lsls	r0, r3, #31
   1a714:	d53e      	bpl.n	1a794 <smp_pairing_req+0x178>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1a716:	210d      	movs	r1, #13
   1a718:	4628      	mov	r0, r5
   1a71a:	f00b feb1 	bl	26480 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   1a71e:	7da3      	ldrb	r3, [r4, #22]
   1a720:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   1a724:	7d63      	ldrb	r3, [r4, #21]
   1a726:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1a72a:	2103      	movs	r1, #3
   1a72c:	4628      	mov	r0, r5
   1a72e:	f00b fea7 	bl	26480 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a732:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   1a734:	f899 9000 	ldrb.w	r9, [r9]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a738:	f00b fe59 	bl	263ee <atomic_test_bit>
   1a73c:	bb70      	cbnz	r0, 1a79c <smp_pairing_req+0x180>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1a73e:	f1b9 0f04 	cmp.w	r9, #4
   1a742:	d84b      	bhi.n	1a7dc <smp_pairing_req+0x1c0>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1a744:	7ae3      	ldrb	r3, [r4, #11]
   1a746:	7ca2      	ldrb	r2, [r4, #18]
   1a748:	4013      	ands	r3, r2
   1a74a:	07d9      	lsls	r1, r3, #31
   1a74c:	d444      	bmi.n	1a7d8 <smp_pairing_req+0x1bc>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1a74e:	7b21      	ldrb	r1, [r4, #12]
   1a750:	7ce3      	ldrb	r3, [r4, #19]
   1a752:	4319      	orrs	r1, r3
   1a754:	f011 0104 	ands.w	r1, r1, #4
   1a758:	d011      	beq.n	1a77e <smp_pairing_req+0x162>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   1a75a:	4620      	mov	r0, r4
   1a75c:	f7ff fc76 	bl	1a04c <get_io_capa>
   1a760:	4b8e      	ldr	r3, [pc, #568]	; (1a99c <smp_pairing_req+0x380>)
   1a762:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   1a766:	4499      	add	r9, r3
   1a768:	f819 1000 	ldrb.w	r1, [r9, r0]
	if (method == PASSKEY_ROLE) {
   1a76c:	2904      	cmp	r1, #4
   1a76e:	d106      	bne.n	1a77e <smp_pairing_req+0x162>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1a770:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1a774:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
   1a776:	2b00      	cmp	r3, #0
   1a778:	bf14      	ite	ne
   1a77a:	2101      	movne	r1, #1
   1a77c:	2102      	moveq	r1, #2
	smp->method = get_pair_method(smp, req->io_capability);
   1a77e:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1a780:	f8d6 10b8 	ldr.w	r1, [r6, #184]	; 0xb8
   1a784:	4620      	mov	r0, r4
   1a786:	f00b fe3b 	bl	26400 <update_keys_check>
   1a78a:	bb48      	cbnz	r0, 1a7e0 <smp_pairing_req+0x1c4>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1a78c:	2003      	movs	r0, #3
   1a78e:	e758      	b.n	1a642 <smp_pairing_req+0x26>
		rsp->oob_flag = legacy_oobd_present ? BT_SMP_OOB_PRESENT :
   1a790:	4b83      	ldr	r3, [pc, #524]	; (1a9a0 <smp_pairing_req+0x384>)
   1a792:	e7ac      	b.n	1a6ee <smp_pairing_req+0xd2>
		rsp->init_key_dist = 0;
   1a794:	2300      	movs	r3, #0
   1a796:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist = 0;
   1a798:	75a3      	strb	r3, [r4, #22]
   1a79a:	e7c0      	b.n	1a71e <smp_pairing_req+0x102>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1a79c:	7b23      	ldrb	r3, [r4, #12]
   1a79e:	7ce0      	ldrb	r0, [r4, #19]
   1a7a0:	ea03 0200 	and.w	r2, r3, r0
   1a7a4:	0712      	lsls	r2, r2, #28
   1a7a6:	d506      	bpl.n	1a7b6 <smp_pairing_req+0x19a>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1a7a8:	7ae2      	ldrb	r2, [r4, #11]
   1a7aa:	f894 c012 	ldrb.w	ip, [r4, #18]
   1a7ae:	ea42 020c 	orr.w	r2, r2, ip
   1a7b2:	07d2      	lsls	r2, r2, #31
   1a7b4:	d4e3      	bmi.n	1a77e <smp_pairing_req+0x162>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1a7b6:	f1b9 0f04 	cmp.w	r9, #4
   1a7ba:	d80f      	bhi.n	1a7dc <smp_pairing_req+0x1c0>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1a7bc:	ea43 0100 	orr.w	r1, r3, r0
   1a7c0:	f011 0104 	ands.w	r1, r1, #4
   1a7c4:	d0db      	beq.n	1a77e <smp_pairing_req+0x162>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   1a7c6:	4620      	mov	r0, r4
   1a7c8:	f7ff fc40 	bl	1a04c <get_io_capa>
   1a7cc:	4b75      	ldr	r3, [pc, #468]	; (1a9a4 <smp_pairing_req+0x388>)
   1a7ce:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   1a7d2:	444b      	add	r3, r9
   1a7d4:	5c19      	ldrb	r1, [r3, r0]
   1a7d6:	e7d2      	b.n	1a77e <smp_pairing_req+0x162>
		return LEGACY_OOB;
   1a7d8:	2106      	movs	r1, #6
   1a7da:	e7d0      	b.n	1a77e <smp_pairing_req+0x162>
		return JUST_WORKS;
   1a7dc:	2100      	movs	r1, #0
   1a7de:	e7ce      	b.n	1a77e <smp_pairing_req+0x162>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1a7e0:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1a7e4:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   1a7e6:	2b03      	cmp	r3, #3
   1a7e8:	d03e      	beq.n	1a868 <smp_pairing_req+0x24c>
   1a7ea:	d82c      	bhi.n	1a846 <smp_pairing_req+0x22a>
   1a7ec:	3b01      	subs	r3, #1
   1a7ee:	2b01      	cmp	r3, #1
   1a7f0:	f63f af43 	bhi.w	1a67a <smp_pairing_req+0x5e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a7f4:	2105      	movs	r1, #5
   1a7f6:	4628      	mov	r0, r5
   1a7f8:	f00b fdf9 	bl	263ee <atomic_test_bit>
   1a7fc:	2800      	cmp	r0, #0
   1a7fe:	f040 80b5 	bne.w	1a96c <smp_pairing_req+0x350>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1a802:	4620      	mov	r0, r4
   1a804:	f7ff fc04 	bl	1a010 <latch_auth_cb>
   1a808:	4680      	mov	r8, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1a80a:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1a80c:	f8d4 90ec 	ldr.w	r9, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1a810:	f7ff fbfe 	bl	1a010 <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1a814:	f109 0188 	add.w	r1, r9, #136	; 0x88
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1a818:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1a81a:	f899 0008 	ldrb.w	r0, [r9, #8]
   1a81e:	f001 f965 	bl	1baec <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1a822:	7a23      	ldrb	r3, [r4, #8]
   1a824:	b320      	cbz	r0, 1a870 <smp_pairing_req+0x254>
   1a826:	7b42      	ldrb	r2, [r0, #13]
   1a828:	07d2      	lsls	r2, r2, #31
   1a82a:	d521      	bpl.n	1a870 <smp_pairing_req+0x254>
   1a82c:	bb03      	cbnz	r3, 1a870 <smp_pairing_req+0x254>
		LOG_ERR("JustWorks failed, authenticated keys present");
   1a82e:	4b5e      	ldr	r3, [pc, #376]	; (1a9a8 <smp_pairing_req+0x38c>)
   1a830:	617b      	str	r3, [r7, #20]
   1a832:	2302      	movs	r3, #2
   1a834:	485d      	ldr	r0, [pc, #372]	; (1a9ac <smp_pairing_req+0x390>)
   1a836:	613b      	str	r3, [r7, #16]
   1a838:	f107 0210 	add.w	r2, r7, #16
   1a83c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a840:	f00b fe10 	bl	26464 <z_log_msg_static_create.constprop.0>
	if (ret) {
   1a844:	e719      	b.n	1a67a <smp_pairing_req+0x5e>
	switch (sec) {
   1a846:	2b04      	cmp	r3, #4
   1a848:	f47f af17 	bne.w	1a67a <smp_pairing_req+0x5e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1a84c:	7d23      	ldrb	r3, [r4, #20]
   1a84e:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1a850:	4293      	cmp	r3, r2
   1a852:	bf28      	it	cs
   1a854:	4613      	movcs	r3, r2
   1a856:	2b10      	cmp	r3, #16
   1a858:	f47f aef2 	bne.w	1a640 <smp_pairing_req+0x24>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a85c:	2105      	movs	r1, #5
   1a85e:	4628      	mov	r0, r5
   1a860:	f00b fdc5 	bl	263ee <atomic_test_bit>
   1a864:	2800      	cmp	r0, #0
   1a866:	d091      	beq.n	1a78c <smp_pairing_req+0x170>
		if (smp->method == JUST_WORKS) {
   1a868:	7a23      	ldrb	r3, [r4, #8]
   1a86a:	2b00      	cmp	r3, #0
   1a86c:	d1c2      	bne.n	1a7f4 <smp_pairing_req+0x1d8>
   1a86e:	e78d      	b.n	1a78c <smp_pairing_req+0x170>
	switch (smp->method) {
   1a870:	2b06      	cmp	r3, #6
   1a872:	d85f      	bhi.n	1a934 <smp_pairing_req+0x318>
   1a874:	e8df f003 	tbb	[pc, r3]
   1a878:	5e2f5617 	.word	0x5e2f5617
   1a87c:	5e5e      	.short	0x5e5e
   1a87e:	04          	.byte	0x04
   1a87f:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1a880:	2e00      	cmp	r6, #0
   1a882:	d067      	beq.n	1a954 <smp_pairing_req+0x338>
   1a884:	68f3      	ldr	r3, [r6, #12]
   1a886:	2b00      	cmp	r3, #0
   1a888:	d064      	beq.n	1a954 <smp_pairing_req+0x338>
			struct bt_conn_oob_info info = {
   1a88a:	2300      	movs	r3, #0
   1a88c:	803b      	strh	r3, [r7, #0]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1a88e:	210a      	movs	r1, #10
   1a890:	4628      	mov	r0, r5
   1a892:	f00b fdf5 	bl	26480 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1a896:	68f3      	ldr	r3, [r6, #12]
   1a898:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1a89c:	4639      	mov	r1, r7
   1a89e:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1a8a0:	7a23      	ldrb	r3, [r4, #8]
   1a8a2:	2b00      	cmp	r3, #0
   1a8a4:	d158      	bne.n	1a958 <smp_pairing_req+0x33c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1a8a6:	210f      	movs	r1, #15
   1a8a8:	4628      	mov	r0, r5
   1a8aa:	f00b fda0 	bl	263ee <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1a8ae:	2800      	cmp	r0, #0
   1a8b0:	d152      	bne.n	1a958 <smp_pairing_req+0x33c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1a8b2:	f1b8 0f00 	cmp.w	r8, #0
   1a8b6:	d04f      	beq.n	1a958 <smp_pairing_req+0x33c>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1a8b8:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1a8bc:	2b00      	cmp	r3, #0
   1a8be:	d04b      	beq.n	1a958 <smp_pairing_req+0x33c>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1a8c0:	4628      	mov	r0, r5
   1a8c2:	210a      	movs	r1, #10
   1a8c4:	f00b fddc 	bl	26480 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   1a8c8:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1a8cc:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   1a8d0:	4798      	blx	r3
		return 0;
   1a8d2:	2000      	movs	r0, #0
   1a8d4:	e6b5      	b.n	1a642 <smp_pairing_req+0x26>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1a8d6:	2104      	movs	r1, #4
   1a8d8:	4638      	mov	r0, r7
   1a8da:	f003 fc4f 	bl	1e17c <bt_rand>
   1a8de:	2800      	cmp	r0, #0
   1a8e0:	f47f aecb 	bne.w	1a67a <smp_pairing_req+0x5e>
			passkey %= 1000000;
   1a8e4:	683b      	ldr	r3, [r7, #0]
   1a8e6:	4a32      	ldr	r2, [pc, #200]	; (1a9b0 <smp_pairing_req+0x394>)
   1a8e8:	fbb3 f1f2 	udiv	r1, r3, r2
   1a8ec:	fb02 3311 	mls	r3, r2, r1, r3
   1a8f0:	603b      	str	r3, [r7, #0]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1a8f2:	b14e      	cbz	r6, 1a908 <smp_pairing_req+0x2ec>
   1a8f4:	6833      	ldr	r3, [r6, #0]
   1a8f6:	b13b      	cbz	r3, 1a908 <smp_pairing_req+0x2ec>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1a8f8:	210b      	movs	r1, #11
   1a8fa:	4628      	mov	r0, r5
   1a8fc:	f00b fdc0 	bl	26480 <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   1a900:	6833      	ldr	r3, [r6, #0]
   1a902:	6839      	ldr	r1, [r7, #0]
   1a904:	4648      	mov	r0, r9
   1a906:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1a908:	683b      	ldr	r3, [r7, #0]
	dst[0] = val;
   1a90a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   1a90e:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1a912:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1a914:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1a918:	0a1b      	lsrs	r3, r3, #8
   1a91a:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1a91e:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   1a922:	e7bd      	b.n	1a8a0 <smp_pairing_req+0x284>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1a924:	4628      	mov	r0, r5
   1a926:	210a      	movs	r1, #10
   1a928:	f00b fdaa 	bl	26480 <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   1a92c:	6873      	ldr	r3, [r6, #4]
   1a92e:	4648      	mov	r0, r9
   1a930:	4798      	blx	r3
	if (ret) {
   1a932:	e7b5      	b.n	1a8a0 <smp_pairing_req+0x284>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1a934:	466c      	mov	r4, sp
   1a936:	b088      	sub	sp, #32
   1a938:	466a      	mov	r2, sp
   1a93a:	491e      	ldr	r1, [pc, #120]	; (1a9b4 <smp_pairing_req+0x398>)
   1a93c:	481b      	ldr	r0, [pc, #108]	; (1a9ac <smp_pairing_req+0x390>)
	switch (smp->method) {
   1a93e:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1a942:	2303      	movs	r3, #3
   1a944:	f842 3f10 	str.w	r3, [r2, #16]!
   1a948:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a94c:	f00b fd8a 	bl	26464 <z_log_msg_static_create.constprop.0>
   1a950:	46a5      	mov	sp, r4
	if (ret) {
   1a952:	e692      	b.n	1a67a <smp_pairing_req+0x5e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1a954:	2002      	movs	r0, #2
   1a956:	e674      	b.n	1a642 <smp_pairing_req+0x26>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1a958:	2103      	movs	r1, #3
   1a95a:	4620      	mov	r0, r4
   1a95c:	f00b fd90 	bl	26480 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1a960:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1a962:	f00b fd8d 	bl	26480 <atomic_set_bit>
	return send_pairing_rsp(smp);
   1a966:	f00b fdbe 	bl	264e6 <send_pairing_rsp>
   1a96a:	e66a      	b.n	1a642 <smp_pairing_req+0x26>
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   1a96c:	7a23      	ldrb	r3, [r4, #8]
   1a96e:	bb1b      	cbnz	r3, 1a9b8 <smp_pairing_req+0x39c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1a970:	210f      	movs	r1, #15
   1a972:	4628      	mov	r0, r5
   1a974:	f00b fd3b 	bl	263ee <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1a978:	b9f0      	cbnz	r0, 1a9b8 <smp_pairing_req+0x39c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1a97a:	f1b8 0f00 	cmp.w	r8, #0
   1a97e:	d01b      	beq.n	1a9b8 <smp_pairing_req+0x39c>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1a980:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1a984:	b1c3      	cbz	r3, 1a9b8 <smp_pairing_req+0x39c>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1a986:	4628      	mov	r0, r5
   1a988:	210a      	movs	r1, #10
   1a98a:	f00b fd79 	bl	26480 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   1a98e:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1a992:	4630      	mov	r0, r6
   1a994:	e79c      	b.n	1a8d0 <smp_pairing_req+0x2b4>
   1a996:	bf00      	nop
   1a998:	20004118 	.word	0x20004118
   1a99c:	0002ad65 	.word	0x0002ad65
   1a9a0:	20004117 	.word	0x20004117
   1a9a4:	0002ad4c 	.word	0x0002ad4c
   1a9a8:	0002aa7e 	.word	0x0002aa7e
   1a9ac:	000281bc 	.word	0x000281bc
   1a9b0:	000f4240 	.word	0x000f4240
   1a9b4:	0002aa26 	.word	0x0002aa26
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1a9b8:	210c      	movs	r1, #12
   1a9ba:	4620      	mov	r0, r4
   1a9bc:	e7d1      	b.n	1a962 <smp_pairing_req+0x346>
   1a9be:	bf00      	nop

0001a9c0 <compute_and_check_and_send_periph_dhcheck>:
{
   1a9c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a9c4:	b097      	sub	sp, #92	; 0x5c
   1a9c6:	4604      	mov	r4, r0
   1a9c8:	af04      	add	r7, sp, #16
	(void)memset(r, 0, sizeof(r));
   1a9ca:	2210      	movs	r2, #16
   1a9cc:	2100      	movs	r1, #0
   1a9ce:	f107 0020 	add.w	r0, r7, #32
   1a9d2:	f009 ffc7 	bl	24964 <memset>
	switch (smp->method) {
   1a9d6:	7a23      	ldrb	r3, [r4, #8]
   1a9d8:	2b05      	cmp	r3, #5
   1a9da:	d834      	bhi.n	1aa46 <compute_and_check_and_send_periph_dhcheck+0x86>
   1a9dc:	e8df f003 	tbb	[pc, r3]
   1a9e0:	0a03030a 	.word	0x0a03030a
   1a9e4:	2d33      	.short	0x2d33
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1a9e6:	2204      	movs	r2, #4
   1a9e8:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1a9ec:	f107 0020 	add.w	r0, r7, #32
   1a9f0:	f009 ffad 	bl	2494e <memcpy>
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   1a9f4:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   1a9f8:	f104 0247 	add.w	r2, r4, #71	; 0x47
   1a9fc:	f104 05c7 	add.w	r5, r4, #199	; 0xc7
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   1aa00:	e9cd 5201 	strd	r5, r2, [sp, #4]
   1aa04:	f104 0637 	add.w	r6, r4, #55	; 0x37
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   1aa08:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   1aa0c:	f104 0927 	add.w	r9, r4, #39	; 0x27
   1aa10:	9200      	str	r2, [sp, #0]
   1aa12:	338f      	adds	r3, #143	; 0x8f
   1aa14:	464a      	mov	r2, r9
   1aa16:	4631      	mov	r1, r6
   1aa18:	f104 0097 	add.w	r0, r4, #151	; 0x97
   1aa1c:	f001 f876 	bl	1bb0c <bt_crypto_f5>
   1aa20:	b328      	cbz	r0, 1aa6e <compute_and_check_and_send_periph_dhcheck+0xae>
		LOG_ERR("Calculate LTK failed");
   1aa22:	4b42      	ldr	r3, [pc, #264]	; (1ab2c <compute_and_check_and_send_periph_dhcheck+0x16c>)
   1aa24:	647b      	str	r3, [r7, #68]	; 0x44
   1aa26:	2302      	movs	r3, #2
   1aa28:	4841      	ldr	r0, [pc, #260]	; (1ab30 <compute_and_check_and_send_periph_dhcheck+0x170>)
   1aa2a:	643b      	str	r3, [r7, #64]	; 0x40
   1aa2c:	f107 0240 	add.w	r2, r7, #64	; 0x40
   1aa30:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1aa34:	f00b fd16 	bl	26464 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1aa38:	e014      	b.n	1aa64 <compute_and_check_and_send_periph_dhcheck+0xa4>
		if (smp->oobd_remote) {
   1aa3a:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   1aa3e:	2900      	cmp	r1, #0
   1aa40:	d0d8      	beq.n	1a9f4 <compute_and_check_and_send_periph_dhcheck+0x34>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1aa42:	2210      	movs	r2, #16
   1aa44:	e7d2      	b.n	1a9ec <compute_and_check_and_send_periph_dhcheck+0x2c>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1aa46:	466c      	mov	r4, sp
   1aa48:	b088      	sub	sp, #32
   1aa4a:	aa04      	add	r2, sp, #16
   1aa4c:	4939      	ldr	r1, [pc, #228]	; (1ab34 <compute_and_check_and_send_periph_dhcheck+0x174>)
   1aa4e:	4838      	ldr	r0, [pc, #224]	; (1ab30 <compute_and_check_and_send_periph_dhcheck+0x170>)
	switch (smp->method) {
   1aa50:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1aa54:	2303      	movs	r3, #3
   1aa56:	f842 3f10 	str.w	r3, [r2, #16]!
   1aa5a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1aa5e:	f00b fd01 	bl	26464 <z_log_msg_static_create.constprop.0>
   1aa62:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1aa64:	2008      	movs	r0, #8
}
   1aa66:	374c      	adds	r7, #76	; 0x4c
   1aa68:	46bd      	mov	sp, r7
   1aa6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   1aa6e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1aa72:	f103 028f 	add.w	r2, r3, #143	; 0x8f
   1aa76:	3396      	adds	r3, #150	; 0x96
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1aa78:	f107 0810 	add.w	r8, r7, #16
   1aa7c:	9301      	str	r3, [sp, #4]
   1aa7e:	f104 0311 	add.w	r3, r4, #17
   1aa82:	9202      	str	r2, [sp, #8]
   1aa84:	9300      	str	r3, [sp, #0]
   1aa86:	f8cd 800c 	str.w	r8, [sp, #12]
   1aa8a:	f107 0320 	add.w	r3, r7, #32
   1aa8e:	4632      	mov	r2, r6
   1aa90:	4649      	mov	r1, r9
   1aa92:	4628      	mov	r0, r5
   1aa94:	f00b ffeb 	bl	26a6e <bt_crypto_f6>
   1aa98:	b108      	cbz	r0, 1aa9e <compute_and_check_and_send_periph_dhcheck+0xde>
		LOG_ERR("Calculate local DHKey check failed");
   1aa9a:	4b27      	ldr	r3, [pc, #156]	; (1ab38 <compute_and_check_and_send_periph_dhcheck+0x178>)
   1aa9c:	e7c2      	b.n	1aa24 <compute_and_check_and_send_periph_dhcheck+0x64>
	if (smp->method == LE_SC_OOB) {
   1aa9e:	7a23      	ldrb	r3, [r4, #8]
   1aaa0:	2b05      	cmp	r3, #5
   1aaa2:	d107      	bne.n	1aab4 <compute_and_check_and_send_periph_dhcheck+0xf4>
		if (smp->oobd_local) {
   1aaa4:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1aaa8:	2210      	movs	r2, #16
   1aaaa:	f107 0020 	add.w	r0, r7, #32
		if (smp->oobd_local) {
   1aaae:	b1b1      	cbz	r1, 1aade <compute_and_check_and_send_periph_dhcheck+0x11e>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1aab0:	f009 ff4d 	bl	2494e <memcpy>
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   1aab4:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1aab8:	9703      	str	r7, [sp, #12]
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   1aaba:	f103 0296 	add.w	r2, r3, #150	; 0x96
   1aabe:	338f      	adds	r3, #143	; 0x8f
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1aac0:	9301      	str	r3, [sp, #4]
   1aac2:	f104 030a 	add.w	r3, r4, #10
   1aac6:	9202      	str	r2, [sp, #8]
   1aac8:	9300      	str	r3, [sp, #0]
   1aaca:	464a      	mov	r2, r9
   1aacc:	f107 0320 	add.w	r3, r7, #32
   1aad0:	4631      	mov	r1, r6
   1aad2:	4628      	mov	r0, r5
   1aad4:	f00b ffcb 	bl	26a6e <bt_crypto_f6>
   1aad8:	b120      	cbz	r0, 1aae4 <compute_and_check_and_send_periph_dhcheck+0x124>
		LOG_ERR("Calculate remote DHKey check failed");
   1aada:	4b18      	ldr	r3, [pc, #96]	; (1ab3c <compute_and_check_and_send_periph_dhcheck+0x17c>)
   1aadc:	e7a2      	b.n	1aa24 <compute_and_check_and_send_periph_dhcheck+0x64>
			memset(r, 0, sizeof(r));
   1aade:	f009 ff41 	bl	24964 <memset>
   1aae2:	e7e7      	b.n	1aab4 <compute_and_check_and_send_periph_dhcheck+0xf4>
	if (memcmp(smp->e, re, 16)) {
   1aae4:	2210      	movs	r2, #16
   1aae6:	4639      	mov	r1, r7
   1aae8:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1aaec:	f009 ff08 	bl	24900 <memcmp>
   1aaf0:	4605      	mov	r5, r0
   1aaf2:	b9c8      	cbnz	r0, 1ab28 <compute_and_check_and_send_periph_dhcheck+0x168>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1aaf4:	210d      	movs	r1, #13
   1aaf6:	4620      	mov	r0, r4
   1aaf8:	f00b fcd6 	bl	264a8 <smp_create_pdu.constprop.0>
	if (!buf) {
   1aafc:	4606      	mov	r6, r0
   1aafe:	2800      	cmp	r0, #0
   1ab00:	d0b0      	beq.n	1aa64 <compute_and_check_and_send_periph_dhcheck+0xa4>
   1ab02:	2110      	movs	r1, #16
   1ab04:	300c      	adds	r0, #12
   1ab06:	f00c f85f 	bl	26bc8 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   1ab0a:	2210      	movs	r2, #16
   1ab0c:	4641      	mov	r1, r8
   1ab0e:	f009 ff1e 	bl	2494e <memcpy>
	smp_send(smp, buf, NULL, NULL);
   1ab12:	462a      	mov	r2, r5
   1ab14:	4631      	mov	r1, r6
   1ab16:	4620      	mov	r0, r4
   1ab18:	f7ff fadc 	bl	1a0d4 <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1ab1c:	1d20      	adds	r0, r4, #4
   1ab1e:	2101      	movs	r1, #1
   1ab20:	f00b fcae 	bl	26480 <atomic_set_bit>
	return 0;
   1ab24:	4628      	mov	r0, r5
   1ab26:	e79e      	b.n	1aa66 <compute_and_check_and_send_periph_dhcheck+0xa6>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1ab28:	200b      	movs	r0, #11
   1ab2a:	e79c      	b.n	1aa66 <compute_and_check_and_send_periph_dhcheck+0xa6>
   1ab2c:	0002aaab 	.word	0x0002aaab
   1ab30:	000281bc 	.word	0x000281bc
   1ab34:	0002aa26 	.word	0x0002aa26
   1ab38:	0002aac0 	.word	0x0002aac0
   1ab3c:	0002aae3 	.word	0x0002aae3

0001ab40 <bt_smp_connected>:
{
   1ab40:	b538      	push	{r3, r4, r5, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   1ab42:	490b      	ldr	r1, [pc, #44]	; (1ab70 <bt_smp_connected+0x30>)
{
   1ab44:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   1ab46:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   1ab4a:	3034      	adds	r0, #52	; 0x34
   1ab4c:	f00c fdf7 	bl	2773e <k_work_init_delayable>
	smp_reset(smp);
   1ab50:	4628      	mov	r0, r5
   1ab52:	f00b fd3b 	bl	265cc <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ab56:	f3bf 8f5b 	dmb	ish
   1ab5a:	4b06      	ldr	r3, [pc, #24]	; (1ab74 <bt_smp_connected+0x34>)
   1ab5c:	3464      	adds	r4, #100	; 0x64
   1ab5e:	e854 2f00 	ldrex	r2, [r4]
   1ab62:	e844 3100 	strex	r1, r3, [r4]
   1ab66:	2900      	cmp	r1, #0
   1ab68:	d1f9      	bne.n	1ab5e <bt_smp_connected+0x1e>
   1ab6a:	f3bf 8f5b 	dmb	ish
}
   1ab6e:	bd38      	pop	{r3, r4, r5, pc}
   1ab70:	0001b80d 	.word	0x0001b80d
   1ab74:	20001f40 	.word	0x20001f40

0001ab78 <smp_pairing_confirm>:
{
   1ab78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1ab7a:	1d05      	adds	r5, r0, #4
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1ab7c:	68ce      	ldr	r6, [r1, #12]
{
   1ab7e:	af00      	add	r7, sp, #0
   1ab80:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1ab82:	210b      	movs	r1, #11
   1ab84:	4628      	mov	r0, r5
   1ab86:	f00b fc5c 	bl	26442 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   1ab8a:	4631      	mov	r1, r6
   1ab8c:	2210      	movs	r2, #16
   1ab8e:	f104 0017 	add.w	r0, r4, #23
   1ab92:	f009 fedc 	bl	2494e <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ab96:	2105      	movs	r1, #5
   1ab98:	4628      	mov	r0, r5
   1ab9a:	f00b fc28 	bl	263ee <atomic_test_bit>
   1ab9e:	b920      	cbnz	r0, 1abaa <smp_pairing_confirm+0x32>
		return legacy_pairing_confirm(smp);
   1aba0:	4620      	mov	r0, r4
   1aba2:	f00b fd90 	bl	266c6 <legacy_pairing_confirm>
}
   1aba6:	46bd      	mov	sp, r7
   1aba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (smp->method) {
   1abaa:	7a23      	ldrb	r3, [r4, #8]
   1abac:	2b01      	cmp	r3, #1
   1abae:	d008      	beq.n	1abc2 <smp_pairing_confirm+0x4a>
   1abb0:	2b02      	cmp	r3, #2
   1abb2:	d112      	bne.n	1abda <smp_pairing_confirm+0x62>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1abb4:	2104      	movs	r1, #4
   1abb6:	4620      	mov	r0, r4
   1abb8:	f00b fc62 	bl	26480 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   1abbc:	f7ff fbc6 	bl	1a34c <smp_send_pairing_confirm>
   1abc0:	e7f1      	b.n	1aba6 <smp_pairing_confirm+0x2e>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1abc2:	210a      	movs	r1, #10
   1abc4:	4628      	mov	r0, r5
   1abc6:	f00b fc12 	bl	263ee <atomic_test_bit>
   1abca:	2800      	cmp	r0, #0
   1abcc:	d0f2      	beq.n	1abb4 <smp_pairing_confirm+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1abce:	4628      	mov	r0, r5
   1abd0:	2100      	movs	r1, #0
   1abd2:	f00b fc55 	bl	26480 <atomic_set_bit>
			return 0;
   1abd6:	2000      	movs	r0, #0
   1abd8:	e7e5      	b.n	1aba6 <smp_pairing_confirm+0x2e>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1abda:	466c      	mov	r4, sp
   1abdc:	b088      	sub	sp, #32
   1abde:	466a      	mov	r2, sp
   1abe0:	4906      	ldr	r1, [pc, #24]	; (1abfc <smp_pairing_confirm+0x84>)
   1abe2:	4807      	ldr	r0, [pc, #28]	; (1ac00 <smp_pairing_confirm+0x88>)
	switch (smp->method) {
   1abe4:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1abe8:	2303      	movs	r3, #3
   1abea:	f842 3f10 	str.w	r3, [r2, #16]!
   1abee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1abf2:	f00b fc37 	bl	26464 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1abf6:	2008      	movs	r0, #8
   1abf8:	46a5      	mov	sp, r4
   1abfa:	e7d4      	b.n	1aba6 <smp_pairing_confirm+0x2e>
   1abfc:	0002aa26 	.word	0x0002aa26
   1ac00:	000281bc 	.word	0x000281bc

0001ac04 <smp_pairing_random>:
{
   1ac04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ac08:	b08e      	sub	sp, #56	; 0x38
   1ac0a:	af04      	add	r7, sp, #16
   1ac0c:	4604      	mov	r4, r0
   1ac0e:	460d      	mov	r5, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ac10:	f7ff f9fe 	bl	1a010 <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1ac14:	f104 0837 	add.w	r8, r4, #55	; 0x37
   1ac18:	68e9      	ldr	r1, [r5, #12]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ac1a:	4606      	mov	r6, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1ac1c:	2210      	movs	r2, #16
   1ac1e:	4640      	mov	r0, r8
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ac20:	1d25      	adds	r5, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1ac22:	f009 fe94 	bl	2494e <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ac26:	2105      	movs	r1, #5
   1ac28:	4628      	mov	r0, r5
   1ac2a:	f00b fbe0 	bl	263ee <atomic_test_bit>
   1ac2e:	2800      	cmp	r0, #0
   1ac30:	d148      	bne.n	1acc4 <smp_pairing_random+0xc0>
	struct bt_conn *conn = smp->chan.chan.conn;
   1ac32:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1ac36:	9702      	str	r7, [sp, #8]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1ac38:	f103 0296 	add.w	r2, r3, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1ac3c:	f104 0647 	add.w	r6, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1ac40:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1ac42:	9201      	str	r2, [sp, #4]
   1ac44:	9300      	str	r3, [sp, #0]
   1ac46:	f104 0209 	add.w	r2, r4, #9
   1ac4a:	f104 0310 	add.w	r3, r4, #16
   1ac4e:	4641      	mov	r1, r8
   1ac50:	4630      	mov	r0, r6
   1ac52:	f00b fcde 	bl	26612 <smp_c1>
	if (err) {
   1ac56:	bb18      	cbnz	r0, 1aca0 <smp_pairing_random+0x9c>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1ac58:	2210      	movs	r2, #16
   1ac5a:	4639      	mov	r1, r7
   1ac5c:	f104 0017 	add.w	r0, r4, #23
   1ac60:	f009 fe4e 	bl	24900 <memcmp>
   1ac64:	2800      	cmp	r0, #0
   1ac66:	d16e      	bne.n	1ad46 <smp_pairing_random+0x142>
	memcpy(out, r2, 8);
   1ac68:	2208      	movs	r2, #8
   1ac6a:	4641      	mov	r1, r8
   1ac6c:	4638      	mov	r0, r7
   1ac6e:	f009 fe6e 	bl	2494e <memcpy>
	memcpy(out + 8, r1, 8);
   1ac72:	2208      	movs	r2, #8
   1ac74:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1ac78:	18b8      	adds	r0, r7, r2
   1ac7a:	f009 fe68 	bl	2494e <memcpy>
	return bt_encrypt_le(k, out, out);
   1ac7e:	463a      	mov	r2, r7
   1ac80:	4639      	mov	r1, r7
   1ac82:	4630      	mov	r0, r6
   1ac84:	f00c fa0f 	bl	270a6 <bt_encrypt_le>
		if (err) {
   1ac88:	b178      	cbz	r0, 1acaa <smp_pairing_random+0xa6>
			LOG_ERR("Calculate STK failed");
   1ac8a:	4b5f      	ldr	r3, [pc, #380]	; (1ae08 <smp_pairing_random+0x204>)
		LOG_ERR("Calculate confirm failed");
   1ac8c:	627b      	str	r3, [r7, #36]	; 0x24
   1ac8e:	2302      	movs	r3, #2
   1ac90:	485e      	ldr	r0, [pc, #376]	; (1ae0c <smp_pairing_random+0x208>)
   1ac92:	623b      	str	r3, [r7, #32]
   1ac94:	f107 0220 	add.w	r2, r7, #32
   1ac98:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ac9c:	f00b fbe2 	bl	26464 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1aca0:	2008      	movs	r0, #8
}
   1aca2:	3728      	adds	r7, #40	; 0x28
   1aca4:	46bd      	mov	sp, r7
   1aca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   1acaa:	4639      	mov	r1, r7
   1acac:	2210      	movs	r2, #16
   1acae:	4630      	mov	r0, r6
   1acb0:	f009 fe4d 	bl	2494e <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1acb4:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1acb6:	4628      	mov	r0, r5
   1acb8:	f00b fbe2 	bl	26480 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   1acbc:	4620      	mov	r0, r4
   1acbe:	f00b fc2b 	bl	26518 <smp_send_pairing_random>
   1acc2:	e7ee      	b.n	1aca2 <smp_pairing_random+0x9e>
	switch (smp->method) {
   1acc4:	7a23      	ldrb	r3, [r4, #8]
   1acc6:	2b05      	cmp	r3, #5
   1acc8:	f200 808c 	bhi.w	1ade4 <smp_pairing_random+0x1e0>
   1accc:	e8df f003 	tbb	[pc, r3]
   1acd0:	0320201a 	.word	0x0320201a
   1acd4:	618a      	.short	0x618a
		if (bt_crypto_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd, &passkey)) {
   1acd6:	f107 0310 	add.w	r3, r7, #16
   1acda:	494d      	ldr	r1, [pc, #308]	; (1ae10 <smp_pairing_random+0x20c>)
   1acdc:	9300      	str	r3, [sp, #0]
   1acde:	6809      	ldr	r1, [r1, #0]
   1ace0:	f104 0327 	add.w	r3, r4, #39	; 0x27
   1ace4:	4642      	mov	r2, r8
   1ace6:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1acea:	f000 ff77 	bl	1bbdc <bt_crypto_g2>
   1acee:	2800      	cmp	r0, #0
   1acf0:	d1d6      	bne.n	1aca0 <smp_pairing_random+0x9c>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1acf2:	210a      	movs	r1, #10
   1acf4:	4628      	mov	r0, r5
   1acf6:	f00b fbc3 	bl	26480 <atomic_set_bit>
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1acfa:	68b3      	ldr	r3, [r6, #8]
   1acfc:	6939      	ldr	r1, [r7, #16]
   1acfe:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1ad02:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1ad04:	210d      	movs	r1, #13
   1ad06:	4620      	mov	r0, r4
   1ad08:	f00b fbba 	bl	26480 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1ad0c:	2110      	movs	r1, #16
   1ad0e:	e7d2      	b.n	1acb6 <smp_pairing_random+0xb2>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1ad10:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1ad14:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1ad18:	493d      	ldr	r1, [pc, #244]	; (1ae10 <smp_pairing_random+0x20c>)
   1ad1a:	9700      	str	r7, [sp, #0]
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1ad1c:	40d3      	lsrs	r3, r2
   1ad1e:	f003 0301 	and.w	r3, r3, #1
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1ad22:	6809      	ldr	r1, [r1, #0]
   1ad24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1ad28:	4642      	mov	r2, r8
   1ad2a:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1ad2e:	f00b fe79 	bl	26a24 <bt_crypto_f4>
   1ad32:	b108      	cbz	r0, 1ad38 <smp_pairing_random+0x134>
		LOG_ERR("Calculate confirm failed");
   1ad34:	4b37      	ldr	r3, [pc, #220]	; (1ae14 <smp_pairing_random+0x210>)
   1ad36:	e7a9      	b.n	1ac8c <smp_pairing_random+0x88>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1ad38:	2210      	movs	r2, #16
   1ad3a:	4639      	mov	r1, r7
   1ad3c:	f104 0017 	add.w	r0, r4, #23
   1ad40:	f009 fdde 	bl	24900 <memcmp>
   1ad44:	b108      	cbz	r0, 1ad4a <smp_pairing_random+0x146>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1ad46:	2004      	movs	r0, #4
   1ad48:	e7ab      	b.n	1aca2 <smp_pairing_random+0x9e>
		atomic_set_bit(smp->allowed_cmds,
   1ad4a:	2103      	movs	r1, #3
   1ad4c:	4620      	mov	r0, r4
   1ad4e:	f00b fb97 	bl	26480 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   1ad52:	f00b fbe1 	bl	26518 <smp_send_pairing_random>
		if (err) {
   1ad56:	2800      	cmp	r0, #0
   1ad58:	d1a3      	bne.n	1aca2 <smp_pairing_random+0x9e>
		smp->passkey_round++;
   1ad5a:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1ad5e:	3301      	adds	r3, #1
   1ad60:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   1ad62:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   1ad64:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1ad68:	d109      	bne.n	1ad7e <smp_pairing_random+0x17a>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1ad6a:	210d      	movs	r1, #13
   1ad6c:	4620      	mov	r0, r4
   1ad6e:	f00b fb87 	bl	26480 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1ad72:	2110      	movs	r1, #16
   1ad74:	4628      	mov	r0, r5
   1ad76:	f00b fb83 	bl	26480 <atomic_set_bit>
			return 0;
   1ad7a:	2000      	movs	r0, #0
   1ad7c:	e791      	b.n	1aca2 <smp_pairing_random+0x9e>
		if (bt_rand(smp->prnd, 16)) {
   1ad7e:	2110      	movs	r1, #16
   1ad80:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1ad84:	f003 f9fa 	bl	1e17c <bt_rand>
   1ad88:	3800      	subs	r0, #0
   1ad8a:	bf18      	it	ne
   1ad8c:	2001      	movne	r0, #1
   1ad8e:	00c0      	lsls	r0, r0, #3
   1ad90:	e787      	b.n	1aca2 <smp_pairing_random+0x9e>
		if (bt_rand(smp->prnd, 16)) {
   1ad92:	2110      	movs	r1, #16
   1ad94:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1ad98:	f003 f9f0 	bl	1e17c <bt_rand>
   1ad9c:	2800      	cmp	r0, #0
   1ad9e:	f47f af7f 	bne.w	1aca0 <smp_pairing_random+0x9c>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1ada2:	b37e      	cbz	r6, 1ae04 <smp_pairing_random+0x200>
   1ada4:	68f3      	ldr	r3, [r6, #12]
   1ada6:	b36b      	cbz	r3, 1ae04 <smp_pairing_random+0x200>
			struct bt_conn_oob_info info = {
   1ada8:	4b1b      	ldr	r3, [pc, #108]	; (1ae18 <smp_pairing_random+0x214>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1adaa:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   1adac:	881b      	ldrh	r3, [r3, #0]
   1adae:	823b      	strh	r3, [r7, #16]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1adb0:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1adb2:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1adb4:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1adb8:	d412      	bmi.n	1ade0 <smp_pairing_random+0x1dc>
   1adba:	2b00      	cmp	r3, #0
   1adbc:	bf14      	ite	ne
   1adbe:	2301      	movne	r3, #1
   1adc0:	2303      	moveq	r3, #3
	info->lesc.oob_config = oob_config;
   1adc2:	747b      	strb	r3, [r7, #17]
			smp->oobd_local = NULL;
   1adc4:	2300      	movs	r3, #0
			smp->oobd_remote = NULL;
   1adc6:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   1adca:	4628      	mov	r0, r5
   1adcc:	210c      	movs	r1, #12
   1adce:	f00b fb57 	bl	26480 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1add2:	68f3      	ldr	r3, [r6, #12]
   1add4:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1add8:	f107 0110 	add.w	r1, r7, #16
   1addc:	4798      	blx	r3
			return 0;
   1adde:	e7cc      	b.n	1ad7a <smp_pairing_random+0x176>
		if (rsp_oob_present) {
   1ade0:	005b      	lsls	r3, r3, #1
   1ade2:	e7ee      	b.n	1adc2 <smp_pairing_random+0x1be>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1ade4:	466c      	mov	r4, sp
   1ade6:	b088      	sub	sp, #32
   1ade8:	aa04      	add	r2, sp, #16
   1adea:	490c      	ldr	r1, [pc, #48]	; (1ae1c <smp_pairing_random+0x218>)
   1adec:	4807      	ldr	r0, [pc, #28]	; (1ae0c <smp_pairing_random+0x208>)
	switch (smp->method) {
   1adee:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1adf2:	2303      	movs	r3, #3
   1adf4:	f842 3f10 	str.w	r3, [r2, #16]!
   1adf8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1adfc:	f00b fb32 	bl	26464 <z_log_msg_static_create.constprop.0>
   1ae00:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1ae02:	e74d      	b.n	1aca0 <smp_pairing_random+0x9c>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1ae04:	2002      	movs	r0, #2
   1ae06:	e74c      	b.n	1aca2 <smp_pairing_random+0x9e>
   1ae08:	0002ab07 	.word	0x0002ab07
   1ae0c:	000281bc 	.word	0x000281bc
   1ae10:	200032a0 	.word	0x200032a0
   1ae14:	0002ab1c 	.word	0x0002ab1c
   1ae18:	000282e4 	.word	0x000282e4
   1ae1c:	0002aa26 	.word	0x0002aa26

0001ae20 <bt_smp_start_security>:
{
   1ae20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   1ae24:	78c6      	ldrb	r6, [r0, #3]
   1ae26:	2e01      	cmp	r6, #1
{
   1ae28:	4604      	mov	r4, r0
	switch (conn->role) {
   1ae2a:	d005      	beq.n	1ae38 <bt_smp_start_security+0x18>
		return -EINVAL;
   1ae2c:	f06f 0415 	mvn.w	r4, #21
}
   1ae30:	4620      	mov	r0, r4
   1ae32:	b003      	add	sp, #12
   1ae34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   1ae38:	f00b fb17 	bl	2646a <smp_chan_get>
	if (!smp) {
   1ae3c:	4605      	mov	r5, r0
   1ae3e:	2800      	cmp	r0, #0
   1ae40:	f000 80ac 	beq.w	1af9c <bt_smp_start_security+0x17c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1ae44:	1d07      	adds	r7, r0, #4
   1ae46:	2104      	movs	r1, #4
   1ae48:	4638      	mov	r0, r7
   1ae4a:	f00b fad0 	bl	263ee <atomic_test_bit>
   1ae4e:	2800      	cmp	r0, #0
   1ae50:	f040 80a7 	bne.w	1afa2 <bt_smp_start_security+0x182>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1ae54:	2103      	movs	r1, #3
   1ae56:	4638      	mov	r0, r7
   1ae58:	f00b fac9 	bl	263ee <atomic_test_bit>
   1ae5c:	b110      	cbz	r0, 1ae64 <bt_smp_start_security+0x44>
		return -EBUSY;
   1ae5e:	f06f 040f 	mvn.w	r4, #15
   1ae62:	e7e5      	b.n	1ae30 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1ae64:	4631      	mov	r1, r6
   1ae66:	4638      	mov	r0, r7
   1ae68:	f00b fac1 	bl	263ee <atomic_test_bit>
   1ae6c:	2800      	cmp	r0, #0
   1ae6e:	d1f6      	bne.n	1ae5e <bt_smp_start_security+0x3e>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ae70:	4628      	mov	r0, r5
   1ae72:	f7ff f8cd 	bl	1a010 <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   1ae76:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1ae7a:	7a9b      	ldrb	r3, [r3, #10]
   1ae7c:	2b03      	cmp	r3, #3
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ae7e:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   1ae80:	d042      	beq.n	1af08 <bt_smp_start_security+0xe8>
   1ae82:	d832      	bhi.n	1aeea <bt_smp_start_security+0xca>
   1ae84:	3b01      	subs	r3, #1
   1ae86:	2b01      	cmp	r3, #1
   1ae88:	d948      	bls.n	1af1c <bt_smp_start_security+0xfc>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1ae8a:	210b      	movs	r1, #11
   1ae8c:	1d20      	adds	r0, r4, #4
   1ae8e:	f00b faae 	bl	263ee <atomic_test_bit>
   1ae92:	2800      	cmp	r0, #0
   1ae94:	d1ca      	bne.n	1ae2c <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   1ae96:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1ae9a:	b983      	cbnz	r3, 1aebe <bt_smp_start_security+0x9e>
						     conn->id, &conn->le.dst);
   1ae9c:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1aea0:	7a21      	ldrb	r1, [r4, #8]
   1aea2:	4632      	mov	r2, r6
   1aea4:	2020      	movs	r0, #32
   1aea6:	f000 fdb9 	bl	1ba1c <bt_keys_find>
   1aeaa:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		if (!conn->le.keys) {
   1aeae:	b930      	cbnz	r0, 1aebe <bt_smp_start_security+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1aeb0:	7a21      	ldrb	r1, [r4, #8]
   1aeb2:	4632      	mov	r2, r6
   1aeb4:	2004      	movs	r0, #4
   1aeb6:	f000 fdb1 	bl	1ba1c <bt_keys_find>
   1aeba:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (!conn->le.keys ||
   1aebe:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1aec2:	2b00      	cmp	r3, #0
   1aec4:	d0b2      	beq.n	1ae2c <bt_smp_start_security+0xc>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   1aec6:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   1aec8:	f012 0f24 	tst.w	r2, #36	; 0x24
   1aecc:	d0ae      	beq.n	1ae2c <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   1aece:	7aa1      	ldrb	r1, [r4, #10]
   1aed0:	2902      	cmp	r1, #2
   1aed2:	d923      	bls.n	1af1c <bt_smp_start_security+0xfc>
   1aed4:	7b58      	ldrb	r0, [r3, #13]
   1aed6:	07c0      	lsls	r0, r0, #31
   1aed8:	d5a8      	bpl.n	1ae2c <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   1aeda:	2903      	cmp	r1, #3
   1aedc:	d01e      	beq.n	1af1c <bt_smp_start_security+0xfc>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   1aede:	0692      	lsls	r2, r2, #26
   1aee0:	d5a4      	bpl.n	1ae2c <bt_smp_start_security+0xc>
   1aee2:	7b1b      	ldrb	r3, [r3, #12]
   1aee4:	2b10      	cmp	r3, #16
   1aee6:	d1a1      	bne.n	1ae2c <bt_smp_start_security+0xc>
   1aee8:	e018      	b.n	1af1c <bt_smp_start_security+0xfc>
	switch (smp->chan.chan.conn->required_sec_level) {
   1aeea:	2b04      	cmp	r3, #4
   1aeec:	d1cd      	bne.n	1ae8a <bt_smp_start_security+0x6a>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1aeee:	4628      	mov	r0, r5
   1aef0:	f7ff f8ac 	bl	1a04c <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1aef4:	2803      	cmp	r0, #3
   1aef6:	d104      	bne.n	1af02 <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1aef8:	2e00      	cmp	r6, #0
   1aefa:	d0c6      	beq.n	1ae8a <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1aefc:	68f3      	ldr	r3, [r6, #12]
   1aefe:	2b00      	cmp	r3, #0
   1af00:	d0c3      	beq.n	1ae8a <bt_smp_start_security+0x6a>
   1af02:	4b29      	ldr	r3, [pc, #164]	; (1afa8 <bt_smp_start_security+0x188>)
   1af04:	781b      	ldrb	r3, [r3, #0]
   1af06:	e007      	b.n	1af18 <bt_smp_start_security+0xf8>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1af08:	4628      	mov	r0, r5
   1af0a:	f7ff f89f 	bl	1a04c <get_io_capa>
   1af0e:	2803      	cmp	r0, #3
   1af10:	d104      	bne.n	1af1c <bt_smp_start_security+0xfc>
   1af12:	2e00      	cmp	r6, #0
   1af14:	d0b9      	beq.n	1ae8a <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   1af16:	68f3      	ldr	r3, [r6, #12]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1af18:	2b00      	cmp	r3, #0
   1af1a:	d0b6      	beq.n	1ae8a <bt_smp_start_security+0x6a>
	if (!conn->le.keys) {
   1af1c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1af20:	b13b      	cbz	r3, 1af32 <bt_smp_start_security+0x112>
	if (smp_init(smp) != 0) {
   1af22:	4628      	mov	r0, r5
   1af24:	f7ff f954 	bl	1a1d0 <smp_init>
   1af28:	4680      	mov	r8, r0
   1af2a:	b170      	cbz	r0, 1af4a <bt_smp_start_security+0x12a>
		return -ENOBUFS;
   1af2c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1af30:	e77e      	b.n	1ae30 <bt_smp_start_security+0x10>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1af32:	7a20      	ldrb	r0, [r4, #8]
   1af34:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1af38:	f000 fd3c 	bl	1b9b4 <bt_keys_get_addr>
   1af3c:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		if (!conn->le.keys) {
   1af40:	2800      	cmp	r0, #0
   1af42:	d1ee      	bne.n	1af22 <bt_smp_start_security+0x102>
			return -ENOMEM;
   1af44:	f06f 040b 	mvn.w	r4, #11
   1af48:	e772      	b.n	1ae30 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   1af4a:	210b      	movs	r1, #11
   1af4c:	4628      	mov	r0, r5
   1af4e:	f00b faab 	bl	264a8 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1af52:	4606      	mov	r6, r0
   1af54:	2800      	cmp	r0, #0
   1af56:	d0e9      	beq.n	1af2c <bt_smp_start_security+0x10c>
   1af58:	2101      	movs	r1, #1
   1af5a:	300c      	adds	r0, #12
   1af5c:	f00b fe34 	bl	26bc8 <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   1af60:	2109      	movs	r1, #9
   1af62:	4681      	mov	r9, r0
   1af64:	4628      	mov	r0, r5
   1af66:	f7ff f897 	bl	1a098 <get_auth>
   1af6a:	4643      	mov	r3, r8
   1af6c:	f889 0000 	strb.w	r0, [r9]
   1af70:	4632      	mov	r2, r6
   1af72:	4620      	mov	r0, r4
   1af74:	f8cd 8000 	str.w	r8, [sp]
   1af78:	2106      	movs	r1, #6
   1af7a:	f00a fa71 	bl	25460 <bt_l2cap_send_cb>
	if (err) {
   1af7e:	4604      	mov	r4, r0
   1af80:	b118      	cbz	r0, 1af8a <bt_smp_start_security+0x16a>
		net_buf_unref(req_buf);
   1af82:	4630      	mov	r0, r6
   1af84:	f000 ff20 	bl	1bdc8 <net_buf_unref>
		return err;
   1af88:	e752      	b.n	1ae30 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1af8a:	4638      	mov	r0, r7
   1af8c:	210f      	movs	r1, #15
   1af8e:	f00b fa77 	bl	26480 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1af92:	2101      	movs	r1, #1
   1af94:	4628      	mov	r0, r5
   1af96:	f00b fa73 	bl	26480 <atomic_set_bit>
	return 0;
   1af9a:	e749      	b.n	1ae30 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   1af9c:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1afa0:	e746      	b.n	1ae30 <bt_smp_start_security+0x10>
		return -EIO;
   1afa2:	f06f 0404 	mvn.w	r4, #4
   1afa6:	e743      	b.n	1ae30 <bt_smp_start_security+0x10>
   1afa8:	20004116 	.word	0x20004116

0001afac <smp_pairing_complete>:
{
   1afac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1afae:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1afb0:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1afb4:	1d04      	adds	r4, r0, #4
	if (!status) {
   1afb6:	bb39      	cbnz	r1, 1b008 <smp_pairing_complete+0x5c>
	return list->head;
   1afb8:	4b38      	ldr	r3, [pc, #224]	; (1b09c <smp_pairing_complete+0xf0>)
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1afba:	210d      	movs	r1, #13
   1afbc:	4620      	mov	r0, r4
   1afbe:	f00b fa16 	bl	263ee <atomic_test_bit>
   1afc2:	681b      	ldr	r3, [r3, #0]
   1afc4:	4607      	mov	r7, r0
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1afc6:	b19b      	cbz	r3, 1aff0 <smp_pairing_complete+0x44>
	return node->next;
   1afc8:	681c      	ldr	r4, [r3, #0]
   1afca:	b104      	cbz	r4, 1afce <smp_pairing_complete+0x22>
   1afcc:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   1afce:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   1afd2:	b113      	cbz	r3, 1afda <smp_pairing_complete+0x2e>
				listener->pairing_complete(conn, bond_flag);
   1afd4:	4639      	mov	r1, r7
   1afd6:	4628      	mov	r0, r5
   1afd8:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1afda:	b14c      	cbz	r4, 1aff0 <smp_pairing_complete+0x44>
   1afdc:	4623      	mov	r3, r4
   1afde:	68e4      	ldr	r4, [r4, #12]
   1afe0:	681b      	ldr	r3, [r3, #0]
   1afe2:	b11c      	cbz	r4, 1afec <smp_pairing_complete+0x40>
   1afe4:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   1afe6:	2b00      	cmp	r3, #0
   1afe8:	d1f4      	bne.n	1afd4 <smp_pairing_complete+0x28>
   1afea:	e7f7      	b.n	1afdc <smp_pairing_complete+0x30>
   1afec:	2b00      	cmp	r3, #0
   1afee:	d1f1      	bne.n	1afd4 <smp_pairing_complete+0x28>
	smp_reset(smp);
   1aff0:	4630      	mov	r0, r6
   1aff2:	f00b faeb 	bl	265cc <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1aff6:	7a6a      	ldrb	r2, [r5, #9]
   1aff8:	7aab      	ldrb	r3, [r5, #10]
   1affa:	429a      	cmp	r2, r3
   1affc:	d04d      	beq.n	1b09a <smp_pairing_complete+0xee>
		bt_smp_start_security(conn);
   1affe:	4628      	mov	r0, r5
}
   1b000:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   1b004:	f7ff bf0c 	b.w	1ae20 <bt_smp_start_security>
	switch (smp_err) {
   1b008:	3901      	subs	r1, #1
   1b00a:	b2c9      	uxtb	r1, r1
   1b00c:	290e      	cmp	r1, #14
   1b00e:	bf9c      	itt	ls
   1b010:	4b23      	ldrls	r3, [pc, #140]	; (1b0a0 <smp_pairing_complete+0xf4>)
   1b012:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   1b014:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
	if (!status) {
   1b018:	bf88      	it	hi
   1b01a:	2709      	movhi	r7, #9
		if (conn->le.keys &&
   1b01c:	b143      	cbz	r3, 1b030 <smp_pairing_complete+0x84>
   1b01e:	7b1b      	ldrb	r3, [r3, #12]
   1b020:	bb2b      	cbnz	r3, 1b06e <smp_pairing_complete+0xc2>
			bt_keys_clear(conn->le.keys);
   1b022:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
   1b026:	f00b fcb9 	bl	2699c <bt_keys_clear>
			conn->le.keys = NULL;
   1b02a:	2300      	movs	r3, #0
   1b02c:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1b030:	2102      	movs	r1, #2
   1b032:	4620      	mov	r0, r4
   1b034:	f00b f9db 	bl	263ee <atomic_test_bit>
   1b038:	b940      	cbnz	r0, 1b04c <smp_pairing_complete+0xa0>
	switch (err) {
   1b03a:	2f07      	cmp	r7, #7
   1b03c:	bf96      	itet	ls
   1b03e:	4b19      	ldrls	r3, [pc, #100]	; (1b0a4 <smp_pairing_complete+0xf8>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1b040:	211f      	movhi	r1, #31
   1b042:	5dd9      	ldrbls	r1, [r3, r7]
			bt_conn_security_changed(conn,
   1b044:	463a      	mov	r2, r7
   1b046:	4628      	mov	r0, r5
   1b048:	f7fc fc66 	bl	17918 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1b04c:	2103      	movs	r1, #3
   1b04e:	4620      	mov	r0, r4
   1b050:	f00b f9cd 	bl	263ee <atomic_test_bit>
   1b054:	2800      	cmp	r0, #0
   1b056:	d0cb      	beq.n	1aff0 <smp_pairing_complete+0x44>
	return list->head;
   1b058:	4b10      	ldr	r3, [pc, #64]	; (1b09c <smp_pairing_complete+0xf0>)
   1b05a:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1b05c:	2b00      	cmp	r3, #0
   1b05e:	d0c7      	beq.n	1aff0 <smp_pairing_complete+0x44>
	return node->next;
   1b060:	681c      	ldr	r4, [r3, #0]
   1b062:	b104      	cbz	r4, 1b066 <smp_pairing_complete+0xba>
   1b064:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   1b066:	f853 3c08 	ldr.w	r3, [r3, #-8]
   1b06a:	b94b      	cbnz	r3, 1b080 <smp_pairing_complete+0xd4>
   1b06c:	e00b      	b.n	1b086 <smp_pairing_complete+0xda>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1b06e:	2102      	movs	r1, #2
   1b070:	4620      	mov	r0, r4
   1b072:	f00b f9bc 	bl	263ee <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1b076:	2800      	cmp	r0, #0
   1b078:	d1d3      	bne.n	1b022 <smp_pairing_complete+0x76>
   1b07a:	e7d9      	b.n	1b030 <smp_pairing_complete+0x84>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1b07c:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   1b07e:	b123      	cbz	r3, 1b08a <smp_pairing_complete+0xde>
					listener->pairing_failed(conn, security_err);
   1b080:	4639      	mov	r1, r7
   1b082:	4628      	mov	r0, r5
   1b084:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1b086:	2c00      	cmp	r4, #0
   1b088:	d0b2      	beq.n	1aff0 <smp_pairing_complete+0x44>
   1b08a:	4623      	mov	r3, r4
   1b08c:	68e4      	ldr	r4, [r4, #12]
   1b08e:	685b      	ldr	r3, [r3, #4]
   1b090:	2c00      	cmp	r4, #0
   1b092:	d1f3      	bne.n	1b07c <smp_pairing_complete+0xd0>
				if (listener->pairing_failed) {
   1b094:	2b00      	cmp	r3, #0
   1b096:	d1f3      	bne.n	1b080 <smp_pairing_complete+0xd4>
   1b098:	e7aa      	b.n	1aff0 <smp_pairing_complete+0x44>
}
   1b09a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b09c:	200031c4 	.word	0x200031c4
   1b0a0:	0002ad3d 	.word	0x0002ad3d
   1b0a4:	0002ad2c 	.word	0x0002ad2c

0001b0a8 <smp_error>:
{
   1b0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1b0aa:	1d03      	adds	r3, r0, #4
{
   1b0ac:	b089      	sub	sp, #36	; 0x24
   1b0ae:	4606      	mov	r6, r0
   1b0b0:	460f      	mov	r7, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1b0b2:	4618      	mov	r0, r3
   1b0b4:	2102      	movs	r1, #2
   1b0b6:	f00b f99a 	bl	263ee <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   1b0ba:	4604      	mov	r4, r0
   1b0bc:	b120      	cbz	r0, 1b0c8 <smp_error+0x20>
   1b0be:	f8b6 40e8 	ldrh.w	r4, [r6, #232]	; 0xe8
   1b0c2:	fab4 f484 	clz	r4, r4
   1b0c6:	0964      	lsrs	r4, r4, #5
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1b0c8:	2103      	movs	r1, #3
   1b0ca:	4618      	mov	r0, r3
   1b0cc:	f00b f98f 	bl	263ee <atomic_test_bit>
   1b0d0:	b1b0      	cbz	r0, 1b100 <smp_error+0x58>
		smp_pairing_complete(smp, reason);
   1b0d2:	4639      	mov	r1, r7
   1b0d4:	4630      	mov	r0, r6
   1b0d6:	f7ff ff69 	bl	1afac <smp_pairing_complete>
	if (remote_already_completed) {
   1b0da:	b1f4      	cbz	r4, 1b11a <smp_error+0x72>
		LOG_WRN("SMP does not allow a pairing failure at this point. Known issue. "
   1b0dc:	4b1d      	ldr	r3, [pc, #116]	; (1b154 <smp_error+0xac>)
   1b0de:	481e      	ldr	r0, [pc, #120]	; (1b158 <smp_error+0xb0>)
   1b0e0:	9307      	str	r3, [sp, #28]
   1b0e2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1b0e6:	2302      	movs	r3, #2
   1b0e8:	aa06      	add	r2, sp, #24
   1b0ea:	9306      	str	r3, [sp, #24]
   1b0ec:	f00b f9ba 	bl	26464 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   1b0f0:	2105      	movs	r1, #5
   1b0f2:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   1b0f6:	f00a f893 	bl	25220 <bt_conn_disconnect>
		return 0;
   1b0fa:	2000      	movs	r0, #0
}
   1b0fc:	b009      	add	sp, #36	; 0x24
   1b0fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1b100:	2101      	movs	r1, #1
   1b102:	4618      	mov	r0, r3
   1b104:	f00b f973 	bl	263ee <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1b108:	2800      	cmp	r0, #0
   1b10a:	d1e2      	bne.n	1b0d2 <smp_error+0x2a>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1b10c:	210f      	movs	r1, #15
   1b10e:	4618      	mov	r0, r3
   1b110:	f00b f96d 	bl	263ee <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1b114:	2800      	cmp	r0, #0
   1b116:	d1dc      	bne.n	1b0d2 <smp_error+0x2a>
   1b118:	e7df      	b.n	1b0da <smp_error+0x32>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   1b11a:	2105      	movs	r1, #5
   1b11c:	4630      	mov	r0, r6
   1b11e:	f00b f9c3 	bl	264a8 <smp_create_pdu.constprop.0>
	if (!buf) {
   1b122:	4605      	mov	r5, r0
   1b124:	b190      	cbz	r0, 1b14c <smp_error+0xa4>
   1b126:	2101      	movs	r1, #1
   1b128:	300c      	adds	r0, #12
   1b12a:	f00b fd4d 	bl	26bc8 <net_buf_simple_add>
	rsp->reason = reason;
   1b12e:	7007      	strb	r7, [r0, #0]
   1b130:	9400      	str	r4, [sp, #0]
   1b132:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   1b136:	4623      	mov	r3, r4
   1b138:	462a      	mov	r2, r5
   1b13a:	2106      	movs	r1, #6
   1b13c:	f00a f990 	bl	25460 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   1b140:	2800      	cmp	r0, #0
   1b142:	d0da      	beq.n	1b0fa <smp_error+0x52>
		net_buf_unref(buf);
   1b144:	4628      	mov	r0, r5
   1b146:	f000 fe3f 	bl	1bdc8 <net_buf_unref>
   1b14a:	e7d6      	b.n	1b0fa <smp_error+0x52>
		return -ENOBUFS;
   1b14c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1b150:	e7d4      	b.n	1b0fc <smp_error+0x54>
   1b152:	bf00      	nop
   1b154:	0002ab35 	.word	0x0002ab35
   1b158:	000281bc 	.word	0x000281bc

0001b15c <bt_smp_recv>:
{
   1b15c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b160:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   1b162:	8a0b      	ldrh	r3, [r1, #16]
{
   1b164:	af00      	add	r7, sp, #0
   1b166:	4604      	mov	r4, r0
   1b168:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
   1b16a:	b97b      	cbnz	r3, 1b18c <bt_smp_recv+0x30>
		LOG_ERR("Too small SMP PDU received");
   1b16c:	4b47      	ldr	r3, [pc, #284]	; (1b28c <bt_smp_recv+0x130>)
   1b16e:	617b      	str	r3, [r7, #20]
   1b170:	4847      	ldr	r0, [pc, #284]	; (1b290 <bt_smp_recv+0x134>)
   1b172:	2302      	movs	r3, #2
   1b174:	f107 0210 	add.w	r2, r7, #16
   1b178:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b17c:	613b      	str	r3, [r7, #16]
   1b17e:	f00b f971 	bl	26464 <z_log_msg_static_create.constprop.0>
}
   1b182:	2000      	movs	r0, #0
   1b184:	371c      	adds	r7, #28
   1b186:	46bd      	mov	sp, r7
   1b188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1b18c:	2101      	movs	r1, #1
   1b18e:	f106 000c 	add.w	r0, r6, #12
   1b192:	f00b fd40 	bl	26c16 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1b196:	f1a4 05ec 	sub.w	r5, r4, #236	; 0xec
   1b19a:	3ce8      	subs	r4, #232	; 0xe8
   1b19c:	4680      	mov	r8, r0
   1b19e:	2104      	movs	r1, #4
   1b1a0:	4620      	mov	r0, r4
   1b1a2:	f00b f924 	bl	263ee <atomic_test_bit>
   1b1a6:	f898 1000 	ldrb.w	r1, [r8]
   1b1aa:	b178      	cbz	r0, 1b1cc <bt_smp_recv+0x70>
		LOG_WRN("SMP command (code 0x%02x) received after timeout", hdr->code);
   1b1ac:	466c      	mov	r4, sp
   1b1ae:	b088      	sub	sp, #32
   1b1b0:	466a      	mov	r2, sp
   1b1b2:	4b38      	ldr	r3, [pc, #224]	; (1b294 <bt_smp_recv+0x138>)
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   1b1b4:	4836      	ldr	r0, [pc, #216]	; (1b290 <bt_smp_recv+0x134>)
   1b1b6:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1b1ba:	2303      	movs	r3, #3
   1b1bc:	f842 3f10 	str.w	r3, [r2, #16]!
   1b1c0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1b1c4:	f00b f94e 	bl	26464 <z_log_msg_static_create.constprop.0>
   1b1c8:	46a5      	mov	sp, r4
		return 0;
   1b1ca:	e7da      	b.n	1b182 <bt_smp_recv+0x26>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1b1cc:	290e      	cmp	r1, #14
   1b1ce:	d904      	bls.n	1b1da <bt_smp_recv+0x7e>
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   1b1d0:	466c      	mov	r4, sp
   1b1d2:	b088      	sub	sp, #32
   1b1d4:	466a      	mov	r2, sp
   1b1d6:	4b30      	ldr	r3, [pc, #192]	; (1b298 <bt_smp_recv+0x13c>)
   1b1d8:	e7ec      	b.n	1b1b4 <bt_smp_recv+0x58>
	if (!handlers[hdr->code].func) {
   1b1da:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 1b29c <bt_smp_recv+0x140>
   1b1de:	f859 3031 	ldr.w	r3, [r9, r1, lsl #3]
   1b1e2:	b99b      	cbnz	r3, 1b20c <bt_smp_recv+0xb0>
		LOG_WRN("Unhandled SMP code 0x%02x", hdr->code);
   1b1e4:	466c      	mov	r4, sp
   1b1e6:	b088      	sub	sp, #32
   1b1e8:	466a      	mov	r2, sp
   1b1ea:	4b2d      	ldr	r3, [pc, #180]	; (1b2a0 <bt_smp_recv+0x144>)
   1b1ec:	4828      	ldr	r0, [pc, #160]	; (1b290 <bt_smp_recv+0x134>)
   1b1ee:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1b1f2:	2303      	movs	r3, #3
   1b1f4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1b1f8:	f842 3f10 	str.w	r3, [r2, #16]!
   1b1fc:	f00b f932 	bl	26464 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1b200:	2107      	movs	r1, #7
   1b202:	46a5      	mov	sp, r4
		smp_error(smp, err);
   1b204:	4628      	mov	r0, r5
   1b206:	f7ff ff4f 	bl	1b0a8 <smp_error>
   1b20a:	e7ba      	b.n	1b182 <bt_smp_recv+0x26>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1b20c:	4628      	mov	r0, r5
   1b20e:	f00b f9c7 	bl	265a0 <atomic_test_and_clear_bit>
   1b212:	f898 3000 	ldrb.w	r3, [r8]
   1b216:	b9b0      	cbnz	r0, 1b246 <bt_smp_recv+0xea>
		LOG_WRN("Unexpected SMP code 0x%02x", hdr->code);
   1b218:	46e8      	mov	r8, sp
   1b21a:	b088      	sub	sp, #32
   1b21c:	466a      	mov	r2, sp
   1b21e:	4921      	ldr	r1, [pc, #132]	; (1b2a4 <bt_smp_recv+0x148>)
   1b220:	481b      	ldr	r0, [pc, #108]	; (1b290 <bt_smp_recv+0x134>)
   1b222:	2603      	movs	r6, #3
   1b224:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1b228:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1b22c:	f842 6f10 	str.w	r6, [r2, #16]!
   1b230:	f00b f918 	bl	26464 <z_log_msg_static_create.constprop.0>
	return atomic_test_bit(smp->flags, SMP_FLAG_PAIRING);
   1b234:	4631      	mov	r1, r6
   1b236:	46c5      	mov	sp, r8
   1b238:	4620      	mov	r0, r4
   1b23a:	f00b f8d8 	bl	263ee <atomic_test_bit>
		if (is_in_pairing_procedure(smp)) {
   1b23e:	2800      	cmp	r0, #0
   1b240:	d09f      	beq.n	1b182 <bt_smp_recv+0x26>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1b242:	2108      	movs	r1, #8
   1b244:	e7de      	b.n	1b204 <bt_smp_recv+0xa8>
	if (buf->len != handlers[hdr->code].expect_len) {
   1b246:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
   1b24a:	8a31      	ldrh	r1, [r6, #16]
   1b24c:	7912      	ldrb	r2, [r2, #4]
   1b24e:	428a      	cmp	r2, r1
   1b250:	d011      	beq.n	1b276 <bt_smp_recv+0x11a>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1b252:	466c      	mov	r4, sp
   1b254:	b088      	sub	sp, #32
   1b256:	466a      	mov	r2, sp
   1b258:	4813      	ldr	r0, [pc, #76]	; (1b2a8 <bt_smp_recv+0x14c>)
   1b25a:	61d3      	str	r3, [r2, #28]
   1b25c:	2304      	movs	r3, #4
   1b25e:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1b262:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1b266:	f842 3f10 	str.w	r3, [r2, #16]!
   1b26a:	4809      	ldr	r0, [pc, #36]	; (1b290 <bt_smp_recv+0x134>)
   1b26c:	f00b f8fa 	bl	26464 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1b270:	210a      	movs	r1, #10
   1b272:	46a5      	mov	sp, r4
   1b274:	e7c6      	b.n	1b204 <bt_smp_recv+0xa8>
	err = handlers[hdr->code].func(smp, buf);
   1b276:	4631      	mov	r1, r6
   1b278:	f859 3033 	ldr.w	r3, [r9, r3, lsl #3]
   1b27c:	4628      	mov	r0, r5
   1b27e:	4798      	blx	r3
	if (err) {
   1b280:	4601      	mov	r1, r0
   1b282:	2800      	cmp	r0, #0
   1b284:	f43f af7d 	beq.w	1b182 <bt_smp_recv+0x26>
   1b288:	e7bc      	b.n	1b204 <bt_smp_recv+0xa8>
   1b28a:	bf00      	nop
   1b28c:	0002ab8d 	.word	0x0002ab8d
   1b290:	000281bc 	.word	0x000281bc
   1b294:	0002aba8 	.word	0x0002aba8
   1b298:	0002abd9 	.word	0x0002abd9
   1b29c:	00028814 	.word	0x00028814
   1b2a0:	0002abfb 	.word	0x0002abfb
   1b2a4:	0002ac15 	.word	0x0002ac15
   1b2a8:	0002a7a2 	.word	0x0002a7a2

0001b2ac <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   1b2ac:	4b0e      	ldr	r3, [pc, #56]	; (1b2e8 <bt_smp_pkey_ready+0x3c>)
{
   1b2ae:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   1b2b0:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1b2b2:	b918      	cbnz	r0, 1b2bc <bt_smp_pkey_ready+0x10>
}
   1b2b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b2b8:	f7fe bf3a 	b.w	1a130 <bt_smp_pkey_ready.part.0>
		err = smp_public_key_periph(smp);
   1b2bc:	4c0b      	ldr	r4, [pc, #44]	; (1b2ec <bt_smp_pkey_ready+0x40>)
	z_impl_k_sem_give(sem);
   1b2be:	480c      	ldr	r0, [pc, #48]	; (1b2f0 <bt_smp_pkey_ready+0x44>)
   1b2c0:	f004 fa44 	bl	1f74c <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b2c4:	f3bf 8f5b 	dmb	ish
   1b2c8:	f854 3904 	ldr.w	r3, [r4], #-4
   1b2cc:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1b2d0:	065b      	lsls	r3, r3, #25
   1b2d2:	d507      	bpl.n	1b2e4 <bt_smp_pkey_ready+0x38>
		err = smp_public_key_periph(smp);
   1b2d4:	4620      	mov	r0, r4
   1b2d6:	f7ff f88d 	bl	1a3f4 <smp_public_key_periph>
		if (err) {
   1b2da:	4601      	mov	r1, r0
   1b2dc:	b110      	cbz	r0, 1b2e4 <bt_smp_pkey_ready+0x38>
			smp_error(smp, err);
   1b2de:	4620      	mov	r0, r4
   1b2e0:	f7ff fee2 	bl	1b0a8 <smp_error>
}
   1b2e4:	bd10      	pop	{r4, pc}
   1b2e6:	bf00      	nop
   1b2e8:	200032a0 	.word	0x200032a0
   1b2ec:	20001f44 	.word	0x20001f44
   1b2f0:	20000998 	.word	0x20000998

0001b2f4 <smp_ident_addr_info>:
{
   1b2f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b2f8:	b086      	sub	sp, #24
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1b2fa:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1b2fe:	f8d1 800c 	ldr.w	r8, [r1, #12]
	struct bt_conn *conn = smp->chan.chan.conn;
   1b302:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1b306:	f023 0302 	bic.w	r3, r3, #2
   1b30a:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1b30e:	f898 3000 	ldrb.w	r3, [r8]
{
   1b312:	af00      	add	r7, sp, #0
   1b314:	4604      	mov	r4, r0
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1b316:	f105 0988 	add.w	r9, r5, #136	; 0x88
   1b31a:	b3ab      	cbz	r3, 1b388 <smp_ident_addr_info+0x94>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1b31c:	f898 3006 	ldrb.w	r3, [r8, #6]
   1b320:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1b324:	2bc0      	cmp	r3, #192	; 0xc0
   1b326:	d02f      	beq.n	1b388 <smp_ident_addr_info+0x94>
		LOG_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1b328:	4640      	mov	r0, r8
   1b32a:	f7f9 f931 	bl	14590 <bt_addr_le_str>
   1b32e:	466e      	mov	r6, sp
   1b330:	b088      	sub	sp, #32
   1b332:	466c      	mov	r4, sp
   1b334:	4b58      	ldr	r3, [pc, #352]	; (1b498 <smp_ident_addr_info+0x1a4>)
   1b336:	f8df 8164 	ldr.w	r8, [pc, #356]	; 1b49c <smp_ident_addr_info+0x1a8>
   1b33a:	4625      	mov	r5, r4
   1b33c:	f44f 7a00 	mov.w	sl, #512	; 0x200
   1b340:	e9c4 3005 	strd	r3, r0, [r4, #20]
   1b344:	f8a4 a01c 	strh.w	sl, [r4, #28]
   1b348:	f845 8f10 	str.w	r8, [r5, #16]!
   1b34c:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1b350:	462a      	mov	r2, r5
   1b352:	4853      	ldr	r0, [pc, #332]	; (1b4a0 <smp_ident_addr_info+0x1ac>)
   1b354:	f00b f886 	bl	26464 <z_log_msg_static_create.constprop.0>
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1b358:	4648      	mov	r0, r9
   1b35a:	46b5      	mov	sp, r6
   1b35c:	f7f9 f918 	bl	14590 <bt_addr_le_str>
   1b360:	46a5      	mov	sp, r4
   1b362:	4b50      	ldr	r3, [pc, #320]	; (1b4a4 <smp_ident_addr_info+0x1b0>)
   1b364:	f8a4 a01c 	strh.w	sl, [r4, #28]
   1b368:	e9c4 3005 	strd	r3, r0, [r4, #20]
   1b36c:	f8c4 8010 	str.w	r8, [r4, #16]
   1b370:	484b      	ldr	r0, [pc, #300]	; (1b4a0 <smp_ident_addr_info+0x1ac>)
   1b372:	462a      	mov	r2, r5
   1b374:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1b378:	f00b f874 	bl	26464 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   1b37c:	200a      	movs	r0, #10
   1b37e:	46b5      	mov	sp, r6
}
   1b380:	3718      	adds	r7, #24
   1b382:	46bd      	mov	sp, r7
   1b384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return memcmp(a, b, sizeof(*a));
   1b388:	2207      	movs	r2, #7
   1b38a:	4641      	mov	r1, r8
   1b38c:	4648      	mov	r0, r9
   1b38e:	f009 fab7 	bl	24900 <memcmp>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   1b392:	b168      	cbz	r0, 1b3b0 <smp_ident_addr_info+0xbc>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1b394:	7a28      	ldrb	r0, [r5, #8]
   1b396:	4641      	mov	r1, r8
   1b398:	f000 fba8 	bl	1baec <bt_keys_find_addr>
		if (keys) {
   1b39c:	4606      	mov	r6, r0
   1b39e:	b138      	cbz	r0, 1b3b0 <smp_ident_addr_info+0xbc>
			if (!update_keys_check(smp, keys)) {
   1b3a0:	4601      	mov	r1, r0
   1b3a2:	4620      	mov	r0, r4
   1b3a4:	f00b f82c 	bl	26400 <update_keys_check>
   1b3a8:	b320      	cbz	r0, 1b3f4 <smp_ident_addr_info+0x100>
			bt_keys_clear(keys);
   1b3aa:	4630      	mov	r0, r6
   1b3ac:	f00b faf6 	bl	2699c <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1b3b0:	210d      	movs	r1, #13
   1b3b2:	1d20      	adds	r0, r4, #4
   1b3b4:	f00b f81b 	bl	263ee <atomic_test_bit>
   1b3b8:	2800      	cmp	r0, #0
   1b3ba:	d05c      	beq.n	1b476 <smp_ident_addr_info+0x182>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1b3bc:	7a29      	ldrb	r1, [r5, #8]
   1b3be:	464a      	mov	r2, r9
   1b3c0:	2002      	movs	r0, #2
   1b3c2:	f00b fad7 	bl	26974 <bt_keys_get_type>
		if (!keys) {
   1b3c6:	4606      	mov	r6, r0
   1b3c8:	b9b0      	cbnz	r0, 1b3f8 <smp_ident_addr_info+0x104>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1b3ca:	4648      	mov	r0, r9
   1b3cc:	f7f9 f8e0 	bl	14590 <bt_addr_le_str>
   1b3d0:	466c      	mov	r4, sp
   1b3d2:	b088      	sub	sp, #32
   1b3d4:	466a      	mov	r2, sp
   1b3d6:	4b34      	ldr	r3, [pc, #208]	; (1b4a8 <smp_ident_addr_info+0x1b4>)
   1b3d8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b3dc:	f44f 7300 	mov.w	r3, #512	; 0x200
   1b3e0:	8393      	strh	r3, [r2, #28]
   1b3e2:	4b2e      	ldr	r3, [pc, #184]	; (1b49c <smp_ident_addr_info+0x1a8>)
   1b3e4:	f842 3f10 	str.w	r3, [r2, #16]!
   1b3e8:	482d      	ldr	r0, [pc, #180]	; (1b4a0 <smp_ident_addr_info+0x1ac>)
   1b3ea:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1b3ee:	f00b f839 	bl	26464 <z_log_msg_static_create.constprop.0>
   1b3f2:	46a5      	mov	sp, r4
				return BT_SMP_ERR_UNSPECIFIED;
   1b3f4:	2008      	movs	r0, #8
   1b3f6:	e7c3      	b.n	1b380 <smp_ident_addr_info+0x8c>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1b3f8:	78eb      	ldrb	r3, [r5, #3]
   1b3fa:	bbb3      	cbnz	r3, 1b46a <smp_ident_addr_info+0x176>
			dst = &conn->le.resp_addr;
   1b3fc:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1b400:	780b      	ldrb	r3, [r1, #0]
   1b402:	2b01      	cmp	r3, #1
   1b404:	d120      	bne.n	1b448 <smp_ident_addr_info+0x154>
		if (bt_addr_le_is_rpa(dst)) {
   1b406:	798b      	ldrb	r3, [r1, #6]
   1b408:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1b40c:	2b40      	cmp	r3, #64	; 0x40
   1b40e:	d11b      	bne.n	1b448 <smp_ident_addr_info+0x154>
	memcpy(dst, src, sizeof(*dst));
   1b410:	2206      	movs	r2, #6
   1b412:	3101      	adds	r1, #1
   1b414:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   1b418:	f009 fa99 	bl	2494e <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1b41c:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
   1b420:	b193      	cbz	r3, 1b448 <smp_ident_addr_info+0x154>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1b422:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   1b426:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1b42a:	2bc0      	cmp	r3, #192	; 0xc0
   1b42c:	d00c      	beq.n	1b448 <smp_ident_addr_info+0x154>
	memcpy(dst, src, sizeof(*dst));
   1b42e:	2207      	movs	r2, #7
   1b430:	4641      	mov	r1, r8
   1b432:	1c70      	adds	r0, r6, #1
   1b434:	f009 fa8b 	bl	2494e <memcpy>
   1b438:	2207      	movs	r2, #7
   1b43a:	4641      	mov	r1, r8
   1b43c:	4648      	mov	r0, r9
   1b43e:	f009 fa86 	bl	2494e <memcpy>
				bt_conn_identity_resolved(conn);
   1b442:	4628      	mov	r0, r5
   1b444:	f7fc fa3a 	bl	178bc <bt_conn_identity_resolved>
	conflict = bt_id_find_conflict(new_bond);
   1b448:	4630      	mov	r0, r6
   1b44a:	f7fa ff27 	bl	1629c <bt_id_find_conflict>
	if (conflict && !IS_ENABLED(CONFIG_BT_ID_UNPAIR_MATCHING_BONDS)) {
   1b44e:	b178      	cbz	r0, 1b470 <smp_ident_addr_info+0x17c>
		LOG_WRN("Refusing new pairing. The old bond must be unpaired first.");
   1b450:	4b16      	ldr	r3, [pc, #88]	; (1b4ac <smp_ident_addr_info+0x1b8>)
   1b452:	4813      	ldr	r0, [pc, #76]	; (1b4a0 <smp_ident_addr_info+0x1ac>)
   1b454:	617b      	str	r3, [r7, #20]
   1b456:	f107 0210 	add.w	r2, r7, #16
   1b45a:	2302      	movs	r3, #2
   1b45c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1b460:	613b      	str	r3, [r7, #16]
   1b462:	f00a ffff 	bl	26464 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1b466:	2003      	movs	r0, #3
   1b468:	e78a      	b.n	1b380 <smp_ident_addr_info+0x8c>
			dst = &conn->le.init_addr;
   1b46a:	f105 018f 	add.w	r1, r5, #143	; 0x8f
   1b46e:	e7c7      	b.n	1b400 <smp_ident_addr_info+0x10c>
	bt_id_add(new_bond);
   1b470:	4630      	mov	r0, r6
   1b472:	f7fa ff23 	bl	162bc <bt_id_add>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1b476:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1b47a:	075b      	lsls	r3, r3, #29
   1b47c:	d503      	bpl.n	1b486 <smp_ident_addr_info+0x192>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1b47e:	210a      	movs	r1, #10
   1b480:	4620      	mov	r0, r4
   1b482:	f00a fffd 	bl	26480 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1b486:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1b48a:	b109      	cbz	r1, 1b490 <smp_ident_addr_info+0x19c>
	return 0;
   1b48c:	2000      	movs	r0, #0
   1b48e:	e777      	b.n	1b380 <smp_ident_addr_info+0x8c>
		smp_pairing_complete(smp, 0);
   1b490:	4620      	mov	r0, r4
   1b492:	f7ff fd8b 	bl	1afac <smp_pairing_complete>
   1b496:	e7f9      	b.n	1b48c <smp_ident_addr_info+0x198>
   1b498:	0002ac30 	.word	0x0002ac30
   1b49c:	01000003 	.word	0x01000003
   1b4a0:	000281bc 	.word	0x000281bc
   1b4a4:	0002acae 	.word	0x0002acae
   1b4a8:	0002aa0c 	.word	0x0002aa0c
   1b4ac:	0002ac44 	.word	0x0002ac44

0001b4b0 <smp_central_ident>:
{
   1b4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b4b4:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1b4b6:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
{
   1b4ba:	af00      	add	r7, sp, #0
   1b4bc:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1b4be:	210d      	movs	r1, #13
   1b4c0:	3004      	adds	r0, #4
   1b4c2:	f00a ff94 	bl	263ee <atomic_test_bit>
   1b4c6:	b368      	cbz	r0, 1b524 <smp_central_ident+0x74>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1b4c8:	f105 0888 	add.w	r8, r5, #136	; 0x88
   1b4cc:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   1b4ce:	68de      	ldr	r6, [r3, #12]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1b4d0:	4642      	mov	r2, r8
   1b4d2:	2004      	movs	r0, #4
   1b4d4:	f00b fa4e 	bl	26974 <bt_keys_get_type>
		if (!keys) {
   1b4d8:	4605      	mov	r5, r0
   1b4da:	b9c0      	cbnz	r0, 1b50e <smp_central_ident+0x5e>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1b4dc:	4640      	mov	r0, r8
   1b4de:	f7f9 f857 	bl	14590 <bt_addr_le_str>
   1b4e2:	466c      	mov	r4, sp
   1b4e4:	b088      	sub	sp, #32
   1b4e6:	466a      	mov	r2, sp
   1b4e8:	4b1b      	ldr	r3, [pc, #108]	; (1b558 <smp_central_ident+0xa8>)
   1b4ea:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b4ee:	f44f 7300 	mov.w	r3, #512	; 0x200
   1b4f2:	8393      	strh	r3, [r2, #28]
   1b4f4:	4b19      	ldr	r3, [pc, #100]	; (1b55c <smp_central_ident+0xac>)
   1b4f6:	481a      	ldr	r0, [pc, #104]	; (1b560 <smp_central_ident+0xb0>)
   1b4f8:	f842 3f10 	str.w	r3, [r2, #16]!
   1b4fc:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1b500:	f00a ffb0 	bl	26464 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1b504:	2008      	movs	r0, #8
   1b506:	46a5      	mov	sp, r4
}
   1b508:	46bd      	mov	sp, r7
   1b50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1b50e:	2202      	movs	r2, #2
   1b510:	4631      	mov	r1, r6
   1b512:	3018      	adds	r0, #24
   1b514:	f009 fa1b 	bl	2494e <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1b518:	2208      	movs	r2, #8
   1b51a:	1cb1      	adds	r1, r6, #2
   1b51c:	f105 0010 	add.w	r0, r5, #16
   1b520:	f009 fa15 	bl	2494e <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1b524:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1b528:	f023 0201 	bic.w	r2, r3, #1
   1b52c:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1b530:	079a      	lsls	r2, r3, #30
   1b532:	d508      	bpl.n	1b546 <smp_central_ident+0x96>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1b534:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1b536:	4620      	mov	r0, r4
   1b538:	f00a ffa2 	bl	26480 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1b53c:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1b540:	b129      	cbz	r1, 1b54e <smp_central_ident+0x9e>
	return 0;
   1b542:	2000      	movs	r0, #0
   1b544:	e7e0      	b.n	1b508 <smp_central_ident+0x58>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1b546:	075b      	lsls	r3, r3, #29
   1b548:	d5f8      	bpl.n	1b53c <smp_central_ident+0x8c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1b54a:	210a      	movs	r1, #10
   1b54c:	e7f3      	b.n	1b536 <smp_central_ident+0x86>
		smp_pairing_complete(smp, 0);
   1b54e:	4620      	mov	r0, r4
   1b550:	f7ff fd2c 	bl	1afac <smp_pairing_complete>
   1b554:	e7f5      	b.n	1b542 <smp_central_ident+0x92>
   1b556:	bf00      	nop
   1b558:	0002aa0c 	.word	0x0002aa0c
   1b55c:	01000003 	.word	0x01000003
   1b560:	000281bc 	.word	0x000281bc

0001b564 <smp_pairing_failed>:
{
   1b564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b568:	460e      	mov	r6, r1
   1b56a:	af00      	add	r7, sp, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   1b56c:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
{
   1b570:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b572:	f7fe fd4d 	bl	1a010 <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1b576:	68f6      	ldr	r6, [r6, #12]
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1b578:	46e9      	mov	r9, sp
   1b57a:	b088      	sub	sp, #32
   1b57c:	7833      	ldrb	r3, [r6, #0]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1b57e:	4605      	mov	r5, r0
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1b580:	466a      	mov	r2, sp
   1b582:	4914      	ldr	r1, [pc, #80]	; (1b5d4 <smp_pairing_failed+0x70>)
   1b584:	4814      	ldr	r0, [pc, #80]	; (1b5d8 <smp_pairing_failed+0x74>)
   1b586:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1b58a:	2303      	movs	r3, #3
   1b58c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b590:	f842 3f10 	str.w	r3, [r2, #16]!
   1b594:	f00a ff66 	bl	26464 <z_log_msg_static_create.constprop.0>
   1b598:	46cd      	mov	sp, r9
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1b59a:	f104 0904 	add.w	r9, r4, #4
   1b59e:	210a      	movs	r1, #10
   1b5a0:	4648      	mov	r0, r9
   1b5a2:	f00a fffd 	bl	265a0 <atomic_test_and_clear_bit>
   1b5a6:	b140      	cbz	r0, 1b5ba <smp_pairing_failed+0x56>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1b5a8:	b975      	cbnz	r5, 1b5c8 <smp_pairing_failed+0x64>
	smp_pairing_complete(smp, req->reason);
   1b5aa:	4620      	mov	r0, r4
   1b5ac:	7831      	ldrb	r1, [r6, #0]
   1b5ae:	f7ff fcfd 	bl	1afac <smp_pairing_complete>
}
   1b5b2:	2000      	movs	r0, #0
   1b5b4:	46bd      	mov	sp, r7
   1b5b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1b5ba:	210b      	movs	r1, #11
   1b5bc:	4648      	mov	r0, r9
   1b5be:	f00a ffef 	bl	265a0 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1b5c2:	2800      	cmp	r0, #0
   1b5c4:	d1f0      	bne.n	1b5a8 <smp_pairing_failed+0x44>
   1b5c6:	e7f0      	b.n	1b5aa <smp_pairing_failed+0x46>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1b5c8:	692b      	ldr	r3, [r5, #16]
   1b5ca:	2b00      	cmp	r3, #0
   1b5cc:	d0ed      	beq.n	1b5aa <smp_pairing_failed+0x46>
			smp_auth_cb->cancel(conn);
   1b5ce:	4640      	mov	r0, r8
   1b5d0:	4798      	blx	r3
   1b5d2:	e7ea      	b.n	1b5aa <smp_pairing_failed+0x46>
   1b5d4:	0002ac7f 	.word	0x0002ac7f
   1b5d8:	000281bc 	.word	0x000281bc

0001b5dc <bt_smp_encrypt_change>:
{
   1b5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = chan->conn;
   1b5e0:	4605      	mov	r5, r0
{
   1b5e2:	b08f      	sub	sp, #60	; 0x3c
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1b5e4:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   1b5e8:	4604      	mov	r4, r0
   1b5ea:	af00      	add	r7, sp, #0
   1b5ec:	4688      	mov	r8, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1b5ee:	4630      	mov	r0, r6
   1b5f0:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   1b5f2:	f855 99ec 	ldr.w	r9, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1b5f6:	f00a ffd3 	bl	265a0 <atomic_test_and_clear_bit>
   1b5fa:	b328      	cbz	r0, 1b648 <bt_smp_encrypt_change+0x6c>
	if (hci_status) {
   1b5fc:	f1b8 0f00 	cmp.w	r8, #0
   1b600:	d017      	beq.n	1b632 <bt_smp_encrypt_change+0x56>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1b602:	2103      	movs	r1, #3
   1b604:	4630      	mov	r0, r6
   1b606:	f00a fef2 	bl	263ee <atomic_test_bit>
   1b60a:	b1e8      	cbz	r0, 1b648 <bt_smp_encrypt_change+0x6c>
			uint8_t smp_err = smp_err_get(
   1b60c:	4640      	mov	r0, r8
   1b60e:	f7f9 ffe1 	bl	155d4 <bt_security_err_get>
	switch (auth_err) {
   1b612:	3801      	subs	r0, #1
   1b614:	b2c0      	uxtb	r0, r0
   1b616:	2808      	cmp	r0, #8
   1b618:	bf9a      	itte	ls
   1b61a:	4b74      	ldrls	r3, [pc, #464]	; (1b7ec <bt_smp_encrypt_change+0x210>)
   1b61c:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   1b61e:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1b620:	2102      	movs	r1, #2
   1b622:	4630      	mov	r0, r6
   1b624:	f00a ff2c 	bl	26480 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1b628:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   1b62a:	4628      	mov	r0, r5
   1b62c:	f7ff fcbe 	bl	1afac <smp_pairing_complete>
   1b630:	e00a      	b.n	1b648 <bt_smp_encrypt_change+0x6c>
	if (!conn->encrypt) {
   1b632:	f899 300b 	ldrb.w	r3, [r9, #11]
   1b636:	b13b      	cbz	r3, 1b648 <bt_smp_encrypt_change+0x6c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1b638:	2103      	movs	r1, #3
   1b63a:	4630      	mov	r0, r6
   1b63c:	f00a fed7 	bl	263ee <atomic_test_bit>
   1b640:	b930      	cbnz	r0, 1b650 <bt_smp_encrypt_change+0x74>
		smp_reset(smp);
   1b642:	4628      	mov	r0, r5
   1b644:	f00a ffc2 	bl	265cc <smp_reset>
}
   1b648:	373c      	adds	r7, #60	; 0x3c
   1b64a:	46bd      	mov	sp, r7
   1b64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b650:	2105      	movs	r1, #5
   1b652:	4630      	mov	r0, r6
   1b654:	f00a fecb 	bl	263ee <atomic_test_bit>
   1b658:	b1b8      	cbz	r0, 1b68a <bt_smp_encrypt_change+0xae>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1b65a:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1b65e:	071a      	lsls	r2, r3, #28
   1b660:	d507      	bpl.n	1b672 <bt_smp_encrypt_change+0x96>
   1b662:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1b666:	071b      	lsls	r3, r3, #28
   1b668:	d503      	bpl.n	1b672 <bt_smp_encrypt_change+0x96>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1b66a:	2111      	movs	r1, #17
   1b66c:	4630      	mov	r0, r6
   1b66e:	f00a ff07 	bl	26480 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1b672:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1b676:	f023 0308 	bic.w	r3, r3, #8
   1b67a:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1b67e:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1b682:	f023 0308 	bic.w	r3, r3, #8
   1b686:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1b68a:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1b68e:	07d8      	lsls	r0, r3, #31
   1b690:	d522      	bpl.n	1b6d8 <bt_smp_encrypt_change+0xfc>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1b692:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1b694:	4628      	mov	r0, r5
   1b696:	f00a fef3 	bl	26480 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1b69a:	2102      	movs	r1, #2
   1b69c:	4630      	mov	r0, r6
   1b69e:	f00a feef 	bl	26480 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   1b6a2:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   1b6a4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   1b6a8:	b9f2      	cbnz	r2, 1b6e8 <bt_smp_encrypt_change+0x10c>
		LOG_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1b6aa:	f103 0088 	add.w	r0, r3, #136	; 0x88
   1b6ae:	f7f8 ff6f 	bl	14590 <bt_addr_le_str>
   1b6b2:	466c      	mov	r4, sp
   1b6b4:	b088      	sub	sp, #32
   1b6b6:	466a      	mov	r2, sp
   1b6b8:	4b4d      	ldr	r3, [pc, #308]	; (1b7f0 <bt_smp_encrypt_change+0x214>)
   1b6ba:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b6be:	f44f 7300 	mov.w	r3, #512	; 0x200
   1b6c2:	8393      	strh	r3, [r2, #28]
   1b6c4:	4b4b      	ldr	r3, [pc, #300]	; (1b7f4 <bt_smp_encrypt_change+0x218>)
   1b6c6:	f842 3f10 	str.w	r3, [r2, #16]!
   1b6ca:	484b      	ldr	r0, [pc, #300]	; (1b7f8 <bt_smp_encrypt_change+0x21c>)
   1b6cc:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1b6d0:	f00a fec8 	bl	26464 <z_log_msg_static_create.constprop.0>
   1b6d4:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1b6d6:	e7b7      	b.n	1b648 <bt_smp_encrypt_change+0x6c>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1b6d8:	0799      	lsls	r1, r3, #30
   1b6da:	d501      	bpl.n	1b6e0 <bt_smp_encrypt_change+0x104>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1b6dc:	2108      	movs	r1, #8
   1b6de:	e7d9      	b.n	1b694 <bt_smp_encrypt_change+0xb8>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1b6e0:	075a      	lsls	r2, r3, #29
   1b6e2:	d5da      	bpl.n	1b69a <bt_smp_encrypt_change+0xbe>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1b6e4:	210a      	movs	r1, #10
   1b6e6:	e7d5      	b.n	1b694 <bt_smp_encrypt_change+0xb8>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b6e8:	2105      	movs	r1, #5
   1b6ea:	f00a fe80 	bl	263ee <atomic_test_bit>
   1b6ee:	b9c0      	cbnz	r0, 1b722 <bt_smp_encrypt_change+0x146>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1b6f0:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1b6f4:	07db      	lsls	r3, r3, #31
   1b6f6:	d514      	bpl.n	1b722 <bt_smp_encrypt_change+0x146>
	struct bt_keys *keys = conn->le.keys;
   1b6f8:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1b6fa:	211a      	movs	r1, #26
   1b6fc:	f107 001c 	add.w	r0, r7, #28
	struct bt_keys *keys = conn->le.keys;
   1b700:	f8d3 80b8 	ldr.w	r8, [r3, #184]	; 0xb8
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1b704:	f002 fd3a 	bl	1e17c <bt_rand>
   1b708:	4682      	mov	sl, r0
   1b70a:	b178      	cbz	r0, 1b72c <bt_smp_encrypt_change+0x150>
			LOG_ERR("Unable to get random bytes");
   1b70c:	4b3b      	ldr	r3, [pc, #236]	; (1b7fc <bt_smp_encrypt_change+0x220>)
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   1b70e:	617b      	str	r3, [r7, #20]
   1b710:	2302      	movs	r3, #2
   1b712:	4839      	ldr	r0, [pc, #228]	; (1b7f8 <bt_smp_encrypt_change+0x21c>)
   1b714:	613b      	str	r3, [r7, #16]
   1b716:	f107 0210 	add.w	r2, r7, #16
   1b71a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b71e:	f00a fea1 	bl	26464 <z_log_msg_static_create.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
   1b722:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   1b726:	2900      	cmp	r1, #0
   1b728:	d18e      	bne.n	1b648 <bt_smp_encrypt_change+0x6c>
   1b72a:	e77e      	b.n	1b62a <bt_smp_encrypt_change+0x4e>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1b72c:	2106      	movs	r1, #6
   1b72e:	4628      	mov	r0, r5
   1b730:	f00a feba 	bl	264a8 <smp_create_pdu.constprop.0>
		if (!buf) {
   1b734:	4681      	mov	r9, r0
   1b736:	b908      	cbnz	r0, 1b73c <bt_smp_encrypt_change+0x160>
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   1b738:	4b31      	ldr	r3, [pc, #196]	; (1b800 <bt_smp_encrypt_change+0x224>)
   1b73a:	e7e8      	b.n	1b70e <bt_smp_encrypt_change+0x132>
	return net_buf_simple_add(&buf->b, len);
   1b73c:	2110      	movs	r1, #16
   1b73e:	300c      	adds	r0, #12
   1b740:	f00b fa42 	bl	26bc8 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   1b744:	f898 200c 	ldrb.w	r2, [r8, #12]
   1b748:	f107 011c 	add.w	r1, r7, #28
   1b74c:	4683      	mov	fp, r0
   1b74e:	f009 f8fe 	bl	2494e <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1b752:	f898 000c 	ldrb.w	r0, [r8, #12]
   1b756:	280f      	cmp	r0, #15
   1b758:	d805      	bhi.n	1b766 <bt_smp_encrypt_change+0x18a>
			(void)memset(info->ltk + keys->enc_size, 0,
   1b75a:	f1c0 0210 	rsb	r2, r0, #16
   1b75e:	4651      	mov	r1, sl
   1b760:	4458      	add	r0, fp
   1b762:	f009 f8ff 	bl	24964 <memset>
		smp_send(smp, buf, NULL, NULL);
   1b766:	4649      	mov	r1, r9
   1b768:	2200      	movs	r2, #0
   1b76a:	4628      	mov	r0, r5
   1b76c:	f7fe fcb2 	bl	1a0d4 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1b770:	2107      	movs	r1, #7
   1b772:	4628      	mov	r0, r5
   1b774:	f00a fe98 	bl	264a8 <smp_create_pdu.constprop.0>
		if (!buf) {
   1b778:	4681      	mov	r9, r0
   1b77a:	b908      	cbnz	r0, 1b780 <bt_smp_encrypt_change+0x1a4>
			LOG_ERR("Unable to allocate Central Ident buffer");
   1b77c:	4b21      	ldr	r3, [pc, #132]	; (1b804 <bt_smp_encrypt_change+0x228>)
   1b77e:	e7c6      	b.n	1b70e <bt_smp_encrypt_change+0x132>
   1b780:	210a      	movs	r1, #10
   1b782:	300c      	adds	r0, #12
   1b784:	f00b fa20 	bl	26bc8 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   1b788:	2208      	movs	r2, #8
   1b78a:	4682      	mov	sl, r0
   1b78c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1b790:	3002      	adds	r0, #2
   1b792:	f009 f8dc 	bl	2494e <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   1b796:	2202      	movs	r2, #2
   1b798:	f107 0134 	add.w	r1, r7, #52	; 0x34
   1b79c:	4650      	mov	r0, sl
   1b79e:	f009 f8d6 	bl	2494e <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   1b7a2:	4649      	mov	r1, r9
   1b7a4:	4628      	mov	r0, r5
   1b7a6:	4a18      	ldr	r2, [pc, #96]	; (1b808 <bt_smp_encrypt_change+0x22c>)
   1b7a8:	f7fe fc94 	bl	1a0d4 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1b7ac:	210d      	movs	r1, #13
   1b7ae:	4630      	mov	r0, r6
   1b7b0:	f00a fe1d 	bl	263ee <atomic_test_bit>
   1b7b4:	2800      	cmp	r0, #0
   1b7b6:	d0b4      	beq.n	1b722 <bt_smp_encrypt_change+0x146>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1b7b8:	4640      	mov	r0, r8
   1b7ba:	2101      	movs	r1, #1
   1b7bc:	f00b f8ea 	bl	26994 <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
   1b7c0:	f107 011c 	add.w	r1, r7, #28
   1b7c4:	2210      	movs	r2, #16
   1b7c6:	f108 004a 	add.w	r0, r8, #74	; 0x4a
   1b7ca:	f009 f8c0 	bl	2494e <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
   1b7ce:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1b7d2:	2208      	movs	r2, #8
   1b7d4:	f108 0040 	add.w	r0, r8, #64	; 0x40
   1b7d8:	f009 f8b9 	bl	2494e <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
   1b7dc:	2202      	movs	r2, #2
   1b7de:	f107 0134 	add.w	r1, r7, #52	; 0x34
   1b7e2:	f108 0048 	add.w	r0, r8, #72	; 0x48
   1b7e6:	f009 f8b2 	bl	2494e <memcpy>
   1b7ea:	e79a      	b.n	1b722 <bt_smp_encrypt_change+0x146>
   1b7ec:	0002ad34 	.word	0x0002ad34
   1b7f0:	0002aca1 	.word	0x0002aca1
   1b7f4:	01000003 	.word	0x01000003
   1b7f8:	000281bc 	.word	0x000281bc
   1b7fc:	0002acb6 	.word	0x0002acb6
   1b800:	0002acd1 	.word	0x0002acd1
   1b804:	0002acf8 	.word	0x0002acf8
   1b808:	00026947 	.word	0x00026947

0001b80c <smp_timeout>:
{
   1b80c:	b510      	push	{r4, lr}
   1b80e:	4604      	mov	r4, r0
   1b810:	b086      	sub	sp, #24
	LOG_ERR("SMP Timeout");
   1b812:	4b0b      	ldr	r3, [pc, #44]	; (1b840 <smp_timeout+0x34>)
   1b814:	9305      	str	r3, [sp, #20]
   1b816:	aa04      	add	r2, sp, #16
   1b818:	2302      	movs	r3, #2
   1b81a:	480a      	ldr	r0, [pc, #40]	; (1b844 <smp_timeout+0x38>)
   1b81c:	9304      	str	r3, [sp, #16]
   1b81e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b822:	f00a fe1f 	bl	26464 <z_log_msg_static_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1b826:	f5a4 7090 	sub.w	r0, r4, #288	; 0x120
   1b82a:	2108      	movs	r1, #8
   1b82c:	f7ff fbbe 	bl	1afac <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1b830:	2104      	movs	r1, #4
   1b832:	f5a4 708e 	sub.w	r0, r4, #284	; 0x11c
}
   1b836:	b006      	add	sp, #24
   1b838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1b83c:	f00a be20 	b.w	26480 <atomic_set_bit>
   1b840:	0002ad20 	.word	0x0002ad20
   1b844:	000281bc 	.word	0x000281bc

0001b848 <bt_smp_update_keys>:
{
   1b848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b84c:	af00      	add	r7, sp, #0
   1b84e:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1b850:	f00a fe0b 	bl	2646a <smp_chan_get>
	if (!smp) {
   1b854:	4605      	mov	r5, r0
   1b856:	b360      	cbz	r0, 1b8b2 <bt_smp_update_keys+0x6a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1b858:	1d06      	adds	r6, r0, #4
   1b85a:	2103      	movs	r1, #3
   1b85c:	4630      	mov	r0, r6
   1b85e:	f00a fdc6 	bl	263ee <atomic_test_bit>
   1b862:	b330      	cbz	r0, 1b8b2 <bt_smp_update_keys+0x6a>
	if (conn->le.keys) {
   1b864:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   1b868:	b108      	cbz	r0, 1b86e <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   1b86a:	f00b f897 	bl	2699c <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1b86e:	f104 0888 	add.w	r8, r4, #136	; 0x88
   1b872:	7a20      	ldrb	r0, [r4, #8]
   1b874:	4641      	mov	r1, r8
   1b876:	f000 f89d 	bl	1b9b4 <bt_keys_get_addr>
   1b87a:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (!conn->le.keys) {
   1b87e:	b9d8      	cbnz	r0, 1b8b8 <bt_smp_update_keys+0x70>
		LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1b880:	4640      	mov	r0, r8
   1b882:	f7f8 fe85 	bl	14590 <bt_addr_le_str>
   1b886:	466c      	mov	r4, sp
   1b888:	b088      	sub	sp, #32
   1b88a:	466a      	mov	r2, sp
   1b88c:	4b3b      	ldr	r3, [pc, #236]	; (1b97c <bt_smp_update_keys+0x134>)
   1b88e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b892:	f44f 7300 	mov.w	r3, #512	; 0x200
   1b896:	8393      	strh	r3, [r2, #28]
   1b898:	4b39      	ldr	r3, [pc, #228]	; (1b980 <bt_smp_update_keys+0x138>)
   1b89a:	483a      	ldr	r0, [pc, #232]	; (1b984 <bt_smp_update_keys+0x13c>)
   1b89c:	f842 3f10 	str.w	r3, [r2, #16]!
   1b8a0:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1b8a4:	f00a fdde 	bl	26464 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1b8a8:	2108      	movs	r1, #8
   1b8aa:	46a5      	mov	sp, r4
   1b8ac:	4628      	mov	r0, r5
   1b8ae:	f7ff fbfb 	bl	1b0a8 <smp_error>
}
   1b8b2:	46bd      	mov	sp, r7
   1b8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1b8b8:	210e      	movs	r1, #14
   1b8ba:	4630      	mov	r0, r6
   1b8bc:	f00a fd97 	bl	263ee <atomic_test_bit>
   1b8c0:	b128      	cbz	r0, 1b8ce <bt_smp_update_keys+0x86>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1b8c2:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   1b8c6:	7b53      	ldrb	r3, [r2, #13]
   1b8c8:	f043 0302 	orr.w	r3, r3, #2
   1b8cc:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1b8ce:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   1b8d0:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
	switch (smp->method) {
   1b8d4:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   1b8d6:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   1b8d8:	d83c      	bhi.n	1b954 <bt_smp_update_keys+0x10c>
   1b8da:	2a00      	cmp	r2, #0
   1b8dc:	d041      	beq.n	1b962 <bt_smp_update_keys+0x11a>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1b8de:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   1b8e2:	7b53      	ldrb	r3, [r2, #13]
   1b8e4:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1b8e8:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1b8ea:	7d2b      	ldrb	r3, [r5, #20]
   1b8ec:	7b69      	ldrb	r1, [r5, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1b8ee:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
	return MIN(req->max_key_size, rsp->max_key_size);
   1b8f2:	428b      	cmp	r3, r1
   1b8f4:	bf28      	it	cs
   1b8f6:	460b      	movcs	r3, r1
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1b8f8:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b8fa:	2105      	movs	r1, #5
   1b8fc:	4630      	mov	r0, r6
   1b8fe:	f00a fd76 	bl	263ee <atomic_test_bit>
   1b902:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
		conn->le.keys->flags |= BT_KEYS_SC;
   1b906:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1b908:	b3a0      	cbz	r0, 1b974 <bt_smp_update_keys+0x12c>
		conn->le.keys->flags |= BT_KEYS_SC;
   1b90a:	f042 0210 	orr.w	r2, r2, #16
   1b90e:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1b910:	210d      	movs	r1, #13
   1b912:	4630      	mov	r0, r6
   1b914:	f00a fd6b 	bl	263ee <atomic_test_bit>
   1b918:	2800      	cmp	r0, #0
   1b91a:	d0ca      	beq.n	1b8b2 <bt_smp_update_keys+0x6a>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1b91c:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   1b920:	2120      	movs	r1, #32
   1b922:	f00b f837 	bl	26994 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   1b926:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   1b92a:	f105 0147 	add.w	r1, r5, #71	; 0x47
   1b92e:	2210      	movs	r2, #16
   1b930:	301a      	adds	r0, #26
   1b932:	f009 f80c 	bl	2494e <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   1b936:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   1b93a:	2208      	movs	r2, #8
   1b93c:	2100      	movs	r1, #0
   1b93e:	3010      	adds	r0, #16
   1b940:	f009 f810 	bl	24964 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1b944:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   1b948:	2202      	movs	r2, #2
   1b94a:	2100      	movs	r1, #0
   1b94c:	3018      	adds	r0, #24
   1b94e:	f009 f809 	bl	24964 <memset>
   1b952:	e7ae      	b.n	1b8b2 <bt_smp_update_keys+0x6a>
	switch (smp->method) {
   1b954:	3a05      	subs	r2, #5
   1b956:	2a01      	cmp	r2, #1
   1b958:	d803      	bhi.n	1b962 <bt_smp_update_keys+0x11a>
		conn->le.keys->flags |= BT_KEYS_OOB;
   1b95a:	f043 0320 	orr.w	r3, r3, #32
   1b95e:	734b      	strb	r3, [r1, #13]
   1b960:	e7bd      	b.n	1b8de <bt_smp_update_keys+0x96>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   1b962:	f023 0320 	bic.w	r3, r3, #32
   1b966:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1b968:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   1b96c:	7b53      	ldrb	r3, [r2, #13]
   1b96e:	f023 0301 	bic.w	r3, r3, #1
   1b972:	e7b9      	b.n	1b8e8 <bt_smp_update_keys+0xa0>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1b974:	f022 0210 	bic.w	r2, r2, #16
   1b978:	735a      	strb	r2, [r3, #13]
   1b97a:	e79a      	b.n	1b8b2 <bt_smp_update_keys+0x6a>
   1b97c:	0002aa0c 	.word	0x0002aa0c
   1b980:	01000003 	.word	0x01000003
   1b984:	000281bc 	.word	0x000281bc

0001b988 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1b988:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1b98a:	4b07      	ldr	r3, [pc, #28]	; (1b9a8 <bt_smp_init+0x20>)
	}

	LOG_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1b98c:	4807      	ldr	r0, [pc, #28]	; (1b9ac <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1b98e:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
   1b992:	f003 0306 	and.w	r3, r3, #6
   1b996:	1f9a      	subs	r2, r3, #6
   1b998:	4253      	negs	r3, r2
   1b99a:	4153      	adcs	r3, r2
   1b99c:	4a04      	ldr	r2, [pc, #16]	; (1b9b0 <bt_smp_init+0x28>)
   1b99e:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1b9a0:	f7fb f9bc 	bl	16d1c <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1b9a4:	2000      	movs	r0, #0
   1b9a6:	bd08      	pop	{r3, pc}
   1b9a8:	20000388 	.word	0x20000388
   1b9ac:	20000668 	.word	0x20000668
   1b9b0:	20004116 	.word	0x20004116

0001b9b4 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   1b9b4:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1b9b6:	4c0f      	ldr	r4, [pc, #60]	; (1b9f4 <bt_keys_get_addr+0x40>)
   1b9b8:	f814 3b01 	ldrb.w	r3, [r4], #1
   1b9bc:	4283      	cmp	r3, r0
{
   1b9be:	4605      	mov	r5, r0
   1b9c0:	460e      	mov	r6, r1
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1b9c2:	d007      	beq.n	1b9d4 <bt_keys_get_addr+0x20>
	return memcmp(a, b, sizeof(*a));
   1b9c4:	490c      	ldr	r1, [pc, #48]	; (1b9f8 <bt_keys_get_addr+0x44>)
   1b9c6:	480d      	ldr	r0, [pc, #52]	; (1b9fc <bt_keys_get_addr+0x48>)
   1b9c8:	2207      	movs	r2, #7
   1b9ca:	f008 ff99 	bl	24900 <memcmp>
			first_free_slot = oldest - &key_pool[0];
		}
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   1b9ce:	b148      	cbz	r0, 1b9e4 <bt_keys_get_addr+0x30>
		return keys;
	}

	LOG_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   1b9d0:	2000      	movs	r0, #0
}
   1b9d2:	bd70      	pop	{r4, r5, r6, pc}
   1b9d4:	2207      	movs	r2, #7
   1b9d6:	4620      	mov	r0, r4
   1b9d8:	f008 ff92 	bl	24900 <memcmp>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1b9dc:	2800      	cmp	r0, #0
   1b9de:	d1f1      	bne.n	1b9c4 <bt_keys_get_addr+0x10>
		keys = &key_pool[i];
   1b9e0:	4804      	ldr	r0, [pc, #16]	; (1b9f4 <bt_keys_get_addr+0x40>)
   1b9e2:	e7f6      	b.n	1b9d2 <bt_keys_get_addr+0x1e>
	memcpy(dst, src, sizeof(*dst));
   1b9e4:	2207      	movs	r2, #7
   1b9e6:	4631      	mov	r1, r6
   1b9e8:	4804      	ldr	r0, [pc, #16]	; (1b9fc <bt_keys_get_addr+0x48>)
		keys->id = id;
   1b9ea:	f804 5c01 	strb.w	r5, [r4, #-1]
   1b9ee:	f008 ffae 	bl	2494e <memcpy>
}
   1b9f2:	e7f5      	b.n	1b9e0 <bt_keys_get_addr+0x2c>
   1b9f4:	200032a4 	.word	0x200032a4
   1b9f8:	0002967b 	.word	0x0002967b
   1b9fc:	200032a5 	.word	0x200032a5

0001ba00 <bt_keys_foreach_type>:
	}
}

void bt_keys_foreach_type(enum bt_keys_type type, void (*func)(struct bt_keys *keys, void *data),
			  void *data)
{
   1ba00:	b410      	push	{r4}
   1ba02:	460b      	mov	r3, r1
   1ba04:	4611      	mov	r1, r2
	int i;

	__ASSERT_NO_MSG(func != NULL);

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   1ba06:	4a04      	ldr	r2, [pc, #16]	; (1ba18 <bt_keys_foreach_type+0x18>)
   1ba08:	89d4      	ldrh	r4, [r2, #14]
   1ba0a:	4204      	tst	r4, r0
   1ba0c:	d002      	beq.n	1ba14 <bt_keys_foreach_type+0x14>
			func(&key_pool[i], data);
		}
	}
}
   1ba0e:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   1ba10:	4610      	mov	r0, r2
   1ba12:	4718      	bx	r3
}
   1ba14:	bc10      	pop	{r4}
   1ba16:	4770      	bx	lr
   1ba18:	200032a4 	.word	0x200032a4

0001ba1c <bt_keys_find>:

struct bt_keys *bt_keys_find(enum bt_keys_type type, uint8_t id, const bt_addr_le_t *addr)
{
   1ba1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(addr != NULL);

	LOG_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1ba20:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1ba5c <bt_keys_find+0x40>
{
   1ba24:	4605      	mov	r5, r0
   1ba26:	460e      	mov	r6, r1
   1ba28:	4617      	mov	r7, r2
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1ba2a:	2300      	movs	r3, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1ba2c:	f8b8 400e 	ldrh.w	r4, [r8, #14]
   1ba30:	f898 2000 	ldrb.w	r2, [r8]
   1ba34:	402c      	ands	r4, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1ba36:	b113      	cbz	r3, 1ba3e <bt_keys_find+0x22>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   1ba38:	2000      	movs	r0, #0
}
   1ba3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1ba3e:	2c00      	cmp	r4, #0
   1ba40:	d0fa      	beq.n	1ba38 <bt_keys_find+0x1c>
   1ba42:	4296      	cmp	r6, r2
   1ba44:	d1f8      	bne.n	1ba38 <bt_keys_find+0x1c>
	return memcmp(a, b, sizeof(*a));
   1ba46:	4806      	ldr	r0, [pc, #24]	; (1ba60 <bt_keys_find+0x44>)
   1ba48:	2207      	movs	r2, #7
   1ba4a:	4639      	mov	r1, r7
   1ba4c:	f008 ff58 	bl	24900 <memcmp>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1ba50:	2301      	movs	r3, #1
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1ba52:	2800      	cmp	r0, #0
   1ba54:	d1ea      	bne.n	1ba2c <bt_keys_find+0x10>
			return &key_pool[i];
   1ba56:	4801      	ldr	r0, [pc, #4]	; (1ba5c <bt_keys_find+0x40>)
   1ba58:	e7ef      	b.n	1ba3a <bt_keys_find+0x1e>
   1ba5a:	bf00      	nop
   1ba5c:	200032a4 	.word	0x200032a4
   1ba60:	200032a5 	.word	0x200032a5

0001ba64 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
   1ba64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1ba66:	780b      	ldrb	r3, [r1, #0]
   1ba68:	2b01      	cmp	r3, #1
   1ba6a:	4606      	mov	r6, r0
   1ba6c:	460c      	mov	r4, r1
   1ba6e:	d001      	beq.n	1ba74 <bt_keys_find_irk+0x10>
	__ASSERT_NO_MSG(addr != NULL);

	LOG_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
   1ba70:	2000      	movs	r0, #0
	}

	LOG_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
   1ba72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1ba74:	798b      	ldrb	r3, [r1, #6]
   1ba76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1ba7a:	2b40      	cmp	r3, #64	; 0x40
   1ba7c:	d1f8      	bne.n	1ba70 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1ba7e:	4d18      	ldr	r5, [pc, #96]	; (1bae0 <bt_keys_find_irk+0x7c>)
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1ba80:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   1ba82:	f105 073a 	add.w	r7, r5, #58	; 0x3a
   1ba86:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id == id &&
   1ba88:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1ba8a:	f002 0202 	and.w	r2, r2, #2
   1ba8e:	b1c3      	cbz	r3, 1bac2 <bt_keys_find_irk+0x5e>
   1ba90:	2300      	movs	r3, #0
   1ba92:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id != id) {
   1ba94:	7829      	ldrb	r1, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1ba96:	f002 0202 	and.w	r2, r2, #2
   1ba9a:	2b00      	cmp	r3, #0
   1ba9c:	d1e8      	bne.n	1ba70 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1ba9e:	2a00      	cmp	r2, #0
   1baa0:	d0e6      	beq.n	1ba70 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   1baa2:	42b1      	cmp	r1, r6
   1baa4:	d1e4      	bne.n	1ba70 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1baa6:	1c67      	adds	r7, r4, #1
   1baa8:	480e      	ldr	r0, [pc, #56]	; (1bae4 <bt_keys_find_irk+0x80>)
   1baaa:	4639      	mov	r1, r7
   1baac:	f008 ff95 	bl	249da <bt_rpa_irk_matches>
   1bab0:	2301      	movs	r3, #1
   1bab2:	2800      	cmp	r0, #0
   1bab4:	d0ed      	beq.n	1ba92 <bt_keys_find_irk+0x2e>
	memcpy(dst, src, sizeof(*dst));
   1bab6:	2206      	movs	r2, #6
   1bab8:	4639      	mov	r1, r7
   1baba:	480b      	ldr	r0, [pc, #44]	; (1bae8 <bt_keys_find_irk+0x84>)
   1babc:	f008 ff47 	bl	2494e <memcpy>
}
   1bac0:	e00b      	b.n	1bada <bt_keys_find_irk+0x76>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1bac2:	2a00      	cmp	r2, #0
   1bac4:	d0e5      	beq.n	1ba92 <bt_keys_find_irk+0x2e>
		if (key_pool[i].id == id &&
   1bac6:	42b0      	cmp	r0, r6
   1bac8:	d1e3      	bne.n	1ba92 <bt_keys_find_irk+0x2e>
	return memcmp(a, b, sizeof(*a));
   1baca:	2206      	movs	r2, #6
   1bacc:	4639      	mov	r1, r7
   1bace:	1c60      	adds	r0, r4, #1
   1bad0:	f008 ff16 	bl	24900 <memcmp>
   1bad4:	2301      	movs	r3, #1
   1bad6:	2800      	cmp	r0, #0
   1bad8:	d1d5      	bne.n	1ba86 <bt_keys_find_irk+0x22>
			return &key_pool[i];
   1bada:	4801      	ldr	r0, [pc, #4]	; (1bae0 <bt_keys_find_irk+0x7c>)
   1badc:	e7c9      	b.n	1ba72 <bt_keys_find_irk+0xe>
   1bade:	bf00      	nop
   1bae0:	200032a4 	.word	0x200032a4
   1bae4:	200032ce 	.word	0x200032ce
   1bae8:	200032de 	.word	0x200032de

0001baec <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
   1baec:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(addr != NULL);

	LOG_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
   1baee:	4c06      	ldr	r4, [pc, #24]	; (1bb08 <bt_keys_find_addr+0x1c>)
   1baf0:	7823      	ldrb	r3, [r4, #0]
   1baf2:	4283      	cmp	r3, r0
   1baf4:	d104      	bne.n	1bb00 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   1baf6:	2207      	movs	r2, #7
   1baf8:	1c60      	adds	r0, r4, #1
   1bafa:	f008 ff01 	bl	24900 <memcmp>
   1bafe:	b108      	cbz	r0, 1bb04 <bt_keys_find_addr+0x18>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   1bb00:	2000      	movs	r0, #0
}
   1bb02:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1bb04:	4620      	mov	r0, r4
   1bb06:	e7fc      	b.n	1bb02 <bt_keys_find_addr+0x16>
   1bb08:	200032a4 	.word	0x200032a4

0001bb0c <bt_crypto_f5>:
	return err;
}

int bt_crypto_f5(const uint8_t *w, const uint8_t *n1, const uint8_t *n2, const bt_addr_le_t *a1,
		 const bt_addr_le_t *a2, uint8_t *mackey, uint8_t *ltk)
{
   1bb0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bb10:	b09a      	sub	sp, #104	; 0x68
   1bb12:	461d      	mov	r5, r3
   1bb14:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	static const uint8_t salt[16] = {0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5, 0xa5, 0x38,
					 0x60, 0x37, 0x0b, 0xdb, 0x5a, 0x60, 0x83, 0xbe};
	uint8_t m[53] = {0x00,						 /* counter */
   1bb18:	4b2e      	ldr	r3, [pc, #184]	; (1bbd4 <bt_crypto_f5+0xc8>)
{
   1bb1a:	4616      	mov	r6, r2
	uint8_t m[53] = {0x00,						 /* counter */
   1bb1c:	aa0c      	add	r2, sp, #48	; 0x30
{
   1bb1e:	4684      	mov	ip, r0
   1bb20:	468a      	mov	sl, r1
	uint8_t m[53] = {0x00,						 /* counter */
   1bb22:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   1bb26:	4690      	mov	r8, r2
   1bb28:	6818      	ldr	r0, [r3, #0]
   1bb2a:	6859      	ldr	r1, [r3, #4]
   1bb2c:	4614      	mov	r4, r2
   1bb2e:	c403      	stmia	r4!, {r0, r1}
   1bb30:	3308      	adds	r3, #8
   1bb32:	4573      	cmp	r3, lr
   1bb34:	4622      	mov	r2, r4
   1bb36:	d1f7      	bne.n	1bb28 <bt_crypto_f5+0x1c>
   1bb38:	6818      	ldr	r0, [r3, #0]
   1bb3a:	791b      	ldrb	r3, [r3, #4]
   1bb3c:	6020      	str	r0, [r4, #0]
   1bb3e:	7123      	strb	r3, [r4, #4]

	LOG_DBG("w %s", bt_hex(w, 32));
	LOG_DBG("n1 %s", bt_hex(n1, 16));
	LOG_DBG("n2 %s", bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
   1bb40:	4661      	mov	r1, ip
   1bb42:	2220      	movs	r2, #32
   1bb44:	a804      	add	r0, sp, #16
   1bb46:	f00a ff37 	bl	269b8 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(salt, ws, 32, t);
   1bb4a:	4823      	ldr	r0, [pc, #140]	; (1bbd8 <bt_crypto_f5+0xcc>)
   1bb4c:	466b      	mov	r3, sp
   1bb4e:	2220      	movs	r2, #32
   1bb50:	a904      	add	r1, sp, #16
   1bb52:	f00a ff49 	bl	269e8 <bt_crypto_aes_cmac>
	if (err) {
   1bb56:	4604      	mov	r4, r0
   1bb58:	bbc0      	cbnz	r0, 1bbcc <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
   1bb5a:	2210      	movs	r2, #16
   1bb5c:	4651      	mov	r1, sl
   1bb5e:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   1bb62:	f00a ff29 	bl	269b8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1bb66:	2210      	movs	r2, #16
   1bb68:	4631      	mov	r1, r6
   1bb6a:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   1bb6e:	f00a ff23 	bl	269b8 <sys_memcpy_swap>
	m[37] = a1->type;
   1bb72:	4629      	mov	r1, r5
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1bb74:	2206      	movs	r2, #6
	m[37] = a1->type;
   1bb76:	f811 3b01 	ldrb.w	r3, [r1], #1
   1bb7a:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1bb7e:	f10d 0056 	add.w	r0, sp, #86	; 0x56
   1bb82:	f00a ff19 	bl	269b8 <sys_memcpy_swap>
	m[44] = a2->type;
   1bb86:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1bb88:	2206      	movs	r2, #6
	m[44] = a2->type;
   1bb8a:	f811 3b01 	ldrb.w	r3, [r1], #1
   1bb8e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1bb92:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
   1bb96:	f00a ff0f 	bl	269b8 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(t, m, sizeof(m), mackey);
   1bb9a:	464b      	mov	r3, r9
   1bb9c:	2235      	movs	r2, #53	; 0x35
   1bb9e:	4641      	mov	r1, r8
   1bba0:	4668      	mov	r0, sp
   1bba2:	f00a ff21 	bl	269e8 <bt_crypto_aes_cmac>
	if (err) {
   1bba6:	4604      	mov	r4, r0
   1bba8:	b980      	cbnz	r0, 1bbcc <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
   1bbaa:	4648      	mov	r0, r9
   1bbac:	f00a ff0e 	bl	269cc <sys_mem_swap.constprop.0>

	/* counter for ltk is 1 */
	m[0] = 0x01;
   1bbb0:	2301      	movs	r3, #1
   1bbb2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30

	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   1bbb6:	2235      	movs	r2, #53	; 0x35
   1bbb8:	463b      	mov	r3, r7
   1bbba:	4641      	mov	r1, r8
   1bbbc:	4668      	mov	r0, sp
   1bbbe:	f00a ff13 	bl	269e8 <bt_crypto_aes_cmac>
	if (err) {
   1bbc2:	4604      	mov	r4, r0
   1bbc4:	b910      	cbnz	r0, 1bbcc <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("ltk %s", bt_hex(ltk, 16));

	sys_mem_swap(ltk, 16);
   1bbc6:	4638      	mov	r0, r7
   1bbc8:	f00a ff00 	bl	269cc <sys_mem_swap.constprop.0>

	return 0;
}
   1bbcc:	4620      	mov	r0, r4
   1bbce:	b01a      	add	sp, #104	; 0x68
   1bbd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bbd4:	000282e6 	.word	0x000282e6
   1bbd8:	0002ad8d 	.word	0x0002ad8d

0001bbdc <bt_crypto_g2>:
	return 0;
}

int bt_crypto_g2(const uint8_t u[32], const uint8_t v[32], const uint8_t x[16], const uint8_t y[16],
		 uint32_t *passkey)
{
   1bbdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bbde:	b099      	sub	sp, #100	; 0x64
   1bbe0:	4614      	mov	r4, r2
   1bbe2:	460f      	mov	r7, r1
	LOG_DBG("u %s", bt_hex(u, 32));
	LOG_DBG("v %s", bt_hex(v, 32));
	LOG_DBG("x %s", bt_hex(x, 16));
	LOG_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
   1bbe4:	2220      	movs	r2, #32
   1bbe6:	4601      	mov	r1, r0
   1bbe8:	a804      	add	r0, sp, #16
{
   1bbea:	461e      	mov	r6, r3
   1bbec:	9d1e      	ldr	r5, [sp, #120]	; 0x78
	sys_memcpy_swap(m, u, 32);
   1bbee:	f00a fee3 	bl	269b8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1bbf2:	2220      	movs	r2, #32
   1bbf4:	4639      	mov	r1, r7
   1bbf6:	a80c      	add	r0, sp, #48	; 0x30
   1bbf8:	f00a fede 	bl	269b8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1bbfc:	2210      	movs	r2, #16
   1bbfe:	4631      	mov	r1, r6
   1bc00:	a814      	add	r0, sp, #80	; 0x50
   1bc02:	f00a fed9 	bl	269b8 <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
   1bc06:	4621      	mov	r1, r4
   1bc08:	2210      	movs	r2, #16
   1bc0a:	4668      	mov	r0, sp
   1bc0c:	f00a fed4 	bl	269b8 <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), xs);
   1bc10:	466b      	mov	r3, sp
   1bc12:	2250      	movs	r2, #80	; 0x50
   1bc14:	a904      	add	r1, sp, #16
   1bc16:	4618      	mov	r0, r3
   1bc18:	f00a fee6 	bl	269e8 <bt_crypto_aes_cmac>
	if (err) {
   1bc1c:	4604      	mov	r4, r0
   1bc1e:	b960      	cbnz	r0, 1bc3a <bt_crypto_g2+0x5e>
		return err;
	}
	LOG_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
   1bc20:	2204      	movs	r2, #4
   1bc22:	a903      	add	r1, sp, #12
   1bc24:	4628      	mov	r0, r5
   1bc26:	f008 fe92 	bl	2494e <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1bc2a:	682b      	ldr	r3, [r5, #0]
   1bc2c:	4a04      	ldr	r2, [pc, #16]	; (1bc40 <bt_crypto_g2+0x64>)
   1bc2e:	ba1b      	rev	r3, r3
   1bc30:	fbb3 f1f2 	udiv	r1, r3, r2
   1bc34:	fb02 3311 	mls	r3, r2, r1, r3
   1bc38:	602b      	str	r3, [r5, #0]

	LOG_DBG("passkey %u", *passkey);

	return 0;
}
   1bc3a:	4620      	mov	r0, r4
   1bc3c:	b019      	add	sp, #100	; 0x64
   1bc3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bc40:	000f4240 	.word	0x000f4240

0001bc44 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1bc44:	4b02      	ldr	r3, [pc, #8]	; (1bc50 <net_buf_pool_get+0xc>)
   1bc46:	222c      	movs	r2, #44	; 0x2c
   1bc48:	fb02 3000 	mla	r0, r2, r0, r3
   1bc4c:	4770      	bx	lr
   1bc4e:	bf00      	nop
   1bc50:	200009e0 	.word	0x200009e0

0001bc54 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1bc54:	7a82      	ldrb	r2, [r0, #10]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1bc56:	4b06      	ldr	r3, [pc, #24]	; (1bc70 <net_buf_id+0x1c>)
   1bc58:	212c      	movs	r1, #44	; 0x2c
   1bc5a:	fb01 3302 	mla	r3, r1, r2, r3
   1bc5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1bc60:	7f1b      	ldrb	r3, [r3, #28]
   1bc62:	331b      	adds	r3, #27
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1bc64:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1bc66:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1bc6a:	fbb0 f0f3 	udiv	r0, r0, r3
   1bc6e:	4770      	bx	lr
   1bc70:	200009e0 	.word	0x200009e0

0001bc74 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1bc74:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1bc76:	4b0a      	ldr	r3, [pc, #40]	; (1bca0 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1bc78:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1bc7a:	242c      	movs	r4, #44	; 0x2c
   1bc7c:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1bc80:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1bc82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bc84:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1bc86:	681a      	ldr	r2, [r3, #0]
   1bc88:	4294      	cmp	r4, r2
   1bc8a:	bf94      	ite	ls
   1bc8c:	600c      	strls	r4, [r1, #0]
   1bc8e:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1bc90:	e9d3 5400 	ldrd	r5, r4, [r3]
   1bc94:	f7ff ffde 	bl	1bc54 <net_buf_id>
}
   1bc98:	fb05 4000 	mla	r0, r5, r0, r4
   1bc9c:	bd38      	pop	{r3, r4, r5, pc}
   1bc9e:	bf00      	nop
   1bca0:	200009e0 	.word	0x200009e0

0001bca4 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1bca4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bca8:	4605      	mov	r5, r0
   1bcaa:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1bcac:	4610      	mov	r0, r2
   1bcae:	4619      	mov	r1, r3
{
   1bcb0:	4691      	mov	r9, r2
   1bcb2:	4698      	mov	r8, r3
   1bcb4:	4617      	mov	r7, r2
   1bcb6:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1bcb8:	f00b fee3 	bl	27a82 <sys_clock_timeout_end_calc>
   1bcbc:	4682      	mov	sl, r0
   1bcbe:	468b      	mov	fp, r1
	__asm__ volatile(
   1bcc0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bcc4:	f3ef 8111 	mrs	r1, BASEPRI
   1bcc8:	f383 8812 	msr	BASEPRI_MAX, r3
   1bccc:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1bcd0:	8b6b      	ldrh	r3, [r5, #26]
   1bcd2:	2b00      	cmp	r3, #0
   1bcd4:	d058      	beq.n	1bd88 <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1bcd6:	8b2a      	ldrh	r2, [r5, #24]
   1bcd8:	429a      	cmp	r2, r3
   1bcda:	d93c      	bls.n	1bd56 <net_buf_alloc_len+0xb2>
   1bcdc:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   1bcde:	2200      	movs	r2, #0
   1bce0:	2300      	movs	r3, #0
   1bce2:	4628      	mov	r0, r5
   1bce4:	f003 fcfe 	bl	1f6e4 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1bce8:	9900      	ldr	r1, [sp, #0]
   1bcea:	4604      	mov	r4, r0
   1bcec:	2800      	cmp	r0, #0
   1bcee:	d032      	beq.n	1bd56 <net_buf_alloc_len+0xb2>
	__asm__ volatile(
   1bcf0:	f381 8811 	msr	BASEPRI, r1
   1bcf4:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1bcf8:	9b01      	ldr	r3, [sp, #4]
   1bcfa:	2b00      	cmp	r3, #0
   1bcfc:	d055      	beq.n	1bdaa <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1bcfe:	ea58 0309 	orrs.w	r3, r8, r9
   1bd02:	d00f      	beq.n	1bd24 <net_buf_alloc_len+0x80>
   1bd04:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1bd08:	bf08      	it	eq
   1bd0a:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   1bd0e:	d009      	beq.n	1bd24 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1bd10:	f004 fbce 	bl	204b0 <sys_clock_tick_get>
   1bd14:	ebba 0700 	subs.w	r7, sl, r0
   1bd18:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
   1bd1c:	2e00      	cmp	r6, #0
   1bd1e:	bfbc      	itt	lt
   1bd20:	2700      	movlt	r7, #0
   1bd22:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1bd24:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1bd26:	4d26      	ldr	r5, [pc, #152]	; (1bdc0 <net_buf_alloc_len+0x11c>)
   1bd28:	f04f 082c 	mov.w	r8, #44	; 0x2c
   1bd2c:	fb08 5303 	mla	r3, r8, r3, r5
   1bd30:	463a      	mov	r2, r7
   1bd32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bd34:	681b      	ldr	r3, [r3, #0]
   1bd36:	a901      	add	r1, sp, #4
   1bd38:	f8d3 9000 	ldr.w	r9, [r3]
   1bd3c:	4620      	mov	r0, r4
   1bd3e:	4633      	mov	r3, r6
   1bd40:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1bd42:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   1bd44:	2800      	cmp	r0, #0
   1bd46:	d131      	bne.n	1bdac <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
   1bd48:	7aa0      	ldrb	r0, [r4, #10]
   1bd4a:	4621      	mov	r1, r4
   1bd4c:	fb00 5008 	mla	r0, r0, r8, r5
   1bd50:	f00b fc20 	bl	27594 <k_queue_prepend>
}
   1bd54:	e024      	b.n	1bda0 <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
   1bd56:	8b68      	ldrh	r0, [r5, #26]
   1bd58:	1e43      	subs	r3, r0, #1
   1bd5a:	836b      	strh	r3, [r5, #26]
   1bd5c:	f381 8811 	msr	BASEPRI, r1
   1bd60:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1bd64:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1bd66:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1bd68:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1bd6a:	331b      	adds	r3, #27
   1bd6c:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1bd70:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1bd72:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   1bd76:	4b12      	ldr	r3, [pc, #72]	; (1bdc0 <net_buf_alloc_len+0x11c>)
   1bd78:	4a12      	ldr	r2, [pc, #72]	; (1bdc4 <net_buf_alloc_len+0x120>)
   1bd7a:	1aeb      	subs	r3, r5, r3
   1bd7c:	109b      	asrs	r3, r3, #2
   1bd7e:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   1bd80:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   1bd82:	7f2b      	ldrb	r3, [r5, #28]
   1bd84:	72e3      	strb	r3, [r4, #11]
		goto success;
   1bd86:	e7b7      	b.n	1bcf8 <net_buf_alloc_len+0x54>
   1bd88:	f381 8811 	msr	BASEPRI, r1
   1bd8c:	f3bf 8f6f 	isb	sy
   1bd90:	464a      	mov	r2, r9
   1bd92:	4643      	mov	r3, r8
   1bd94:	4628      	mov	r0, r5
   1bd96:	f003 fca5 	bl	1f6e4 <z_impl_k_queue_get>
	if (!buf) {
   1bd9a:	4604      	mov	r4, r0
   1bd9c:	2800      	cmp	r0, #0
   1bd9e:	d1ab      	bne.n	1bcf8 <net_buf_alloc_len+0x54>
		return NULL;
   1bda0:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1bda2:	4620      	mov	r0, r4
   1bda4:	b003      	add	sp, #12
   1bda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1bdaa:	6163      	str	r3, [r4, #20]
	buf->frags = NULL;
   1bdac:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1bdae:	2201      	movs	r2, #1
	buf->frags = NULL;
   1bdb0:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   1bdb2:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   1bdb4:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   1bdb6:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1bdb8:	6963      	ldr	r3, [r4, #20]
   1bdba:	8262      	strh	r2, [r4, #18]
   1bdbc:	60e3      	str	r3, [r4, #12]
	return buf;
   1bdbe:	e7f0      	b.n	1bda2 <net_buf_alloc_len+0xfe>
   1bdc0:	200009e0 	.word	0x200009e0
   1bdc4:	ba2e8ba3 	.word	0xba2e8ba3

0001bdc8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1bdc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bdcc:	4d16      	ldr	r5, [pc, #88]	; (1be28 <net_buf_unref+0x60>)
   1bdce:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1bdd0:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1bdd2:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   1bdd4:	b90c      	cbnz	r4, 1bdda <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1bdd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1bdda:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   1bddc:	f8d4 8004 	ldr.w	r8, [r4, #4]
		if (--buf->ref > 0) {
   1bde0:	3b01      	subs	r3, #1
   1bde2:	b2db      	uxtb	r3, r3
   1bde4:	7223      	strb	r3, [r4, #8]
   1bde6:	2b00      	cmp	r3, #0
   1bde8:	d1f5      	bne.n	1bdd6 <net_buf_unref+0xe>
		if (buf->__buf) {
   1bdea:	6961      	ldr	r1, [r4, #20]
   1bdec:	b159      	cbz	r1, 1be06 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1bdee:	7a63      	ldrb	r3, [r4, #9]
   1bdf0:	07db      	lsls	r3, r3, #31
   1bdf2:	d407      	bmi.n	1be04 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1bdf4:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   1bdf6:	fb07 5303 	mla	r3, r7, r3, r5
   1bdfa:	4620      	mov	r0, r4
   1bdfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bdfe:	681b      	ldr	r3, [r3, #0]
   1be00:	689b      	ldr	r3, [r3, #8]
   1be02:	4798      	blx	r3
			buf->__buf = NULL;
   1be04:	6166      	str	r6, [r4, #20]
		pool = net_buf_pool_get(buf->pool_id);
   1be06:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   1be08:	60e6      	str	r6, [r4, #12]
		if (pool->destroy) {
   1be0a:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1be0e:	6066      	str	r6, [r4, #4]
		if (pool->destroy) {
   1be10:	6a1b      	ldr	r3, [r3, #32]
   1be12:	b11b      	cbz	r3, 1be1c <net_buf_unref+0x54>
			pool->destroy(buf);
   1be14:	4620      	mov	r0, r4
   1be16:	4798      	blx	r3
{
   1be18:	4644      	mov	r4, r8
   1be1a:	e7db      	b.n	1bdd4 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1be1c:	4621      	mov	r1, r4
   1be1e:	fb00 5007 	mla	r0, r0, r7, r5
   1be22:	f00b fbb7 	bl	27594 <k_queue_prepend>
}
   1be26:	e7f7      	b.n	1be18 <net_buf_unref+0x50>
   1be28:	200009e0 	.word	0x200009e0

0001be2c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1be2c:	4b08      	ldr	r3, [pc, #32]	; (1be50 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1be2e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1be30:	1ac3      	subs	r3, r0, r3
{
   1be32:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1be34:	4907      	ldr	r1, [pc, #28]	; (1be54 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   1be36:	109b      	asrs	r3, r3, #2
{
   1be38:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1be3a:	4359      	muls	r1, r3
   1be3c:	4806      	ldr	r0, [pc, #24]	; (1be58 <onoff_stop+0x2c>)
   1be3e:	2240      	movs	r2, #64	; 0x40
   1be40:	f00a ff21 	bl	26c86 <stop>
	notify(mgr, res);
   1be44:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1be46:	4601      	mov	r1, r0
	notify(mgr, res);
   1be48:	4620      	mov	r0, r4
}
   1be4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1be4e:	4718      	bx	r3
   1be50:	20003314 	.word	0x20003314
   1be54:	b6db6db7 	.word	0xb6db6db7
   1be58:	00027e94 	.word	0x00027e94

0001be5c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1be5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1be5e:	4c0c      	ldr	r4, [pc, #48]	; (1be90 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1be60:	4a0c      	ldr	r2, [pc, #48]	; (1be94 <onoff_start+0x38>)
   1be62:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   1be64:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1be66:	9300      	str	r3, [sp, #0]
{
   1be68:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1be6a:	460b      	mov	r3, r1
   1be6c:	490a      	ldr	r1, [pc, #40]	; (1be98 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   1be6e:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1be70:	4361      	muls	r1, r4
{
   1be72:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1be74:	4809      	ldr	r0, [pc, #36]	; (1be9c <onoff_start+0x40>)
   1be76:	f00a ff32 	bl	26cde <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1be7a:	1e01      	subs	r1, r0, #0
   1be7c:	da05      	bge.n	1be8a <onoff_start+0x2e>
		notify(mgr, err);
   1be7e:	4630      	mov	r0, r6
   1be80:	462b      	mov	r3, r5
	}
}
   1be82:	b002      	add	sp, #8
   1be84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   1be88:	4718      	bx	r3
}
   1be8a:	b002      	add	sp, #8
   1be8c:	bd70      	pop	{r4, r5, r6, pc}
   1be8e:	bf00      	nop
   1be90:	20003314 	.word	0x20003314
   1be94:	00026d49 	.word	0x00026d49
   1be98:	b6db6db7 	.word	0xb6db6db7
   1be9c:	00027e94 	.word	0x00027e94

0001bea0 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1bea0:	2200      	movs	r2, #0
{
   1bea2:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1bea4:	2101      	movs	r1, #1
{
   1bea6:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1bea8:	4610      	mov	r0, r2
   1beaa:	f7f7 fd5b 	bl	13964 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1beae:	480f      	ldr	r0, [pc, #60]	; (1beec <clk_init+0x4c>)
   1beb0:	f002 fb8a 	bl	1e5c8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1beb4:	4b0e      	ldr	r3, [pc, #56]	; (1bef0 <clk_init+0x50>)
   1beb6:	4298      	cmp	r0, r3
   1beb8:	d115      	bne.n	1bee6 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1beba:	f00b f980 	bl	271be <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1bebe:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1bec0:	490c      	ldr	r1, [pc, #48]	; (1bef4 <clk_init+0x54>)
   1bec2:	4630      	mov	r0, r6
   1bec4:	f007 febd 	bl	23c42 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1bec8:	2800      	cmp	r0, #0
   1beca:	db0b      	blt.n	1bee4 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1becc:	2501      	movs	r5, #1
   1bece:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   1bed0:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1bed2:	4908      	ldr	r1, [pc, #32]	; (1bef4 <clk_init+0x54>)
   1bed4:	f104 001c 	add.w	r0, r4, #28
   1bed8:	f007 feb3 	bl	23c42 <onoff_manager_init>
		if (err < 0) {
   1bedc:	2800      	cmp	r0, #0
   1bede:	db01      	blt.n	1bee4 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1bee0:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   1bee2:	2000      	movs	r0, #0
}
   1bee4:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1bee6:	f06f 0004 	mvn.w	r0, #4
   1beea:	e7fb      	b.n	1bee4 <clk_init+0x44>
   1beec:	0001bf2d 	.word	0x0001bf2d
   1bef0:	0bad0000 	.word	0x0bad0000
   1bef4:	00028898 	.word	0x00028898

0001bef8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1bef8:	b570      	push	{r4, r5, r6, lr}
   1befa:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1befc:	230c      	movs	r3, #12
   1befe:	4809      	ldr	r0, [pc, #36]	; (1bf24 <clkstarted_handle.constprop.0+0x2c>)
   1bf00:	434b      	muls	r3, r1
   1bf02:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1bf04:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1bf08:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   1bf0a:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1bf0c:	4418      	add	r0, r3
	sub_data->cb = NULL;
   1bf0e:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1bf10:	f00a fea6 	bl	26c60 <set_on_state>
	if (callback) {
   1bf14:	b12d      	cbz	r5, 1bf22 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1bf16:	4632      	mov	r2, r6
   1bf18:	462b      	mov	r3, r5
   1bf1a:	4803      	ldr	r0, [pc, #12]	; (1bf28 <clkstarted_handle.constprop.0+0x30>)
}
   1bf1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1bf20:	4718      	bx	r3
}
   1bf22:	bd70      	pop	{r4, r5, r6, pc}
   1bf24:	20003314 	.word	0x20003314
   1bf28:	00027e94 	.word	0x00027e94

0001bf2c <clock_event_handler>:
	switch (event) {
   1bf2c:	b110      	cbz	r0, 1bf34 <clock_event_handler+0x8>
   1bf2e:	2801      	cmp	r0, #1
   1bf30:	d004      	beq.n	1bf3c <clock_event_handler+0x10>
   1bf32:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1bf34:	4b03      	ldr	r3, [pc, #12]	; (1bf44 <clock_event_handler+0x18>)
   1bf36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bf38:	075b      	lsls	r3, r3, #29
   1bf3a:	d101      	bne.n	1bf40 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1bf3c:	f7ff bfdc 	b.w	1bef8 <clkstarted_handle.constprop.0>
}
   1bf40:	4770      	bx	lr
   1bf42:	bf00      	nop
   1bf44:	20003314 	.word	0x20003314

0001bf48 <generic_hfclk_start>:
{
   1bf48:	b508      	push	{r3, lr}
	__asm__ volatile(
   1bf4a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bf4e:	f3ef 8111 	mrs	r1, BASEPRI
   1bf52:	f383 8812 	msr	BASEPRI_MAX, r3
   1bf56:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1bf5a:	4a12      	ldr	r2, [pc, #72]	; (1bfa4 <generic_hfclk_start+0x5c>)
   1bf5c:	6813      	ldr	r3, [r2, #0]
   1bf5e:	f043 0002 	orr.w	r0, r3, #2
   1bf62:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1bf64:	07da      	lsls	r2, r3, #31
   1bf66:	d408      	bmi.n	1bf7a <generic_hfclk_start+0x32>
	__asm__ volatile(
   1bf68:	f381 8811 	msr	BASEPRI, r1
   1bf6c:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1bf70:	2001      	movs	r0, #1
}
   1bf72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1bf76:	f002 bb17 	b.w	1e5a8 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1bf7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1bf7e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1bf82:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1bf86:	07d3      	lsls	r3, r2, #31
   1bf88:	d5ee      	bpl.n	1bf68 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   1bf8a:	4807      	ldr	r0, [pc, #28]	; (1bfa8 <generic_hfclk_start+0x60>)
   1bf8c:	f00a fe68 	bl	26c60 <set_on_state>
   1bf90:	f381 8811 	msr	BASEPRI, r1
   1bf94:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   1bf98:	2000      	movs	r0, #0
}
   1bf9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1bf9e:	f7ff bfab 	b.w	1bef8 <clkstarted_handle.constprop.0>
   1bfa2:	bf00      	nop
   1bfa4:	20003364 	.word	0x20003364
   1bfa8:	20003354 	.word	0x20003354

0001bfac <api_blocking_start>:
{
   1bfac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1bfae:	2200      	movs	r2, #0
   1bfb0:	2301      	movs	r3, #1
   1bfb2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1bfb6:	ab04      	add	r3, sp, #16
   1bfb8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1bfbc:	4a09      	ldr	r2, [pc, #36]	; (1bfe4 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1bfbe:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1bfc2:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1bfc4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1bfc8:	f00a feb7 	bl	26d3a <api_start>
	if (err < 0) {
   1bfcc:	2800      	cmp	r0, #0
   1bfce:	db05      	blt.n	1bfdc <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1bfd0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1bfd4:	2300      	movs	r3, #0
   1bfd6:	4668      	mov	r0, sp
   1bfd8:	f003 fbde 	bl	1f798 <z_impl_k_sem_take>
}
   1bfdc:	b007      	add	sp, #28
   1bfde:	f85d fb04 	ldr.w	pc, [sp], #4
   1bfe2:	bf00      	nop
   1bfe4:	00026d67 	.word	0x00026d67

0001bfe8 <generic_hfclk_stop>:
{
   1bfe8:	b510      	push	{r4, lr}
	__asm__ volatile(
   1bfea:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bfee:	f3ef 8411 	mrs	r4, BASEPRI
   1bff2:	f383 8812 	msr	BASEPRI_MAX, r3
   1bff6:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1bffa:	4a07      	ldr	r2, [pc, #28]	; (1c018 <generic_hfclk_stop+0x30>)
   1bffc:	6813      	ldr	r3, [r2, #0]
   1bffe:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   1c002:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   1c004:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1c006:	d402      	bmi.n	1c00e <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1c008:	2001      	movs	r0, #1
   1c00a:	f00b f8d3 	bl	271b4 <nrfx_clock_stop>
	__asm__ volatile(
   1c00e:	f384 8811 	msr	BASEPRI, r4
   1c012:	f3bf 8f6f 	isb	sy
}
   1c016:	bd10      	pop	{r4, pc}
   1c018:	20003364 	.word	0x20003364

0001c01c <z_nrf_clock_control_lf_on>:
{
   1c01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c020:	4938      	ldr	r1, [pc, #224]	; (1c104 <z_nrf_clock_control_lf_on+0xe8>)
   1c022:	f3bf 8f5b 	dmb	ish
   1c026:	4607      	mov	r7, r0
   1c028:	2201      	movs	r2, #1
   1c02a:	e851 3f00 	ldrex	r3, [r1]
   1c02e:	e841 2000 	strex	r0, r2, [r1]
   1c032:	2800      	cmp	r0, #0
   1c034:	d1f9      	bne.n	1c02a <z_nrf_clock_control_lf_on+0xe>
   1c036:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1c03a:	b933      	cbnz	r3, 1c04a <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1c03c:	4932      	ldr	r1, [pc, #200]	; (1c108 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
   1c03e:	4833      	ldr	r0, [pc, #204]	; (1c10c <z_nrf_clock_control_lf_on+0xf0>)
   1c040:	604b      	str	r3, [r1, #4]
   1c042:	60cb      	str	r3, [r1, #12]
   1c044:	608a      	str	r2, [r1, #8]
   1c046:	f007 fe0f 	bl	23c68 <onoff_request>
	switch (start_mode) {
   1c04a:	1e7b      	subs	r3, r7, #1
   1c04c:	2b01      	cmp	r3, #1
   1c04e:	d82b      	bhi.n	1c0a8 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1c050:	2f01      	cmp	r7, #1
   1c052:	d107      	bne.n	1c064 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1c054:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c058:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1c05c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1c060:	2b01      	cmp	r3, #1
   1c062:	d021      	beq.n	1c0a8 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c064:	f00b f9ea 	bl	2743c <k_is_in_isr>
   1c068:	4605      	mov	r5, r0
   1c06a:	b9f8      	cbnz	r0, 1c0ac <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
   1c06c:	4b28      	ldr	r3, [pc, #160]	; (1c110 <z_nrf_clock_control_lf_on+0xf4>)
   1c06e:	781b      	ldrb	r3, [r3, #0]
   1c070:	b1e3      	cbz	r3, 1c0ac <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
   1c072:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c076:	2202      	movs	r2, #2
   1c078:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1c07c:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c07e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1c114 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1c082:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1c086:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1c08a:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   1c08e:	03d2      	lsls	r2, r2, #15
   1c090:	d516      	bpl.n	1c0c0 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1c092:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1c096:	2b01      	cmp	r3, #1
   1c098:	d001      	beq.n	1c09e <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1c09a:	2f01      	cmp	r7, #1
   1c09c:	d110      	bne.n	1c0c0 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
   1c09e:	b35d      	cbz	r5, 1c0f8 <z_nrf_clock_control_lf_on+0xdc>
   1c0a0:	f386 8811 	msr	BASEPRI, r6
   1c0a4:	f3bf 8f6f 	isb	sy
}
   1c0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1c0ac:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c0b0:	f3ef 8611 	mrs	r6, BASEPRI
   1c0b4:	f383 8812 	msr	BASEPRI_MAX, r3
   1c0b8:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c0bc:	2501      	movs	r5, #1
   1c0be:	e7de      	b.n	1c07e <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1c0c0:	b1ad      	cbz	r5, 1c0ee <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1c0c2:	4630      	mov	r0, r6
   1c0c4:	f7f7 fbac 	bl	13820 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1c0c8:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1c0cc:	2b00      	cmp	r3, #0
   1c0ce:	d1da      	bne.n	1c086 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1c0d0:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1c0d4:	2a00      	cmp	r2, #0
   1c0d6:	d0d6      	beq.n	1c086 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c0d8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1c0dc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1c0e0:	2301      	movs	r3, #1
   1c0e2:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   1c0e6:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c0ea:	60a3      	str	r3, [r4, #8]
}
   1c0ec:	e7cb      	b.n	1c086 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
   1c0ee:	2100      	movs	r1, #0
   1c0f0:	2021      	movs	r0, #33	; 0x21
   1c0f2:	f004 f80b 	bl	2010c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1c0f6:	e7e7      	b.n	1c0c8 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
   1c0f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c0fc:	2202      	movs	r2, #2
   1c0fe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1c102:	e7d1      	b.n	1c0a8 <z_nrf_clock_control_lf_on+0x8c>
   1c104:	20003310 	.word	0x20003310
   1c108:	20003300 	.word	0x20003300
   1c10c:	20003330 	.word	0x20003330
   1c110:	2000461d 	.word	0x2000461d
   1c114:	e000e100 	.word	0xe000e100

0001c118 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
   1c118:	b508      	push	{r3, lr}
   1c11a:	4807      	ldr	r0, [pc, #28]	; (1c138 <uart_console_init+0x20>)
   1c11c:	f00b f8c0 	bl	272a0 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   1c120:	b138      	cbz	r0, 1c132 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   1c122:	4806      	ldr	r0, [pc, #24]	; (1c13c <uart_console_init+0x24>)
   1c124:	f7f8 f9b0 	bl	14488 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1c128:	4804      	ldr	r0, [pc, #16]	; (1c13c <uart_console_init+0x24>)
   1c12a:	f7f5 fde5 	bl	11cf8 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1c12e:	2000      	movs	r0, #0
}
   1c130:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1c132:	f06f 0012 	mvn.w	r0, #18
   1c136:	e7fb      	b.n	1c130 <uart_console_init+0x18>
   1c138:	00027f24 	.word	0x00027f24
   1c13c:	0001c141 	.word	0x0001c141

0001c140 <console_out>:
	if ('\n' == c) {
   1c140:	280a      	cmp	r0, #10
{
   1c142:	b538      	push	{r3, r4, r5, lr}
   1c144:	4d07      	ldr	r5, [pc, #28]	; (1c164 <console_out+0x24>)
   1c146:	4604      	mov	r4, r0
	if ('\n' == c) {
   1c148:	d104      	bne.n	1c154 <console_out+0x14>
   1c14a:	68ab      	ldr	r3, [r5, #8]
   1c14c:	210d      	movs	r1, #13
   1c14e:	685b      	ldr	r3, [r3, #4]
   1c150:	4628      	mov	r0, r5
   1c152:	4798      	blx	r3
   1c154:	68ab      	ldr	r3, [r5, #8]
   1c156:	4803      	ldr	r0, [pc, #12]	; (1c164 <console_out+0x24>)
   1c158:	685b      	ldr	r3, [r3, #4]
   1c15a:	b2e1      	uxtb	r1, r4
   1c15c:	4798      	blx	r3
}
   1c15e:	4620      	mov	r0, r4
   1c160:	bd38      	pop	{r3, r4, r5, pc}
   1c162:	bf00      	nop
   1c164:	00027f24 	.word	0x00027f24

0001c168 <random_byte_get>:
   1c168:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c16c:	f3ef 8211 	mrs	r2, BASEPRI
   1c170:	f383 8812 	msr	BASEPRI_MAX, r3
   1c174:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1c178:	4b09      	ldr	r3, [pc, #36]	; (1c1a0 <random_byte_get+0x38>)
   1c17a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1c17e:	b161      	cbz	r1, 1c19a <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c180:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1c182:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c186:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1c18a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1c18e:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1c190:	f382 8811 	msr	BASEPRI, r2
   1c194:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1c198:	4770      	bx	lr
	int retval = -EAGAIN;
   1c19a:	f06f 000a 	mvn.w	r0, #10
   1c19e:	e7f7      	b.n	1c190 <random_byte_get+0x28>
   1c1a0:	4000d000 	.word	0x4000d000

0001c1a4 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1c1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c1a6:	4603      	mov	r3, r0
   1c1a8:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   1c1aa:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   1c1ac:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   1c1b0:	f04f 0540 	mov.w	r5, #64	; 0x40
   1c1b4:	f3ef 8211 	mrs	r2, BASEPRI
   1c1b8:	f385 8812 	msr	BASEPRI_MAX, r5
   1c1bc:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1c1c0:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1c1c2:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1c1c6:	1be4      	subs	r4, r4, r7
   1c1c8:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   1c1cc:	42a0      	cmp	r0, r4
		len = available;
   1c1ce:	bf88      	it	hi
   1c1d0:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1c1d2:	183e      	adds	r6, r7, r0
   1c1d4:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   1c1d8:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   1c1da:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   1c1dc:	f382 8811 	msr	BASEPRI, r2
   1c1e0:	f3bf 8f6f 	isb	sy
   1c1e4:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   1c1e6:	428a      	cmp	r2, r1
   1c1e8:	d117      	bne.n	1c21a <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1c1ea:	4577      	cmp	r7, lr
   1c1ec:	d10d      	bne.n	1c20a <rng_pool_get+0x66>
	__asm__ volatile(
   1c1ee:	f04f 0140 	mov.w	r1, #64	; 0x40
   1c1f2:	f3ef 8211 	mrs	r2, BASEPRI
   1c1f6:	f381 8812 	msr	BASEPRI_MAX, r1
   1c1fa:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1c1fe:	7819      	ldrb	r1, [r3, #0]
   1c200:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   1c202:	f382 8811 	msr	BASEPRI, r2
   1c206:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   1c20a:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   1c20c:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   1c20e:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1c210:	bf22      	ittt	cs
   1c212:	4b06      	ldrcs	r3, [pc, #24]	; (1c22c <rng_pool_get+0x88>)
   1c214:	2201      	movcs	r2, #1
   1c216:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1c218:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1c21a:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   1c21c:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1c21e:	7976      	ldrb	r6, [r6, #5]
   1c220:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   1c224:	ea05 050c 	and.w	r5, r5, ip
   1c228:	e7dd      	b.n	1c1e6 <rng_pool_get+0x42>
   1c22a:	bf00      	nop
   1c22c:	4000d000 	.word	0x4000d000

0001c230 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1c230:	43db      	mvns	r3, r3
{
   1c232:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1c236:	f013 0501 	ands.w	r5, r3, #1
{
   1c23a:	460e      	mov	r6, r1
   1c23c:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1c23e:	d004      	beq.n	1c24a <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1c240:	4823      	ldr	r0, [pc, #140]	; (1c2d0 <entropy_nrf5_get_entropy_isr+0xa0>)
   1c242:	f7ff ffaf 	bl	1c1a4 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1c246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1c24a:	b3a2      	cbz	r2, 1c2b6 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1c24c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c250:	f3ef 8811 	mrs	r8, BASEPRI
   1c254:	f383 8812 	msr	BASEPRI_MAX, r3
   1c258:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1c25c:	200d      	movs	r0, #13
   1c25e:	f7f7 fb73 	bl	13948 <arch_irq_is_enabled>
   1c262:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1c264:	200d      	movs	r0, #13
   1c266:	f7f7 fb5b 	bl	13920 <arch_irq_disable>
	__asm__ volatile(
   1c26a:	f388 8811 	msr	BASEPRI, r8
   1c26e:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c272:	f8df a060 	ldr.w	sl, [pc, #96]	; 1c2d4 <entropy_nrf5_get_entropy_isr+0xa4>
   1c276:	f8df 8060 	ldr.w	r8, [pc, #96]	; 1c2d8 <entropy_nrf5_get_entropy_isr+0xa8>
   1c27a:	f8ca 5100 	str.w	r5, [sl, #256]	; 0x100
   1c27e:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   1c282:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1c286:	2301      	movs	r3, #1
   1c288:	f8ca 3000 	str.w	r3, [sl]
   1c28c:	4625      	mov	r5, r4
   1c28e:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1c292:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1c296:	b183      	cbz	r3, 1c2ba <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1c298:	f7ff ff66 	bl	1c168 <random_byte_get>
			if (byte < 0) {
   1c29c:	1e03      	subs	r3, r0, #0
   1c29e:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
   1c2a2:	dbf6      	blt.n	1c292 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   1c2a4:	3d01      	subs	r5, #1
   1c2a6:	b2ad      	uxth	r5, r5
   1c2a8:	5573      	strb	r3, [r6, r5]
		} while (len);
   1c2aa:	2d00      	cmp	r5, #0
   1c2ac:	d1f1      	bne.n	1c292 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1c2ae:	b117      	cbz	r7, 1c2b6 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1c2b0:	200d      	movs	r0, #13
   1c2b2:	f7f7 fb27 	bl	13904 <arch_irq_enable>
	return cnt;
   1c2b6:	4620      	mov	r0, r4
   1c2b8:	e7c5      	b.n	1c246 <entropy_nrf5_get_entropy_isr+0x16>
	__asm__ volatile(
   1c2ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c2be:	f3ef 8011 	mrs	r0, BASEPRI
   1c2c2:	f383 8812 	msr	BASEPRI_MAX, r3
   1c2c6:	f3bf 8f6f 	isb	sy
	arch_cpu_atomic_idle(key);
   1c2ca:	f7f7 faa9 	bl	13820 <arch_cpu_atomic_idle>
}
   1c2ce:	e7e0      	b.n	1c292 <entropy_nrf5_get_entropy_isr+0x62>
   1c2d0:	20003398 	.word	0x20003398
   1c2d4:	4000d000 	.word	0x4000d000
   1c2d8:	e000e100 	.word	0xe000e100

0001c2dc <entropy_nrf5_get_entropy>:
{
   1c2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   1c2e0:	4f12      	ldr	r7, [pc, #72]	; (1c32c <entropy_nrf5_get_entropy+0x50>)
   1c2e2:	460d      	mov	r5, r1
   1c2e4:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1c2e6:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   1c2ea:	b914      	cbnz	r4, 1c2f2 <entropy_nrf5_get_entropy+0x16>
}
   1c2ec:	4620      	mov	r0, r4
   1c2ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c2f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c2f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c2fa:	4638      	mov	r0, r7
   1c2fc:	f003 fa4c 	bl	1f798 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1c300:	4622      	mov	r2, r4
   1c302:	4629      	mov	r1, r5
   1c304:	4640      	mov	r0, r8
   1c306:	f7ff ff4d 	bl	1c1a4 <rng_pool_get>
   1c30a:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1c30c:	4638      	mov	r0, r7
   1c30e:	f003 fa1d 	bl	1f74c <z_impl_k_sem_give>
		if (bytes == 0U) {
   1c312:	b93e      	cbnz	r6, 1c324 <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
   1c314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c31c:	4804      	ldr	r0, [pc, #16]	; (1c330 <entropy_nrf5_get_entropy+0x54>)
   1c31e:	f003 fa3b 	bl	1f798 <z_impl_k_sem_take>
	while (len) {
   1c322:	e7e6      	b.n	1c2f2 <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
   1c324:	1ba4      	subs	r4, r4, r6
   1c326:	b2a4      	uxth	r4, r4
		buf += bytes;
   1c328:	4435      	add	r5, r6
   1c32a:	e7de      	b.n	1c2ea <entropy_nrf5_get_entropy+0xe>
   1c32c:	20003368 	.word	0x20003368
   1c330:	20003380 	.word	0x20003380

0001c334 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1c334:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1c336:	4c19      	ldr	r4, [pc, #100]	; (1c39c <entropy_nrf5_init+0x68>)
   1c338:	2201      	movs	r2, #1
   1c33a:	4611      	mov	r1, r2
   1c33c:	4620      	mov	r0, r4
   1c33e:	f00b f937 	bl	275b0 <z_impl_k_sem_init>
   1c342:	2201      	movs	r2, #1
   1c344:	2100      	movs	r1, #0
   1c346:	f104 0018 	add.w	r0, r4, #24
   1c34a:	f00b f931 	bl	275b0 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1c34e:	f240 4307 	movw	r3, #1031	; 0x407
   1c352:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1c356:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1c35a:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1c35c:	230c      	movs	r3, #12
   1c35e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1c362:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1c364:	4b0e      	ldr	r3, [pc, #56]	; (1c3a0 <entropy_nrf5_init+0x6c>)
   1c366:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1c36a:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1c36e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1c372:	f022 0201 	bic.w	r2, r2, #1
   1c376:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1c37a:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c37c:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1c380:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1c384:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1c388:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1c38a:	6019      	str	r1, [r3, #0]
   1c38c:	200d      	movs	r0, #13
   1c38e:	f7f7 fae9 	bl	13964 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1c392:	200d      	movs	r0, #13
   1c394:	f7f7 fab6 	bl	13904 <arch_irq_enable>

	return 0;
}
   1c398:	4628      	mov	r0, r5
   1c39a:	bd38      	pop	{r3, r4, r5, pc}
   1c39c:	20003368 	.word	0x20003368
   1c3a0:	4000d000 	.word	0x4000d000

0001c3a4 <isr>:
{
   1c3a4:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1c3a6:	f7ff fedf 	bl	1c168 <random_byte_get>
	if (byte < 0) {
   1c3aa:	2800      	cmp	r0, #0
   1c3ac:	db20      	blt.n	1c3f0 <isr+0x4c>
	uint8_t last  = rngp->last;
   1c3ae:	4b17      	ldr	r3, [pc, #92]	; (1c40c <isr+0x68>)
   1c3b0:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1c3b4:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1c3b8:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1c3bc:	1b14      	subs	r4, r2, r4
   1c3be:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1c3c2:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1c3c4:	d10d      	bne.n	1c3e2 <isr+0x3e>
	uint8_t last  = rngp->last;
   1c3c6:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1c3ca:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1c3ce:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1c3d2:	1b14      	subs	r4, r2, r4
   1c3d4:	ea31 0404 	bics.w	r4, r1, r4
   1c3d8:	d10b      	bne.n	1c3f2 <isr+0x4e>
   1c3da:	4b0d      	ldr	r3, [pc, #52]	; (1c410 <isr+0x6c>)
   1c3dc:	2201      	movs	r2, #1
   1c3de:	605a      	str	r2, [r3, #4]
}
   1c3e0:	e00e      	b.n	1c400 <isr+0x5c>
	rngp->buffer[last] = byte;
   1c3e2:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   1c3e4:	3201      	adds	r2, #1
   1c3e6:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   1c3e8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1c3ec:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   1c3f0:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1c3f2:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   1c3f4:	3201      	adds	r2, #1
   1c3f6:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   1c3f8:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1c3fc:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1c400:	4804      	ldr	r0, [pc, #16]	; (1c414 <isr+0x70>)
}
   1c402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c406:	f003 b9a1 	b.w	1f74c <z_impl_k_sem_give>
   1c40a:	bf00      	nop
   1c40c:	20003368 	.word	0x20003368
   1c410:	4000d000 	.word	0x4000d000
   1c414:	20003380 	.word	0x20003380

0001c418 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   1c418:	b530      	push	{r4, r5, lr}
	return port->config;
   1c41a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1c41c:	7b05      	ldrb	r5, [r0, #12]
   1c41e:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   1c422:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1c426:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1c428:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1c42c:	d105      	bne.n	1c43a <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1c42e:	4620      	mov	r0, r4
   1c430:	f002 fc48 	bl	1ecc4 <nrfx_gpiote_trigger_disable>

		return 0;
   1c434:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   1c436:	b005      	add	sp, #20
   1c438:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c43a:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1c43c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c440:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1c444:	d114      	bne.n	1c470 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1c446:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c44a:	bf0c      	ite	eq
   1c44c:	2304      	moveq	r3, #4
   1c44e:	2305      	movne	r3, #5
   1c450:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c454:	2300      	movs	r3, #0
   1c456:	4619      	mov	r1, r3
   1c458:	aa02      	add	r2, sp, #8
   1c45a:	4620      	mov	r0, r4
   1c45c:	f002 fa70 	bl	1e940 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1c460:	4b1f      	ldr	r3, [pc, #124]	; (1c4e0 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   1c462:	4298      	cmp	r0, r3
   1c464:	d139      	bne.n	1c4da <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1c466:	2101      	movs	r1, #1
   1c468:	4620      	mov	r0, r4
   1c46a:	f002 fbe3 	bl	1ec34 <nrfx_gpiote_trigger_enable>
	return 0;
   1c46e:	e7e1      	b.n	1c434 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1c470:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1c474:	d026      	beq.n	1c4c4 <gpio_nrfx_pin_interrupt_configure+0xac>
   1c476:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1c47a:	bf14      	ite	ne
   1c47c:	2301      	movne	r3, #1
   1c47e:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c480:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1c484:	6883      	ldr	r3, [r0, #8]
   1c486:	40cb      	lsrs	r3, r1
   1c488:	07d9      	lsls	r1, r3, #31
   1c48a:	d4e3      	bmi.n	1c454 <gpio_nrfx_pin_interrupt_configure+0x3c>
   1c48c:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1c490:	d1e0      	bne.n	1c454 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   1c492:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
   1c494:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1c496:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
   1c49a:	4a12      	ldr	r2, [pc, #72]	; (1c4e4 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1c49c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   1c4a0:	bf18      	it	ne
   1c4a2:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1c4a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1c4aa:	07db      	lsls	r3, r3, #31
   1c4ac:	d4d2      	bmi.n	1c454 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c4ae:	f10d 0507 	add.w	r5, sp, #7
   1c4b2:	4629      	mov	r1, r5
   1c4b4:	4620      	mov	r0, r4
   1c4b6:	f002 fb69 	bl	1eb8c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1c4ba:	4b0b      	ldr	r3, [pc, #44]	; (1c4e8 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   1c4bc:	4298      	cmp	r0, r3
   1c4be:	d003      	beq.n	1c4c8 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
   1c4c0:	9503      	str	r5, [sp, #12]
   1c4c2:	e7c7      	b.n	1c454 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1c4c4:	2303      	movs	r3, #3
   1c4c6:	e7db      	b.n	1c480 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   1c4c8:	4628      	mov	r0, r5
   1c4ca:	f002 fbad 	bl	1ec28 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1c4ce:	4b04      	ldr	r3, [pc, #16]	; (1c4e0 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   1c4d0:	4298      	cmp	r0, r3
   1c4d2:	d0f5      	beq.n	1c4c0 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
   1c4d4:	f06f 000b 	mvn.w	r0, #11
   1c4d8:	e7ad      	b.n	1c436 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1c4da:	f06f 0015 	mvn.w	r0, #21
   1c4de:	e7aa      	b.n	1c436 <gpio_nrfx_pin_interrupt_configure+0x1e>
   1c4e0:	0bad0000 	.word	0x0bad0000
   1c4e4:	50000300 	.word	0x50000300
   1c4e8:	0bad0004 	.word	0x0bad0004

0001c4ec <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1c4ec:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1c4ee:	f002 fb8b 	bl	1ec08 <nrfx_gpiote_is_init>
   1c4f2:	4604      	mov	r4, r0
   1c4f4:	b968      	cbnz	r0, 1c512 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1c4f6:	f002 fb5f 	bl	1ebb8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1c4fa:	4b08      	ldr	r3, [pc, #32]	; (1c51c <gpio_nrfx_init+0x30>)
   1c4fc:	4298      	cmp	r0, r3
   1c4fe:	d10a      	bne.n	1c516 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1c500:	4807      	ldr	r0, [pc, #28]	; (1c520 <gpio_nrfx_init+0x34>)
   1c502:	4621      	mov	r1, r4
   1c504:	f002 fb3c 	bl	1eb80 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1c508:	4622      	mov	r2, r4
   1c50a:	2105      	movs	r1, #5
   1c50c:	2006      	movs	r0, #6
   1c50e:	f7f7 fa29 	bl	13964 <z_arm_irq_priority_set>
		return 0;
   1c512:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1c514:	bd10      	pop	{r4, pc}
		return -EIO;
   1c516:	f06f 0004 	mvn.w	r0, #4
   1c51a:	e7fb      	b.n	1c514 <gpio_nrfx_init+0x28>
   1c51c:	0bad0000 	.word	0x0bad0000
   1c520:	0001c525 	.word	0x0001c525

0001c524 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c524:	0942      	lsrs	r2, r0, #5
{
   1c526:	b570      	push	{r4, r5, r6, lr}
   1c528:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c52a:	d002      	beq.n	1c532 <nrfx_gpio_handler+0xe>
   1c52c:	2a01      	cmp	r2, #1
   1c52e:	d017      	beq.n	1c560 <nrfx_gpio_handler+0x3c>
}
   1c530:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c532:	4e0d      	ldr	r6, [pc, #52]	; (1c568 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1c534:	6932      	ldr	r2, [r6, #16]
   1c536:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c538:	2900      	cmp	r1, #0
   1c53a:	d0f9      	beq.n	1c530 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   1c53c:	f003 031f 	and.w	r3, r3, #31
   1c540:	2501      	movs	r5, #1
   1c542:	680c      	ldr	r4, [r1, #0]
   1c544:	409d      	lsls	r5, r3
   1c546:	2900      	cmp	r1, #0
   1c548:	d0f2      	beq.n	1c530 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   1c54a:	688a      	ldr	r2, [r1, #8]
   1c54c:	402a      	ands	r2, r5
   1c54e:	d002      	beq.n	1c556 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1c550:	684b      	ldr	r3, [r1, #4]
   1c552:	4630      	mov	r0, r6
   1c554:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c556:	b12c      	cbz	r4, 1c564 <nrfx_gpio_handler+0x40>
   1c558:	6823      	ldr	r3, [r4, #0]
   1c55a:	4621      	mov	r1, r4
   1c55c:	461c      	mov	r4, r3
   1c55e:	e7f2      	b.n	1c546 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c560:	4e02      	ldr	r6, [pc, #8]	; (1c56c <nrfx_gpio_handler+0x48>)
   1c562:	e7e7      	b.n	1c534 <nrfx_gpio_handler+0x10>
   1c564:	4623      	mov	r3, r4
   1c566:	e7f8      	b.n	1c55a <nrfx_gpio_handler+0x36>
   1c568:	00027ec4 	.word	0x00027ec4
   1c56c:	00027eac 	.word	0x00027eac

0001c570 <gpio_nrfx_pin_configure>:
{
   1c570:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1c574:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c576:	7b3b      	ldrb	r3, [r7, #12]
   1c578:	f001 051f 	and.w	r5, r1, #31
   1c57c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1c580:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c582:	4628      	mov	r0, r5
   1c584:	f10d 0103 	add.w	r1, sp, #3
{
   1c588:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c58a:	f002 faff 	bl	1eb8c <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1c58e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c592:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1c594:	d10b      	bne.n	1c5ae <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1c596:	4628      	mov	r0, r5
   1c598:	f002 fbbc 	bl	1ed14 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1c59c:	4b3d      	ldr	r3, [pc, #244]	; (1c694 <gpio_nrfx_pin_configure+0x124>)
   1c59e:	4598      	cmp	r8, r3
   1c5a0:	d103      	bne.n	1c5aa <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   1c5a2:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1c5a6:	f002 fb39 	bl	1ec1c <nrfx_gpiote_channel_free>
		return 0;
   1c5aa:	2000      	movs	r0, #0
   1c5ac:	e00c      	b.n	1c5c8 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c5ae:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c5b0:	4619      	mov	r1, r3
   1c5b2:	aa02      	add	r2, sp, #8
   1c5b4:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c5b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c5ba:	f002 f9c1 	bl	1e940 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1c5be:	4b35      	ldr	r3, [pc, #212]	; (1c694 <gpio_nrfx_pin_configure+0x124>)
   1c5c0:	4298      	cmp	r0, r3
   1c5c2:	d004      	beq.n	1c5ce <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   1c5c4:	f06f 0015 	mvn.w	r0, #21
}
   1c5c8:	b004      	add	sp, #16
   1c5ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1c5ce:	4580      	cmp	r8, r0
   1c5d0:	d103      	bne.n	1c5da <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   1c5d2:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1c5d6:	f002 fb21 	bl	1ec1c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   1c5da:	03a3      	lsls	r3, r4, #14
   1c5dc:	d54b      	bpl.n	1c676 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c5de:	f240 3306 	movw	r3, #774	; 0x306
   1c5e2:	4023      	ands	r3, r4
   1c5e4:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1c5e8:	d019      	beq.n	1c61e <gpio_nrfx_pin_configure+0xae>
   1c5ea:	d80c      	bhi.n	1c606 <gpio_nrfx_pin_configure+0x96>
   1c5ec:	2b06      	cmp	r3, #6
   1c5ee:	d017      	beq.n	1c620 <gpio_nrfx_pin_configure+0xb0>
   1c5f0:	d804      	bhi.n	1c5fc <gpio_nrfx_pin_configure+0x8c>
   1c5f2:	b1ab      	cbz	r3, 1c620 <gpio_nrfx_pin_configure+0xb0>
   1c5f4:	2b02      	cmp	r3, #2
   1c5f6:	d1e5      	bne.n	1c5c4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   1c5f8:	2304      	movs	r3, #4
   1c5fa:	e011      	b.n	1c620 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c5fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1c600:	d1e0      	bne.n	1c5c4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   1c602:	2301      	movs	r3, #1
   1c604:	e00c      	b.n	1c620 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c606:	f240 2202 	movw	r2, #514	; 0x202
   1c60a:	4293      	cmp	r3, r2
   1c60c:	d027      	beq.n	1c65e <gpio_nrfx_pin_configure+0xee>
   1c60e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1c612:	d026      	beq.n	1c662 <gpio_nrfx_pin_configure+0xf2>
   1c614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1c618:	d1d4      	bne.n	1c5c4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   1c61a:	2302      	movs	r3, #2
   1c61c:	e000      	b.n	1c620 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   1c61e:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1c620:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1c624:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1c628:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1c62c:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1c62e:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   1c632:	bf54      	ite	pl
   1c634:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1c638:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1c63a:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1c63c:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1c640:	d511      	bpl.n	1c666 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1c642:	687a      	ldr	r2, [r7, #4]
   1c644:	2301      	movs	r3, #1
   1c646:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   1c648:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1c64c:	2200      	movs	r2, #0
   1c64e:	a901      	add	r1, sp, #4
   1c650:	4628      	mov	r0, r5
   1c652:	f002 fa23 	bl	1ea9c <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1c656:	4b0f      	ldr	r3, [pc, #60]	; (1c694 <gpio_nrfx_pin_configure+0x124>)
   1c658:	4298      	cmp	r0, r3
   1c65a:	d0a6      	beq.n	1c5aa <gpio_nrfx_pin_configure+0x3a>
   1c65c:	e7b2      	b.n	1c5c4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   1c65e:	2305      	movs	r3, #5
   1c660:	e7de      	b.n	1c620 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c662:	2303      	movs	r3, #3
   1c664:	e7dc      	b.n	1c620 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1c666:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1c668:	bf41      	itttt	mi
   1c66a:	2301      	movmi	r3, #1
   1c66c:	687a      	ldrmi	r2, [r7, #4]
   1c66e:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   1c670:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   1c674:	e7ea      	b.n	1c64c <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
   1c676:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1c678:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   1c67c:	bf54      	ite	pl
   1c67e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1c682:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1c684:	461a      	mov	r2, r3
   1c686:	a901      	add	r1, sp, #4
   1c688:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   1c68a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1c68e:	f002 f957 	bl	1e940 <nrfx_gpiote_input_configure>
   1c692:	e7e0      	b.n	1c656 <gpio_nrfx_pin_configure+0xe6>
   1c694:	0bad0000 	.word	0x0bad0000

0001c698 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   1c698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        case 1: return NRF_P1;
   1c69c:	4e5a      	ldr	r6, [pc, #360]	; (1c808 <pinctrl_configure_pins+0x170>)
   1c69e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1c6a2:	2701      	movs	r7, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1c6a4:	4281      	cmp	r1, r0
   1c6a6:	d102      	bne.n	1c6ae <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   1c6a8:	2000      	movs	r0, #0
}
   1c6aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1c6ae:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   1c6b0:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1c6b4:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
   1c6b8:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   1c6ba:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
   1c6be:	bf08      	it	eq
   1c6c0:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
   1c6c4:	2c22      	cmp	r4, #34	; 0x22
   1c6c6:	f200 809b 	bhi.w	1c800 <pinctrl_configure_pins+0x168>
   1c6ca:	e8df f004 	tbb	[pc, r4]
   1c6ce:	2412      	.short	0x2412
   1c6d0:	402c4429 	.word	0x402c4429
   1c6d4:	99999944 	.word	0x99999944
   1c6d8:	99704799 	.word	0x99704799
   1c6dc:	99999999 	.word	0x99999999
   1c6e0:	99999999 	.word	0x99999999
   1c6e4:	817e7b73 	.word	0x817e7b73
   1c6e8:	84999999 	.word	0x84999999
   1c6ec:	93908d8a 	.word	0x93908d8a
   1c6f0:	96          	.byte	0x96
   1c6f1:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   1c6f2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
   1c6f6:	ea4f 1c53 	mov.w	ip, r3, lsr #5
        case 1: return NRF_P1;
   1c6fa:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
   1c6fe:	f003 041f 	and.w	r4, r3, #31
        case 1: return NRF_P1;
   1c702:	bf14      	ite	ne
   1c704:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
   1c708:	46b4      	moveq	ip, r6
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1c70a:	fa07 f404 	lsl.w	r4, r7, r4
    p_reg->OUTSET = set_mask;
   1c70e:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
   1c712:	2401      	movs	r4, #1
   1c714:	e002      	b.n	1c71c <pinctrl_configure_pins+0x84>
			NRF_PSEL_UART(reg, RXD) = pin;
   1c716:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1c71a:	2400      	movs	r4, #0
   1c71c:	46a6      	mov	lr, r4
   1c71e:	e024      	b.n	1c76a <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
   1c720:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   1c724:	e7e7      	b.n	1c6f6 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   1c726:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1c72a:	2400      	movs	r4, #0
    return pin_number >> 5;
   1c72c:	ea4f 1e53 	mov.w	lr, r3, lsr #5
        case 1: return NRF_P1;
   1c730:	f1be 0f01 	cmp.w	lr, #1
   1c734:	bf14      	ite	ne
   1c736:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
   1c73a:	46b6      	moveq	lr, r6
    *p_pin = pin_number & 0x1F;
   1c73c:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1c740:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
   1c744:	f8ce c50c 	str.w	ip, [lr, #1292]	; 0x50c
   1c748:	f04f 0e01 	mov.w	lr, #1
   1c74c:	e00d      	b.n	1c76a <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   1c74e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   1c752:	2401      	movs	r4, #1
   1c754:	e7ea      	b.n	1c72c <pinctrl_configure_pins+0x94>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   1c756:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   1c75a:	e7de      	b.n	1c71a <pinctrl_configure_pins+0x82>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   1c75c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   1c760:	2d00      	cmp	r5, #0
   1c762:	d1da      	bne.n	1c71a <pinctrl_configure_pins+0x82>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1c764:	2400      	movs	r4, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1c766:	46a6      	mov	lr, r4
				drive = NRF_DRIVE_S0D1;
   1c768:	2506      	movs	r5, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   1c76a:	f850 cb04 	ldr.w	ip, [r0], #4
   1c76e:	f40c 5800 	and.w	r8, ip, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1c772:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   1c776:	ea4f 2505 	mov.w	r5, r5, lsl #8
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   1c77a:	f3cc 18c1 	ubfx	r8, ip, #7, #2
    *p_pin = pin_number & 0x1F;
   1c77e:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
   1c782:	ea4f 1353 	mov.w	r3, r3, lsr #5
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1c786:	bf1c      	itt	ne
   1c788:	2401      	movne	r4, #1
   1c78a:	f04f 0e00 	movne.w	lr, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1c78e:	ea45 0588 	orr.w	r5, r5, r8, lsl #2
        case 0: return NRF_P0;
   1c792:	2b01      	cmp	r3, #1
   1c794:	bf0c      	ite	eq
   1c796:	4633      	moveq	r3, r6
   1c798:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1c79c:	ea45 050e 	orr.w	r5, r5, lr
    reg->PIN_CNF[pin_number] = cnf;
   1c7a0:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1c7a4:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   1c7a8:	f843 502c 	str.w	r5, [r3, ip, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1c7ac:	e77a      	b.n	1c6a4 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   1c7ae:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   1c7b2:	e7d5      	b.n	1c760 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   1c7b4:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   1c7b8:	6804      	ldr	r4, [r0, #0]
   1c7ba:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
   1c7be:	2c00      	cmp	r4, #0
   1c7c0:	d0c7      	beq.n	1c752 <pinctrl_configure_pins+0xba>
   1c7c2:	e798      	b.n	1c6f6 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   1c7c4:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   1c7c8:	e7f6      	b.n	1c7b8 <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   1c7ca:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   1c7ce:	e7f3      	b.n	1c7b8 <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   1c7d0:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
   1c7d4:	e7f0      	b.n	1c7b8 <pinctrl_configure_pins+0x120>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   1c7d6:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1c7da:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1c7dc:	f04f 0e00 	mov.w	lr, #0
   1c7e0:	e7c3      	b.n	1c76a <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   1c7e2:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   1c7e6:	e786      	b.n	1c6f6 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   1c7e8:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
   1c7ec:	e7f5      	b.n	1c7da <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   1c7ee:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
   1c7f2:	e7f2      	b.n	1c7da <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   1c7f4:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
   1c7f8:	e7ef      	b.n	1c7da <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   1c7fa:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
   1c7fe:	e7ec      	b.n	1c7da <pinctrl_configure_pins+0x142>
		switch (NRF_GET_FUN(pins[i])) {
   1c800:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c804:	e751      	b.n	1c6aa <pinctrl_configure_pins+0x12>
   1c806:	bf00      	nop
   1c808:	50000300 	.word	0x50000300

0001c80c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1c80c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1c80e:	794b      	ldrb	r3, [r1, #5]
   1c810:	2b01      	cmp	r3, #1
   1c812:	d026      	beq.n	1c862 <uarte_nrfx_configure+0x56>
   1c814:	2b03      	cmp	r3, #3
   1c816:	d121      	bne.n	1c85c <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1c818:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1c81a:	798b      	ldrb	r3, [r1, #6]
   1c81c:	2b03      	cmp	r3, #3
   1c81e:	d11d      	bne.n	1c85c <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1c820:	79ce      	ldrb	r6, [r1, #7]
   1c822:	b10e      	cbz	r6, 1c828 <uarte_nrfx_configure+0x1c>
   1c824:	2e01      	cmp	r6, #1
   1c826:	d119      	bne.n	1c85c <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1c828:	790a      	ldrb	r2, [r1, #4]
   1c82a:	b112      	cbz	r2, 1c832 <uarte_nrfx_configure+0x26>
   1c82c:	2a02      	cmp	r2, #2
   1c82e:	d115      	bne.n	1c85c <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1c830:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1c832:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1c834:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   1c836:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1c83a:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
   1c83c:	d067      	beq.n	1c90e <uarte_nrfx_configure+0x102>
   1c83e:	d82d      	bhi.n	1c89c <uarte_nrfx_configure+0x90>
   1c840:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1c844:	d066      	beq.n	1c914 <uarte_nrfx_configure+0x108>
   1c846:	d816      	bhi.n	1c876 <uarte_nrfx_configure+0x6a>
   1c848:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1c84c:	d064      	beq.n	1c918 <uarte_nrfx_configure+0x10c>
   1c84e:	d80a      	bhi.n	1c866 <uarte_nrfx_configure+0x5a>
   1c850:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1c854:	d063      	beq.n	1c91e <uarte_nrfx_configure+0x112>
   1c856:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1c85a:	d063      	beq.n	1c924 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
   1c85c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c860:	e054      	b.n	1c90c <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   1c862:	2500      	movs	r5, #0
   1c864:	e7d9      	b.n	1c81a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1c866:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1c86a:	d05e      	beq.n	1c92a <uarte_nrfx_configure+0x11e>
   1c86c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1c870:	d1f4      	bne.n	1c85c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1c872:	4b38      	ldr	r3, [pc, #224]	; (1c954 <uarte_nrfx_configure+0x148>)
   1c874:	e03c      	b.n	1c8f0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1c876:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1c87a:	d059      	beq.n	1c930 <uarte_nrfx_configure+0x124>
   1c87c:	d807      	bhi.n	1c88e <uarte_nrfx_configure+0x82>
   1c87e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1c882:	d057      	beq.n	1c934 <uarte_nrfx_configure+0x128>
   1c884:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1c888:	d1e8      	bne.n	1c85c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1c88a:	4b33      	ldr	r3, [pc, #204]	; (1c958 <uarte_nrfx_configure+0x14c>)
   1c88c:	e030      	b.n	1c8f0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1c88e:	f647 2412 	movw	r4, #31250	; 0x7a12
   1c892:	42a3      	cmp	r3, r4
   1c894:	d1e2      	bne.n	1c85c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1c896:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1c89a:	e029      	b.n	1c8f0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1c89c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1c8a0:	d04a      	beq.n	1c938 <uarte_nrfx_configure+0x12c>
   1c8a2:	d813      	bhi.n	1c8cc <uarte_nrfx_configure+0xc0>
   1c8a4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1c8a8:	d049      	beq.n	1c93e <uarte_nrfx_configure+0x132>
   1c8aa:	d809      	bhi.n	1c8c0 <uarte_nrfx_configure+0xb4>
   1c8ac:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   1c8b0:	42a3      	cmp	r3, r4
   1c8b2:	d046      	beq.n	1c942 <uarte_nrfx_configure+0x136>
   1c8b4:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1c8b8:	d1d0      	bne.n	1c85c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1c8ba:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1c8be:	e017      	b.n	1c8f0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1c8c0:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1c8c4:	d1ca      	bne.n	1c85c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1c8c6:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1c8ca:	e011      	b.n	1c8f0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1c8cc:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1c8d0:	d03a      	beq.n	1c948 <uarte_nrfx_configure+0x13c>
   1c8d2:	d808      	bhi.n	1c8e6 <uarte_nrfx_configure+0xda>
   1c8d4:	4c21      	ldr	r4, [pc, #132]	; (1c95c <uarte_nrfx_configure+0x150>)
   1c8d6:	42a3      	cmp	r3, r4
   1c8d8:	d039      	beq.n	1c94e <uarte_nrfx_configure+0x142>
   1c8da:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1c8de:	d1bd      	bne.n	1c85c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1c8e0:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1c8e4:	e004      	b.n	1c8f0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1c8e6:	4c1e      	ldr	r4, [pc, #120]	; (1c960 <uarte_nrfx_configure+0x154>)
   1c8e8:	42a3      	cmp	r3, r4
   1c8ea:	d1b7      	bne.n	1c85c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1c8ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1c8f0:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1c8f2:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
   1c8f6:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
   1c8f8:	4335      	orrs	r5, r6
   1c8fa:	681b      	ldr	r3, [r3, #0]
   1c8fc:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1c8fe:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   1c902:	c903      	ldmia	r1, {r0, r1}
   1c904:	1d23      	adds	r3, r4, #4
   1c906:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1c90a:	2000      	movs	r0, #0
}
   1c90c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1c90e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1c912:	e7ed      	b.n	1c8f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1c914:	4b13      	ldr	r3, [pc, #76]	; (1c964 <uarte_nrfx_configure+0x158>)
   1c916:	e7eb      	b.n	1c8f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1c918:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1c91c:	e7e8      	b.n	1c8f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   1c91e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1c922:	e7e5      	b.n	1c8f0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1c924:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1c928:	e7e2      	b.n	1c8f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1c92a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1c92e:	e7df      	b.n	1c8f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1c930:	4b0d      	ldr	r3, [pc, #52]	; (1c968 <uarte_nrfx_configure+0x15c>)
   1c932:	e7dd      	b.n	1c8f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1c934:	4b0d      	ldr	r3, [pc, #52]	; (1c96c <uarte_nrfx_configure+0x160>)
   1c936:	e7db      	b.n	1c8f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1c938:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1c93c:	e7d8      	b.n	1c8f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1c93e:	4b0c      	ldr	r3, [pc, #48]	; (1c970 <uarte_nrfx_configure+0x164>)
   1c940:	e7d6      	b.n	1c8f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1c942:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1c946:	e7d3      	b.n	1c8f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1c948:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1c94c:	e7d0      	b.n	1c8f0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1c94e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1c952:	e7cd      	b.n	1c8f0 <uarte_nrfx_configure+0xe4>
   1c954:	0013b000 	.word	0x0013b000
   1c958:	004ea000 	.word	0x004ea000
   1c95c:	0003d090 	.word	0x0003d090
   1c960:	000f4240 	.word	0x000f4240
   1c964:	00275000 	.word	0x00275000
   1c968:	0075c000 	.word	0x0075c000
   1c96c:	003af000 	.word	0x003af000
   1c970:	013a9000 	.word	0x013a9000

0001c974 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1c974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c978:	2200      	movs	r2, #0
   1c97a:	b087      	sub	sp, #28
   1c97c:	4680      	mov	r8, r0
   1c97e:	2101      	movs	r1, #1
   1c980:	2002      	movs	r0, #2
   1c982:	f7f6 ffef 	bl	13964 <z_arm_irq_priority_set>
   1c986:	2002      	movs	r0, #2
   1c988:	f7f6 ffbc 	bl	13904 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   1c98c:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
   1c990:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
   1c994:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1c996:	2100      	movs	r1, #0
   1c998:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   1c99c:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1c9a0:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1c9a4:	466a      	mov	r2, sp
   1c9a6:	4648      	mov	r0, r9
   1c9a8:	f00a fa73 	bl	26e92 <pinctrl_lookup_state>
	if (ret < 0) {
   1c9ac:	1e05      	subs	r5, r0, #0
   1c9ae:	db25      	blt.n	1c9fc <uarte_0_init+0x88>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1c9b0:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1c9b2:	f8d9 2000 	ldr.w	r2, [r9]
   1c9b6:	7919      	ldrb	r1, [r3, #4]
   1c9b8:	6818      	ldr	r0, [r3, #0]
   1c9ba:	f7ff fe6d 	bl	1c698 <pinctrl_configure_pins>
	if (err < 0) {
   1c9be:	1e05      	subs	r5, r0, #0
   1c9c0:	db1c      	blt.n	1c9fc <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   1c9c2:	1d31      	adds	r1, r6, #4
   1c9c4:	4640      	mov	r0, r8
   1c9c6:	f7ff ff21 	bl	1c80c <uarte_nrfx_configure>
	if (err) {
   1c9ca:	4605      	mov	r5, r0
   1c9cc:	b9b0      	cbnz	r0, 1c9fc <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1c9ce:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1c9d0:	0799      	lsls	r1, r3, #30
   1c9d2:	d52b      	bpl.n	1ca2c <uarte_0_init+0xb8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1c9d4:	f106 0018 	add.w	r0, r6, #24
   1c9d8:	f002 fa9e 	bl	1ef18 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1c9dc:	4b27      	ldr	r3, [pc, #156]	; (1ca7c <uarte_0_init+0x108>)
   1c9de:	4298      	cmp	r0, r3
   1c9e0:	d010      	beq.n	1ca04 <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
   1c9e2:	4b27      	ldr	r3, [pc, #156]	; (1ca80 <uarte_0_init+0x10c>)
   1c9e4:	9305      	str	r3, [sp, #20]
   1c9e6:	2302      	movs	r3, #2
   1c9e8:	9304      	str	r3, [sp, #16]
   1c9ea:	4826      	ldr	r0, [pc, #152]	; (1ca84 <uarte_0_init+0x110>)
   1c9ec:	462b      	mov	r3, r5
   1c9ee:	aa04      	add	r2, sp, #16
   1c9f0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
   1c9f4:	f06f 0504 	mvn.w	r5, #4
   1c9f8:	f7f6 f90a 	bl	12c10 <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
   1c9fc:	4628      	mov	r0, r5
   1c9fe:	b007      	add	sp, #28
   1ca00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ca04:	7e33      	ldrb	r3, [r6, #24]
   1ca06:	00db      	lsls	r3, r3, #3
   1ca08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ca0c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1ca10:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1ca14:	f504 7190 	add.w	r1, r4, #288	; 0x120
   1ca18:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ca1c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1ca20:	7e32      	ldrb	r2, [r6, #24]
   1ca22:	2301      	movs	r3, #1
   1ca24:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   1ca26:	4a18      	ldr	r2, [pc, #96]	; (1ca88 <uarte_0_init+0x114>)
   1ca28:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1ca2c:	2308      	movs	r3, #8
   1ca2e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1ca32:	7a3b      	ldrb	r3, [r7, #8]
   1ca34:	b953      	cbnz	r3, 1ca4c <uarte_0_init+0xd8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ca36:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1ca3a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1ca3e:	6973      	ldr	r3, [r6, #20]
   1ca40:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1ca44:	2301      	movs	r3, #1
   1ca46:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ca4a:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1ca4c:	687b      	ldr	r3, [r7, #4]
   1ca4e:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1ca50:	bf5c      	itt	pl
   1ca52:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1ca56:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1ca5a:	687b      	ldr	r3, [r7, #4]
   1ca5c:	06db      	lsls	r3, r3, #27
   1ca5e:	bf44      	itt	mi
   1ca60:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1ca64:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1ca68:	6933      	ldr	r3, [r6, #16]
   1ca6a:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1ca6e:	2300      	movs	r3, #0
   1ca70:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ca74:	2301      	movs	r3, #1
   1ca76:	60a3      	str	r3, [r4, #8]
   1ca78:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1ca7a:	e7bf      	b.n	1c9fc <uarte_0_init+0x88>
   1ca7c:	0bad0000 	.word	0x0bad0000
   1ca80:	0002ae32 	.word	0x0002ae32
   1ca84:	00028234 	.word	0x00028234
   1ca88:	4001f000 	.word	0x4001f000

0001ca8c <uarte_nrfx_poll_out>:
{
   1ca8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ca8e:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   1ca90:	6907      	ldr	r7, [r0, #16]
{
   1ca92:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1ca94:	f00a fcd2 	bl	2743c <k_is_in_isr>
   1ca98:	b9b0      	cbnz	r0, 1cac8 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   1ca9a:	4b2e      	ldr	r3, [pc, #184]	; (1cb54 <uarte_nrfx_poll_out+0xc8>)
   1ca9c:	781b      	ldrb	r3, [r3, #0]
   1ca9e:	b19b      	cbz	r3, 1cac8 <uarte_nrfx_poll_out+0x3c>
{
   1caa0:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1caa2:	6860      	ldr	r0, [r4, #4]
   1caa4:	f00a fa2b 	bl	26efe <is_tx_ready.isra.0>
   1caa8:	bb00      	cbnz	r0, 1caec <uarte_nrfx_poll_out+0x60>
   1caaa:	2001      	movs	r0, #1
   1caac:	f00a fb96 	bl	271dc <nrfx_busy_wait>
   1cab0:	3e01      	subs	r6, #1
   1cab2:	d1f6      	bne.n	1caa2 <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
   1cab4:	2100      	movs	r1, #0
   1cab6:	2021      	movs	r0, #33	; 0x21
   1cab8:	f003 fb28 	bl	2010c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1cabc:	e7f0      	b.n	1caa0 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   1cabe:	f386 8811 	msr	BASEPRI, r6
   1cac2:	f3bf 8f6f 	isb	sy
}
   1cac6:	e7f5      	b.n	1cab4 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   1cac8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cacc:	f3ef 8611 	mrs	r6, BASEPRI
   1cad0:	f383 8812 	msr	BASEPRI_MAX, r3
   1cad4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1cad8:	6860      	ldr	r0, [r4, #4]
   1cada:	4631      	mov	r1, r6
   1cadc:	f00a fa0f 	bl	26efe <is_tx_ready.isra.0>
   1cae0:	b990      	cbnz	r0, 1cb08 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   1cae2:	f386 8811 	msr	BASEPRI, r6
   1cae6:	f3bf 8f6f 	isb	sy
}
   1caea:	e7ed      	b.n	1cac8 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   1caec:	f04f 0340 	mov.w	r3, #64	; 0x40
   1caf0:	f3ef 8611 	mrs	r6, BASEPRI
   1caf4:	f383 8812 	msr	BASEPRI_MAX, r3
   1caf8:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1cafc:	6860      	ldr	r0, [r4, #4]
   1cafe:	4631      	mov	r1, r6
   1cb00:	f00a f9fd 	bl	26efe <is_tx_ready.isra.0>
   1cb04:	2800      	cmp	r0, #0
   1cb06:	d0da      	beq.n	1cabe <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   1cb08:	693b      	ldr	r3, [r7, #16]
   1cb0a:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
   1cb0c:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1cb0e:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   1cb10:	6813      	ldr	r3, [r2, #0]
   1cb12:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1cb16:	2001      	movs	r0, #1
   1cb18:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cb1c:	2000      	movs	r0, #0
   1cb1e:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1cb22:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
   1cb26:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1cb2a:	6852      	ldr	r2, [r2, #4]
   1cb2c:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   1cb30:	06d2      	lsls	r2, r2, #27
   1cb32:	d508      	bpl.n	1cb46 <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
   1cb34:	6862      	ldr	r2, [r4, #4]
   1cb36:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1cb38:	2008      	movs	r0, #8
   1cb3a:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   1cb3e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1cb42:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cb46:	2201      	movs	r2, #1
   1cb48:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   1cb4a:	f381 8811 	msr	BASEPRI, r1
   1cb4e:	f3bf 8f6f 	isb	sy
}
   1cb52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cb54:	2000461d 	.word	0x2000461d

0001cb58 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   1cb58:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1cb5a:	2301      	movs	r3, #1
   1cb5c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1cb5e:	4a0e      	ldr	r2, [pc, #56]	; (1cb98 <compare_int_lock+0x40>)
   1cb60:	f3bf 8f5b 	dmb	ish
   1cb64:	43dc      	mvns	r4, r3
   1cb66:	e852 1f00 	ldrex	r1, [r2]
   1cb6a:	ea01 0504 	and.w	r5, r1, r4
   1cb6e:	e842 5600 	strex	r6, r5, [r2]
   1cb72:	2e00      	cmp	r6, #0
   1cb74:	d1f7      	bne.n	1cb66 <compare_int_lock+0xe>
   1cb76:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1cb7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1cb7e:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1cb80:	4806      	ldr	r0, [pc, #24]	; (1cb9c <compare_int_lock+0x44>)
   1cb82:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1cb86:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1cb8a:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1cb8e:	420b      	tst	r3, r1
}
   1cb90:	bf14      	ite	ne
   1cb92:	2001      	movne	r0, #1
   1cb94:	2000      	moveq	r0, #0
   1cb96:	bd70      	pop	{r4, r5, r6, pc}
   1cb98:	200033d8 	.word	0x200033d8
   1cb9c:	40011000 	.word	0x40011000

0001cba0 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1cba0:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1cba2:	490e      	ldr	r1, [pc, #56]	; (1cbdc <sys_clock_timeout_handler+0x3c>)
   1cba4:	e9d1 3400 	ldrd	r3, r4, [r1]
   1cba8:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   1cbaa:	18c3      	adds	r3, r0, r3
   1cbac:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
   1cbb0:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
   1cbb4:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1cbb8:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1cbbc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1cbc0:	d209      	bcs.n	1cbd6 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1cbc2:	4b07      	ldr	r3, [pc, #28]	; (1cbe0 <sys_clock_timeout_handler+0x40>)
   1cbc4:	681b      	ldr	r3, [r3, #0]
   1cbc6:	0a1a      	lsrs	r2, r3, #8
   1cbc8:	061b      	lsls	r3, r3, #24
   1cbca:	199c      	adds	r4, r3, r6
   1cbcc:	4b05      	ldr	r3, [pc, #20]	; (1cbe4 <sys_clock_timeout_handler+0x44>)
   1cbce:	f142 0500 	adc.w	r5, r2, #0
   1cbd2:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   1cbd6:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   1cbd8:	f003 bc00 	b.w	203dc <sys_clock_announce>
   1cbdc:	200020a8 	.word	0x200020a8
   1cbe0:	200033dc 	.word	0x200033dc
   1cbe4:	200020b0 	.word	0x200020b0

0001cbe8 <compare_int_unlock>:
	if (key) {
   1cbe8:	b311      	cbz	r1, 1cc30 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1cbea:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   1cbee:	2301      	movs	r3, #1
   1cbf0:	4a10      	ldr	r2, [pc, #64]	; (1cc34 <compare_int_unlock+0x4c>)
   1cbf2:	4083      	lsls	r3, r0
   1cbf4:	e852 cf00 	ldrex	ip, [r2]
   1cbf8:	ea4c 0c03 	orr.w	ip, ip, r3
   1cbfc:	e842 c100 	strex	r1, ip, [r2]
   1cc00:	2900      	cmp	r1, #0
   1cc02:	d1f7      	bne.n	1cbf4 <compare_int_unlock+0xc>
   1cc04:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1cc08:	4a0b      	ldr	r2, [pc, #44]	; (1cc38 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1cc0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1cc0e:	4083      	lsls	r3, r0
   1cc10:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cc14:	4b09      	ldr	r3, [pc, #36]	; (1cc3c <compare_int_unlock+0x54>)
   1cc16:	f3bf 8f5b 	dmb	ish
   1cc1a:	681b      	ldr	r3, [r3, #0]
   1cc1c:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1cc20:	40c3      	lsrs	r3, r0
   1cc22:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1cc24:	bf42      	ittt	mi
   1cc26:	4b06      	ldrmi	r3, [pc, #24]	; (1cc40 <compare_int_unlock+0x58>)
   1cc28:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   1cc2c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1cc30:	4770      	bx	lr
   1cc32:	bf00      	nop
   1cc34:	200033d8 	.word	0x200033d8
   1cc38:	40011000 	.word	0x40011000
   1cc3c:	200033d4 	.word	0x200033d4
   1cc40:	e000e100 	.word	0xe000e100

0001cc44 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1cc44:	4b0d      	ldr	r3, [pc, #52]	; (1cc7c <z_nrf_rtc_timer_read+0x38>)
   1cc46:	6818      	ldr	r0, [r3, #0]
   1cc48:	0a01      	lsrs	r1, r0, #8
   1cc4a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1cc4c:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   1cc50:	4b0b      	ldr	r3, [pc, #44]	; (1cc80 <z_nrf_rtc_timer_read+0x3c>)
   1cc52:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1cc56:	1818      	adds	r0, r3, r0
   1cc58:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1cc5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1cc60:	d20a      	bcs.n	1cc78 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1cc62:	4b08      	ldr	r3, [pc, #32]	; (1cc84 <z_nrf_rtc_timer_read+0x40>)
   1cc64:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cc68:	4290      	cmp	r0, r2
   1cc6a:	eb71 0303 	sbcs.w	r3, r1, r3
   1cc6e:	d203      	bcs.n	1cc78 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1cc70:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1cc74:	f141 0100 	adc.w	r1, r1, #0
}
   1cc78:	4770      	bx	lr
   1cc7a:	bf00      	nop
   1cc7c:	200033dc 	.word	0x200033dc
   1cc80:	40011000 	.word	0x40011000
   1cc84:	200020b0 	.word	0x200020b0

0001cc88 <compare_set>:
{
   1cc88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc8c:	4616      	mov	r6, r2
   1cc8e:	461f      	mov	r7, r3
   1cc90:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   1cc92:	f7ff ff61 	bl	1cb58 <compare_int_lock>
   1cc96:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1cc98:	f7ff ffd4 	bl	1cc44 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1cc9c:	42b0      	cmp	r0, r6
   1cc9e:	eb71 0307 	sbcs.w	r3, r1, r7
   1cca2:	d251      	bcs.n	1cd48 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   1cca4:	4b3a      	ldr	r3, [pc, #232]	; (1cd90 <compare_set+0x108>)
   1cca6:	1a30      	subs	r0, r6, r0
   1cca8:	eb67 0101 	sbc.w	r1, r7, r1
   1ccac:	4298      	cmp	r0, r3
   1ccae:	f171 0100 	sbcs.w	r1, r1, #0
   1ccb2:	d26a      	bcs.n	1cd8a <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
   1ccb4:	4b37      	ldr	r3, [pc, #220]	; (1cd94 <compare_set+0x10c>)
   1ccb6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1ccba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1ccbe:	429f      	cmp	r7, r3
   1ccc0:	bf08      	it	eq
   1ccc2:	4296      	cmpeq	r6, r2
   1ccc4:	d04e      	beq.n	1cd64 <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1ccc6:	4934      	ldr	r1, [pc, #208]	; (1cd98 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ccc8:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1cccc:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ccd0:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1ccd4:	00ad      	lsls	r5, r5, #2
   1ccd6:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
   1ccda:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ccdc:	b2ad      	uxth	r5, r5
   1ccde:	f00a f958 	bl	26f92 <event_clear>
	return absolute_time & COUNTER_MAX;
   1cce2:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   1cce6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   1ccea:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1ccee:	4a2b      	ldr	r2, [pc, #172]	; (1cd9c <compare_set+0x114>)
   1ccf0:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ccf2:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
   1ccf6:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   1ccf8:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
   1ccfc:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1ccfe:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
   1cd02:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
   1cd06:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   1cd0a:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1cd0e:	f06f 0002 	mvn.w	r0, #2
   1cd12:	eba0 0008 	sub.w	r0, r0, r8
   1cd16:	4460      	add	r0, ip
   1cd18:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1cd1c:	4290      	cmp	r0, r2
   1cd1e:	d921      	bls.n	1cd64 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cd20:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   1cd22:	b160      	cbz	r0, 1cd3e <compare_set+0xb6>
     return p_reg->COUNTER;
   1cd24:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1cd28:	eba8 000b 	sub.w	r0, r8, fp
   1cd2c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   1cd30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1cd34:	d916      	bls.n	1cd64 <compare_set+0xdc>
					event_clear(chan);
   1cd36:	4620      	mov	r0, r4
   1cd38:	f00a f92b 	bl	26f92 <event_clear>
   1cd3c:	4a17      	ldr	r2, [pc, #92]	; (1cd9c <compare_set+0x114>)
			cc_val = now + cc_inc;
   1cd3e:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
   1cd42:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
   1cd46:	e7d9      	b.n	1ccfc <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   1cd48:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1cd4a:	4a15      	ldr	r2, [pc, #84]	; (1cda0 <compare_set+0x118>)
   1cd4c:	f3bf 8f5b 	dmb	ish
   1cd50:	40a3      	lsls	r3, r4
   1cd52:	e852 0f00 	ldrex	r0, [r2]
   1cd56:	4318      	orrs	r0, r3
   1cd58:	e842 0100 	strex	r1, r0, [r2]
   1cd5c:	2900      	cmp	r1, #0
   1cd5e:	d1f8      	bne.n	1cd52 <compare_set+0xca>
   1cd60:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   1cd64:	490b      	ldr	r1, [pc, #44]	; (1cd94 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
   1cd66:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   1cd68:	0123      	lsls	r3, r4, #4
   1cd6a:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   1cd6e:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
   1cd72:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1cd74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1cd76:	6053      	str	r3, [r2, #4]
	return ret;
   1cd78:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
   1cd7a:	4620      	mov	r0, r4
   1cd7c:	9900      	ldr	r1, [sp, #0]
   1cd7e:	f7ff ff33 	bl	1cbe8 <compare_int_unlock>
}
   1cd82:	4628      	mov	r0, r5
   1cd84:	b003      	add	sp, #12
   1cd86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   1cd8a:	f06f 0515 	mvn.w	r5, #21
   1cd8e:	e7f4      	b.n	1cd7a <compare_set+0xf2>
   1cd90:	00800001 	.word	0x00800001
   1cd94:	20002098 	.word	0x20002098
   1cd98:	40011000 	.word	0x40011000
   1cd9c:	007ffffd 	.word	0x007ffffd
   1cda0:	200033d4 	.word	0x200033d4

0001cda4 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   1cda4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
   1cda6:	4c1b      	ldr	r4, [pc, #108]	; (1ce14 <sys_clock_driver_init+0x70>)
   1cda8:	4b1b      	ldr	r3, [pc, #108]	; (1ce18 <sys_clock_driver_init+0x74>)
   1cdaa:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   1cdae:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1cdb2:	4b1a      	ldr	r3, [pc, #104]	; (1ce1c <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
   1cdb4:	2500      	movs	r5, #0
   1cdb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cdba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1cdbe:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   1cdc2:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1cdc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1cdca:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1cdce:	4b14      	ldr	r3, [pc, #80]	; (1ce20 <sys_clock_driver_init+0x7c>)
   1cdd0:	2602      	movs	r6, #2
   1cdd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1cdd6:	2101      	movs	r1, #1
   1cdd8:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   1cddc:	2011      	movs	r0, #17
   1cdde:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1cde2:	462a      	mov	r2, r5
   1cde4:	f7f6 fdbe 	bl	13964 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1cde8:	2011      	movs	r0, #17
   1cdea:	f7f6 fd8b 	bl	13904 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1cdee:	4a0d      	ldr	r2, [pc, #52]	; (1ce24 <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1cdf0:	2301      	movs	r3, #1
   1cdf2:	60a3      	str	r3, [r4, #8]
   1cdf4:	6023      	str	r3, [r4, #0]
   1cdf6:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1cdf8:	4b0b      	ldr	r3, [pc, #44]	; (1ce28 <sys_clock_driver_init+0x84>)
   1cdfa:	4a0c      	ldr	r2, [pc, #48]	; (1ce2c <sys_clock_driver_init+0x88>)
   1cdfc:	9300      	str	r3, [sp, #0]
   1cdfe:	9501      	str	r5, [sp, #4]
   1ce00:	2300      	movs	r3, #0
   1ce02:	4628      	mov	r0, r5
   1ce04:	f7ff ff40 	bl	1cc88 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1ce08:	4630      	mov	r0, r6
   1ce0a:	f7ff f907 	bl	1c01c <z_nrf_clock_control_lf_on>

	return 0;
}
   1ce0e:	4628      	mov	r0, r5
   1ce10:	b002      	add	sp, #8
   1ce12:	bd70      	pop	{r4, r5, r6, pc}
   1ce14:	40011000 	.word	0x40011000
   1ce18:	000f0003 	.word	0x000f0003
   1ce1c:	20002098 	.word	0x20002098
   1ce20:	e000e100 	.word	0xe000e100
   1ce24:	200033d8 	.word	0x200033d8
   1ce28:	0001cba1 	.word	0x0001cba1
   1ce2c:	007fffff 	.word	0x007fffff

0001ce30 <rtc_nrf_isr>:
{
   1ce30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   1ce34:	4c2b      	ldr	r4, [pc, #172]	; (1cee4 <rtc_nrf_isr+0xb4>)
   1ce36:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1ce3a:	0799      	lsls	r1, r3, #30
   1ce3c:	d50b      	bpl.n	1ce56 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ce3e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1ce42:	b143      	cbz	r3, 1ce56 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   1ce44:	4a28      	ldr	r2, [pc, #160]	; (1cee8 <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1ce46:	2300      	movs	r3, #0
   1ce48:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1ce4c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1ce50:	6813      	ldr	r3, [r2, #0]
   1ce52:	3301      	adds	r3, #1
   1ce54:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1ce56:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1ce5a:	03da      	lsls	r2, r3, #15
   1ce5c:	d523      	bpl.n	1cea6 <rtc_nrf_isr+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ce5e:	f3bf 8f5b 	dmb	ish
   1ce62:	4b22      	ldr	r3, [pc, #136]	; (1ceec <rtc_nrf_isr+0xbc>)
   1ce64:	e853 2f00 	ldrex	r2, [r3]
   1ce68:	f022 0101 	bic.w	r1, r2, #1
   1ce6c:	e843 1000 	strex	r0, r1, [r3]
   1ce70:	2800      	cmp	r0, #0
   1ce72:	d1f7      	bne.n	1ce64 <rtc_nrf_isr+0x34>
   1ce74:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   1ce78:	07d3      	lsls	r3, r2, #31
   1ce7a:	d402      	bmi.n	1ce82 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ce7c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1ce80:	b18b      	cbz	r3, 1cea6 <rtc_nrf_isr+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1ce82:	2500      	movs	r5, #0
   1ce84:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1ce88:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   1ce8c:	f7ff feda 	bl	1cc44 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1ce90:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1ce94:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   1ce96:	4b16      	ldr	r3, [pc, #88]	; (1cef0 <rtc_nrf_isr+0xc0>)
   1ce98:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1ce9c:	42b0      	cmp	r0, r6
   1ce9e:	41b9      	sbcs	r1, r7
   1cea0:	d204      	bcs.n	1ceac <rtc_nrf_isr+0x7c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1cea2:	f382 8810 	msr	PRIMASK, r2
}
   1cea6:	b003      	add	sp, #12
   1cea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1ceac:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1ceb0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1ceb4:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
   1ceb8:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
   1cebc:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
   1cebe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1cec2:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1cec6:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1ceca:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1cece:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   1ced2:	2900      	cmp	r1, #0
   1ced4:	d0e7      	beq.n	1cea6 <rtc_nrf_isr+0x76>
			handler(chan, expire_time, user_context);
   1ced6:	9000      	str	r0, [sp, #0]
   1ced8:	4632      	mov	r2, r6
   1ceda:	463b      	mov	r3, r7
   1cedc:	4628      	mov	r0, r5
   1cede:	4788      	blx	r1
   1cee0:	e7e1      	b.n	1cea6 <rtc_nrf_isr+0x76>
   1cee2:	bf00      	nop
   1cee4:	40011000 	.word	0x40011000
   1cee8:	200033dc 	.word	0x200033dc
   1ceec:	200033d4 	.word	0x200033d4
   1cef0:	20002098 	.word	0x20002098

0001cef4 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   1cef4:	1c43      	adds	r3, r0, #1
{
   1cef6:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   1cef8:	d022      	beq.n	1cf40 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1cefa:	2801      	cmp	r0, #1
   1cefc:	dd22      	ble.n	1cf44 <sys_clock_set_timeout+0x50>
   1cefe:	4a12      	ldr	r2, [pc, #72]	; (1cf48 <sys_clock_set_timeout+0x54>)
   1cf00:	4b12      	ldr	r3, [pc, #72]	; (1cf4c <sys_clock_set_timeout+0x58>)
   1cf02:	4290      	cmp	r0, r2
   1cf04:	bfd4      	ite	le
   1cf06:	4604      	movle	r4, r0
   1cf08:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1cf0a:	f7ff fe9b 	bl	1cc44 <z_nrf_rtc_timer_read>
   1cf0e:	4b10      	ldr	r3, [pc, #64]	; (1cf50 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
   1cf10:	490e      	ldr	r1, [pc, #56]	; (1cf4c <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1cf12:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cf16:	1a80      	subs	r0, r0, r2
		cyc = 0;
   1cf18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1cf1c:	bf28      	it	cs
   1cf1e:	2400      	movcs	r4, #0
	cyc += unannounced;
   1cf20:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   1cf22:	428c      	cmp	r4, r1
   1cf24:	bf28      	it	cs
   1cf26:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   1cf28:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1cf2a:	490a      	ldr	r1, [pc, #40]	; (1cf54 <sys_clock_set_timeout+0x60>)
   1cf2c:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   1cf2e:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1cf32:	9001      	str	r0, [sp, #4]
   1cf34:	f143 0300 	adc.w	r3, r3, #0
   1cf38:	f7ff fea6 	bl	1cc88 <compare_set>
}
   1cf3c:	b002      	add	sp, #8
   1cf3e:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   1cf40:	4c02      	ldr	r4, [pc, #8]	; (1cf4c <sys_clock_set_timeout+0x58>)
   1cf42:	e7e2      	b.n	1cf0a <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1cf44:	2401      	movs	r4, #1
   1cf46:	e7e0      	b.n	1cf0a <sys_clock_set_timeout+0x16>
   1cf48:	007ffffe 	.word	0x007ffffe
   1cf4c:	007fffff 	.word	0x007fffff
   1cf50:	200020a8 	.word	0x200020a8
   1cf54:	0001cba1 	.word	0x0001cba1

0001cf58 <sys_clock_elapsed>:
{
   1cf58:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1cf5a:	f7ff fe73 	bl	1cc44 <z_nrf_rtc_timer_read>
   1cf5e:	4b02      	ldr	r3, [pc, #8]	; (1cf68 <sys_clock_elapsed+0x10>)
   1cf60:	681b      	ldr	r3, [r3, #0]
}
   1cf62:	1ac0      	subs	r0, r0, r3
   1cf64:	bd08      	pop	{r3, pc}
   1cf66:	bf00      	nop
   1cf68:	200020a8 	.word	0x200020a8

0001cf6c <sys_clock_disable>:
{
   1cf6c:	b510      	push	{r4, lr}
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1cf6e:	4c08      	ldr	r4, [pc, #32]	; (1cf90 <sys_clock_disable+0x24>)
   1cf70:	2301      	movs	r3, #1
   1cf72:	6063      	str	r3, [r4, #4]
	irq_disable(RTC_IRQn);
   1cf74:	2011      	movs	r0, #17
   1cf76:	f7f6 fcd3 	bl	13920 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   1cf7a:	4b06      	ldr	r3, [pc, #24]	; (1cf94 <sys_clock_disable+0x28>)
   1cf7c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   1cf80:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   1cf84:	4b04      	ldr	r3, [pc, #16]	; (1cf98 <sys_clock_disable+0x2c>)
   1cf86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1cf8a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1cf8e:	bd10      	pop	{r4, pc}
   1cf90:	40011000 	.word	0x40011000
   1cf94:	000f0003 	.word	0x000f0003
   1cf98:	e000e100 	.word	0xe000e100

0001cf9c <get_buttons.part.0>:
	}

	return err;
}

static uint32_t get_buttons(void)
   1cf9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
		int val;

		val = gpio_pin_get_dt(&buttons[i]);
		if (val < 0) {
			LOG_ERR("Cannot read gpio pin");
   1cf9e:	4b07      	ldr	r3, [pc, #28]	; (1cfbc <get_buttons.part.0+0x20>)
   1cfa0:	9305      	str	r3, [sp, #20]
   1cfa2:	4807      	ldr	r0, [pc, #28]	; (1cfc0 <get_buttons.part.0+0x24>)
   1cfa4:	2302      	movs	r3, #2
   1cfa6:	aa04      	add	r2, sp, #16
   1cfa8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1cfac:	9304      	str	r3, [sp, #16]
   1cfae:	f00a f825 	bl	26ffc <z_log_msg_static_create.constprop.0>
			ret |= 1U << i;
		}
	}

	return ret;
}
   1cfb2:	2000      	movs	r0, #0
   1cfb4:	b007      	add	sp, #28
   1cfb6:	f85d fb04 	ldr.w	pc, [sp], #4
   1cfba:	bf00      	nop
   1cfbc:	0002ae6f 	.word	0x0002ae6f
   1cfc0:	000281d4 	.word	0x000281d4

0001cfc4 <get_buttons>:
{
   1cfc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint32_t ret = 0;
   1cfc8:	2400      	movs	r4, #0
   1cfca:	4e14      	ldr	r6, [pc, #80]	; (1d01c <get_buttons+0x58>)
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1cfcc:	4625      	mov	r5, r4
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get(port, &value);
	if (ret == 0) {
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   1cfce:	f04f 0801 	mov.w	r8, #1
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_get(spec->port, spec->pin);
   1cfd2:	6830      	ldr	r0, [r6, #0]
   1cfd4:	7937      	ldrb	r7, [r6, #4]
	const struct gpio_driver_data *const data =
   1cfd6:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return api->port_get_raw(port, value);
   1cfda:	6883      	ldr	r3, [r0, #8]
   1cfdc:	a901      	add	r1, sp, #4
   1cfde:	685b      	ldr	r3, [r3, #4]
   1cfe0:	4798      	blx	r3
	if (ret == 0) {
   1cfe2:	2800      	cmp	r0, #0
   1cfe4:	d00c      	beq.n	1d000 <get_buttons+0x3c>
		if (val < 0) {
   1cfe6:	db14      	blt.n	1d012 <get_buttons+0x4e>
			ret |= 1U << i;
   1cfe8:	fa08 f305 	lsl.w	r3, r8, r5
   1cfec:	431c      	orrs	r4, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1cfee:	3501      	adds	r5, #1
   1cff0:	2d04      	cmp	r5, #4
   1cff2:	f106 0608 	add.w	r6, r6, #8
   1cff6:	d1ec      	bne.n	1cfd2 <get_buttons+0xe>
}
   1cff8:	4620      	mov	r0, r4
   1cffa:	b003      	add	sp, #12
   1cffc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*value ^= data->invert;
   1d000:	f8d9 2000 	ldr.w	r2, [r9]
   1d004:	9b01      	ldr	r3, [sp, #4]
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   1d006:	fa08 f707 	lsl.w	r7, r8, r7
		*value ^= data->invert;
   1d00a:	4053      	eors	r3, r2
		if (val) {
   1d00c:	423b      	tst	r3, r7
   1d00e:	d0ee      	beq.n	1cfee <get_buttons+0x2a>
   1d010:	e7ea      	b.n	1cfe8 <get_buttons+0x24>
}
   1d012:	b003      	add	sp, #12
   1d014:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d018:	f7ff bfc0 	b.w	1cf9c <get_buttons.part.0>
   1d01c:	0002899c 	.word	0x0002899c

0001d020 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1d020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d024:	4e15      	ldr	r6, [pc, #84]	; (1d07c <dk_set_leds_state.part.0+0x5c>)
   1d026:	b086      	sub	sp, #24
   1d028:	4607      	mov	r7, r0
   1d02a:	4688      	mov	r8, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1d02c:	2500      	movs	r5, #0
		int val, err;

		if (BIT(i) & leds_on_mask) {
   1d02e:	fa27 f205 	lsr.w	r2, r7, r5
   1d032:	f012 0201 	ands.w	r2, r2, #1
   1d036:	d117      	bne.n	1d068 <dk_set_leds_state.part.0+0x48>
			val = 1;
		} else if (BIT(i) & leds_off_mask) {
   1d038:	fa28 f305 	lsr.w	r3, r8, r5
   1d03c:	07db      	lsls	r3, r3, #31
   1d03e:	d515      	bpl.n	1d06c <dk_set_leds_state.part.0+0x4c>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   1d040:	7931      	ldrb	r1, [r6, #4]
   1d042:	6830      	ldr	r0, [r6, #0]
   1d044:	f009 ffca 	bl	26fdc <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   1d048:	4604      	mov	r4, r0
   1d04a:	b178      	cbz	r0, 1d06c <dk_set_leds_state.part.0+0x4c>
			LOG_ERR("Cannot write LED gpio");
   1d04c:	4b0c      	ldr	r3, [pc, #48]	; (1d080 <dk_set_leds_state.part.0+0x60>)
   1d04e:	9305      	str	r3, [sp, #20]
   1d050:	480c      	ldr	r0, [pc, #48]	; (1d084 <dk_set_leds_state.part.0+0x64>)
   1d052:	2302      	movs	r3, #2
   1d054:	aa04      	add	r2, sp, #16
   1d056:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d05a:	9304      	str	r3, [sp, #16]
   1d05c:	f009 ffce 	bl	26ffc <z_log_msg_static_create.constprop.0>
			return err;
		}
	}

	return 0;
}
   1d060:	4620      	mov	r0, r4
   1d062:	b006      	add	sp, #24
   1d064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			val = 1;
   1d068:	2201      	movs	r2, #1
   1d06a:	e7e9      	b.n	1d040 <dk_set_leds_state.part.0+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1d06c:	3501      	adds	r5, #1
   1d06e:	2d04      	cmp	r5, #4
   1d070:	f106 0608 	add.w	r6, r6, #8
   1d074:	d1db      	bne.n	1d02e <dk_set_leds_state.part.0+0xe>
	return 0;
   1d076:	2400      	movs	r4, #0
   1d078:	e7f2      	b.n	1d060 <dk_set_leds_state.part.0+0x40>
   1d07a:	bf00      	nop
   1d07c:	0002897c 	.word	0x0002897c
   1d080:	0002ae84 	.word	0x0002ae84
   1d084:	000281d4 	.word	0x000281d4

0001d088 <callback_ctrl>:
{
   1d088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d08c:	4d22      	ldr	r5, [pc, #136]	; (1d118 <callback_ctrl+0x90>)
					 FLAGS_GPIO_0_1_ACTIVE :
   1d08e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 1d11c <callback_ctrl+0x94>
			flags = ((buttons[i].port == GPIO0_DEV || buttons[i].port == GPIO1_DEV) ?
   1d092:	f8df a08c 	ldr.w	sl, [pc, #140]	; 1d120 <callback_ctrl+0x98>
{
   1d096:	af00      	add	r7, sp, #0
   1d098:	4680      	mov	r8, r0
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   1d09a:	2600      	movs	r6, #0
			flags = ((buttons[i].port == GPIO0_DEV || buttons[i].port == GPIO1_DEV) ?
   1d09c:	6828      	ldr	r0, [r5, #0]
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   1d09e:	7929      	ldrb	r1, [r5, #4]
		if (enable) {
   1d0a0:	f1b8 0f00 	cmp.w	r8, #0
   1d0a4:	d02d      	beq.n	1d102 <callback_ctrl+0x7a>
					 FLAGS_GPIO_0_1_ACTIVE :
   1d0a6:	4548      	cmp	r0, r9
   1d0a8:	d01f      	beq.n	1d0ea <callback_ctrl+0x62>
			flags = ((buttons[i].port == GPIO0_DEV || buttons[i].port == GPIO1_DEV) ?
   1d0aa:	4550      	cmp	r0, sl
   1d0ac:	d01d      	beq.n	1d0ea <callback_ctrl+0x62>
	const struct gpio_driver_api *api =
   1d0ae:	6883      	ldr	r3, [r0, #8]
					 FLAGS_GPIO_0_1_ACTIVE :
   1d0b0:	f04f 62e8 	mov.w	r2, #121634816	; 0x7400000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1d0b4:	699c      	ldr	r4, [r3, #24]
   1d0b6:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   1d0ba:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
   1d0be:	47a0      	blx	r4
		if (err) {
   1d0c0:	4604      	mov	r4, r0
   1d0c2:	b310      	cbz	r0, 1d10a <callback_ctrl+0x82>
			LOG_ERR("GPIO IRQ config failed, err: %d", err);
   1d0c4:	466d      	mov	r5, sp
   1d0c6:	b088      	sub	sp, #32
   1d0c8:	466a      	mov	r2, sp
   1d0ca:	4b16      	ldr	r3, [pc, #88]	; (1d124 <callback_ctrl+0x9c>)
   1d0cc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d0d0:	2303      	movs	r3, #3
   1d0d2:	f842 3f10 	str.w	r3, [r2, #16]!
   1d0d6:	4814      	ldr	r0, [pc, #80]	; (1d128 <callback_ctrl+0xa0>)
   1d0d8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d0dc:	f009 ff8e 	bl	26ffc <z_log_msg_static_create.constprop.0>
   1d0e0:	46ad      	mov	sp, r5
}
   1d0e2:	4620      	mov	r0, r4
   1d0e4:	46bd      	mov	sp, r7
   1d0e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   1d0ea:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
   1d0ec:	6883      	ldr	r3, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   1d0ee:	6812      	ldr	r2, [r2, #0]
   1d0f0:	2401      	movs	r4, #1
   1d0f2:	408c      	lsls	r4, r1
					 FLAGS_GPIO_0_1_ACTIVE :
   1d0f4:	4214      	tst	r4, r2
   1d0f6:	bf14      	ite	ne
   1d0f8:	f04f 7230 	movne.w	r2, #46137344	; 0x2c00000
   1d0fc:	f04f 6298 	moveq.w	r2, #79691776	; 0x4c00000
   1d100:	e7d8      	b.n	1d0b4 <callback_ctrl+0x2c>
			flags = GPIO_INT_DISABLE;
   1d102:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
	const struct gpio_driver_api *api =
   1d106:	6883      	ldr	r3, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1d108:	e7d4      	b.n	1d0b4 <callback_ctrl+0x2c>
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   1d10a:	3601      	adds	r6, #1
   1d10c:	2e04      	cmp	r6, #4
   1d10e:	f105 0508 	add.w	r5, r5, #8
   1d112:	d1c3      	bne.n	1d09c <callback_ctrl+0x14>
   1d114:	e7e5      	b.n	1d0e2 <callback_ctrl+0x5a>
   1d116:	bf00      	nop
   1d118:	0002899c 	.word	0x0002899c
   1d11c:	00027ec4 	.word	0x00027ec4
   1d120:	00027eac 	.word	0x00027eac
   1d124:	0002ae9a 	.word	0x0002ae9a
   1d128:	000281d4 	.word	0x000281d4

0001d12c <button_pressed>:
{
   1d12c:	b530      	push	{r4, r5, lr}
   1d12e:	b087      	sub	sp, #28
	__asm__ volatile(
   1d130:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d134:	f3ef 8511 	mrs	r5, BASEPRI
   1d138:	f383 8812 	msr	BASEPRI_MAX, r3
   1d13c:	f3bf 8f6f 	isb	sy
	switch (state) {
   1d140:	4c13      	ldr	r4, [pc, #76]	; (1d190 <button_pressed+0x64>)
   1d142:	7823      	ldrb	r3, [r4, #0]
   1d144:	b9eb      	cbnz	r3, 1d182 <button_pressed+0x56>
		if (gpio_dev == GPIO0_DEV || gpio_dev == GPIO1_DEV) {
   1d146:	4b13      	ldr	r3, [pc, #76]	; (1d194 <button_pressed+0x68>)
   1d148:	4298      	cmp	r0, r3
   1d14a:	d002      	beq.n	1d152 <button_pressed+0x26>
   1d14c:	4b12      	ldr	r3, [pc, #72]	; (1d198 <button_pressed+0x6c>)
   1d14e:	4298      	cmp	r0, r3
   1d150:	d110      	bne.n	1d174 <button_pressed+0x48>
			err = callback_ctrl(false);
   1d152:	2000      	movs	r0, #0
   1d154:	f7ff ff98 	bl	1d088 <callback_ctrl>
			if (err) {
   1d158:	b148      	cbz	r0, 1d16e <button_pressed+0x42>
				LOG_ERR("Failed disabling interrupts");
   1d15a:	4b10      	ldr	r3, [pc, #64]	; (1d19c <button_pressed+0x70>)
   1d15c:	9305      	str	r3, [sp, #20]
   1d15e:	4810      	ldr	r0, [pc, #64]	; (1d1a0 <button_pressed+0x74>)
   1d160:	2302      	movs	r3, #2
   1d162:	aa04      	add	r2, sp, #16
   1d164:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d168:	9304      	str	r3, [sp, #16]
   1d16a:	f009 ff47 	bl	26ffc <z_log_msg_static_create.constprop.0>
			irq_enabled = false;
   1d16e:	4b0d      	ldr	r3, [pc, #52]	; (1d1a4 <button_pressed+0x78>)
   1d170:	2200      	movs	r2, #0
   1d172:	701a      	strb	r2, [r3, #0]
		state = STATE_SCANNING;
   1d174:	2301      	movs	r3, #1
   1d176:	7023      	strb	r3, [r4, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   1d178:	480b      	ldr	r0, [pc, #44]	; (1d1a8 <button_pressed+0x7c>)
   1d17a:	2221      	movs	r2, #33	; 0x21
   1d17c:	2300      	movs	r3, #0
   1d17e:	f002 fcfd 	bl	1fb7c <k_work_reschedule>
	__asm__ volatile(
   1d182:	f385 8811 	msr	BASEPRI, r5
   1d186:	f3bf 8f6f 	isb	sy
}
   1d18a:	b007      	add	sp, #28
   1d18c:	bd30      	pop	{r4, r5, pc}
   1d18e:	bf00      	nop
   1d190:	2000411c 	.word	0x2000411c
   1d194:	00027ec4 	.word	0x00027ec4
   1d198:	00027eac 	.word	0x00027eac
   1d19c:	0002aeba 	.word	0x0002aeba
   1d1a0:	000281d4 	.word	0x000281d4
   1d1a4:	2000411b 	.word	0x2000411b
   1d1a8:	200020b8 	.word	0x200020b8

0001d1ac <buttons_scan_fn>:
{
   1d1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (irq_enabled) {
   1d1b0:	4f39      	ldr	r7, [pc, #228]	; (1d298 <buttons_scan_fn+0xec>)
   1d1b2:	783b      	ldrb	r3, [r7, #0]
{
   1d1b4:	b086      	sub	sp, #24
	if (irq_enabled) {
   1d1b6:	b17b      	cbz	r3, 1d1d8 <buttons_scan_fn+0x2c>
		err = callback_ctrl(false);
   1d1b8:	2000      	movs	r0, #0
   1d1ba:	f7ff ff65 	bl	1d088 <callback_ctrl>
		if (err) {
   1d1be:	b150      	cbz	r0, 1d1d6 <buttons_scan_fn+0x2a>
			LOG_ERR("Cannot disable callbacks");
   1d1c0:	4b36      	ldr	r3, [pc, #216]	; (1d29c <buttons_scan_fn+0xf0>)
			LOG_ERR("Cannot enable callbacks");
   1d1c2:	9305      	str	r3, [sp, #20]
   1d1c4:	4836      	ldr	r0, [pc, #216]	; (1d2a0 <buttons_scan_fn+0xf4>)
   1d1c6:	2302      	movs	r3, #2
   1d1c8:	aa04      	add	r2, sp, #16
   1d1ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d1ce:	9304      	str	r3, [sp, #16]
   1d1d0:	f009 ff14 	bl	26ffc <z_log_msg_static_create.constprop.0>
   1d1d4:	e050      	b.n	1d278 <buttons_scan_fn+0xcc>
		irq_enabled = false;
   1d1d6:	7038      	strb	r0, [r7, #0]
	button_scan = get_buttons();
   1d1d8:	f7ff fef4 	bl	1cfc4 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d1dc:	f3bf 8f5b 	dmb	ish
   1d1e0:	4b30      	ldr	r3, [pc, #192]	; (1d2a4 <buttons_scan_fn+0xf8>)
   1d1e2:	4604      	mov	r4, r0
   1d1e4:	e853 2f00 	ldrex	r2, [r3]
   1d1e8:	e843 4100 	strex	r1, r4, [r3]
   1d1ec:	2900      	cmp	r1, #0
   1d1ee:	d1f9      	bne.n	1d1e4 <buttons_scan_fn+0x38>
   1d1f0:	f3bf 8f5b 	dmb	ish
	if (!initial_run) {
   1d1f4:	4b2c      	ldr	r3, [pc, #176]	; (1d2a8 <buttons_scan_fn+0xfc>)
   1d1f6:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1d2ac <buttons_scan_fn+0x100>
   1d1fa:	781a      	ldrb	r2, [r3, #0]
   1d1fc:	bb4a      	cbnz	r2, 1d252 <buttons_scan_fn+0xa6>
		if (button_scan != last_button_scan) {
   1d1fe:	f8d8 6000 	ldr.w	r6, [r8]
   1d202:	42a6      	cmp	r6, r4
   1d204:	d019      	beq.n	1d23a <buttons_scan_fn+0x8e>
	if (button_handler_cb != NULL) {
   1d206:	4b2a      	ldr	r3, [pc, #168]	; (1d2b0 <buttons_scan_fn+0x104>)
   1d208:	681b      	ldr	r3, [r3, #0]
			uint32_t has_changed = (button_scan ^ last_button_scan);
   1d20a:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
   1d20c:	b10b      	cbz	r3, 1d212 <buttons_scan_fn+0x66>
		button_handler_cb(button_state, has_changed);
   1d20e:	4631      	mov	r1, r6
   1d210:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   1d212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d216:	4827      	ldr	r0, [pc, #156]	; (1d2b4 <buttons_scan_fn+0x108>)
   1d218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d21c:	f002 f9ac 	bl	1f578 <z_impl_k_mutex_lock>
	return list->head;
   1d220:	4b25      	ldr	r3, [pc, #148]	; (1d2b8 <buttons_scan_fn+0x10c>)
   1d222:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   1d224:	b135      	cbz	r5, 1d234 <buttons_scan_fn+0x88>
   1d226:	3d04      	subs	r5, #4
			handler->cb(button_state, has_changed);
   1d228:	4631      	mov	r1, r6
   1d22a:	682b      	ldr	r3, [r5, #0]
   1d22c:	4620      	mov	r0, r4
   1d22e:	4798      	blx	r3
	return node->next;
   1d230:	686d      	ldr	r5, [r5, #4]
   1d232:	e7f7      	b.n	1d224 <buttons_scan_fn+0x78>
	return z_impl_k_mutex_unlock(mutex);
   1d234:	481f      	ldr	r0, [pc, #124]	; (1d2b4 <buttons_scan_fn+0x108>)
   1d236:	f002 fa19 	bl	1f66c <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   1d23a:	f8c8 4000 	str.w	r4, [r8]
	if (button_scan != 0) {
   1d23e:	b15c      	cbz	r4, 1d258 <buttons_scan_fn+0xac>
		k_work_reschedule(&buttons_scan,
   1d240:	481e      	ldr	r0, [pc, #120]	; (1d2bc <buttons_scan_fn+0x110>)
   1d242:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1d246:	2300      	movs	r3, #0
}
   1d248:	b006      	add	sp, #24
   1d24a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_reschedule(&buttons_scan,
   1d24e:	f002 bc95 	b.w	1fb7c <k_work_reschedule>
		initial_run = false;
   1d252:	2200      	movs	r2, #0
   1d254:	701a      	strb	r2, [r3, #0]
   1d256:	e7f0      	b.n	1d23a <buttons_scan_fn+0x8e>
	__asm__ volatile(
   1d258:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d25c:	f3ef 8611 	mrs	r6, BASEPRI
   1d260:	f383 8812 	msr	BASEPRI_MAX, r3
   1d264:	f3bf 8f6f 	isb	sy
		switch (state) {
   1d268:	4b15      	ldr	r3, [pc, #84]	; (1d2c0 <buttons_scan_fn+0x114>)
   1d26a:	781d      	ldrb	r5, [r3, #0]
   1d26c:	2d01      	cmp	r5, #1
   1d26e:	d006      	beq.n	1d27e <buttons_scan_fn+0xd2>
	__asm__ volatile(
   1d270:	f386 8811 	msr	BASEPRI, r6
   1d274:	f3bf 8f6f 	isb	sy
}
   1d278:	b006      	add	sp, #24
   1d27a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = callback_ctrl(true);
   1d27e:	4628      	mov	r0, r5
			state = STATE_WAITING;
   1d280:	701c      	strb	r4, [r3, #0]
			err = callback_ctrl(true);
   1d282:	f7ff ff01 	bl	1d088 <callback_ctrl>
			irq_enabled = true;
   1d286:	703d      	strb	r5, [r7, #0]
   1d288:	f386 8811 	msr	BASEPRI, r6
   1d28c:	f3bf 8f6f 	isb	sy
		if (err) {
   1d290:	2800      	cmp	r0, #0
   1d292:	d0f1      	beq.n	1d278 <buttons_scan_fn+0xcc>
			LOG_ERR("Cannot enable callbacks");
   1d294:	4b0b      	ldr	r3, [pc, #44]	; (1d2c4 <buttons_scan_fn+0x118>)
   1d296:	e794      	b.n	1d1c2 <buttons_scan_fn+0x16>
   1d298:	2000411b 	.word	0x2000411b
   1d29c:	0002aed6 	.word	0x0002aed6
   1d2a0:	000281d4 	.word	0x000281d4
   1d2a4:	20003410 	.word	0x20003410
   1d2a8:	2000085f 	.word	0x2000085f
   1d2ac:	200033e4 	.word	0x200033e4
   1d2b0:	20003414 	.word	0x20003414
   1d2b4:	200033e8 	.word	0x200033e8
   1d2b8:	200033fc 	.word	0x200033fc
   1d2bc:	200020b8 	.word	0x200020b8
   1d2c0:	2000411c 	.word	0x2000411c
   1d2c4:	0002aeef 	.word	0x0002aeef

0001d2c8 <dk_leds_init>:
{
   1d2c8:	b570      	push	{r4, r5, r6, lr}
   1d2ca:	4e11      	ldr	r6, [pc, #68]	; (1d310 <dk_leds_init+0x48>)
   1d2cc:	b086      	sub	sp, #24
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1d2ce:	2500      	movs	r5, #0
		err = gpio_pin_configure_dt(&leds[i], GPIO_OUTPUT);
   1d2d0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   1d2d4:	4630      	mov	r0, r6
   1d2d6:	f009 fe6c 	bl	26fb2 <gpio_pin_configure_dt>
		if (err) {
   1d2da:	4604      	mov	r4, r0
   1d2dc:	b950      	cbnz	r0, 1d2f4 <dk_leds_init+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1d2de:	3501      	adds	r5, #1
   1d2e0:	2d04      	cmp	r5, #4
   1d2e2:	f106 0608 	add.w	r6, r6, #8
   1d2e6:	d1f3      	bne.n	1d2d0 <dk_leds_init+0x8>
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   1d2e8:	210f      	movs	r1, #15
}
   1d2ea:	b006      	add	sp, #24
   1d2ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d2f0:	f7ff be96 	b.w	1d020 <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   1d2f4:	4b07      	ldr	r3, [pc, #28]	; (1d314 <dk_leds_init+0x4c>)
   1d2f6:	9305      	str	r3, [sp, #20]
   1d2f8:	4807      	ldr	r0, [pc, #28]	; (1d318 <dk_leds_init+0x50>)
   1d2fa:	2302      	movs	r3, #2
   1d2fc:	aa04      	add	r2, sp, #16
   1d2fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d302:	9304      	str	r3, [sp, #16]
   1d304:	f009 fe7a 	bl	26ffc <z_log_msg_static_create.constprop.0>
}
   1d308:	4620      	mov	r0, r4
   1d30a:	b006      	add	sp, #24
   1d30c:	bd70      	pop	{r4, r5, r6, pc}
   1d30e:	bf00      	nop
   1d310:	0002897c 	.word	0x0002897c
   1d314:	0002af07 	.word	0x0002af07
   1d318:	000281d4 	.word	0x000281d4

0001d31c <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d31c:	4b07      	ldr	r3, [pc, #28]	; (1d33c <dk_read_buttons+0x20>)
   1d31e:	f3bf 8f5b 	dmb	ish
   1d322:	681b      	ldr	r3, [r3, #0]
   1d324:	f3bf 8f5b 	dmb	ish
	if (button_state != NULL) {
   1d328:	b100      	cbz	r0, 1d32c <dk_read_buttons+0x10>
		*button_state = current_state;
   1d32a:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   1d32c:	4804      	ldr	r0, [pc, #16]	; (1d340 <dk_read_buttons+0x24>)
   1d32e:	b111      	cbz	r1, 1d336 <dk_read_buttons+0x1a>
		*has_changed = (current_state ^ last_state);
   1d330:	6802      	ldr	r2, [r0, #0]
   1d332:	405a      	eors	r2, r3
   1d334:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   1d336:	6003      	str	r3, [r0, #0]
}
   1d338:	4770      	bx	lr
   1d33a:	bf00      	nop
   1d33c:	20003410 	.word	0x20003410
   1d340:	200033e0 	.word	0x200033e0

0001d344 <dk_buttons_init>:
{
   1d344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	button_handler_cb = button_handler;
   1d348:	4b3c      	ldr	r3, [pc, #240]	; (1d43c <dk_buttons_init+0xf8>)
{
   1d34a:	b087      	sub	sp, #28
	button_handler_cb = button_handler;
   1d34c:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   1d34e:	483c      	ldr	r0, [pc, #240]	; (1d440 <dk_buttons_init+0xfc>)
   1d350:	4d3c      	ldr	r5, [pc, #240]	; (1d444 <dk_buttons_init+0x100>)
   1d352:	f00a f88f 	bl	27474 <z_impl_k_mutex_init>
   1d356:	462e      	mov	r6, r5
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1d358:	2700      	movs	r7, #0
   1d35a:	46a8      	mov	r8, r5
			GPIO_PULL_UP : GPIO_PULL_DOWN;
   1d35c:	88f3      	ldrh	r3, [r6, #6]
   1d35e:	f013 0f01 	tst.w	r3, #1
   1d362:	bf0c      	ite	eq
   1d364:	2120      	moveq	r1, #32
   1d366:	2110      	movne	r1, #16
		err = gpio_pin_configure_dt(&buttons[i], GPIO_INPUT | flags);
   1d368:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
   1d36c:	4630      	mov	r0, r6
   1d36e:	f009 fe20 	bl	26fb2 <gpio_pin_configure_dt>
		if (err) {
   1d372:	4604      	mov	r4, r0
   1d374:	b168      	cbz	r0, 1d392 <dk_buttons_init+0x4e>
			LOG_ERR("Cannot configure button gpio");
   1d376:	4b34      	ldr	r3, [pc, #208]	; (1d448 <dk_buttons_init+0x104>)
			LOG_ERR("Cannot disable callbacks()");
   1d378:	9305      	str	r3, [sp, #20]
   1d37a:	4834      	ldr	r0, [pc, #208]	; (1d44c <dk_buttons_init+0x108>)
   1d37c:	2302      	movs	r3, #2
   1d37e:	aa04      	add	r2, sp, #16
   1d380:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d384:	9304      	str	r3, [sp, #16]
   1d386:	f009 fe39 	bl	26ffc <z_log_msg_static_create.constprop.0>
}
   1d38a:	4620      	mov	r0, r4
   1d38c:	b007      	add	sp, #28
   1d38e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1d392:	3701      	adds	r7, #1
   1d394:	2f04      	cmp	r7, #4
   1d396:	f106 0608 	add.w	r6, r6, #8
   1d39a:	d1df      	bne.n	1d35c <dk_buttons_init+0x18>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1d39c:	4606      	mov	r6, r0
	uint32_t pin_mask = 0;
   1d39e:	4607      	mov	r7, r0
		pin_mask |= BIT(buttons[i].pin);
   1d3a0:	f04f 0901 	mov.w	r9, #1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   1d3a4:	6828      	ldr	r0, [r5, #0]
   1d3a6:	7929      	ldrb	r1, [r5, #4]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1d3a8:	6883      	ldr	r3, [r0, #8]
   1d3aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1d3ae:	699c      	ldr	r4, [r3, #24]
   1d3b0:	2300      	movs	r3, #0
   1d3b2:	47a0      	blx	r4
		if (err) {
   1d3b4:	4604      	mov	r4, r0
   1d3b6:	b108      	cbz	r0, 1d3bc <dk_buttons_init+0x78>
			LOG_ERR("Cannot disable callbacks()");
   1d3b8:	4b25      	ldr	r3, [pc, #148]	; (1d450 <dk_buttons_init+0x10c>)
   1d3ba:	e7dd      	b.n	1d378 <dk_buttons_init+0x34>
		pin_mask |= BIT(buttons[i].pin);
   1d3bc:	792b      	ldrb	r3, [r5, #4]
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1d3be:	3601      	adds	r6, #1
		pin_mask |= BIT(buttons[i].pin);
   1d3c0:	fa09 f303 	lsl.w	r3, r9, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1d3c4:	2e04      	cmp	r6, #4
		pin_mask |= BIT(buttons[i].pin);
   1d3c6:	ea47 0703 	orr.w	r7, r7, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1d3ca:	f105 0508 	add.w	r5, r5, #8
   1d3ce:	d1e9      	bne.n	1d3a4 <dk_buttons_init+0x60>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   1d3d0:	4e20      	ldr	r6, [pc, #128]	; (1d454 <dk_buttons_init+0x110>)
   1d3d2:	4b21      	ldr	r3, [pc, #132]	; (1d458 <dk_buttons_init+0x114>)
	callback->pin_mask = pin_mask;
   1d3d4:	e9c6 3701 	strd	r3, r7, [r6, #4]
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1d3d8:	4605      	mov	r5, r0
		err = gpio_add_callback(buttons[i].port, &gpio_cb);
   1d3da:	f858 0035 	ldr.w	r0, [r8, r5, lsl #3]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   1d3de:	6883      	ldr	r3, [r0, #8]
   1d3e0:	69db      	ldr	r3, [r3, #28]
   1d3e2:	b133      	cbz	r3, 1d3f2 <dk_buttons_init+0xae>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   1d3e4:	2201      	movs	r2, #1
   1d3e6:	4631      	mov	r1, r6
   1d3e8:	4798      	blx	r3
		if (err) {
   1d3ea:	4604      	mov	r4, r0
   1d3ec:	b120      	cbz	r0, 1d3f8 <dk_buttons_init+0xb4>
			LOG_ERR("Cannot add callback");
   1d3ee:	4b1b      	ldr	r3, [pc, #108]	; (1d45c <dk_buttons_init+0x118>)
   1d3f0:	e7c2      	b.n	1d378 <dk_buttons_init+0x34>
		return -ENOTSUP;
   1d3f2:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1d3f6:	e7fa      	b.n	1d3ee <dk_buttons_init+0xaa>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1d3f8:	3501      	adds	r5, #1
   1d3fa:	2d04      	cmp	r5, #4
   1d3fc:	d1ed      	bne.n	1d3da <dk_buttons_init+0x96>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
   1d3fe:	4918      	ldr	r1, [pc, #96]	; (1d460 <dk_buttons_init+0x11c>)
   1d400:	4818      	ldr	r0, [pc, #96]	; (1d464 <dk_buttons_init+0x120>)
   1d402:	f00a f99c 	bl	2773e <k_work_init_delayable>
	state = STATE_SCANNING;
   1d406:	4b18      	ldr	r3, [pc, #96]	; (1d468 <dk_buttons_init+0x124>)
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   1d408:	4816      	ldr	r0, [pc, #88]	; (1d464 <dk_buttons_init+0x120>)
	state = STATE_SCANNING;
   1d40a:	2201      	movs	r2, #1
   1d40c:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   1d40e:	2300      	movs	r3, #0
   1d410:	2200      	movs	r2, #0
   1d412:	f002 fb7f 	bl	1fb14 <k_work_schedule>
	dk_read_buttons(NULL, NULL);
   1d416:	4621      	mov	r1, r4
   1d418:	4620      	mov	r0, r4
   1d41a:	f7ff ff7f 	bl	1d31c <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
   1d41e:	f7ff fdd1 	bl	1cfc4 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d422:	f3bf 8f5b 	dmb	ish
   1d426:	4b11      	ldr	r3, [pc, #68]	; (1d46c <dk_buttons_init+0x128>)
   1d428:	e853 2f00 	ldrex	r2, [r3]
   1d42c:	e843 0100 	strex	r1, r0, [r3]
   1d430:	2900      	cmp	r1, #0
   1d432:	d1f9      	bne.n	1d428 <dk_buttons_init+0xe4>
   1d434:	f3bf 8f5b 	dmb	ish
   1d438:	e7a7      	b.n	1d38a <dk_buttons_init+0x46>
   1d43a:	bf00      	nop
   1d43c:	20003414 	.word	0x20003414
   1d440:	200033e8 	.word	0x200033e8
   1d444:	0002899c 	.word	0x0002899c
   1d448:	0002af21 	.word	0x0002af21
   1d44c:	000281d4 	.word	0x000281d4
   1d450:	0002af3e 	.word	0x0002af3e
   1d454:	20003404 	.word	0x20003404
   1d458:	0001d12d 	.word	0x0001d12d
   1d45c:	0002af59 	.word	0x0002af59
   1d460:	0001d1ad 	.word	0x0001d1ad
   1d464:	200020b8 	.word	0x200020b8
   1d468:	2000411c 	.word	0x2000411c
   1d46c:	20003410 	.word	0x20003410

0001d470 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
   1d470:	b510      	push	{r4, lr}
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   1d472:	2803      	cmp	r0, #3
{
   1d474:	b086      	sub	sp, #24
   1d476:	460a      	mov	r2, r1
	if (led_idx >= ARRAY_SIZE(leds)) {
   1d478:	d90e      	bls.n	1d498 <dk_set_led+0x28>
		LOG_ERR("LED index out of the range");
   1d47a:	4b12      	ldr	r3, [pc, #72]	; (1d4c4 <dk_set_led+0x54>)
   1d47c:	9305      	str	r3, [sp, #20]
   1d47e:	4812      	ldr	r0, [pc, #72]	; (1d4c8 <dk_set_led+0x58>)
   1d480:	2302      	movs	r3, #2
   1d482:	aa04      	add	r2, sp, #16
   1d484:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EINVAL;
   1d488:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("LED index out of the range");
   1d48c:	9304      	str	r3, [sp, #16]
   1d48e:	f009 fdb5 	bl	26ffc <z_log_msg_static_create.constprop.0>
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   1d492:	4620      	mov	r0, r4
   1d494:	b006      	add	sp, #24
   1d496:	bd10      	pop	{r4, pc}
	return gpio_pin_set(spec->port, spec->pin, value);
   1d498:	4b0c      	ldr	r3, [pc, #48]	; (1d4cc <dk_set_led+0x5c>)
   1d49a:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   1d49e:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   1d4a2:	7909      	ldrb	r1, [r1, #4]
   1d4a4:	f009 fd9a 	bl	26fdc <gpio_pin_set>
	if (err) {
   1d4a8:	4604      	mov	r4, r0
   1d4aa:	2800      	cmp	r0, #0
   1d4ac:	d0f1      	beq.n	1d492 <dk_set_led+0x22>
		LOG_ERR("Cannot write LED gpio");
   1d4ae:	4b08      	ldr	r3, [pc, #32]	; (1d4d0 <dk_set_led+0x60>)
   1d4b0:	9305      	str	r3, [sp, #20]
   1d4b2:	4805      	ldr	r0, [pc, #20]	; (1d4c8 <dk_set_led+0x58>)
   1d4b4:	2302      	movs	r3, #2
   1d4b6:	aa04      	add	r2, sp, #16
   1d4b8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d4bc:	9304      	str	r3, [sp, #16]
   1d4be:	f009 fd9d 	bl	26ffc <z_log_msg_static_create.constprop.0>
   1d4c2:	e7e6      	b.n	1d492 <dk_set_led+0x22>
   1d4c4:	0002af6d 	.word	0x0002af6d
   1d4c8:	000281d4 	.word	0x000281d4
   1d4cc:	0002897c 	.word	0x0002897c
   1d4d0:	0002ae84 	.word	0x0002ae84

0001d4d4 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1d4d4:	4602      	mov	r2, r0
   1d4d6:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1d4d8:	4801      	ldr	r0, [pc, #4]	; (1d4e0 <multithreading_lock_acquire+0xc>)
   1d4da:	f002 b84d 	b.w	1f578 <z_impl_k_mutex_lock>
   1d4de:	bf00      	nop
   1d4e0:	2000091c 	.word	0x2000091c

0001d4e4 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   1d4e4:	4801      	ldr	r0, [pc, #4]	; (1d4ec <multithreading_lock_release+0x8>)
   1d4e6:	f002 b8c1 	b.w	1f66c <z_impl_k_mutex_unlock>
   1d4ea:	bf00      	nop
   1d4ec:	2000091c 	.word	0x2000091c

0001d4f0 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1d4f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   1d4f2:	f7f5 faad 	bl	12a50 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1d4f6:	4b07      	ldr	r3, [pc, #28]	; (1d514 <k_sys_fatal_error_handler+0x24>)
   1d4f8:	9305      	str	r3, [sp, #20]
   1d4fa:	2302      	movs	r3, #2
   1d4fc:	9304      	str	r3, [sp, #16]
   1d4fe:	4806      	ldr	r0, [pc, #24]	; (1d518 <k_sys_fatal_error_handler+0x28>)
   1d500:	2300      	movs	r3, #0
   1d502:	aa04      	add	r2, sp, #16
   1d504:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d508:	f7f5 fb82 	bl	12c10 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   1d50c:	2000      	movs	r0, #0
   1d50e:	f7f6 fff1 	bl	144f4 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1d512:	bf00      	nop
   1d514:	0002af9c 	.word	0x0002af9c
   1d518:	000281dc 	.word	0x000281dc

0001d51c <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   1d51c:	b598      	push	{r3, r4, r7, lr}
   1d51e:	af00      	add	r7, sp, #0
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   1d520:	466c      	mov	r4, sp
   1d522:	b08a      	sub	sp, #40	; 0x28
   1d524:	466a      	mov	r2, sp
   1d526:	4b0c      	ldr	r3, [pc, #48]	; (1d558 <sdc_assertion_handler+0x3c>)
   1d528:	61d1      	str	r1, [r2, #28]
   1d52a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d52e:	f44f 7300 	mov.w	r3, #512	; 0x200
   1d532:	8413      	strh	r3, [r2, #32]
   1d534:	4b09      	ldr	r3, [pc, #36]	; (1d55c <sdc_assertion_handler+0x40>)
   1d536:	f842 3f10 	str.w	r3, [r2, #16]!
   1d53a:	4809      	ldr	r0, [pc, #36]	; (1d560 <sdc_assertion_handler+0x44>)
   1d53c:	2300      	movs	r3, #0
   1d53e:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1d542:	f7f5 fb65 	bl	12c10 <z_impl_z_log_msg_static_create>
   1d546:	46a5      	mov	sp, r4
	k_oops();
   1d548:	4040      	eors	r0, r0
   1d54a:	f380 8811 	msr	BASEPRI, r0
   1d54e:	f04f 0003 	mov.w	r0, #3
   1d552:	df02      	svc	2
}
   1d554:	46bd      	mov	sp, r7
   1d556:	bd98      	pop	{r3, r4, r7, pc}
   1d558:	0002afb9 	.word	0x0002afb9
   1d55c:	01000004 	.word	0x01000004
   1d560:	000281b4 	.word	0x000281b4

0001d564 <rand_prio_low_vector_get>:
}

static const struct device *entropy_source = DEVICE_DT_GET(DT_NODELABEL(rng));

static uint8_t rand_prio_low_vector_get(uint8_t *p_buff, uint8_t length)
{
   1d564:	b538      	push	{r3, r4, r5, lr}
   1d566:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1d568:	4807      	ldr	r0, [pc, #28]	; (1d588 <rand_prio_low_vector_get+0x24>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1d56a:	6883      	ldr	r3, [r0, #8]
   1d56c:	685d      	ldr	r5, [r3, #4]
   1d56e:	460a      	mov	r2, r1
   1d570:	b135      	cbz	r5, 1d580 <rand_prio_low_vector_get+0x1c>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1d572:	2300      	movs	r3, #0
   1d574:	4621      	mov	r1, r4
   1d576:	47a8      	blx	r5
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);

	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
	return ret >= 0 ? ret : 0;
   1d578:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1d57c:	b2c0      	uxtb	r0, r0
   1d57e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1d580:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d584:	e7f8      	b.n	1d578 <rand_prio_low_vector_get+0x14>
   1d586:	bf00      	nop
   1d588:	00027edc 	.word	0x00027edc

0001d58c <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   1d58c:	4901      	ldr	r1, [pc, #4]	; (1d594 <receive_signal_raise+0x8>)
   1d58e:	4802      	ldr	r0, [pc, #8]	; (1d598 <receive_signal_raise+0xc>)
   1d590:	f00a b8be 	b.w	27710 <k_work_submit_to_queue>
   1d594:	20003418 	.word	0x20003418
   1d598:	20002968 	.word	0x20002968

0001d59c <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   1d59c:	b410      	push	{r4}
   1d59e:	4603      	mov	r3, r0
   1d5a0:	460a      	mov	r2, r1
	return api->get_entropy(dev, buffer, length);
   1d5a2:	4803      	ldr	r0, [pc, #12]	; (1d5b0 <rand_prio_low_vector_get_blocking+0x14>)
   1d5a4:	6881      	ldr	r1, [r0, #8]
   1d5a6:	680c      	ldr	r4, [r1, #0]
   1d5a8:	4619      	mov	r1, r3
   1d5aa:	4623      	mov	r3, r4
	int err = entropy_get_entropy(entropy_source, p_buff, length);

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   1d5ac:	bc10      	pop	{r4}
   1d5ae:	4718      	bx	r3
   1d5b0:	00027edc 	.word	0x00027edc

0001d5b4 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(void)
{
   1d5b4:	b5b0      	push	{r4, r5, r7, lr}
   1d5b6:	b082      	sub	sp, #8
	int err = 0;

	bt_hci_driver_register(&drv);
   1d5b8:	4839      	ldr	r0, [pc, #228]	; (1d6a0 <hci_driver_init+0xec>)
{
   1d5ba:	af00      	add	r7, sp, #0
	bt_hci_driver_register(&drv);
   1d5bc:	f7f8 fb24 	bl	15c08 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   1d5c0:	4838      	ldr	r0, [pc, #224]	; (1d6a4 <hci_driver_init+0xf0>)
   1d5c2:	f7e3 f9af 	bl	924 <sdc_init>
		err = sdc_support_adv();
   1d5c6:	f7e3 fa27 	bl	a18 <sdc_support_adv>
		if (err) {
   1d5ca:	b120      	cbz	r0, 1d5d6 <hci_driver_init+0x22>
			return -ENOTSUP;
   1d5cc:	f06f 0085 	mvn.w	r0, #133	; 0x85
	if (err) {
		return err;
	}

	return err;
}
   1d5d0:	3708      	adds	r7, #8
   1d5d2:	46bd      	mov	sp, r7
   1d5d4:	bdb0      	pop	{r4, r5, r7, pc}
		err = sdc_support_peripheral();
   1d5d6:	f7e3 fa4f 	bl	a78 <sdc_support_peripheral>
		if (err) {
   1d5da:	2800      	cmp	r0, #0
   1d5dc:	d1f6      	bne.n	1d5cc <hci_driver_init+0x18>
			err = sdc_support_dle_peripheral();
   1d5de:	f7e3 fa2b 	bl	a38 <sdc_support_dle_peripheral>
			if (err) {
   1d5e2:	2800      	cmp	r0, #0
   1d5e4:	d1f2      	bne.n	1d5cc <hci_driver_init+0x18>
		err = sdc_support_le_2m_phy();
   1d5e6:	f7e3 fa37 	bl	a58 <sdc_support_le_2m_phy>
		if (err) {
   1d5ea:	2800      	cmp	r0, #0
   1d5ec:	d1ee      	bne.n	1d5cc <hci_driver_init+0x18>
			err = sdc_support_phy_update_peripheral();
   1d5ee:	f7e3 fa53 	bl	a98 <sdc_support_phy_update_peripheral>
			if (err) {
   1d5f2:	4604      	mov	r4, r0
   1d5f4:	2800      	cmp	r0, #0
   1d5f6:	d1e9      	bne.n	1d5cc <hci_driver_init+0x18>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1d5f8:	2501      	movs	r5, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1d5fa:	1d3a      	adds	r2, r7, #4
   1d5fc:	2102      	movs	r1, #2
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1d5fe:	713d      	strb	r5, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1d600:	f7e3 f906 	bl	810 <sdc_cfg_set>
	if (required_memory < 0) {
   1d604:	2800      	cmp	r0, #0
   1d606:	dbe3      	blt.n	1d5d0 <hci_driver_init+0x1c>
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   1d608:	2108      	movs	r1, #8
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1d60a:	1d3a      	adds	r2, r7, #4
   1d60c:	4620      	mov	r0, r4
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   1d60e:	80b9      	strh	r1, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1d610:	f7e3 f8fe 	bl	810 <sdc_cfg_set>
	if (required_memory < 0) {
   1d614:	2800      	cmp	r0, #0
   1d616:	dbdb      	blt.n	1d5d0 <hci_driver_init+0x1c>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1d618:	4b23      	ldr	r3, [pc, #140]	; (1d6a8 <hci_driver_init+0xf4>)
   1d61a:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1d61c:	1d3a      	adds	r2, r7, #4
   1d61e:	2103      	movs	r1, #3
   1d620:	4620      	mov	r0, r4
   1d622:	f7e3 f8f5 	bl	810 <sdc_cfg_set>
	if (required_memory < 0) {
   1d626:	2800      	cmp	r0, #0
   1d628:	dbd2      	blt.n	1d5d0 <hci_driver_init+0x1c>
	cfg.event_length.event_length_us =
   1d62a:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1d62e:	1d3a      	adds	r2, r7, #4
   1d630:	2104      	movs	r1, #4
   1d632:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   1d634:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1d636:	f7e3 f8eb 	bl	810 <sdc_cfg_set>
	if (required_memory < 0) {
   1d63a:	2800      	cmp	r0, #0
   1d63c:	dbc8      	blt.n	1d5d0 <hci_driver_init+0x1c>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1d63e:	1d3a      	adds	r2, r7, #4
   1d640:	2105      	movs	r1, #5
   1d642:	4620      	mov	r0, r4
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1d644:	713d      	strb	r5, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1d646:	f7e3 f8e3 	bl	810 <sdc_cfg_set>
	if (required_memory < 0) {
   1d64a:	2800      	cmp	r0, #0
   1d64c:	dbc0      	blt.n	1d5d0 <hci_driver_init+0x1c>
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1d64e:	231f      	movs	r3, #31
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1d650:	1d3a      	adds	r2, r7, #4
   1d652:	2107      	movs	r1, #7
   1d654:	2000      	movs	r0, #0
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1d656:	80bb      	strh	r3, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1d658:	f7e3 f8da 	bl	810 <sdc_cfg_set>
	if (required_memory < 0) {
   1d65c:	2800      	cmp	r0, #0
   1d65e:	dbb7      	blt.n	1d5d0 <hci_driver_init+0x1c>
	if (required_memory > sizeof(sdc_mempool)) {
   1d660:	f240 73fa 	movw	r3, #2042	; 0x7fa
   1d664:	4298      	cmp	r0, r3
   1d666:	dd19      	ble.n	1d69c <hci_driver_init+0xe8>
		LOG_ERR("Allocated memory too low: %u < %u",
   1d668:	466c      	mov	r4, sp
   1d66a:	b088      	sub	sp, #32
   1d66c:	466a      	mov	r2, sp
   1d66e:	490f      	ldr	r1, [pc, #60]	; (1d6ac <hci_driver_init+0xf8>)
   1d670:	61d0      	str	r0, [r2, #28]
   1d672:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1d676:	2304      	movs	r3, #4
   1d678:	f842 3f10 	str.w	r3, [r2, #16]!
   1d67c:	480c      	ldr	r0, [pc, #48]	; (1d6b0 <hci_driver_init+0xfc>)
   1d67e:	2300      	movs	r3, #0
   1d680:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d684:	f7f5 fac4 	bl	12c10 <z_impl_z_log_msg_static_create>
   1d688:	46a5      	mov	sp, r4
		k_panic();
   1d68a:	4040      	eors	r0, r0
   1d68c:	f380 8811 	msr	BASEPRI, r0
   1d690:	f04f 0004 	mov.w	r0, #4
   1d694:	df02      	svc	2
		return -ENOMEM;
   1d696:	f06f 000b 	mvn.w	r0, #11
   1d69a:	e799      	b.n	1d5d0 <hci_driver_init+0x1c>
	return 0;
   1d69c:	2000      	movs	r0, #0
	if (err) {
   1d69e:	e797      	b.n	1d5d0 <hci_driver_init+0x1c>
   1d6a0:	000289bc 	.word	0x000289bc
   1d6a4:	0001d51d 	.word	0x0001d51d
   1d6a8:	02031b1b 	.word	0x02031b1b
   1d6ac:	0002afde 	.word	0x0002afde
   1d6b0:	000281b4 	.word	0x000281b4

0001d6b4 <hci_driver_open>:
{
   1d6b4:	b590      	push	{r4, r7, lr}
   1d6b6:	b08d      	sub	sp, #52	; 0x34
	k_work_init(&receive_work, receive_work_handler);
   1d6b8:	492f      	ldr	r1, [pc, #188]	; (1d778 <hci_driver_open+0xc4>)
   1d6ba:	4830      	ldr	r0, [pc, #192]	; (1d77c <hci_driver_open+0xc8>)
{
   1d6bc:	af00      	add	r7, sp, #0
	k_work_init(&receive_work, receive_work_handler);
   1d6be:	f009 fffa 	bl	276b6 <k_work_init>
		hci_ecdh_init();
   1d6c2:	f000 fe77 	bl	1e3b4 <hci_ecdh_init>
	sdc_build_revision_get(build_revision);
   1d6c6:	1d38      	adds	r0, r7, #4
   1d6c8:	f7e3 f894 	bl	7f4 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1d6cc:	466c      	mov	r4, sp
   1d6ce:	b088      	sub	sp, #32
   1d6d0:	466a      	mov	r2, sp
   1d6d2:	4b2b      	ldr	r3, [pc, #172]	; (1d780 <hci_driver_open+0xcc>)
   1d6d4:	6153      	str	r3, [r2, #20]
   1d6d6:	4b2b      	ldr	r3, [pc, #172]	; (1d784 <hci_driver_open+0xd0>)
   1d6d8:	6193      	str	r3, [r2, #24]
   1d6da:	f44f 7300 	mov.w	r3, #512	; 0x200
   1d6de:	8393      	strh	r3, [r2, #28]
   1d6e0:	4b29      	ldr	r3, [pc, #164]	; (1d788 <hci_driver_open+0xd4>)
   1d6e2:	f842 3f10 	str.w	r3, [r2, #16]!
   1d6e6:	4929      	ldr	r1, [pc, #164]	; (1d78c <hci_driver_open+0xd8>)
   1d6e8:	4829      	ldr	r0, [pc, #164]	; (1d790 <hci_driver_open+0xdc>)
   1d6ea:	1d3b      	adds	r3, r7, #4
   1d6ec:	f7f5 fa90 	bl	12c10 <z_impl_z_log_msg_static_create>
   1d6f0:	46a5      	mov	sp, r4
   1d6f2:	4828      	ldr	r0, [pc, #160]	; (1d794 <hci_driver_open+0xe0>)
   1d6f4:	f009 fdd4 	bl	272a0 <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   1d6f8:	4603      	mov	r3, r0
   1d6fa:	b980      	cbnz	r0, 1d71e <hci_driver_open+0x6a>
		LOG_ERR("Entropy source device not ready");
   1d6fc:	4a26      	ldr	r2, [pc, #152]	; (1d798 <hci_driver_open+0xe4>)
   1d6fe:	62fa      	str	r2, [r7, #44]	; 0x2c
   1d700:	2202      	movs	r2, #2
   1d702:	62ba      	str	r2, [r7, #40]	; 0x28
   1d704:	4822      	ldr	r0, [pc, #136]	; (1d790 <hci_driver_open+0xdc>)
   1d706:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1d70a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   1d70e:	f06f 0412 	mvn.w	r4, #18
   1d712:	f7f5 fa7d 	bl	12c10 <z_impl_z_log_msg_static_create>
}
   1d716:	4620      	mov	r0, r4
   1d718:	3734      	adds	r7, #52	; 0x34
   1d71a:	46bd      	mov	sp, r7
   1d71c:	bd90      	pop	{r4, r7, pc}
	sdc_rand_source_t rand_functions = {
   1d71e:	4a1f      	ldr	r2, [pc, #124]	; (1d79c <hci_driver_open+0xe8>)
   1d720:	ca07      	ldmia	r2, {r0, r1, r2}
   1d722:	f107 0318 	add.w	r3, r7, #24
   1d726:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1d72a:	4618      	mov	r0, r3
   1d72c:	f7e3 fa0c 	bl	b48 <sdc_rand_source_register>
	if (err) {
   1d730:	b188      	cbz	r0, 1d756 <hci_driver_open+0xa2>
		LOG_ERR("Failed to register rand source (%d)", err);
   1d732:	b088      	sub	sp, #32
   1d734:	466a      	mov	r2, sp
   1d736:	4b1a      	ldr	r3, [pc, #104]	; (1d7a0 <hci_driver_open+0xec>)
   1d738:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d73c:	2303      	movs	r3, #3
   1d73e:	f842 3f10 	str.w	r3, [r2, #16]!
   1d742:	4813      	ldr	r0, [pc, #76]	; (1d790 <hci_driver_open+0xdc>)
   1d744:	2300      	movs	r3, #0
   1d746:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d74a:	f7f5 fa61 	bl	12c10 <z_impl_z_log_msg_static_create>
   1d74e:	46a5      	mov	sp, r4
		return -EINVAL;
   1d750:	f06f 0415 	mvn.w	r4, #21
   1d754:	e7df      	b.n	1d716 <hci_driver_open+0x62>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1d756:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d75a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d75e:	f7ff feb9 	bl	1d4d4 <multithreading_lock_acquire>
	if (err) {
   1d762:	4604      	mov	r4, r0
   1d764:	2800      	cmp	r0, #0
   1d766:	d1d6      	bne.n	1d716 <hci_driver_open+0x62>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   1d768:	490e      	ldr	r1, [pc, #56]	; (1d7a4 <hci_driver_open+0xf0>)
   1d76a:	480f      	ldr	r0, [pc, #60]	; (1d7a8 <hci_driver_open+0xf4>)
   1d76c:	f7e3 f8b0 	bl	8d0 <sdc_enable>
	if (err) {
   1d770:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   1d772:	f7ff feb7 	bl	1d4e4 <multithreading_lock_release>
	return 0;
   1d776:	e7ce      	b.n	1d716 <hci_driver_open+0x62>
   1d778:	000270a3 	.word	0x000270a3
   1d77c:	20003418 	.word	0x20003418
   1d780:	00029b9a 	.word	0x00029b9a
   1d784:	0002b000 	.word	0x0002b000
   1d788:	01000003 	.word	0x01000003
   1d78c:	01401cc0 	.word	0x01401cc0
   1d790:	000281b4 	.word	0x000281b4
   1d794:	00027edc 	.word	0x00027edc
   1d798:	0002b027 	.word	0x0002b027
   1d79c:	000282d8 	.word	0x000282d8
   1d7a0:	0002b047 	.word	0x0002b047
   1d7a4:	200020e8 	.word	0x200020e8
   1d7a8:	0001d58d 	.word	0x0001d58d

0001d7ac <hci_driver_receive_process>:
{
   1d7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d7ae:	b089      	sub	sp, #36	; 0x24
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1d7b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
   1d7b4:	af00      	add	r7, sp, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1d7b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d7ba:	f7ff fe8b 	bl	1d4d4 <multithreading_lock_acquire>
	if (!errcode) {
   1d7be:	bb40      	cbnz	r0, 1d812 <hci_driver_receive_process+0x66>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   1d7c0:	4d33      	ldr	r5, [pc, #204]	; (1d890 <hci_driver_receive_process+0xe4>)
   1d7c2:	1df9      	adds	r1, r7, #7
   1d7c4:	4628      	mov	r0, r5
   1d7c6:	f000 fcc3 	bl	1e150 <hci_internal_msg_get>
   1d7ca:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1d7cc:	f7ff fe8a 	bl	1d4e4 <multithreading_lock_release>
	if (errcode) {
   1d7d0:	b9fc      	cbnz	r4, 1d812 <hci_driver_receive_process+0x66>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   1d7d2:	79fe      	ldrb	r6, [r7, #7]
   1d7d4:	2e04      	cmp	r6, #4
   1d7d6:	d133      	bne.n	1d840 <hci_driver_receive_process+0x94>
	switch (hdr->evt) {
   1d7d8:	7828      	ldrb	r0, [r5, #0]
   1d7da:	283e      	cmp	r0, #62	; 0x3e
   1d7dc:	d01c      	beq.n	1d818 <hci_driver_receive_process+0x6c>
   1d7de:	28ff      	cmp	r0, #255	; 0xff
   1d7e0:	d021      	beq.n	1d826 <hci_driver_receive_process+0x7a>
		switch (subevent) {
   1d7e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d7e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1d7ea:	4621      	mov	r1, r4
   1d7ec:	f7f6 ff96 	bl	1471c <bt_buf_get_evt>
	if (!evt_buf) {
   1d7f0:	4606      	mov	r6, r0
   1d7f2:	b9d8      	cbnz	r0, 1d82c <hci_driver_receive_process+0x80>
		if (discardable) {
   1d7f4:	b95c      	cbnz	r4, 1d80e <hci_driver_receive_process+0x62>
		LOG_ERR("No event buffer available");
   1d7f6:	4b27      	ldr	r3, [pc, #156]	; (1d894 <hci_driver_receive_process+0xe8>)
   1d7f8:	61fb      	str	r3, [r7, #28]
   1d7fa:	2302      	movs	r3, #2
   1d7fc:	61bb      	str	r3, [r7, #24]
   1d7fe:	4826      	ldr	r0, [pc, #152]	; (1d898 <hci_driver_receive_process+0xec>)
   1d800:	4623      	mov	r3, r4
   1d802:	f107 0218 	add.w	r2, r7, #24
   1d806:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d80a:	f7f5 fa01 	bl	12c10 <z_impl_z_log_msg_static_create>
		receive_signal_raise();
   1d80e:	f7ff febd 	bl	1d58c <receive_signal_raise>
}
   1d812:	3724      	adds	r7, #36	; 0x24
   1d814:	46bd      	mov	sp, r7
   1d816:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (me->subevent) {
   1d818:	78ab      	ldrb	r3, [r5, #2]
   1d81a:	2b02      	cmp	r3, #2
		switch (subevent) {
   1d81c:	d1e1      	bne.n	1d7e2 <hci_driver_receive_process+0x36>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1d81e:	2200      	movs	r2, #0
   1d820:	2300      	movs	r3, #0
			return true;
   1d822:	2401      	movs	r4, #1
   1d824:	e7e1      	b.n	1d7ea <hci_driver_receive_process+0x3e>
		switch (subevent) {
   1d826:	78ab      	ldrb	r3, [r5, #2]
   1d828:	2b80      	cmp	r3, #128	; 0x80
   1d82a:	e7f7      	b.n	1d81c <hci_driver_receive_process+0x70>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1d82c:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1d82e:	4918      	ldr	r1, [pc, #96]	; (1d890 <hci_driver_receive_process+0xe4>)
   1d830:	3202      	adds	r2, #2
   1d832:	300c      	adds	r0, #12
   1d834:	f009 f9ce 	bl	26bd4 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1d838:	4630      	mov	r0, r6
	bt_recv(data_buf);
   1d83a:	f7f8 f9b1 	bl	15ba0 <bt_recv>
   1d83e:	e7e6      	b.n	1d80e <hci_driver_receive_process+0x62>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   1d840:	2e02      	cmp	r6, #2
   1d842:	d114      	bne.n	1d86e <hci_driver_receive_process+0xc2>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1d844:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d848:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d84c:	2003      	movs	r0, #3
   1d84e:	f7f6 ff35 	bl	146bc <bt_buf_get_rx>
	if (!data_buf) {
   1d852:	4604      	mov	r4, r0
   1d854:	b918      	cbnz	r0, 1d85e <hci_driver_receive_process+0xb2>
		LOG_ERR("No data buffer available");
   1d856:	4b11      	ldr	r3, [pc, #68]	; (1d89c <hci_driver_receive_process+0xf0>)
   1d858:	e9c7 6306 	strd	r6, r3, [r7, #24]
   1d85c:	e7cf      	b.n	1d7fe <hci_driver_receive_process+0x52>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1d85e:	886a      	ldrh	r2, [r5, #2]
   1d860:	4629      	mov	r1, r5
   1d862:	3204      	adds	r2, #4
   1d864:	300c      	adds	r0, #12
   1d866:	f009 f9b5 	bl	26bd4 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1d86a:	4620      	mov	r0, r4
   1d86c:	e7e5      	b.n	1d83a <hci_driver_receive_process+0x8e>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   1d86e:	466d      	mov	r5, sp
   1d870:	b088      	sub	sp, #32
   1d872:	466a      	mov	r2, sp
   1d874:	4b0a      	ldr	r3, [pc, #40]	; (1d8a0 <hci_driver_receive_process+0xf4>)
   1d876:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1d87a:	2303      	movs	r3, #3
   1d87c:	f842 3f10 	str.w	r3, [r2, #16]!
   1d880:	4805      	ldr	r0, [pc, #20]	; (1d898 <hci_driver_receive_process+0xec>)
   1d882:	4623      	mov	r3, r4
   1d884:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d888:	f7f5 f9c2 	bl	12c10 <z_impl_z_log_msg_static_create>
   1d88c:	46ad      	mov	sp, r5
   1d88e:	e7be      	b.n	1d80e <hci_driver_receive_process+0x62>
   1d890:	2000411d 	.word	0x2000411d
   1d894:	0002b06b 	.word	0x0002b06b
   1d898:	000281b4 	.word	0x000281b4
   1d89c:	0002b085 	.word	0x0002b085
   1d8a0:	0002b09e 	.word	0x0002b09e

0001d8a4 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1d8a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1d8a6:	4cca      	ldr	r4, [pc, #808]	; (1dbd0 <hci_internal_cmd_put+0x32c>)
   1d8a8:	8806      	ldrh	r6, [r0, #0]
   1d8aa:	7823      	ldrb	r3, [r4, #0]
{
   1d8ac:	4605      	mov	r5, r0
	if (cmd_complete_or_status.occurred) {
   1d8ae:	2b00      	cmp	r3, #0
   1d8b0:	f040 8446 	bne.w	1e140 <hci_internal_cmd_put+0x89c>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1d8b4:	2304      	movs	r3, #4
   1d8b6:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
   1d8ba:	4bc6      	ldr	r3, [pc, #792]	; (1dbd4 <hci_internal_cmd_put+0x330>)
   1d8bc:	681f      	ldr	r7, [r3, #0]
   1d8be:	b1bf      	cbz	r7, 1d8f0 <hci_internal_cmd_put+0x4c>
		status = user_cmd_handler(cmd_in,
   1d8c0:	f10d 0306 	add.w	r3, sp, #6
   1d8c4:	f10d 0207 	add.w	r2, sp, #7
   1d8c8:	1c61      	adds	r1, r4, #1
   1d8ca:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   1d8cc:	2801      	cmp	r0, #1
   1d8ce:	d00f      	beq.n	1d8f0 <hci_internal_cmd_put+0x4c>
	if (generate_command_status_event ||
   1d8d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1d8d4:	2b00      	cmp	r3, #0
   1d8d6:	f040 8411 	bne.w	1e0fc <hci_internal_cmd_put+0x858>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   1d8da:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   1d8de:	70a3      	strb	r3, [r4, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1d8e0:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
   1d8e2:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1d8e4:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1d8e6:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1d8e8:	80a6      	strh	r6, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1d8ea:	71a0      	strb	r0, [r4, #6]
}
   1d8ec:	f000 bc0f 	b.w	1e10e <hci_internal_cmd_put+0x86a>
		switch (BT_OGF(opcode)) {
   1d8f0:	f5b6 5f10 	cmp.w	r6, #9216	; 0x2400
   1d8f4:	ea4f 2396 	mov.w	r3, r6, lsr #10
   1d8f8:	d20f      	bcs.n	1d91a <hci_internal_cmd_put+0x76>
   1d8fa:	2b00      	cmp	r3, #0
   1d8fc:	d079      	beq.n	1d9f2 <hci_internal_cmd_put+0x14e>
   1d8fe:	3b01      	subs	r3, #1
   1d900:	2b07      	cmp	r3, #7
   1d902:	f200 83f1 	bhi.w	1e0e8 <hci_internal_cmd_put+0x844>
   1d906:	e8df f013 	tbh	[pc, r3, lsl #1]
   1d90a:	000d      	.short	0x000d
   1d90c:	003f03ef 	.word	0x003f03ef
   1d910:	03ef008e 	.word	0x03ef008e
   1d914:	03ef03ef 	.word	0x03ef03ef
   1d918:	0169      	.short	0x0169
   1d91a:	2b3f      	cmp	r3, #63	; 0x3f
   1d91c:	f000 8315 	beq.w	1df4a <hci_internal_cmd_put+0x6a6>
	switch (opcode)	{
   1d920:	2001      	movs	r0, #1
   1d922:	e36d      	b.n	1e000 <hci_internal_cmd_put+0x75c>
	return ((uint16_t)src[1] << 8) | src[0];
   1d924:	4628      	mov	r0, r5
	switch (opcode)	{
   1d926:	f240 4206 	movw	r2, #1030	; 0x406
   1d92a:	f930 3b03 	ldrsh.w	r3, [r0], #3
   1d92e:	4293      	cmp	r3, r2
   1d930:	d010      	beq.n	1d954 <hci_internal_cmd_put+0xb0>
   1d932:	f240 421d 	movw	r2, #1053	; 0x41d
   1d936:	4293      	cmp	r3, r2
   1d938:	d023      	beq.n	1d982 <hci_internal_cmd_put+0xde>
   1d93a:	2001      	movs	r0, #1
	switch (hci_opcode) {
   1d93c:	f240 4306 	movw	r3, #1030	; 0x406
   1d940:	429e      	cmp	r6, r3
   1d942:	f040 83cb 	bne.w	1e0dc <hci_internal_cmd_put+0x838>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1d946:	230f      	movs	r3, #15
   1d948:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1d94a:	2304      	movs	r3, #4
   1d94c:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1d94e:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1d950:	2301      	movs	r3, #1
   1d952:	e033      	b.n	1d9bc <hci_internal_cmd_put+0x118>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1d954:	f7ef fad7 	bl	cf06 <sdc_hci_cmd_lc_disconnect>
	switch (hci_opcode) {
   1d958:	f242 0332 	movw	r3, #8242	; 0x2032
   1d95c:	429e      	cmp	r6, r3
   1d95e:	f240 83b5 	bls.w	1e0cc <hci_internal_cmd_put+0x828>
   1d962:	f242 0385 	movw	r3, #8325	; 0x2085
   1d966:	429e      	cmp	r6, r3
   1d968:	d840      	bhi.n	1d9ec <hci_internal_cmd_put+0x148>
   1d96a:	f242 036c 	movw	r3, #8300	; 0x206c
   1d96e:	429e      	cmp	r6, r3
   1d970:	f5a6 5301 	sub.w	r3, r6, #8256	; 0x2040
   1d974:	f200 83ba 	bhi.w	1e0ec <hci_internal_cmd_put+0x848>
   1d978:	3b03      	subs	r3, #3
   1d97a:	b29b      	uxth	r3, r3
   1d97c:	2b01      	cmp	r3, #1
   1d97e:	d835      	bhi.n	1d9ec <hci_internal_cmd_put+0x148>
   1d980:	e7e1      	b.n	1d946 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1d982:	f7ef fac2 	bl	cf0a <sdc_hci_cmd_lc_read_remote_version_information>
	switch (hci_opcode) {
   1d986:	e7e7      	b.n	1d958 <hci_internal_cmd_put+0xb4>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1d988:	4628      	mov	r0, r5
	switch (opcode)	{
   1d98a:	f640 4263 	movw	r2, #3171	; 0xc63
   1d98e:	f930 3b03 	ldrsh.w	r3, [r0], #3
   1d992:	4293      	cmp	r3, r2
   1d994:	d03b      	beq.n	1da0e <hci_internal_cmd_put+0x16a>
   1d996:	dc16      	bgt.n	1d9c6 <hci_internal_cmd_put+0x122>
   1d998:	f640 4203 	movw	r2, #3075	; 0xc03
   1d99c:	4293      	cmp	r3, r2
   1d99e:	d02a      	beq.n	1d9f6 <hci_internal_cmd_put+0x152>
   1d9a0:	f640 422d 	movw	r2, #3117	; 0xc2d
   1d9a4:	4293      	cmp	r3, r2
   1d9a6:	d029      	beq.n	1d9fc <hci_internal_cmd_put+0x158>
   1d9a8:	f640 4201 	movw	r2, #3073	; 0xc01
   1d9ac:	4293      	cmp	r3, r2
   1d9ae:	d01b      	beq.n	1d9e8 <hci_internal_cmd_put+0x144>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1d9b0:	230f      	movs	r3, #15
   1d9b2:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1d9b4:	2304      	movs	r3, #4
   1d9b6:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1d9b8:	2301      	movs	r3, #1
   1d9ba:	70e3      	strb	r3, [r4, #3]
	evt_data->ncmd = 1;
   1d9bc:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1d9be:	f8a4 6005 	strh.w	r6, [r4, #5]
		cmd_complete_or_status.raw_event[0] == BT_HCI_EVT_CMD_COMPLETE) {
		/* SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
		 * will generate command complete at a later time (unless unsupported)
		 */

		cmd_complete_or_status.occurred = false;
   1d9c2:	7023      	strb	r3, [r4, #0]
   1d9c4:	e0db      	b.n	1db7e <hci_internal_cmd_put+0x2da>
	switch (opcode)	{
   1d9c6:	f640 427b 	movw	r2, #3195	; 0xc7b
   1d9ca:	4293      	cmp	r3, r2
   1d9cc:	d022      	beq.n	1da14 <hci_internal_cmd_put+0x170>
   1d9ce:	f640 427c 	movw	r2, #3196	; 0xc7c
   1d9d2:	4293      	cmp	r3, r2
   1d9d4:	d1ec      	bne.n	1d9b0 <hci_internal_cmd_put+0x10c>
		*param_length_out +=
   1d9d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1d9da:	497f      	ldr	r1, [pc, #508]	; (1dbd8 <hci_internal_cmd_put+0x334>)
		*param_length_out +=
   1d9dc:	3302      	adds	r3, #2
   1d9de:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1d9e2:	f7ef fa10 	bl	ce06 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
	if (generate_command_status_event ||
   1d9e6:	e001      	b.n	1d9ec <hci_internal_cmd_put+0x148>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1d9e8:	f7ef fa03 	bl	cdf2 <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
   1d9ec:	2801      	cmp	r0, #1
   1d9ee:	f47f af74 	bne.w	1d8da <hci_internal_cmd_put+0x36>
	switch (hci_opcode) {
   1d9f2:	2001      	movs	r0, #1
   1d9f4:	e382      	b.n	1e0fc <hci_internal_cmd_put+0x858>
		return sdc_hci_cmd_cb_reset();
   1d9f6:	f7e3 f9a7 	bl	d48 <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
   1d9fa:	e7f7      	b.n	1d9ec <hci_internal_cmd_put+0x148>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   1d9fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1da00:	4975      	ldr	r1, [pc, #468]	; (1dbd8 <hci_internal_cmd_put+0x334>)
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   1da02:	3303      	adds	r3, #3
   1da04:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1da08:	f7ef f9f1 	bl	cdee <sdc_hci_cmd_cb_read_transmit_power_level>
	if (generate_command_status_event ||
   1da0c:	e7ee      	b.n	1d9ec <hci_internal_cmd_put+0x148>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1da0e:	f7ef f9f5 	bl	cdfc <sdc_hci_cmd_cb_set_event_mask_page_2>
	if (generate_command_status_event ||
   1da12:	e7eb      	b.n	1d9ec <hci_internal_cmd_put+0x148>
		*param_length_out +=
   1da14:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1da18:	496f      	ldr	r1, [pc, #444]	; (1dbd8 <hci_internal_cmd_put+0x334>)
		*param_length_out +=
   1da1a:	3304      	adds	r3, #4
   1da1c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1da20:	f7ef f9e3 	bl	cdea <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
	if (generate_command_status_event ||
   1da24:	e7e2      	b.n	1d9ec <hci_internal_cmd_put+0x148>
	switch (opcode)	{
   1da26:	882b      	ldrh	r3, [r5, #0]
   1da28:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   1da2c:	3b01      	subs	r3, #1
   1da2e:	2b08      	cmp	r3, #8
   1da30:	d8be      	bhi.n	1d9b0 <hci_internal_cmd_put+0x10c>
   1da32:	a201      	add	r2, pc, #4	; (adr r2, 1da38 <hci_internal_cmd_put+0x194>)
   1da34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1da38:	0001da5d 	.word	0x0001da5d
   1da3c:	0001da6f 	.word	0x0001da6f
   1da40:	0001db85 	.word	0x0001db85
   1da44:	0001d9b1 	.word	0x0001d9b1
   1da48:	0001d9b1 	.word	0x0001d9b1
   1da4c:	0001d9b1 	.word	0x0001d9b1
   1da50:	0001d9b1 	.word	0x0001d9b1
   1da54:	0001d9b1 	.word	0x0001d9b1
   1da58:	0001dbbd 	.word	0x0001dbbd
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1da5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1da60:	485d      	ldr	r0, [pc, #372]	; (1dbd8 <hci_internal_cmd_put+0x334>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1da62:	3308      	adds	r3, #8
   1da64:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1da68:	f7ef fa00 	bl	ce6c <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
   1da6c:	e7be      	b.n	1d9ec <hci_internal_cmd_put+0x148>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1da6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1da72:	4d59      	ldr	r5, [pc, #356]	; (1dbd8 <hci_internal_cmd_put+0x334>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1da74:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1da76:	2230      	movs	r2, #48	; 0x30
   1da78:	2100      	movs	r1, #0
   1da7a:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1da7c:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1da80:	f006 ff70 	bl	24964 <memset>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   1da84:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   1da88:	70a3      	strb	r3, [r4, #2]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1da8a:	2300      	movs	r3, #0
   1da8c:	71a3      	strb	r3, [r4, #6]
	cmds->hci_disconnect = 1;
   1da8e:	79e3      	ldrb	r3, [r4, #7]
	evt_data->opcode = hci_opcode;
   1da90:	80a6      	strh	r6, [r4, #4]
	cmds->hci_disconnect = 1;
   1da92:	f043 0320 	orr.w	r3, r3, #32
   1da96:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   1da98:	7a63      	ldrb	r3, [r4, #9]
   1da9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1da9e:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   1daa0:	7b23      	ldrb	r3, [r4, #12]
   1daa2:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1daa6:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   1daa8:	7c63      	ldrb	r3, [r4, #17]
   1daaa:	f043 0304 	orr.w	r3, r3, #4
   1daae:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   1dab0:	7d63      	ldrb	r3, [r4, #21]
   1dab2:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1dab6:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1daba:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   1dabc:	7da3      	ldrb	r3, [r4, #22]
   1dabe:	f043 0302 	orr.w	r3, r3, #2
   1dac2:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1dac4:	7f63      	ldrb	r3, [r4, #29]
   1dac6:	f043 0304 	orr.w	r3, r3, #4
   1daca:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   1dacc:	f894 3020 	ldrb.w	r3, [r4, #32]
   1dad0:	f063 0308 	orn	r3, r3, #8
   1dad4:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   1dad8:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1dadc:	f063 033c 	orn	r3, r3, #60	; 0x3c
   1dae0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   1dae4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   1dae8:	f063 030c 	orn	r3, r3, #12
   1daec:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   1daf0:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1daf4:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
   1daf8:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
   1dafc:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1db00:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1db04:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1db08:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1db0c:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1db10:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1db14:	220e      	movs	r2, #14
   1db16:	7062      	strb	r2, [r4, #1]
	cmds->hci_le_set_data_length = 1;
   1db18:	f063 033f 	orn	r3, r3, #63	; 0x3f
	evt_data->ncmd = 1;
   1db1c:	2201      	movs	r2, #1
   1db1e:	70e2      	strb	r2, [r4, #3]
	cmds->hci_le_set_data_length = 1;
   1db20:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1db24:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1db28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   1db2c:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
   1db30:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   1db34:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1db38:	f063 0301 	orn	r3, r3, #1
   1db3c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1db40:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1db44:	4313      	orrs	r3, r2
   1db46:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1db4a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1db4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1db52:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   1db56:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1db5a:	f043 0304 	orr.w	r3, r3, #4
   1db5e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	cmds->hci_le_generate_dhkey_v2 = 1;
   1db62:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1db66:	f043 0304 	orr.w	r3, r3, #4
   1db6a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	cmds->hci_le_set_data_related_address_changes = 1;
   1db6e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   1db72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1db76:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	cmd_complete_or_status.occurred = true;
   1db7a:	f805 2c07 	strb.w	r2, [r5, #-7]
	}

	return 0;
   1db7e:	2000      	movs	r0, #0
}
   1db80:	b003      	add	sp, #12
   1db82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1db84:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1db88:	4d13      	ldr	r5, [pc, #76]	; (1dbd8 <hci_internal_cmd_put+0x334>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1db8a:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   1db8c:	2208      	movs	r2, #8
   1db8e:	2100      	movs	r1, #0
   1db90:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1db92:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1db96:	f006 fee5 	bl	24964 <memset>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   1db9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   1db9e:	70a3      	strb	r3, [r4, #2]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1dba0:	2300      	movs	r3, #0
   1dba2:	71a3      	strb	r3, [r4, #6]
	features->bdedr_not_supported = 1;
   1dba4:	7ae3      	ldrb	r3, [r4, #11]
	evt_data->opcode = hci_opcode;
   1dba6:	80a6      	strh	r6, [r4, #4]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1dba8:	220e      	movs	r2, #14
	features->bdedr_not_supported = 1;
   1dbaa:	f023 0360 	bic.w	r3, r3, #96	; 0x60
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1dbae:	7062      	strb	r2, [r4, #1]
	features->bdedr_not_supported = 1;
   1dbb0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	evt_data->ncmd = 1;
   1dbb4:	2201      	movs	r2, #1
   1dbb6:	70e2      	strb	r2, [r4, #3]
	features->bdedr_not_supported = 1;
   1dbb8:	72e3      	strb	r3, [r4, #11]
   1dbba:	e7de      	b.n	1db7a <hci_internal_cmd_put+0x2d6>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1dbbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1dbc0:	4805      	ldr	r0, [pc, #20]	; (1dbd8 <hci_internal_cmd_put+0x334>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1dbc2:	3306      	adds	r3, #6
   1dbc4:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1dbc8:	f7ef f94e 	bl	ce68 <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
   1dbcc:	e70e      	b.n	1d9ec <hci_internal_cmd_put+0x148>
   1dbce:	bf00      	nop
   1dbd0:	20004166 	.word	0x20004166
   1dbd4:	20003428 	.word	0x20003428
   1dbd8:	2000416d 	.word	0x2000416d
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1dbdc:	4628      	mov	r0, r5
	switch (opcode)	{
   1dbde:	f242 015e 	movw	r1, #8286	; 0x205e
   1dbe2:	f830 3b03 	ldrh.w	r3, [r0], #3
   1dbe6:	b21a      	sxth	r2, r3
   1dbe8:	428a      	cmp	r2, r1
   1dbea:	f242 0132 	movw	r1, #8242	; 0x2032
   1dbee:	f300 8086 	bgt.w	1dcfe <hci_internal_cmd_put+0x45a>
   1dbf2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1dbf6:	dc01      	bgt.n	1dbfc <hci_internal_cmd_put+0x358>
	switch (hci_opcode) {
   1dbf8:	428e      	cmp	r6, r1
   1dbfa:	e067      	b.n	1dccc <hci_internal_cmd_put+0x428>
	switch (opcode)	{
   1dbfc:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   1dc00:	3b01      	subs	r3, #1
   1dc02:	2b5d      	cmp	r3, #93	; 0x5d
   1dc04:	d85f      	bhi.n	1dcc6 <hci_internal_cmd_put+0x422>
   1dc06:	e8df f013 	tbh	[pc, r3, lsl #1]
   1dc0a:	008e      	.short	0x008e
   1dc0c:	00a4009b 	.word	0x00a4009b
   1dc10:	00d7005e 	.word	0x00d7005e
   1dc14:	00dd00da 	.word	0x00dd00da
   1dc18:	00e900e6 	.word	0x00e900e6
   1dc1c:	005e00ec 	.word	0x005e00ec
   1dc20:	005e005e 	.word	0x005e005e
   1dc24:	00ef005e 	.word	0x00ef005e
   1dc28:	00fb00f8 	.word	0x00fb00f8
   1dc2c:	005e00fe 	.word	0x005e00fe
   1dc30:	0101005e 	.word	0x0101005e
   1dc34:	010d010a 	.word	0x010d010a
   1dc38:	005e0116 	.word	0x005e0116
   1dc3c:	0128011f 	.word	0x0128011f
   1dc40:	005e0131 	.word	0x005e0131
   1dc44:	005e005e 	.word	0x005e005e
   1dc48:	005e005e 	.word	0x005e005e
   1dc4c:	014f0146 	.word	0x014f0146
   1dc50:	015b0158 	.word	0x015b0158
   1dc54:	0164015e 	.word	0x0164015e
   1dc58:	016a0167 	.word	0x016a0167
   1dc5c:	005e016d 	.word	0x005e016d
   1dc60:	0176005e 	.word	0x0176005e
   1dc64:	017c0179 	.word	0x017c0179
   1dc68:	018e0185 	.word	0x018e0185
   1dc6c:	005e0191 	.word	0x005e0191
   1dc70:	005e005e 	.word	0x005e005e
   1dc74:	005e005e 	.word	0x005e005e
   1dc78:	005e005e 	.word	0x005e005e
   1dc7c:	005e005e 	.word	0x005e005e
   1dc80:	005e005e 	.word	0x005e005e
   1dc84:	005e005e 	.word	0x005e005e
   1dc88:	005e005e 	.word	0x005e005e
   1dc8c:	005e005e 	.word	0x005e005e
   1dc90:	005e005e 	.word	0x005e005e
   1dc94:	005e005e 	.word	0x005e005e
   1dc98:	005e005e 	.word	0x005e005e
   1dc9c:	0194005e 	.word	0x0194005e
   1dca0:	005e005e 	.word	0x005e005e
   1dca4:	005e019d 	.word	0x005e019d
   1dca8:	005e005e 	.word	0x005e005e
   1dcac:	005e005e 	.word	0x005e005e
   1dcb0:	005e005e 	.word	0x005e005e
   1dcb4:	005e005e 	.word	0x005e005e
   1dcb8:	005e005e 	.word	0x005e005e
   1dcbc:	005e005e 	.word	0x005e005e
   1dcc0:	005e005e 	.word	0x005e005e
   1dcc4:	0161      	.short	0x0161
	switch (hci_opcode) {
   1dcc6:	f242 0332 	movw	r3, #8242	; 0x2032
   1dcca:	429e      	cmp	r6, r3
   1dccc:	d01f      	beq.n	1dd0e <hci_internal_cmd_put+0x46a>
   1dcce:	f200 8231 	bhi.w	1e134 <hci_internal_cmd_put+0x890>
   1dcd2:	f242 0326 	movw	r3, #8230	; 0x2026
   1dcd6:	429e      	cmp	r6, r3
   1dcd8:	f63f ae8b 	bhi.w	1d9f2 <hci_internal_cmd_put+0x14e>
   1dcdc:	2001      	movs	r0, #1
   1dcde:	f242 030c 	movw	r3, #8204	; 0x200c
   1dce2:	429e      	cmp	r6, r3
   1dce4:	f67f ae2a 	bls.w	1d93c <hci_internal_cmd_put+0x98>
   1dce8:	f5a6 5300 	sub.w	r3, r6, #8192	; 0x2000
   1dcec:	4ac7      	ldr	r2, [pc, #796]	; (1e00c <hci_internal_cmd_put+0x768>)
   1dcee:	3b0d      	subs	r3, #13
   1dcf0:	b29b      	uxth	r3, r3
   1dcf2:	fa22 f303 	lsr.w	r3, r2, r3
   1dcf6:	07db      	lsls	r3, r3, #31
   1dcf8:	f57f ae78 	bpl.w	1d9ec <hci_internal_cmd_put+0x148>
   1dcfc:	e623      	b.n	1d946 <hci_internal_cmd_put+0xa2>
	switch (opcode)	{
   1dcfe:	f242 037c 	movw	r3, #8316	; 0x207c
   1dd02:	429a      	cmp	r2, r3
   1dd04:	f47f af78 	bne.w	1dbf8 <hci_internal_cmd_put+0x354>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
   1dd08:	f7ef f8e8 	bl	cedc <sdc_hci_cmd_le_set_data_related_address_changes>
   1dd0c:	e00d      	b.n	1dd2a <hci_internal_cmd_put+0x486>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1dd0e:	230f      	movs	r3, #15
   1dd10:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1dd12:	2304      	movs	r3, #4
   1dd14:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1dd16:	2301      	movs	r3, #1
   1dd18:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1dd1a:	2232      	movs	r2, #50	; 0x32
   1dd1c:	7162      	strb	r2, [r4, #5]
   1dd1e:	2220      	movs	r2, #32
	evt_data->ncmd = 1;
   1dd20:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1dd22:	71a2      	strb	r2, [r4, #6]
	cmd_complete_or_status.occurred = true;
   1dd24:	e64d      	b.n	1d9c2 <hci_internal_cmd_put+0x11e>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1dd26:	f7ef f8dd 	bl	cee4 <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
   1dd2a:	f242 0332 	movw	r3, #8242	; 0x2032
   1dd2e:	429e      	cmp	r6, r3
   1dd30:	f47f ae12 	bne.w	1d958 <hci_internal_cmd_put+0xb4>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1dd34:	230f      	movs	r3, #15
   1dd36:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1dd38:	2304      	movs	r3, #4
   1dd3a:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1dd3c:	70e0      	strb	r0, [r4, #3]
   1dd3e:	e0a8      	b.n	1de92 <hci_internal_cmd_put+0x5ee>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1dd40:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1dd44:	48b2      	ldr	r0, [pc, #712]	; (1e010 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1dd46:	3303      	adds	r3, #3
   1dd48:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1dd4c:	f7ef f8a6 	bl	ce9c <sdc_hci_cmd_le_read_buffer_size>
   1dd50:	e7eb      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1dd52:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1dd56:	4dae      	ldr	r5, [pc, #696]	; (1e010 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1dd58:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   1dd5a:	2208      	movs	r2, #8
   1dd5c:	2100      	movs	r1, #0
   1dd5e:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1dd60:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1dd64:	f006 fdfe 	bl	24964 <memset>
	features->params.le_encryption = 1;
   1dd68:	79e3      	ldrb	r3, [r4, #7]
   1dd6a:	f023 037d 	bic.w	r3, r3, #125	; 0x7d
   1dd6e:	f043 037d 	orr.w	r3, r3, #125	; 0x7d
   1dd72:	71e3      	strb	r3, [r4, #7]
	features->params.le_2m_phy = 1;
   1dd74:	7a23      	ldrb	r3, [r4, #8]
   1dd76:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1dd7a:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   1dd7e:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   1dd80:	f242 0332 	movw	r3, #8242	; 0x2032
   1dd84:	429e      	cmp	r6, r3
   1dd86:	d008      	beq.n	1dd9a <hci_internal_cmd_put+0x4f6>
   1dd88:	f200 81ce 	bhi.w	1e128 <hci_internal_cmd_put+0x884>
   1dd8c:	f242 0326 	movw	r3, #8230	; 0x2026
   1dd90:	429e      	cmp	r6, r3
   1dd92:	f240 81a1 	bls.w	1e0d8 <hci_internal_cmd_put+0x834>
		return 0;
   1dd96:	2000      	movs	r0, #0
   1dd98:	e59f      	b.n	1d8da <hci_internal_cmd_put+0x36>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1dd9a:	230f      	movs	r3, #15
   1dd9c:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1dd9e:	2304      	movs	r3, #4
	evt_data->opcode = hci_opcode;
   1dda0:	2232      	movs	r2, #50	; 0x32
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1dda2:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1dda4:	2300      	movs	r3, #0
   1dda6:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1dda8:	7162      	strb	r2, [r4, #5]
	evt_data->ncmd = 1;
   1ddaa:	2301      	movs	r3, #1
	evt_data->opcode = hci_opcode;
   1ddac:	2220      	movs	r2, #32
	evt_data->ncmd = 1;
   1ddae:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1ddb0:	71a2      	strb	r2, [r4, #6]
	cmd_complete_or_status.occurred = true;
   1ddb2:	f805 3c07 	strb.w	r3, [r5, #-7]
	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
   1ddb6:	e6e2      	b.n	1db7e <hci_internal_cmd_put+0x2da>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1ddb8:	f7ef f89d 	bl	cef6 <sdc_hci_cmd_le_set_random_address>
   1ddbc:	e7b5      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1ddbe:	f7ef f889 	bl	ced4 <sdc_hci_cmd_le_set_adv_params>
   1ddc2:	e7b2      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		*param_length_out +=
   1ddc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1ddc8:	4891      	ldr	r0, [pc, #580]	; (1e010 <hci_internal_cmd_put+0x76c>)
		*param_length_out +=
   1ddca:	3301      	adds	r3, #1
   1ddcc:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1ddd0:	f7ef f862 	bl	ce98 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   1ddd4:	e7a9      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1ddd6:	f7ef f879 	bl	cecc <sdc_hci_cmd_le_set_adv_data>
   1ddda:	e7a6      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1dddc:	f7ef f88f 	bl	cefe <sdc_hci_cmd_le_set_scan_response_data>
   1dde0:	e7a3      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1dde2:	f7ef f875 	bl	ced0 <sdc_hci_cmd_le_set_adv_enable>
   1dde6:	e7a0      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1dde8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1ddec:	4888      	ldr	r0, [pc, #544]	; (1e010 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1ddee:	3301      	adds	r3, #1
   1ddf0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1ddf4:	f7ef f856 	bl	cea4 <sdc_hci_cmd_le_read_filter_accept_list_size>
   1ddf8:	e797      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   1ddfa:	f7ef f83d 	bl	ce78 <sdc_hci_cmd_le_clear_filter_accept_list>
   1ddfe:	e794      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   1de00:	f7ef f836 	bl	ce70 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   1de04:	e791      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   1de06:	f7ef f85b 	bl	cec0 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   1de0a:	e78e      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1de0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1de10:	497f      	ldr	r1, [pc, #508]	; (1e010 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1de12:	3307      	adds	r3, #7
   1de14:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1de18:	f7ef f842 	bl	cea0 <sdc_hci_cmd_le_read_channel_map>
   1de1c:	e785      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1de1e:	f7ef f847 	bl	ceb0 <sdc_hci_cmd_le_read_remote_features>
   1de22:	e782      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1de24:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1de28:	4979      	ldr	r1, [pc, #484]	; (1e010 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1de2a:	3310      	adds	r3, #16
   1de2c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1de30:	f7ef f826 	bl	ce80 <sdc_hci_cmd_le_encrypt>
   1de34:	e779      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1de36:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1de3a:	4875      	ldr	r0, [pc, #468]	; (1e010 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1de3c:	3308      	adds	r3, #8
   1de3e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1de42:	f7ef f827 	bl	ce94 <sdc_hci_cmd_le_rand>
   1de46:	e770      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   1de48:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1de4c:	4970      	ldr	r1, [pc, #448]	; (1e010 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   1de4e:	3302      	adds	r3, #2
   1de50:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1de54:	f7ef f81a 	bl	ce8c <sdc_hci_cmd_le_long_term_key_request_reply>
   1de58:	e767      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		*param_length_out +=
   1de5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1de5e:	496c      	ldr	r1, [pc, #432]	; (1e010 <hci_internal_cmd_put+0x76c>)
		*param_length_out +=
   1de60:	3302      	adds	r3, #2
   1de62:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1de66:	f7ef f80d 	bl	ce84 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   1de6a:	e75e      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1de6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1de70:	3308      	adds	r3, #8
   1de72:	f88d 3007 	strb.w	r3, [sp, #7]
	*buf = states1;
   1de76:	238f      	movs	r3, #143	; 0x8f
   1de78:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1de7a:	23c0      	movs	r3, #192	; 0xc0
   1de7c:	72e3      	strb	r3, [r4, #11]
	switch (hci_opcode) {
   1de7e:	f242 0332 	movw	r3, #8242	; 0x2032
   1de82:	429e      	cmp	r6, r3
   1de84:	d180      	bne.n	1dd88 <hci_internal_cmd_put+0x4e4>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1de86:	230f      	movs	r3, #15
   1de88:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1de8a:	2304      	movs	r3, #4
   1de8c:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1de8e:	2300      	movs	r3, #0
   1de90:	70e3      	strb	r3, [r4, #3]
	evt_data->ncmd = 1;
   1de92:	2301      	movs	r3, #1
   1de94:	e741      	b.n	1dd1a <hci_internal_cmd_put+0x476>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   1de96:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1de9a:	495d      	ldr	r1, [pc, #372]	; (1e010 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   1de9c:	3302      	adds	r3, #2
   1de9e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1dea2:	f7ef f819 	bl	ced8 <sdc_hci_cmd_le_set_data_length>
   1dea6:	e740      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		*param_length_out +=
   1dea8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1deac:	4858      	ldr	r0, [pc, #352]	; (1e010 <hci_internal_cmd_put+0x76c>)
		*param_length_out +=
   1deae:	3304      	adds	r3, #4
   1deb0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1deb4:	f7ef f800 	bl	ceb8 <sdc_hci_cmd_le_read_suggested_default_data_length>
   1deb8:	e737      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1deba:	f7ef f822 	bl	cf02 <sdc_hci_cmd_le_write_suggested_default_data_length>
   1debe:	e734      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		return hci_cmd_le_read_local_p256_public_key();
   1dec0:	f000 faa8 	bl	1e414 <hci_cmd_le_read_local_p256_public_key>
   1dec4:	e731      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   1dec6:	f009 f92d 	bl	27124 <hci_cmd_le_generate_dhkey>
   1deca:	e72e      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   1decc:	f009 f92d 	bl	2712a <hci_cmd_le_generate_dhkey_v2>
   1ded0:	e72b      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   1ded2:	f7ee ffcf 	bl	ce74 <sdc_hci_cmd_le_add_device_to_resolving_list>
   1ded6:	e728      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   1ded8:	f7ee fff4 	bl	cec4 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   1dedc:	e725      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_clear_resolving_list();
   1dede:	f7ee ffcd 	bl	ce7c <sdc_hci_cmd_le_clear_resolving_list>
   1dee2:	e722      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   1dee4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1dee8:	4849      	ldr	r0, [pc, #292]	; (1e010 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   1deea:	3301      	adds	r3, #1
   1deec:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1def0:	f7ee ffe0 	bl	ceb4 <sdc_hci_cmd_le_read_resolving_list_size>
   1def4:	e719      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   1def6:	f7ee ffe7 	bl	cec8 <sdc_hci_cmd_le_set_address_resolution_enable>
   1defa:	e716      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   1defc:	f7ee fffd 	bl	cefa <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   1df00:	e713      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1df02:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1df06:	4842      	ldr	r0, [pc, #264]	; (1e010 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1df08:	3308      	adds	r3, #8
   1df0a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1df0e:	f7ee ffcb 	bl	cea8 <sdc_hci_cmd_le_read_max_data_length>
   1df12:	e70a      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1df14:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1df18:	493d      	ldr	r1, [pc, #244]	; (1e010 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1df1a:	3304      	adds	r3, #4
   1df1c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1df20:	f7ee ffc4 	bl	ceac <sdc_hci_cmd_le_read_phy>
   1df24:	e701      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1df26:	f7ee ffdb 	bl	cee0 <sdc_hci_cmd_le_set_default_phy>
   1df2a:	e6fe      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1df2c:	f7ee ffdf 	bl	ceee <sdc_hci_cmd_le_set_phy>
   1df30:	e6fb      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1df32:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1df36:	4836      	ldr	r0, [pc, #216]	; (1e010 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1df38:	3302      	adds	r3, #2
   1df3a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1df3e:	f7ee ffbd 	bl	cebc <sdc_hci_cmd_le_read_transmit_power>
   1df42:	e6f2      	b.n	1dd2a <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   1df44:	f7ee ffd5 	bl	cef2 <sdc_hci_cmd_le_set_privacy_mode>
   1df48:	e6ef      	b.n	1dd2a <hci_internal_cmd_put+0x486>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1df4a:	4628      	mov	r0, r5
	switch (opcode)	{
   1df4c:	f64f 420b 	movw	r2, #64523	; 0xfc0b
   1df50:	f830 3b03 	ldrh.w	r3, [r0], #3
   1df54:	4293      	cmp	r3, r2
   1df56:	d823      	bhi.n	1dfa0 <hci_internal_cmd_put+0x6fc>
   1df58:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   1df5c:	f67f ace0 	bls.w	1d920 <hci_internal_cmd_put+0x7c>
   1df60:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   1df64:	3b01      	subs	r3, #1
   1df66:	2b0a      	cmp	r3, #10
   1df68:	f63f acda 	bhi.w	1d920 <hci_internal_cmd_put+0x7c>
   1df6c:	a201      	add	r2, pc, #4	; (adr r2, 1df74 <hci_internal_cmd_put+0x6d0>)
   1df6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1df72:	bf00      	nop
   1df74:	0001dff1 	.word	0x0001dff1
   1df78:	0001e015 	.word	0x0001e015
   1df7c:	0001d921 	.word	0x0001d921
   1df80:	0001d921 	.word	0x0001d921
   1df84:	0001d921 	.word	0x0001d921
   1df88:	0001e069 	.word	0x0001e069
   1df8c:	0001d921 	.word	0x0001d921
   1df90:	0001d921 	.word	0x0001d921
   1df94:	0001e045 	.word	0x0001e045
   1df98:	0001e057 	.word	0x0001e057
   1df9c:	0001e06f 	.word	0x0001e06f
   1dfa0:	f503 7240 	add.w	r2, r3, #768	; 0x300
   1dfa4:	b292      	uxth	r2, r2
   1dfa6:	2a0c      	cmp	r2, #12
   1dfa8:	f63f acba 	bhi.w	1d920 <hci_internal_cmd_put+0x7c>
   1dfac:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   1dfb0:	2b0c      	cmp	r3, #12
   1dfb2:	f63f acb5 	bhi.w	1d920 <hci_internal_cmd_put+0x7c>
   1dfb6:	a201      	add	r2, pc, #4	; (adr r2, 1dfbc <hci_internal_cmd_put+0x718>)
   1dfb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1dfbc:	0001e081 	.word	0x0001e081
   1dfc0:	0001e0a3 	.word	0x0001e0a3
   1dfc4:	0001e0a9 	.word	0x0001e0a9
   1dfc8:	0001e0af 	.word	0x0001e0af
   1dfcc:	0001e0b5 	.word	0x0001e0b5
   1dfd0:	0001e0bb 	.word	0x0001e0bb
   1dfd4:	0001d921 	.word	0x0001d921
   1dfd8:	0001d921 	.word	0x0001d921
   1dfdc:	0001d921 	.word	0x0001d921
   1dfe0:	0001e0c1 	.word	0x0001e0c1
   1dfe4:	0001d921 	.word	0x0001d921
   1dfe8:	0001d921 	.word	0x0001d921
   1dfec:	0001e0c7 	.word	0x0001e0c7
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1dff0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1dff4:	4806      	ldr	r0, [pc, #24]	; (1e010 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1dff6:	330c      	adds	r3, #12
   1dff8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1dffc:	f7e2 ff4c 	bl	e98 <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
   1e000:	f026 0308 	bic.w	r3, r6, #8
   1e004:	f64f 5202 	movw	r2, #64770	; 0xfd02
   1e008:	4293      	cmp	r3, r2
   1e00a:	e06a      	b.n	1e0e2 <hci_internal_cmd_put+0x83e>
   1e00c:	03001241 	.word	0x03001241
   1e010:	2000416d 	.word	0x2000416d
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1e014:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1e018:	484b      	ldr	r0, [pc, #300]	; (1e148 <hci_internal_cmd_put+0x8a4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1e01a:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1e01c:	2202      	movs	r2, #2
   1e01e:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1e020:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1e024:	f006 fc9e 	bl	24964 <memset>
	cmds->read_version_info = 1;
   1e028:	79e3      	ldrb	r3, [r4, #7]
   1e02a:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1e02e:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1e032:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   1e034:	7a23      	ldrb	r3, [r4, #8]
   1e036:	f023 0307 	bic.w	r3, r3, #7
   1e03a:	f043 0307 	orr.w	r3, r3, #7
   1e03e:	7223      	strb	r3, [r4, #8]
		return 0;
   1e040:	2000      	movs	r0, #0
   1e042:	e7dd      	b.n	1e000 <hci_internal_cmd_put+0x75c>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1e044:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1e048:	483f      	ldr	r0, [pc, #252]	; (1e148 <hci_internal_cmd_put+0x8a4>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1e04a:	3317      	adds	r3, #23
   1e04c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1e050:	f7e2 fed6 	bl	e00 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   1e054:	e7d4      	b.n	1e000 <hci_internal_cmd_put+0x75c>
		*param_length_out +=
   1e056:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1e05a:	483b      	ldr	r0, [pc, #236]	; (1e148 <hci_internal_cmd_put+0x8a4>)
		*param_length_out +=
   1e05c:	3320      	adds	r3, #32
   1e05e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1e062:	f7e2 fe85 	bl	d70 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   1e066:	e7cb      	b.n	1e000 <hci_internal_cmd_put+0x75c>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1e068:	f7ee fefc 	bl	ce64 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   1e06c:	e7c8      	b.n	1e000 <hci_internal_cmd_put+0x75c>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1e06e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1e072:	4835      	ldr	r0, [pc, #212]	; (1e148 <hci_internal_cmd_put+0x8a4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1e074:	3301      	adds	r3, #1
   1e076:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1e07a:	f7ee fedf 	bl	ce3c <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   1e07e:	e7bf      	b.n	1e000 <hci_internal_cmd_put+0x75c>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1e080:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1e084:	4830      	ldr	r0, [pc, #192]	; (1e148 <hci_internal_cmd_put+0x8a4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1e086:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1e088:	2202      	movs	r2, #2
   1e08a:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1e08c:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1e090:	f006 fc68 	bl	24964 <memset>
	cmds->read_supported_vs_commands = 1;
   1e094:	79e3      	ldrb	r3, [r4, #7]
   1e096:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1e09a:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1e09e:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   1e0a0:	e7ce      	b.n	1e040 <hci_internal_cmd_put+0x79c>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1e0a2:	f7ee febe 	bl	ce22 <sdc_hci_cmd_vs_llpm_mode_set>
   1e0a6:	e7ab      	b.n	1e000 <hci_internal_cmd_put+0x75c>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1e0a8:	f7ee feb7 	bl	ce1a <sdc_hci_cmd_vs_conn_update>
   1e0ac:	e7a8      	b.n	1e000 <hci_internal_cmd_put+0x75c>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1e0ae:	f7ee feac 	bl	ce0a <sdc_hci_cmd_vs_conn_event_extend>
   1e0b2:	e7a5      	b.n	1e000 <hci_internal_cmd_put+0x75c>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1e0b4:	f7ee febb 	bl	ce2e <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1e0b8:	e7a2      	b.n	1e000 <hci_internal_cmd_put+0x75c>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1e0ba:	f7ee feb0 	bl	ce1e <sdc_hci_cmd_vs_event_length_set>
   1e0be:	e79f      	b.n	1e000 <hci_internal_cmd_put+0x75c>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   1e0c0:	f7ee feb1 	bl	ce26 <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   1e0c4:	e79c      	b.n	1e000 <hci_internal_cmd_put+0x75c>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
   1e0c6:	f7ee feb7 	bl	ce38 <sdc_hci_cmd_vs_set_adv_randomness>
   1e0ca:	e799      	b.n	1e000 <hci_internal_cmd_put+0x75c>
	switch (hci_opcode) {
   1e0cc:	f242 0326 	movw	r3, #8230	; 0x2026
   1e0d0:	429e      	cmp	r6, r3
   1e0d2:	f67f ae04 	bls.w	1dcde <hci_internal_cmd_put+0x43a>
   1e0d6:	e489      	b.n	1d9ec <hci_internal_cmd_put+0x148>
		return 0;
   1e0d8:	2000      	movs	r0, #0
   1e0da:	e600      	b.n	1dcde <hci_internal_cmd_put+0x43a>
	switch (hci_opcode) {
   1e0dc:	f240 431d 	movw	r3, #1053	; 0x41d
   1e0e0:	429e      	cmp	r6, r3
   1e0e2:	f43f ac30 	beq.w	1d946 <hci_internal_cmd_put+0xa2>
   1e0e6:	e481      	b.n	1d9ec <hci_internal_cmd_put+0x148>
		switch (BT_OGF(opcode)) {
   1e0e8:	2001      	movs	r0, #1
	if (generate_command_status_event ||
   1e0ea:	e47f      	b.n	1d9ec <hci_internal_cmd_put+0x148>
	switch (hci_opcode) {
   1e0ec:	4a17      	ldr	r2, [pc, #92]	; (1e14c <hci_internal_cmd_put+0x8a8>)
   1e0ee:	3b2d      	subs	r3, #45	; 0x2d
   1e0f0:	b29b      	uxth	r3, r3
   1e0f2:	fa22 f303 	lsr.w	r3, r2, r3
   1e0f6:	07da      	lsls	r2, r3, #31
   1e0f8:	f57f ac78 	bpl.w	1d9ec <hci_internal_cmd_put+0x148>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1e0fc:	230f      	movs	r3, #15
   1e0fe:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1e100:	2304      	movs	r3, #4
   1e102:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1e104:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1e106:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1e108:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1e10a:	f8a4 6005 	strh.w	r6, [r4, #5]
	cmd_complete_or_status.occurred = true;
   1e10e:	2301      	movs	r3, #1
   1e110:	7023      	strb	r3, [r4, #0]
	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
   1e112:	f242 0383 	movw	r3, #8323	; 0x2083
   1e116:	429e      	cmp	r6, r3
   1e118:	f47f ad31 	bne.w	1db7e <hci_internal_cmd_put+0x2da>
		&&
   1e11c:	7863      	ldrb	r3, [r4, #1]
   1e11e:	2b0e      	cmp	r3, #14
   1e120:	f47f ad2d 	bne.w	1db7e <hci_internal_cmd_put+0x2da>
		cmd_complete_or_status.occurred = false;
   1e124:	2300      	movs	r3, #0
   1e126:	e44c      	b.n	1d9c2 <hci_internal_cmd_put+0x11e>
	switch (hci_opcode) {
   1e128:	f242 0385 	movw	r3, #8325	; 0x2085
   1e12c:	429e      	cmp	r6, r3
   1e12e:	d905      	bls.n	1e13c <hci_internal_cmd_put+0x898>
		return 0;
   1e130:	2000      	movs	r0, #0
   1e132:	e45b      	b.n	1d9ec <hci_internal_cmd_put+0x148>
	switch (hci_opcode) {
   1e134:	f242 0385 	movw	r3, #8325	; 0x2085
   1e138:	2001      	movs	r0, #1
   1e13a:	e414      	b.n	1d966 <hci_internal_cmd_put+0xc2>
		return 0;
   1e13c:	2000      	movs	r0, #0
   1e13e:	e414      	b.n	1d96a <hci_internal_cmd_put+0xc6>
		return -NRF_EPERM;
   1e140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e144:	e51c      	b.n	1db80 <hci_internal_cmd_put+0x2dc>
   1e146:	bf00      	nop
   1e148:	2000416d 	.word	0x2000416d
   1e14c:	01000401 	.word	0x01000401

0001e150 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   1e150:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   1e152:	4c09      	ldr	r4, [pc, #36]	; (1e178 <hci_internal_msg_get+0x28>)
   1e154:	7823      	ldrb	r3, [r4, #0]
{
   1e156:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   1e158:	b91b      	cbnz	r3, 1e162 <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   1e15a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   1e15e:	f7ee be34 	b.w	cdca <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1e162:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
   1e164:	1c61      	adds	r1, r4, #1
   1e166:	3202      	adds	r2, #2
   1e168:	f006 fbf1 	bl	2494e <memcpy>
		cmd_complete_or_status.occurred = false;
   1e16c:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1e16e:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   1e170:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1e172:	702b      	strb	r3, [r5, #0]
}
   1e174:	bd38      	pop	{r3, r4, r5, pc}
   1e176:	bf00      	nop
   1e178:	20004166 	.word	0x20004166

0001e17c <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   1e17c:	b570      	push	{r4, r5, r6, lr}
   1e17e:	4605      	mov	r5, r0
   1e180:	460e      	mov	r6, r1
   1e182:	4c08      	ldr	r4, [pc, #32]	; (1e1a4 <bt_rand+0x28>)
   1e184:	4620      	mov	r0, r4
   1e186:	f009 f88b 	bl	272a0 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   1e18a:	b138      	cbz	r0, 1e19c <bt_rand+0x20>
   1e18c:	68a3      	ldr	r3, [r4, #8]
   1e18e:	b2b2      	uxth	r2, r6
   1e190:	4629      	mov	r1, r5
   1e192:	4620      	mov	r0, r4
   1e194:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
}
   1e196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e19a:	4718      	bx	r3
   1e19c:	f06f 0012 	mvn.w	r0, #18
   1e1a0:	bd70      	pop	{r4, r5, r6, pc}
   1e1a2:	bf00      	nop
   1e1a4:	00027edc 	.word	0x00027edc

0001e1a8 <ecdh_p256_common_secret>:

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   1e1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1e1aa:	4b24      	ldr	r3, [pc, #144]	; (1e23c <ecdh_p256_common_secret+0x94>)
   1e1ac:	4924      	ldr	r1, [pc, #144]	; (1e240 <ecdh_p256_common_secret+0x98>)
   1e1ae:	f103 0220 	add.w	r2, r3, #32
   1e1b2:	2800      	cmp	r0, #0
   1e1b4:	bf08      	it	eq
   1e1b6:	4619      	moveq	r1, r3
{
   1e1b8:	af00      	add	r7, sp, #0
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1e1ba:	4610      	mov	r0, r2
   1e1bc:	f002 faf2 	bl	207a4 <ocrypto_ecdh_p256_common_secret>
	if (err) {
   1e1c0:	4604      	mov	r4, r0
   1e1c2:	b180      	cbz	r0, 1e1e6 <ecdh_p256_common_secret+0x3e>
		LOG_ERR("public key is not valid (err %d)", err);
   1e1c4:	466d      	mov	r5, sp
   1e1c6:	b088      	sub	sp, #32
   1e1c8:	466a      	mov	r2, sp
   1e1ca:	4b1e      	ldr	r3, [pc, #120]	; (1e244 <ecdh_p256_common_secret+0x9c>)
   1e1cc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e1d0:	2303      	movs	r3, #3
   1e1d2:	f842 3f10 	str.w	r3, [r2, #16]!
   1e1d6:	481c      	ldr	r0, [pc, #112]	; (1e248 <ecdh_p256_common_secret+0xa0>)
   1e1d8:	2300      	movs	r3, #0
   1e1da:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e1de:	f7f4 fd17 	bl	12c10 <z_impl_z_log_msg_static_create>
		return BT_HCI_ERR_INVALID_PARAM;
   1e1e2:	2412      	movs	r4, #18
   1e1e4:	46ad      	mov	sp, r5
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1e1e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e1ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e1ee:	2001      	movs	r0, #1
   1e1f0:	f7f6 fa64 	bl	146bc <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   1e1f4:	f100 060c 	add.w	r6, r0, #12
   1e1f8:	2102      	movs	r1, #2
   1e1fa:	4605      	mov	r5, r0
   1e1fc:	4630      	mov	r0, r6
   1e1fe:	f008 fce3 	bl	26bc8 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1e202:	233e      	movs	r3, #62	; 0x3e
   1e204:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1e206:	2322      	movs	r3, #34	; 0x22
   1e208:	7043      	strb	r3, [r0, #1]
   1e20a:	2101      	movs	r1, #1
   1e20c:	4630      	mov	r0, r6
   1e20e:	f008 fcdb 	bl	26bc8 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   1e212:	2309      	movs	r3, #9
   1e214:	7003      	strb	r3, [r0, #0]
   1e216:	2121      	movs	r1, #33	; 0x21
   1e218:	4630      	mov	r0, r6
   1e21a:	f008 fcd5 	bl	26bc8 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   1e21e:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   1e222:	b134      	cbz	r4, 1e232 <ecdh_p256_common_secret+0x8a>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   1e224:	2220      	movs	r2, #32
   1e226:	21ff      	movs	r1, #255	; 0xff
   1e228:	f006 fb9c 	bl	24964 <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   1e22c:	4628      	mov	r0, r5
   1e22e:	46bd      	mov	sp, r7
   1e230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   1e232:	4906      	ldr	r1, [pc, #24]	; (1e24c <ecdh_p256_common_secret+0xa4>)
   1e234:	f008 ff6c 	bl	27110 <sys_memcpy_swap.constprop.0>
   1e238:	e7f8      	b.n	1e22c <ecdh_p256_common_secret+0x84>
   1e23a:	bf00      	nop
   1e23c:	200041ad 	.word	0x200041ad
   1e240:	0002b14b 	.word	0x0002b14b
   1e244:	0002b10d 	.word	0x0002b10d
   1e248:	000281ac 	.word	0x000281ac
   1e24c:	200041cd 	.word	0x200041cd

0001e250 <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   1e250:	b5f0      	push	{r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e252:	4c42      	ldr	r4, [pc, #264]	; (1e35c <ecdh_cmd_process+0x10c>)
   1e254:	f3bf 8f5b 	dmb	ish
   1e258:	6823      	ldr	r3, [r4, #0]
   1e25a:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   1e25e:	2b02      	cmp	r3, #2
{
   1e260:	b087      	sub	sp, #28
   1e262:	4627      	mov	r7, r4
	switch (atomic_get(&cmd)) {
   1e264:	d05a      	beq.n	1e31c <ecdh_cmd_process+0xcc>
   1e266:	2b04      	cmp	r3, #4
   1e268:	d05d      	beq.n	1e326 <ecdh_cmd_process+0xd6>
   1e26a:	2b01      	cmp	r3, #1
   1e26c:	d15d      	bne.n	1e32a <ecdh_cmd_process+0xda>
		err = bt_rand(ecdh.private_key_be, 32);
   1e26e:	4c3c      	ldr	r4, [pc, #240]	; (1e360 <ecdh_cmd_process+0x110>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1e270:	4e3c      	ldr	r6, [pc, #240]	; (1e364 <ecdh_cmd_process+0x114>)
		err = bt_rand(ecdh.private_key_be, 32);
   1e272:	2120      	movs	r1, #32
   1e274:	4620      	mov	r0, r4
   1e276:	f7ff ff81 	bl	1e17c <bt_rand>
		if (err) {
   1e27a:	2800      	cmp	r0, #0
   1e27c:	d143      	bne.n	1e306 <ecdh_cmd_process+0xb6>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1e27e:	2220      	movs	r2, #32
   1e280:	4631      	mov	r1, r6
   1e282:	4620      	mov	r0, r4
   1e284:	f006 fb3c 	bl	24900 <memcmp>
   1e288:	2800      	cmp	r0, #0
   1e28a:	d0f2      	beq.n	1e272 <ecdh_cmd_process+0x22>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   1e28c:	4836      	ldr	r0, [pc, #216]	; (1e368 <ecdh_cmd_process+0x118>)
   1e28e:	4621      	mov	r1, r4
   1e290:	f002 fa74 	bl	2077c <ocrypto_ecdh_p256_public_key>
	} while (err);
   1e294:	4605      	mov	r5, r0
   1e296:	2800      	cmp	r0, #0
   1e298:	d1eb      	bne.n	1e272 <ecdh_cmd_process+0x22>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1e29a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e29e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e2a2:	2001      	movs	r0, #1
   1e2a4:	f7f6 fa0a 	bl	146bc <bt_buf_get_rx>
   1e2a8:	f100 060c 	add.w	r6, r0, #12
   1e2ac:	2102      	movs	r1, #2
   1e2ae:	4604      	mov	r4, r0
   1e2b0:	4630      	mov	r0, r6
   1e2b2:	f008 fc89 	bl	26bc8 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1e2b6:	233e      	movs	r3, #62	; 0x3e
   1e2b8:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1e2ba:	2342      	movs	r3, #66	; 0x42
   1e2bc:	7043      	strb	r3, [r0, #1]
   1e2be:	2101      	movs	r1, #1
   1e2c0:	4630      	mov	r0, r6
   1e2c2:	f008 fc81 	bl	26bc8 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   1e2c6:	2308      	movs	r3, #8
   1e2c8:	7003      	strb	r3, [r0, #0]
   1e2ca:	2141      	movs	r1, #65	; 0x41
   1e2cc:	4630      	mov	r0, r6
   1e2ce:	f008 fc7b 	bl	26bc8 <net_buf_simple_add>
   1e2d2:	4606      	mov	r6, r0
	evt->status = status;
   1e2d4:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   1e2d8:	b1bd      	cbz	r5, 1e30a <ecdh_cmd_process+0xba>
		(void)memset(evt->key, 0, sizeof(evt->key));
   1e2da:	2240      	movs	r2, #64	; 0x40
   1e2dc:	2100      	movs	r1, #0
   1e2de:	f006 fb41 	bl	24964 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1e2e2:	f3bf 8f5b 	dmb	ish
   1e2e6:	2300      	movs	r3, #0
   1e2e8:	e857 2f00 	ldrex	r2, [r7]
   1e2ec:	e847 3100 	strex	r1, r3, [r7]
   1e2f0:	2900      	cmp	r1, #0
   1e2f2:	d1f9      	bne.n	1e2e8 <ecdh_cmd_process+0x98>
   1e2f4:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   1e2f8:	b36c      	cbz	r4, 1e356 <ecdh_cmd_process+0x106>
		bt_recv(buf);
   1e2fa:	4620      	mov	r0, r4
	}
}
   1e2fc:	b007      	add	sp, #28
   1e2fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_recv(buf);
   1e302:	f7f7 bc4d 	b.w	15ba0 <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   1e306:	251f      	movs	r5, #31
   1e308:	e7c7      	b.n	1e29a <ecdh_cmd_process+0x4a>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   1e30a:	4917      	ldr	r1, [pc, #92]	; (1e368 <ecdh_cmd_process+0x118>)
   1e30c:	f008 ff00 	bl	27110 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   1e310:	3120      	adds	r1, #32
   1e312:	f106 0021 	add.w	r0, r6, #33	; 0x21
   1e316:	f008 fefb 	bl	27110 <sys_memcpy_swap.constprop.0>
		break;
   1e31a:	e7e2      	b.n	1e2e2 <ecdh_cmd_process+0x92>
		buf = ecdh_p256_common_secret(false);
   1e31c:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   1e31e:	f7ff ff43 	bl	1e1a8 <ecdh_p256_common_secret>
   1e322:	4604      	mov	r4, r0
		break;
   1e324:	e7dd      	b.n	1e2e2 <ecdh_cmd_process+0x92>
		buf = ecdh_p256_common_secret(true);
   1e326:	2001      	movs	r0, #1
   1e328:	e7f9      	b.n	1e31e <ecdh_cmd_process+0xce>
		LOG_WRN("Unknown command");
   1e32a:	4b10      	ldr	r3, [pc, #64]	; (1e36c <ecdh_cmd_process+0x11c>)
   1e32c:	9305      	str	r3, [sp, #20]
   1e32e:	2302      	movs	r3, #2
   1e330:	9304      	str	r3, [sp, #16]
   1e332:	2300      	movs	r3, #0
   1e334:	480e      	ldr	r0, [pc, #56]	; (1e370 <ecdh_cmd_process+0x120>)
   1e336:	aa04      	add	r2, sp, #16
   1e338:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e33c:	f7f4 fc68 	bl	12c10 <z_impl_z_log_msg_static_create>
   1e340:	f3bf 8f5b 	dmb	ish
   1e344:	2300      	movs	r3, #0
   1e346:	e854 2f00 	ldrex	r2, [r4]
   1e34a:	e844 3100 	strex	r1, r3, [r4]
   1e34e:	2900      	cmp	r1, #0
   1e350:	d1f9      	bne.n	1e346 <ecdh_cmd_process+0xf6>
   1e352:	f3bf 8f5b 	dmb	ish
}
   1e356:	b007      	add	sp, #28
   1e358:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e35a:	bf00      	nop
   1e35c:	2000343c 	.word	0x2000343c
   1e360:	200041ad 	.word	0x200041ad
   1e364:	0002b14b 	.word	0x0002b14b
   1e368:	200041cd 	.word	0x200041cd
   1e36c:	0002b12e 	.word	0x0002b12e
   1e370:	000281ac 	.word	0x000281ac

0001e374 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   1e374:	b510      	push	{r4, lr}
   1e376:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   1e378:	2210      	movs	r2, #16
   1e37a:	2100      	movs	r1, #0
   1e37c:	a801      	add	r0, sp, #4
   1e37e:	f006 faf1 	bl	24964 <memset>
   1e382:	4c0b      	ldr	r4, [pc, #44]	; (1e3b0 <ecdh_thread+0x3c>)
   1e384:	9405      	str	r4, [sp, #20]
   1e386:	2301      	movs	r3, #1
   1e388:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   1e38c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e390:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e394:	2101      	movs	r1, #1
   1e396:	a801      	add	r0, sp, #4
   1e398:	f002 f946 	bl	20628 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   1e39c:	4620      	mov	r0, r4
   1e39e:	f009 fd0e 	bl	27dbe <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   1e3a2:	9b04      	ldr	r3, [sp, #16]
   1e3a4:	f36f 3394 	bfc	r3, #14, #7
   1e3a8:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   1e3aa:	f7ff ff51 	bl	1e250 <ecdh_cmd_process>
	while (true) {
   1e3ae:	e7ed      	b.n	1e38c <ecdh_thread+0x18>
   1e3b0:	2000342c 	.word	0x2000342c

0001e3b4 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   1e3b4:	b510      	push	{r4, lr}
   1e3b6:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   1e3b8:	480e      	ldr	r0, [pc, #56]	; (1e3f4 <hci_ecdh_init+0x40>)
   1e3ba:	f009 fcfb 	bl	27db4 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1e3be:	4c0e      	ldr	r4, [pc, #56]	; (1e3f8 <hci_ecdh_init+0x44>)
   1e3c0:	490e      	ldr	r1, [pc, #56]	; (1e3fc <hci_ecdh_init+0x48>)
   1e3c2:	2200      	movs	r2, #0
   1e3c4:	2300      	movs	r3, #0
   1e3c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1e3ca:	2300      	movs	r3, #0
   1e3cc:	220a      	movs	r2, #10
   1e3ce:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1e3d2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1e3d6:	9300      	str	r3, [sp, #0]
   1e3d8:	f44f 7262 	mov.w	r2, #904	; 0x388
   1e3dc:	4b08      	ldr	r3, [pc, #32]	; (1e400 <hci_ecdh_init+0x4c>)
   1e3de:	4620      	mov	r0, r4
   1e3e0:	f001 f826 	bl	1f430 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1e3e4:	4907      	ldr	r1, [pc, #28]	; (1e404 <hci_ecdh_init+0x50>)
   1e3e6:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   1e3e8:	b008      	add	sp, #32
   1e3ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e3ee:	f009 b82b 	b.w	27448 <z_impl_k_thread_name_set>
   1e3f2:	bf00      	nop
   1e3f4:	2000342c 	.word	0x2000342c
   1e3f8:	200028e8 	.word	0x200028e8
   1e3fc:	20005b80 	.word	0x20005b80
   1e400:	0001e375 	.word	0x0001e375
   1e404:	0002b13e 	.word	0x0002b13e

0001e408 <hci_ecdh_uninit>:
	z_impl_k_thread_abort(thread);
   1e408:	4801      	ldr	r0, [pc, #4]	; (1e410 <hci_ecdh_uninit+0x8>)
   1e40a:	f7f5 bf3d 	b.w	14288 <z_impl_k_thread_abort>
   1e40e:	bf00      	nop
   1e410:	200028e8 	.word	0x200028e8

0001e414 <hci_cmd_le_read_local_p256_public_key>:
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   1e414:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e416:	4b0b      	ldr	r3, [pc, #44]	; (1e444 <hci_cmd_le_read_local_p256_public_key+0x30>)
   1e418:	f3bf 8f5b 	dmb	ish
   1e41c:	2201      	movs	r2, #1
   1e41e:	e853 1f00 	ldrex	r1, [r3]
   1e422:	2900      	cmp	r1, #0
   1e424:	d103      	bne.n	1e42e <hci_cmd_le_read_local_p256_public_key+0x1a>
   1e426:	e843 2000 	strex	r0, r2, [r3]
   1e42a:	2800      	cmp	r0, #0
   1e42c:	d1f7      	bne.n	1e41e <hci_cmd_le_read_local_p256_public_key+0xa>
   1e42e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   1e432:	d105      	bne.n	1e440 <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   1e434:	4804      	ldr	r0, [pc, #16]	; (1e448 <hci_cmd_le_read_local_p256_public_key+0x34>)
   1e436:	2100      	movs	r1, #0
   1e438:	f002 f952 	bl	206e0 <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   1e43c:	2000      	movs	r0, #0
}
   1e43e:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1e440:	200c      	movs	r0, #12
   1e442:	e7fc      	b.n	1e43e <hci_cmd_le_read_local_p256_public_key+0x2a>
   1e444:	2000343c 	.word	0x2000343c
   1e448:	2000342c 	.word	0x2000342c

0001e44c <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   1e44c:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1e44e:	2900      	cmp	r1, #0
   1e450:	4b11      	ldr	r3, [pc, #68]	; (1e498 <cmd_le_generate_dhkey+0x4c>)
   1e452:	f3bf 8f5b 	dmb	ish
{
   1e456:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1e458:	bf0c      	ite	eq
   1e45a:	2202      	moveq	r2, #2
   1e45c:	2204      	movne	r2, #4
   1e45e:	e853 1f00 	ldrex	r1, [r3]
   1e462:	2900      	cmp	r1, #0
   1e464:	d103      	bne.n	1e46e <cmd_le_generate_dhkey+0x22>
   1e466:	e843 2000 	strex	r0, r2, [r3]
   1e46a:	2800      	cmp	r0, #0
   1e46c:	d1f7      	bne.n	1e45e <cmd_le_generate_dhkey+0x12>
   1e46e:	f3bf 8f5b 	dmb	ish
   1e472:	d10e      	bne.n	1e492 <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   1e474:	4621      	mov	r1, r4
   1e476:	4809      	ldr	r0, [pc, #36]	; (1e49c <cmd_le_generate_dhkey+0x50>)
   1e478:	f008 fe4a 	bl	27110 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   1e47c:	4808      	ldr	r0, [pc, #32]	; (1e4a0 <cmd_le_generate_dhkey+0x54>)
   1e47e:	f104 0120 	add.w	r1, r4, #32
   1e482:	f008 fe45 	bl	27110 <sys_memcpy_swap.constprop.0>
   1e486:	4807      	ldr	r0, [pc, #28]	; (1e4a4 <cmd_le_generate_dhkey+0x58>)
   1e488:	2100      	movs	r1, #0
   1e48a:	f002 f929 	bl	206e0 <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   1e48e:	2000      	movs	r0, #0
}
   1e490:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1e492:	200c      	movs	r0, #12
   1e494:	e7fc      	b.n	1e490 <cmd_le_generate_dhkey+0x44>
   1e496:	bf00      	nop
   1e498:	2000343c 	.word	0x2000343c
   1e49c:	200041cd 	.word	0x200041cd
   1e4a0:	200041ed 	.word	0x200041ed
   1e4a4:	2000342c 	.word	0x2000342c

0001e4a8 <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   1e4a8:	4901      	ldr	r1, [pc, #4]	; (1e4b0 <mpsl_low_prio_irq_handler+0x8>)
   1e4aa:	4802      	ldr	r0, [pc, #8]	; (1e4b4 <mpsl_low_prio_irq_handler+0xc>)
   1e4ac:	f009 b930 	b.w	27710 <k_work_submit_to_queue>
   1e4b0:	20003440 	.word	0x20003440
   1e4b4:	20002968 	.word	0x20002968

0001e4b8 <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(void)
{
   1e4b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1e4ba:	2332      	movs	r3, #50	; 0x32
   1e4bc:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1e4c0:	4a10      	ldr	r2, [pc, #64]	; (1e504 <mpsl_lib_init_sys+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
   1e4c2:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   1e4c4:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1e4c6:	2119      	movs	r1, #25
   1e4c8:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   1e4ca:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1e4ce:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   1e4d2:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1e4d6:	f7ed fe41 	bl	c15c <mpsl_init>
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
   1e4da:	4604      	mov	r4, r0
   1e4dc:	b970      	cbnz	r0, 1e4fc <mpsl_lib_init_sys+0x44>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1e4de:	4601      	mov	r1, r0
   1e4e0:	462a      	mov	r2, r5
   1e4e2:	2008      	movs	r0, #8
   1e4e4:	f7f5 fa3e 	bl	13964 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1e4e8:	462a      	mov	r2, r5
   1e4ea:	4621      	mov	r1, r4
   1e4ec:	200b      	movs	r0, #11
   1e4ee:	f7f5 fa39 	bl	13964 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1e4f2:	462a      	mov	r2, r5
   1e4f4:	4621      	mov	r1, r4
   1e4f6:	4628      	mov	r0, r5
   1e4f8:	f7f5 fa34 	bl	13964 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
   1e4fc:	4620      	mov	r0, r4
   1e4fe:	b003      	add	sp, #12
   1e500:	bd30      	pop	{r4, r5, pc}
   1e502:	bf00      	nop
   1e504:	0001e509 	.word	0x0001e509

0001e508 <m_assert_handler>:
{
   1e508:	b598      	push	{r3, r4, r7, lr}
   1e50a:	af00      	add	r7, sp, #0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   1e50c:	466c      	mov	r4, sp
   1e50e:	b08a      	sub	sp, #40	; 0x28
   1e510:	466a      	mov	r2, sp
   1e512:	4b0c      	ldr	r3, [pc, #48]	; (1e544 <m_assert_handler+0x3c>)
   1e514:	61d1      	str	r1, [r2, #28]
   1e516:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e51a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1e51e:	8413      	strh	r3, [r2, #32]
   1e520:	4b09      	ldr	r3, [pc, #36]	; (1e548 <m_assert_handler+0x40>)
   1e522:	f842 3f10 	str.w	r3, [r2, #16]!
   1e526:	4809      	ldr	r0, [pc, #36]	; (1e54c <m_assert_handler+0x44>)
   1e528:	2300      	movs	r3, #0
   1e52a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1e52e:	f7f4 fb6f 	bl	12c10 <z_impl_z_log_msg_static_create>
   1e532:	46a5      	mov	sp, r4
	k_oops();
   1e534:	4040      	eors	r0, r0
   1e536:	f380 8811 	msr	BASEPRI, r0
   1e53a:	f04f 0003 	mov.w	r0, #3
   1e53e:	df02      	svc	2
}
   1e540:	46bd      	mov	sp, r7
   1e542:	bd98      	pop	{r3, r4, r7, pc}
   1e544:	0002b177 	.word	0x0002b177
   1e548:	01000004 	.word	0x01000004
   1e54c:	000281fc 	.word	0x000281fc

0001e550 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(void)
{
   1e550:	b537      	push	{r0, r1, r2, r4, r5, lr}

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   1e552:	4d0d      	ldr	r5, [pc, #52]	; (1e588 <mpsl_low_prio_init+0x38>)
   1e554:	490d      	ldr	r1, [pc, #52]	; (1e58c <mpsl_low_prio_init+0x3c>)
   1e556:	2400      	movs	r4, #0
   1e558:	9400      	str	r4, [sp, #0]
   1e55a:	f06f 0309 	mvn.w	r3, #9
   1e55e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1e562:	4628      	mov	r0, r5
   1e564:	f001 fa74 	bl	1fa50 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   1e568:	4909      	ldr	r1, [pc, #36]	; (1e590 <mpsl_low_prio_init+0x40>)
   1e56a:	4628      	mov	r0, r5
   1e56c:	f008 ff6c 	bl	27448 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   1e570:	4908      	ldr	r1, [pc, #32]	; (1e594 <mpsl_low_prio_init+0x44>)
   1e572:	4809      	ldr	r0, [pc, #36]	; (1e598 <mpsl_low_prio_init+0x48>)
   1e574:	f009 f89f 	bl	276b6 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1e578:	4622      	mov	r2, r4
   1e57a:	2104      	movs	r1, #4
   1e57c:	2019      	movs	r0, #25
   1e57e:	f7f5 f9f1 	bl	13964 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1e582:	4620      	mov	r0, r4
   1e584:	b003      	add	sp, #12
   1e586:	bd30      	pop	{r4, r5, pc}
   1e588:	20002968 	.word	0x20002968
   1e58c:	20005f80 	.word	0x20005f80
   1e590:	0002b18b 	.word	0x0002b18b
   1e594:	00027159 	.word	0x00027159
   1e598:	20003440 	.word	0x20003440

0001e59c <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1e59c:	4b01      	ldr	r3, [pc, #4]	; (1e5a4 <mpsl_hfclk_callback+0x8>)
   1e59e:	2000      	movs	r0, #0
   1e5a0:	681b      	ldr	r3, [r3, #0]
   1e5a2:	4718      	bx	r3
   1e5a4:	20003450 	.word	0x20003450

0001e5a8 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   1e5a8:	b120      	cbz	r0, 1e5b4 <nrfx_clock_start+0xc>
   1e5aa:	2801      	cmp	r0, #1
   1e5ac:	d106      	bne.n	1e5bc <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1e5ae:	4804      	ldr	r0, [pc, #16]	; (1e5c0 <nrfx_clock_start+0x18>)
   1e5b0:	f7ed bc36 	b.w	be20 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1e5b4:	4b03      	ldr	r3, [pc, #12]	; (1e5c4 <nrfx_clock_start+0x1c>)
   1e5b6:	2001      	movs	r0, #1
   1e5b8:	681b      	ldr	r3, [r3, #0]
   1e5ba:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1e5bc:	4770      	bx	lr
   1e5be:	bf00      	nop
   1e5c0:	0001e59d 	.word	0x0001e59d
   1e5c4:	20003450 	.word	0x20003450

0001e5c8 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1e5c8:	4b01      	ldr	r3, [pc, #4]	; (1e5d0 <nrfx_clock_init+0x8>)
   1e5ca:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1e5cc:	4801      	ldr	r0, [pc, #4]	; (1e5d4 <nrfx_clock_init+0xc>)
   1e5ce:	4770      	bx	lr
   1e5d0:	20003450 	.word	0x20003450
   1e5d4:	0bad0000 	.word	0x0bad0000

0001e5d8 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1e5d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1e5dc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1e5e0:	2a08      	cmp	r2, #8
   1e5e2:	d106      	bne.n	1e5f2 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1e5e4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   1e5e8:	2b05      	cmp	r3, #5
   1e5ea:	d802      	bhi.n	1e5f2 <nrf52_errata_103+0x1a>
   1e5ec:	4a02      	ldr	r2, [pc, #8]	; (1e5f8 <nrf52_errata_103+0x20>)
   1e5ee:	5cd0      	ldrb	r0, [r2, r3]
   1e5f0:	4770      	bx	lr
                        return false;
   1e5f2:	2000      	movs	r0, #0
}
   1e5f4:	4770      	bx	lr
   1e5f6:	bf00      	nop
   1e5f8:	0002b1a5 	.word	0x0002b1a5

0001e5fc <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1e5fc:	4a02      	ldr	r2, [pc, #8]	; (1e608 <nvmc_wait+0xc>)
   1e5fe:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1e602:	2b00      	cmp	r3, #0
   1e604:	d0fb      	beq.n	1e5fe <nvmc_wait+0x2>
}
   1e606:	4770      	bx	lr
   1e608:	4001e000 	.word	0x4001e000

0001e60c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
   1e60c:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1e60e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1e612:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1e616:	2a08      	cmp	r2, #8
   1e618:	d14e      	bne.n	1e6b8 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   1e61a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1e61e:	2100      	movs	r1, #0
   1e620:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1e624:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1e628:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1e62c:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
   1e630:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
   1e634:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1e638:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
   1e63c:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1e640:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
   1e644:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1e648:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   1e64c:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1e650:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
   1e654:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1e658:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1e65c:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1e660:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
   1e664:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1e668:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
   1e66c:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1e670:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
   1e674:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1e678:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
   1e67c:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1e680:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
   1e684:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1e688:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
   1e68c:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1e690:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
   1e694:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1e698:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
   1e69c:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1e6a0:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
   1e6a4:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1e6a8:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
   1e6ac:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1e6b0:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   1e6b4:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1e6b8:	f7ff ff8e 	bl	1e5d8 <nrf52_errata_103>
   1e6bc:	b118      	cbz	r0, 1e6c6 <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1e6be:	4b3a      	ldr	r3, [pc, #232]	; (1e7a8 <SystemInit+0x19c>)
   1e6c0:	4a3a      	ldr	r2, [pc, #232]	; (1e7ac <SystemInit+0x1a0>)
   1e6c2:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1e6c6:	f7ff ff87 	bl	1e5d8 <nrf52_errata_103>
   1e6ca:	b118      	cbz	r0, 1e6d4 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1e6cc:	4b38      	ldr	r3, [pc, #224]	; (1e7b0 <SystemInit+0x1a4>)
   1e6ce:	22fb      	movs	r2, #251	; 0xfb
   1e6d0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1e6d4:	f7ff ff80 	bl	1e5d8 <nrf52_errata_103>
   1e6d8:	b170      	cbz	r0, 1e6f8 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1e6da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1e6de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e6e2:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   1e6e6:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1e6ea:	f022 020f 	bic.w	r2, r2, #15
   1e6ee:	f003 030f 	and.w	r3, r3, #15
   1e6f2:	4313      	orrs	r3, r2
   1e6f4:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1e6f8:	f7ff ff6e 	bl	1e5d8 <nrf52_errata_103>
   1e6fc:	b120      	cbz	r0, 1e708 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1e6fe:	4b2d      	ldr	r3, [pc, #180]	; (1e7b4 <SystemInit+0x1a8>)
   1e700:	f44f 7200 	mov.w	r2, #512	; 0x200
   1e704:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1e708:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1e70c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1e710:	2b08      	cmp	r3, #8
   1e712:	d11a      	bne.n	1e74a <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1e714:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e718:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1e71c:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1e71e:	bf44      	itt	mi
   1e720:	f06f 0201 	mvnmi.w	r2, #1
   1e724:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1e728:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e72c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
   1e730:	2b05      	cmp	r3, #5
   1e732:	d802      	bhi.n	1e73a <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1e734:	4a20      	ldr	r2, [pc, #128]	; (1e7b8 <SystemInit+0x1ac>)
   1e736:	5cd3      	ldrb	r3, [r2, r3]
   1e738:	b13b      	cbz	r3, 1e74a <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1e73a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1e73e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1e742:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e746:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1e74a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1e74e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1e752:	2a00      	cmp	r2, #0
   1e754:	db03      	blt.n	1e75e <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1e756:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1e75a:	2b00      	cmp	r3, #0
   1e75c:	da22      	bge.n	1e7a4 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1e75e:	4917      	ldr	r1, [pc, #92]	; (1e7bc <SystemInit+0x1b0>)
   1e760:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1e762:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1e766:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1e76a:	2412      	movs	r4, #18
    nvmc_wait();
   1e76c:	f7ff ff46 	bl	1e5fc <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1e770:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1e774:	f7ff ff42 	bl	1e5fc <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1e778:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1e77c:	f7ff ff3e 	bl	1e5fc <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1e780:	2300      	movs	r3, #0
   1e782:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1e786:	f7ff ff39 	bl	1e5fc <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   1e78a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1e78e:	490c      	ldr	r1, [pc, #48]	; (1e7c0 <SystemInit+0x1b4>)
   1e790:	4b0c      	ldr	r3, [pc, #48]	; (1e7c4 <SystemInit+0x1b8>)
   1e792:	68ca      	ldr	r2, [r1, #12]
   1e794:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1e798:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1e79a:	60cb      	str	r3, [r1, #12]
   1e79c:	f3bf 8f4f 	dsb	sy
    __NOP();
   1e7a0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1e7a2:	e7fd      	b.n	1e7a0 <SystemInit+0x194>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
   1e7a4:	bd10      	pop	{r4, pc}
   1e7a6:	bf00      	nop
   1e7a8:	40005000 	.word	0x40005000
   1e7ac:	00038148 	.word	0x00038148
   1e7b0:	4000f000 	.word	0x4000f000
   1e7b4:	40029000 	.word	0x40029000
   1e7b8:	0002b19f 	.word	0x0002b19f
   1e7bc:	4001e000 	.word	0x4001e000
   1e7c0:	e000ed00 	.word	0xe000ed00
   1e7c4:	05fa0004 	.word	0x05fa0004

0001e7c8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1e7c8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1e7ca:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1e7cc:	6802      	ldr	r2, [r0, #0]
   1e7ce:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   1e7d2:	fab2 f382 	clz	r3, r2
   1e7d6:	f1c3 031f 	rsb	r3, r3, #31
   1e7da:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1e7dc:	fa05 f403 	lsl.w	r4, r5, r3
   1e7e0:	ea22 0404 	bic.w	r4, r2, r4
   1e7e4:	e850 6f00 	ldrex	r6, [r0]
   1e7e8:	4296      	cmp	r6, r2
   1e7ea:	d104      	bne.n	1e7f6 <nrfx_flag32_alloc+0x2e>
   1e7ec:	e840 4c00 	strex	ip, r4, [r0]
   1e7f0:	f1bc 0f00 	cmp.w	ip, #0
   1e7f4:	d1f6      	bne.n	1e7e4 <nrfx_flag32_alloc+0x1c>
   1e7f6:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1e7fa:	d1e7      	bne.n	1e7cc <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   1e7fc:	4801      	ldr	r0, [pc, #4]	; (1e804 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   1e7fe:	700b      	strb	r3, [r1, #0]
}
   1e800:	bd70      	pop	{r4, r5, r6, pc}
   1e802:	bf00      	nop
   1e804:	0bad0000 	.word	0x0bad0000

0001e808 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1e808:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1e80a:	6803      	ldr	r3, [r0, #0]
   1e80c:	40cb      	lsrs	r3, r1
   1e80e:	07db      	lsls	r3, r3, #31
   1e810:	d414      	bmi.n	1e83c <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1e812:	2301      	movs	r3, #1
   1e814:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1e816:	6802      	ldr	r2, [r0, #0]
   1e818:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   1e81c:	ea43 0102 	orr.w	r1, r3, r2
   1e820:	e850 4f00 	ldrex	r4, [r0]
   1e824:	4294      	cmp	r4, r2
   1e826:	d104      	bne.n	1e832 <nrfx_flag32_free+0x2a>
   1e828:	e840 1c00 	strex	ip, r1, [r0]
   1e82c:	f1bc 0f00 	cmp.w	ip, #0
   1e830:	d1f6      	bne.n	1e820 <nrfx_flag32_free+0x18>
   1e832:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1e836:	d1ee      	bne.n	1e816 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   1e838:	4801      	ldr	r0, [pc, #4]	; (1e840 <nrfx_flag32_free+0x38>)
}
   1e83a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1e83c:	4801      	ldr	r0, [pc, #4]	; (1e844 <nrfx_flag32_free+0x3c>)
   1e83e:	e7fc      	b.n	1e83a <nrfx_flag32_free+0x32>
   1e840:	0bad0000 	.word	0x0bad0000
   1e844:	0bad0004 	.word	0x0bad0004

0001e848 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1e848:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1e84a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1e84e:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   1e850:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1e852:	6002      	str	r2, [r0, #0]
}
   1e854:	4802      	ldr	r0, [pc, #8]	; (1e860 <nrf_gpio_pin_port_decode+0x18>)
   1e856:	bf18      	it	ne
   1e858:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1e85c:	4770      	bx	lr
   1e85e:	bf00      	nop
   1e860:	50000300 	.word	0x50000300

0001e864 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1e864:	4b03      	ldr	r3, [pc, #12]	; (1e874 <pin_in_use_by_te+0x10>)
   1e866:	3008      	adds	r0, #8
   1e868:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1e86c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1e870:	4770      	bx	lr
   1e872:	bf00      	nop
   1e874:	2000068c 	.word	0x2000068c

0001e878 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1e878:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1e87a:	f100 0308 	add.w	r3, r0, #8
   1e87e:	4c0c      	ldr	r4, [pc, #48]	; (1e8b0 <call_handler+0x38>)
   1e880:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   1e884:	05da      	lsls	r2, r3, #23
{
   1e886:	4605      	mov	r5, r0
   1e888:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1e88a:	d507      	bpl.n	1e89c <call_handler+0x24>
   1e88c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1e890:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1e894:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1e898:	6852      	ldr	r2, [r2, #4]
   1e89a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1e89c:	68a3      	ldr	r3, [r4, #8]
   1e89e:	b12b      	cbz	r3, 1e8ac <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1e8a0:	68e2      	ldr	r2, [r4, #12]
   1e8a2:	4631      	mov	r1, r6
   1e8a4:	4628      	mov	r0, r5
    }
}
   1e8a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1e8aa:	4718      	bx	r3
}
   1e8ac:	bd70      	pop	{r4, r5, r6, pc}
   1e8ae:	bf00      	nop
   1e8b0:	2000068c 	.word	0x2000068c

0001e8b4 <release_handler>:
{
   1e8b4:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1e8b6:	4a12      	ldr	r2, [pc, #72]	; (1e900 <release_handler+0x4c>)
   1e8b8:	3008      	adds	r0, #8
   1e8ba:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1e8be:	05d9      	lsls	r1, r3, #23
   1e8c0:	d51b      	bpl.n	1e8fa <release_handler+0x46>
   1e8c2:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1e8c6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1e8ca:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1e8ce:	f102 040e 	add.w	r4, r2, #14
   1e8d2:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1e8d4:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   1e8d8:	f413 7f80 	tst.w	r3, #256	; 0x100
   1e8dc:	d003      	beq.n	1e8e6 <release_handler+0x32>
   1e8de:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1e8e2:	4299      	cmp	r1, r3
   1e8e4:	d009      	beq.n	1e8fa <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1e8e6:	3001      	adds	r0, #1
   1e8e8:	2830      	cmp	r0, #48	; 0x30
   1e8ea:	d1f3      	bne.n	1e8d4 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1e8ec:	2300      	movs	r3, #0
   1e8ee:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1e8f2:	4804      	ldr	r0, [pc, #16]	; (1e904 <release_handler+0x50>)
}
   1e8f4:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1e8f6:	f7ff bf87 	b.w	1e808 <nrfx_flag32_free>
}
   1e8fa:	bc10      	pop	{r4}
   1e8fc:	4770      	bx	lr
   1e8fe:	bf00      	nop
   1e900:	2000068c 	.word	0x2000068c
   1e904:	20000700 	.word	0x20000700

0001e908 <pin_handler_trigger_uninit>:
{
   1e908:	b538      	push	{r3, r4, r5, lr}
   1e90a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1e90c:	f7ff ffaa 	bl	1e864 <pin_in_use_by_te>
   1e910:	4c09      	ldr	r4, [pc, #36]	; (1e938 <pin_handler_trigger_uninit+0x30>)
   1e912:	f102 0508 	add.w	r5, r2, #8
   1e916:	b140      	cbz	r0, 1e92a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1e918:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1e91c:	4907      	ldr	r1, [pc, #28]	; (1e93c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1e91e:	0b5b      	lsrs	r3, r3, #13
   1e920:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1e924:	2000      	movs	r0, #0
   1e926:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   1e92a:	4610      	mov	r0, r2
   1e92c:	f7ff ffc2 	bl	1e8b4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1e930:	2300      	movs	r3, #0
   1e932:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1e936:	bd38      	pop	{r3, r4, r5, pc}
   1e938:	2000068c 	.word	0x2000068c
   1e93c:	40006000 	.word	0x40006000

0001e940 <nrfx_gpiote_input_configure>:
{
   1e940:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1e944:	4604      	mov	r4, r0
   1e946:	4616      	mov	r6, r2
   1e948:	461d      	mov	r5, r3
    if (p_input_config)
   1e94a:	b301      	cbz	r1, 1e98e <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1e94c:	4f4e      	ldr	r7, [pc, #312]	; (1ea88 <nrfx_gpiote_input_configure+0x148>)
   1e94e:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1e952:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   1e956:	079b      	lsls	r3, r3, #30
   1e958:	d502      	bpl.n	1e960 <nrfx_gpiote_input_configure+0x20>
   1e95a:	f7ff ff83 	bl	1e864 <pin_in_use_by_te>
   1e95e:	bb10      	cbnz	r0, 1e9a6 <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1e960:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1e962:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1e966:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1e96a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1e96e:	f10d 020f 	add.w	r2, sp, #15
   1e972:	460b      	mov	r3, r1
   1e974:	4620      	mov	r0, r4
   1e976:	f10d 010e 	add.w	r1, sp, #14
   1e97a:	f008 fc31 	bl	271e0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1e97e:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   1e982:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1e986:	f043 0301 	orr.w	r3, r3, #1
   1e98a:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
   1e98e:	b346      	cbz	r6, 1e9e2 <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1e990:	4b3d      	ldr	r3, [pc, #244]	; (1ea88 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1e992:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1e996:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1e998:	f104 0708 	add.w	r7, r4, #8
   1e99c:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
   1e9a0:	0788      	lsls	r0, r1, #30
   1e9a2:	d502      	bpl.n	1e9aa <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
   1e9a4:	b1aa      	cbz	r2, 1e9d2 <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
   1e9a6:	4839      	ldr	r0, [pc, #228]	; (1ea8c <nrfx_gpiote_input_configure+0x14c>)
   1e9a8:	e01d      	b.n	1e9e6 <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1e9aa:	f021 0120 	bic.w	r1, r1, #32
   1e9ae:	04c9      	lsls	r1, r1, #19
   1e9b0:	0cc9      	lsrs	r1, r1, #19
   1e9b2:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
   1e9b6:	b162      	cbz	r2, 1e9d2 <nrfx_gpiote_input_configure+0x92>
                if (!edge)
   1e9b8:	f1bc 0f03 	cmp.w	ip, #3
   1e9bc:	d8f3      	bhi.n	1e9a6 <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1e9be:	6872      	ldr	r2, [r6, #4]
   1e9c0:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1e9c2:	f1bc 0f00 	cmp.w	ip, #0
   1e9c6:	d111      	bne.n	1e9ec <nrfx_gpiote_input_configure+0xac>
   1e9c8:	4a31      	ldr	r2, [pc, #196]	; (1ea90 <nrfx_gpiote_input_configure+0x150>)
   1e9ca:	f506 76a2 	add.w	r6, r6, #324	; 0x144
   1e9ce:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1e9d2:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
   1e9d6:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1e9da:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
   1e9de:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
   1e9e2:	bb45      	cbnz	r5, 1ea36 <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
   1e9e4:	482b      	ldr	r0, [pc, #172]	; (1ea94 <nrfx_gpiote_input_configure+0x154>)
}
   1e9e6:	b004      	add	sp, #16
   1e9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1e9ec:	00b2      	lsls	r2, r6, #2
   1e9ee:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1e9f2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1e9f6:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
   1e9fa:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1e9fe:	f020 0003 	bic.w	r0, r0, #3
   1ea02:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1ea06:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1ea0a:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   1ea0e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   1ea12:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ea16:	0220      	lsls	r0, r4, #8
   1ea18:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1ea1c:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   1ea20:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1ea24:	ea40 000e 	orr.w	r0, r0, lr
   1ea28:	f041 0120 	orr.w	r1, r1, #32
   1ea2c:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
   1ea30:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   1ea34:	e7cd      	b.n	1e9d2 <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1ea36:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1ea3a:	4620      	mov	r0, r4
   1ea3c:	f7ff ff3a 	bl	1e8b4 <release_handler>
    if (!handler)
   1ea40:	2e00      	cmp	r6, #0
   1ea42:	d0cf      	beq.n	1e9e4 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1ea44:	4d10      	ldr	r5, [pc, #64]	; (1ea88 <nrfx_gpiote_input_configure+0x148>)
   1ea46:	e9d5 2300 	ldrd	r2, r3, [r5]
   1ea4a:	4296      	cmp	r6, r2
   1ea4c:	d101      	bne.n	1ea52 <nrfx_gpiote_input_configure+0x112>
   1ea4e:	429f      	cmp	r7, r3
   1ea50:	d018      	beq.n	1ea84 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1ea52:	4811      	ldr	r0, [pc, #68]	; (1ea98 <nrfx_gpiote_input_configure+0x158>)
   1ea54:	f10d 010f 	add.w	r1, sp, #15
   1ea58:	f7ff feb6 	bl	1e7c8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1ea5c:	4b0d      	ldr	r3, [pc, #52]	; (1ea94 <nrfx_gpiote_input_configure+0x154>)
   1ea5e:	4298      	cmp	r0, r3
   1ea60:	d1c1      	bne.n	1e9e6 <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   1ea62:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   1ea66:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1ea6a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1ea6e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1ea70:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1ea72:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   1ea76:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1ea7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1ea7e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   1ea82:	e7af      	b.n	1e9e4 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1ea84:	2200      	movs	r2, #0
   1ea86:	e7ee      	b.n	1ea66 <nrfx_gpiote_input_configure+0x126>
   1ea88:	2000068c 	.word	0x2000068c
   1ea8c:	0bad0004 	.word	0x0bad0004
   1ea90:	40006000 	.word	0x40006000
   1ea94:	0bad0000 	.word	0x0bad0000
   1ea98:	20000700 	.word	0x20000700

0001ea9c <nrfx_gpiote_output_configure>:
{
   1ea9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ea9e:	4604      	mov	r4, r0
   1eaa0:	b085      	sub	sp, #20
   1eaa2:	4615      	mov	r5, r2
    if (p_config)
   1eaa4:	b319      	cbz	r1, 1eaee <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1eaa6:	4e33      	ldr	r6, [pc, #204]	; (1eb74 <nrfx_gpiote_output_configure+0xd8>)
   1eaa8:	f100 0708 	add.w	r7, r0, #8
   1eaac:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1eab0:	0793      	lsls	r3, r2, #30
   1eab2:	d403      	bmi.n	1eabc <nrfx_gpiote_output_configure+0x20>
   1eab4:	f7ff fed6 	bl	1e864 <pin_in_use_by_te>
   1eab8:	2800      	cmp	r0, #0
   1eaba:	d158      	bne.n	1eb6e <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1eabc:	f012 0f1c 	tst.w	r2, #28
   1eac0:	d002      	beq.n	1eac8 <nrfx_gpiote_output_configure+0x2c>
   1eac2:	784b      	ldrb	r3, [r1, #1]
   1eac4:	2b01      	cmp	r3, #1
   1eac6:	d052      	beq.n	1eb6e <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1eac8:	2301      	movs	r3, #1
   1eaca:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1eace:	2300      	movs	r3, #0
   1ead0:	e9cd 1300 	strd	r1, r3, [sp]
   1ead4:	1c4a      	adds	r2, r1, #1
   1ead6:	1c8b      	adds	r3, r1, #2
   1ead8:	4620      	mov	r0, r4
   1eada:	f10d 010f 	add.w	r1, sp, #15
   1eade:	f008 fb7f 	bl	271e0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1eae2:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   1eae6:	f043 0303 	orr.w	r3, r3, #3
   1eaea:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   1eaee:	b915      	cbnz	r5, 1eaf6 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   1eaf0:	4821      	ldr	r0, [pc, #132]	; (1eb78 <nrfx_gpiote_output_configure+0xdc>)
}
   1eaf2:	b005      	add	sp, #20
   1eaf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1eaf6:	4e1f      	ldr	r6, [pc, #124]	; (1eb74 <nrfx_gpiote_output_configure+0xd8>)
   1eaf8:	f104 0708 	add.w	r7, r4, #8
   1eafc:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   1eb00:	0783      	lsls	r3, r0, #30
   1eb02:	d534      	bpl.n	1eb6e <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   1eb04:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   1eb08:	4661      	mov	r1, ip
   1eb0a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1eb0c:	f020 0020 	bic.w	r0, r0, #32
   1eb10:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1eb14:	04c0      	lsls	r0, r0, #19
   1eb16:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   1eb1a:	0cc0      	lsrs	r0, r0, #19
   1eb1c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1eb20:	2300      	movs	r3, #0
   1eb22:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1eb26:	786a      	ldrb	r2, [r5, #1]
   1eb28:	2a00      	cmp	r2, #0
   1eb2a:	d0e1      	beq.n	1eaf0 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1eb2c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   1eb30:	78ad      	ldrb	r5, [r5, #2]
   1eb32:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1eb36:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1eb3a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1eb3e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1eb42:	0223      	lsls	r3, r4, #8
   1eb44:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1eb48:	0412      	lsls	r2, r2, #16
   1eb4a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1eb4e:	ea43 030e 	orr.w	r3, r3, lr
   1eb52:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1eb54:	052a      	lsls	r2, r5, #20
   1eb56:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1eb5a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1eb5e:	4313      	orrs	r3, r2
   1eb60:	f040 0020 	orr.w	r0, r0, #32
   1eb64:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1eb68:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1eb6c:	e7c0      	b.n	1eaf0 <nrfx_gpiote_output_configure+0x54>
{
   1eb6e:	4803      	ldr	r0, [pc, #12]	; (1eb7c <nrfx_gpiote_output_configure+0xe0>)
   1eb70:	e7bf      	b.n	1eaf2 <nrfx_gpiote_output_configure+0x56>
   1eb72:	bf00      	nop
   1eb74:	2000068c 	.word	0x2000068c
   1eb78:	0bad0000 	.word	0x0bad0000
   1eb7c:	0bad0004 	.word	0x0bad0004

0001eb80 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1eb80:	4b01      	ldr	r3, [pc, #4]	; (1eb88 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1eb82:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1eb86:	4770      	bx	lr
   1eb88:	2000068c 	.word	0x2000068c

0001eb8c <nrfx_gpiote_channel_get>:
{
   1eb8c:	b508      	push	{r3, lr}
   1eb8e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1eb90:	f7ff fe68 	bl	1e864 <pin_in_use_by_te>
   1eb94:	b138      	cbz	r0, 1eba6 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1eb96:	4b05      	ldr	r3, [pc, #20]	; (1ebac <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   1eb98:	4805      	ldr	r0, [pc, #20]	; (1ebb0 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1eb9a:	3208      	adds	r2, #8
   1eb9c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1eba0:	0b5b      	lsrs	r3, r3, #13
   1eba2:	700b      	strb	r3, [r1, #0]
}
   1eba4:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1eba6:	4803      	ldr	r0, [pc, #12]	; (1ebb4 <nrfx_gpiote_channel_get+0x28>)
   1eba8:	e7fc      	b.n	1eba4 <nrfx_gpiote_channel_get+0x18>
   1ebaa:	bf00      	nop
   1ebac:	2000068c 	.word	0x2000068c
   1ebb0:	0bad0000 	.word	0x0bad0000
   1ebb4:	0bad0004 	.word	0x0bad0004

0001ebb8 <nrfx_gpiote_init>:
{
   1ebb8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1ebba:	4c0f      	ldr	r4, [pc, #60]	; (1ebf8 <nrfx_gpiote_init+0x40>)
   1ebbc:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   1ebc0:	b9bd      	cbnz	r5, 1ebf2 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1ebc2:	2260      	movs	r2, #96	; 0x60
   1ebc4:	4629      	mov	r1, r5
   1ebc6:	f104 0010 	add.w	r0, r4, #16
   1ebca:	f005 fecb 	bl	24964 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1ebce:	2006      	movs	r0, #6
   1ebd0:	f7f4 fe98 	bl	13904 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ebd4:	4b09      	ldr	r3, [pc, #36]	; (1ebfc <nrfx_gpiote_init+0x44>)
    return err_code;
   1ebd6:	480a      	ldr	r0, [pc, #40]	; (1ec00 <nrfx_gpiote_init+0x48>)
   1ebd8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1ebdc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1ebe0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1ebe4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1ebe8:	2301      	movs	r3, #1
   1ebea:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1ebee:	6763      	str	r3, [r4, #116]	; 0x74
}
   1ebf0:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1ebf2:	4804      	ldr	r0, [pc, #16]	; (1ec04 <nrfx_gpiote_init+0x4c>)
   1ebf4:	e7fc      	b.n	1ebf0 <nrfx_gpiote_init+0x38>
   1ebf6:	bf00      	nop
   1ebf8:	2000068c 	.word	0x2000068c
   1ebfc:	40006000 	.word	0x40006000
   1ec00:	0bad0000 	.word	0x0bad0000
   1ec04:	0bad0005 	.word	0x0bad0005

0001ec08 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1ec08:	4b03      	ldr	r3, [pc, #12]	; (1ec18 <nrfx_gpiote_is_init+0x10>)
   1ec0a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   1ec0e:	3800      	subs	r0, #0
   1ec10:	bf18      	it	ne
   1ec12:	2001      	movne	r0, #1
   1ec14:	4770      	bx	lr
   1ec16:	bf00      	nop
   1ec18:	2000068c 	.word	0x2000068c

0001ec1c <nrfx_gpiote_channel_free>:
{
   1ec1c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1ec1e:	4801      	ldr	r0, [pc, #4]	; (1ec24 <nrfx_gpiote_channel_free+0x8>)
   1ec20:	f7ff bdf2 	b.w	1e808 <nrfx_flag32_free>
   1ec24:	200006fc 	.word	0x200006fc

0001ec28 <nrfx_gpiote_channel_alloc>:
{
   1ec28:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1ec2a:	4801      	ldr	r0, [pc, #4]	; (1ec30 <nrfx_gpiote_channel_alloc+0x8>)
   1ec2c:	f7ff bdcc 	b.w	1e7c8 <nrfx_flag32_alloc>
   1ec30:	200006fc 	.word	0x200006fc

0001ec34 <nrfx_gpiote_trigger_enable>:
{
   1ec34:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ec36:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1ec38:	f7ff fe14 	bl	1e864 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1ec3c:	f104 0208 	add.w	r2, r4, #8
   1ec40:	4b1e      	ldr	r3, [pc, #120]	; (1ecbc <nrfx_gpiote_trigger_enable+0x88>)
   1ec42:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1ec46:	b1e8      	cbz	r0, 1ec84 <nrfx_gpiote_trigger_enable+0x50>
   1ec48:	f013 0502 	ands.w	r5, r3, #2
   1ec4c:	d11a      	bne.n	1ec84 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1ec4e:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1ec50:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   1ec52:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   1ec56:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   1ec5a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1ec5e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ec62:	6005      	str	r5, [r0, #0]
   1ec64:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1ec66:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1ec6a:	f040 0001 	orr.w	r0, r0, #1
   1ec6e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   1ec72:	b129      	cbz	r1, 1ec80 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1ec74:	2201      	movs	r2, #1
   1ec76:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   1ec7a:	4a11      	ldr	r2, [pc, #68]	; (1ecc0 <nrfx_gpiote_trigger_enable+0x8c>)
   1ec7c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1ec80:	b003      	add	sp, #12
   1ec82:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1ec84:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1ec88:	2b04      	cmp	r3, #4
   1ec8a:	d012      	beq.n	1ecb2 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1ec8c:	2b05      	cmp	r3, #5
   1ec8e:	d012      	beq.n	1ecb6 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ec90:	a801      	add	r0, sp, #4
   1ec92:	9401      	str	r4, [sp, #4]
   1ec94:	f7ff fdd8 	bl	1e848 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1ec98:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1ec9a:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1ec9e:	40d9      	lsrs	r1, r3
   1eca0:	f001 0101 	and.w	r1, r1, #1
   1eca4:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1eca6:	4620      	mov	r0, r4
}
   1eca8:	b003      	add	sp, #12
   1ecaa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1ecae:	f008 bae0 	b.w	27272 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1ecb2:	2103      	movs	r1, #3
   1ecb4:	e7f7      	b.n	1eca6 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1ecb6:	2102      	movs	r1, #2
   1ecb8:	e7f5      	b.n	1eca6 <nrfx_gpiote_trigger_enable+0x72>
   1ecba:	bf00      	nop
   1ecbc:	2000068c 	.word	0x2000068c
   1ecc0:	40006000 	.word	0x40006000

0001ecc4 <nrfx_gpiote_trigger_disable>:
{
   1ecc4:	b508      	push	{r3, lr}
   1ecc6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1ecc8:	f7ff fdcc 	bl	1e864 <pin_in_use_by_te>
   1eccc:	b1c0      	cbz	r0, 1ed00 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1ecce:	f102 0108 	add.w	r1, r2, #8
   1ecd2:	4b0e      	ldr	r3, [pc, #56]	; (1ed0c <nrfx_gpiote_trigger_disable+0x48>)
   1ecd4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1ecd8:	0799      	lsls	r1, r3, #30
   1ecda:	d411      	bmi.n	1ed00 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1ecdc:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1ecde:	2201      	movs	r2, #1
   1ece0:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1ece2:	009b      	lsls	r3, r3, #2
   1ece4:	490a      	ldr	r1, [pc, #40]	; (1ed10 <nrfx_gpiote_trigger_disable+0x4c>)
   1ece6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ecea:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1ecee:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1ecf2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1ecf6:	f022 0203 	bic.w	r2, r2, #3
   1ecfa:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1ecfe:	bd08      	pop	{r3, pc}
   1ed00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1ed04:	2100      	movs	r1, #0
   1ed06:	4610      	mov	r0, r2
   1ed08:	f008 bab3 	b.w	27272 <nrf_gpio_cfg_sense_set>
   1ed0c:	2000068c 	.word	0x2000068c
   1ed10:	40006000 	.word	0x40006000

0001ed14 <nrfx_gpiote_pin_uninit>:
{
   1ed14:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1ed16:	4b0e      	ldr	r3, [pc, #56]	; (1ed50 <nrfx_gpiote_pin_uninit+0x3c>)
   1ed18:	f100 0208 	add.w	r2, r0, #8
{
   1ed1c:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1ed1e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   1ed22:	07db      	lsls	r3, r3, #31
   1ed24:	d511      	bpl.n	1ed4a <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   1ed26:	f7ff ffcd 	bl	1ecc4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1ed2a:	4620      	mov	r0, r4
   1ed2c:	f7ff fdec 	bl	1e908 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ed30:	a801      	add	r0, sp, #4
   1ed32:	9401      	str	r4, [sp, #4]
   1ed34:	f7ff fd88 	bl	1e848 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1ed38:	9b01      	ldr	r3, [sp, #4]
   1ed3a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1ed3e:	2202      	movs	r2, #2
   1ed40:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   1ed44:	4803      	ldr	r0, [pc, #12]	; (1ed54 <nrfx_gpiote_pin_uninit+0x40>)
}
   1ed46:	b002      	add	sp, #8
   1ed48:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1ed4a:	4803      	ldr	r0, [pc, #12]	; (1ed58 <nrfx_gpiote_pin_uninit+0x44>)
   1ed4c:	e7fb      	b.n	1ed46 <nrfx_gpiote_pin_uninit+0x32>
   1ed4e:	bf00      	nop
   1ed50:	2000068c 	.word	0x2000068c
   1ed54:	0bad0000 	.word	0x0bad0000
   1ed58:	0bad0004 	.word	0x0bad0004

0001ed5c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1ed5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ed60:	4b68      	ldr	r3, [pc, #416]	; (1ef04 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
   1ed62:	4869      	ldr	r0, [pc, #420]	; (1ef08 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1ed64:	4969      	ldr	r1, [pc, #420]	; (1ef0c <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
   1ed66:	2600      	movs	r6, #0
{
   1ed68:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1ed6a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ed6c:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ed6e:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1ed70:	b135      	cbz	r5, 1ed80 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1ed72:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1ed76:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ed78:	bf1e      	ittt	ne
   1ed7a:	601c      	strne	r4, [r3, #0]
   1ed7c:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1ed7e:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1ed80:	3304      	adds	r3, #4
   1ed82:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1ed84:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1ed88:	d1f1      	bne.n	1ed6e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ed8a:	f8df 917c 	ldr.w	r9, [pc, #380]	; 1ef08 <nrfx_gpiote_irq_handler+0x1ac>
   1ed8e:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1ed92:	2b00      	cmp	r3, #0
   1ed94:	f000 8099 	beq.w	1eeca <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
   1ed98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1ed9c:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1eda0:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1eda2:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1eda6:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   1edaa:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1edac:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1edb0:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
   1edb4:	f10d 0a10 	add.w	sl, sp, #16
   1edb8:	ea4f 1348 	mov.w	r3, r8, lsl #5
   1edbc:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1edbe:	f04f 0b01 	mov.w	fp, #1
   1edc2:	e049      	b.n	1ee58 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
   1edc4:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1edc6:	4a52      	ldr	r2, [pc, #328]	; (1ef10 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   1edc8:	fa94 f4a4 	rbit	r4, r4
   1edcc:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1edd0:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1edd2:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1edd4:	f104 0308 	add.w	r3, r4, #8
   1edd8:	9403      	str	r4, [sp, #12]
   1edda:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   1edde:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
   1ede2:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1ede6:	fa0b f202 	lsl.w	r2, fp, r2
   1edea:	ea23 0302 	bic.w	r3, r3, r2
   1edee:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1edf2:	a803      	add	r0, sp, #12
   1edf4:	f7ff fd28 	bl	1e848 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1edf8:	9b03      	ldr	r3, [sp, #12]
   1edfa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1edfe:	08b9      	lsrs	r1, r7, #2
   1ee00:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1ee04:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   1ee08:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1ee0a:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1ee0c:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   1ee10:	d52c      	bpl.n	1ee6c <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
   1ee12:	4620      	mov	r0, r4
   1ee14:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1ee16:	b2dd      	uxtb	r5, r3
   1ee18:	f7ff fd2e 	bl	1e878 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ee1c:	a803      	add	r0, sp, #12
   1ee1e:	9403      	str	r4, [sp, #12]
   1ee20:	f7ff fd12 	bl	1e848 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1ee24:	9b03      	ldr	r3, [sp, #12]
   1ee26:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1ee2a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1ee2e:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1ee32:	429d      	cmp	r5, r3
   1ee34:	d107      	bne.n	1ee46 <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1ee36:	2100      	movs	r1, #0
   1ee38:	4620      	mov	r0, r4
   1ee3a:	f008 fa1a 	bl	27272 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1ee3e:	4629      	mov	r1, r5
   1ee40:	4620      	mov	r0, r4
   1ee42:	f008 fa16 	bl	27272 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ee46:	a803      	add	r0, sp, #12
   1ee48:	9403      	str	r4, [sp, #12]
   1ee4a:	f7ff fcfd 	bl	1e848 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1ee4e:	9b03      	ldr	r3, [sp, #12]
   1ee50:	fa0b f303 	lsl.w	r3, fp, r3
   1ee54:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   1ee58:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
   1ee5c:	2c00      	cmp	r4, #0
   1ee5e:	d1b1      	bne.n	1edc4 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1ee60:	f1b8 0f00 	cmp.w	r8, #0
   1ee64:	d11d      	bne.n	1eea2 <nrfx_gpiote_irq_handler+0x146>
   1ee66:	f04f 0801 	mov.w	r8, #1
   1ee6a:	e7a5      	b.n	1edb8 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1ee6c:	2b02      	cmp	r3, #2
   1ee6e:	d10c      	bne.n	1ee8a <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1ee70:	2103      	movs	r1, #3
   1ee72:	4620      	mov	r0, r4
   1ee74:	f008 f9fd 	bl	27272 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1ee78:	f005 0305 	and.w	r3, r5, #5
   1ee7c:	2b01      	cmp	r3, #1
   1ee7e:	d1e2      	bne.n	1ee46 <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
   1ee80:	4639      	mov	r1, r7
   1ee82:	4620      	mov	r0, r4
   1ee84:	f7ff fcf8 	bl	1e878 <call_handler>
   1ee88:	e7dd      	b.n	1ee46 <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1ee8a:	2102      	movs	r1, #2
   1ee8c:	4620      	mov	r0, r4
   1ee8e:	9301      	str	r3, [sp, #4]
   1ee90:	f008 f9ef 	bl	27272 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1ee94:	2d03      	cmp	r5, #3
   1ee96:	d0f3      	beq.n	1ee80 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1ee98:	9b01      	ldr	r3, [sp, #4]
   1ee9a:	2b03      	cmp	r3, #3
   1ee9c:	d1d3      	bne.n	1ee46 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1ee9e:	2d02      	cmp	r5, #2
   1eea0:	e7ed      	b.n	1ee7e <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
   1eea2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1eea6:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
   1eeaa:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
   1eeae:	4919      	ldr	r1, [pc, #100]	; (1ef14 <nrfx_gpiote_irq_handler+0x1b8>)
   1eeb0:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   1eeb4:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1eeb6:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1eeba:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
   1eebe:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   1eec0:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   1eec2:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
   1eec6:	f47f af73 	bne.w	1edb0 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   1eeca:	2401      	movs	r4, #1
    while (mask)
   1eecc:	b916      	cbnz	r6, 1eed4 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1eece:	b007      	add	sp, #28
   1eed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   1eed4:	fa96 f3a6 	rbit	r3, r6
   1eed8:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1eedc:	fa04 f203 	lsl.w	r2, r4, r3
   1eee0:	009b      	lsls	r3, r3, #2
   1eee2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1eee6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1eeea:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1eeee:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1eef2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1eef6:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1eefa:	f3c1 4101 	ubfx	r1, r1, #16, #2
   1eefe:	f7ff fcbb 	bl	1e878 <call_handler>
   1ef02:	e7e3      	b.n	1eecc <nrfx_gpiote_irq_handler+0x170>
   1ef04:	40006100 	.word	0x40006100
   1ef08:	40006000 	.word	0x40006000
   1ef0c:	40006120 	.word	0x40006120
   1ef10:	2000068c 	.word	0x2000068c
   1ef14:	50000300 	.word	0x50000300

0001ef18 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   1ef18:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   1ef1a:	4801      	ldr	r0, [pc, #4]	; (1ef20 <nrfx_ppi_channel_alloc+0x8>)
   1ef1c:	f7ff bc54 	b.w	1e7c8 <nrfx_flag32_alloc>
   1ef20:	20000708 	.word	0x20000708

0001ef24 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   1ef24:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1ef26:	4c11      	ldr	r4, [pc, #68]	; (1ef6c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1ef28:	4a11      	ldr	r2, [pc, #68]	; (1ef70 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1ef2a:	4912      	ldr	r1, [pc, #72]	; (1ef74 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1ef2c:	2303      	movs	r3, #3
   1ef2e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1ef30:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1ef32:	4b11      	ldr	r3, [pc, #68]	; (1ef78 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   1ef34:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1ef36:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1ef38:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1ef3c:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1ef3e:	2300      	movs	r3, #0
   1ef40:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1ef42:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1ef44:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   1ef46:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1ef48:	4a0c      	ldr	r2, [pc, #48]	; (1ef7c <_DoInit+0x58>)
   1ef4a:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   1ef4c:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1ef4e:	2210      	movs	r2, #16
   1ef50:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1ef52:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1ef54:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1ef56:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   1ef58:	f005 fcb8 	bl	248cc <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   1ef5c:	4908      	ldr	r1, [pc, #32]	; (1ef80 <_DoInit+0x5c>)
   1ef5e:	4620      	mov	r0, r4
   1ef60:	f005 fcb4 	bl	248cc <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   1ef64:	2320      	movs	r3, #32
   1ef66:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   1ef68:	bd10      	pop	{r4, pc}
   1ef6a:	bf00      	nop
   1ef6c:	20003454 	.word	0x20003454
   1ef70:	0002b1c0 	.word	0x0002b1c0
   1ef74:	0002b1c9 	.word	0x0002b1c9
   1ef78:	2000421d 	.word	0x2000421d
   1ef7c:	2000420d 	.word	0x2000420d
   1ef80:	0002b1cd 	.word	0x0002b1cd

0001ef84 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1ef84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   1ef88:	4f21      	ldr	r7, [pc, #132]	; (1f010 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
   1ef8a:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1ef8e:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   1ef90:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1ef94:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   1ef96:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1ef98:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1ef9a:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1ef9c:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1ef9e:	d831      	bhi.n	1f004 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   1efa0:	f8d2 a020 	ldr.w	sl, [r2, #32]
   1efa4:	ebaa 0905 	sub.w	r9, sl, r5
   1efa8:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
   1efac:	4294      	cmp	r4, r2
   1efae:	d811      	bhi.n	1efd4 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1efb0:	2318      	movs	r3, #24
   1efb2:	fb06 3303 	mla	r3, r6, r3, r3
   1efb6:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   1efb8:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1efba:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   1efbc:	4641      	mov	r1, r8
   1efbe:	4428      	add	r0, r5
   1efc0:	f005 fcc5 	bl	2494e <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   1efc4:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   1efc6:	2318      	movs	r3, #24
   1efc8:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
   1efcc:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   1efce:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   1efd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   1efd4:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1efd6:	429c      	cmp	r4, r3
   1efd8:	d818      	bhi.n	1f00c <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1efda:	fb00 bb0b 	mla	fp, r0, fp, fp
   1efde:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1efe0:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1efe2:	f8db 0004 	ldr.w	r0, [fp, #4]
   1efe6:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1efe8:	4428      	add	r0, r5
   1efea:	f005 fcb0 	bl	2494e <memcpy>
      if (NumBytes) {
   1efee:	ebb4 040a 	subs.w	r4, r4, sl
   1eff2:	d0e8      	beq.n	1efc6 <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   1eff4:	f8db 0004 	ldr.w	r0, [fp, #4]
   1eff8:	4622      	mov	r2, r4
   1effa:	eb08 0109 	add.w	r1, r8, r9
   1effe:	f005 fca6 	bl	2494e <memcpy>
      return 1;
   1f002:	e7e0      	b.n	1efc6 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   1f004:	3b01      	subs	r3, #1
   1f006:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   1f008:	42a3      	cmp	r3, r4
   1f00a:	d2d1      	bcs.n	1efb0 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   1f00c:	2000      	movs	r0, #0
   1f00e:	e7df      	b.n	1efd0 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   1f010:	20003454 	.word	0x20003454

0001f014 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   1f014:	4b03      	ldr	r3, [pc, #12]	; (1f024 <SEGGER_RTT_HasDataUp+0x10>)
   1f016:	2218      	movs	r2, #24
   1f018:	fb02 3300 	mla	r3, r2, r0, r3
   1f01c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   1f01e:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   1f020:	1a80      	subs	r0, r0, r2
   1f022:	4770      	bx	lr
   1f024:	20003454 	.word	0x20003454

0001f028 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   1f028:	4803      	ldr	r0, [pc, #12]	; (1f038 <zephyr_rtt_mutex_lock+0x10>)
   1f02a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f02e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f032:	f000 baa1 	b.w	1f578 <z_impl_k_mutex_lock>
   1f036:	bf00      	nop
   1f038:	20000958 	.word	0x20000958

0001f03c <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   1f03c:	4801      	ldr	r0, [pc, #4]	; (1f044 <zephyr_rtt_mutex_unlock+0x8>)
   1f03e:	f000 bb15 	b.w	1f66c <z_impl_k_mutex_unlock>
   1f042:	bf00      	nop
   1f044:	20000958 	.word	0x20000958

0001f048 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1f048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f04c:	b086      	sub	sp, #24
   1f04e:	4605      	mov	r5, r0
   1f050:	af00      	add	r7, sp, #0
   1f052:	460e      	mov	r6, r1
	__asm__ volatile(
   1f054:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f058:	f3ef 8811 	mrs	r8, BASEPRI
   1f05c:	f383 8812 	msr	BASEPRI_MAX, r3
   1f060:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1f064:	f001 f86c 	bl	20140 <z_impl_z_current_get>
   1f068:	2d04      	cmp	r5, #4
   1f06a:	bf96      	itet	ls
   1f06c:	4b2c      	ldrls	r3, [pc, #176]	; (1f120 <z_fatal_error+0xd8>)
   1f06e:	4b2d      	ldrhi	r3, [pc, #180]	; (1f124 <z_fatal_error+0xdc>)
   1f070:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1f074:	46e9      	mov	r9, sp
   1f076:	b08a      	sub	sp, #40	; 0x28
   1f078:	4604      	mov	r4, r0
   1f07a:	466a      	mov	r2, sp
   1f07c:	492a      	ldr	r1, [pc, #168]	; (1f128 <z_fatal_error+0xe0>)
   1f07e:	61d3      	str	r3, [r2, #28]
   1f080:	f240 3301 	movw	r3, #769	; 0x301
   1f084:	8493      	strh	r3, [r2, #36]	; 0x24
   1f086:	f04f 0a00 	mov.w	sl, #0
   1f08a:	4b28      	ldr	r3, [pc, #160]	; (1f12c <z_fatal_error+0xe4>)
   1f08c:	f8c2 a020 	str.w	sl, [r2, #32]
   1f090:	e9c2 1505 	strd	r1, r5, [r2, #20]
   1f094:	f842 3f10 	str.w	r3, [r2, #16]!
   1f098:	4825      	ldr	r0, [pc, #148]	; (1f130 <z_fatal_error+0xe8>)
   1f09a:	4653      	mov	r3, sl
   1f09c:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   1f0a0:	f7f3 fdb6 	bl	12c10 <z_impl_z_log_msg_static_create>
   1f0a4:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1f0a6:	b17e      	cbz	r6, 1f0c8 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1f0a8:	69f3      	ldr	r3, [r6, #28]
   1f0aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1f0ae:	b15b      	cbz	r3, 1f0c8 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
   1f0b0:	4b20      	ldr	r3, [pc, #128]	; (1f134 <z_fatal_error+0xec>)
   1f0b2:	617b      	str	r3, [r7, #20]
   1f0b4:	2302      	movs	r3, #2
   1f0b6:	613b      	str	r3, [r7, #16]
   1f0b8:	481d      	ldr	r0, [pc, #116]	; (1f130 <z_fatal_error+0xe8>)
   1f0ba:	4653      	mov	r3, sl
   1f0bc:	f107 0210 	add.w	r2, r7, #16
   1f0c0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f0c4:	f7f3 fda4 	bl	12c10 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1f0c8:	b12c      	cbz	r4, 1f0d6 <z_fatal_error+0x8e>
   1f0ca:	4620      	mov	r0, r4
   1f0cc:	f008 f9bf 	bl	2744e <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1f0d0:	b108      	cbz	r0, 1f0d6 <z_fatal_error+0x8e>
   1f0d2:	7803      	ldrb	r3, [r0, #0]
   1f0d4:	b903      	cbnz	r3, 1f0d8 <z_fatal_error+0x90>
		thread_name = "unknown";
   1f0d6:	4818      	ldr	r0, [pc, #96]	; (1f138 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1f0d8:	46e9      	mov	r9, sp
   1f0da:	b08a      	sub	sp, #40	; 0x28
   1f0dc:	466a      	mov	r2, sp
   1f0de:	4b17      	ldr	r3, [pc, #92]	; (1f13c <z_fatal_error+0xf4>)
   1f0e0:	61d0      	str	r0, [r2, #28]
   1f0e2:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1f0e6:	f240 3301 	movw	r3, #769	; 0x301
   1f0ea:	8413      	strh	r3, [r2, #32]
   1f0ec:	4b14      	ldr	r3, [pc, #80]	; (1f140 <z_fatal_error+0xf8>)
   1f0ee:	f842 3f10 	str.w	r3, [r2, #16]!
   1f0f2:	2300      	movs	r3, #0
   1f0f4:	480e      	ldr	r0, [pc, #56]	; (1f130 <z_fatal_error+0xe8>)
   1f0f6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1f0fa:	f7f3 fd89 	bl	12c10 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1f0fe:	4631      	mov	r1, r6
   1f100:	46cd      	mov	sp, r9
   1f102:	4628      	mov	r0, r5
   1f104:	f7fe f9f4 	bl	1d4f0 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1f108:	f388 8811 	msr	BASEPRI, r8
   1f10c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1f110:	4620      	mov	r0, r4
   1f112:	f7f5 f8b9 	bl	14288 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1f116:	3718      	adds	r7, #24
   1f118:	46bd      	mov	sp, r7
   1f11a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f11e:	bf00      	nop
   1f120:	000289d8 	.word	0x000289d8
   1f124:	0002b1d4 	.word	0x0002b1d4
   1f128:	0002b1e2 	.word	0x0002b1e2
   1f12c:	01000005 	.word	0x01000005
   1f130:	0002821c 	.word	0x0002821c
   1f134:	0002b20a 	.word	0x0002b20a
   1f138:	000296c8 	.word	0x000296c8
   1f13c:	0002b22b 	.word	0x0002b22b
   1f140:	01000004 	.word	0x01000004

0001f144 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f144:	4b10      	ldr	r3, [pc, #64]	; (1f188 <z_sys_init_run_level+0x44>)
{
   1f146:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f148:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1f14c:	3001      	adds	r0, #1
   1f14e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1f152:	42a6      	cmp	r6, r4
   1f154:	d800      	bhi.n	1f158 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
   1f156:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
   1f158:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
   1f15c:	b18d      	cbz	r5, 1f182 <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
   1f15e:	4628      	mov	r0, r5
   1f160:	4798      	blx	r3
			if (rc != 0) {
   1f162:	b138      	cbz	r0, 1f174 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1f164:	2800      	cmp	r0, #0
   1f166:	bfb8      	it	lt
   1f168:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1f16a:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   1f16c:	28ff      	cmp	r0, #255	; 0xff
   1f16e:	bfa8      	it	ge
   1f170:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   1f172:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1f174:	68ea      	ldr	r2, [r5, #12]
   1f176:	7853      	ldrb	r3, [r2, #1]
   1f178:	f043 0301 	orr.w	r3, r3, #1
   1f17c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f17e:	3408      	adds	r4, #8
   1f180:	e7e7      	b.n	1f152 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
   1f182:	4798      	blx	r3
   1f184:	e7fb      	b.n	1f17e <z_sys_init_run_level+0x3a>
   1f186:	bf00      	nop
   1f188:	000289ec 	.word	0x000289ec

0001f18c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1f18c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1f18e:	4b0a      	ldr	r3, [pc, #40]	; (1f1b8 <bg_thread_main+0x2c>)
   1f190:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1f192:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   1f194:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1f196:	f7ff ffd5 	bl	1f144 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1f19a:	f001 fae9 	bl	20770 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   1f19e:	2004      	movs	r0, #4
   1f1a0:	f7ff ffd0 	bl	1f144 <z_sys_init_run_level>

	z_init_static_threads();
   1f1a4:	f000 f970 	bl	1f488 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
   1f1a8:	f7f2 f8be 	bl	11328 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1f1ac:	4a03      	ldr	r2, [pc, #12]	; (1f1bc <bg_thread_main+0x30>)
   1f1ae:	7b13      	ldrb	r3, [r2, #12]
   1f1b0:	f023 0301 	bic.w	r3, r3, #1
   1f1b4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1f1b6:	bd08      	pop	{r3, pc}
   1f1b8:	2000461d 	.word	0x2000461d
   1f1bc:	20002a88 	.word	0x20002a88

0001f1c0 <z_bss_zero>:
{
   1f1c0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1f1c2:	4803      	ldr	r0, [pc, #12]	; (1f1d0 <z_bss_zero+0x10>)
   1f1c4:	4a03      	ldr	r2, [pc, #12]	; (1f1d4 <z_bss_zero+0x14>)
   1f1c6:	2100      	movs	r1, #0
   1f1c8:	1a12      	subs	r2, r2, r0
   1f1ca:	f008 f874 	bl	272b6 <z_early_memset>
}
   1f1ce:	bd08      	pop	{r3, pc}
   1f1d0:	20000ae8 	.word	0x20000ae8
   1f1d4:	20004620 	.word	0x20004620

0001f1d8 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1f1d8:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   1f1da:	2300      	movs	r3, #0
{
   1f1dc:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   1f1de:	2201      	movs	r2, #1
   1f1e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   1f1e4:	4e13      	ldr	r6, [pc, #76]	; (1f234 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1f1e6:	4d14      	ldr	r5, [pc, #80]	; (1f238 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   1f1e8:	9301      	str	r3, [sp, #4]
   1f1ea:	220f      	movs	r2, #15
   1f1ec:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1f1f0:	4912      	ldr	r1, [pc, #72]	; (1f23c <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1f1f2:	2314      	movs	r3, #20
   1f1f4:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   1f1f8:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   1f1fc:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   1f1fe:	f44f 70c0 	mov.w	r0, #384	; 0x180
   1f202:	fb00 1104 	mla	r1, r0, r4, r1
   1f206:	4b0e      	ldr	r3, [pc, #56]	; (1f240 <z_init_cpu+0x68>)
   1f208:	9500      	str	r5, [sp, #0]
   1f20a:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1f20e:	4630      	mov	r0, r6
   1f210:	f000 f8dc 	bl	1f3cc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f214:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1f216:	4a0b      	ldr	r2, [pc, #44]	; (1f244 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   1f218:	60ee      	str	r6, [r5, #12]
   1f21a:	f023 0304 	bic.w	r3, r3, #4
   1f21e:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1f220:	f44f 6304 	mov.w	r3, #2112	; 0x840
   1f224:	fb04 3303 	mla	r3, r4, r3, r3
   1f228:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   1f22a:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
   1f22c:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1f22e:	b006      	add	sp, #24
   1f230:	bd70      	pop	{r4, r5, r6, pc}
   1f232:	bf00      	nop
   1f234:	20002a08 	.word	0x20002a08
   1f238:	200034fc 	.word	0x200034fc
   1f23c:	20006c00 	.word	0x20006c00
   1f240:	0001f541 	.word	0x0001f541
   1f244:	200063c0 	.word	0x200063c0

0001f248 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   1f248:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1f24a:	2000      	movs	r0, #0
{
   1f24c:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1f24e:	f7ff ff79 	bl	1f144 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1f252:	4b2e      	ldr	r3, [pc, #184]	; (1f30c <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1f254:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1f258:	4d2d      	ldr	r5, [pc, #180]	; (1f310 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   1f25a:	4e2e      	ldr	r6, [pc, #184]	; (1f314 <z_cstart+0xcc>)
   1f25c:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f25e:	4f2e      	ldr	r7, [pc, #184]	; (1f318 <z_cstart+0xd0>)
   1f260:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1f264:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1f266:	23e0      	movs	r3, #224	; 0xe0
   1f268:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1f26c:	2400      	movs	r4, #0
   1f26e:	2320      	movs	r3, #32
   1f270:	77eb      	strb	r3, [r5, #31]
   1f272:	762c      	strb	r4, [r5, #24]
   1f274:	766c      	strb	r4, [r5, #25]
   1f276:	76ac      	strb	r4, [r5, #26]
   1f278:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1f27c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1f27e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1f282:	626b      	str	r3, [r5, #36]	; 0x24
   1f284:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1f288:	f7f4 ff72 	bl	14170 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1f28c:	f7f4 fab4 	bl	137f8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1f290:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f294:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1f296:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1f298:	f7f5 f8c6 	bl	14428 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1f29c:	f7f5 f80a 	bl	142b4 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   1f2a0:	f7f3 fb42 	bl	12928 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1f2a4:	f240 1301 	movw	r3, #257	; 0x101
   1f2a8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1f2ac:	ab06      	add	r3, sp, #24
   1f2ae:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   1f2b0:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   1f2b4:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1f2b6:	f007 fff2 	bl	2729e <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   1f2ba:	2001      	movs	r0, #1
   1f2bc:	f7ff ff42 	bl	1f144 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1f2c0:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   1f2c2:	4d16      	ldr	r5, [pc, #88]	; (1f31c <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1f2c4:	f7ff ff3e 	bl	1f144 <z_sys_init_run_level>
	z_sched_init();
   1f2c8:	f000 fe96 	bl	1fff8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f2cc:	4b14      	ldr	r3, [pc, #80]	; (1f320 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
   1f2ce:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f2d0:	9305      	str	r3, [sp, #20]
   1f2d2:	2301      	movs	r3, #1
   1f2d4:	4913      	ldr	r1, [pc, #76]	; (1f324 <z_cstart+0xdc>)
   1f2d6:	9400      	str	r4, [sp, #0]
   1f2d8:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1f2dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1f2e0:	463b      	mov	r3, r7
   1f2e2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1f2e6:	4628      	mov	r0, r5
   1f2e8:	f000 f870 	bl	1f3cc <z_setup_new_thread>
   1f2ec:	7b6a      	ldrb	r2, [r5, #13]
   1f2ee:	4606      	mov	r6, r0
   1f2f0:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   1f2f4:	4628      	mov	r0, r5
   1f2f6:	736a      	strb	r2, [r5, #13]
   1f2f8:	f008 fab7 	bl	2786a <z_ready_thread>
	z_init_cpu(0);
   1f2fc:	4620      	mov	r0, r4
   1f2fe:	f7ff ff6b 	bl	1f1d8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1f302:	463a      	mov	r2, r7
   1f304:	4631      	mov	r1, r6
   1f306:	4628      	mov	r0, r5
   1f308:	f7f4 fbfa 	bl	13b00 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1f30c:	20006c00 	.word	0x20006c00
   1f310:	e000ed00 	.word	0xe000ed00
   1f314:	200034fc 	.word	0x200034fc
   1f318:	0001f18d 	.word	0x0001f18d
   1f31c:	20002a88 	.word	0x20002a88
   1f320:	0002b28d 	.word	0x0002b28d
   1f324:	20006d80 	.word	0x20006d80

0001f328 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   1f328:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1f32a:	4c06      	ldr	r4, [pc, #24]	; (1f344 <statics_init+0x1c>)
   1f32c:	4d06      	ldr	r5, [pc, #24]	; (1f348 <statics_init+0x20>)
   1f32e:	42ac      	cmp	r4, r5
   1f330:	d301      	bcc.n	1f336 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   1f332:	2000      	movs	r0, #0
   1f334:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1f336:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1f33a:	4620      	mov	r0, r4
   1f33c:	f007 ffbf 	bl	272be <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1f340:	3414      	adds	r4, #20
   1f342:	e7f4      	b.n	1f32e <statics_init+0x6>
   1f344:	20000908 	.word	0x20000908
   1f348:	20000908 	.word	0x20000908

0001f34c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
   1f34c:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f34e:	4c06      	ldr	r4, [pc, #24]	; (1f368 <init_mem_slab_module+0x1c>)
   1f350:	4d06      	ldr	r5, [pc, #24]	; (1f36c <init_mem_slab_module+0x20>)
	int rc = 0;
   1f352:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f354:	42ac      	cmp	r4, r5
   1f356:	d300      	bcc.n	1f35a <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   1f358:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   1f35a:	4620      	mov	r0, r4
   1f35c:	f008 f821 	bl	273a2 <create_free_list>
		if (rc < 0) {
   1f360:	2800      	cmp	r0, #0
   1f362:	dbf9      	blt.n	1f358 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f364:	341c      	adds	r4, #28
   1f366:	e7f5      	b.n	1f354 <init_mem_slab_module+0x8>
   1f368:	200008b4 	.word	0x200008b4
   1f36c:	20000908 	.word	0x20000908

0001f370 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1f370:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f372:	460c      	mov	r4, r1
	__asm__ volatile(
   1f374:	f04f 0540 	mov.w	r5, #64	; 0x40
   1f378:	f3ef 8111 	mrs	r1, BASEPRI
   1f37c:	f385 8812 	msr	BASEPRI_MAX, r5
   1f380:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1f384:	6945      	ldr	r5, [r0, #20]
   1f386:	b15d      	cbz	r5, 1f3a0 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   1f388:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1f38a:	682b      	ldr	r3, [r5, #0]
   1f38c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1f38e:	6983      	ldr	r3, [r0, #24]
   1f390:	3301      	adds	r3, #1
   1f392:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1f394:	2000      	movs	r0, #0
	__asm__ volatile(
   1f396:	f381 8811 	msr	BASEPRI, r1
   1f39a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1f39e:	e011      	b.n	1f3c4 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1f3a0:	ea52 0603 	orrs.w	r6, r2, r3
   1f3a4:	d103      	bne.n	1f3ae <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   1f3a6:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   1f3a8:	f06f 000b 	mvn.w	r0, #11
   1f3ac:	e7f3      	b.n	1f396 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1f3ae:	e9cd 2300 	strd	r2, r3, [sp]
   1f3b2:	4602      	mov	r2, r0
   1f3b4:	3008      	adds	r0, #8
   1f3b6:	f000 fd29 	bl	1fe0c <z_pend_curr>
		if (result == 0) {
   1f3ba:	b918      	cbnz	r0, 1f3c4 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   1f3bc:	4b02      	ldr	r3, [pc, #8]	; (1f3c8 <k_mem_slab_alloc+0x58>)
   1f3be:	689b      	ldr	r3, [r3, #8]
   1f3c0:	695b      	ldr	r3, [r3, #20]
   1f3c2:	6023      	str	r3, [r4, #0]
}
   1f3c4:	b002      	add	sp, #8
   1f3c6:	bd70      	pop	{r4, r5, r6, pc}
   1f3c8:	200034fc 	.word	0x200034fc

0001f3cc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1f3cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1f3d0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1f3d2:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1f3d4:	2604      	movs	r6, #4
   1f3d6:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1f3d8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1f3da:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1f3dc:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   1f3e0:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1f3e2:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   1f3e4:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1f3e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1f3ea:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1f3ec:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1f3f0:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1f3f2:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1f3f6:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1f3fa:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1f3fc:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1f3fe:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1f400:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1f404:	9202      	str	r2, [sp, #8]
   1f406:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f408:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1f40a:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1f40c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f40e:	9200      	str	r2, [sp, #0]
   1f410:	4642      	mov	r2, r8
{
   1f412:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1f414:	f7f4 fb42 	bl	13a9c <arch_new_thread>
	if (!_current) {
   1f418:	4b04      	ldr	r3, [pc, #16]	; (1f42c <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   1f41a:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1f41c:	689b      	ldr	r3, [r3, #8]
   1f41e:	b103      	cbz	r3, 1f422 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   1f420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1f422:	6763      	str	r3, [r4, #116]	; 0x74
}
   1f424:	4640      	mov	r0, r8
   1f426:	b004      	add	sp, #16
   1f428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f42c:	200034fc 	.word	0x200034fc

0001f430 <z_impl_k_thread_create>:
{
   1f430:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f432:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1f434:	2500      	movs	r5, #0
   1f436:	9505      	str	r5, [sp, #20]
   1f438:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1f43a:	9504      	str	r5, [sp, #16]
   1f43c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1f43e:	9503      	str	r5, [sp, #12]
   1f440:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1f442:	9502      	str	r5, [sp, #8]
{
   1f444:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1f448:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1f44a:	9501      	str	r5, [sp, #4]
   1f44c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1f44e:	9500      	str	r5, [sp, #0]
{
   1f450:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1f452:	f7ff ffbb 	bl	1f3cc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1f456:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   1f45a:	bf08      	it	eq
   1f45c:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
   1f460:	d005      	beq.n	1f46e <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1f462:	ea56 0307 	orrs.w	r3, r6, r7
   1f466:	d105      	bne.n	1f474 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   1f468:	4620      	mov	r0, r4
   1f46a:	f000 fd45 	bl	1fef8 <z_sched_start>
}
   1f46e:	4620      	mov	r0, r4
   1f470:	b007      	add	sp, #28
   1f472:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1f474:	4903      	ldr	r1, [pc, #12]	; (1f484 <z_impl_k_thread_create+0x54>)
   1f476:	463a      	mov	r2, r7
   1f478:	4633      	mov	r3, r6
   1f47a:	f104 0018 	add.w	r0, r4, #24
   1f47e:	f000 ff37 	bl	202f0 <z_add_timeout>
   1f482:	e7f4      	b.n	1f46e <z_impl_k_thread_create+0x3e>
   1f484:	000278f3 	.word	0x000278f3

0001f488 <z_init_static_threads>:
{
   1f488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f48c:	4c29      	ldr	r4, [pc, #164]	; (1f534 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1f48e:	4d2a      	ldr	r5, [pc, #168]	; (1f538 <z_init_static_threads+0xb0>)
{
   1f490:	b087      	sub	sp, #28
   1f492:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   1f494:	42ae      	cmp	r6, r5
   1f496:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   1f49a:	d30f      	bcc.n	1f4bc <z_init_static_threads+0x34>
	k_sched_lock();
   1f49c:	f000 fd7c 	bl	1ff98 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1f4a0:	4c24      	ldr	r4, [pc, #144]	; (1f534 <z_init_static_threads+0xac>)
   1f4a2:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1f53c <z_init_static_threads+0xb4>
			return ((t * to_hz + off) / from_hz);
   1f4a6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1f4aa:	f240 37e7 	movw	r7, #999	; 0x3e7
   1f4ae:	42ac      	cmp	r4, r5
   1f4b0:	d320      	bcc.n	1f4f4 <z_init_static_threads+0x6c>
}
   1f4b2:	b007      	add	sp, #28
   1f4b4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1f4b8:	f000 bd82 	b.w	1ffc0 <k_sched_unlock>
		z_setup_new_thread(
   1f4bc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1f4c0:	9305      	str	r3, [sp, #20]
   1f4c2:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   1f4c6:	9304      	str	r3, [sp, #16]
   1f4c8:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1f4cc:	9303      	str	r3, [sp, #12]
   1f4ce:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1f4d2:	9302      	str	r3, [sp, #8]
   1f4d4:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1f4d8:	9301      	str	r3, [sp, #4]
   1f4da:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1f4de:	9300      	str	r3, [sp, #0]
   1f4e0:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
   1f4e4:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
   1f4e8:	f7ff ff70 	bl	1f3cc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1f4ec:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   1f4f0:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1f4f2:	e7ce      	b.n	1f492 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1f4f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f4f6:	1c5a      	adds	r2, r3, #1
   1f4f8:	d00d      	beq.n	1f516 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   1f4fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1f4fe:	2100      	movs	r1, #0
   1f500:	4638      	mov	r0, r7
   1f502:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1f506:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1f50a:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1f50e:	d104      	bne.n	1f51a <z_init_static_threads+0x92>
	z_sched_start(thread);
   1f510:	4640      	mov	r0, r8
   1f512:	f000 fcf1 	bl	1fef8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1f516:	342c      	adds	r4, #44	; 0x2c
   1f518:	e7c9      	b.n	1f4ae <z_init_static_threads+0x26>
   1f51a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f51e:	2300      	movs	r3, #0
   1f520:	f7e0 fdee 	bl	100 <__aeabi_uldivmod>
   1f524:	4602      	mov	r2, r0
   1f526:	460b      	mov	r3, r1
   1f528:	f108 0018 	add.w	r0, r8, #24
   1f52c:	4649      	mov	r1, r9
   1f52e:	f000 fedf 	bl	202f0 <z_add_timeout>
   1f532:	e7f0      	b.n	1f516 <z_init_static_threads+0x8e>
   1f534:	000280bc 	.word	0x000280bc
   1f538:	000280bc 	.word	0x000280bc
   1f53c:	000278f3 	.word	0x000278f3

0001f540 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1f540:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1f542:	4c0b      	ldr	r4, [pc, #44]	; (1f570 <idle+0x30>)
	return !z_sys_post_kernel;
   1f544:	4d0b      	ldr	r5, [pc, #44]	; (1f574 <idle+0x34>)
	__asm__ volatile(
   1f546:	f04f 0240 	mov.w	r2, #64	; 0x40
   1f54a:	f3ef 8311 	mrs	r3, BASEPRI
   1f54e:	f382 8812 	msr	BASEPRI_MAX, r2
   1f552:	f3bf 8f6f 	isb	sy
   1f556:	f008 fa7a 	bl	27a4e <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1f55a:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   1f55c:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1f55e:	b913      	cbnz	r3, 1f566 <idle+0x26>
	arch_cpu_idle();
   1f560:	f7f4 f950 	bl	13804 <arch_cpu_idle>
}
   1f564:	e7ef      	b.n	1f546 <idle+0x6>
   1f566:	f7f3 ff2f 	bl	133c8 <pm_system_suspend>
   1f56a:	2800      	cmp	r0, #0
   1f56c:	d1eb      	bne.n	1f546 <idle+0x6>
   1f56e:	e7f7      	b.n	1f560 <idle+0x20>
   1f570:	200034fc 	.word	0x200034fc
   1f574:	2000461d 	.word	0x2000461d

0001f578 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1f578:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f57c:	4604      	mov	r4, r0
   1f57e:	4617      	mov	r7, r2
   1f580:	461e      	mov	r6, r3
   1f582:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f586:	f3ef 8811 	mrs	r8, BASEPRI
   1f58a:	f383 8812 	msr	BASEPRI_MAX, r3
   1f58e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1f592:	68c3      	ldr	r3, [r0, #12]
   1f594:	4a33      	ldr	r2, [pc, #204]	; (1f664 <z_impl_k_mutex_lock+0xec>)
   1f596:	b17b      	cbz	r3, 1f5b8 <z_impl_k_mutex_lock+0x40>
   1f598:	6880      	ldr	r0, [r0, #8]
   1f59a:	6891      	ldr	r1, [r2, #8]
   1f59c:	4288      	cmp	r0, r1
   1f59e:	d019      	beq.n	1f5d4 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1f5a0:	ea57 0306 	orrs.w	r3, r7, r6
   1f5a4:	d118      	bne.n	1f5d8 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1f5a6:	f388 8811 	msr	BASEPRI, r8
   1f5aa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1f5ae:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1f5b2:	b002      	add	sp, #8
   1f5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1f5b8:	6891      	ldr	r1, [r2, #8]
   1f5ba:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1f5be:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1f5c0:	3301      	adds	r3, #1
   1f5c2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1f5c4:	6893      	ldr	r3, [r2, #8]
   1f5c6:	60a3      	str	r3, [r4, #8]
   1f5c8:	f388 8811 	msr	BASEPRI, r8
   1f5cc:	f3bf 8f6f 	isb	sy
		return 0;
   1f5d0:	2000      	movs	r0, #0
   1f5d2:	e7ee      	b.n	1f5b2 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   1f5d4:	6921      	ldr	r1, [r4, #16]
   1f5d6:	e7f2      	b.n	1f5be <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1f5d8:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1f5dc:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   1f5e0:	4299      	cmp	r1, r3
   1f5e2:	bfa8      	it	ge
   1f5e4:	4619      	movge	r1, r3
   1f5e6:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1f5ea:	4291      	cmp	r1, r2
   1f5ec:	bfb8      	it	lt
   1f5ee:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1f5f0:	428b      	cmp	r3, r1
   1f5f2:	dd2e      	ble.n	1f652 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   1f5f4:	f007 ff36 	bl	27464 <adjust_owner_prio.isra.0>
   1f5f8:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1f5fa:	e9cd 7600 	strd	r7, r6, [sp]
   1f5fe:	481a      	ldr	r0, [pc, #104]	; (1f668 <z_impl_k_mutex_lock+0xf0>)
   1f600:	4622      	mov	r2, r4
   1f602:	4641      	mov	r1, r8
   1f604:	f000 fc02 	bl	1fe0c <z_pend_curr>
	if (got_mutex == 0) {
   1f608:	2800      	cmp	r0, #0
   1f60a:	d0e1      	beq.n	1f5d0 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   1f60c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f610:	f3ef 8611 	mrs	r6, BASEPRI
   1f614:	f383 8812 	msr	BASEPRI_MAX, r3
   1f618:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   1f61c:	68a0      	ldr	r0, [r4, #8]
   1f61e:	b1d0      	cbz	r0, 1f656 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1f620:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1f622:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f624:	429c      	cmp	r4, r3
   1f626:	d00a      	beq.n	1f63e <z_impl_k_mutex_lock+0xc6>
   1f628:	b14b      	cbz	r3, 1f63e <z_impl_k_mutex_lock+0xc6>
   1f62a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1f62e:	4299      	cmp	r1, r3
   1f630:	bfa8      	it	ge
   1f632:	4619      	movge	r1, r3
   1f634:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1f638:	4299      	cmp	r1, r3
   1f63a:	bfb8      	it	lt
   1f63c:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   1f63e:	f007 ff11 	bl	27464 <adjust_owner_prio.isra.0>
   1f642:	b140      	cbz	r0, 1f656 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1f644:	4808      	ldr	r0, [pc, #32]	; (1f668 <z_impl_k_mutex_lock+0xf0>)
   1f646:	4631      	mov	r1, r6
   1f648:	f000 fc44 	bl	1fed4 <z_reschedule>
	return -EAGAIN;
   1f64c:	f06f 000a 	mvn.w	r0, #10
   1f650:	e7af      	b.n	1f5b2 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   1f652:	2500      	movs	r5, #0
   1f654:	e7d1      	b.n	1f5fa <z_impl_k_mutex_lock+0x82>
	if (resched) {
   1f656:	2d00      	cmp	r5, #0
   1f658:	d1f4      	bne.n	1f644 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   1f65a:	f386 8811 	msr	BASEPRI, r6
   1f65e:	f3bf 8f6f 	isb	sy
   1f662:	e7f3      	b.n	1f64c <z_impl_k_mutex_lock+0xd4>
   1f664:	200034fc 	.word	0x200034fc
   1f668:	2000461e 	.word	0x2000461e

0001f66c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1f66c:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1f66e:	6883      	ldr	r3, [r0, #8]
{
   1f670:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1f672:	b36b      	cbz	r3, 1f6d0 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1f674:	4a19      	ldr	r2, [pc, #100]	; (1f6dc <z_impl_k_mutex_unlock+0x70>)
   1f676:	6892      	ldr	r2, [r2, #8]
   1f678:	4293      	cmp	r3, r2
   1f67a:	d12c      	bne.n	1f6d6 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1f67c:	68c3      	ldr	r3, [r0, #12]
   1f67e:	2b01      	cmp	r3, #1
   1f680:	d903      	bls.n	1f68a <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   1f682:	3b01      	subs	r3, #1
   1f684:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1f686:	2000      	movs	r0, #0
}
   1f688:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1f68a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f68e:	f3ef 8511 	mrs	r5, BASEPRI
   1f692:	f383 8812 	msr	BASEPRI_MAX, r3
   1f696:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1f69a:	6901      	ldr	r1, [r0, #16]
   1f69c:	6880      	ldr	r0, [r0, #8]
   1f69e:	f007 fee1 	bl	27464 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1f6a2:	4620      	mov	r0, r4
   1f6a4:	f008 f940 	bl	27928 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1f6a8:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1f6aa:	b158      	cbz	r0, 1f6c4 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   1f6ac:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1f6b0:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1f6b2:	2200      	movs	r2, #0
   1f6b4:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1f6b6:	f008 f8d8 	bl	2786a <z_ready_thread>
		z_reschedule(&lock, key);
   1f6ba:	4809      	ldr	r0, [pc, #36]	; (1f6e0 <z_impl_k_mutex_unlock+0x74>)
   1f6bc:	4629      	mov	r1, r5
   1f6be:	f000 fc09 	bl	1fed4 <z_reschedule>
   1f6c2:	e7e0      	b.n	1f686 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   1f6c4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1f6c6:	f385 8811 	msr	BASEPRI, r5
   1f6ca:	f3bf 8f6f 	isb	sy
   1f6ce:	e7da      	b.n	1f686 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   1f6d0:	f06f 0015 	mvn.w	r0, #21
   1f6d4:	e7d8      	b.n	1f688 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   1f6d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f6da:	e7d5      	b.n	1f688 <z_impl_k_mutex_unlock+0x1c>
   1f6dc:	200034fc 	.word	0x200034fc
   1f6e0:	2000461e 	.word	0x2000461e

0001f6e4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1f6e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f6e6:	4611      	mov	r1, r2
	__asm__ volatile(
   1f6e8:	f04f 0240 	mov.w	r2, #64	; 0x40
   1f6ec:	f3ef 8511 	mrs	r5, BASEPRI
   1f6f0:	f382 8812 	msr	BASEPRI_MAX, r2
   1f6f4:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1f6f8:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1f6fa:	b19c      	cbz	r4, 1f724 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f6fc:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1f6fe:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f700:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1f704:	4294      	cmp	r4, r2
	list->head = node;
   1f706:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1f708:	bf08      	it	eq
   1f70a:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1f70c:	2101      	movs	r1, #1
   1f70e:	4620      	mov	r0, r4
   1f710:	f007 ff1d 	bl	2754e <z_queue_node_peek>
   1f714:	4604      	mov	r4, r0
	__asm__ volatile(
   1f716:	f385 8811 	msr	BASEPRI, r5
   1f71a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1f71e:	4620      	mov	r0, r4
   1f720:	b003      	add	sp, #12
   1f722:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f724:	ea51 0203 	orrs.w	r2, r1, r3
   1f728:	d0f5      	beq.n	1f716 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1f72a:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1f72e:	e9cd 1300 	strd	r1, r3, [sp]
   1f732:	4610      	mov	r0, r2
   1f734:	4629      	mov	r1, r5
   1f736:	f000 fb69 	bl	1fe0c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1f73a:	2800      	cmp	r0, #0
   1f73c:	d1ef      	bne.n	1f71e <z_impl_k_queue_get+0x3a>
   1f73e:	4b02      	ldr	r3, [pc, #8]	; (1f748 <z_impl_k_queue_get+0x64>)
   1f740:	689b      	ldr	r3, [r3, #8]
   1f742:	695c      	ldr	r4, [r3, #20]
   1f744:	e7eb      	b.n	1f71e <z_impl_k_queue_get+0x3a>
   1f746:	bf00      	nop
   1f748:	200034fc 	.word	0x200034fc

0001f74c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1f74c:	b538      	push	{r3, r4, r5, lr}
   1f74e:	4604      	mov	r4, r0
	__asm__ volatile(
   1f750:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f754:	f3ef 8511 	mrs	r5, BASEPRI
   1f758:	f383 8812 	msr	BASEPRI_MAX, r3
   1f75c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1f760:	f008 f8e2 	bl	27928 <z_unpend_first_thread>

	if (thread != NULL) {
   1f764:	b148      	cbz	r0, 1f77a <z_impl_k_sem_give+0x2e>
   1f766:	2200      	movs	r2, #0
   1f768:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1f76a:	f008 f87e 	bl	2786a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1f76e:	4629      	mov	r1, r5
   1f770:	4808      	ldr	r0, [pc, #32]	; (1f794 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1f772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1f776:	f000 bbad 	b.w	1fed4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1f77a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1f77e:	429a      	cmp	r2, r3
   1f780:	bf18      	it	ne
   1f782:	3301      	addne	r3, #1
   1f784:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1f786:	2102      	movs	r1, #2
   1f788:	f104 0010 	add.w	r0, r4, #16
   1f78c:	f008 fb04 	bl	27d98 <z_handle_obj_poll_events>
}
   1f790:	e7ed      	b.n	1f76e <z_impl_k_sem_give+0x22>
   1f792:	bf00      	nop
   1f794:	2000461e 	.word	0x2000461e

0001f798 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1f798:	b513      	push	{r0, r1, r4, lr}
   1f79a:	f04f 0440 	mov.w	r4, #64	; 0x40
   1f79e:	f3ef 8111 	mrs	r1, BASEPRI
   1f7a2:	f384 8812 	msr	BASEPRI_MAX, r4
   1f7a6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1f7aa:	6884      	ldr	r4, [r0, #8]
   1f7ac:	b144      	cbz	r4, 1f7c0 <z_impl_k_sem_take+0x28>
		sem->count--;
   1f7ae:	3c01      	subs	r4, #1
   1f7b0:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   1f7b2:	f381 8811 	msr	BASEPRI, r1
   1f7b6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1f7ba:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1f7bc:	b002      	add	sp, #8
   1f7be:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f7c0:	ea52 0403 	orrs.w	r4, r2, r3
   1f7c4:	d106      	bne.n	1f7d4 <z_impl_k_sem_take+0x3c>
   1f7c6:	f381 8811 	msr	BASEPRI, r1
   1f7ca:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1f7ce:	f06f 000f 	mvn.w	r0, #15
   1f7d2:	e7f3      	b.n	1f7bc <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1f7d4:	e9cd 2300 	strd	r2, r3, [sp]
   1f7d8:	4602      	mov	r2, r0
   1f7da:	4802      	ldr	r0, [pc, #8]	; (1f7e4 <z_impl_k_sem_take+0x4c>)
   1f7dc:	f000 fb16 	bl	1fe0c <z_pend_curr>
	return ret;
   1f7e0:	e7ec      	b.n	1f7bc <z_impl_k_sem_take+0x24>
   1f7e2:	bf00      	nop
   1f7e4:	2000461e 	.word	0x2000461e

0001f7e8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   1f7e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
   1f7ea:	4b09      	ldr	r3, [pc, #36]	; (1f810 <k_sys_work_q_init+0x28>)
   1f7ec:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1f7ee:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1f7f0:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1f7f2:	9300      	str	r3, [sp, #0]
   1f7f4:	4907      	ldr	r1, [pc, #28]	; (1f814 <k_sys_work_q_init+0x2c>)
   1f7f6:	4808      	ldr	r0, [pc, #32]	; (1f818 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1f7f8:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1f7fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f800:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1f804:	f000 f924 	bl	1fa50 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1f808:	4620      	mov	r0, r4
   1f80a:	b004      	add	sp, #16
   1f80c:	bd10      	pop	{r4, pc}
   1f80e:	bf00      	nop
   1f810:	0002b295 	.word	0x0002b295
   1f814:	200075c0 	.word	0x200075c0
   1f818:	20002b08 	.word	0x20002b08

0001f81c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1f81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   1f820:	4e4a      	ldr	r6, [pc, #296]	; (1f94c <work_queue_main+0x130>)
   1f822:	b085      	sub	sp, #20
   1f824:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   1f826:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1f82a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   1f82e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f832:	f3ef 8711 	mrs	r7, BASEPRI
   1f836:	f383 8812 	msr	BASEPRI_MAX, r3
   1f83a:	f3bf 8f6f 	isb	sy
   1f83e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   1f842:	b98d      	cbnz	r5, 1f868 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   1f844:	2102      	movs	r1, #2
   1f846:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1f84a:	f007 fec1 	bl	275d0 <flag_test_and_clear>
   1f84e:	2800      	cmp	r0, #0
   1f850:	d143      	bne.n	1f8da <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1f852:	2300      	movs	r3, #0
   1f854:	e9cd 8900 	strd	r8, r9, [sp]
   1f858:	9302      	str	r3, [sp, #8]
   1f85a:	f104 0288 	add.w	r2, r4, #136	; 0x88
   1f85e:	4639      	mov	r1, r7
   1f860:	483b      	ldr	r0, [pc, #236]	; (1f950 <work_queue_main+0x134>)
   1f862:	f000 fcd3 	bl	2020c <z_sched_wait>
			continue;
   1f866:	e7e2      	b.n	1f82e <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1f868:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   1f86c:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1f86e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1f872:	4295      	cmp	r5, r2
	list->tail = node;
   1f874:	bf08      	it	eq
   1f876:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   1f87a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1f87e:	f043 0302 	orr.w	r3, r3, #2
   1f882:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   1f886:	68eb      	ldr	r3, [r5, #12]
   1f888:	f023 0304 	bic.w	r3, r3, #4
   1f88c:	f043 0301 	orr.w	r3, r3, #1
   1f890:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1f892:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   1f894:	f387 8811 	msr	BASEPRI, r7
   1f898:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   1f89c:	4628      	mov	r0, r5
   1f89e:	4798      	blx	r3
	__asm__ volatile(
   1f8a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f8a4:	f3ef 8b11 	mrs	fp, BASEPRI
   1f8a8:	f383 8812 	msr	BASEPRI_MAX, r3
   1f8ac:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1f8b0:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1f8b2:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1f8b4:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1f8b8:	d419      	bmi.n	1f8ee <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   1f8ba:	60ea      	str	r2, [r5, #12]
   1f8bc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1f8c0:	f023 0302 	bic.w	r3, r3, #2
   1f8c4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   1f8c8:	f38b 8811 	msr	BASEPRI, fp
   1f8cc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   1f8d0:	05db      	lsls	r3, r3, #23
   1f8d2:	d4ac      	bmi.n	1f82e <work_queue_main+0x12>
	z_impl_k_yield();
   1f8d4:	f000 fb98 	bl	20008 <z_impl_k_yield>
}
   1f8d8:	e7a9      	b.n	1f82e <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1f8da:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1f8de:	2200      	movs	r2, #0
   1f8e0:	2101      	movs	r1, #1
   1f8e2:	4628      	mov	r0, r5
   1f8e4:	f008 f87a 	bl	279dc <z_sched_wake>
   1f8e8:	2800      	cmp	r0, #0
   1f8ea:	d1f8      	bne.n	1f8de <work_queue_main+0xc2>
   1f8ec:	e7b1      	b.n	1f852 <work_queue_main+0x36>
	return list->head;
   1f8ee:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   1f8f0:	f023 0303 	bic.w	r3, r3, #3
   1f8f4:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1f8f6:	2800      	cmp	r0, #0
   1f8f8:	d0e0      	beq.n	1f8bc <work_queue_main+0xa0>
	return node->next;
   1f8fa:	2700      	movs	r7, #0
   1f8fc:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   1f900:	463b      	mov	r3, r7
   1f902:	2800      	cmp	r0, #0
   1f904:	d0da      	beq.n	1f8bc <work_queue_main+0xa0>
		if (wc->work == work) {
   1f906:	6842      	ldr	r2, [r0, #4]
   1f908:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   1f90a:	4601      	mov	r1, r0
		if (wc->work == work) {
   1f90c:	d10c      	bne.n	1f928 <work_queue_main+0x10c>
	return node->next;
   1f90e:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   1f910:	b99f      	cbnz	r7, 1f93a <work_queue_main+0x11e>
   1f912:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   1f914:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f916:	4282      	cmp	r2, r0
   1f918:	d100      	bne.n	1f91c <work_queue_main+0x100>
	list->tail = node;
   1f91a:	6071      	str	r1, [r6, #4]
	parent->next = child;
   1f91c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1f920:	f7ff ff14 	bl	1f74c <z_impl_k_sem_give>
}
   1f924:	4639      	mov	r1, r7
   1f926:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1f928:	f1ba 0f00 	cmp.w	sl, #0
   1f92c:	d00b      	beq.n	1f946 <work_queue_main+0x12a>
	return node->next;
   1f92e:	f8da 2000 	ldr.w	r2, [sl]
   1f932:	4650      	mov	r0, sl
   1f934:	460f      	mov	r7, r1
   1f936:	4692      	mov	sl, r2
   1f938:	e7e3      	b.n	1f902 <work_queue_main+0xe6>
	parent->next = child;
   1f93a:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f93c:	6872      	ldr	r2, [r6, #4]
   1f93e:	4282      	cmp	r2, r0
	list->tail = node;
   1f940:	bf08      	it	eq
   1f942:	6077      	streq	r7, [r6, #4]
}
   1f944:	e7ea      	b.n	1f91c <work_queue_main+0x100>
   1f946:	4652      	mov	r2, sl
   1f948:	e7f3      	b.n	1f932 <work_queue_main+0x116>
   1f94a:	bf00      	nop
   1f94c:	20003520 	.word	0x20003520
   1f950:	2000461e 	.word	0x2000461e

0001f954 <cancel_sync_locked>:
{
   1f954:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1f956:	68c3      	ldr	r3, [r0, #12]
   1f958:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1f95c:	079b      	lsls	r3, r3, #30
{
   1f95e:	4605      	mov	r5, r0
   1f960:	460c      	mov	r4, r1
	if (ret) {
   1f962:	d50d      	bpl.n	1f980 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1f964:	2201      	movs	r2, #1
   1f966:	2100      	movs	r1, #0
   1f968:	f104 0008 	add.w	r0, r4, #8
   1f96c:	f007 fe20 	bl	275b0 <z_impl_k_sem_init>
	parent->next = child;
   1f970:	2300      	movs	r3, #0
   1f972:	6023      	str	r3, [r4, #0]
	return list->tail;
   1f974:	4b05      	ldr	r3, [pc, #20]	; (1f98c <cancel_sync_locked+0x38>)
	canceler->work = work;
   1f976:	6065      	str	r5, [r4, #4]
   1f978:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1f97a:	b91a      	cbnz	r2, 1f984 <cancel_sync_locked+0x30>
	list->head = node;
   1f97c:	e9c3 4400 	strd	r4, r4, [r3]
}
   1f980:	4630      	mov	r0, r6
   1f982:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1f984:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1f986:	605c      	str	r4, [r3, #4]
}
   1f988:	e7fa      	b.n	1f980 <cancel_sync_locked+0x2c>
   1f98a:	bf00      	nop
   1f98c:	20003520 	.word	0x20003520

0001f990 <submit_to_queue_locked>:
{
   1f990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   1f992:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1f994:	079a      	lsls	r2, r3, #30
{
   1f996:	4604      	mov	r4, r0
   1f998:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1f99a:	f3c3 0640 	ubfx	r6, r3, #1, #1
   1f99e:	d42c      	bmi.n	1f9fa <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1f9a0:	075b      	lsls	r3, r3, #29
   1f9a2:	d41a      	bmi.n	1f9da <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   1f9a4:	680b      	ldr	r3, [r1, #0]
   1f9a6:	b90b      	cbnz	r3, 1f9ac <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1f9a8:	6883      	ldr	r3, [r0, #8]
   1f9aa:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   1f9ac:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1f9ae:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   1f9b0:	bf44      	itt	mi
   1f9b2:	68a3      	ldrmi	r3, [r4, #8]
   1f9b4:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   1f9b6:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   1f9b8:	bf4c      	ite	mi
   1f9ba:	2602      	movmi	r6, #2
		ret = 1;
   1f9bc:	2601      	movpl	r6, #1
	if (queue == NULL) {
   1f9be:	2d00      	cmp	r5, #0
   1f9c0:	d03a      	beq.n	1fa38 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1f9c2:	4b1f      	ldr	r3, [pc, #124]	; (1fa40 <submit_to_queue_locked+0xb0>)
   1f9c4:	689b      	ldr	r3, [r3, #8]
   1f9c6:	42ab      	cmp	r3, r5
   1f9c8:	d00a      	beq.n	1f9e0 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   1f9ca:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1f9ce:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1f9d0:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1f9d4:	d414      	bmi.n	1fa00 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   1f9d6:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   1f9da:	2300      	movs	r3, #0
   1f9dc:	603b      	str	r3, [r7, #0]
	return ret;
   1f9de:	e025      	b.n	1fa2c <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1f9e0:	f007 fd2c 	bl	2743c <k_is_in_isr>
   1f9e4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   1f9e8:	2800      	cmp	r0, #0
   1f9ea:	d1f0      	bne.n	1f9ce <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1f9ec:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1f9ee:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1f9f2:	d5f0      	bpl.n	1f9d6 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   1f9f4:	b152      	cbz	r2, 1fa0c <submit_to_queue_locked+0x7c>
   1f9f6:	075b      	lsls	r3, r3, #29
   1f9f8:	d408      	bmi.n	1fa0c <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   1f9fa:	f06f 060f 	mvn.w	r6, #15
   1f9fe:	e7ec      	b.n	1f9da <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   1fa00:	2a00      	cmp	r2, #0
   1fa02:	d1fa      	bne.n	1f9fa <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   1fa04:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   1fa08:	2b00      	cmp	r3, #0
   1fa0a:	d1f6      	bne.n	1f9fa <submit_to_queue_locked+0x6a>
	parent->next = child;
   1fa0c:	2300      	movs	r3, #0
   1fa0e:	6023      	str	r3, [r4, #0]
	return list->tail;
   1fa10:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   1fa14:	b963      	cbnz	r3, 1fa30 <submit_to_queue_locked+0xa0>
	list->head = node;
   1fa16:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   1fa1a:	4628      	mov	r0, r5
   1fa1c:	f007 fdf2 	bl	27604 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   1fa20:	68e3      	ldr	r3, [r4, #12]
   1fa22:	f043 0304 	orr.w	r3, r3, #4
   1fa26:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1fa28:	683b      	ldr	r3, [r7, #0]
   1fa2a:	60a3      	str	r3, [r4, #8]
}
   1fa2c:	4630      	mov	r0, r6
   1fa2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1fa30:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1fa32:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   1fa36:	e7f0      	b.n	1fa1a <submit_to_queue_locked+0x8a>
		return -EINVAL;
   1fa38:	f06f 0615 	mvn.w	r6, #21
   1fa3c:	e7cd      	b.n	1f9da <submit_to_queue_locked+0x4a>
   1fa3e:	bf00      	nop
   1fa40:	200034fc 	.word	0x200034fc

0001fa44 <k_work_submit>:
{
   1fa44:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1fa46:	4801      	ldr	r0, [pc, #4]	; (1fa4c <k_work_submit+0x8>)
   1fa48:	f007 be62 	b.w	27710 <k_work_submit_to_queue>
   1fa4c:	20002b08 	.word	0x20002b08

0001fa50 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1fa50:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fa52:	b089      	sub	sp, #36	; 0x24
   1fa54:	4604      	mov	r4, r0
	list->head = NULL;
   1fa56:	2000      	movs	r0, #0
	list->tail = NULL;
   1fa58:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   1fa5c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1fa5e:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1fa62:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   1fa66:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1fa6a:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1fa6e:	b31d      	cbz	r5, 1fab8 <k_work_queue_start+0x68>
   1fa70:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1fa72:	2800      	cmp	r0, #0
   1fa74:	f240 1001 	movw	r0, #257	; 0x101
   1fa78:	bf08      	it	eq
   1fa7a:	2001      	moveq	r0, #1
	*flagp = flags;
   1fa7c:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1fa80:	2000      	movs	r0, #0
   1fa82:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1fa86:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1fa8a:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1fa8e:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1fa92:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1fa96:	4b09      	ldr	r3, [pc, #36]	; (1fabc <k_work_queue_start+0x6c>)
   1fa98:	9400      	str	r4, [sp, #0]
   1fa9a:	4620      	mov	r0, r4
   1fa9c:	f7ff fcc8 	bl	1f430 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1faa0:	b125      	cbz	r5, 1faac <k_work_queue_start+0x5c>
   1faa2:	6829      	ldr	r1, [r5, #0]
   1faa4:	b111      	cbz	r1, 1faac <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1faa6:	4620      	mov	r0, r4
   1faa8:	f007 fcce 	bl	27448 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1faac:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1faae:	b009      	add	sp, #36	; 0x24
   1fab0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1fab4:	f007 bccd 	b.w	27452 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1fab8:	2001      	movs	r0, #1
   1faba:	e7df      	b.n	1fa7c <k_work_queue_start+0x2c>
   1fabc:	0001f81d 	.word	0x0001f81d

0001fac0 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1fac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1fac2:	9001      	str	r0, [sp, #4]
   1fac4:	4608      	mov	r0, r1
	__asm__ volatile(
   1fac6:	f04f 0140 	mov.w	r1, #64	; 0x40
   1faca:	f3ef 8411 	mrs	r4, BASEPRI
   1face:	f381 8812 	msr	BASEPRI_MAX, r1
   1fad2:	f3bf 8f6f 	isb	sy
	return *flagp;
   1fad6:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1fad8:	f011 0f0e 	tst.w	r1, #14
   1fadc:	d116      	bne.n	1fb0c <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1fade:	ea53 0502 	orrs.w	r5, r3, r2
   1fae2:	d108      	bne.n	1faf6 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   1fae4:	a901      	add	r1, sp, #4
   1fae6:	f7ff ff53 	bl	1f990 <submit_to_queue_locked>
	__asm__ volatile(
   1faea:	f384 8811 	msr	BASEPRI, r4
   1faee:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1faf2:	b003      	add	sp, #12
   1faf4:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   1faf6:	f041 0108 	orr.w	r1, r1, #8
   1fafa:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   1fafc:	9901      	ldr	r1, [sp, #4]
   1fafe:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1fb00:	3010      	adds	r0, #16
   1fb02:	4903      	ldr	r1, [pc, #12]	; (1fb10 <k_work_schedule_for_queue+0x50>)
   1fb04:	f000 fbf4 	bl	202f0 <z_add_timeout>
	return ret;
   1fb08:	2001      	movs	r0, #1
   1fb0a:	e7ee      	b.n	1faea <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   1fb0c:	2000      	movs	r0, #0
   1fb0e:	e7ec      	b.n	1faea <k_work_schedule_for_queue+0x2a>
   1fb10:	00027679 	.word	0x00027679

0001fb14 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1fb14:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1fb16:	4801      	ldr	r0, [pc, #4]	; (1fb1c <k_work_schedule+0x8>)
   1fb18:	f7ff bfd2 	b.w	1fac0 <k_work_schedule_for_queue>
   1fb1c:	20002b08 	.word	0x20002b08

0001fb20 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1fb20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1fb22:	460c      	mov	r4, r1
   1fb24:	9001      	str	r0, [sp, #4]
   1fb26:	4616      	mov	r6, r2
   1fb28:	461d      	mov	r5, r3
	__asm__ volatile(
   1fb2a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fb2e:	f3ef 8711 	mrs	r7, BASEPRI
   1fb32:	f383 8812 	msr	BASEPRI_MAX, r3
   1fb36:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1fb3a:	4608      	mov	r0, r1
   1fb3c:	f007 fd53 	bl	275e6 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1fb40:	ea55 0306 	orrs.w	r3, r5, r6
   1fb44:	d109      	bne.n	1fb5a <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1fb46:	a901      	add	r1, sp, #4
   1fb48:	4620      	mov	r0, r4
   1fb4a:	f7ff ff21 	bl	1f990 <submit_to_queue_locked>
	__asm__ volatile(
   1fb4e:	f387 8811 	msr	BASEPRI, r7
   1fb52:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1fb56:	b003      	add	sp, #12
   1fb58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1fb5a:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1fb5c:	4906      	ldr	r1, [pc, #24]	; (1fb78 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1fb5e:	f043 0308 	orr.w	r3, r3, #8
   1fb62:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1fb64:	9b01      	ldr	r3, [sp, #4]
   1fb66:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1fb68:	f104 0010 	add.w	r0, r4, #16
   1fb6c:	4632      	mov	r2, r6
   1fb6e:	462b      	mov	r3, r5
   1fb70:	f000 fbbe 	bl	202f0 <z_add_timeout>
	return ret;
   1fb74:	2001      	movs	r0, #1
   1fb76:	e7ea      	b.n	1fb4e <k_work_reschedule_for_queue+0x2e>
   1fb78:	00027679 	.word	0x00027679

0001fb7c <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1fb7c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1fb7e:	4801      	ldr	r0, [pc, #4]	; (1fb84 <k_work_reschedule+0x8>)
   1fb80:	f7ff bfce 	b.w	1fb20 <k_work_reschedule_for_queue>
   1fb84:	20002b08 	.word	0x20002b08

0001fb88 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   1fb88:	89c3      	ldrh	r3, [r0, #14]
   1fb8a:	2b7f      	cmp	r3, #127	; 0x7f
   1fb8c:	d812      	bhi.n	1fbb4 <sliceable+0x2c>
	int ret = slice_ticks;
   1fb8e:	4b0a      	ldr	r3, [pc, #40]	; (1fbb8 <sliceable+0x30>)
   1fb90:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   1fb92:	b163      	cbz	r3, 1fbae <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1fb94:	4b09      	ldr	r3, [pc, #36]	; (1fbbc <sliceable+0x34>)
   1fb96:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1fb9a:	681b      	ldr	r3, [r3, #0]
   1fb9c:	429a      	cmp	r2, r3
   1fb9e:	db09      	blt.n	1fbb4 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   1fba0:	7b43      	ldrb	r3, [r0, #13]
   1fba2:	06db      	lsls	r3, r3, #27
   1fba4:	d106      	bne.n	1fbb4 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   1fba6:	4b06      	ldr	r3, [pc, #24]	; (1fbc0 <sliceable+0x38>)
   1fba8:	1ac3      	subs	r3, r0, r3
   1fbaa:	bf18      	it	ne
   1fbac:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   1fbae:	f003 0001 	and.w	r0, r3, #1
   1fbb2:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   1fbb4:	2300      	movs	r3, #0
   1fbb6:	e7fa      	b.n	1fbae <sliceable+0x26>
   1fbb8:	20003530 	.word	0x20003530
   1fbbc:	2000352c 	.word	0x2000352c
   1fbc0:	20002a08 	.word	0x20002a08

0001fbc4 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   1fbc4:	4b04      	ldr	r3, [pc, #16]	; (1fbd8 <slice_timeout+0x14>)
   1fbc6:	1ac0      	subs	r0, r0, r3
   1fbc8:	4b04      	ldr	r3, [pc, #16]	; (1fbdc <slice_timeout+0x18>)
   1fbca:	10c0      	asrs	r0, r0, #3
   1fbcc:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
   1fbce:	4b04      	ldr	r3, [pc, #16]	; (1fbe0 <slice_timeout+0x1c>)
   1fbd0:	2201      	movs	r2, #1
   1fbd2:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   1fbd4:	4770      	bx	lr
   1fbd6:	bf00      	nop
   1fbd8:	20002ba8 	.word	0x20002ba8
   1fbdc:	aaaaaaab 	.word	0xaaaaaaab
   1fbe0:	2000461e 	.word	0x2000461e

0001fbe4 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   1fbe4:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   1fbe6:	4b0e      	ldr	r3, [pc, #56]	; (1fc20 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   1fbe8:	4c0e      	ldr	r4, [pc, #56]	; (1fc24 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   1fbea:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
   1fbec:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   1fbf0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
   1fbf4:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   1fbf6:	4620      	mov	r0, r4
   1fbf8:	f007 ff13 	bl	27a22 <z_abort_timeout>
	slice_expired[cpu] = false;
   1fbfc:	4b0a      	ldr	r3, [pc, #40]	; (1fc28 <z_reset_time_slice+0x44>)
   1fbfe:	2200      	movs	r2, #0
	if (sliceable(curr)) {
   1fc00:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   1fc02:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   1fc04:	f7ff ffc0 	bl	1fb88 <sliceable>
   1fc08:	b148      	cbz	r0, 1fc1e <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   1fc0a:	4b08      	ldr	r3, [pc, #32]	; (1fc2c <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   1fc0c:	4908      	ldr	r1, [pc, #32]	; (1fc30 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   1fc0e:	681a      	ldr	r2, [r3, #0]
   1fc10:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   1fc12:	4620      	mov	r0, r4
   1fc14:	17d3      	asrs	r3, r2, #31
	}
}
   1fc16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   1fc1a:	f000 bb69 	b.w	202f0 <z_add_timeout>
}
   1fc1e:	bd70      	pop	{r4, r5, r6, pc}
   1fc20:	200034fc 	.word	0x200034fc
   1fc24:	20002ba8 	.word	0x20002ba8
   1fc28:	2000461e 	.word	0x2000461e
   1fc2c:	20003530 	.word	0x20003530
   1fc30:	0001fbc5 	.word	0x0001fbc5

0001fc34 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   1fc34:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1fc36:	4d0d      	ldr	r5, [pc, #52]	; (1fc6c <update_cache+0x38>)
   1fc38:	462b      	mov	r3, r5
   1fc3a:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fc3e:	429c      	cmp	r4, r3
   1fc40:	d000      	beq.n	1fc44 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1fc42:	b904      	cbnz	r4, 1fc46 <update_cache+0x12>
   1fc44:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   1fc46:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   1fc48:	b938      	cbnz	r0, 1fc5a <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   1fc4a:	7b5a      	ldrb	r2, [r3, #13]
   1fc4c:	06d2      	lsls	r2, r2, #27
   1fc4e:	d104      	bne.n	1fc5a <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1fc50:	69a2      	ldr	r2, [r4, #24]
   1fc52:	b912      	cbnz	r2, 1fc5a <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   1fc54:	89da      	ldrh	r2, [r3, #14]
   1fc56:	2a7f      	cmp	r2, #127	; 0x7f
   1fc58:	d805      	bhi.n	1fc66 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   1fc5a:	429c      	cmp	r4, r3
   1fc5c:	d002      	beq.n	1fc64 <update_cache+0x30>
			z_reset_time_slice(thread);
   1fc5e:	4620      	mov	r0, r4
   1fc60:	f7ff ffc0 	bl	1fbe4 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   1fc64:	4623      	mov	r3, r4
   1fc66:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   1fc68:	bd38      	pop	{r3, r4, r5, pc}
   1fc6a:	bf00      	nop
   1fc6c:	200034fc 	.word	0x200034fc

0001fc70 <move_thread_to_end_of_prio_q>:
{
   1fc70:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1fc72:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1fc76:	7b43      	ldrb	r3, [r0, #13]
   1fc78:	2a00      	cmp	r2, #0
{
   1fc7a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1fc7c:	da04      	bge.n	1fc88 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1fc7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1fc82:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1fc84:	f007 fdae 	bl	277e4 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1fc88:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   1fc8a:	4a15      	ldr	r2, [pc, #84]	; (1fce0 <move_thread_to_end_of_prio_q+0x70>)
   1fc8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1fc90:	4610      	mov	r0, r2
   1fc92:	734b      	strb	r3, [r1, #13]
   1fc94:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1fc98:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fc9a:	4283      	cmp	r3, r0
   1fc9c:	bf08      	it	eq
   1fc9e:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fca0:	b923      	cbnz	r3, 1fcac <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   1fca2:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   1fca6:	6021      	str	r1, [r4, #0]
	list->tail = node;
   1fca8:	6211      	str	r1, [r2, #32]
}
   1fcaa:	e00c      	b.n	1fcc6 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   1fcac:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1fcb0:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   1fcb4:	42b5      	cmp	r5, r6
   1fcb6:	d00e      	beq.n	1fcd6 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1fcb8:	42ae      	cmp	r6, r5
   1fcba:	dd0c      	ble.n	1fcd6 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1fcbc:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1fcbe:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1fcc2:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1fcc4:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1fcc6:	6890      	ldr	r0, [r2, #8]
   1fcc8:	1a43      	subs	r3, r0, r1
   1fcca:	4258      	negs	r0, r3
}
   1fccc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1fcd0:	4158      	adcs	r0, r3
   1fcd2:	f7ff bfaf 	b.w	1fc34 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1fcd6:	429c      	cmp	r4, r3
   1fcd8:	d0e3      	beq.n	1fca2 <move_thread_to_end_of_prio_q+0x32>
   1fcda:	681b      	ldr	r3, [r3, #0]
   1fcdc:	e7e0      	b.n	1fca0 <move_thread_to_end_of_prio_q+0x30>
   1fcde:	bf00      	nop
   1fce0:	200034fc 	.word	0x200034fc

0001fce4 <ready_thread>:
{
   1fce4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1fce6:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1fcea:	7b42      	ldrb	r2, [r0, #13]
   1fcec:	2b00      	cmp	r3, #0
   1fcee:	db29      	blt.n	1fd44 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1fcf0:	06d3      	lsls	r3, r2, #27
   1fcf2:	d127      	bne.n	1fd44 <ready_thread+0x60>
	return node->next != NULL;
   1fcf4:	6983      	ldr	r3, [r0, #24]
   1fcf6:	bb2b      	cbnz	r3, 1fd44 <ready_thread+0x60>
	return list->head == list;
   1fcf8:	4913      	ldr	r1, [pc, #76]	; (1fd48 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1fcfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1fcfe:	7342      	strb	r2, [r0, #13]
   1fd00:	460a      	mov	r2, r1
   1fd02:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fd06:	4294      	cmp	r4, r2
   1fd08:	bf18      	it	ne
   1fd0a:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   1fd0c:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fd0e:	b923      	cbnz	r3, 1fd1a <ready_thread+0x36>
	node->prev = tail;
   1fd10:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   1fd14:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1fd16:	6208      	str	r0, [r1, #32]
}
   1fd18:	e00c      	b.n	1fd34 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   1fd1a:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1fd1e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   1fd22:	42b5      	cmp	r5, r6
   1fd24:	d00a      	beq.n	1fd3c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1fd26:	42ae      	cmp	r6, r5
   1fd28:	dd08      	ble.n	1fd3c <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   1fd2a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1fd2c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1fd30:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1fd32:	6058      	str	r0, [r3, #4]
}
   1fd34:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1fd36:	2000      	movs	r0, #0
   1fd38:	f7ff bf7c 	b.w	1fc34 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1fd3c:	42a3      	cmp	r3, r4
   1fd3e:	d0e7      	beq.n	1fd10 <ready_thread+0x2c>
   1fd40:	681b      	ldr	r3, [r3, #0]
   1fd42:	e7e4      	b.n	1fd0e <ready_thread+0x2a>
}
   1fd44:	bc70      	pop	{r4, r5, r6}
   1fd46:	4770      	bx	lr
   1fd48:	200034fc 	.word	0x200034fc

0001fd4c <unready_thread>:
{
   1fd4c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1fd4e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1fd52:	7b43      	ldrb	r3, [r0, #13]
   1fd54:	2a00      	cmp	r2, #0
{
   1fd56:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1fd58:	da04      	bge.n	1fd64 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1fd5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1fd5e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1fd60:	f007 fd40 	bl	277e4 <sys_dlist_remove>
	update_cache(thread == _current);
   1fd64:	4b04      	ldr	r3, [pc, #16]	; (1fd78 <unready_thread+0x2c>)
   1fd66:	6898      	ldr	r0, [r3, #8]
   1fd68:	1a43      	subs	r3, r0, r1
   1fd6a:	4258      	negs	r0, r3
   1fd6c:	4158      	adcs	r0, r3
}
   1fd6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1fd72:	f7ff bf5f 	b.w	1fc34 <update_cache>
   1fd76:	bf00      	nop
   1fd78:	200034fc 	.word	0x200034fc

0001fd7c <pend_locked>:
{
   1fd7c:	b570      	push	{r4, r5, r6, lr}
   1fd7e:	4615      	mov	r5, r2
   1fd80:	461c      	mov	r4, r3
   1fd82:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   1fd84:	f007 fd49 	bl	2781a <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1fd88:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   1fd8c:	bf08      	it	eq
   1fd8e:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   1fd92:	d008      	beq.n	1fda6 <pend_locked+0x2a>
   1fd94:	462a      	mov	r2, r5
   1fd96:	4623      	mov	r3, r4
   1fd98:	f106 0018 	add.w	r0, r6, #24
   1fd9c:	4902      	ldr	r1, [pc, #8]	; (1fda8 <pend_locked+0x2c>)
}
   1fd9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1fda2:	f000 baa5 	b.w	202f0 <z_add_timeout>
   1fda6:	bd70      	pop	{r4, r5, r6, pc}
   1fda8:	000278f3 	.word	0x000278f3

0001fdac <z_time_slice>:
{
   1fdac:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1fdae:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fdb2:	f3ef 8511 	mrs	r5, BASEPRI
   1fdb6:	f383 8812 	msr	BASEPRI_MAX, r3
   1fdba:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
   1fdbe:	4b10      	ldr	r3, [pc, #64]	; (1fe00 <z_time_slice+0x54>)
	if (pending_current == curr) {
   1fdc0:	4a10      	ldr	r2, [pc, #64]	; (1fe04 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
   1fdc2:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   1fdc4:	6810      	ldr	r0, [r2, #0]
   1fdc6:	42a0      	cmp	r0, r4
   1fdc8:	d106      	bne.n	1fdd8 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
   1fdca:	f7ff ff0b 	bl	1fbe4 <z_reset_time_slice>
	__asm__ volatile(
   1fdce:	f385 8811 	msr	BASEPRI, r5
   1fdd2:	f3bf 8f6f 	isb	sy
}
   1fdd6:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1fdd8:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   1fdda:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   1fddc:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   1fdde:	4a0a      	ldr	r2, [pc, #40]	; (1fe08 <z_time_slice+0x5c>)
   1fde0:	5cd3      	ldrb	r3, [r2, r3]
   1fde2:	2b00      	cmp	r3, #0
   1fde4:	d0f3      	beq.n	1fdce <z_time_slice+0x22>
   1fde6:	4620      	mov	r0, r4
   1fde8:	f7ff fece 	bl	1fb88 <sliceable>
   1fdec:	2800      	cmp	r0, #0
   1fdee:	d0ee      	beq.n	1fdce <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
   1fdf0:	7b63      	ldrb	r3, [r4, #13]
   1fdf2:	06db      	lsls	r3, r3, #27
   1fdf4:	d102      	bne.n	1fdfc <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
   1fdf6:	4620      	mov	r0, r4
   1fdf8:	f7ff ff3a 	bl	1fc70 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   1fdfc:	4620      	mov	r0, r4
   1fdfe:	e7e4      	b.n	1fdca <z_time_slice+0x1e>
   1fe00:	200034fc 	.word	0x200034fc
   1fe04:	20003528 	.word	0x20003528
   1fe08:	2000461e 	.word	0x2000461e

0001fe0c <z_pend_curr>:
{
   1fe0c:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   1fe0e:	480c      	ldr	r0, [pc, #48]	; (1fe40 <z_pend_curr+0x34>)
   1fe10:	4d0c      	ldr	r5, [pc, #48]	; (1fe44 <z_pend_curr+0x38>)
   1fe12:	6886      	ldr	r6, [r0, #8]
   1fe14:	602e      	str	r6, [r5, #0]
{
   1fe16:	460c      	mov	r4, r1
   1fe18:	4611      	mov	r1, r2
   1fe1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   1fe1e:	f04f 0640 	mov.w	r6, #64	; 0x40
   1fe22:	f3ef 8511 	mrs	r5, BASEPRI
   1fe26:	f386 8812 	msr	BASEPRI_MAX, r6
   1fe2a:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   1fe2e:	6880      	ldr	r0, [r0, #8]
   1fe30:	f7ff ffa4 	bl	1fd7c <pend_locked>
	ret = arch_swap(key);
   1fe34:	4620      	mov	r0, r4
}
   1fe36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1fe3a:	f7f3 bddb 	b.w	139f4 <arch_swap>
   1fe3e:	bf00      	nop
   1fe40:	200034fc 	.word	0x200034fc
   1fe44:	20003528 	.word	0x20003528

0001fe48 <z_set_prio>:
{
   1fe48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fe4a:	4604      	mov	r4, r0
   1fe4c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fe50:	f3ef 8611 	mrs	r6, BASEPRI
   1fe54:	f383 8812 	msr	BASEPRI_MAX, r3
   1fe58:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   1fe5c:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1fe5e:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   1fe60:	b249      	sxtb	r1, r1
   1fe62:	d119      	bne.n	1fe98 <z_set_prio+0x50>
	return node->next != NULL;
   1fe64:	6985      	ldr	r5, [r0, #24]
   1fe66:	b9bd      	cbnz	r5, 1fe98 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1fe68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1fe6c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1fe6e:	f007 fcb9 	bl	277e4 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1fe72:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   1fe74:	4a16      	ldr	r2, [pc, #88]	; (1fed0 <z_set_prio+0x88>)
				thread->base.prio = prio;
   1fe76:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1fe78:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1fe7c:	7343      	strb	r3, [r0, #13]
   1fe7e:	4613      	mov	r3, r2
   1fe80:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fe84:	4298      	cmp	r0, r3
   1fe86:	bf18      	it	ne
   1fe88:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   1fe8a:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fe8c:	b95d      	cbnz	r5, 1fea6 <z_set_prio+0x5e>
	node->prev = tail;
   1fe8e:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   1fe92:	6004      	str	r4, [r0, #0]
	list->tail = node;
   1fe94:	6214      	str	r4, [r2, #32]
}
   1fe96:	e011      	b.n	1febc <z_set_prio+0x74>
			thread->base.prio = prio;
   1fe98:	73a1      	strb	r1, [r4, #14]
   1fe9a:	2000      	movs	r0, #0
	__asm__ volatile(
   1fe9c:	f386 8811 	msr	BASEPRI, r6
   1fea0:	f3bf 8f6f 	isb	sy
}
   1fea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   1fea6:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   1feaa:	42b9      	cmp	r1, r7
   1feac:	d00b      	beq.n	1fec6 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1feae:	428f      	cmp	r7, r1
   1feb0:	dd09      	ble.n	1fec6 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   1feb2:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   1feb4:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   1feb8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1feba:	606c      	str	r4, [r5, #4]
			update_cache(1);
   1febc:	2001      	movs	r0, #1
   1febe:	f7ff feb9 	bl	1fc34 <update_cache>
   1fec2:	2001      	movs	r0, #1
   1fec4:	e7ea      	b.n	1fe9c <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   1fec6:	42a8      	cmp	r0, r5
   1fec8:	d0e1      	beq.n	1fe8e <z_set_prio+0x46>
   1feca:	682d      	ldr	r5, [r5, #0]
   1fecc:	e7de      	b.n	1fe8c <z_set_prio+0x44>
   1fece:	bf00      	nop
   1fed0:	200034fc 	.word	0x200034fc

0001fed4 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1fed4:	b949      	cbnz	r1, 1feea <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1fed6:	f3ef 8005 	mrs	r0, IPSR
   1feda:	b930      	cbnz	r0, 1feea <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1fedc:	4b05      	ldr	r3, [pc, #20]	; (1fef4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1fede:	699a      	ldr	r2, [r3, #24]
   1fee0:	689b      	ldr	r3, [r3, #8]
   1fee2:	429a      	cmp	r2, r3
   1fee4:	d001      	beq.n	1feea <z_reschedule+0x16>
   1fee6:	f7f3 bd85 	b.w	139f4 <arch_swap>
   1feea:	f381 8811 	msr	BASEPRI, r1
   1feee:	f3bf 8f6f 	isb	sy
}
   1fef2:	4770      	bx	lr
   1fef4:	200034fc 	.word	0x200034fc

0001fef8 <z_sched_start>:
{
   1fef8:	b510      	push	{r4, lr}
	__asm__ volatile(
   1fefa:	f04f 0240 	mov.w	r2, #64	; 0x40
   1fefe:	f3ef 8411 	mrs	r4, BASEPRI
   1ff02:	f382 8812 	msr	BASEPRI_MAX, r2
   1ff06:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1ff0a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   1ff0c:	0751      	lsls	r1, r2, #29
   1ff0e:	d404      	bmi.n	1ff1a <z_sched_start+0x22>
	__asm__ volatile(
   1ff10:	f384 8811 	msr	BASEPRI, r4
   1ff14:	f3bf 8f6f 	isb	sy
}
   1ff18:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1ff1a:	f022 0204 	bic.w	r2, r2, #4
   1ff1e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1ff20:	f7ff fee0 	bl	1fce4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1ff24:	4621      	mov	r1, r4
   1ff26:	4802      	ldr	r0, [pc, #8]	; (1ff30 <z_sched_start+0x38>)
}
   1ff28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1ff2c:	f7ff bfd2 	b.w	1fed4 <z_reschedule>
   1ff30:	2000461f 	.word	0x2000461f

0001ff34 <z_impl_k_thread_suspend>:
{
   1ff34:	b570      	push	{r4, r5, r6, lr}
   1ff36:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1ff38:	3018      	adds	r0, #24
   1ff3a:	f007 fd72 	bl	27a22 <z_abort_timeout>
	__asm__ volatile(
   1ff3e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ff42:	f3ef 8611 	mrs	r6, BASEPRI
   1ff46:	f383 8812 	msr	BASEPRI_MAX, r3
   1ff4a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1ff4e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   1ff52:	7b63      	ldrb	r3, [r4, #13]
   1ff54:	2a00      	cmp	r2, #0
   1ff56:	da05      	bge.n	1ff64 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ff58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ff5c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1ff5e:	4620      	mov	r0, r4
   1ff60:	f007 fc40 	bl	277e4 <sys_dlist_remove>
		update_cache(thread == _current);
   1ff64:	4d0b      	ldr	r5, [pc, #44]	; (1ff94 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1ff66:	7b63      	ldrb	r3, [r4, #13]
   1ff68:	68a8      	ldr	r0, [r5, #8]
   1ff6a:	f043 0310 	orr.w	r3, r3, #16
   1ff6e:	7363      	strb	r3, [r4, #13]
   1ff70:	1b03      	subs	r3, r0, r4
   1ff72:	4258      	negs	r0, r3
   1ff74:	4158      	adcs	r0, r3
   1ff76:	f7ff fe5d 	bl	1fc34 <update_cache>
	__asm__ volatile(
   1ff7a:	f386 8811 	msr	BASEPRI, r6
   1ff7e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1ff82:	68ab      	ldr	r3, [r5, #8]
   1ff84:	42a3      	cmp	r3, r4
   1ff86:	d103      	bne.n	1ff90 <z_impl_k_thread_suspend+0x5c>
}
   1ff88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1ff8c:	f007 bd0c 	b.w	279a8 <z_reschedule_unlocked>
}
   1ff90:	bd70      	pop	{r4, r5, r6, pc}
   1ff92:	bf00      	nop
   1ff94:	200034fc 	.word	0x200034fc

0001ff98 <k_sched_lock>:
	__asm__ volatile(
   1ff98:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ff9c:	f3ef 8111 	mrs	r1, BASEPRI
   1ffa0:	f383 8812 	msr	BASEPRI_MAX, r3
   1ffa4:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1ffa8:	4b04      	ldr	r3, [pc, #16]	; (1ffbc <k_sched_lock+0x24>)
   1ffaa:	689a      	ldr	r2, [r3, #8]
   1ffac:	7bd3      	ldrb	r3, [r2, #15]
   1ffae:	3b01      	subs	r3, #1
   1ffb0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1ffb2:	f381 8811 	msr	BASEPRI, r1
   1ffb6:	f3bf 8f6f 	isb	sy
}
   1ffba:	4770      	bx	lr
   1ffbc:	200034fc 	.word	0x200034fc

0001ffc0 <k_sched_unlock>:
{
   1ffc0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ffc2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ffc6:	f3ef 8411 	mrs	r4, BASEPRI
   1ffca:	f383 8812 	msr	BASEPRI_MAX, r3
   1ffce:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1ffd2:	4b08      	ldr	r3, [pc, #32]	; (1fff4 <k_sched_unlock+0x34>)
   1ffd4:	689a      	ldr	r2, [r3, #8]
   1ffd6:	7bd3      	ldrb	r3, [r2, #15]
   1ffd8:	3301      	adds	r3, #1
   1ffda:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1ffdc:	2000      	movs	r0, #0
   1ffde:	f7ff fe29 	bl	1fc34 <update_cache>
	__asm__ volatile(
   1ffe2:	f384 8811 	msr	BASEPRI, r4
   1ffe6:	f3bf 8f6f 	isb	sy
}
   1ffea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1ffee:	f007 bcdb 	b.w	279a8 <z_reschedule_unlocked>
   1fff2:	bf00      	nop
   1fff4:	200034fc 	.word	0x200034fc

0001fff8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1fff8:	4b02      	ldr	r3, [pc, #8]	; (20004 <z_sched_init+0xc>)
   1fffa:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
   1fffe:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   20002:	4770      	bx	lr
   20004:	200034fc 	.word	0x200034fc

00020008 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   20008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   2000a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2000e:	f3ef 8511 	mrs	r5, BASEPRI
   20012:	f383 8812 	msr	BASEPRI_MAX, r3
   20016:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   2001a:	4919      	ldr	r1, [pc, #100]	; (20080 <z_impl_k_yield+0x78>)
   2001c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2001e:	7b43      	ldrb	r3, [r0, #13]
   20020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   20024:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   20026:	f007 fbdd 	bl	277e4 <sys_dlist_remove>
	}
	queue_thread(_current);
   2002a:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   2002c:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   2002e:	4608      	mov	r0, r1
   20030:	f062 027f 	orn	r2, r2, #127	; 0x7f
   20034:	735a      	strb	r2, [r3, #13]
   20036:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
   2003a:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2003c:	4282      	cmp	r2, r0
   2003e:	bf08      	it	eq
   20040:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20042:	b922      	cbnz	r2, 2004e <z_impl_k_yield+0x46>
	node->prev = tail;
   20044:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   20048:	6023      	str	r3, [r4, #0]
	list->tail = node;
   2004a:	620b      	str	r3, [r1, #32]
}
   2004c:	e00c      	b.n	20068 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   2004e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   20052:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   20056:	42be      	cmp	r6, r7
   20058:	d00e      	beq.n	20078 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2005a:	42b7      	cmp	r7, r6
   2005c:	dd0c      	ble.n	20078 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   2005e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   20060:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   20064:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   20066:	6053      	str	r3, [r2, #4]
	update_cache(1);
   20068:	2001      	movs	r0, #1
   2006a:	f7ff fde3 	bl	1fc34 <update_cache>
   2006e:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   20070:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   20074:	f7f3 bcbe 	b.w	139f4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   20078:	42a2      	cmp	r2, r4
   2007a:	d0e3      	beq.n	20044 <z_impl_k_yield+0x3c>
   2007c:	6812      	ldr	r2, [r2, #0]
   2007e:	e7e0      	b.n	20042 <z_impl_k_yield+0x3a>
   20080:	200034fc 	.word	0x200034fc

00020084 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   20084:	ea50 0301 	orrs.w	r3, r0, r1
{
   20088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2008c:	4605      	mov	r5, r0
   2008e:	460e      	mov	r6, r1
	if (ticks == 0) {
   20090:	d103      	bne.n	2009a <z_tick_sleep+0x16>
	z_impl_k_yield();
   20092:	f7ff ffb9 	bl	20008 <z_impl_k_yield>
		k_yield();
		return 0;
   20096:	2000      	movs	r0, #0
   20098:	e02c      	b.n	200f4 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   2009a:	1c83      	adds	r3, r0, #2
   2009c:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   200a0:	db2a      	blt.n	200f8 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   200a2:	f007 fce4 	bl	27a6e <sys_clock_tick_get_32>
   200a6:	182c      	adds	r4, r5, r0
   200a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   200ac:	f3ef 8811 	mrs	r8, BASEPRI
   200b0:	f383 8812 	msr	BASEPRI_MAX, r3
   200b4:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   200b8:	4f11      	ldr	r7, [pc, #68]	; (20100 <z_tick_sleep+0x7c>)
   200ba:	4b12      	ldr	r3, [pc, #72]	; (20104 <z_tick_sleep+0x80>)
   200bc:	68b8      	ldr	r0, [r7, #8]
   200be:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   200c0:	f7ff fe44 	bl	1fd4c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   200c4:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   200c6:	4910      	ldr	r1, [pc, #64]	; (20108 <z_tick_sleep+0x84>)
   200c8:	462a      	mov	r2, r5
   200ca:	4633      	mov	r3, r6
   200cc:	3018      	adds	r0, #24
   200ce:	f000 f90f 	bl	202f0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   200d2:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   200d4:	7b53      	ldrb	r3, [r2, #13]
   200d6:	f043 0310 	orr.w	r3, r3, #16
   200da:	7353      	strb	r3, [r2, #13]
   200dc:	4640      	mov	r0, r8
   200de:	f7f3 fc89 	bl	139f4 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   200e2:	f007 fcc4 	bl	27a6e <sys_clock_tick_get_32>
   200e6:	1a20      	subs	r0, r4, r0
   200e8:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   200ec:	2801      	cmp	r0, #1
   200ee:	f173 0300 	sbcs.w	r3, r3, #0
   200f2:	dbd0      	blt.n	20096 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   200f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   200f8:	f06f 0401 	mvn.w	r4, #1
   200fc:	1a24      	subs	r4, r4, r0
   200fe:	e7d3      	b.n	200a8 <z_tick_sleep+0x24>
   20100:	200034fc 	.word	0x200034fc
   20104:	20003528 	.word	0x20003528
   20108:	000278f3 	.word	0x000278f3

0002010c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2010c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   20110:	bf08      	it	eq
   20112:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   20116:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20118:	d106      	bne.n	20128 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   2011a:	4b08      	ldr	r3, [pc, #32]	; (2013c <z_impl_k_sleep+0x30>)
   2011c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   2011e:	f7ff ff09 	bl	1ff34 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   20122:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   20126:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   20128:	f7ff ffac 	bl	20084 <z_tick_sleep>
   2012c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   20130:	fb80 0303 	smull	r0, r3, r0, r3
   20134:	0bc0      	lsrs	r0, r0, #15
   20136:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   2013a:	e7f4      	b.n	20126 <z_impl_k_sleep+0x1a>
   2013c:	200034fc 	.word	0x200034fc

00020140 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   20140:	4b01      	ldr	r3, [pc, #4]	; (20148 <z_impl_z_current_get+0x8>)
   20142:	6898      	ldr	r0, [r3, #8]
   20144:	4770      	bx	lr
   20146:	bf00      	nop
   20148:	200034fc 	.word	0x200034fc

0002014c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   2014c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20150:	4604      	mov	r4, r0
   20152:	f04f 0340 	mov.w	r3, #64	; 0x40
   20156:	f3ef 8611 	mrs	r6, BASEPRI
   2015a:	f383 8812 	msr	BASEPRI_MAX, r3
   2015e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   20162:	7b03      	ldrb	r3, [r0, #12]
   20164:	07d9      	lsls	r1, r3, #31
   20166:	d50b      	bpl.n	20180 <z_thread_abort+0x34>
	__asm__ volatile(
   20168:	f386 8811 	msr	BASEPRI, r6
   2016c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   20170:	4040      	eors	r0, r0
   20172:	f380 8811 	msr	BASEPRI, r0
   20176:	f04f 0004 	mov.w	r0, #4
   2017a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   2017c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   20180:	7b43      	ldrb	r3, [r0, #13]
   20182:	071a      	lsls	r2, r3, #28
   20184:	d504      	bpl.n	20190 <z_thread_abort+0x44>
   20186:	f386 8811 	msr	BASEPRI, r6
   2018a:	f3bf 8f6f 	isb	sy
   2018e:	e7f5      	b.n	2017c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   20190:	f023 0220 	bic.w	r2, r3, #32
   20194:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   20198:	09d2      	lsrs	r2, r2, #7
   2019a:	d120      	bne.n	201de <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2019c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   2019e:	68a3      	ldr	r3, [r4, #8]
   201a0:	b113      	cbz	r3, 201a8 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   201a2:	4620      	mov	r0, r4
   201a4:	f007 fb26 	bl	277f4 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   201a8:	f104 0018 	add.w	r0, r4, #24
   201ac:	f007 fc39 	bl	27a22 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   201b0:	f104 0758 	add.w	r7, r4, #88	; 0x58
   201b4:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   201b8:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   201ba:	42bd      	cmp	r5, r7
   201bc:	d000      	beq.n	201c0 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   201be:	b9b5      	cbnz	r5, 201ee <z_thread_abort+0xa2>
		update_cache(1);
   201c0:	2001      	movs	r0, #1
   201c2:	f7ff fd37 	bl	1fc34 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   201c6:	4b10      	ldr	r3, [pc, #64]	; (20208 <z_thread_abort+0xbc>)
   201c8:	689b      	ldr	r3, [r3, #8]
   201ca:	42a3      	cmp	r3, r4
   201cc:	d1db      	bne.n	20186 <z_thread_abort+0x3a>
   201ce:	f3ef 8305 	mrs	r3, IPSR
   201d2:	2b00      	cmp	r3, #0
   201d4:	d1d7      	bne.n	20186 <z_thread_abort+0x3a>
   201d6:	4630      	mov	r0, r6
   201d8:	f7f3 fc0c 	bl	139f4 <arch_swap>
	return ret;
   201dc:	e7d3      	b.n	20186 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   201de:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   201e2:	f043 0308 	orr.w	r3, r3, #8
   201e6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   201e8:	f007 fafc 	bl	277e4 <sys_dlist_remove>
}
   201ec:	e7d7      	b.n	2019e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   201ee:	4628      	mov	r0, r5
   201f0:	f007 fb00 	bl	277f4 <unpend_thread_no_timeout>
   201f4:	f105 0018 	add.w	r0, r5, #24
   201f8:	f007 fc13 	bl	27a22 <z_abort_timeout>
   201fc:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   20200:	4628      	mov	r0, r5
   20202:	f7ff fd6f 	bl	1fce4 <ready_thread>
   20206:	e7d7      	b.n	201b8 <z_thread_abort+0x6c>
   20208:	200034fc 	.word	0x200034fc

0002020c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   2020c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2020e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   20212:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   20214:	e9cd 6700 	strd	r6, r7, [sp]
   20218:	f7ff fdf8 	bl	1fe0c <z_pend_curr>

	if (data != NULL) {
   2021c:	b11c      	cbz	r4, 20226 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   2021e:	4b03      	ldr	r3, [pc, #12]	; (2022c <z_sched_wait+0x20>)
   20220:	689b      	ldr	r3, [r3, #8]
   20222:	695b      	ldr	r3, [r3, #20]
   20224:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   20226:	b002      	add	sp, #8
   20228:	bdd0      	pop	{r4, r6, r7, pc}
   2022a:	bf00      	nop
   2022c:	200034fc 	.word	0x200034fc

00020230 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   20230:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   20232:	4806      	ldr	r0, [pc, #24]	; (2024c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   20234:	4a06      	ldr	r2, [pc, #24]	; (20250 <z_data_copy+0x20>)
   20236:	4907      	ldr	r1, [pc, #28]	; (20254 <z_data_copy+0x24>)
   20238:	1a12      	subs	r2, r2, r0
   2023a:	f007 f83e 	bl	272ba <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2023e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   20242:	4a05      	ldr	r2, [pc, #20]	; (20258 <z_data_copy+0x28>)
   20244:	4905      	ldr	r1, [pc, #20]	; (2025c <z_data_copy+0x2c>)
   20246:	4806      	ldr	r0, [pc, #24]	; (20260 <z_data_copy+0x30>)
   20248:	f007 b837 	b.w	272ba <z_early_memcpy>
   2024c:	20000000 	.word	0x20000000
   20250:	20000ae8 	.word	0x20000ae8
   20254:	0002b2cc 	.word	0x0002b2cc
   20258:	00000000 	.word	0x00000000
   2025c:	0002b2cc 	.word	0x0002b2cc
   20260:	20000000 	.word	0x20000000

00020264 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   20264:	4b03      	ldr	r3, [pc, #12]	; (20274 <elapsed+0x10>)
   20266:	681b      	ldr	r3, [r3, #0]
   20268:	b90b      	cbnz	r3, 2026e <elapsed+0xa>
   2026a:	f7fc be75 	b.w	1cf58 <sys_clock_elapsed>
}
   2026e:	2000      	movs	r0, #0
   20270:	4770      	bx	lr
   20272:	bf00      	nop
   20274:	20003534 	.word	0x20003534

00020278 <next_timeout>:

static int32_t next_timeout(void)
{
   20278:	b510      	push	{r4, lr}
	return list->head == list;
   2027a:	4b0e      	ldr	r3, [pc, #56]	; (202b4 <next_timeout+0x3c>)
   2027c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2027e:	429c      	cmp	r4, r3
   20280:	d104      	bne.n	2028c <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   20282:	f7ff ffef 	bl	20264 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   20286:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   2028a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   2028c:	f7ff ffea 	bl	20264 <elapsed>
	if ((to == NULL) ||
   20290:	2c00      	cmp	r4, #0
   20292:	d0f8      	beq.n	20286 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   20294:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   20298:	1a1b      	subs	r3, r3, r0
   2029a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   2029e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   202a2:	f172 0100 	sbcs.w	r1, r2, #0
   202a6:	daee      	bge.n	20286 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   202a8:	2a00      	cmp	r2, #0
   202aa:	bfac      	ite	ge
   202ac:	4618      	movge	r0, r3
   202ae:	2000      	movlt	r0, #0
	return ret;
   202b0:	e7eb      	b.n	2028a <next_timeout+0x12>
   202b2:	bf00      	nop
   202b4:	2000070c 	.word	0x2000070c

000202b8 <remove_timeout>:
{
   202b8:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   202ba:	b170      	cbz	r0, 202da <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   202bc:	4b0b      	ldr	r3, [pc, #44]	; (202ec <remove_timeout+0x34>)
   202be:	685b      	ldr	r3, [r3, #4]
   202c0:	4298      	cmp	r0, r3
   202c2:	d00a      	beq.n	202da <remove_timeout+0x22>
   202c4:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   202c6:	b143      	cbz	r3, 202da <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   202c8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   202cc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   202d0:	1912      	adds	r2, r2, r4
   202d2:	eb41 0105 	adc.w	r1, r1, r5
   202d6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   202da:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   202de:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   202e0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   202e2:	2300      	movs	r3, #0
	node->prev = NULL;
   202e4:	e9c0 3300 	strd	r3, r3, [r0]
}
   202e8:	bd30      	pop	{r4, r5, pc}
   202ea:	bf00      	nop
   202ec:	2000070c 	.word	0x2000070c

000202f0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   202f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   202f4:	bf08      	it	eq
   202f6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   202fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   202fc:	4604      	mov	r4, r0
   202fe:	461d      	mov	r5, r3
   20300:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20302:	d05c      	beq.n	203be <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   20304:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   20306:	f04f 0340 	mov.w	r3, #64	; 0x40
   2030a:	f3ef 8711 	mrs	r7, BASEPRI
   2030e:	f383 8812 	msr	BASEPRI_MAX, r3
   20312:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   20316:	3201      	adds	r2, #1
   20318:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
   2031c:	da24      	bge.n	20368 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   2031e:	492d      	ldr	r1, [pc, #180]	; (203d4 <z_add_timeout+0xe4>)
   20320:	e9d1 2000 	ldrd	r2, r0, [r1]
   20324:	f06f 0301 	mvn.w	r3, #1
   20328:	1a9b      	subs	r3, r3, r2
   2032a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2032e:	eb62 0000 	sbc.w	r0, r2, r0
   20332:	1b9e      	subs	r6, r3, r6
   20334:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   20338:	2e01      	cmp	r6, #1
   2033a:	f170 0300 	sbcs.w	r3, r0, #0
   2033e:	da01      	bge.n	20344 <z_add_timeout+0x54>
   20340:	2601      	movs	r6, #1
   20342:	2000      	movs	r0, #0
   20344:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   20348:	4e23      	ldr	r6, [pc, #140]	; (203d8 <z_add_timeout+0xe8>)
   2034a:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   2034e:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20350:	45b4      	cmp	ip, r6
   20352:	bf08      	it	eq
   20354:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   20358:	f1bc 0f00 	cmp.w	ip, #0
   2035c:	d10d      	bne.n	2037a <z_add_timeout+0x8a>
	node->prev = tail;
   2035e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   20362:	602c      	str	r4, [r5, #0]
	list->tail = node;
   20364:	6074      	str	r4, [r6, #4]
}
   20366:	e01c      	b.n	203a2 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   20368:	f7ff ff7c 	bl	20264 <elapsed>
   2036c:	3601      	adds	r6, #1
   2036e:	f145 0500 	adc.w	r5, r5, #0
   20372:	1836      	adds	r6, r6, r0
   20374:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   20378:	e7e4      	b.n	20344 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   2037a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   2037e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   20382:	4293      	cmp	r3, r2
   20384:	eb71 0e00 	sbcs.w	lr, r1, r0
   20388:	da1a      	bge.n	203c0 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
   2038a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   2038c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   20390:	eb60 0001 	sbc.w	r0, r0, r1
   20394:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   20398:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   2039c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2039e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   203a2:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   203a4:	42b3      	cmp	r3, r6
   203a6:	d006      	beq.n	203b6 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   203a8:	429c      	cmp	r4, r3
   203aa:	d104      	bne.n	203b6 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
   203ac:	f7ff ff64 	bl	20278 <next_timeout>
   203b0:	2100      	movs	r1, #0
   203b2:	f7fc fd9f 	bl	1cef4 <sys_clock_set_timeout>
	__asm__ volatile(
   203b6:	f387 8811 	msr	BASEPRI, r7
   203ba:	f3bf 8f6f 	isb	sy
		}
	}
}
   203be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   203c0:	1a9b      	subs	r3, r3, r2
   203c2:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   203c6:	45ac      	cmp	ip, r5
   203c8:	e9c4 3104 	strd	r3, r1, [r4, #16]
   203cc:	d0c7      	beq.n	2035e <z_add_timeout+0x6e>
   203ce:	f8dc c000 	ldr.w	ip, [ip]
   203d2:	e7c1      	b.n	20358 <z_add_timeout+0x68>
   203d4:	20002bc0 	.word	0x20002bc0
   203d8:	2000070c 	.word	0x2000070c

000203dc <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   203dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
   203e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   203e4:	f3ef 8c11 	mrs	ip, BASEPRI
   203e8:	f383 8812 	msr	BASEPRI_MAX, r3
   203ec:	f3bf 8f6f 	isb	sy
	return list->head == list;
   203f0:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 204a4 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   203f4:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 204a8 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
   203f8:	4f2c      	ldr	r7, [pc, #176]	; (204ac <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
   203fa:	f8c9 0000 	str.w	r0, [r9]
   203fe:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
   20402:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20404:	4550      	cmp	r0, sl
   20406:	bf08      	it	eq
   20408:	2000      	moveq	r0, #0
   2040a:	2500      	movs	r5, #0
		curr_tick += dt;
   2040c:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
   20410:	f8d9 3000 	ldr.w	r3, [r9]
   20414:	46e0      	mov	r8, ip
   20416:	b380      	cbz	r0, 2047a <sys_clock_announce+0x9e>
   20418:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
   2041c:	ea4f 7ee3 	mov.w	lr, r3, asr #31
   20420:	42b3      	cmp	r3, r6
   20422:	eb7e 0b0c 	sbcs.w	fp, lr, ip
   20426:	da05      	bge.n	20434 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   20428:	1af6      	subs	r6, r6, r3
   2042a:	eb6c 040e 	sbc.w	r4, ip, lr
   2042e:	e9c0 6404 	strd	r6, r4, [r0, #16]
   20432:	e022      	b.n	2047a <sys_clock_announce+0x9e>
		curr_tick += dt;
   20434:	18b2      	adds	r2, r6, r2
   20436:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
   2043a:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
   2043e:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
   20442:	f7ff ff39 	bl	202b8 <remove_timeout>
	__asm__ volatile(
   20446:	f388 8811 	msr	BASEPRI, r8
   2044a:	f3bf 8f6f 	isb	sy
		t->fn(t);
   2044e:	6883      	ldr	r3, [r0, #8]
   20450:	4798      	blx	r3
	__asm__ volatile(
   20452:	f04f 0340 	mov.w	r3, #64	; 0x40
   20456:	f3ef 8811 	mrs	r8, BASEPRI
   2045a:	f383 8812 	msr	BASEPRI_MAX, r3
   2045e:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   20462:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
   20466:	f8da 0000 	ldr.w	r0, [sl]
   2046a:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2046c:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
   2046e:	46c4      	mov	ip, r8
   20470:	f8c9 3000 	str.w	r3, [r9]
   20474:	d1ca      	bne.n	2040c <sys_clock_announce+0x30>
		curr_tick += dt;
   20476:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
   2047a:	189a      	adds	r2, r3, r2
   2047c:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
   20480:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   20482:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
   20486:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
   2048a:	f7ff fef5 	bl	20278 <next_timeout>
   2048e:	4621      	mov	r1, r4
   20490:	f7fc fd30 	bl	1cef4 <sys_clock_set_timeout>
	__asm__ volatile(
   20494:	f388 8811 	msr	BASEPRI, r8
   20498:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   2049c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   204a0:	f7ff bc84 	b.w	1fdac <z_time_slice>
   204a4:	2000070c 	.word	0x2000070c
   204a8:	20003534 	.word	0x20003534
   204ac:	20002bc0 	.word	0x20002bc0

000204b0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   204b0:	b510      	push	{r4, lr}
	__asm__ volatile(
   204b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   204b6:	f3ef 8411 	mrs	r4, BASEPRI
   204ba:	f383 8812 	msr	BASEPRI_MAX, r3
   204be:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   204c2:	f7ff fecf 	bl	20264 <elapsed>
   204c6:	4a06      	ldr	r2, [pc, #24]	; (204e0 <sys_clock_tick_get+0x30>)
   204c8:	4603      	mov	r3, r0
   204ca:	e9d2 0100 	ldrd	r0, r1, [r2]
   204ce:	1818      	adds	r0, r3, r0
   204d0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   204d4:	f384 8811 	msr	BASEPRI, r4
   204d8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   204dc:	bd10      	pop	{r4, pc}
   204de:	bf00      	nop
   204e0:	20002bc0 	.word	0x20002bc0

000204e4 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   204e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   204e6:	4604      	mov	r4, r0
	__asm__ volatile(
   204e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   204ec:	f3ef 8711 	mrs	r7, BASEPRI
   204f0:	f383 8812 	msr	BASEPRI_MAX, r3
   204f4:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
   204f8:	6802      	ldr	r2, [r0, #0]
   204fa:	b122      	cbz	r2, 20506 <z_timer_expiration_handler+0x22>
	__asm__ volatile(
   204fc:	f387 8811 	msr	BASEPRI, r7
   20500:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   20504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   20506:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
   2050a:	1c58      	adds	r0, r3, #1
   2050c:	f146 0100 	adc.w	r1, r6, #0
   20510:	2802      	cmp	r0, #2
   20512:	f171 0100 	sbcs.w	r1, r1, #0
   20516:	d327      	bcc.n	20568 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
   20518:	2b01      	cmp	r3, #1
   2051a:	f176 0100 	sbcs.w	r1, r6, #0
   2051e:	bfbc      	itt	lt
   20520:	2301      	movlt	r3, #1
   20522:	4616      	movlt	r6, r2
   20524:	1e5d      	subs	r5, r3, #1
   20526:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
	return z_impl_k_uptime_ticks();
   2052a:	f007 faa4 	bl	27a76 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   2052e:	3001      	adds	r0, #1
   20530:	f141 0100 	adc.w	r1, r1, #0
   20534:	1940      	adds	r0, r0, r5
   20536:	eb46 0101 	adc.w	r1, r6, r1
   2053a:	2801      	cmp	r0, #1
   2053c:	f171 0100 	sbcs.w	r1, r1, #0
   20540:	db3a      	blt.n	205b8 <z_timer_expiration_handler+0xd4>
   20542:	f007 fa98 	bl	27a76 <z_impl_k_uptime_ticks>
   20546:	3001      	adds	r0, #1
   20548:	f141 0100 	adc.w	r1, r1, #0
   2054c:	f06f 0201 	mvn.w	r2, #1
   20550:	1940      	adds	r0, r0, r5
   20552:	eb46 0301 	adc.w	r3, r6, r1
   20556:	1a12      	subs	r2, r2, r0
   20558:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2055c:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   20560:	4918      	ldr	r1, [pc, #96]	; (205c4 <z_timer_expiration_handler+0xe0>)
   20562:	4620      	mov	r0, r4
   20564:	f7ff fec4 	bl	202f0 <z_add_timeout>
	timer->status += 1U;
   20568:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2056a:	3301      	adds	r3, #1
   2056c:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
   2056e:	6a23      	ldr	r3, [r4, #32]
   20570:	b173      	cbz	r3, 20590 <z_timer_expiration_handler+0xac>
   20572:	f387 8811 	msr	BASEPRI, r7
   20576:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
   2057a:	6a23      	ldr	r3, [r4, #32]
   2057c:	4620      	mov	r0, r4
   2057e:	4798      	blx	r3
	__asm__ volatile(
   20580:	f04f 0340 	mov.w	r3, #64	; 0x40
   20584:	f3ef 8711 	mrs	r7, BASEPRI
   20588:	f383 8812 	msr	BASEPRI_MAX, r3
   2058c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   20590:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20594:	42a5      	cmp	r5, r4
   20596:	d0b1      	beq.n	204fc <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
   20598:	2d00      	cmp	r5, #0
   2059a:	d0af      	beq.n	204fc <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
   2059c:	4628      	mov	r0, r5
   2059e:	f007 f974 	bl	2788a <z_unpend_thread_no_timeout>
   205a2:	2300      	movs	r3, #0
   205a4:	67eb      	str	r3, [r5, #124]	; 0x7c
	__asm__ volatile(
   205a6:	f387 8811 	msr	BASEPRI, r7
   205aa:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   205ae:	4628      	mov	r0, r5
}
   205b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   205b4:	f007 b959 	b.w	2786a <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   205b8:	f06f 0201 	mvn.w	r2, #1
   205bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   205c0:	e7ce      	b.n	20560 <z_timer_expiration_handler+0x7c>
   205c2:	bf00      	nop
   205c4:	000204e5 	.word	0x000204e5

000205c8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   205c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   205cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   205d0:	bf08      	it	eq
   205d2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   205d6:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   205da:	4605      	mov	r5, r0
   205dc:	461c      	mov	r4, r3
   205de:	4691      	mov	r9, r2
   205e0:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   205e2:	d01c      	beq.n	2061e <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
   205e4:	1c53      	adds	r3, r2, #1
   205e6:	f174 33ff 	sbcs.w	r3, r4, #4294967295	; 0xffffffff
   205ea:	db09      	blt.n	20600 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
   205ec:	2a01      	cmp	r2, #1
   205ee:	f174 0300 	sbcs.w	r3, r4, #0
   205f2:	bfbc      	itt	lt
   205f4:	2201      	movlt	r2, #1
   205f6:	2400      	movlt	r4, #0
   205f8:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
   205fc:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   20600:	4628      	mov	r0, r5
   20602:	f007 fa0e 	bl	27a22 <z_abort_timeout>
	timer->period = period;
   20606:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
   2060a:	2300      	movs	r3, #0
   2060c:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2060e:	464a      	mov	r2, r9
   20610:	4643      	mov	r3, r8
   20612:	4628      	mov	r0, r5
   20614:	4903      	ldr	r1, [pc, #12]	; (20624 <z_impl_k_timer_start+0x5c>)
		     duration);
}
   20616:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2061a:	f7ff be69 	b.w	202f0 <z_add_timeout>
}
   2061e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20622:	bf00      	nop
   20624:	000204e5 	.word	0x000204e5

00020628 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   20628:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2062c:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   2062e:	4b29      	ldr	r3, [pc, #164]	; (206d4 <z_impl_k_poll+0xac>)
   20630:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   20632:	2301      	movs	r3, #1
   20634:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   20638:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   2063c:	ea52 0305 	orrs.w	r3, r2, r5
{
   20640:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   20642:	bf0c      	ite	eq
   20644:	2301      	moveq	r3, #1
   20646:	2300      	movne	r3, #0
   20648:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   2064c:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   2064e:	f007 fa94 	bl	27b7a <register_events>
   20652:	4681      	mov	r9, r0
	__asm__ volatile(
   20654:	f04f 0340 	mov.w	r3, #64	; 0x40
   20658:	f3ef 8a11 	mrs	sl, BASEPRI
   2065c:	f383 8812 	msr	BASEPRI_MAX, r3
   20660:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   20664:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   20668:	b964      	cbnz	r4, 20684 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   2066a:	4601      	mov	r1, r0
   2066c:	4652      	mov	r2, sl
   2066e:	4640      	mov	r0, r8
   20670:	f007 fb54 	bl	27d1c <clear_event_registrations>
	__asm__ volatile(
   20674:	f38a 8811 	msr	BASEPRI, sl
   20678:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   2067c:	4620      	mov	r0, r4
   2067e:	b002      	add	sp, #8
   20680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   20684:	2300      	movs	r3, #0
   20686:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2068a:	ea56 0305 	orrs.w	r3, r6, r5
   2068e:	d106      	bne.n	2069e <z_impl_k_poll+0x76>
   20690:	f38a 8811 	msr	BASEPRI, sl
   20694:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   20698:	f06f 040a 	mvn.w	r4, #10
   2069c:	e7ee      	b.n	2067c <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2069e:	e9cd 6500 	strd	r6, r5, [sp]
   206a2:	4a0d      	ldr	r2, [pc, #52]	; (206d8 <z_impl_k_poll+0xb0>)
   206a4:	480d      	ldr	r0, [pc, #52]	; (206dc <z_impl_k_poll+0xb4>)
   206a6:	4651      	mov	r1, sl
   206a8:	f7ff fbb0 	bl	1fe0c <z_pend_curr>
   206ac:	4604      	mov	r4, r0
	__asm__ volatile(
   206ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   206b2:	f3ef 8511 	mrs	r5, BASEPRI
   206b6:	f383 8812 	msr	BASEPRI_MAX, r3
   206ba:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   206be:	462a      	mov	r2, r5
   206c0:	4649      	mov	r1, r9
   206c2:	4640      	mov	r0, r8
   206c4:	f007 fb2a 	bl	27d1c <clear_event_registrations>
	__asm__ volatile(
   206c8:	f385 8811 	msr	BASEPRI, r5
   206cc:	f3bf 8f6f 	isb	sy
	return swap_rc;
   206d0:	e7d4      	b.n	2067c <z_impl_k_poll+0x54>
   206d2:	bf00      	nop
   206d4:	200034fc 	.word	0x200034fc
   206d8:	20000714 	.word	0x20000714
   206dc:	2000461f 	.word	0x2000461f

000206e0 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   206e0:	b538      	push	{r3, r4, r5, lr}
   206e2:	4603      	mov	r3, r0
	__asm__ volatile(
   206e4:	f04f 0240 	mov.w	r2, #64	; 0x40
   206e8:	f3ef 8511 	mrs	r5, BASEPRI
   206ec:	f382 8812 	msr	BASEPRI_MAX, r2
   206f0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   206f4:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   206f6:	2101      	movs	r1, #1
   206f8:	6081      	str	r1, [r0, #8]
	return list->head == list;
   206fa:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   206fc:	4283      	cmp	r3, r0
   206fe:	d106      	bne.n	2070e <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   20700:	f385 8811 	msr	BASEPRI, r5
   20704:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   20708:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   2070a:	4620      	mov	r0, r4
   2070c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   2070e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   20712:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   20714:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20716:	2300      	movs	r3, #0
	node->prev = NULL;
   20718:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2071c:	f007 faa4 	bl	27c68 <signal_poll_event>
	z_reschedule(&lock, key);
   20720:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   20722:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   20724:	4801      	ldr	r0, [pc, #4]	; (2072c <z_impl_k_poll_signal_raise+0x4c>)
   20726:	f7ff fbd5 	bl	1fed4 <z_reschedule>
	return rc;
   2072a:	e7ee      	b.n	2070a <z_impl_k_poll_signal_raise+0x2a>
   2072c:	2000461f 	.word	0x2000461f

00020730 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   20730:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20732:	4606      	mov	r6, r0
   20734:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   20736:	f006 fe81 	bl	2743c <k_is_in_isr>
   2073a:	b978      	cbnz	r0, 2075c <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   2073c:	4b0b      	ldr	r3, [pc, #44]	; (2076c <z_thread_aligned_alloc+0x3c>)
   2073e:	689b      	ldr	r3, [r3, #8]
   20740:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   20742:	b17c      	cbz	r4, 20764 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   20744:	1d2a      	adds	r2, r5, #4
   20746:	d209      	bcs.n	2075c <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   20748:	2000      	movs	r0, #0
   2074a:	2100      	movs	r1, #0
   2074c:	e9cd 0100 	strd	r0, r1, [sp]
   20750:	f046 0104 	orr.w	r1, r6, #4
   20754:	4620      	mov	r0, r4
   20756:	f006 fdba 	bl	272ce <k_heap_aligned_alloc>
	if (mem == NULL) {
   2075a:	b908      	cbnz	r0, 20760 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   2075c:	2400      	movs	r4, #0
	}

	return ret;
   2075e:	e001      	b.n	20764 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   20760:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   20762:	1d04      	adds	r4, r0, #4
}
   20764:	4620      	mov	r0, r4
   20766:	b002      	add	sp, #8
   20768:	bd70      	pop	{r4, r5, r6, pc}
   2076a:	bf00      	nop
   2076c:	200034fc 	.word	0x200034fc

00020770 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   20770:	4801      	ldr	r0, [pc, #4]	; (20778 <boot_banner+0x8>)
   20772:	f003 b82d 	b.w	237d0 <printk>
   20776:	bf00      	nop
   20778:	0002b29e 	.word	0x0002b29e

0002077c <ocrypto_ecdh_p256_public_key>:
   2077c:	b530      	push	{r4, r5, lr}
   2077e:	b099      	sub	sp, #100	; 0x64
   20780:	4605      	mov	r5, r0
   20782:	4668      	mov	r0, sp
   20784:	f000 f828 	bl	207d8 <ocrypto_sc_p256_from32bytes>
   20788:	4669      	mov	r1, sp
   2078a:	4604      	mov	r4, r0
   2078c:	a808      	add	r0, sp, #32
   2078e:	f000 fa53 	bl	20c38 <ocrypto_curve_p256_scalarmult_base>
   20792:	a908      	add	r1, sp, #32
   20794:	4304      	orrs	r4, r0
   20796:	4628      	mov	r0, r5
   20798:	f000 f98a 	bl	20ab0 <ocrypto_curve_p256_to64bytes>
   2079c:	4620      	mov	r0, r4
   2079e:	b019      	add	sp, #100	; 0x64
   207a0:	bd30      	pop	{r4, r5, pc}
   207a2:	bf00      	nop

000207a4 <ocrypto_ecdh_p256_common_secret>:
   207a4:	b570      	push	{r4, r5, r6, lr}
   207a6:	b098      	sub	sp, #96	; 0x60
   207a8:	4605      	mov	r5, r0
   207aa:	4668      	mov	r0, sp
   207ac:	4616      	mov	r6, r2
   207ae:	f000 f813 	bl	207d8 <ocrypto_sc_p256_from32bytes>
   207b2:	4631      	mov	r1, r6
   207b4:	4604      	mov	r4, r0
   207b6:	a808      	add	r0, sp, #32
   207b8:	f000 f946 	bl	20a48 <ocrypto_curve_p256_from64bytes>
   207bc:	a908      	add	r1, sp, #32
   207be:	466a      	mov	r2, sp
   207c0:	4304      	orrs	r4, r0
   207c2:	4608      	mov	r0, r1
   207c4:	f000 f982 	bl	20acc <ocrypto_curve_p256_scalarmult>
   207c8:	a908      	add	r1, sp, #32
   207ca:	4304      	orrs	r4, r0
   207cc:	4628      	mov	r0, r5
   207ce:	f000 f96d 	bl	20aac <ocrypto_curve_p256_to32bytes>
   207d2:	4620      	mov	r0, r4
   207d4:	b018      	add	sp, #96	; 0x60
   207d6:	bd70      	pop	{r4, r5, r6, pc}

000207d8 <ocrypto_sc_p256_from32bytes>:
   207d8:	b570      	push	{r4, r5, r6, lr}
   207da:	680b      	ldr	r3, [r1, #0]
   207dc:	4e12      	ldr	r6, [pc, #72]	; (20828 <ocrypto_sc_p256_from32bytes+0x50>)
   207de:	ba1b      	rev	r3, r3
   207e0:	61c3      	str	r3, [r0, #28]
   207e2:	684b      	ldr	r3, [r1, #4]
   207e4:	ba1b      	rev	r3, r3
   207e6:	6183      	str	r3, [r0, #24]
   207e8:	688b      	ldr	r3, [r1, #8]
   207ea:	ba1b      	rev	r3, r3
   207ec:	6143      	str	r3, [r0, #20]
   207ee:	68cb      	ldr	r3, [r1, #12]
   207f0:	ba1b      	rev	r3, r3
   207f2:	6103      	str	r3, [r0, #16]
   207f4:	690b      	ldr	r3, [r1, #16]
   207f6:	ba1b      	rev	r3, r3
   207f8:	60c3      	str	r3, [r0, #12]
   207fa:	694b      	ldr	r3, [r1, #20]
   207fc:	ba1b      	rev	r3, r3
   207fe:	6083      	str	r3, [r0, #8]
   20800:	698b      	ldr	r3, [r1, #24]
   20802:	ba1b      	rev	r3, r3
   20804:	6043      	str	r3, [r0, #4]
   20806:	69cb      	ldr	r3, [r1, #28]
   20808:	ba1b      	rev	r3, r3
   2080a:	4632      	mov	r2, r6
   2080c:	6003      	str	r3, [r0, #0]
   2080e:	4601      	mov	r1, r0
   20810:	4604      	mov	r4, r0
   20812:	f7df fcaf 	bl	174 <ocrypto_bigint_sub256>
   20816:	4631      	mov	r1, r6
   20818:	4605      	mov	r5, r0
   2081a:	4602      	mov	r2, r0
   2081c:	4620      	mov	r0, r4
   2081e:	f7df fcc9 	bl	1b4 <ocrypto_bigint_cadd256>
   20822:	1e68      	subs	r0, r5, #1
   20824:	bd70      	pop	{r4, r5, r6, pc}
   20826:	bf00      	nop
   20828:	00028a04 	.word	0x00028a04

0002082c <p256_zdblu>:
   2082c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20830:	b088      	sub	sp, #32
   20832:	460c      	mov	r4, r1
   20834:	4606      	mov	r6, r0
   20836:	f102 0120 	add.w	r1, r2, #32
   2083a:	4668      	mov	r0, sp
   2083c:	f106 0720 	add.w	r7, r6, #32
   20840:	4690      	mov	r8, r2
   20842:	f7df ff91 	bl	768 <ocrypto_mod_p256_sqr>
   20846:	466a      	mov	r2, sp
   20848:	4669      	mov	r1, sp
   2084a:	4668      	mov	r0, sp
   2084c:	f7df feae 	bl	5ac <ocrypto_mod_p256_add>
   20850:	4669      	mov	r1, sp
   20852:	4638      	mov	r0, r7
   20854:	f7df ff88 	bl	768 <ocrypto_mod_p256_sqr>
   20858:	463a      	mov	r2, r7
   2085a:	4639      	mov	r1, r7
   2085c:	4638      	mov	r0, r7
   2085e:	f104 0520 	add.w	r5, r4, #32
   20862:	f7df fea3 	bl	5ac <ocrypto_mod_p256_add>
   20866:	466a      	mov	r2, sp
   20868:	4669      	mov	r1, sp
   2086a:	4668      	mov	r0, sp
   2086c:	f7df fe9e 	bl	5ac <ocrypto_mod_p256_add>
   20870:	4641      	mov	r1, r8
   20872:	4628      	mov	r0, r5
   20874:	f7df ff78 	bl	768 <ocrypto_mod_p256_sqr>
   20878:	466a      	mov	r2, sp
   2087a:	4641      	mov	r1, r8
   2087c:	4630      	mov	r0, r6
   2087e:	f7df ff5b 	bl	738 <ocrypto_mod_p256_mul>
   20882:	462a      	mov	r2, r5
   20884:	4629      	mov	r1, r5
   20886:	4668      	mov	r0, sp
   20888:	f7df fe90 	bl	5ac <ocrypto_mod_p256_add>
   2088c:	462a      	mov	r2, r5
   2088e:	4669      	mov	r1, sp
   20890:	4668      	mov	r0, sp
   20892:	f7df fe8b 	bl	5ac <ocrypto_mod_p256_add>
   20896:	4a12      	ldr	r2, [pc, #72]	; (208e0 <p256_zdblu+0xb4>)
   20898:	4669      	mov	r1, sp
   2089a:	4668      	mov	r0, sp
   2089c:	f7df fe86 	bl	5ac <ocrypto_mod_p256_add>
   208a0:	4669      	mov	r1, sp
   208a2:	4620      	mov	r0, r4
   208a4:	f7df ff60 	bl	768 <ocrypto_mod_p256_sqr>
   208a8:	4632      	mov	r2, r6
   208aa:	4621      	mov	r1, r4
   208ac:	4620      	mov	r0, r4
   208ae:	f7df febb 	bl	628 <ocrypto_mod_p256_sub>
   208b2:	4632      	mov	r2, r6
   208b4:	4621      	mov	r1, r4
   208b6:	4620      	mov	r0, r4
   208b8:	f7df feb6 	bl	628 <ocrypto_mod_p256_sub>
   208bc:	4622      	mov	r2, r4
   208be:	4631      	mov	r1, r6
   208c0:	4628      	mov	r0, r5
   208c2:	f7df feb1 	bl	628 <ocrypto_mod_p256_sub>
   208c6:	466a      	mov	r2, sp
   208c8:	4629      	mov	r1, r5
   208ca:	4628      	mov	r0, r5
   208cc:	f7df ff34 	bl	738 <ocrypto_mod_p256_mul>
   208d0:	463a      	mov	r2, r7
   208d2:	4629      	mov	r1, r5
   208d4:	4628      	mov	r0, r5
   208d6:	f7df fea7 	bl	628 <ocrypto_mod_p256_sub>
   208da:	b008      	add	sp, #32
   208dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   208e0:	00028ae4 	.word	0x00028ae4

000208e4 <p256_zaddc>:
   208e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   208e6:	b099      	sub	sp, #100	; 0x64
   208e8:	4604      	mov	r4, r0
   208ea:	460d      	mov	r5, r1
   208ec:	460a      	mov	r2, r1
   208ee:	4601      	mov	r1, r0
   208f0:	4668      	mov	r0, sp
   208f2:	f7df fe99 	bl	628 <ocrypto_mod_p256_sub>
   208f6:	4669      	mov	r1, sp
   208f8:	4668      	mov	r0, sp
   208fa:	f7df ff35 	bl	768 <ocrypto_mod_p256_sqr>
   208fe:	466a      	mov	r2, sp
   20900:	4621      	mov	r1, r4
   20902:	a808      	add	r0, sp, #32
   20904:	f105 0620 	add.w	r6, r5, #32
   20908:	f104 0720 	add.w	r7, r4, #32
   2090c:	f7df ff14 	bl	738 <ocrypto_mod_p256_mul>
   20910:	466a      	mov	r2, sp
   20912:	4629      	mov	r1, r5
   20914:	4668      	mov	r0, sp
   20916:	f7df ff0f 	bl	738 <ocrypto_mod_p256_mul>
   2091a:	4632      	mov	r2, r6
   2091c:	4639      	mov	r1, r7
   2091e:	a810      	add	r0, sp, #64	; 0x40
   20920:	f7df fe44 	bl	5ac <ocrypto_mod_p256_add>
   20924:	4632      	mov	r2, r6
   20926:	4639      	mov	r1, r7
   20928:	4630      	mov	r0, r6
   2092a:	f7df fe7d 	bl	628 <ocrypto_mod_p256_sub>
   2092e:	4631      	mov	r1, r6
   20930:	4628      	mov	r0, r5
   20932:	f7df ff19 	bl	768 <ocrypto_mod_p256_sqr>
   20936:	466a      	mov	r2, sp
   20938:	a908      	add	r1, sp, #32
   2093a:	4620      	mov	r0, r4
   2093c:	f7df fe36 	bl	5ac <ocrypto_mod_p256_add>
   20940:	4622      	mov	r2, r4
   20942:	4629      	mov	r1, r5
   20944:	4628      	mov	r0, r5
   20946:	f7df fe6f 	bl	628 <ocrypto_mod_p256_sub>
   2094a:	466a      	mov	r2, sp
   2094c:	a908      	add	r1, sp, #32
   2094e:	4668      	mov	r0, sp
   20950:	f7df fe6a 	bl	628 <ocrypto_mod_p256_sub>
   20954:	466a      	mov	r2, sp
   20956:	4639      	mov	r1, r7
   20958:	4638      	mov	r0, r7
   2095a:	f7df feed 	bl	738 <ocrypto_mod_p256_mul>
   2095e:	462a      	mov	r2, r5
   20960:	a908      	add	r1, sp, #32
   20962:	4668      	mov	r0, sp
   20964:	f7df fe60 	bl	628 <ocrypto_mod_p256_sub>
   20968:	466a      	mov	r2, sp
   2096a:	4631      	mov	r1, r6
   2096c:	4630      	mov	r0, r6
   2096e:	f7df fee3 	bl	738 <ocrypto_mod_p256_mul>
   20972:	463a      	mov	r2, r7
   20974:	4631      	mov	r1, r6
   20976:	4630      	mov	r0, r6
   20978:	f7df fe56 	bl	628 <ocrypto_mod_p256_sub>
   2097c:	a910      	add	r1, sp, #64	; 0x40
   2097e:	4668      	mov	r0, sp
   20980:	f7df fef2 	bl	768 <ocrypto_mod_p256_sqr>
   20984:	4622      	mov	r2, r4
   20986:	4669      	mov	r1, sp
   20988:	4620      	mov	r0, r4
   2098a:	f7df fe4d 	bl	628 <ocrypto_mod_p256_sub>
   2098e:	a908      	add	r1, sp, #32
   20990:	4622      	mov	r2, r4
   20992:	4608      	mov	r0, r1
   20994:	f7df fe48 	bl	628 <ocrypto_mod_p256_sub>
   20998:	a910      	add	r1, sp, #64	; 0x40
   2099a:	aa08      	add	r2, sp, #32
   2099c:	4608      	mov	r0, r1
   2099e:	f7df fecb 	bl	738 <ocrypto_mod_p256_mul>
   209a2:	463a      	mov	r2, r7
   209a4:	a910      	add	r1, sp, #64	; 0x40
   209a6:	4638      	mov	r0, r7
   209a8:	f7df fe3e 	bl	628 <ocrypto_mod_p256_sub>
   209ac:	b019      	add	sp, #100	; 0x64
   209ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000209b0 <p256_zaddu>:
   209b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   209b4:	b088      	sub	sp, #32
   209b6:	460c      	mov	r4, r1
   209b8:	4605      	mov	r5, r0
   209ba:	4690      	mov	r8, r2
   209bc:	460a      	mov	r2, r1
   209be:	4601      	mov	r1, r0
   209c0:	4668      	mov	r0, sp
   209c2:	f7df fe31 	bl	628 <ocrypto_mod_p256_sub>
   209c6:	4669      	mov	r1, sp
   209c8:	4668      	mov	r0, sp
   209ca:	f7df fecd 	bl	768 <ocrypto_mod_p256_sqr>
   209ce:	466a      	mov	r2, sp
   209d0:	4629      	mov	r1, r5
   209d2:	4628      	mov	r0, r5
   209d4:	f104 0620 	add.w	r6, r4, #32
   209d8:	f7df feae 	bl	738 <ocrypto_mod_p256_mul>
   209dc:	f105 0720 	add.w	r7, r5, #32
   209e0:	466a      	mov	r2, sp
   209e2:	4621      	mov	r1, r4
   209e4:	4668      	mov	r0, sp
   209e6:	f7df fea7 	bl	738 <ocrypto_mod_p256_mul>
   209ea:	4632      	mov	r2, r6
   209ec:	4639      	mov	r1, r7
   209ee:	4630      	mov	r0, r6
   209f0:	f7df fe1a 	bl	628 <ocrypto_mod_p256_sub>
   209f4:	4631      	mov	r1, r6
   209f6:	4620      	mov	r0, r4
   209f8:	f7df feb6 	bl	768 <ocrypto_mod_p256_sqr>
   209fc:	462a      	mov	r2, r5
   209fe:	4621      	mov	r1, r4
   20a00:	4620      	mov	r0, r4
   20a02:	f7df fe11 	bl	628 <ocrypto_mod_p256_sub>
   20a06:	466a      	mov	r2, sp
   20a08:	4621      	mov	r1, r4
   20a0a:	4620      	mov	r0, r4
   20a0c:	f7df fe0c 	bl	628 <ocrypto_mod_p256_sub>
   20a10:	466a      	mov	r2, sp
   20a12:	4629      	mov	r1, r5
   20a14:	4640      	mov	r0, r8
   20a16:	f7df fe07 	bl	628 <ocrypto_mod_p256_sub>
   20a1a:	4642      	mov	r2, r8
   20a1c:	4639      	mov	r1, r7
   20a1e:	4638      	mov	r0, r7
   20a20:	f7df fe8a 	bl	738 <ocrypto_mod_p256_mul>
   20a24:	4622      	mov	r2, r4
   20a26:	4629      	mov	r1, r5
   20a28:	4668      	mov	r0, sp
   20a2a:	f7df fdfd 	bl	628 <ocrypto_mod_p256_sub>
   20a2e:	466a      	mov	r2, sp
   20a30:	4631      	mov	r1, r6
   20a32:	4630      	mov	r0, r6
   20a34:	f7df fe80 	bl	738 <ocrypto_mod_p256_mul>
   20a38:	463a      	mov	r2, r7
   20a3a:	4631      	mov	r1, r6
   20a3c:	4630      	mov	r0, r6
   20a3e:	f7df fdf3 	bl	628 <ocrypto_mod_p256_sub>
   20a42:	b008      	add	sp, #32
   20a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020a48 <ocrypto_curve_p256_from64bytes>:
   20a48:	b570      	push	{r4, r5, r6, lr}
   20a4a:	f100 0620 	add.w	r6, r0, #32
   20a4e:	b090      	sub	sp, #64	; 0x40
   20a50:	460d      	mov	r5, r1
   20a52:	4604      	mov	r4, r0
   20a54:	f000 f914 	bl	20c80 <ocrypto_mod_p256_from_bytes>
   20a58:	f105 0120 	add.w	r1, r5, #32
   20a5c:	4630      	mov	r0, r6
   20a5e:	f000 f90f 	bl	20c80 <ocrypto_mod_p256_from_bytes>
   20a62:	4621      	mov	r1, r4
   20a64:	a808      	add	r0, sp, #32
   20a66:	f7df fe7f 	bl	768 <ocrypto_mod_p256_sqr>
   20a6a:	a908      	add	r1, sp, #32
   20a6c:	4608      	mov	r0, r1
   20a6e:	4a0d      	ldr	r2, [pc, #52]	; (20aa4 <ocrypto_curve_p256_from64bytes+0x5c>)
   20a70:	f7df fd9c 	bl	5ac <ocrypto_mod_p256_add>
   20a74:	a908      	add	r1, sp, #32
   20a76:	4622      	mov	r2, r4
   20a78:	4608      	mov	r0, r1
   20a7a:	f7df fe5d 	bl	738 <ocrypto_mod_p256_mul>
   20a7e:	a908      	add	r1, sp, #32
   20a80:	4a09      	ldr	r2, [pc, #36]	; (20aa8 <ocrypto_curve_p256_from64bytes+0x60>)
   20a82:	4608      	mov	r0, r1
   20a84:	f7df fd92 	bl	5ac <ocrypto_mod_p256_add>
   20a88:	4631      	mov	r1, r6
   20a8a:	4668      	mov	r0, sp
   20a8c:	f7df fe6c 	bl	768 <ocrypto_mod_p256_sqr>
   20a90:	2220      	movs	r2, #32
   20a92:	4669      	mov	r1, sp
   20a94:	eb0d 0002 	add.w	r0, sp, r2
   20a98:	f7df fd5a 	bl	550 <ocrypto_constant_time_equal>
   20a9c:	3801      	subs	r0, #1
   20a9e:	b010      	add	sp, #64	; 0x40
   20aa0:	bd70      	pop	{r4, r5, r6, pc}
   20aa2:	bf00      	nop
   20aa4:	00028ae4 	.word	0x00028ae4
   20aa8:	00028ac4 	.word	0x00028ac4

00020aac <ocrypto_curve_p256_to32bytes>:
   20aac:	f000 b902 	b.w	20cb4 <ocrypto_mod_p256_to_bytes>

00020ab0 <ocrypto_curve_p256_to64bytes>:
   20ab0:	b538      	push	{r3, r4, r5, lr}
   20ab2:	4604      	mov	r4, r0
   20ab4:	460d      	mov	r5, r1
   20ab6:	f000 f8fd 	bl	20cb4 <ocrypto_mod_p256_to_bytes>
   20aba:	f105 0120 	add.w	r1, r5, #32
   20abe:	f104 0020 	add.w	r0, r4, #32
   20ac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   20ac6:	f000 b8f5 	b.w	20cb4 <ocrypto_mod_p256_to_bytes>
   20aca:	bf00      	nop

00020acc <ocrypto_curve_p256_scalarmult>:
   20acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20ad0:	4613      	mov	r3, r2
   20ad2:	b0b8      	sub	sp, #224	; 0xe0
   20ad4:	4a54      	ldr	r2, [pc, #336]	; (20c28 <ocrypto_curve_p256_scalarmult+0x15c>)
   20ad6:	4689      	mov	r9, r1
   20ad8:	4680      	mov	r8, r0
   20ada:	4619      	mov	r1, r3
   20adc:	a810      	add	r0, sp, #64	; 0x40
   20ade:	f7df fb49 	bl	174 <ocrypto_bigint_sub256>
   20ae2:	4952      	ldr	r1, [pc, #328]	; (20c2c <ocrypto_curve_p256_scalarmult+0x160>)
   20ae4:	4602      	mov	r2, r0
   20ae6:	a810      	add	r0, sp, #64	; 0x40
   20ae8:	f7df fb64 	bl	1b4 <ocrypto_bigint_cadd256>
   20aec:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   20aee:	494e      	ldr	r1, [pc, #312]	; (20c28 <ocrypto_curve_p256_scalarmult+0x15c>)
   20af0:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   20af4:	4607      	mov	r7, r0
   20af6:	f1c6 0201 	rsb	r2, r6, #1
   20afa:	a810      	add	r0, sp, #64	; 0x40
   20afc:	f7df fb5a 	bl	1b4 <ocrypto_bigint_cadd256>
   20b00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   20b02:	464a      	mov	r2, r9
   20b04:	ea6f 0a03 	mvn.w	sl, r3
   20b08:	a928      	add	r1, sp, #160	; 0xa0
   20b0a:	a818      	add	r0, sp, #96	; 0x60
   20b0c:	f7ff fe8e 	bl	2082c <p256_zdblu>
   20b10:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   20b14:	a920      	add	r1, sp, #128	; 0x80
   20b16:	f1ca 0201 	rsb	r2, sl, #1
   20b1a:	4608      	mov	r0, r1
   20b1c:	f000 f892 	bl	20c44 <ocrypto_mod_p256_cneg>
   20b20:	f1c7 0701 	rsb	r7, r7, #1
   20b24:	24fe      	movs	r4, #254	; 0xfe
   20b26:	466a      	mov	r2, sp
   20b28:	a918      	add	r1, sp, #96	; 0x60
   20b2a:	a828      	add	r0, sp, #160	; 0xa0
   20b2c:	f7ff ff40 	bl	209b0 <p256_zaddu>
   20b30:	1163      	asrs	r3, r4, #5
   20b32:	aa38      	add	r2, sp, #224	; 0xe0
   20b34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   20b38:	f004 021f 	and.w	r2, r4, #31
   20b3c:	f853 3ca0 	ldr.w	r3, [r3, #-160]
   20b40:	40d3      	lsrs	r3, r2
   20b42:	4655      	mov	r5, sl
   20b44:	f003 0a01 	and.w	sl, r3, #1
   20b48:	ea8a 0505 	eor.w	r5, sl, r5
   20b4c:	462a      	mov	r2, r5
   20b4e:	a928      	add	r1, sp, #160	; 0xa0
   20b50:	a818      	add	r0, sp, #96	; 0x60
   20b52:	f7df fb8b 	bl	26c <ocrypto_bigint_cswap256>
   20b56:	462a      	mov	r2, r5
   20b58:	a930      	add	r1, sp, #192	; 0xc0
   20b5a:	a820      	add	r0, sp, #128	; 0x80
   20b5c:	f7df fb86 	bl	26c <ocrypto_bigint_cswap256>
   20b60:	3c01      	subs	r4, #1
   20b62:	a928      	add	r1, sp, #160	; 0xa0
   20b64:	a818      	add	r0, sp, #96	; 0x60
   20b66:	f7ff febd 	bl	208e4 <p256_zaddc>
   20b6a:	1c63      	adds	r3, r4, #1
   20b6c:	d1db      	bne.n	20b26 <ocrypto_curve_p256_scalarmult+0x5a>
   20b6e:	f1ca 0201 	rsb	r2, sl, #1
   20b72:	a920      	add	r1, sp, #128	; 0x80
   20b74:	a808      	add	r0, sp, #32
   20b76:	f000 f865 	bl	20c44 <ocrypto_mod_p256_cneg>
   20b7a:	ea86 060a 	eor.w	r6, r6, sl
   20b7e:	466a      	mov	r2, sp
   20b80:	a918      	add	r1, sp, #96	; 0x60
   20b82:	a828      	add	r0, sp, #160	; 0xa0
   20b84:	f7ff ff14 	bl	209b0 <p256_zaddu>
   20b88:	a928      	add	r1, sp, #160	; 0xa0
   20b8a:	4632      	mov	r2, r6
   20b8c:	a818      	add	r0, sp, #96	; 0x60
   20b8e:	f7df fb6d 	bl	26c <ocrypto_bigint_cswap256>
   20b92:	4632      	mov	r2, r6
   20b94:	a930      	add	r1, sp, #192	; 0xc0
   20b96:	a820      	add	r0, sp, #128	; 0x80
   20b98:	f7df fb68 	bl	26c <ocrypto_bigint_cswap256>
   20b9c:	a908      	add	r1, sp, #32
   20b9e:	466a      	mov	r2, sp
   20ba0:	4608      	mov	r0, r1
   20ba2:	f7df fdc9 	bl	738 <ocrypto_mod_p256_mul>
   20ba6:	a908      	add	r1, sp, #32
   20ba8:	4608      	mov	r0, r1
   20baa:	f000 f89d 	bl	20ce8 <ocrypto_mod_p256_inv>
   20bae:	a908      	add	r1, sp, #32
   20bb0:	f108 0420 	add.w	r4, r8, #32
   20bb4:	f109 0220 	add.w	r2, r9, #32
   20bb8:	4608      	mov	r0, r1
   20bba:	f7df fdbd 	bl	738 <ocrypto_mod_p256_mul>
   20bbe:	a920      	add	r1, sp, #128	; 0x80
   20bc0:	aa08      	add	r2, sp, #32
   20bc2:	4620      	mov	r0, r4
   20bc4:	f7df fdb8 	bl	738 <ocrypto_mod_p256_mul>
   20bc8:	aa08      	add	r2, sp, #32
   20bca:	a918      	add	r1, sp, #96	; 0x60
   20bcc:	4668      	mov	r0, sp
   20bce:	f7df fdb3 	bl	738 <ocrypto_mod_p256_mul>
   20bd2:	4669      	mov	r1, sp
   20bd4:	4668      	mov	r0, sp
   20bd6:	f7df fdc7 	bl	768 <ocrypto_mod_p256_sqr>
   20bda:	aa18      	add	r2, sp, #96	; 0x60
   20bdc:	4669      	mov	r1, sp
   20bde:	a808      	add	r0, sp, #32
   20be0:	f7df fdaa 	bl	738 <ocrypto_mod_p256_mul>
   20be4:	4621      	mov	r1, r4
   20be6:	4668      	mov	r0, sp
   20be8:	f7df fdbe 	bl	768 <ocrypto_mod_p256_sqr>
   20bec:	aa08      	add	r2, sp, #32
   20bee:	4669      	mov	r1, sp
   20bf0:	4610      	mov	r0, r2
   20bf2:	f7df fd19 	bl	628 <ocrypto_mod_p256_sub>
   20bf6:	4a0e      	ldr	r2, [pc, #56]	; (20c30 <ocrypto_curve_p256_scalarmult+0x164>)
   20bf8:	a908      	add	r1, sp, #32
   20bfa:	4668      	mov	r0, sp
   20bfc:	f7df fd14 	bl	628 <ocrypto_mod_p256_sub>
   20c00:	4620      	mov	r0, r4
   20c02:	2120      	movs	r1, #32
   20c04:	f7df fcb8 	bl	578 <ocrypto_constant_time_is_zero>
   20c08:	a908      	add	r1, sp, #32
   20c0a:	4602      	mov	r2, r0
   20c0c:	4244      	negs	r4, r0
   20c0e:	4668      	mov	r0, sp
   20c10:	f7df fb2c 	bl	26c <ocrypto_bigint_cswap256>
   20c14:	4640      	mov	r0, r8
   20c16:	4a07      	ldr	r2, [pc, #28]	; (20c34 <ocrypto_curve_p256_scalarmult+0x168>)
   20c18:	4669      	mov	r1, sp
   20c1a:	f7df fd8d 	bl	738 <ocrypto_mod_p256_mul>
   20c1e:	433c      	orrs	r4, r7
   20c20:	4620      	mov	r0, r4
   20c22:	b038      	add	sp, #224	; 0xe0
   20c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20c28:	00028a44 	.word	0x00028a44
   20c2c:	00028a64 	.word	0x00028a64
   20c30:	00028ac4 	.word	0x00028ac4
   20c34:	00028a24 	.word	0x00028a24

00020c38 <ocrypto_curve_p256_scalarmult_base>:
   20c38:	460a      	mov	r2, r1
   20c3a:	4901      	ldr	r1, [pc, #4]	; (20c40 <ocrypto_curve_p256_scalarmult_base+0x8>)
   20c3c:	f7ff bf46 	b.w	20acc <ocrypto_curve_p256_scalarmult>
   20c40:	00028a84 	.word	0x00028a84

00020c44 <ocrypto_mod_p256_cneg>:
   20c44:	b570      	push	{r4, r5, r6, lr}
   20c46:	b088      	sub	sp, #32
   20c48:	4604      	mov	r4, r0
   20c4a:	460d      	mov	r5, r1
   20c4c:	4616      	mov	r6, r2
   20c4e:	2100      	movs	r1, #0
   20c50:	2220      	movs	r2, #32
   20c52:	4668      	mov	r0, sp
   20c54:	f003 fe86 	bl	24964 <memset>
   20c58:	2300      	movs	r3, #0
   20c5a:	4629      	mov	r1, r5
   20c5c:	2220      	movs	r2, #32
   20c5e:	4620      	mov	r0, r4
   20c60:	9300      	str	r3, [sp, #0]
   20c62:	f003 fe74 	bl	2494e <memcpy>
   20c66:	462a      	mov	r2, r5
   20c68:	4669      	mov	r1, sp
   20c6a:	4668      	mov	r0, sp
   20c6c:	f7df fcdc 	bl	628 <ocrypto_mod_p256_sub>
   20c70:	4632      	mov	r2, r6
   20c72:	4669      	mov	r1, sp
   20c74:	4620      	mov	r0, r4
   20c76:	f7df faf9 	bl	26c <ocrypto_bigint_cswap256>
   20c7a:	b008      	add	sp, #32
   20c7c:	bd70      	pop	{r4, r5, r6, pc}
   20c7e:	bf00      	nop

00020c80 <ocrypto_mod_p256_from_bytes>:
   20c80:	680b      	ldr	r3, [r1, #0]
   20c82:	ba1b      	rev	r3, r3
   20c84:	61c3      	str	r3, [r0, #28]
   20c86:	684b      	ldr	r3, [r1, #4]
   20c88:	ba1b      	rev	r3, r3
   20c8a:	6183      	str	r3, [r0, #24]
   20c8c:	688b      	ldr	r3, [r1, #8]
   20c8e:	ba1b      	rev	r3, r3
   20c90:	6143      	str	r3, [r0, #20]
   20c92:	68cb      	ldr	r3, [r1, #12]
   20c94:	ba1b      	rev	r3, r3
   20c96:	6103      	str	r3, [r0, #16]
   20c98:	690b      	ldr	r3, [r1, #16]
   20c9a:	ba1b      	rev	r3, r3
   20c9c:	60c3      	str	r3, [r0, #12]
   20c9e:	694b      	ldr	r3, [r1, #20]
   20ca0:	ba1b      	rev	r3, r3
   20ca2:	6083      	str	r3, [r0, #8]
   20ca4:	698b      	ldr	r3, [r1, #24]
   20ca6:	ba1b      	rev	r3, r3
   20ca8:	6043      	str	r3, [r0, #4]
   20caa:	69cb      	ldr	r3, [r1, #28]
   20cac:	ba1b      	rev	r3, r3
   20cae:	6003      	str	r3, [r0, #0]
   20cb0:	4770      	bx	lr
   20cb2:	bf00      	nop

00020cb4 <ocrypto_mod_p256_to_bytes>:
   20cb4:	69cb      	ldr	r3, [r1, #28]
   20cb6:	ba1b      	rev	r3, r3
   20cb8:	6003      	str	r3, [r0, #0]
   20cba:	698b      	ldr	r3, [r1, #24]
   20cbc:	ba1b      	rev	r3, r3
   20cbe:	6043      	str	r3, [r0, #4]
   20cc0:	694b      	ldr	r3, [r1, #20]
   20cc2:	ba1b      	rev	r3, r3
   20cc4:	6083      	str	r3, [r0, #8]
   20cc6:	690b      	ldr	r3, [r1, #16]
   20cc8:	ba1b      	rev	r3, r3
   20cca:	60c3      	str	r3, [r0, #12]
   20ccc:	68cb      	ldr	r3, [r1, #12]
   20cce:	ba1b      	rev	r3, r3
   20cd0:	6103      	str	r3, [r0, #16]
   20cd2:	688b      	ldr	r3, [r1, #8]
   20cd4:	ba1b      	rev	r3, r3
   20cd6:	6143      	str	r3, [r0, #20]
   20cd8:	684b      	ldr	r3, [r1, #4]
   20cda:	ba1b      	rev	r3, r3
   20cdc:	6183      	str	r3, [r0, #24]
   20cde:	680b      	ldr	r3, [r1, #0]
   20ce0:	ba1b      	rev	r3, r3
   20ce2:	61c3      	str	r3, [r0, #28]
   20ce4:	4770      	bx	lr
   20ce6:	bf00      	nop

00020ce8 <ocrypto_mod_p256_inv>:
   20ce8:	b570      	push	{r4, r5, r6, lr}
   20cea:	b098      	sub	sp, #96	; 0x60
   20cec:	460d      	mov	r5, r1
   20cee:	4606      	mov	r6, r0
   20cf0:	a810      	add	r0, sp, #64	; 0x40
   20cf2:	f7df fd39 	bl	768 <ocrypto_mod_p256_sqr>
   20cf6:	462a      	mov	r2, r5
   20cf8:	a910      	add	r1, sp, #64	; 0x40
   20cfa:	4668      	mov	r0, sp
   20cfc:	f7df fd1c 	bl	738 <ocrypto_mod_p256_mul>
   20d00:	4669      	mov	r1, sp
   20d02:	a810      	add	r0, sp, #64	; 0x40
   20d04:	f7df fd30 	bl	768 <ocrypto_mod_p256_sqr>
   20d08:	a910      	add	r1, sp, #64	; 0x40
   20d0a:	4608      	mov	r0, r1
   20d0c:	f7df fd2c 	bl	768 <ocrypto_mod_p256_sqr>
   20d10:	466a      	mov	r2, sp
   20d12:	a910      	add	r1, sp, #64	; 0x40
   20d14:	a808      	add	r0, sp, #32
   20d16:	f7df fd0f 	bl	738 <ocrypto_mod_p256_mul>
   20d1a:	a908      	add	r1, sp, #32
   20d1c:	a810      	add	r0, sp, #64	; 0x40
   20d1e:	f7df fd23 	bl	768 <ocrypto_mod_p256_sqr>
   20d22:	a910      	add	r1, sp, #64	; 0x40
   20d24:	4608      	mov	r0, r1
   20d26:	f7df fd1f 	bl	768 <ocrypto_mod_p256_sqr>
   20d2a:	a910      	add	r1, sp, #64	; 0x40
   20d2c:	4608      	mov	r0, r1
   20d2e:	f7df fd1b 	bl	768 <ocrypto_mod_p256_sqr>
   20d32:	a910      	add	r1, sp, #64	; 0x40
   20d34:	4608      	mov	r0, r1
   20d36:	f7df fd17 	bl	768 <ocrypto_mod_p256_sqr>
   20d3a:	a910      	add	r1, sp, #64	; 0x40
   20d3c:	aa08      	add	r2, sp, #32
   20d3e:	4608      	mov	r0, r1
   20d40:	f7df fcfa 	bl	738 <ocrypto_mod_p256_mul>
   20d44:	a910      	add	r1, sp, #64	; 0x40
   20d46:	4608      	mov	r0, r1
   20d48:	f7df fd0e 	bl	768 <ocrypto_mod_p256_sqr>
   20d4c:	a910      	add	r1, sp, #64	; 0x40
   20d4e:	4608      	mov	r0, r1
   20d50:	f7df fd0a 	bl	768 <ocrypto_mod_p256_sqr>
   20d54:	a910      	add	r1, sp, #64	; 0x40
   20d56:	466a      	mov	r2, sp
   20d58:	a808      	add	r0, sp, #32
   20d5a:	f7df fced 	bl	738 <ocrypto_mod_p256_mul>
   20d5e:	2405      	movs	r4, #5
   20d60:	a908      	add	r1, sp, #32
   20d62:	a810      	add	r0, sp, #64	; 0x40
   20d64:	f7df fd00 	bl	768 <ocrypto_mod_p256_sqr>
   20d68:	a910      	add	r1, sp, #64	; 0x40
   20d6a:	4608      	mov	r0, r1
   20d6c:	f7df fcfc 	bl	768 <ocrypto_mod_p256_sqr>
   20d70:	3c01      	subs	r4, #1
   20d72:	a910      	add	r1, sp, #64	; 0x40
   20d74:	d1f5      	bne.n	20d62 <ocrypto_mod_p256_inv+0x7a>
   20d76:	aa08      	add	r2, sp, #32
   20d78:	4608      	mov	r0, r1
   20d7a:	f7df fcdd 	bl	738 <ocrypto_mod_p256_mul>
   20d7e:	2405      	movs	r4, #5
   20d80:	a910      	add	r1, sp, #64	; 0x40
   20d82:	4608      	mov	r0, r1
   20d84:	f7df fcf0 	bl	768 <ocrypto_mod_p256_sqr>
   20d88:	a910      	add	r1, sp, #64	; 0x40
   20d8a:	4608      	mov	r0, r1
   20d8c:	f7df fcec 	bl	768 <ocrypto_mod_p256_sqr>
   20d90:	3c01      	subs	r4, #1
   20d92:	d1f5      	bne.n	20d80 <ocrypto_mod_p256_inv+0x98>
   20d94:	a910      	add	r1, sp, #64	; 0x40
   20d96:	aa08      	add	r2, sp, #32
   20d98:	4608      	mov	r0, r1
   20d9a:	f7df fccd 	bl	738 <ocrypto_mod_p256_mul>
   20d9e:	a910      	add	r1, sp, #64	; 0x40
   20da0:	a808      	add	r0, sp, #32
   20da2:	f7df fce1 	bl	768 <ocrypto_mod_p256_sqr>
   20da6:	a908      	add	r1, sp, #32
   20da8:	4608      	mov	r0, r1
   20daa:	f7df fcdd 	bl	768 <ocrypto_mod_p256_sqr>
   20dae:	a908      	add	r1, sp, #32
   20db0:	466a      	mov	r2, sp
   20db2:	4668      	mov	r0, sp
   20db4:	f7df fcc0 	bl	738 <ocrypto_mod_p256_mul>
   20db8:	2410      	movs	r4, #16
   20dba:	4669      	mov	r1, sp
   20dbc:	a810      	add	r0, sp, #64	; 0x40
   20dbe:	f7df fcd3 	bl	768 <ocrypto_mod_p256_sqr>
   20dc2:	a910      	add	r1, sp, #64	; 0x40
   20dc4:	4608      	mov	r0, r1
   20dc6:	f7df fccf 	bl	768 <ocrypto_mod_p256_sqr>
   20dca:	3c01      	subs	r4, #1
   20dcc:	a910      	add	r1, sp, #64	; 0x40
   20dce:	d1f5      	bne.n	20dbc <ocrypto_mod_p256_inv+0xd4>
   20dd0:	462a      	mov	r2, r5
   20dd2:	4608      	mov	r0, r1
   20dd4:	f7df fcb0 	bl	738 <ocrypto_mod_p256_mul>
   20dd8:	2440      	movs	r4, #64	; 0x40
   20dda:	a910      	add	r1, sp, #64	; 0x40
   20ddc:	4608      	mov	r0, r1
   20dde:	f7df fcc3 	bl	768 <ocrypto_mod_p256_sqr>
   20de2:	a910      	add	r1, sp, #64	; 0x40
   20de4:	4608      	mov	r0, r1
   20de6:	f7df fcbf 	bl	768 <ocrypto_mod_p256_sqr>
   20dea:	3c01      	subs	r4, #1
   20dec:	d1f5      	bne.n	20dda <ocrypto_mod_p256_inv+0xf2>
   20dee:	a910      	add	r1, sp, #64	; 0x40
   20df0:	466a      	mov	r2, sp
   20df2:	4608      	mov	r0, r1
   20df4:	f7df fca0 	bl	738 <ocrypto_mod_p256_mul>
   20df8:	2410      	movs	r4, #16
   20dfa:	a910      	add	r1, sp, #64	; 0x40
   20dfc:	4608      	mov	r0, r1
   20dfe:	f7df fcb3 	bl	768 <ocrypto_mod_p256_sqr>
   20e02:	a910      	add	r1, sp, #64	; 0x40
   20e04:	4608      	mov	r0, r1
   20e06:	f7df fcaf 	bl	768 <ocrypto_mod_p256_sqr>
   20e0a:	3c01      	subs	r4, #1
   20e0c:	d1f5      	bne.n	20dfa <ocrypto_mod_p256_inv+0x112>
   20e0e:	a910      	add	r1, sp, #64	; 0x40
   20e10:	466a      	mov	r2, sp
   20e12:	4608      	mov	r0, r1
   20e14:	f7df fc90 	bl	738 <ocrypto_mod_p256_mul>
   20e18:	2410      	movs	r4, #16
   20e1a:	a910      	add	r1, sp, #64	; 0x40
   20e1c:	4608      	mov	r0, r1
   20e1e:	f7df fca3 	bl	768 <ocrypto_mod_p256_sqr>
   20e22:	a910      	add	r1, sp, #64	; 0x40
   20e24:	4608      	mov	r0, r1
   20e26:	f7df fc9f 	bl	768 <ocrypto_mod_p256_sqr>
   20e2a:	3c01      	subs	r4, #1
   20e2c:	d1f5      	bne.n	20e1a <ocrypto_mod_p256_inv+0x132>
   20e2e:	a910      	add	r1, sp, #64	; 0x40
   20e30:	aa08      	add	r2, sp, #32
   20e32:	4608      	mov	r0, r1
   20e34:	f7df fc80 	bl	738 <ocrypto_mod_p256_mul>
   20e38:	462a      	mov	r2, r5
   20e3a:	a910      	add	r1, sp, #64	; 0x40
   20e3c:	4630      	mov	r0, r6
   20e3e:	f7df fc7b 	bl	738 <ocrypto_mod_p256_mul>
   20e42:	b018      	add	sp, #96	; 0x60
   20e44:	bd70      	pop	{r4, r5, r6, pc}
   20e46:	bf00      	nop

00020e48 <nrf_cc3xx_platform_init>:
   20e48:	b510      	push	{r4, lr}
   20e4a:	4c0c      	ldr	r4, [pc, #48]	; (20e7c <nrf_cc3xx_platform_init+0x34>)
   20e4c:	6823      	ldr	r3, [r4, #0]
   20e4e:	b113      	cbz	r3, 20e56 <nrf_cc3xx_platform_init+0xe>
   20e50:	4b0b      	ldr	r3, [pc, #44]	; (20e80 <nrf_cc3xx_platform_init+0x38>)
   20e52:	681b      	ldr	r3, [r3, #0]
   20e54:	b92b      	cbnz	r3, 20e62 <nrf_cc3xx_platform_init+0x1a>
   20e56:	f000 fe29 	bl	21aac <CC_LibInit>
   20e5a:	b930      	cbnz	r0, 20e6a <nrf_cc3xx_platform_init+0x22>
   20e5c:	4b08      	ldr	r3, [pc, #32]	; (20e80 <nrf_cc3xx_platform_init+0x38>)
   20e5e:	2201      	movs	r2, #1
   20e60:	601a      	str	r2, [r3, #0]
   20e62:	2301      	movs	r3, #1
   20e64:	6023      	str	r3, [r4, #0]
   20e66:	2000      	movs	r0, #0
   20e68:	bd10      	pop	{r4, pc}
   20e6a:	3801      	subs	r0, #1
   20e6c:	2806      	cmp	r0, #6
   20e6e:	d901      	bls.n	20e74 <nrf_cc3xx_platform_init+0x2c>
   20e70:	4804      	ldr	r0, [pc, #16]	; (20e84 <nrf_cc3xx_platform_init+0x3c>)
   20e72:	bd10      	pop	{r4, pc}
   20e74:	4b04      	ldr	r3, [pc, #16]	; (20e88 <nrf_cc3xx_platform_init+0x40>)
   20e76:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   20e7a:	bd10      	pop	{r4, pc}
   20e7c:	2000353c 	.word	0x2000353c
   20e80:	20003538 	.word	0x20003538
   20e84:	ffff8ffe 	.word	0xffff8ffe
   20e88:	00028b04 	.word	0x00028b04

00020e8c <nrf_cc3xx_platform_abort>:
   20e8c:	f3bf 8f4f 	dsb	sy
   20e90:	4905      	ldr	r1, [pc, #20]	; (20ea8 <nrf_cc3xx_platform_abort+0x1c>)
   20e92:	4b06      	ldr	r3, [pc, #24]	; (20eac <nrf_cc3xx_platform_abort+0x20>)
   20e94:	68ca      	ldr	r2, [r1, #12]
   20e96:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   20e9a:	4313      	orrs	r3, r2
   20e9c:	60cb      	str	r3, [r1, #12]
   20e9e:	f3bf 8f4f 	dsb	sy
   20ea2:	bf00      	nop
   20ea4:	e7fd      	b.n	20ea2 <nrf_cc3xx_platform_abort+0x16>
   20ea6:	bf00      	nop
   20ea8:	e000ed00 	.word	0xe000ed00
   20eac:	05fa0004 	.word	0x05fa0004

00020eb0 <CC_PalAbort>:
   20eb0:	b410      	push	{r4}
   20eb2:	4b09      	ldr	r3, [pc, #36]	; (20ed8 <CC_PalAbort+0x28>)
   20eb4:	4909      	ldr	r1, [pc, #36]	; (20edc <CC_PalAbort+0x2c>)
   20eb6:	4c0a      	ldr	r4, [pc, #40]	; (20ee0 <CC_PalAbort+0x30>)
   20eb8:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   20ebc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   20ec0:	6849      	ldr	r1, [r1, #4]
   20ec2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   20ec6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   20eca:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   20ece:	2300      	movs	r3, #0
   20ed0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   20ed4:	bc10      	pop	{r4}
   20ed6:	4708      	bx	r1
   20ed8:	5002b000 	.word	0x5002b000
   20edc:	2000071c 	.word	0x2000071c
   20ee0:	5002a000 	.word	0x5002a000

00020ee4 <nrf_cc3xx_platform_set_abort>:
   20ee4:	e9d0 1200 	ldrd	r1, r2, [r0]
   20ee8:	4b01      	ldr	r3, [pc, #4]	; (20ef0 <nrf_cc3xx_platform_set_abort+0xc>)
   20eea:	e9c3 1200 	strd	r1, r2, [r3]
   20eee:	4770      	bx	lr
   20ef0:	2000071c 	.word	0x2000071c

00020ef4 <nrf_cc3xx_platform_ctr_drbg_init>:
   20ef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20ef8:	4b13      	ldr	r3, [pc, #76]	; (20f48 <nrf_cc3xx_platform_ctr_drbg_init+0x54>)
   20efa:	4e14      	ldr	r6, [pc, #80]	; (20f4c <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   20efc:	2800      	cmp	r0, #0
   20efe:	bf14      	ite	ne
   20f00:	4604      	movne	r4, r0
   20f02:	461c      	moveq	r4, r3
   20f04:	b083      	sub	sp, #12
   20f06:	6823      	ldr	r3, [r4, #0]
   20f08:	42b3      	cmp	r3, r6
   20f0a:	d019      	beq.n	20f40 <nrf_cc3xx_platform_ctr_drbg_init+0x4c>
   20f0c:	460d      	mov	r5, r1
   20f0e:	4620      	mov	r0, r4
   20f10:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   20f14:	f104 0904 	add.w	r9, r4, #4
   20f18:	4617      	mov	r7, r2
   20f1a:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   20f1e:	f000 f8e9 	bl	210f4 <mbedtls_platform_zeroize>
   20f22:	4648      	mov	r0, r9
   20f24:	f000 fcac 	bl	21880 <cc_mbedtls_entropy_init>
   20f28:	4640      	mov	r0, r8
   20f2a:	f000 fadb 	bl	214e4 <cc_mbedtls_ctr_drbg_init>
   20f2e:	4908      	ldr	r1, [pc, #32]	; (20f50 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   20f30:	9700      	str	r7, [sp, #0]
   20f32:	462b      	mov	r3, r5
   20f34:	464a      	mov	r2, r9
   20f36:	4640      	mov	r0, r8
   20f38:	f000 faea 	bl	21510 <cc_mbedtls_ctr_drbg_seed>
   20f3c:	b908      	cbnz	r0, 20f42 <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   20f3e:	6026      	str	r6, [r4, #0]
   20f40:	2000      	movs	r0, #0
   20f42:	b003      	add	sp, #12
   20f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20f48:	20003540 	.word	0x20003540
   20f4c:	5ac9bca5 	.word	0x5ac9bca5
   20f50:	00021909 	.word	0x00021909

00020f54 <nrf_cc3xx_platform_ctr_drbg_get>:
   20f54:	b570      	push	{r4, r5, r6, lr}
   20f56:	461d      	mov	r5, r3
   20f58:	4b0c      	ldr	r3, [pc, #48]	; (20f8c <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   20f5a:	2800      	cmp	r0, #0
   20f5c:	bf18      	it	ne
   20f5e:	4603      	movne	r3, r0
   20f60:	480b      	ldr	r0, [pc, #44]	; (20f90 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   20f62:	681e      	ldr	r6, [r3, #0]
   20f64:	4286      	cmp	r6, r0
   20f66:	b082      	sub	sp, #8
   20f68:	d10d      	bne.n	20f86 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   20f6a:	2600      	movs	r6, #0
   20f6c:	f503 708e 	add.w	r0, r3, #284	; 0x11c
   20f70:	9600      	str	r6, [sp, #0]
   20f72:	4633      	mov	r3, r6
   20f74:	4614      	mov	r4, r2
   20f76:	f000 fb17 	bl	215a8 <cc_mbedtls_ctr_drbg_random_with_add>
   20f7a:	2800      	cmp	r0, #0
   20f7c:	bf18      	it	ne
   20f7e:	4634      	movne	r4, r6
   20f80:	602c      	str	r4, [r5, #0]
   20f82:	b002      	add	sp, #8
   20f84:	bd70      	pop	{r4, r5, r6, pc}
   20f86:	4803      	ldr	r0, [pc, #12]	; (20f94 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   20f88:	e7fb      	b.n	20f82 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   20f8a:	bf00      	nop
   20f8c:	20003540 	.word	0x20003540
   20f90:	5ac9bca5 	.word	0x5ac9bca5
   20f94:	ffff8fe8 	.word	0xffff8fe8

00020f98 <mutex_free>:
   20f98:	b510      	push	{r4, lr}
   20f9a:	4604      	mov	r4, r0
   20f9c:	b150      	cbz	r0, 20fb4 <mutex_free+0x1c>
   20f9e:	6863      	ldr	r3, [r4, #4]
   20fa0:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   20fa4:	d005      	beq.n	20fb2 <mutex_free+0x1a>
   20fa6:	4a06      	ldr	r2, [pc, #24]	; (20fc0 <mutex_free+0x28>)
   20fa8:	4293      	cmp	r3, r2
   20faa:	d002      	beq.n	20fb2 <mutex_free+0x1a>
   20fac:	2300      	movs	r3, #0
   20fae:	6023      	str	r3, [r4, #0]
   20fb0:	6062      	str	r2, [r4, #4]
   20fb2:	bd10      	pop	{r4, pc}
   20fb4:	4b03      	ldr	r3, [pc, #12]	; (20fc4 <mutex_free+0x2c>)
   20fb6:	4804      	ldr	r0, [pc, #16]	; (20fc8 <mutex_free+0x30>)
   20fb8:	685b      	ldr	r3, [r3, #4]
   20fba:	4798      	blx	r3
   20fbc:	e7ef      	b.n	20f9e <mutex_free+0x6>
   20fbe:	bf00      	nop
   20fc0:	a95c5f2c 	.word	0xa95c5f2c
   20fc4:	2000071c 	.word	0x2000071c
   20fc8:	00028b20 	.word	0x00028b20

00020fcc <mutex_lock>:
   20fcc:	b1c8      	cbz	r0, 21002 <mutex_lock+0x36>
   20fce:	6843      	ldr	r3, [r0, #4]
   20fd0:	4a0d      	ldr	r2, [pc, #52]	; (21008 <mutex_lock+0x3c>)
   20fd2:	4293      	cmp	r3, r2
   20fd4:	d013      	beq.n	20ffe <mutex_lock+0x32>
   20fd6:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   20fda:	d00e      	beq.n	20ffa <mutex_lock+0x2e>
   20fdc:	2301      	movs	r3, #1
   20fde:	e850 2f00 	ldrex	r2, [r0]
   20fe2:	4619      	mov	r1, r3
   20fe4:	e840 1c00 	strex	ip, r1, [r0]
   20fe8:	f09c 0f00 	teq	ip, #0
   20fec:	d1f7      	bne.n	20fde <mutex_lock+0x12>
   20fee:	2a01      	cmp	r2, #1
   20ff0:	d0f5      	beq.n	20fde <mutex_lock+0x12>
   20ff2:	f3bf 8f5f 	dmb	sy
   20ff6:	2000      	movs	r0, #0
   20ff8:	4770      	bx	lr
   20ffa:	4804      	ldr	r0, [pc, #16]	; (2100c <mutex_lock+0x40>)
   20ffc:	4770      	bx	lr
   20ffe:	4804      	ldr	r0, [pc, #16]	; (21010 <mutex_lock+0x44>)
   21000:	4770      	bx	lr
   21002:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   21006:	4770      	bx	lr
   21008:	a95c5f2c 	.word	0xa95c5f2c
   2100c:	ffff8fe9 	.word	0xffff8fe9
   21010:	ffff8fea 	.word	0xffff8fea

00021014 <mutex_unlock>:
   21014:	b180      	cbz	r0, 21038 <mutex_unlock+0x24>
   21016:	6843      	ldr	r3, [r0, #4]
   21018:	4a09      	ldr	r2, [pc, #36]	; (21040 <mutex_unlock+0x2c>)
   2101a:	4293      	cmp	r3, r2
   2101c:	d00a      	beq.n	21034 <mutex_unlock+0x20>
   2101e:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   21022:	d005      	beq.n	21030 <mutex_unlock+0x1c>
   21024:	f3bf 8f5f 	dmb	sy
   21028:	2300      	movs	r3, #0
   2102a:	6003      	str	r3, [r0, #0]
   2102c:	4618      	mov	r0, r3
   2102e:	4770      	bx	lr
   21030:	4804      	ldr	r0, [pc, #16]	; (21044 <mutex_unlock+0x30>)
   21032:	4770      	bx	lr
   21034:	4804      	ldr	r0, [pc, #16]	; (21048 <mutex_unlock+0x34>)
   21036:	4770      	bx	lr
   21038:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   2103c:	4770      	bx	lr
   2103e:	bf00      	nop
   21040:	a95c5f2c 	.word	0xa95c5f2c
   21044:	ffff8fe9 	.word	0xffff8fe9
   21048:	ffff8fea 	.word	0xffff8fea

0002104c <mutex_init>:
   2104c:	b510      	push	{r4, lr}
   2104e:	4604      	mov	r4, r0
   21050:	b120      	cbz	r0, 2105c <mutex_init+0x10>
   21052:	4b04      	ldr	r3, [pc, #16]	; (21064 <mutex_init+0x18>)
   21054:	6063      	str	r3, [r4, #4]
   21056:	2200      	movs	r2, #0
   21058:	6022      	str	r2, [r4, #0]
   2105a:	bd10      	pop	{r4, pc}
   2105c:	4802      	ldr	r0, [pc, #8]	; (21068 <mutex_init+0x1c>)
   2105e:	f7ff ff27 	bl	20eb0 <CC_PalAbort>
   21062:	e7f6      	b.n	21052 <mutex_init+0x6>
   21064:	3a00003a 	.word	0x3a00003a
   21068:	00028b48 	.word	0x00028b48

0002106c <nrf_cc3xx_platform_set_mutexes>:
   2106c:	b570      	push	{r4, r5, r6, lr}
   2106e:	e9d0 2300 	ldrd	r2, r3, [r0]
   21072:	4c17      	ldr	r4, [pc, #92]	; (210d0 <nrf_cc3xx_platform_set_mutexes+0x64>)
   21074:	4d17      	ldr	r5, [pc, #92]	; (210d4 <nrf_cc3xx_platform_set_mutexes+0x68>)
   21076:	6063      	str	r3, [r4, #4]
   21078:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   2107c:	e9c4 3002 	strd	r3, r0, [r4, #8]
   21080:	6022      	str	r2, [r4, #0]
   21082:	6848      	ldr	r0, [r1, #4]
   21084:	f8d1 c000 	ldr.w	ip, [r1]
   21088:	4b13      	ldr	r3, [pc, #76]	; (210d8 <nrf_cc3xx_platform_set_mutexes+0x6c>)
   2108a:	e9c3 c000 	strd	ip, r0, [r3]
   2108e:	f8d5 0118 	ldr.w	r0, [r5, #280]	; 0x118
   21092:	f8d1 c008 	ldr.w	ip, [r1, #8]
   21096:	f8c3 c008 	str.w	ip, [r3, #8]
   2109a:	f010 5f68 	tst.w	r0, #973078528	; 0x3a000000
   2109e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   210a2:	6909      	ldr	r1, [r1, #16]
   210a4:	f8c3 c00c 	str.w	ip, [r3, #12]
   210a8:	6119      	str	r1, [r3, #16]
   210aa:	d010      	beq.n	210ce <nrf_cc3xx_platform_set_mutexes+0x62>
   210ac:	490b      	ldr	r1, [pc, #44]	; (210dc <nrf_cc3xx_platform_set_mutexes+0x70>)
   210ae:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
   210b2:	2300      	movs	r3, #0
   210b4:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
   210b8:	f505 708a 	add.w	r0, r5, #276	; 0x114
   210bc:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
   210c0:	4790      	blx	r2
   210c2:	6823      	ldr	r3, [r4, #0]
   210c4:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   210c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   210cc:	4718      	bx	r3
   210ce:	bd70      	pop	{r4, r5, r6, pc}
   210d0:	20000738 	.word	0x20000738
   210d4:	20003540 	.word	0x20003540
   210d8:	20000724 	.word	0x20000724
   210dc:	a95c5f2c 	.word	0xa95c5f2c

000210e0 <mbedtls_zeroize_internal>:
   210e0:	b138      	cbz	r0, 210f2 <mbedtls_zeroize_internal+0x12>
   210e2:	b131      	cbz	r1, 210f2 <mbedtls_zeroize_internal+0x12>
   210e4:	4401      	add	r1, r0
   210e6:	2200      	movs	r2, #0
   210e8:	4603      	mov	r3, r0
   210ea:	3001      	adds	r0, #1
   210ec:	4281      	cmp	r1, r0
   210ee:	701a      	strb	r2, [r3, #0]
   210f0:	d1fa      	bne.n	210e8 <mbedtls_zeroize_internal+0x8>
   210f2:	4770      	bx	lr

000210f4 <mbedtls_platform_zeroize>:
   210f4:	b138      	cbz	r0, 21106 <mbedtls_platform_zeroize+0x12>
   210f6:	b131      	cbz	r1, 21106 <mbedtls_platform_zeroize+0x12>
   210f8:	4401      	add	r1, r0
   210fa:	2200      	movs	r2, #0
   210fc:	4603      	mov	r3, r0
   210fe:	3001      	adds	r0, #1
   21100:	4288      	cmp	r0, r1
   21102:	701a      	strb	r2, [r3, #0]
   21104:	d1fa      	bne.n	210fc <mbedtls_platform_zeroize+0x8>
   21106:	4770      	bx	lr

00021108 <block_cipher_df>:
   21108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2110c:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   21110:	b0b5      	sub	sp, #212	; 0xd4
   21112:	f200 80d7 	bhi.w	212c4 <block_cipher_df+0x1bc>
   21116:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 212cc <block_cipher_df+0x1c4>
   2111a:	4614      	mov	r4, r2
   2111c:	460d      	mov	r5, r1
   2111e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   21122:	2100      	movs	r1, #0
   21124:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
   21128:	4607      	mov	r7, r0
   2112a:	4648      	mov	r0, r9
   2112c:	f003 fc1a 	bl	24964 <memset>
   21130:	4640      	mov	r0, r8
   21132:	f001 f951 	bl	223d8 <cc_mbedtls_aes_init>
   21136:	2300      	movs	r3, #0
   21138:	f8a9 3010 	strh.w	r3, [r9, #16]
   2113c:	ba63      	rev16	r3, r4
   2113e:	f109 0618 	add.w	r6, r9, #24
   21142:	f8a9 3012 	strh.w	r3, [r9, #18]
   21146:	2320      	movs	r3, #32
   21148:	4629      	mov	r1, r5
   2114a:	4622      	mov	r2, r4
   2114c:	f889 3017 	strb.w	r3, [r9, #23]
   21150:	4630      	mov	r0, r6
   21152:	f003 fbfc 	bl	2494e <memcpy>
   21156:	4b5e      	ldr	r3, [pc, #376]	; (212d0 <block_cipher_df+0x1c8>)
   21158:	9307      	str	r3, [sp, #28]
   2115a:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   2115e:	2280      	movs	r2, #128	; 0x80
   21160:	9308      	str	r3, [sp, #32]
   21162:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   21166:	9309      	str	r3, [sp, #36]	; 0x24
   21168:	5532      	strb	r2, [r6, r4]
   2116a:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   2116e:	a907      	add	r1, sp, #28
   21170:	4640      	mov	r0, r8
   21172:	930a      	str	r3, [sp, #40]	; 0x28
   21174:	f001 f946 	bl	22404 <cc_mbedtls_aes_setkey_enc>
   21178:	4682      	mov	sl, r0
   2117a:	2800      	cmp	r0, #0
   2117c:	d17f      	bne.n	2127e <block_cipher_df+0x176>
   2117e:	f104 0319 	add.w	r3, r4, #25
   21182:	ae0b      	add	r6, sp, #44	; 0x2c
   21184:	ac0f      	add	r4, sp, #60	; 0x3c
   21186:	9302      	str	r3, [sp, #8]
   21188:	9703      	str	r7, [sp, #12]
   2118a:	9601      	str	r6, [sp, #4]
   2118c:	9404      	str	r4, [sp, #16]
   2118e:	9801      	ldr	r0, [sp, #4]
   21190:	f8df b140 	ldr.w	fp, [pc, #320]	; 212d4 <block_cipher_df+0x1cc>
   21194:	2210      	movs	r2, #16
   21196:	2100      	movs	r1, #0
   21198:	f003 fbe4 	bl	24964 <memset>
   2119c:	f8dd a008 	ldr.w	sl, [sp, #8]
   211a0:	9405      	str	r4, [sp, #20]
   211a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   211a4:	f85b 4c04 	ldr.w	r4, [fp, #-4]
   211a8:	f85b 7c0c 	ldr.w	r7, [fp, #-12]
   211ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
   211ae:	f85b 0c10 	ldr.w	r0, [fp, #-16]
   211b2:	f85b 5c08 	ldr.w	r5, [fp, #-8]
   211b6:	e9dd 620c 	ldrd	r6, r2, [sp, #48]	; 0x30
   211ba:	405c      	eors	r4, r3
   211bc:	9b01      	ldr	r3, [sp, #4]
   211be:	407e      	eors	r6, r7
   211c0:	4055      	eors	r5, r2
   211c2:	ea81 0700 	eor.w	r7, r1, r0
   211c6:	461a      	mov	r2, r3
   211c8:	2101      	movs	r1, #1
   211ca:	4640      	mov	r0, r8
   211cc:	e9cd 760b 	strd	r7, r6, [sp, #44]	; 0x2c
   211d0:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
   211d4:	f001 f930 	bl	22438 <cc_mbedtls_aes_crypt_ecb>
   211d8:	f1ba 0f10 	cmp.w	sl, #16
   211dc:	bf94      	ite	ls
   211de:	ebaa 0a0a 	subls.w	sl, sl, sl
   211e2:	f1aa 0a10 	subhi.w	sl, sl, #16
   211e6:	f10b 0b10 	add.w	fp, fp, #16
   211ea:	2800      	cmp	r0, #0
   211ec:	d165      	bne.n	212ba <block_cipher_df+0x1b2>
   211ee:	f1ba 0f00 	cmp.w	sl, #0
   211f2:	d1d6      	bne.n	211a2 <block_cipher_df+0x9a>
   211f4:	9c05      	ldr	r4, [sp, #20]
   211f6:	9901      	ldr	r1, [sp, #4]
   211f8:	4620      	mov	r0, r4
   211fa:	2210      	movs	r2, #16
   211fc:	f003 fba7 	bl	2494e <memcpy>
   21200:	f899 3003 	ldrb.w	r3, [r9, #3]
   21204:	3410      	adds	r4, #16
   21206:	3301      	adds	r3, #1
   21208:	45a0      	cmp	r8, r4
   2120a:	f889 3003 	strb.w	r3, [r9, #3]
   2120e:	d1be      	bne.n	2118e <block_cipher_df+0x86>
   21210:	9c04      	ldr	r4, [sp, #16]
   21212:	9f03      	ldr	r7, [sp, #12]
   21214:	9e01      	ldr	r6, [sp, #4]
   21216:	2280      	movs	r2, #128	; 0x80
   21218:	4621      	mov	r1, r4
   2121a:	4640      	mov	r0, r8
   2121c:	f001 f8f2 	bl	22404 <cc_mbedtls_aes_setkey_enc>
   21220:	4682      	mov	sl, r0
   21222:	bb70      	cbnz	r0, 21282 <block_cipher_df+0x17a>
   21224:	f107 0920 	add.w	r9, r7, #32
   21228:	463d      	mov	r5, r7
   2122a:	ab13      	add	r3, sp, #76	; 0x4c
   2122c:	461a      	mov	r2, r3
   2122e:	2101      	movs	r1, #1
   21230:	4640      	mov	r0, r8
   21232:	f001 f901 	bl	22438 <cc_mbedtls_aes_crypt_ecb>
   21236:	2210      	movs	r2, #16
   21238:	4682      	mov	sl, r0
   2123a:	a913      	add	r1, sp, #76	; 0x4c
   2123c:	4628      	mov	r0, r5
   2123e:	4415      	add	r5, r2
   21240:	f1ba 0f00 	cmp.w	sl, #0
   21244:	d11d      	bne.n	21282 <block_cipher_df+0x17a>
   21246:	f003 fb82 	bl	2494e <memcpy>
   2124a:	454d      	cmp	r5, r9
   2124c:	d1ed      	bne.n	2122a <block_cipher_df+0x122>
   2124e:	4640      	mov	r0, r8
   21250:	f001 f8d2 	bl	223f8 <cc_mbedtls_aes_free>
   21254:	481d      	ldr	r0, [pc, #116]	; (212cc <block_cipher_df+0x1c4>)
   21256:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   2125a:	f7ff ff4b 	bl	210f4 <mbedtls_platform_zeroize>
   2125e:	4620      	mov	r0, r4
   21260:	2120      	movs	r1, #32
   21262:	f7ff ff47 	bl	210f4 <mbedtls_platform_zeroize>
   21266:	a807      	add	r0, sp, #28
   21268:	2110      	movs	r1, #16
   2126a:	f7ff ff43 	bl	210f4 <mbedtls_platform_zeroize>
   2126e:	4630      	mov	r0, r6
   21270:	2110      	movs	r1, #16
   21272:	f7ff ff3f 	bl	210f4 <mbedtls_platform_zeroize>
   21276:	4650      	mov	r0, sl
   21278:	b035      	add	sp, #212	; 0xd4
   2127a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2127e:	ac0f      	add	r4, sp, #60	; 0x3c
   21280:	ae0b      	add	r6, sp, #44	; 0x2c
   21282:	4640      	mov	r0, r8
   21284:	f001 f8b8 	bl	223f8 <cc_mbedtls_aes_free>
   21288:	4810      	ldr	r0, [pc, #64]	; (212cc <block_cipher_df+0x1c4>)
   2128a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   2128e:	f7ff ff31 	bl	210f4 <mbedtls_platform_zeroize>
   21292:	4620      	mov	r0, r4
   21294:	2120      	movs	r1, #32
   21296:	f7ff ff2d 	bl	210f4 <mbedtls_platform_zeroize>
   2129a:	a807      	add	r0, sp, #28
   2129c:	2110      	movs	r1, #16
   2129e:	f7ff ff29 	bl	210f4 <mbedtls_platform_zeroize>
   212a2:	2110      	movs	r1, #16
   212a4:	4630      	mov	r0, r6
   212a6:	f7ff ff25 	bl	210f4 <mbedtls_platform_zeroize>
   212aa:	2120      	movs	r1, #32
   212ac:	4638      	mov	r0, r7
   212ae:	f7ff ff21 	bl	210f4 <mbedtls_platform_zeroize>
   212b2:	4650      	mov	r0, sl
   212b4:	b035      	add	sp, #212	; 0xd4
   212b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   212ba:	9f03      	ldr	r7, [sp, #12]
   212bc:	9e01      	ldr	r6, [sp, #4]
   212be:	9c04      	ldr	r4, [sp, #16]
   212c0:	4682      	mov	sl, r0
   212c2:	e7de      	b.n	21282 <block_cipher_df+0x17a>
   212c4:	f06f 0a37 	mvn.w	sl, #55	; 0x37
   212c8:	e7f3      	b.n	212b2 <block_cipher_df+0x1aa>
   212ca:	bf00      	nop
   212cc:	20003710 	.word	0x20003710
   212d0:	03020100 	.word	0x03020100
   212d4:	20003720 	.word	0x20003720

000212d8 <ctr_drbg_update_internal>:
   212d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   212dc:	b088      	sub	sp, #32
   212de:	4604      	mov	r4, r0
   212e0:	460d      	mov	r5, r1
   212e2:	2220      	movs	r2, #32
   212e4:	2100      	movs	r1, #0
   212e6:	4668      	mov	r0, sp
   212e8:	f003 fb3c 	bl	24964 <memset>
   212ec:	f104 0620 	add.w	r6, r4, #32
   212f0:	466f      	mov	r7, sp
   212f2:	7be2      	ldrb	r2, [r4, #15]
   212f4:	3201      	adds	r2, #1
   212f6:	b2d2      	uxtb	r2, r2
   212f8:	73e2      	strb	r2, [r4, #15]
   212fa:	2a00      	cmp	r2, #0
   212fc:	d14d      	bne.n	2139a <ctr_drbg_update_internal+0xc2>
   212fe:	7ba2      	ldrb	r2, [r4, #14]
   21300:	3201      	adds	r2, #1
   21302:	b2d2      	uxtb	r2, r2
   21304:	73a2      	strb	r2, [r4, #14]
   21306:	2a00      	cmp	r2, #0
   21308:	d147      	bne.n	2139a <ctr_drbg_update_internal+0xc2>
   2130a:	7b63      	ldrb	r3, [r4, #13]
   2130c:	3301      	adds	r3, #1
   2130e:	b2db      	uxtb	r3, r3
   21310:	7363      	strb	r3, [r4, #13]
   21312:	2b00      	cmp	r3, #0
   21314:	d141      	bne.n	2139a <ctr_drbg_update_internal+0xc2>
   21316:	7b23      	ldrb	r3, [r4, #12]
   21318:	3301      	adds	r3, #1
   2131a:	b2db      	uxtb	r3, r3
   2131c:	7323      	strb	r3, [r4, #12]
   2131e:	2b00      	cmp	r3, #0
   21320:	d13b      	bne.n	2139a <ctr_drbg_update_internal+0xc2>
   21322:	7ae3      	ldrb	r3, [r4, #11]
   21324:	3301      	adds	r3, #1
   21326:	b2db      	uxtb	r3, r3
   21328:	72e3      	strb	r3, [r4, #11]
   2132a:	2b00      	cmp	r3, #0
   2132c:	d135      	bne.n	2139a <ctr_drbg_update_internal+0xc2>
   2132e:	7aa3      	ldrb	r3, [r4, #10]
   21330:	3301      	adds	r3, #1
   21332:	b2db      	uxtb	r3, r3
   21334:	72a3      	strb	r3, [r4, #10]
   21336:	2b00      	cmp	r3, #0
   21338:	d12f      	bne.n	2139a <ctr_drbg_update_internal+0xc2>
   2133a:	7a63      	ldrb	r3, [r4, #9]
   2133c:	3301      	adds	r3, #1
   2133e:	b2db      	uxtb	r3, r3
   21340:	7263      	strb	r3, [r4, #9]
   21342:	bb53      	cbnz	r3, 2139a <ctr_drbg_update_internal+0xc2>
   21344:	7a23      	ldrb	r3, [r4, #8]
   21346:	3301      	adds	r3, #1
   21348:	b2db      	uxtb	r3, r3
   2134a:	7223      	strb	r3, [r4, #8]
   2134c:	bb2b      	cbnz	r3, 2139a <ctr_drbg_update_internal+0xc2>
   2134e:	79e3      	ldrb	r3, [r4, #7]
   21350:	3301      	adds	r3, #1
   21352:	b2db      	uxtb	r3, r3
   21354:	71e3      	strb	r3, [r4, #7]
   21356:	bb03      	cbnz	r3, 2139a <ctr_drbg_update_internal+0xc2>
   21358:	79a3      	ldrb	r3, [r4, #6]
   2135a:	3301      	adds	r3, #1
   2135c:	b2db      	uxtb	r3, r3
   2135e:	71a3      	strb	r3, [r4, #6]
   21360:	b9db      	cbnz	r3, 2139a <ctr_drbg_update_internal+0xc2>
   21362:	7963      	ldrb	r3, [r4, #5]
   21364:	3301      	adds	r3, #1
   21366:	b2db      	uxtb	r3, r3
   21368:	7163      	strb	r3, [r4, #5]
   2136a:	b9b3      	cbnz	r3, 2139a <ctr_drbg_update_internal+0xc2>
   2136c:	7923      	ldrb	r3, [r4, #4]
   2136e:	3301      	adds	r3, #1
   21370:	b2db      	uxtb	r3, r3
   21372:	7123      	strb	r3, [r4, #4]
   21374:	b98b      	cbnz	r3, 2139a <ctr_drbg_update_internal+0xc2>
   21376:	78e3      	ldrb	r3, [r4, #3]
   21378:	3301      	adds	r3, #1
   2137a:	b2db      	uxtb	r3, r3
   2137c:	70e3      	strb	r3, [r4, #3]
   2137e:	b963      	cbnz	r3, 2139a <ctr_drbg_update_internal+0xc2>
   21380:	78a3      	ldrb	r3, [r4, #2]
   21382:	3301      	adds	r3, #1
   21384:	b2db      	uxtb	r3, r3
   21386:	70a3      	strb	r3, [r4, #2]
   21388:	b93b      	cbnz	r3, 2139a <ctr_drbg_update_internal+0xc2>
   2138a:	7863      	ldrb	r3, [r4, #1]
   2138c:	3301      	adds	r3, #1
   2138e:	b2db      	uxtb	r3, r3
   21390:	7063      	strb	r3, [r4, #1]
   21392:	b913      	cbnz	r3, 2139a <ctr_drbg_update_internal+0xc2>
   21394:	7823      	ldrb	r3, [r4, #0]
   21396:	3301      	adds	r3, #1
   21398:	7023      	strb	r3, [r4, #0]
   2139a:	463b      	mov	r3, r7
   2139c:	4622      	mov	r2, r4
   2139e:	2101      	movs	r1, #1
   213a0:	4630      	mov	r0, r6
   213a2:	f001 f849 	bl	22438 <cc_mbedtls_aes_crypt_ecb>
   213a6:	4680      	mov	r8, r0
   213a8:	bb50      	cbnz	r0, 21400 <ctr_drbg_update_internal+0x128>
   213aa:	3710      	adds	r7, #16
   213ac:	ab08      	add	r3, sp, #32
   213ae:	429f      	cmp	r7, r3
   213b0:	d19f      	bne.n	212f2 <ctr_drbg_update_internal+0x1a>
   213b2:	9a02      	ldr	r2, [sp, #8]
   213b4:	68ab      	ldr	r3, [r5, #8]
   213b6:	9f03      	ldr	r7, [sp, #12]
   213b8:	9907      	ldr	r1, [sp, #28]
   213ba:	4053      	eors	r3, r2
   213bc:	9302      	str	r3, [sp, #8]
   213be:	4630      	mov	r0, r6
   213c0:	68ee      	ldr	r6, [r5, #12]
   213c2:	9b00      	ldr	r3, [sp, #0]
   213c4:	407e      	eors	r6, r7
   213c6:	9603      	str	r6, [sp, #12]
   213c8:	9f04      	ldr	r7, [sp, #16]
   213ca:	692e      	ldr	r6, [r5, #16]
   213cc:	407e      	eors	r6, r7
   213ce:	9604      	str	r6, [sp, #16]
   213d0:	696e      	ldr	r6, [r5, #20]
   213d2:	9f05      	ldr	r7, [sp, #20]
   213d4:	407e      	eors	r6, r7
   213d6:	9605      	str	r6, [sp, #20]
   213d8:	9f06      	ldr	r7, [sp, #24]
   213da:	69ae      	ldr	r6, [r5, #24]
   213dc:	407e      	eors	r6, r7
   213de:	9606      	str	r6, [sp, #24]
   213e0:	69ee      	ldr	r6, [r5, #28]
   213e2:	4071      	eors	r1, r6
   213e4:	9107      	str	r1, [sp, #28]
   213e6:	6829      	ldr	r1, [r5, #0]
   213e8:	404b      	eors	r3, r1
   213ea:	9300      	str	r3, [sp, #0]
   213ec:	9901      	ldr	r1, [sp, #4]
   213ee:	686b      	ldr	r3, [r5, #4]
   213f0:	2280      	movs	r2, #128	; 0x80
   213f2:	404b      	eors	r3, r1
   213f4:	4669      	mov	r1, sp
   213f6:	9301      	str	r3, [sp, #4]
   213f8:	f001 f804 	bl	22404 <cc_mbedtls_aes_setkey_enc>
   213fc:	4680      	mov	r8, r0
   213fe:	b138      	cbz	r0, 21410 <ctr_drbg_update_internal+0x138>
   21400:	4668      	mov	r0, sp
   21402:	2120      	movs	r1, #32
   21404:	f7ff fe76 	bl	210f4 <mbedtls_platform_zeroize>
   21408:	4640      	mov	r0, r8
   2140a:	b008      	add	sp, #32
   2140c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21410:	2210      	movs	r2, #16
   21412:	eb0d 0102 	add.w	r1, sp, r2
   21416:	4620      	mov	r0, r4
   21418:	f003 fa99 	bl	2494e <memcpy>
   2141c:	e7f0      	b.n	21400 <ctr_drbg_update_internal+0x128>
   2141e:	bf00      	nop

00021420 <mbedtls_ctr_drbg_reseed_internal>:
   21420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21424:	4604      	mov	r4, r0
   21426:	6980      	ldr	r0, [r0, #24]
   21428:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   2142c:	d852      	bhi.n	214d4 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   2142e:	461d      	mov	r5, r3
   21430:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   21434:	42ab      	cmp	r3, r5
   21436:	d34d      	bcc.n	214d4 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   21438:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   2143c:	1a1b      	subs	r3, r3, r0
   2143e:	4293      	cmp	r3, r2
   21440:	4616      	mov	r6, r2
   21442:	d347      	bcc.n	214d4 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   21444:	f8df 9098 	ldr.w	r9, [pc, #152]	; 214e0 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   21448:	f44f 72c0 	mov.w	r2, #384	; 0x180
   2144c:	460f      	mov	r7, r1
   2144e:	4648      	mov	r0, r9
   21450:	2100      	movs	r1, #0
   21452:	f003 fa87 	bl	24964 <memset>
   21456:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   2145a:	69a2      	ldr	r2, [r4, #24]
   2145c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   21460:	4649      	mov	r1, r9
   21462:	4798      	blx	r3
   21464:	2800      	cmp	r0, #0
   21466:	d138      	bne.n	214da <mbedtls_ctr_drbg_reseed_internal+0xba>
   21468:	f8d4 8018 	ldr.w	r8, [r4, #24]
   2146c:	b13d      	cbz	r5, 2147e <mbedtls_ctr_drbg_reseed_internal+0x5e>
   2146e:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   21472:	462a      	mov	r2, r5
   21474:	eb09 0108 	add.w	r1, r9, r8
   21478:	4798      	blx	r3
   2147a:	bb70      	cbnz	r0, 214da <mbedtls_ctr_drbg_reseed_internal+0xba>
   2147c:	44a8      	add	r8, r5
   2147e:	b107      	cbz	r7, 21482 <mbedtls_ctr_drbg_reseed_internal+0x62>
   21480:	b9c6      	cbnz	r6, 214b4 <mbedtls_ctr_drbg_reseed_internal+0x94>
   21482:	4917      	ldr	r1, [pc, #92]	; (214e0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   21484:	4642      	mov	r2, r8
   21486:	4608      	mov	r0, r1
   21488:	f7ff fe3e 	bl	21108 <block_cipher_df>
   2148c:	4605      	mov	r5, r0
   2148e:	b138      	cbz	r0, 214a0 <mbedtls_ctr_drbg_reseed_internal+0x80>
   21490:	4813      	ldr	r0, [pc, #76]	; (214e0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   21492:	f44f 71c0 	mov.w	r1, #384	; 0x180
   21496:	f7ff fe2d 	bl	210f4 <mbedtls_platform_zeroize>
   2149a:	4628      	mov	r0, r5
   2149c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   214a0:	490f      	ldr	r1, [pc, #60]	; (214e0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   214a2:	4620      	mov	r0, r4
   214a4:	f7ff ff18 	bl	212d8 <ctr_drbg_update_internal>
   214a8:	4605      	mov	r5, r0
   214aa:	2800      	cmp	r0, #0
   214ac:	d1f0      	bne.n	21490 <mbedtls_ctr_drbg_reseed_internal+0x70>
   214ae:	2301      	movs	r3, #1
   214b0:	6123      	str	r3, [r4, #16]
   214b2:	e7ed      	b.n	21490 <mbedtls_ctr_drbg_reseed_internal+0x70>
   214b4:	eb09 0008 	add.w	r0, r9, r8
   214b8:	4639      	mov	r1, r7
   214ba:	4632      	mov	r2, r6
   214bc:	f003 fa47 	bl	2494e <memcpy>
   214c0:	4907      	ldr	r1, [pc, #28]	; (214e0 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   214c2:	44b0      	add	r8, r6
   214c4:	4642      	mov	r2, r8
   214c6:	4608      	mov	r0, r1
   214c8:	f7ff fe1e 	bl	21108 <block_cipher_df>
   214cc:	4605      	mov	r5, r0
   214ce:	2800      	cmp	r0, #0
   214d0:	d1de      	bne.n	21490 <mbedtls_ctr_drbg_reseed_internal+0x70>
   214d2:	e7e5      	b.n	214a0 <mbedtls_ctr_drbg_reseed_internal+0x80>
   214d4:	f06f 0537 	mvn.w	r5, #55	; 0x37
   214d8:	e7df      	b.n	2149a <mbedtls_ctr_drbg_reseed_internal+0x7a>
   214da:	f06f 0533 	mvn.w	r5, #51	; 0x33
   214de:	e7dc      	b.n	2149a <mbedtls_ctr_drbg_reseed_internal+0x7a>
   214e0:	200038b0 	.word	0x200038b0

000214e4 <cc_mbedtls_ctr_drbg_init>:
   214e4:	b510      	push	{r4, lr}
   214e6:	22a4      	movs	r2, #164	; 0xa4
   214e8:	4604      	mov	r4, r0
   214ea:	2100      	movs	r1, #0
   214ec:	f003 fa3a 	bl	24964 <memset>
   214f0:	4b06      	ldr	r3, [pc, #24]	; (2150c <cc_mbedtls_ctr_drbg_init+0x28>)
   214f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   214f6:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   214fa:	6121      	str	r1, [r4, #16]
   214fc:	61e2      	str	r2, [r4, #28]
   214fe:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   21502:	681b      	ldr	r3, [r3, #0]
   21504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21508:	4718      	bx	r3
   2150a:	bf00      	nop
   2150c:	20000788 	.word	0x20000788

00021510 <cc_mbedtls_ctr_drbg_seed>:
   21510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21514:	b085      	sub	sp, #20
   21516:	4605      	mov	r5, r0
   21518:	460f      	mov	r7, r1
   2151a:	4616      	mov	r6, r2
   2151c:	2100      	movs	r1, #0
   2151e:	2210      	movs	r2, #16
   21520:	4668      	mov	r0, sp
   21522:	4699      	mov	r9, r3
   21524:	f003 fa1e 	bl	24964 <memset>
   21528:	4b1d      	ldr	r3, [pc, #116]	; (215a0 <cc_mbedtls_ctr_drbg_seed+0x90>)
   2152a:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   2152e:	681b      	ldr	r3, [r3, #0]
   21530:	4640      	mov	r0, r8
   21532:	4798      	blx	r3
   21534:	b120      	cbz	r0, 21540 <cc_mbedtls_ctr_drbg_seed+0x30>
   21536:	4604      	mov	r4, r0
   21538:	4620      	mov	r0, r4
   2153a:	b005      	add	sp, #20
   2153c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21540:	f105 0420 	add.w	r4, r5, #32
   21544:	4620      	mov	r0, r4
   21546:	f000 ff47 	bl	223d8 <cc_mbedtls_aes_init>
   2154a:	69aa      	ldr	r2, [r5, #24]
   2154c:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   21550:	692e      	ldr	r6, [r5, #16]
   21552:	b9e2      	cbnz	r2, 2158e <cc_mbedtls_ctr_drbg_seed+0x7e>
   21554:	2220      	movs	r2, #32
   21556:	2e00      	cmp	r6, #0
   21558:	61aa      	str	r2, [r5, #24]
   2155a:	db1f      	blt.n	2159c <cc_mbedtls_ctr_drbg_seed+0x8c>
   2155c:	4620      	mov	r0, r4
   2155e:	4669      	mov	r1, sp
   21560:	2280      	movs	r2, #128	; 0x80
   21562:	f000 ff4f 	bl	22404 <cc_mbedtls_aes_setkey_enc>
   21566:	4604      	mov	r4, r0
   21568:	b930      	cbnz	r0, 21578 <cc_mbedtls_ctr_drbg_seed+0x68>
   2156a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2156c:	4633      	mov	r3, r6
   2156e:	4649      	mov	r1, r9
   21570:	4628      	mov	r0, r5
   21572:	f7ff ff55 	bl	21420 <mbedtls_ctr_drbg_reseed_internal>
   21576:	4604      	mov	r4, r0
   21578:	4b0a      	ldr	r3, [pc, #40]	; (215a4 <cc_mbedtls_ctr_drbg_seed+0x94>)
   2157a:	4640      	mov	r0, r8
   2157c:	681b      	ldr	r3, [r3, #0]
   2157e:	4798      	blx	r3
   21580:	2800      	cmp	r0, #0
   21582:	bf18      	it	ne
   21584:	4604      	movne	r4, r0
   21586:	4620      	mov	r0, r4
   21588:	b005      	add	sp, #20
   2158a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2158e:	2e00      	cmp	r6, #0
   21590:	dae4      	bge.n	2155c <cc_mbedtls_ctr_drbg_seed+0x4c>
   21592:	2a17      	cmp	r2, #23
   21594:	d802      	bhi.n	2159c <cc_mbedtls_ctr_drbg_seed+0x8c>
   21596:	3201      	adds	r2, #1
   21598:	0856      	lsrs	r6, r2, #1
   2159a:	e7df      	b.n	2155c <cc_mbedtls_ctr_drbg_seed+0x4c>
   2159c:	2600      	movs	r6, #0
   2159e:	e7dd      	b.n	2155c <cc_mbedtls_ctr_drbg_seed+0x4c>
   215a0:	20000784 	.word	0x20000784
   215a4:	20000780 	.word	0x20000780

000215a8 <cc_mbedtls_ctr_drbg_random_with_add>:
   215a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   215ac:	b08d      	sub	sp, #52	; 0x34
   215ae:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   215b2:	9f16      	ldr	r7, [sp, #88]	; 0x58
   215b4:	f200 80e3 	bhi.w	2177e <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   215b8:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   215bc:	f200 80dc 	bhi.w	21778 <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   215c0:	4604      	mov	r4, r0
   215c2:	4615      	mov	r5, r2
   215c4:	460e      	mov	r6, r1
   215c6:	2220      	movs	r2, #32
   215c8:	2100      	movs	r1, #0
   215ca:	a804      	add	r0, sp, #16
   215cc:	4698      	mov	r8, r3
   215ce:	f003 f9c9 	bl	24964 <memset>
   215d2:	4b6c      	ldr	r3, [pc, #432]	; (21784 <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   215d4:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   215d8:	681b      	ldr	r3, [r3, #0]
   215da:	4648      	mov	r0, r9
   215dc:	4798      	blx	r3
   215de:	4683      	mov	fp, r0
   215e0:	2800      	cmp	r0, #0
   215e2:	f040 8092 	bne.w	2170a <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   215e6:	6922      	ldr	r2, [r4, #16]
   215e8:	69e3      	ldr	r3, [r4, #28]
   215ea:	429a      	cmp	r2, r3
   215ec:	f300 8091 	bgt.w	21712 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   215f0:	6963      	ldr	r3, [r4, #20]
   215f2:	2b00      	cmp	r3, #0
   215f4:	f040 808d 	bne.w	21712 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   215f8:	2f00      	cmp	r7, #0
   215fa:	f040 80a9 	bne.w	21750 <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   215fe:	f8df a188 	ldr.w	sl, [pc, #392]	; 21788 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   21602:	466f      	mov	r7, sp
   21604:	2d00      	cmp	r5, #0
   21606:	f000 8098 	beq.w	2173a <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   2160a:	f104 0820 	add.w	r8, r4, #32
   2160e:	466f      	mov	r7, sp
   21610:	e00e      	b.n	21630 <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   21612:	2d10      	cmp	r5, #16
   21614:	46ab      	mov	fp, r5
   21616:	bf28      	it	cs
   21618:	f04f 0b10 	movcs.w	fp, #16
   2161c:	4630      	mov	r0, r6
   2161e:	465a      	mov	r2, fp
   21620:	4639      	mov	r1, r7
   21622:	f003 f994 	bl	2494e <memcpy>
   21626:	ebb5 050b 	subs.w	r5, r5, fp
   2162a:	445e      	add	r6, fp
   2162c:	f000 8085 	beq.w	2173a <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   21630:	7be3      	ldrb	r3, [r4, #15]
   21632:	3301      	adds	r3, #1
   21634:	b2db      	uxtb	r3, r3
   21636:	73e3      	strb	r3, [r4, #15]
   21638:	2b00      	cmp	r3, #0
   2163a:	d14d      	bne.n	216d8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2163c:	7ba3      	ldrb	r3, [r4, #14]
   2163e:	3301      	adds	r3, #1
   21640:	b2db      	uxtb	r3, r3
   21642:	73a3      	strb	r3, [r4, #14]
   21644:	2b00      	cmp	r3, #0
   21646:	d147      	bne.n	216d8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   21648:	7b63      	ldrb	r3, [r4, #13]
   2164a:	3301      	adds	r3, #1
   2164c:	b2db      	uxtb	r3, r3
   2164e:	7363      	strb	r3, [r4, #13]
   21650:	2b00      	cmp	r3, #0
   21652:	d141      	bne.n	216d8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   21654:	7b23      	ldrb	r3, [r4, #12]
   21656:	3301      	adds	r3, #1
   21658:	b2db      	uxtb	r3, r3
   2165a:	7323      	strb	r3, [r4, #12]
   2165c:	2b00      	cmp	r3, #0
   2165e:	d13b      	bne.n	216d8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   21660:	7ae3      	ldrb	r3, [r4, #11]
   21662:	3301      	adds	r3, #1
   21664:	b2db      	uxtb	r3, r3
   21666:	72e3      	strb	r3, [r4, #11]
   21668:	2b00      	cmp	r3, #0
   2166a:	d135      	bne.n	216d8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2166c:	7aa3      	ldrb	r3, [r4, #10]
   2166e:	3301      	adds	r3, #1
   21670:	b2db      	uxtb	r3, r3
   21672:	72a3      	strb	r3, [r4, #10]
   21674:	2b00      	cmp	r3, #0
   21676:	d12f      	bne.n	216d8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   21678:	7a63      	ldrb	r3, [r4, #9]
   2167a:	3301      	adds	r3, #1
   2167c:	b2db      	uxtb	r3, r3
   2167e:	7263      	strb	r3, [r4, #9]
   21680:	bb53      	cbnz	r3, 216d8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   21682:	7a23      	ldrb	r3, [r4, #8]
   21684:	3301      	adds	r3, #1
   21686:	b2db      	uxtb	r3, r3
   21688:	7223      	strb	r3, [r4, #8]
   2168a:	bb2b      	cbnz	r3, 216d8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2168c:	79e3      	ldrb	r3, [r4, #7]
   2168e:	3301      	adds	r3, #1
   21690:	b2db      	uxtb	r3, r3
   21692:	71e3      	strb	r3, [r4, #7]
   21694:	bb03      	cbnz	r3, 216d8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   21696:	79a3      	ldrb	r3, [r4, #6]
   21698:	3301      	adds	r3, #1
   2169a:	b2db      	uxtb	r3, r3
   2169c:	71a3      	strb	r3, [r4, #6]
   2169e:	b9db      	cbnz	r3, 216d8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   216a0:	7963      	ldrb	r3, [r4, #5]
   216a2:	3301      	adds	r3, #1
   216a4:	b2db      	uxtb	r3, r3
   216a6:	7163      	strb	r3, [r4, #5]
   216a8:	b9b3      	cbnz	r3, 216d8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   216aa:	7923      	ldrb	r3, [r4, #4]
   216ac:	3301      	adds	r3, #1
   216ae:	b2db      	uxtb	r3, r3
   216b0:	7123      	strb	r3, [r4, #4]
   216b2:	b98b      	cbnz	r3, 216d8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   216b4:	78e3      	ldrb	r3, [r4, #3]
   216b6:	3301      	adds	r3, #1
   216b8:	b2db      	uxtb	r3, r3
   216ba:	70e3      	strb	r3, [r4, #3]
   216bc:	b963      	cbnz	r3, 216d8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   216be:	78a3      	ldrb	r3, [r4, #2]
   216c0:	3301      	adds	r3, #1
   216c2:	b2db      	uxtb	r3, r3
   216c4:	70a3      	strb	r3, [r4, #2]
   216c6:	b93b      	cbnz	r3, 216d8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   216c8:	7863      	ldrb	r3, [r4, #1]
   216ca:	3301      	adds	r3, #1
   216cc:	b2db      	uxtb	r3, r3
   216ce:	7063      	strb	r3, [r4, #1]
   216d0:	b913      	cbnz	r3, 216d8 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   216d2:	7823      	ldrb	r3, [r4, #0]
   216d4:	3301      	adds	r3, #1
   216d6:	7023      	strb	r3, [r4, #0]
   216d8:	463b      	mov	r3, r7
   216da:	4622      	mov	r2, r4
   216dc:	2101      	movs	r1, #1
   216de:	4640      	mov	r0, r8
   216e0:	f000 feaa 	bl	22438 <cc_mbedtls_aes_crypt_ecb>
   216e4:	4683      	mov	fp, r0
   216e6:	2800      	cmp	r0, #0
   216e8:	d093      	beq.n	21612 <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   216ea:	f8da 3000 	ldr.w	r3, [sl]
   216ee:	4648      	mov	r0, r9
   216f0:	4798      	blx	r3
   216f2:	2120      	movs	r1, #32
   216f4:	4603      	mov	r3, r0
   216f6:	a804      	add	r0, sp, #16
   216f8:	2b00      	cmp	r3, #0
   216fa:	bf18      	it	ne
   216fc:	469b      	movne	fp, r3
   216fe:	f7ff fcf9 	bl	210f4 <mbedtls_platform_zeroize>
   21702:	2110      	movs	r1, #16
   21704:	4638      	mov	r0, r7
   21706:	f7ff fcf5 	bl	210f4 <mbedtls_platform_zeroize>
   2170a:	4658      	mov	r0, fp
   2170c:	b00d      	add	sp, #52	; 0x34
   2170e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21712:	463a      	mov	r2, r7
   21714:	4641      	mov	r1, r8
   21716:	2300      	movs	r3, #0
   21718:	4620      	mov	r0, r4
   2171a:	f7ff fe81 	bl	21420 <mbedtls_ctr_drbg_reseed_internal>
   2171e:	f8df a068 	ldr.w	sl, [pc, #104]	; 21788 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   21722:	2800      	cmp	r0, #0
   21724:	f43f af6d 	beq.w	21602 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   21728:	f8da 3000 	ldr.w	r3, [sl]
   2172c:	4648      	mov	r0, r9
   2172e:	4798      	blx	r3
   21730:	4683      	mov	fp, r0
   21732:	2800      	cmp	r0, #0
   21734:	f43f af65 	beq.w	21602 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   21738:	e7e7      	b.n	2170a <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   2173a:	a904      	add	r1, sp, #16
   2173c:	4620      	mov	r0, r4
   2173e:	f7ff fdcb 	bl	212d8 <ctr_drbg_update_internal>
   21742:	4683      	mov	fp, r0
   21744:	2800      	cmp	r0, #0
   21746:	d1d0      	bne.n	216ea <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   21748:	6923      	ldr	r3, [r4, #16]
   2174a:	3301      	adds	r3, #1
   2174c:	6123      	str	r3, [r4, #16]
   2174e:	e7cc      	b.n	216ea <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   21750:	463a      	mov	r2, r7
   21752:	4641      	mov	r1, r8
   21754:	a804      	add	r0, sp, #16
   21756:	f7ff fcd7 	bl	21108 <block_cipher_df>
   2175a:	4683      	mov	fp, r0
   2175c:	b118      	cbz	r0, 21766 <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   2175e:	f8df a028 	ldr.w	sl, [pc, #40]	; 21788 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   21762:	466f      	mov	r7, sp
   21764:	e7c1      	b.n	216ea <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   21766:	a904      	add	r1, sp, #16
   21768:	4620      	mov	r0, r4
   2176a:	f7ff fdb5 	bl	212d8 <ctr_drbg_update_internal>
   2176e:	4683      	mov	fp, r0
   21770:	2800      	cmp	r0, #0
   21772:	f43f af44 	beq.w	215fe <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   21776:	e7f2      	b.n	2175e <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   21778:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   2177c:	e7c5      	b.n	2170a <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   2177e:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   21782:	e7c2      	b.n	2170a <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   21784:	20000784 	.word	0x20000784
   21788:	20000780 	.word	0x20000780

0002178c <entropy_update>:
   2178c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21790:	2b20      	cmp	r3, #32
   21792:	b08b      	sub	sp, #44	; 0x2c
   21794:	461d      	mov	r5, r3
   21796:	4606      	mov	r6, r0
   21798:	4688      	mov	r8, r1
   2179a:	4691      	mov	r9, r2
   2179c:	d826      	bhi.n	217ec <entropy_update+0x60>
   2179e:	b2db      	uxtb	r3, r3
   217a0:	af02      	add	r7, sp, #8
   217a2:	f88d 8004 	strb.w	r8, [sp, #4]
   217a6:	46b0      	mov	r8, r6
   217a8:	f88d 3005 	strb.w	r3, [sp, #5]
   217ac:	f858 1b04 	ldr.w	r1, [r8], #4
   217b0:	b921      	cbnz	r1, 217bc <entropy_update+0x30>
   217b2:	4640      	mov	r0, r8
   217b4:	f000 fe84 	bl	224c0 <cc_mbedtls_sha256_starts>
   217b8:	4604      	mov	r4, r0
   217ba:	b940      	cbnz	r0, 217ce <entropy_update+0x42>
   217bc:	2301      	movs	r3, #1
   217be:	6033      	str	r3, [r6, #0]
   217c0:	2202      	movs	r2, #2
   217c2:	a901      	add	r1, sp, #4
   217c4:	4640      	mov	r0, r8
   217c6:	f000 fe8f 	bl	224e8 <cc_mbedtls_sha256_update>
   217ca:	4604      	mov	r4, r0
   217cc:	b138      	cbz	r0, 217de <entropy_update+0x52>
   217ce:	4638      	mov	r0, r7
   217d0:	2120      	movs	r1, #32
   217d2:	f7ff fc8f 	bl	210f4 <mbedtls_platform_zeroize>
   217d6:	4620      	mov	r0, r4
   217d8:	b00b      	add	sp, #44	; 0x2c
   217da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   217de:	462a      	mov	r2, r5
   217e0:	4649      	mov	r1, r9
   217e2:	4640      	mov	r0, r8
   217e4:	f000 fe80 	bl	224e8 <cc_mbedtls_sha256_update>
   217e8:	4604      	mov	r4, r0
   217ea:	e7f0      	b.n	217ce <entropy_update+0x42>
   217ec:	af02      	add	r7, sp, #8
   217ee:	4619      	mov	r1, r3
   217f0:	4610      	mov	r0, r2
   217f2:	2300      	movs	r3, #0
   217f4:	463a      	mov	r2, r7
   217f6:	f000 fffd 	bl	227f4 <cc_mbedtls_sha256>
   217fa:	4604      	mov	r4, r0
   217fc:	2800      	cmp	r0, #0
   217fe:	d1e6      	bne.n	217ce <entropy_update+0x42>
   21800:	2320      	movs	r3, #32
   21802:	46b9      	mov	r9, r7
   21804:	461d      	mov	r5, r3
   21806:	e7cc      	b.n	217a2 <entropy_update+0x16>

00021808 <entropy_gather_internal.part.0>:
   21808:	b5f0      	push	{r4, r5, r6, r7, lr}
   2180a:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   2180e:	b0a7      	sub	sp, #156	; 0x9c
   21810:	2b00      	cmp	r3, #0
   21812:	bfd8      	it	le
   21814:	ae02      	addle	r6, sp, #8
   21816:	dd2c      	ble.n	21872 <entropy_gather_internal.part.0+0x6a>
   21818:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   2181c:	4605      	mov	r5, r0
   2181e:	2300      	movs	r3, #0
   21820:	ae02      	add	r6, sp, #8
   21822:	9301      	str	r3, [sp, #4]
   21824:	f1a4 0701 	sub.w	r7, r4, #1
   21828:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   2182c:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   21830:	ab01      	add	r3, sp, #4
   21832:	2290      	movs	r2, #144	; 0x90
   21834:	4631      	mov	r1, r6
   21836:	47a0      	blx	r4
   21838:	fab7 f787 	clz	r7, r7
   2183c:	097f      	lsrs	r7, r7, #5
   2183e:	4604      	mov	r4, r0
   21840:	b910      	cbnz	r0, 21848 <entropy_gather_internal.part.0+0x40>
   21842:	9b01      	ldr	r3, [sp, #4]
   21844:	b93b      	cbnz	r3, 21856 <entropy_gather_internal.part.0+0x4e>
   21846:	b1a7      	cbz	r7, 21872 <entropy_gather_internal.part.0+0x6a>
   21848:	4630      	mov	r0, r6
   2184a:	2190      	movs	r1, #144	; 0x90
   2184c:	f7ff fc52 	bl	210f4 <mbedtls_platform_zeroize>
   21850:	4620      	mov	r0, r4
   21852:	b027      	add	sp, #156	; 0x9c
   21854:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21856:	4601      	mov	r1, r0
   21858:	4632      	mov	r2, r6
   2185a:	4628      	mov	r0, r5
   2185c:	f7ff ff96 	bl	2178c <entropy_update>
   21860:	b950      	cbnz	r0, 21878 <entropy_gather_internal.part.0+0x70>
   21862:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   21866:	9a01      	ldr	r2, [sp, #4]
   21868:	4413      	add	r3, r2
   2186a:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   2186e:	2f00      	cmp	r7, #0
   21870:	d1ea      	bne.n	21848 <entropy_gather_internal.part.0+0x40>
   21872:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   21876:	e7e7      	b.n	21848 <entropy_gather_internal.part.0+0x40>
   21878:	4604      	mov	r4, r0
   2187a:	4620      	mov	r0, r4
   2187c:	b027      	add	sp, #156	; 0x9c
   2187e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00021880 <cc_mbedtls_entropy_init>:
   21880:	b570      	push	{r4, r5, r6, lr}
   21882:	2500      	movs	r5, #0
   21884:	4604      	mov	r4, r0
   21886:	f504 7688 	add.w	r6, r4, #272	; 0x110
   2188a:	2214      	movs	r2, #20
   2188c:	4629      	mov	r1, r5
   2188e:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   21892:	30fc      	adds	r0, #252	; 0xfc
   21894:	f003 f866 	bl	24964 <memset>
   21898:	2208      	movs	r2, #8
   2189a:	4629      	mov	r1, r5
   2189c:	4630      	mov	r0, r6
   2189e:	f003 f861 	bl	24964 <memset>
   218a2:	4b15      	ldr	r3, [pc, #84]	; (218f8 <cc_mbedtls_entropy_init+0x78>)
   218a4:	4630      	mov	r0, r6
   218a6:	681b      	ldr	r3, [r3, #0]
   218a8:	4798      	blx	r3
   218aa:	4620      	mov	r0, r4
   218ac:	f840 5b04 	str.w	r5, [r0], #4
   218b0:	f000 fdec 	bl	2248c <cc_mbedtls_sha256_init>
   218b4:	4b11      	ldr	r3, [pc, #68]	; (218fc <cc_mbedtls_entropy_init+0x7c>)
   218b6:	4630      	mov	r0, r6
   218b8:	681b      	ldr	r3, [r3, #0]
   218ba:	4798      	blx	r3
   218bc:	b9d8      	cbnz	r0, 218f6 <cc_mbedtls_entropy_init+0x76>
   218be:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   218c2:	42ab      	cmp	r3, r5
   218c4:	dc11      	bgt.n	218ea <cc_mbedtls_entropy_init+0x6a>
   218c6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   218ca:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   218ce:	2120      	movs	r1, #32
   218d0:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   218d4:	2101      	movs	r1, #1
   218d6:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   218da:	3301      	adds	r3, #1
   218dc:	4908      	ldr	r1, [pc, #32]	; (21900 <cc_mbedtls_entropy_init+0x80>)
   218de:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   218e2:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   218e6:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   218ea:	4b06      	ldr	r3, [pc, #24]	; (21904 <cc_mbedtls_entropy_init+0x84>)
   218ec:	4630      	mov	r0, r6
   218ee:	681b      	ldr	r3, [r3, #0]
   218f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   218f4:	4718      	bx	r3
   218f6:	bd70      	pop	{r4, r5, r6, pc}
   218f8:	20000788 	.word	0x20000788
   218fc:	20000784 	.word	0x20000784
   21900:	000222dd 	.word	0x000222dd
   21904:	20000780 	.word	0x20000780

00021908 <cc_mbedtls_entropy_func>:
   21908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2190c:	2a20      	cmp	r2, #32
   2190e:	b088      	sub	sp, #32
   21910:	d879      	bhi.n	21a06 <cc_mbedtls_entropy_func+0xfe>
   21912:	4b3e      	ldr	r3, [pc, #248]	; (21a0c <cc_mbedtls_entropy_func+0x104>)
   21914:	f500 7988 	add.w	r9, r0, #272	; 0x110
   21918:	681b      	ldr	r3, [r3, #0]
   2191a:	4604      	mov	r4, r0
   2191c:	4648      	mov	r0, r9
   2191e:	4617      	mov	r7, r2
   21920:	4688      	mov	r8, r1
   21922:	4798      	blx	r3
   21924:	4605      	mov	r5, r0
   21926:	b9f8      	cbnz	r0, 21968 <cc_mbedtls_entropy_func+0x60>
   21928:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   2192c:	f240 1601 	movw	r6, #257	; 0x101
   21930:	2b00      	cmp	r3, #0
   21932:	d064      	beq.n	219fe <cc_mbedtls_entropy_func+0xf6>
   21934:	4620      	mov	r0, r4
   21936:	f7ff ff67 	bl	21808 <entropy_gather_internal.part.0>
   2193a:	4605      	mov	r5, r0
   2193c:	b938      	cbnz	r0, 2194e <cc_mbedtls_entropy_func+0x46>
   2193e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   21942:	2b00      	cmp	r3, #0
   21944:	dc14      	bgt.n	21970 <cc_mbedtls_entropy_func+0x68>
   21946:	3e01      	subs	r6, #1
   21948:	d1f2      	bne.n	21930 <cc_mbedtls_entropy_func+0x28>
   2194a:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   2194e:	466e      	mov	r6, sp
   21950:	2120      	movs	r1, #32
   21952:	4630      	mov	r0, r6
   21954:	f7ff fbce 	bl	210f4 <mbedtls_platform_zeroize>
   21958:	4b2d      	ldr	r3, [pc, #180]	; (21a10 <cc_mbedtls_entropy_func+0x108>)
   2195a:	4648      	mov	r0, r9
   2195c:	681b      	ldr	r3, [r3, #0]
   2195e:	4798      	blx	r3
   21960:	2800      	cmp	r0, #0
   21962:	bf18      	it	ne
   21964:	f06f 051d 	mvnne.w	r5, #29
   21968:	4628      	mov	r0, r5
   2196a:	b008      	add	sp, #32
   2196c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21970:	e9d4 3241 	ldrd	r3, r2, [r4, #260]	; 0x104
   21974:	4293      	cmp	r3, r2
   21976:	d303      	bcc.n	21980 <cc_mbedtls_entropy_func+0x78>
   21978:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   2197c:	2a01      	cmp	r2, #1
   2197e:	d002      	beq.n	21986 <cc_mbedtls_entropy_func+0x7e>
   21980:	3e01      	subs	r6, #1
   21982:	d1d7      	bne.n	21934 <cc_mbedtls_entropy_func+0x2c>
   21984:	e7e1      	b.n	2194a <cc_mbedtls_entropy_func+0x42>
   21986:	2b1f      	cmp	r3, #31
   21988:	d9fa      	bls.n	21980 <cc_mbedtls_entropy_func+0x78>
   2198a:	466e      	mov	r6, sp
   2198c:	4601      	mov	r1, r0
   2198e:	2220      	movs	r2, #32
   21990:	4630      	mov	r0, r6
   21992:	f104 0a04 	add.w	sl, r4, #4
   21996:	f002 ffe5 	bl	24964 <memset>
   2199a:	4631      	mov	r1, r6
   2199c:	4650      	mov	r0, sl
   2199e:	f000 fdcd 	bl	2253c <cc_mbedtls_sha256_finish>
   219a2:	4605      	mov	r5, r0
   219a4:	2800      	cmp	r0, #0
   219a6:	d1d3      	bne.n	21950 <cc_mbedtls_entropy_func+0x48>
   219a8:	4650      	mov	r0, sl
   219aa:	f000 fd83 	bl	224b4 <cc_mbedtls_sha256_free>
   219ae:	4650      	mov	r0, sl
   219b0:	f000 fd6c 	bl	2248c <cc_mbedtls_sha256_init>
   219b4:	4629      	mov	r1, r5
   219b6:	4650      	mov	r0, sl
   219b8:	f000 fd82 	bl	224c0 <cc_mbedtls_sha256_starts>
   219bc:	4605      	mov	r5, r0
   219be:	2800      	cmp	r0, #0
   219c0:	d1c6      	bne.n	21950 <cc_mbedtls_entropy_func+0x48>
   219c2:	4650      	mov	r0, sl
   219c4:	2220      	movs	r2, #32
   219c6:	4631      	mov	r1, r6
   219c8:	f000 fd8e 	bl	224e8 <cc_mbedtls_sha256_update>
   219cc:	4605      	mov	r5, r0
   219ce:	2800      	cmp	r0, #0
   219d0:	d1be      	bne.n	21950 <cc_mbedtls_entropy_func+0x48>
   219d2:	4603      	mov	r3, r0
   219d4:	4632      	mov	r2, r6
   219d6:	2120      	movs	r1, #32
   219d8:	4630      	mov	r0, r6
   219da:	f000 ff0b 	bl	227f4 <cc_mbedtls_sha256>
   219de:	4605      	mov	r5, r0
   219e0:	2800      	cmp	r0, #0
   219e2:	d1b5      	bne.n	21950 <cc_mbedtls_entropy_func+0x48>
   219e4:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   219e8:	2b00      	cmp	r3, #0
   219ea:	bfc4      	itt	gt
   219ec:	2300      	movgt	r3, #0
   219ee:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   219f2:	463a      	mov	r2, r7
   219f4:	4640      	mov	r0, r8
   219f6:	4631      	mov	r1, r6
   219f8:	f002 ffa9 	bl	2494e <memcpy>
   219fc:	e7a8      	b.n	21950 <cc_mbedtls_entropy_func+0x48>
   219fe:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   21a02:	466e      	mov	r6, sp
   21a04:	e7a4      	b.n	21950 <cc_mbedtls_entropy_func+0x48>
   21a06:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   21a0a:	e7ad      	b.n	21968 <cc_mbedtls_entropy_func+0x60>
   21a0c:	20000784 	.word	0x20000784
   21a10:	20000780 	.word	0x20000780

00021a14 <RndStartupTest.constprop.0>:
   21a14:	b530      	push	{r4, r5, lr}
   21a16:	b08d      	sub	sp, #52	; 0x34
   21a18:	2100      	movs	r1, #0
   21a1a:	2228      	movs	r2, #40	; 0x28
   21a1c:	a802      	add	r0, sp, #8
   21a1e:	9101      	str	r1, [sp, #4]
   21a20:	f002 ffa0 	bl	24964 <memset>
   21a24:	a802      	add	r0, sp, #8
   21a26:	f000 ff0d 	bl	22844 <RNG_PLAT_SetUserRngParameters>
   21a2a:	4604      	mov	r4, r0
   21a2c:	b110      	cbz	r0, 21a34 <RndStartupTest.constprop.0+0x20>
   21a2e:	4620      	mov	r0, r4
   21a30:	b00d      	add	sp, #52	; 0x34
   21a32:	bd30      	pop	{r4, r5, pc}
   21a34:	4d17      	ldr	r5, [pc, #92]	; (21a94 <RndStartupTest.constprop.0+0x80>)
   21a36:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21a3a:	6828      	ldr	r0, [r5, #0]
   21a3c:	f000 f944 	bl	21cc8 <CC_PalMutexLock>
   21a40:	4604      	mov	r4, r0
   21a42:	b120      	cbz	r0, 21a4e <RndStartupTest.constprop.0+0x3a>
   21a44:	4814      	ldr	r0, [pc, #80]	; (21a98 <RndStartupTest.constprop.0+0x84>)
   21a46:	f7ff fa33 	bl	20eb0 <CC_PalAbort>
   21a4a:	2c01      	cmp	r4, #1
   21a4c:	d018      	beq.n	21a80 <RndStartupTest.constprop.0+0x6c>
   21a4e:	2000      	movs	r0, #0
   21a50:	f000 f96a 	bl	21d28 <CC_PalPowerSaveModeSelect>
   21a54:	b9d0      	cbnz	r0, 21a8c <RndStartupTest.constprop.0+0x78>
   21a56:	4a11      	ldr	r2, [pc, #68]	; (21a9c <RndStartupTest.constprop.0+0x88>)
   21a58:	a902      	add	r1, sp, #8
   21a5a:	a801      	add	r0, sp, #4
   21a5c:	f000 fc30 	bl	222c0 <LLF_RND_RunTrngStartupTest>
   21a60:	4604      	mov	r4, r0
   21a62:	2001      	movs	r0, #1
   21a64:	f000 f960 	bl	21d28 <CC_PalPowerSaveModeSelect>
   21a68:	b960      	cbnz	r0, 21a84 <RndStartupTest.constprop.0+0x70>
   21a6a:	6828      	ldr	r0, [r5, #0]
   21a6c:	f000 f934 	bl	21cd8 <CC_PalMutexUnlock>
   21a70:	2800      	cmp	r0, #0
   21a72:	d0dc      	beq.n	21a2e <RndStartupTest.constprop.0+0x1a>
   21a74:	480a      	ldr	r0, [pc, #40]	; (21aa0 <RndStartupTest.constprop.0+0x8c>)
   21a76:	f7ff fa1b 	bl	20eb0 <CC_PalAbort>
   21a7a:	4620      	mov	r0, r4
   21a7c:	b00d      	add	sp, #52	; 0x34
   21a7e:	bd30      	pop	{r4, r5, pc}
   21a80:	2405      	movs	r4, #5
   21a82:	e7f2      	b.n	21a6a <RndStartupTest.constprop.0+0x56>
   21a84:	4807      	ldr	r0, [pc, #28]	; (21aa4 <RndStartupTest.constprop.0+0x90>)
   21a86:	f7ff fa13 	bl	20eb0 <CC_PalAbort>
   21a8a:	e7ee      	b.n	21a6a <RndStartupTest.constprop.0+0x56>
   21a8c:	4806      	ldr	r0, [pc, #24]	; (21aa8 <RndStartupTest.constprop.0+0x94>)
   21a8e:	f7ff fa0f 	bl	20eb0 <CC_PalAbort>
   21a92:	e7e0      	b.n	21a56 <RndStartupTest.constprop.0+0x42>
   21a94:	2000076c 	.word	0x2000076c
   21a98:	00028b6c 	.word	0x00028b6c
   21a9c:	20003a30 	.word	0x20003a30
   21aa0:	00028bc4 	.word	0x00028bc4
   21aa4:	00028ba4 	.word	0x00028ba4
   21aa8:	00028b84 	.word	0x00028b84

00021aac <CC_LibInit>:
   21aac:	b530      	push	{r4, r5, lr}
   21aae:	b083      	sub	sp, #12
   21ab0:	f000 f85c 	bl	21b6c <CC_HalInit>
   21ab4:	b128      	cbz	r0, 21ac2 <CC_LibInit+0x16>
   21ab6:	f000 f8ab 	bl	21c10 <CC_PalTerminate>
   21aba:	2403      	movs	r4, #3
   21abc:	4620      	mov	r0, r4
   21abe:	b003      	add	sp, #12
   21ac0:	bd30      	pop	{r4, r5, pc}
   21ac2:	f000 f877 	bl	21bb4 <CC_PalInit>
   21ac6:	b9d8      	cbnz	r0, 21b00 <CC_LibInit+0x54>
   21ac8:	f000 f92e 	bl	21d28 <CC_PalPowerSaveModeSelect>
   21acc:	b9e0      	cbnz	r0, 21b08 <CC_LibInit+0x5c>
   21ace:	4c22      	ldr	r4, [pc, #136]	; (21b58 <CC_LibInit+0xac>)
   21ad0:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   21ad4:	0e1b      	lsrs	r3, r3, #24
   21ad6:	2bf0      	cmp	r3, #240	; 0xf0
   21ad8:	d10a      	bne.n	21af0 <CC_LibInit+0x44>
   21ada:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   21ade:	4b1f      	ldr	r3, [pc, #124]	; (21b5c <CC_LibInit+0xb0>)
   21ae0:	429a      	cmp	r2, r3
   21ae2:	d031      	beq.n	21b48 <CC_LibInit+0x9c>
   21ae4:	f000 f844 	bl	21b70 <CC_HalTerminate>
   21ae8:	2407      	movs	r4, #7
   21aea:	f000 f891 	bl	21c10 <CC_PalTerminate>
   21aee:	e7e5      	b.n	21abc <CC_LibInit+0x10>
   21af0:	f000 f83e 	bl	21b70 <CC_HalTerminate>
   21af4:	f000 f88c 	bl	21c10 <CC_PalTerminate>
   21af8:	2406      	movs	r4, #6
   21afa:	4620      	mov	r0, r4
   21afc:	b003      	add	sp, #12
   21afe:	bd30      	pop	{r4, r5, pc}
   21b00:	2404      	movs	r4, #4
   21b02:	4620      	mov	r0, r4
   21b04:	b003      	add	sp, #12
   21b06:	bd30      	pop	{r4, r5, pc}
   21b08:	f000 f832 	bl	21b70 <CC_HalTerminate>
   21b0c:	f000 f880 	bl	21c10 <CC_PalTerminate>
   21b10:	f7ff ff80 	bl	21a14 <RndStartupTest.constprop.0>
   21b14:	4604      	mov	r4, r0
   21b16:	b998      	cbnz	r0, 21b40 <CC_LibInit+0x94>
   21b18:	4d11      	ldr	r5, [pc, #68]	; (21b60 <CC_LibInit+0xb4>)
   21b1a:	682b      	ldr	r3, [r5, #0]
   21b1c:	2b00      	cmp	r3, #0
   21b1e:	d1cd      	bne.n	21abc <CC_LibInit+0x10>
   21b20:	4602      	mov	r2, r0
   21b22:	4601      	mov	r1, r0
   21b24:	f7ff f9e6 	bl	20ef4 <nrf_cc3xx_platform_ctr_drbg_init>
   21b28:	b950      	cbnz	r0, 21b40 <CC_LibInit+0x94>
   21b2a:	490e      	ldr	r1, [pc, #56]	; (21b64 <CC_LibInit+0xb8>)
   21b2c:	ab01      	add	r3, sp, #4
   21b2e:	2268      	movs	r2, #104	; 0x68
   21b30:	f7ff fa10 	bl	20f54 <nrf_cc3xx_platform_ctr_drbg_get>
   21b34:	b920      	cbnz	r0, 21b40 <CC_LibInit+0x94>
   21b36:	4b0c      	ldr	r3, [pc, #48]	; (21b68 <CC_LibInit+0xbc>)
   21b38:	602b      	str	r3, [r5, #0]
   21b3a:	4620      	mov	r0, r4
   21b3c:	b003      	add	sp, #12
   21b3e:	bd30      	pop	{r4, r5, pc}
   21b40:	2405      	movs	r4, #5
   21b42:	4620      	mov	r0, r4
   21b44:	b003      	add	sp, #12
   21b46:	bd30      	pop	{r4, r5, pc}
   21b48:	2001      	movs	r0, #1
   21b4a:	f000 f8ed 	bl	21d28 <CC_PalPowerSaveModeSelect>
   21b4e:	2800      	cmp	r0, #0
   21b50:	d1da      	bne.n	21b08 <CC_LibInit+0x5c>
   21b52:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   21b56:	e7db      	b.n	21b10 <CC_LibInit+0x64>
   21b58:	5002b000 	.word	0x5002b000
   21b5c:	20e00000 	.word	0x20e00000
   21b60:	20003c50 	.word	0x20003c50
   21b64:	20003c54 	.word	0x20003c54
   21b68:	5a5aea5a 	.word	0x5a5aea5a

00021b6c <CC_HalInit>:
   21b6c:	2000      	movs	r0, #0
   21b6e:	4770      	bx	lr

00021b70 <CC_HalTerminate>:
   21b70:	2000      	movs	r0, #0
   21b72:	4770      	bx	lr

00021b74 <CC_HalClearInterruptBit>:
   21b74:	0543      	lsls	r3, r0, #21
   21b76:	d504      	bpl.n	21b82 <CC_HalClearInterruptBit+0xe>
   21b78:	4b04      	ldr	r3, [pc, #16]	; (21b8c <CC_HalClearInterruptBit+0x18>)
   21b7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21b7e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   21b82:	4b02      	ldr	r3, [pc, #8]	; (21b8c <CC_HalClearInterruptBit+0x18>)
   21b84:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   21b88:	4770      	bx	lr
   21b8a:	bf00      	nop
   21b8c:	5002b000 	.word	0x5002b000

00021b90 <CC_HalMaskInterrupt>:
   21b90:	4b01      	ldr	r3, [pc, #4]	; (21b98 <CC_HalMaskInterrupt+0x8>)
   21b92:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   21b96:	4770      	bx	lr
   21b98:	5002b000 	.word	0x5002b000

00021b9c <CC_HalWaitInterrupt>:
   21b9c:	b108      	cbz	r0, 21ba2 <CC_HalWaitInterrupt+0x6>
   21b9e:	f000 b86b 	b.w	21c78 <CC_PalWaitInterrupt>
   21ba2:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   21ba6:	4770      	bx	lr

00021ba8 <CC_HalWaitInterruptRND>:
   21ba8:	b108      	cbz	r0, 21bae <CC_HalWaitInterruptRND+0x6>
   21baa:	f000 b84f 	b.w	21c4c <CC_PalWaitInterruptRND>
   21bae:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   21bb2:	4770      	bx	lr

00021bb4 <CC_PalInit>:
   21bb4:	b510      	push	{r4, lr}
   21bb6:	4811      	ldr	r0, [pc, #68]	; (21bfc <CC_PalInit+0x48>)
   21bb8:	f000 f872 	bl	21ca0 <CC_PalMutexCreate>
   21bbc:	b100      	cbz	r0, 21bc0 <CC_PalInit+0xc>
   21bbe:	bd10      	pop	{r4, pc}
   21bc0:	480f      	ldr	r0, [pc, #60]	; (21c00 <CC_PalInit+0x4c>)
   21bc2:	f000 f86d 	bl	21ca0 <CC_PalMutexCreate>
   21bc6:	2800      	cmp	r0, #0
   21bc8:	d1f9      	bne.n	21bbe <CC_PalInit+0xa>
   21bca:	4c0e      	ldr	r4, [pc, #56]	; (21c04 <CC_PalInit+0x50>)
   21bcc:	4620      	mov	r0, r4
   21bce:	f000 f867 	bl	21ca0 <CC_PalMutexCreate>
   21bd2:	2800      	cmp	r0, #0
   21bd4:	d1f3      	bne.n	21bbe <CC_PalInit+0xa>
   21bd6:	4b0c      	ldr	r3, [pc, #48]	; (21c08 <CC_PalInit+0x54>)
   21bd8:	480c      	ldr	r0, [pc, #48]	; (21c0c <CC_PalInit+0x58>)
   21bda:	601c      	str	r4, [r3, #0]
   21bdc:	f000 f860 	bl	21ca0 <CC_PalMutexCreate>
   21be0:	4601      	mov	r1, r0
   21be2:	2800      	cmp	r0, #0
   21be4:	d1eb      	bne.n	21bbe <CC_PalInit+0xa>
   21be6:	f000 f82d 	bl	21c44 <CC_PalDmaInit>
   21bea:	4604      	mov	r4, r0
   21bec:	b108      	cbz	r0, 21bf2 <CC_PalInit+0x3e>
   21bee:	4620      	mov	r0, r4
   21bf0:	bd10      	pop	{r4, pc}
   21bf2:	f000 f87b 	bl	21cec <CC_PalPowerSaveModeInit>
   21bf6:	4620      	mov	r0, r4
   21bf8:	e7fa      	b.n	21bf0 <CC_PalInit+0x3c>
   21bfa:	bf00      	nop
   21bfc:	2000077c 	.word	0x2000077c
   21c00:	20000778 	.word	0x20000778
   21c04:	20000774 	.word	0x20000774
   21c08:	2000076c 	.word	0x2000076c
   21c0c:	20000770 	.word	0x20000770

00021c10 <CC_PalTerminate>:
   21c10:	b508      	push	{r3, lr}
   21c12:	4808      	ldr	r0, [pc, #32]	; (21c34 <CC_PalTerminate+0x24>)
   21c14:	f000 f84e 	bl	21cb4 <CC_PalMutexDestroy>
   21c18:	4807      	ldr	r0, [pc, #28]	; (21c38 <CC_PalTerminate+0x28>)
   21c1a:	f000 f84b 	bl	21cb4 <CC_PalMutexDestroy>
   21c1e:	4807      	ldr	r0, [pc, #28]	; (21c3c <CC_PalTerminate+0x2c>)
   21c20:	f000 f848 	bl	21cb4 <CC_PalMutexDestroy>
   21c24:	4806      	ldr	r0, [pc, #24]	; (21c40 <CC_PalTerminate+0x30>)
   21c26:	f000 f845 	bl	21cb4 <CC_PalMutexDestroy>
   21c2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   21c2e:	f000 b80b 	b.w	21c48 <CC_PalDmaTerminate>
   21c32:	bf00      	nop
   21c34:	2000077c 	.word	0x2000077c
   21c38:	20000778 	.word	0x20000778
   21c3c:	20000774 	.word	0x20000774
   21c40:	20000770 	.word	0x20000770

00021c44 <CC_PalDmaInit>:
   21c44:	2000      	movs	r0, #0
   21c46:	4770      	bx	lr

00021c48 <CC_PalDmaTerminate>:
   21c48:	4770      	bx	lr
   21c4a:	bf00      	nop

00021c4c <CC_PalWaitInterruptRND>:
   21c4c:	b410      	push	{r4}
   21c4e:	4c09      	ldr	r4, [pc, #36]	; (21c74 <CC_PalWaitInterruptRND+0x28>)
   21c50:	4602      	mov	r2, r0
   21c52:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   21c56:	4213      	tst	r3, r2
   21c58:	d0fb      	beq.n	21c52 <CC_PalWaitInterruptRND+0x6>
   21c5a:	b121      	cbz	r1, 21c66 <CC_PalWaitInterruptRND+0x1a>
   21c5c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   21c60:	600b      	str	r3, [r1, #0]
   21c62:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   21c66:	4b03      	ldr	r3, [pc, #12]	; (21c74 <CC_PalWaitInterruptRND+0x28>)
   21c68:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   21c6c:	2000      	movs	r0, #0
   21c6e:	bc10      	pop	{r4}
   21c70:	4770      	bx	lr
   21c72:	bf00      	nop
   21c74:	5002b000 	.word	0x5002b000

00021c78 <CC_PalWaitInterrupt>:
   21c78:	4a04      	ldr	r2, [pc, #16]	; (21c8c <CC_PalWaitInterrupt+0x14>)
   21c7a:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   21c7e:	4218      	tst	r0, r3
   21c80:	d0fb      	beq.n	21c7a <CC_PalWaitInterrupt+0x2>
   21c82:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   21c86:	2000      	movs	r0, #0
   21c88:	4770      	bx	lr
   21c8a:	bf00      	nop
   21c8c:	5002b000 	.word	0x5002b000

00021c90 <CC_PalMemCopyPlat>:
   21c90:	f002 be46 	b.w	24920 <memmove>

00021c94 <CC_PalMemSetPlat>:
   21c94:	f002 be66 	b.w	24964 <memset>

00021c98 <CC_PalMemSetZeroPlat>:
   21c98:	460a      	mov	r2, r1
   21c9a:	2100      	movs	r1, #0
   21c9c:	f002 be62 	b.w	24964 <memset>

00021ca0 <CC_PalMutexCreate>:
   21ca0:	b508      	push	{r3, lr}
   21ca2:	4b03      	ldr	r3, [pc, #12]	; (21cb0 <CC_PalMutexCreate+0x10>)
   21ca4:	6802      	ldr	r2, [r0, #0]
   21ca6:	681b      	ldr	r3, [r3, #0]
   21ca8:	6810      	ldr	r0, [r2, #0]
   21caa:	4798      	blx	r3
   21cac:	2000      	movs	r0, #0
   21cae:	bd08      	pop	{r3, pc}
   21cb0:	20000738 	.word	0x20000738

00021cb4 <CC_PalMutexDestroy>:
   21cb4:	b508      	push	{r3, lr}
   21cb6:	4b03      	ldr	r3, [pc, #12]	; (21cc4 <CC_PalMutexDestroy+0x10>)
   21cb8:	6802      	ldr	r2, [r0, #0]
   21cba:	685b      	ldr	r3, [r3, #4]
   21cbc:	6810      	ldr	r0, [r2, #0]
   21cbe:	4798      	blx	r3
   21cc0:	2000      	movs	r0, #0
   21cc2:	bd08      	pop	{r3, pc}
   21cc4:	20000738 	.word	0x20000738

00021cc8 <CC_PalMutexLock>:
   21cc8:	4b02      	ldr	r3, [pc, #8]	; (21cd4 <CC_PalMutexLock+0xc>)
   21cca:	6802      	ldr	r2, [r0, #0]
   21ccc:	689b      	ldr	r3, [r3, #8]
   21cce:	6810      	ldr	r0, [r2, #0]
   21cd0:	4718      	bx	r3
   21cd2:	bf00      	nop
   21cd4:	20000738 	.word	0x20000738

00021cd8 <CC_PalMutexUnlock>:
   21cd8:	b508      	push	{r3, lr}
   21cda:	4b03      	ldr	r3, [pc, #12]	; (21ce8 <CC_PalMutexUnlock+0x10>)
   21cdc:	6802      	ldr	r2, [r0, #0]
   21cde:	68db      	ldr	r3, [r3, #12]
   21ce0:	6810      	ldr	r0, [r2, #0]
   21ce2:	4798      	blx	r3
   21ce4:	2000      	movs	r0, #0
   21ce6:	bd08      	pop	{r3, pc}
   21ce8:	20000738 	.word	0x20000738

00021cec <CC_PalPowerSaveModeInit>:
   21cec:	b570      	push	{r4, r5, r6, lr}
   21cee:	4c09      	ldr	r4, [pc, #36]	; (21d14 <CC_PalPowerSaveModeInit+0x28>)
   21cf0:	4d09      	ldr	r5, [pc, #36]	; (21d18 <CC_PalPowerSaveModeInit+0x2c>)
   21cf2:	6920      	ldr	r0, [r4, #16]
   21cf4:	68ab      	ldr	r3, [r5, #8]
   21cf6:	4798      	blx	r3
   21cf8:	b118      	cbz	r0, 21d02 <CC_PalPowerSaveModeInit+0x16>
   21cfa:	4b08      	ldr	r3, [pc, #32]	; (21d1c <CC_PalPowerSaveModeInit+0x30>)
   21cfc:	4808      	ldr	r0, [pc, #32]	; (21d20 <CC_PalPowerSaveModeInit+0x34>)
   21cfe:	685b      	ldr	r3, [r3, #4]
   21d00:	4798      	blx	r3
   21d02:	4a08      	ldr	r2, [pc, #32]	; (21d24 <CC_PalPowerSaveModeInit+0x38>)
   21d04:	68eb      	ldr	r3, [r5, #12]
   21d06:	6920      	ldr	r0, [r4, #16]
   21d08:	2100      	movs	r1, #0
   21d0a:	6011      	str	r1, [r2, #0]
   21d0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21d10:	4718      	bx	r3
   21d12:	bf00      	nop
   21d14:	20000724 	.word	0x20000724
   21d18:	20000738 	.word	0x20000738
   21d1c:	2000071c 	.word	0x2000071c
   21d20:	00028bdc 	.word	0x00028bdc
   21d24:	20003cbc 	.word	0x20003cbc

00021d28 <CC_PalPowerSaveModeSelect>:
   21d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21d2a:	4d1a      	ldr	r5, [pc, #104]	; (21d94 <CC_PalPowerSaveModeSelect+0x6c>)
   21d2c:	4e1a      	ldr	r6, [pc, #104]	; (21d98 <CC_PalPowerSaveModeSelect+0x70>)
   21d2e:	4604      	mov	r4, r0
   21d30:	68b2      	ldr	r2, [r6, #8]
   21d32:	6928      	ldr	r0, [r5, #16]
   21d34:	4790      	blx	r2
   21d36:	b9e8      	cbnz	r0, 21d74 <CC_PalPowerSaveModeSelect+0x4c>
   21d38:	4f18      	ldr	r7, [pc, #96]	; (21d9c <CC_PalPowerSaveModeSelect+0x74>)
   21d3a:	683b      	ldr	r3, [r7, #0]
   21d3c:	b14c      	cbz	r4, 21d52 <CC_PalPowerSaveModeSelect+0x2a>
   21d3e:	b1a3      	cbz	r3, 21d6a <CC_PalPowerSaveModeSelect+0x42>
   21d40:	2b01      	cmp	r3, #1
   21d42:	d019      	beq.n	21d78 <CC_PalPowerSaveModeSelect+0x50>
   21d44:	3b01      	subs	r3, #1
   21d46:	603b      	str	r3, [r7, #0]
   21d48:	6928      	ldr	r0, [r5, #16]
   21d4a:	68f3      	ldr	r3, [r6, #12]
   21d4c:	4798      	blx	r3
   21d4e:	2000      	movs	r0, #0
   21d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21d52:	b943      	cbnz	r3, 21d66 <CC_PalPowerSaveModeSelect+0x3e>
   21d54:	4a12      	ldr	r2, [pc, #72]	; (21da0 <CC_PalPowerSaveModeSelect+0x78>)
   21d56:	2101      	movs	r1, #1
   21d58:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   21d5c:	4911      	ldr	r1, [pc, #68]	; (21da4 <CC_PalPowerSaveModeSelect+0x7c>)
   21d5e:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   21d62:	2a00      	cmp	r2, #0
   21d64:	d1fb      	bne.n	21d5e <CC_PalPowerSaveModeSelect+0x36>
   21d66:	3301      	adds	r3, #1
   21d68:	603b      	str	r3, [r7, #0]
   21d6a:	68f3      	ldr	r3, [r6, #12]
   21d6c:	6928      	ldr	r0, [r5, #16]
   21d6e:	4798      	blx	r3
   21d70:	2000      	movs	r0, #0
   21d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21d74:	480c      	ldr	r0, [pc, #48]	; (21da8 <CC_PalPowerSaveModeSelect+0x80>)
   21d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21d78:	4a0a      	ldr	r2, [pc, #40]	; (21da4 <CC_PalPowerSaveModeSelect+0x7c>)
   21d7a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   21d7e:	2b00      	cmp	r3, #0
   21d80:	d1fb      	bne.n	21d7a <CC_PalPowerSaveModeSelect+0x52>
   21d82:	4a07      	ldr	r2, [pc, #28]	; (21da0 <CC_PalPowerSaveModeSelect+0x78>)
   21d84:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   21d88:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   21d8c:	f7ff ff00 	bl	21b90 <CC_HalMaskInterrupt>
   21d90:	683b      	ldr	r3, [r7, #0]
   21d92:	e7d7      	b.n	21d44 <CC_PalPowerSaveModeSelect+0x1c>
   21d94:	20000724 	.word	0x20000724
   21d98:	20000738 	.word	0x20000738
   21d9c:	20003cbc 	.word	0x20003cbc
   21da0:	5002a000 	.word	0x5002a000
   21da4:	5002b000 	.word	0x5002b000
   21da8:	ffff8fe9 	.word	0xffff8fe9

00021dac <mutex_init>:
   21dac:	4b01      	ldr	r3, [pc, #4]	; (21db4 <mutex_init+0x8>)
   21dae:	681b      	ldr	r3, [r3, #0]
   21db0:	4718      	bx	r3
   21db2:	bf00      	nop
   21db4:	20000738 	.word	0x20000738

00021db8 <mutex_lock>:
   21db8:	4b01      	ldr	r3, [pc, #4]	; (21dc0 <mutex_lock+0x8>)
   21dba:	689b      	ldr	r3, [r3, #8]
   21dbc:	4718      	bx	r3
   21dbe:	bf00      	nop
   21dc0:	20000738 	.word	0x20000738

00021dc4 <mutex_unlock>:
   21dc4:	4b01      	ldr	r3, [pc, #4]	; (21dcc <mutex_unlock+0x8>)
   21dc6:	68db      	ldr	r3, [r3, #12]
   21dc8:	4718      	bx	r3
   21dca:	bf00      	nop
   21dcc:	20000738 	.word	0x20000738

00021dd0 <startTrngHW>:
   21dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21dd4:	2800      	cmp	r0, #0
   21dd6:	d078      	beq.n	21eca <startTrngHW+0xfa>
   21dd8:	460c      	mov	r4, r1
   21dda:	2900      	cmp	r1, #0
   21ddc:	d075      	beq.n	21eca <startTrngHW+0xfa>
   21dde:	461d      	mov	r5, r3
   21de0:	2b00      	cmp	r3, #0
   21de2:	d072      	beq.n	21eca <startTrngHW+0xfa>
   21de4:	4607      	mov	r7, r0
   21de6:	b11a      	cbz	r2, 21df0 <startTrngHW+0x20>
   21de8:	2201      	movs	r2, #1
   21dea:	2300      	movs	r3, #0
   21dec:	602a      	str	r2, [r5, #0]
   21dee:	6003      	str	r3, [r0, #0]
   21df0:	682b      	ldr	r3, [r5, #0]
   21df2:	2b00      	cmp	r3, #0
   21df4:	d064      	beq.n	21ec0 <startTrngHW+0xf0>
   21df6:	4629      	mov	r1, r5
   21df8:	4620      	mov	r0, r4
   21dfa:	f000 fddb 	bl	229b4 <LLF_RND_GetFastestRosc>
   21dfe:	4680      	mov	r8, r0
   21e00:	2800      	cmp	r0, #0
   21e02:	d15f      	bne.n	21ec4 <startTrngHW+0xf4>
   21e04:	6828      	ldr	r0, [r5, #0]
   21e06:	4621      	mov	r1, r4
   21e08:	f000 fdba 	bl	22980 <LLF_RND_GetRoscSampleCnt>
   21e0c:	4680      	mov	r8, r0
   21e0e:	2800      	cmp	r0, #0
   21e10:	d158      	bne.n	21ec4 <startTrngHW+0xf4>
   21e12:	682b      	ldr	r3, [r5, #0]
   21e14:	2b08      	cmp	r3, #8
   21e16:	d06c      	beq.n	21ef2 <startTrngHW+0x122>
   21e18:	2b04      	cmp	r3, #4
   21e1a:	d06d      	beq.n	21ef8 <startTrngHW+0x128>
   21e1c:	f1a3 0902 	sub.w	r9, r3, #2
   21e20:	fab9 f989 	clz	r9, r9
   21e24:	ea4f 1959 	mov.w	r9, r9, lsr #5
   21e28:	4e35      	ldr	r6, [pc, #212]	; (21f00 <startTrngHW+0x130>)
   21e2a:	2101      	movs	r1, #1
   21e2c:	f8c6 11c4 	str.w	r1, [r6, #452]	; 0x1c4
   21e30:	f8c6 1140 	str.w	r1, [r6, #320]	; 0x140
   21e34:	f8c6 11c4 	str.w	r1, [r6, #452]	; 0x1c4
   21e38:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21e3a:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
   21e3e:	f8d6 2130 	ldr.w	r2, [r6, #304]	; 0x130
   21e42:	4293      	cmp	r3, r2
   21e44:	d1f6      	bne.n	21e34 <startTrngHW+0x64>
   21e46:	f04f 0a00 	mov.w	sl, #0
   21e4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21e4e:	f8c6 a12c 	str.w	sl, [r6, #300]	; 0x12c
   21e52:	f7ff fe8f 	bl	21b74 <CC_HalClearInterruptBit>
   21e56:	f06f 031b 	mvn.w	r3, #27
   21e5a:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
   21e5e:	4650      	mov	r0, sl
   21e60:	f7ff fe96 	bl	21b90 <CC_HalMaskInterrupt>
   21e64:	f8c6 910c 	str.w	r9, [r6, #268]	; 0x10c
   21e68:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   21e6c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   21e70:	f7ff fe8e 	bl	21b90 <CC_HalMaskInterrupt>
   21e74:	230a      	movs	r3, #10
   21e76:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
   21e7a:	9b08      	ldr	r3, [sp, #32]
   21e7c:	2b01      	cmp	r3, #1
   21e7e:	d029      	beq.n	21ed4 <startTrngHW+0x104>
   21e80:	6923      	ldr	r3, [r4, #16]
   21e82:	4a20      	ldr	r2, [pc, #128]	; (21f04 <startTrngHW+0x134>)
   21e84:	fba2 2303 	umull	r2, r3, r2, r3
   21e88:	091b      	lsrs	r3, r3, #4
   21e8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   21e8c:	fb02 f303 	mul.w	r3, r2, r3
   21e90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   21e94:	4a1a      	ldr	r2, [pc, #104]	; (21f00 <startTrngHW+0x130>)
   21e96:	03db      	lsls	r3, r3, #15
   21e98:	099b      	lsrs	r3, r3, #6
   21e9a:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8
   21e9e:	2301      	movs	r3, #1
   21ea0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
   21ea4:	683b      	ldr	r3, [r7, #0]
   21ea6:	682a      	ldr	r2, [r5, #0]
   21ea8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   21eac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   21eb0:	603b      	str	r3, [r7, #0]
   21eb2:	682a      	ldr	r2, [r5, #0]
   21eb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   21eb8:	603b      	str	r3, [r7, #0]
   21eba:	4640      	mov	r0, r8
   21ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21ec0:	f8df 8044 	ldr.w	r8, [pc, #68]	; 21f08 <startTrngHW+0x138>
   21ec4:	4640      	mov	r0, r8
   21ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21eca:	f8df 8040 	ldr.w	r8, [pc, #64]	; 21f0c <startTrngHW+0x13c>
   21ece:	4640      	mov	r0, r8
   21ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   21ed8:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
   21edc:	3201      	adds	r2, #1
   21ede:	d006      	beq.n	21eee <startTrngHW+0x11e>
   21ee0:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   21ee4:	4a07      	ldr	r2, [pc, #28]	; (21f04 <startTrngHW+0x134>)
   21ee6:	fba2 2303 	umull	r2, r3, r2, r3
   21eea:	091b      	lsrs	r3, r3, #4
   21eec:	e7cd      	b.n	21e8a <startTrngHW+0xba>
   21eee:	2316      	movs	r3, #22
   21ef0:	e7cb      	b.n	21e8a <startTrngHW+0xba>
   21ef2:	f04f 0903 	mov.w	r9, #3
   21ef6:	e797      	b.n	21e28 <startTrngHW+0x58>
   21ef8:	f04f 0902 	mov.w	r9, #2
   21efc:	e794      	b.n	21e28 <startTrngHW+0x58>
   21efe:	bf00      	nop
   21f00:	5002b000 	.word	0x5002b000
   21f04:	aaaaaaab 	.word	0xaaaaaaab
   21f08:	00f10c31 	.word	0x00f10c31
   21f0c:	00f10c35 	.word	0x00f10c35

00021f10 <LLF_RND_RepetitionCounterTest>:
   21f10:	b350      	cbz	r0, 21f68 <LLF_RND_RepetitionCounterTest+0x58>
   21f12:	1e4b      	subs	r3, r1, #1
   21f14:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   21f18:	d226      	bcs.n	21f68 <LLF_RND_RepetitionCounterTest+0x58>
   21f1a:	f04f 0c00 	mov.w	ip, #0
   21f1e:	b530      	push	{r4, r5, lr}
   21f20:	00cd      	lsls	r5, r1, #3
   21f22:	46e6      	mov	lr, ip
   21f24:	4664      	mov	r4, ip
   21f26:	0963      	lsrs	r3, r4, #5
   21f28:	f004 011f 	and.w	r1, r4, #31
   21f2c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   21f30:	291f      	cmp	r1, #31
   21f32:	fa23 f301 	lsr.w	r3, r3, r1
   21f36:	d006      	beq.n	21f46 <LLF_RND_RepetitionCounterTest+0x36>
   21f38:	f003 0301 	and.w	r3, r3, #1
   21f3c:	b91c      	cbnz	r4, 21f46 <LLF_RND_RepetitionCounterTest+0x36>
   21f3e:	2401      	movs	r4, #1
   21f40:	469e      	mov	lr, r3
   21f42:	46a4      	mov	ip, r4
   21f44:	e7ef      	b.n	21f26 <LLF_RND_RepetitionCounterTest+0x16>
   21f46:	459e      	cmp	lr, r3
   21f48:	f104 0401 	add.w	r4, r4, #1
   21f4c:	d006      	beq.n	21f5c <LLF_RND_RepetitionCounterTest+0x4c>
   21f4e:	469e      	mov	lr, r3
   21f50:	f04f 0c01 	mov.w	ip, #1
   21f54:	42ac      	cmp	r4, r5
   21f56:	d1e6      	bne.n	21f26 <LLF_RND_RepetitionCounterTest+0x16>
   21f58:	2000      	movs	r0, #0
   21f5a:	bd30      	pop	{r4, r5, pc}
   21f5c:	f10c 0c01 	add.w	ip, ip, #1
   21f60:	4594      	cmp	ip, r2
   21f62:	d1f7      	bne.n	21f54 <LLF_RND_RepetitionCounterTest+0x44>
   21f64:	4801      	ldr	r0, [pc, #4]	; (21f6c <LLF_RND_RepetitionCounterTest+0x5c>)
   21f66:	bd30      	pop	{r4, r5, pc}
   21f68:	4800      	ldr	r0, [pc, #0]	; (21f6c <LLF_RND_RepetitionCounterTest+0x5c>)
   21f6a:	4770      	bx	lr
   21f6c:	00f10c36 	.word	0x00f10c36

00021f70 <LLF_RND_AdaptiveProportionTest>:
   21f70:	b3c8      	cbz	r0, 21fe6 <LLF_RND_AdaptiveProportionTest+0x76>
   21f72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21f76:	1e4c      	subs	r4, r1, #1
   21f78:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   21f7c:	d21c      	bcs.n	21fb8 <LLF_RND_AdaptiveProportionTest+0x48>
   21f7e:	b1db      	cbz	r3, 21fb8 <LLF_RND_AdaptiveProportionTest+0x48>
   21f80:	b1d2      	cbz	r2, 21fb8 <LLF_RND_AdaptiveProportionTest+0x48>
   21f82:	f04f 0e00 	mov.w	lr, #0
   21f86:	00cf      	lsls	r7, r1, #3
   21f88:	4676      	mov	r6, lr
   21f8a:	46f0      	mov	r8, lr
   21f8c:	4675      	mov	r5, lr
   21f8e:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   21f92:	096c      	lsrs	r4, r5, #5
   21f94:	f005 011f 	and.w	r1, r5, #31
   21f98:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   21f9c:	291f      	cmp	r1, #31
   21f9e:	fa24 fc01 	lsr.w	ip, r4, r1
   21fa2:	d00c      	beq.n	21fbe <LLF_RND_AdaptiveProportionTest+0x4e>
   21fa4:	f00c 0c01 	and.w	ip, ip, #1
   21fa8:	b94d      	cbnz	r5, 21fbe <LLF_RND_AdaptiveProportionTest+0x4e>
   21faa:	2601      	movs	r6, #1
   21fac:	46e0      	mov	r8, ip
   21fae:	4635      	mov	r5, r6
   21fb0:	46b6      	mov	lr, r6
   21fb2:	e7ee      	b.n	21f92 <LLF_RND_AdaptiveProportionTest+0x22>
   21fb4:	4296      	cmp	r6, r2
   21fb6:	d918      	bls.n	21fea <LLF_RND_AdaptiveProportionTest+0x7a>
   21fb8:	480d      	ldr	r0, [pc, #52]	; (21ff0 <LLF_RND_AdaptiveProportionTest+0x80>)
   21fba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21fbe:	4573      	cmp	r3, lr
   21fc0:	d00c      	beq.n	21fdc <LLF_RND_AdaptiveProportionTest+0x6c>
   21fc2:	45c4      	cmp	ip, r8
   21fc4:	bf08      	it	eq
   21fc6:	3601      	addeq	r6, #1
   21fc8:	45f1      	cmp	r9, lr
   21fca:	d0f3      	beq.n	21fb4 <LLF_RND_AdaptiveProportionTest+0x44>
   21fcc:	f10e 0e01 	add.w	lr, lr, #1
   21fd0:	3501      	adds	r5, #1
   21fd2:	42bd      	cmp	r5, r7
   21fd4:	d1dd      	bne.n	21f92 <LLF_RND_AdaptiveProportionTest+0x22>
   21fd6:	2000      	movs	r0, #0
   21fd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21fdc:	f04f 0e01 	mov.w	lr, #1
   21fe0:	46e0      	mov	r8, ip
   21fe2:	4676      	mov	r6, lr
   21fe4:	e7f4      	b.n	21fd0 <LLF_RND_AdaptiveProportionTest+0x60>
   21fe6:	4802      	ldr	r0, [pc, #8]	; (21ff0 <LLF_RND_AdaptiveProportionTest+0x80>)
   21fe8:	4770      	bx	lr
   21fea:	469e      	mov	lr, r3
   21fec:	e7f0      	b.n	21fd0 <LLF_RND_AdaptiveProportionTest+0x60>
   21fee:	bf00      	nop
   21ff0:	00f10c37 	.word	0x00f10c37

00021ff4 <getTrngSource>:
   21ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21ff8:	b091      	sub	sp, #68	; 0x44
   21ffa:	460d      	mov	r5, r1
   21ffc:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   22000:	4682      	mov	sl, r0
   22002:	2900      	cmp	r1, #0
   22004:	d16e      	bne.n	220e4 <getTrngSource+0xf0>
   22006:	6928      	ldr	r0, [r5, #16]
   22008:	9006      	str	r0, [sp, #24]
   2200a:	981a      	ldr	r0, [sp, #104]	; 0x68
   2200c:	601c      	str	r4, [r3, #0]
   2200e:	2300      	movs	r3, #0
   22010:	6003      	str	r3, [r0, #0]
   22012:	2a00      	cmp	r2, #0
   22014:	f000 812e 	beq.w	22274 <getTrngSource+0x280>
   22018:	4b9c      	ldr	r3, [pc, #624]	; (2228c <getTrngSource+0x298>)
   2201a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   2201c:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   22020:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   22024:	429a      	cmp	r2, r3
   22026:	d169      	bne.n	220fc <getTrngSource+0x108>
   22028:	290a      	cmp	r1, #10
   2202a:	d167      	bne.n	220fc <getTrngSource+0x108>
   2202c:	f89a 3003 	ldrb.w	r3, [sl, #3]
   22030:	9308      	str	r3, [sp, #32]
   22032:	f104 0308 	add.w	r3, r4, #8
   22036:	9906      	ldr	r1, [sp, #24]
   22038:	9307      	str	r3, [sp, #28]
   2203a:	4b95      	ldr	r3, [pc, #596]	; (22290 <getTrngSource+0x29c>)
   2203c:	4c93      	ldr	r4, [pc, #588]	; (2228c <getTrngSource+0x298>)
   2203e:	fba3 2301 	umull	r2, r3, r3, r1
   22042:	089b      	lsrs	r3, r3, #2
   22044:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   22048:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
   2204c:	9303      	str	r3, [sp, #12]
   2204e:	2304      	movs	r3, #4
   22050:	9305      	str	r3, [sp, #20]
   22052:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   22054:	9e06      	ldr	r6, [sp, #24]
   22056:	601e      	str	r6, [r3, #0]
   22058:	2e00      	cmp	r6, #0
   2205a:	f000 80e9 	beq.w	22230 <getTrngSource+0x23c>
   2205e:	2700      	movs	r7, #0
   22060:	f000 fcb8 	bl	229d4 <LLF_RND_TurnOffTrng>
   22064:	9709      	str	r7, [sp, #36]	; 0x24
   22066:	f1ba 0f00 	cmp.w	sl, #0
   2206a:	f000 80d5 	beq.w	22218 <getTrngSource+0x224>
   2206e:	f8dd 801c 	ldr.w	r8, [sp, #28]
   22072:	f04f 0901 	mov.w	r9, #1
   22076:	2d00      	cmp	r5, #0
   22078:	f000 80ce 	beq.w	22218 <getTrngSource+0x224>
   2207c:	9b08      	ldr	r3, [sp, #32]
   2207e:	2b00      	cmp	r3, #0
   22080:	d03e      	beq.n	22100 <getTrngSource+0x10c>
   22082:	a908      	add	r1, sp, #32
   22084:	4628      	mov	r0, r5
   22086:	f000 fc95 	bl	229b4 <LLF_RND_GetFastestRosc>
   2208a:	2800      	cmp	r0, #0
   2208c:	d03a      	beq.n	22104 <getTrngSource+0x110>
   2208e:	4b81      	ldr	r3, [pc, #516]	; (22294 <getTrngSource+0x2a0>)
   22090:	4298      	cmp	r0, r3
   22092:	d020      	beq.n	220d6 <getTrngSource+0xe2>
   22094:	9b08      	ldr	r3, [sp, #32]
   22096:	2b08      	cmp	r3, #8
   22098:	f000 80e4 	beq.w	22264 <getTrngSource+0x270>
   2209c:	005b      	lsls	r3, r3, #1
   2209e:	2200      	movs	r2, #0
   220a0:	9308      	str	r3, [sp, #32]
   220a2:	9200      	str	r2, [sp, #0]
   220a4:	ab08      	add	r3, sp, #32
   220a6:	4629      	mov	r1, r5
   220a8:	4650      	mov	r0, sl
   220aa:	f7ff fe91 	bl	21dd0 <startTrngHW>
   220ae:	4b7a      	ldr	r3, [pc, #488]	; (22298 <getTrngSource+0x2a4>)
   220b0:	4298      	cmp	r0, r3
   220b2:	f000 80d3 	beq.w	2225c <getTrngSource+0x268>
   220b6:	b970      	cbnz	r0, 220d6 <getTrngSource+0xe2>
   220b8:	f8da 2000 	ldr.w	r2, [sl]
   220bc:	0a13      	lsrs	r3, r2, #8
   220be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   220c2:	4313      	orrs	r3, r2
   220c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   220c8:	f8ca 3000 	str.w	r3, [sl]
   220cc:	9b05      	ldr	r3, [sp, #20]
   220ce:	3b01      	subs	r3, #1
   220d0:	9305      	str	r3, [sp, #20]
   220d2:	d1be      	bne.n	22052 <getTrngSource+0x5e>
   220d4:	2000      	movs	r0, #0
   220d6:	9003      	str	r0, [sp, #12]
   220d8:	f000 fc7c 	bl	229d4 <LLF_RND_TurnOffTrng>
   220dc:	9803      	ldr	r0, [sp, #12]
   220de:	b011      	add	sp, #68	; 0x44
   220e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   220e4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   220e8:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   220ec:	3601      	adds	r6, #1
   220ee:	bf14      	ite	ne
   220f0:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   220f4:	f44f 7004 	moveq.w	r0, #528	; 0x210
   220f8:	9006      	str	r0, [sp, #24]
   220fa:	e786      	b.n	2200a <getTrngSource+0x16>
   220fc:	4867      	ldr	r0, [pc, #412]	; (2229c <getTrngSource+0x2a8>)
   220fe:	e7ea      	b.n	220d6 <getTrngSource+0xe2>
   22100:	4865      	ldr	r0, [pc, #404]	; (22298 <getTrngSource+0x2a4>)
   22102:	e7c4      	b.n	2208e <getTrngSource+0x9a>
   22104:	9808      	ldr	r0, [sp, #32]
   22106:	4629      	mov	r1, r5
   22108:	f000 fc3a 	bl	22980 <LLF_RND_GetRoscSampleCnt>
   2210c:	2800      	cmp	r0, #0
   2210e:	d1be      	bne.n	2208e <getTrngSource+0x9a>
   22110:	9b08      	ldr	r3, [sp, #32]
   22112:	2b08      	cmp	r3, #8
   22114:	f000 80a8 	beq.w	22268 <getTrngSource+0x274>
   22118:	2b04      	cmp	r3, #4
   2211a:	f000 80a8 	beq.w	2226e <getTrngSource+0x27a>
   2211e:	f1a3 0302 	sub.w	r3, r3, #2
   22122:	fab3 f383 	clz	r3, r3
   22126:	095b      	lsrs	r3, r3, #5
   22128:	9304      	str	r3, [sp, #16]
   2212a:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   2212e:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
   22132:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   22136:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   22138:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   2213c:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   22140:	4293      	cmp	r3, r2
   22142:	d1f6      	bne.n	22132 <getTrngSource+0x13e>
   22144:	f04f 0b00 	mov.w	fp, #0
   22148:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   2214c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22150:	f7ff fd10 	bl	21b74 <CC_HalClearInterruptBit>
   22154:	f06f 031b 	mvn.w	r3, #27
   22158:	4658      	mov	r0, fp
   2215a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   2215e:	f7ff fd17 	bl	21b90 <CC_HalMaskInterrupt>
   22162:	9b04      	ldr	r3, [sp, #16]
   22164:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   22168:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   2216c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   22170:	f7ff fd0e 	bl	21b90 <CC_HalMaskInterrupt>
   22174:	230a      	movs	r3, #10
   22176:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   2217a:	692b      	ldr	r3, [r5, #16]
   2217c:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   22180:	fbab 2303 	umull	r2, r3, fp, r3
   22184:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   22186:	091b      	lsrs	r3, r3, #4
   22188:	fb02 f303 	mul.w	r3, r2, r3
   2218c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   22190:	03db      	lsls	r3, r3, #15
   22192:	099b      	lsrs	r3, r3, #6
   22194:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   22198:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
   2219c:	f8da 3000 	ldr.w	r3, [sl]
   221a0:	9908      	ldr	r1, [sp, #32]
   221a2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   221a6:	020b      	lsls	r3, r1, #8
   221a8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   221ac:	4313      	orrs	r3, r2
   221ae:	f8ca 3000 	str.w	r3, [sl]
   221b2:	a809      	add	r0, sp, #36	; 0x24
   221b4:	f000 fbd4 	bl	22960 <LLF_RND_WaitRngInterrupt>
   221b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   221ba:	f003 031a 	and.w	r3, r3, #26
   221be:	4303      	orrs	r3, r0
   221c0:	f47f af68 	bne.w	22094 <getTrngSource+0xa0>
   221c4:	fbab 3b06 	umull	r3, fp, fp, r6
   221c8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   221cc:	930a      	str	r3, [sp, #40]	; 0x28
   221ce:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   221d2:	930b      	str	r3, [sp, #44]	; 0x2c
   221d4:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   221d8:	930c      	str	r3, [sp, #48]	; 0x30
   221da:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   221de:	930d      	str	r3, [sp, #52]	; 0x34
   221e0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   221e4:	930e      	str	r3, [sp, #56]	; 0x38
   221e6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   221ea:	930f      	str	r3, [sp, #60]	; 0x3c
   221ec:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   221f0:	d101      	bne.n	221f6 <getTrngSource+0x202>
   221f2:	9b03      	ldr	r3, [sp, #12]
   221f4:	b993      	cbnz	r3, 2221c <getTrngSource+0x228>
   221f6:	4640      	mov	r0, r8
   221f8:	2218      	movs	r2, #24
   221fa:	a90a      	add	r1, sp, #40	; 0x28
   221fc:	3e18      	subs	r6, #24
   221fe:	f7ff fd47 	bl	21c90 <CC_PalMemCopyPlat>
   22202:	f108 0818 	add.w	r8, r8, #24
   22206:	3701      	adds	r7, #1
   22208:	b196      	cbz	r6, 22230 <getTrngSource+0x23c>
   2220a:	f000 fbe3 	bl	229d4 <LLF_RND_TurnOffTrng>
   2220e:	2300      	movs	r3, #0
   22210:	9309      	str	r3, [sp, #36]	; 0x24
   22212:	2d00      	cmp	r5, #0
   22214:	f47f af32 	bne.w	2207c <getTrngSource+0x88>
   22218:	4821      	ldr	r0, [pc, #132]	; (222a0 <getTrngSource+0x2ac>)
   2221a:	e738      	b.n	2208e <getTrngSource+0x9a>
   2221c:	4640      	mov	r0, r8
   2221e:	1af6      	subs	r6, r6, r3
   22220:	461a      	mov	r2, r3
   22222:	a90a      	add	r1, sp, #40	; 0x28
   22224:	4498      	add	r8, r3
   22226:	3701      	adds	r7, #1
   22228:	f7ff fd32 	bl	21c90 <CC_PalMemCopyPlat>
   2222c:	2e00      	cmp	r6, #0
   2222e:	d1ec      	bne.n	2220a <getTrngSource+0x216>
   22230:	9f06      	ldr	r7, [sp, #24]
   22232:	9e07      	ldr	r6, [sp, #28]
   22234:	696a      	ldr	r2, [r5, #20]
   22236:	4639      	mov	r1, r7
   22238:	4630      	mov	r0, r6
   2223a:	f7ff fe69 	bl	21f10 <LLF_RND_RepetitionCounterTest>
   2223e:	69aa      	ldr	r2, [r5, #24]
   22240:	b940      	cbnz	r0, 22254 <getTrngSource+0x260>
   22242:	f44f 6380 	mov.w	r3, #1024	; 0x400
   22246:	4639      	mov	r1, r7
   22248:	4630      	mov	r0, r6
   2224a:	f7ff fe91 	bl	21f70 <LLF_RND_AdaptiveProportionTest>
   2224e:	2800      	cmp	r0, #0
   22250:	f43f af40 	beq.w	220d4 <getTrngSource+0xe0>
   22254:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   22256:	2300      	movs	r3, #0
   22258:	6013      	str	r3, [r2, #0]
   2225a:	e718      	b.n	2208e <getTrngSource+0x9a>
   2225c:	6a2b      	ldr	r3, [r5, #32]
   2225e:	2b00      	cmp	r3, #0
   22260:	f43f af39 	beq.w	220d6 <getTrngSource+0xe2>
   22264:	480f      	ldr	r0, [pc, #60]	; (222a4 <getTrngSource+0x2b0>)
   22266:	e736      	b.n	220d6 <getTrngSource+0xe2>
   22268:	2303      	movs	r3, #3
   2226a:	9304      	str	r3, [sp, #16]
   2226c:	e75d      	b.n	2212a <getTrngSource+0x136>
   2226e:	2302      	movs	r3, #2
   22270:	9304      	str	r3, [sp, #16]
   22272:	e75a      	b.n	2212a <getTrngSource+0x136>
   22274:	9100      	str	r1, [sp, #0]
   22276:	ab08      	add	r3, sp, #32
   22278:	2201      	movs	r2, #1
   2227a:	4629      	mov	r1, r5
   2227c:	4650      	mov	r0, sl
   2227e:	f7ff fda7 	bl	21dd0 <startTrngHW>
   22282:	2800      	cmp	r0, #0
   22284:	f43f aed5 	beq.w	22032 <getTrngSource+0x3e>
   22288:	e725      	b.n	220d6 <getTrngSource+0xe2>
   2228a:	bf00      	nop
   2228c:	5002b000 	.word	0x5002b000
   22290:	aaaaaaab 	.word	0xaaaaaaab
   22294:	00f10c02 	.word	0x00f10c02
   22298:	00f10c31 	.word	0x00f10c31
   2229c:	00f10c30 	.word	0x00f10c30
   222a0:	00f10c35 	.word	0x00f10c35
   222a4:	00f10c32 	.word	0x00f10c32

000222a8 <LLF_RND_GetTrngSource>:
   222a8:	b410      	push	{r4}
   222aa:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   222ae:	9401      	str	r4, [sp, #4]
   222b0:	9c03      	ldr	r4, [sp, #12]
   222b2:	9402      	str	r4, [sp, #8]
   222b4:	2400      	movs	r4, #0
   222b6:	9403      	str	r4, [sp, #12]
   222b8:	bc10      	pop	{r4}
   222ba:	f7ff be9b 	b.w	21ff4 <getTrngSource>
   222be:	bf00      	nop

000222c0 <LLF_RND_RunTrngStartupTest>:
   222c0:	b510      	push	{r4, lr}
   222c2:	b086      	sub	sp, #24
   222c4:	ab05      	add	r3, sp, #20
   222c6:	2401      	movs	r4, #1
   222c8:	e9cd 2401 	strd	r2, r4, [sp, #4]
   222cc:	9300      	str	r3, [sp, #0]
   222ce:	2200      	movs	r2, #0
   222d0:	ab04      	add	r3, sp, #16
   222d2:	f7ff fe8f 	bl	21ff4 <getTrngSource>
   222d6:	b006      	add	sp, #24
   222d8:	bd10      	pop	{r4, pc}
   222da:	bf00      	nop

000222dc <mbedtls_hardware_poll>:
   222dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   222de:	b087      	sub	sp, #28
   222e0:	2900      	cmp	r1, #0
   222e2:	d066      	beq.n	223b2 <mbedtls_hardware_poll+0xd6>
   222e4:	461e      	mov	r6, r3
   222e6:	2b00      	cmp	r3, #0
   222e8:	d063      	beq.n	223b2 <mbedtls_hardware_poll+0xd6>
   222ea:	4614      	mov	r4, r2
   222ec:	2a00      	cmp	r2, #0
   222ee:	d060      	beq.n	223b2 <mbedtls_hardware_poll+0xd6>
   222f0:	4f31      	ldr	r7, [pc, #196]	; (223b8 <mbedtls_hardware_poll+0xdc>)
   222f2:	460d      	mov	r5, r1
   222f4:	6838      	ldr	r0, [r7, #0]
   222f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   222fa:	f7ff fce5 	bl	21cc8 <CC_PalMutexLock>
   222fe:	2800      	cmp	r0, #0
   22300:	d14d      	bne.n	2239e <mbedtls_hardware_poll+0xc2>
   22302:	2000      	movs	r0, #0
   22304:	f7ff fd10 	bl	21d28 <CC_PalPowerSaveModeSelect>
   22308:	2800      	cmp	r0, #0
   2230a:	d144      	bne.n	22396 <mbedtls_hardware_poll+0xba>
   2230c:	482b      	ldr	r0, [pc, #172]	; (223bc <mbedtls_hardware_poll+0xe0>)
   2230e:	f000 fa99 	bl	22844 <RNG_PLAT_SetUserRngParameters>
   22312:	4603      	mov	r3, r0
   22314:	b1d8      	cbz	r0, 2234e <mbedtls_hardware_poll+0x72>
   22316:	2001      	movs	r0, #1
   22318:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2231c:	f7ff fd04 	bl	21d28 <CC_PalPowerSaveModeSelect>
   22320:	2800      	cmp	r0, #0
   22322:	d134      	bne.n	2238e <mbedtls_hardware_poll+0xb2>
   22324:	4826      	ldr	r0, [pc, #152]	; (223c0 <mbedtls_hardware_poll+0xe4>)
   22326:	f44f 7108 	mov.w	r1, #544	; 0x220
   2232a:	f7fe fed9 	bl	210e0 <mbedtls_zeroize_internal>
   2232e:	4825      	ldr	r0, [pc, #148]	; (223c4 <mbedtls_hardware_poll+0xe8>)
   22330:	2104      	movs	r1, #4
   22332:	f7fe fed5 	bl	210e0 <mbedtls_zeroize_internal>
   22336:	4821      	ldr	r0, [pc, #132]	; (223bc <mbedtls_hardware_poll+0xe0>)
   22338:	2128      	movs	r1, #40	; 0x28
   2233a:	f7fe fed1 	bl	210e0 <mbedtls_zeroize_internal>
   2233e:	6838      	ldr	r0, [r7, #0]
   22340:	f7ff fcca 	bl	21cd8 <CC_PalMutexUnlock>
   22344:	2800      	cmp	r0, #0
   22346:	d12e      	bne.n	223a6 <mbedtls_hardware_poll+0xca>
   22348:	4628      	mov	r0, r5
   2234a:	b007      	add	sp, #28
   2234c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2234e:	4a1c      	ldr	r2, [pc, #112]	; (223c0 <mbedtls_hardware_poll+0xe4>)
   22350:	9202      	str	r2, [sp, #8]
   22352:	aa05      	add	r2, sp, #20
   22354:	9201      	str	r2, [sp, #4]
   22356:	aa04      	add	r2, sp, #16
   22358:	9003      	str	r0, [sp, #12]
   2235a:	9200      	str	r2, [sp, #0]
   2235c:	4917      	ldr	r1, [pc, #92]	; (223bc <mbedtls_hardware_poll+0xe0>)
   2235e:	4819      	ldr	r0, [pc, #100]	; (223c4 <mbedtls_hardware_poll+0xe8>)
   22360:	461a      	mov	r2, r3
   22362:	f7ff ffa1 	bl	222a8 <LLF_RND_GetTrngSource>
   22366:	4603      	mov	r3, r0
   22368:	2800      	cmp	r0, #0
   2236a:	d1d4      	bne.n	22316 <mbedtls_hardware_poll+0x3a>
   2236c:	4628      	mov	r0, r5
   2236e:	461d      	mov	r5, r3
   22370:	9b05      	ldr	r3, [sp, #20]
   22372:	9904      	ldr	r1, [sp, #16]
   22374:	429c      	cmp	r4, r3
   22376:	4622      	mov	r2, r4
   22378:	bf28      	it	cs
   2237a:	461a      	movcs	r2, r3
   2237c:	6032      	str	r2, [r6, #0]
   2237e:	3108      	adds	r1, #8
   22380:	f7ff fc86 	bl	21c90 <CC_PalMemCopyPlat>
   22384:	2001      	movs	r0, #1
   22386:	f7ff fccf 	bl	21d28 <CC_PalPowerSaveModeSelect>
   2238a:	2800      	cmp	r0, #0
   2238c:	d0ca      	beq.n	22324 <mbedtls_hardware_poll+0x48>
   2238e:	480e      	ldr	r0, [pc, #56]	; (223c8 <mbedtls_hardware_poll+0xec>)
   22390:	f7fe fd8e 	bl	20eb0 <CC_PalAbort>
   22394:	e7c6      	b.n	22324 <mbedtls_hardware_poll+0x48>
   22396:	480d      	ldr	r0, [pc, #52]	; (223cc <mbedtls_hardware_poll+0xf0>)
   22398:	f7fe fd8a 	bl	20eb0 <CC_PalAbort>
   2239c:	e7b6      	b.n	2230c <mbedtls_hardware_poll+0x30>
   2239e:	480c      	ldr	r0, [pc, #48]	; (223d0 <mbedtls_hardware_poll+0xf4>)
   223a0:	f7fe fd86 	bl	20eb0 <CC_PalAbort>
   223a4:	e7ad      	b.n	22302 <mbedtls_hardware_poll+0x26>
   223a6:	480b      	ldr	r0, [pc, #44]	; (223d4 <mbedtls_hardware_poll+0xf8>)
   223a8:	f7fe fd82 	bl	20eb0 <CC_PalAbort>
   223ac:	4628      	mov	r0, r5
   223ae:	b007      	add	sp, #28
   223b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   223b2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   223b6:	e7c7      	b.n	22348 <mbedtls_hardware_poll+0x6c>
   223b8:	2000076c 	.word	0x2000076c
   223bc:	20003cc4 	.word	0x20003cc4
   223c0:	20003cec 	.word	0x20003cec
   223c4:	20003cc0 	.word	0x20003cc0
   223c8:	00028ba4 	.word	0x00028ba4
   223cc:	00028b84 	.word	0x00028b84
   223d0:	00028b6c 	.word	0x00028b6c
   223d4:	00028bfc 	.word	0x00028bfc

000223d8 <cc_mbedtls_aes_init>:
   223d8:	b510      	push	{r4, lr}
   223da:	4604      	mov	r4, r0
   223dc:	b130      	cbz	r0, 223ec <cc_mbedtls_aes_init+0x14>
   223de:	2200      	movs	r2, #0
   223e0:	2301      	movs	r3, #1
   223e2:	6562      	str	r2, [r4, #84]	; 0x54
   223e4:	65a2      	str	r2, [r4, #88]	; 0x58
   223e6:	65e3      	str	r3, [r4, #92]	; 0x5c
   223e8:	6623      	str	r3, [r4, #96]	; 0x60
   223ea:	bd10      	pop	{r4, pc}
   223ec:	4801      	ldr	r0, [pc, #4]	; (223f4 <cc_mbedtls_aes_init+0x1c>)
   223ee:	f7fe fd5f 	bl	20eb0 <CC_PalAbort>
   223f2:	e7f4      	b.n	223de <cc_mbedtls_aes_init+0x6>
   223f4:	00028c14 	.word	0x00028c14

000223f8 <cc_mbedtls_aes_free>:
   223f8:	b118      	cbz	r0, 22402 <cc_mbedtls_aes_free+0xa>
   223fa:	2274      	movs	r2, #116	; 0x74
   223fc:	2100      	movs	r1, #0
   223fe:	f7ff bc49 	b.w	21c94 <CC_PalMemSetPlat>
   22402:	4770      	bx	lr

00022404 <cc_mbedtls_aes_setkey_enc>:
   22404:	b190      	cbz	r0, 2242c <cc_mbedtls_aes_setkey_enc+0x28>
   22406:	b1a1      	cbz	r1, 22432 <cc_mbedtls_aes_setkey_enc+0x2e>
   22408:	b510      	push	{r4, lr}
   2240a:	2a80      	cmp	r2, #128	; 0x80
   2240c:	f04f 0400 	mov.w	r4, #0
   22410:	6384      	str	r4, [r0, #56]	; 0x38
   22412:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   22416:	d106      	bne.n	22426 <cc_mbedtls_aes_setkey_enc+0x22>
   22418:	2210      	movs	r2, #16
   2241a:	6304      	str	r4, [r0, #48]	; 0x30
   2241c:	4410      	add	r0, r2
   2241e:	f7ff fc37 	bl	21c90 <CC_PalMemCopyPlat>
   22422:	4620      	mov	r0, r4
   22424:	bd10      	pop	{r4, pc}
   22426:	f06f 001f 	mvn.w	r0, #31
   2242a:	bd10      	pop	{r4, pc}
   2242c:	f06f 0021 	mvn.w	r0, #33	; 0x21
   22430:	4770      	bx	lr
   22432:	f06f 001f 	mvn.w	r0, #31
   22436:	4770      	bx	lr

00022438 <cc_mbedtls_aes_crypt_ecb>:
   22438:	b328      	cbz	r0, 22486 <cc_mbedtls_aes_crypt_ecb+0x4e>
   2243a:	b322      	cbz	r2, 22486 <cc_mbedtls_aes_crypt_ecb+0x4e>
   2243c:	b31b      	cbz	r3, 22486 <cc_mbedtls_aes_crypt_ecb+0x4e>
   2243e:	2901      	cmp	r1, #1
   22440:	d821      	bhi.n	22486 <cc_mbedtls_aes_crypt_ecb+0x4e>
   22442:	b570      	push	{r4, r5, r6, lr}
   22444:	4604      	mov	r4, r0
   22446:	6b81      	ldr	r1, [r0, #56]	; 0x38
   22448:	b086      	sub	sp, #24
   2244a:	d017      	beq.n	2247c <cc_mbedtls_aes_crypt_ecb+0x44>
   2244c:	2901      	cmp	r1, #1
   2244e:	d117      	bne.n	22480 <cc_mbedtls_aes_crypt_ecb+0x48>
   22450:	2510      	movs	r5, #16
   22452:	2100      	movs	r1, #0
   22454:	eb0d 0605 	add.w	r6, sp, r5
   22458:	6361      	str	r1, [r4, #52]	; 0x34
   2245a:	4610      	mov	r0, r2
   2245c:	9500      	str	r5, [sp, #0]
   2245e:	9601      	str	r6, [sp, #4]
   22460:	aa02      	add	r2, sp, #8
   22462:	4629      	mov	r1, r5
   22464:	f000 fac2 	bl	229ec <SetDataBuffersInfo>
   22468:	b950      	cbnz	r0, 22480 <cc_mbedtls_aes_crypt_ecb+0x48>
   2246a:	462b      	mov	r3, r5
   2246c:	4632      	mov	r2, r6
   2246e:	a902      	add	r1, sp, #8
   22470:	4620      	mov	r0, r4
   22472:	f000 fd43 	bl	22efc <ProcessAesDrv>
   22476:	b918      	cbnz	r0, 22480 <cc_mbedtls_aes_crypt_ecb+0x48>
   22478:	b006      	add	sp, #24
   2247a:	bd70      	pop	{r4, r5, r6, pc}
   2247c:	2900      	cmp	r1, #0
   2247e:	d0e7      	beq.n	22450 <cc_mbedtls_aes_crypt_ecb+0x18>
   22480:	f06f 0021 	mvn.w	r0, #33	; 0x21
   22484:	e7f8      	b.n	22478 <cc_mbedtls_aes_crypt_ecb+0x40>
   22486:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2248a:	4770      	bx	lr

0002248c <cc_mbedtls_sha256_init>:
   2248c:	b510      	push	{r4, lr}
   2248e:	4604      	mov	r4, r0
   22490:	b128      	cbz	r0, 2249e <cc_mbedtls_sha256_init+0x12>
   22492:	4620      	mov	r0, r4
   22494:	21f4      	movs	r1, #244	; 0xf4
   22496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2249a:	f7ff bbfd 	b.w	21c98 <CC_PalMemSetZeroPlat>
   2249e:	4804      	ldr	r0, [pc, #16]	; (224b0 <cc_mbedtls_sha256_init+0x24>)
   224a0:	f7fe fd06 	bl	20eb0 <CC_PalAbort>
   224a4:	4620      	mov	r0, r4
   224a6:	21f4      	movs	r1, #244	; 0xf4
   224a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   224ac:	f7ff bbf4 	b.w	21c98 <CC_PalMemSetZeroPlat>
   224b0:	00028c28 	.word	0x00028c28

000224b4 <cc_mbedtls_sha256_free>:
   224b4:	b110      	cbz	r0, 224bc <cc_mbedtls_sha256_free+0x8>
   224b6:	21f4      	movs	r1, #244	; 0xf4
   224b8:	f7fe be12 	b.w	210e0 <mbedtls_zeroize_internal>
   224bc:	4770      	bx	lr
   224be:	bf00      	nop

000224c0 <cc_mbedtls_sha256_starts>:
   224c0:	b508      	push	{r3, lr}
   224c2:	b121      	cbz	r1, 224ce <cc_mbedtls_sha256_starts+0xe>
   224c4:	2901      	cmp	r1, #1
   224c6:	d008      	beq.n	224da <cc_mbedtls_sha256_starts+0x1a>
   224c8:	f06f 0036 	mvn.w	r0, #54	; 0x36
   224cc:	bd08      	pop	{r3, pc}
   224ce:	2101      	movs	r1, #1
   224d0:	f000 f858 	bl	22584 <mbedtls_sha_starts_internal>
   224d4:	2800      	cmp	r0, #0
   224d6:	d1f7      	bne.n	224c8 <cc_mbedtls_sha256_starts+0x8>
   224d8:	bd08      	pop	{r3, pc}
   224da:	2102      	movs	r1, #2
   224dc:	f000 f852 	bl	22584 <mbedtls_sha_starts_internal>
   224e0:	2800      	cmp	r0, #0
   224e2:	d0f9      	beq.n	224d8 <cc_mbedtls_sha256_starts+0x18>
   224e4:	e7f0      	b.n	224c8 <cc_mbedtls_sha256_starts+0x8>
   224e6:	bf00      	nop

000224e8 <cc_mbedtls_sha256_update>:
   224e8:	b530      	push	{r4, r5, lr}
   224ea:	4605      	mov	r5, r0
   224ec:	1888      	adds	r0, r1, r2
   224ee:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   224f2:	b0a1      	sub	sp, #132	; 0x84
   224f4:	460b      	mov	r3, r1
   224f6:	4614      	mov	r4, r2
   224f8:	d801      	bhi.n	224fe <cc_mbedtls_sha256_update+0x16>
   224fa:	2a80      	cmp	r2, #128	; 0x80
   224fc:	d90c      	bls.n	22518 <cc_mbedtls_sha256_update+0x30>
   224fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   22502:	d917      	bls.n	22534 <cc_mbedtls_sha256_update+0x4c>
   22504:	4622      	mov	r2, r4
   22506:	4619      	mov	r1, r3
   22508:	4628      	mov	r0, r5
   2250a:	f000 f87d 	bl	22608 <mbedtls_sha_update_internal>
   2250e:	4604      	mov	r4, r0
   22510:	b984      	cbnz	r4, 22534 <cc_mbedtls_sha256_update+0x4c>
   22512:	4620      	mov	r0, r4
   22514:	b021      	add	sp, #132	; 0x84
   22516:	bd30      	pop	{r4, r5, pc}
   22518:	4668      	mov	r0, sp
   2251a:	f7ff fbb9 	bl	21c90 <CC_PalMemCopyPlat>
   2251e:	4622      	mov	r2, r4
   22520:	4669      	mov	r1, sp
   22522:	4628      	mov	r0, r5
   22524:	f000 f870 	bl	22608 <mbedtls_sha_update_internal>
   22528:	2180      	movs	r1, #128	; 0x80
   2252a:	4604      	mov	r4, r0
   2252c:	4668      	mov	r0, sp
   2252e:	f7ff fbb3 	bl	21c98 <CC_PalMemSetZeroPlat>
   22532:	e7ed      	b.n	22510 <cc_mbedtls_sha256_update+0x28>
   22534:	f06f 0436 	mvn.w	r4, #54	; 0x36
   22538:	e7eb      	b.n	22512 <cc_mbedtls_sha256_update+0x2a>
   2253a:	bf00      	nop

0002253c <cc_mbedtls_sha256_finish>:
   2253c:	b570      	push	{r4, r5, r6, lr}
   2253e:	b1e8      	cbz	r0, 2257c <cc_mbedtls_sha256_finish+0x40>
   22540:	460e      	mov	r6, r1
   22542:	b1d9      	cbz	r1, 2257c <cc_mbedtls_sha256_finish+0x40>
   22544:	4604      	mov	r4, r0
   22546:	f000 f831 	bl	225ac <mbedtls_sha_finish_internal>
   2254a:	4605      	mov	r5, r0
   2254c:	b9b0      	cbnz	r0, 2257c <cc_mbedtls_sha256_finish+0x40>
   2254e:	6823      	ldr	r3, [r4, #0]
   22550:	2b01      	cmp	r3, #1
   22552:	d00b      	beq.n	2256c <cc_mbedtls_sha256_finish+0x30>
   22554:	2b02      	cmp	r3, #2
   22556:	d001      	beq.n	2255c <cc_mbedtls_sha256_finish+0x20>
   22558:	4628      	mov	r0, r5
   2255a:	bd70      	pop	{r4, r5, r6, pc}
   2255c:	221c      	movs	r2, #28
   2255e:	f104 0108 	add.w	r1, r4, #8
   22562:	4630      	mov	r0, r6
   22564:	f7ff fb94 	bl	21c90 <CC_PalMemCopyPlat>
   22568:	4628      	mov	r0, r5
   2256a:	bd70      	pop	{r4, r5, r6, pc}
   2256c:	2220      	movs	r2, #32
   2256e:	f104 0108 	add.w	r1, r4, #8
   22572:	4630      	mov	r0, r6
   22574:	f7ff fb8c 	bl	21c90 <CC_PalMemCopyPlat>
   22578:	4628      	mov	r0, r5
   2257a:	bd70      	pop	{r4, r5, r6, pc}
   2257c:	f06f 0536 	mvn.w	r5, #54	; 0x36
   22580:	e7ea      	b.n	22558 <cc_mbedtls_sha256_finish+0x1c>
   22582:	bf00      	nop

00022584 <mbedtls_sha_starts_internal>:
   22584:	b178      	cbz	r0, 225a6 <mbedtls_sha_starts_internal+0x22>
   22586:	b538      	push	{r3, r4, r5, lr}
   22588:	4604      	mov	r4, r0
   2258a:	460d      	mov	r5, r1
   2258c:	21f0      	movs	r1, #240	; 0xf0
   2258e:	f7ff fb83 	bl	21c98 <CC_PalMemSetZeroPlat>
   22592:	2340      	movs	r3, #64	; 0x40
   22594:	6025      	str	r5, [r4, #0]
   22596:	65e3      	str	r3, [r4, #92]	; 0x5c
   22598:	4620      	mov	r0, r4
   2259a:	f000 fa5b 	bl	22a54 <InitHashDrv>
   2259e:	3800      	subs	r0, #0
   225a0:	bf18      	it	ne
   225a2:	2001      	movne	r0, #1
   225a4:	bd38      	pop	{r3, r4, r5, pc}
   225a6:	2001      	movs	r0, #1
   225a8:	4770      	bx	lr
   225aa:	bf00      	nop

000225ac <mbedtls_sha_finish_internal>:
   225ac:	b570      	push	{r4, r5, r6, lr}
   225ae:	6e05      	ldr	r5, [r0, #96]	; 0x60
   225b0:	b0a4      	sub	sp, #144	; 0x90
   225b2:	4604      	mov	r4, r0
   225b4:	ae04      	add	r6, sp, #16
   225b6:	b9e5      	cbnz	r5, 225f2 <mbedtls_sha_finish_internal+0x46>
   225b8:	2201      	movs	r2, #1
   225ba:	2300      	movs	r3, #0
   225bc:	6062      	str	r2, [r4, #4]
   225be:	4630      	mov	r0, r6
   225c0:	e9cd 3300 	strd	r3, r3, [sp]
   225c4:	aa02      	add	r2, sp, #8
   225c6:	4629      	mov	r1, r5
   225c8:	f000 fa10 	bl	229ec <SetDataBuffersInfo>
   225cc:	b110      	cbz	r0, 225d4 <mbedtls_sha_finish_internal+0x28>
   225ce:	2001      	movs	r0, #1
   225d0:	b024      	add	sp, #144	; 0x90
   225d2:	bd70      	pop	{r4, r5, r6, pc}
   225d4:	462a      	mov	r2, r5
   225d6:	a902      	add	r1, sp, #8
   225d8:	4620      	mov	r0, r4
   225da:	f000 fa63 	bl	22aa4 <ProcessHashDrv>
   225de:	2800      	cmp	r0, #0
   225e0:	d1f5      	bne.n	225ce <mbedtls_sha_finish_internal+0x22>
   225e2:	4620      	mov	r0, r4
   225e4:	f000 fb74 	bl	22cd0 <FinishHashDrv>
   225e8:	2800      	cmp	r0, #0
   225ea:	d1f0      	bne.n	225ce <mbedtls_sha_finish_internal+0x22>
   225ec:	6620      	str	r0, [r4, #96]	; 0x60
   225ee:	b024      	add	sp, #144	; 0x90
   225f0:	bd70      	pop	{r4, r5, r6, pc}
   225f2:	2d80      	cmp	r5, #128	; 0x80
   225f4:	462a      	mov	r2, r5
   225f6:	f100 0164 	add.w	r1, r0, #100	; 0x64
   225fa:	bf28      	it	cs
   225fc:	2280      	movcs	r2, #128	; 0x80
   225fe:	4630      	mov	r0, r6
   22600:	f7ff fb46 	bl	21c90 <CC_PalMemCopyPlat>
   22604:	6e25      	ldr	r5, [r4, #96]	; 0x60
   22606:	e7d7      	b.n	225b8 <mbedtls_sha_finish_internal+0xc>

00022608 <mbedtls_sha_update_internal>:
   22608:	2800      	cmp	r0, #0
   2260a:	f000 80ae 	beq.w	2276a <mbedtls_sha_update_internal+0x162>
   2260e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22612:	4614      	mov	r4, r2
   22614:	b0a5      	sub	sp, #148	; 0x94
   22616:	2a00      	cmp	r2, #0
   22618:	d03d      	beq.n	22696 <mbedtls_sha_update_internal+0x8e>
   2261a:	460f      	mov	r7, r1
   2261c:	2900      	cmp	r1, #0
   2261e:	d049      	beq.n	226b4 <mbedtls_sha_update_internal+0xac>
   22620:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   22624:	4605      	mov	r5, r0
   22626:	6e00      	ldr	r0, [r0, #96]	; 0x60
   22628:	d320      	bcc.n	2266c <mbedtls_sha_update_internal+0x64>
   2262a:	f64f 78ff 	movw	r8, #65535	; 0xffff
   2262e:	f105 0a64 	add.w	sl, r5, #100	; 0x64
   22632:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   22634:	1a1a      	subs	r2, r3, r0
   22636:	fbb2 f1f3 	udiv	r1, r2, r3
   2263a:	fb03 2211 	mls	r2, r3, r1, r2
   2263e:	2a00      	cmp	r2, #0
   22640:	d165      	bne.n	2270e <mbedtls_sha_update_internal+0x106>
   22642:	4283      	cmp	r3, r0
   22644:	46b9      	mov	r9, r7
   22646:	f64f 76ff 	movw	r6, #65535	; 0xffff
   2264a:	d072      	beq.n	22732 <mbedtls_sha_update_internal+0x12a>
   2264c:	fbb6 fbf3 	udiv	fp, r6, r3
   22650:	fb03 fb0b 	mul.w	fp, r3, fp
   22654:	f1bb 0f00 	cmp.w	fp, #0
   22658:	d130      	bne.n	226bc <mbedtls_sha_update_internal+0xb4>
   2265a:	2e00      	cmp	r6, #0
   2265c:	d145      	bne.n	226ea <mbedtls_sha_update_internal+0xe2>
   2265e:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
   22662:	3cff      	subs	r4, #255	; 0xff
   22664:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   22668:	4447      	add	r7, r8
   2266a:	d2e2      	bcs.n	22632 <mbedtls_sha_update_internal+0x2a>
   2266c:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   2266e:	1a16      	subs	r6, r2, r0
   22670:	fbb6 f3f2 	udiv	r3, r6, r2
   22674:	fb02 6613 	mls	r6, r2, r3, r6
   22678:	42a6      	cmp	r6, r4
   2267a:	bf28      	it	cs
   2267c:	4626      	movcs	r6, r4
   2267e:	2e00      	cmp	r6, #0
   22680:	d175      	bne.n	2276e <mbedtls_sha_update_internal+0x166>
   22682:	4282      	cmp	r2, r0
   22684:	f000 808d 	beq.w	227a2 <mbedtls_sha_update_internal+0x19a>
   22688:	fbb4 f6f2 	udiv	r6, r4, r2
   2268c:	fb02 f606 	mul.w	r6, r2, r6
   22690:	b92e      	cbnz	r6, 2269e <mbedtls_sha_update_internal+0x96>
   22692:	2c00      	cmp	r4, #0
   22694:	d179      	bne.n	2278a <mbedtls_sha_update_internal+0x182>
   22696:	2000      	movs	r0, #0
   22698:	b025      	add	sp, #148	; 0x94
   2269a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2269e:	2300      	movs	r3, #0
   226a0:	e9cd 3300 	strd	r3, r3, [sp]
   226a4:	aa02      	add	r2, sp, #8
   226a6:	4631      	mov	r1, r6
   226a8:	4638      	mov	r0, r7
   226aa:	f000 f99f 	bl	229ec <SetDataBuffersInfo>
   226ae:	2800      	cmp	r0, #0
   226b0:	f000 8095 	beq.w	227de <mbedtls_sha_update_internal+0x1d6>
   226b4:	2001      	movs	r0, #1
   226b6:	b025      	add	sp, #148	; 0x94
   226b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   226bc:	2300      	movs	r3, #0
   226be:	e9cd 3300 	strd	r3, r3, [sp]
   226c2:	aa02      	add	r2, sp, #8
   226c4:	4659      	mov	r1, fp
   226c6:	4648      	mov	r0, r9
   226c8:	f000 f990 	bl	229ec <SetDataBuffersInfo>
   226cc:	2800      	cmp	r0, #0
   226ce:	d1f1      	bne.n	226b4 <mbedtls_sha_update_internal+0xac>
   226d0:	a902      	add	r1, sp, #8
   226d2:	465a      	mov	r2, fp
   226d4:	4628      	mov	r0, r5
   226d6:	f000 f9e5 	bl	22aa4 <ProcessHashDrv>
   226da:	2800      	cmp	r0, #0
   226dc:	d1ea      	bne.n	226b4 <mbedtls_sha_update_internal+0xac>
   226de:	eba6 060b 	sub.w	r6, r6, fp
   226e2:	6e28      	ldr	r0, [r5, #96]	; 0x60
   226e4:	44d9      	add	r9, fp
   226e6:	2e00      	cmp	r6, #0
   226e8:	d0b9      	beq.n	2265e <mbedtls_sha_update_internal+0x56>
   226ea:	3019      	adds	r0, #25
   226ec:	4649      	mov	r1, r9
   226ee:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   226f2:	4632      	mov	r2, r6
   226f4:	f7ff facc 	bl	21c90 <CC_PalMemCopyPlat>
   226f8:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
   226fc:	6e28      	ldr	r0, [r5, #96]	; 0x60
   226fe:	3cff      	subs	r4, #255	; 0xff
   22700:	4430      	add	r0, r6
   22702:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   22706:	4447      	add	r7, r8
   22708:	6628      	str	r0, [r5, #96]	; 0x60
   2270a:	d292      	bcs.n	22632 <mbedtls_sha_update_internal+0x2a>
   2270c:	e7ae      	b.n	2266c <mbedtls_sha_update_internal+0x64>
   2270e:	4542      	cmp	r2, r8
   22710:	bf28      	it	cs
   22712:	4642      	movcs	r2, r8
   22714:	4450      	add	r0, sl
   22716:	4639      	mov	r1, r7
   22718:	4616      	mov	r6, r2
   2271a:	f7ff fab9 	bl	21c90 <CC_PalMemCopyPlat>
   2271e:	6e28      	ldr	r0, [r5, #96]	; 0x60
   22720:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   22722:	4430      	add	r0, r6
   22724:	4283      	cmp	r3, r0
   22726:	eb07 0906 	add.w	r9, r7, r6
   2272a:	6628      	str	r0, [r5, #96]	; 0x60
   2272c:	eba8 0606 	sub.w	r6, r8, r6
   22730:	d18c      	bne.n	2264c <mbedtls_sha_update_internal+0x44>
   22732:	2b80      	cmp	r3, #128	; 0x80
   22734:	bf28      	it	cs
   22736:	2380      	movcs	r3, #128	; 0x80
   22738:	461a      	mov	r2, r3
   2273a:	4651      	mov	r1, sl
   2273c:	a804      	add	r0, sp, #16
   2273e:	f7ff faa7 	bl	21c90 <CC_PalMemCopyPlat>
   22742:	2300      	movs	r3, #0
   22744:	e9cd 3300 	strd	r3, r3, [sp]
   22748:	aa02      	add	r2, sp, #8
   2274a:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   2274c:	a804      	add	r0, sp, #16
   2274e:	f000 f94d 	bl	229ec <SetDataBuffersInfo>
   22752:	2800      	cmp	r0, #0
   22754:	d1ae      	bne.n	226b4 <mbedtls_sha_update_internal+0xac>
   22756:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   22758:	a902      	add	r1, sp, #8
   2275a:	4628      	mov	r0, r5
   2275c:	f000 f9a2 	bl	22aa4 <ProcessHashDrv>
   22760:	2800      	cmp	r0, #0
   22762:	d1a7      	bne.n	226b4 <mbedtls_sha_update_internal+0xac>
   22764:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   22766:	6628      	str	r0, [r5, #96]	; 0x60
   22768:	e770      	b.n	2264c <mbedtls_sha_update_internal+0x44>
   2276a:	2001      	movs	r0, #1
   2276c:	4770      	bx	lr
   2276e:	f105 0364 	add.w	r3, r5, #100	; 0x64
   22772:	4639      	mov	r1, r7
   22774:	4632      	mov	r2, r6
   22776:	4418      	add	r0, r3
   22778:	f7ff fa8a 	bl	21c90 <CC_PalMemCopyPlat>
   2277c:	6e28      	ldr	r0, [r5, #96]	; 0x60
   2277e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   22780:	4430      	add	r0, r6
   22782:	1ba4      	subs	r4, r4, r6
   22784:	4437      	add	r7, r6
   22786:	6628      	str	r0, [r5, #96]	; 0x60
   22788:	e77b      	b.n	22682 <mbedtls_sha_update_internal+0x7a>
   2278a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   2278c:	3319      	adds	r3, #25
   2278e:	eb05 0083 	add.w	r0, r5, r3, lsl #2
   22792:	4622      	mov	r2, r4
   22794:	4639      	mov	r1, r7
   22796:	f7ff fa7b 	bl	21c90 <CC_PalMemCopyPlat>
   2279a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   2279c:	4423      	add	r3, r4
   2279e:	662b      	str	r3, [r5, #96]	; 0x60
   227a0:	e779      	b.n	22696 <mbedtls_sha_update_internal+0x8e>
   227a2:	2a80      	cmp	r2, #128	; 0x80
   227a4:	bf28      	it	cs
   227a6:	2280      	movcs	r2, #128	; 0x80
   227a8:	f105 0164 	add.w	r1, r5, #100	; 0x64
   227ac:	a804      	add	r0, sp, #16
   227ae:	f7ff fa6f 	bl	21c90 <CC_PalMemCopyPlat>
   227b2:	2300      	movs	r3, #0
   227b4:	e9cd 3300 	strd	r3, r3, [sp]
   227b8:	a804      	add	r0, sp, #16
   227ba:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   227bc:	aa02      	add	r2, sp, #8
   227be:	f000 f915 	bl	229ec <SetDataBuffersInfo>
   227c2:	2800      	cmp	r0, #0
   227c4:	f47f af76 	bne.w	226b4 <mbedtls_sha_update_internal+0xac>
   227c8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   227ca:	a902      	add	r1, sp, #8
   227cc:	4628      	mov	r0, r5
   227ce:	f000 f969 	bl	22aa4 <ProcessHashDrv>
   227d2:	2800      	cmp	r0, #0
   227d4:	f47f af6e 	bne.w	226b4 <mbedtls_sha_update_internal+0xac>
   227d8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   227da:	6628      	str	r0, [r5, #96]	; 0x60
   227dc:	e754      	b.n	22688 <mbedtls_sha_update_internal+0x80>
   227de:	a902      	add	r1, sp, #8
   227e0:	4632      	mov	r2, r6
   227e2:	4628      	mov	r0, r5
   227e4:	f000 f95e 	bl	22aa4 <ProcessHashDrv>
   227e8:	2800      	cmp	r0, #0
   227ea:	f47f af63 	bne.w	226b4 <mbedtls_sha_update_internal+0xac>
   227ee:	4437      	add	r7, r6
   227f0:	1ba4      	subs	r4, r4, r6
   227f2:	e74e      	b.n	22692 <mbedtls_sha_update_internal+0x8a>

000227f4 <cc_mbedtls_sha256>:
   227f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   227f6:	461c      	mov	r4, r3
   227f8:	4605      	mov	r5, r0
   227fa:	4811      	ldr	r0, [pc, #68]	; (22840 <cc_mbedtls_sha256+0x4c>)
   227fc:	460e      	mov	r6, r1
   227fe:	4617      	mov	r7, r2
   22800:	f7ff fe44 	bl	2248c <cc_mbedtls_sha256_init>
   22804:	4621      	mov	r1, r4
   22806:	480e      	ldr	r0, [pc, #56]	; (22840 <cc_mbedtls_sha256+0x4c>)
   22808:	f7ff fe5a 	bl	224c0 <cc_mbedtls_sha256_starts>
   2280c:	4604      	mov	r4, r0
   2280e:	b120      	cbz	r0, 2281a <cc_mbedtls_sha256+0x26>
   22810:	480b      	ldr	r0, [pc, #44]	; (22840 <cc_mbedtls_sha256+0x4c>)
   22812:	f7ff fe4f 	bl	224b4 <cc_mbedtls_sha256_free>
   22816:	4620      	mov	r0, r4
   22818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2281a:	4809      	ldr	r0, [pc, #36]	; (22840 <cc_mbedtls_sha256+0x4c>)
   2281c:	4632      	mov	r2, r6
   2281e:	4629      	mov	r1, r5
   22820:	f7ff fe62 	bl	224e8 <cc_mbedtls_sha256_update>
   22824:	4604      	mov	r4, r0
   22826:	2800      	cmp	r0, #0
   22828:	d1f2      	bne.n	22810 <cc_mbedtls_sha256+0x1c>
   2282a:	4639      	mov	r1, r7
   2282c:	4804      	ldr	r0, [pc, #16]	; (22840 <cc_mbedtls_sha256+0x4c>)
   2282e:	f7ff fe85 	bl	2253c <cc_mbedtls_sha256_finish>
   22832:	4604      	mov	r4, r0
   22834:	4802      	ldr	r0, [pc, #8]	; (22840 <cc_mbedtls_sha256+0x4c>)
   22836:	f7ff fe3d 	bl	224b4 <cc_mbedtls_sha256_free>
   2283a:	4620      	mov	r0, r4
   2283c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2283e:	bf00      	nop
   22840:	20003f0c 	.word	0x20003f0c

00022844 <RNG_PLAT_SetUserRngParameters>:
   22844:	b530      	push	{r4, r5, lr}
   22846:	b083      	sub	sp, #12
   22848:	231c      	movs	r3, #28
   2284a:	a901      	add	r1, sp, #4
   2284c:	4605      	mov	r5, r0
   2284e:	9301      	str	r3, [sp, #4]
   22850:	f000 f832 	bl	228b8 <CC_PalTrngParamGet>
   22854:	4604      	mov	r4, r0
   22856:	b938      	cbnz	r0, 22868 <RNG_PLAT_SetUserRngParameters+0x24>
   22858:	9b01      	ldr	r3, [sp, #4]
   2285a:	2b1c      	cmp	r3, #28
   2285c:	d007      	beq.n	2286e <RNG_PLAT_SetUserRngParameters+0x2a>
   2285e:	4c14      	ldr	r4, [pc, #80]	; (228b0 <RNG_PLAT_SetUserRngParameters+0x6c>)
   22860:	211c      	movs	r1, #28
   22862:	4628      	mov	r0, r5
   22864:	f7ff fa18 	bl	21c98 <CC_PalMemSetZeroPlat>
   22868:	4620      	mov	r0, r4
   2286a:	b003      	add	sp, #12
   2286c:	bd30      	pop	{r4, r5, pc}
   2286e:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
   22872:	1e13      	subs	r3, r2, #0
   22874:	bf18      	it	ne
   22876:	2301      	movne	r3, #1
   22878:	3900      	subs	r1, #0
   2287a:	682a      	ldr	r2, [r5, #0]
   2287c:	bf18      	it	ne
   2287e:	2101      	movne	r1, #1
   22880:	009b      	lsls	r3, r3, #2
   22882:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   22886:	2a00      	cmp	r2, #0
   22888:	bf18      	it	ne
   2288a:	f043 0301 	orrne.w	r3, r3, #1
   2288e:	68ea      	ldr	r2, [r5, #12]
   22890:	2001      	movs	r0, #1
   22892:	61e8      	str	r0, [r5, #28]
   22894:	b92a      	cbnz	r2, 228a2 <RNG_PLAT_SetUserRngParameters+0x5e>
   22896:	e9c5 3408 	strd	r3, r4, [r5, #32]
   2289a:	2b00      	cmp	r3, #0
   2289c:	d1e4      	bne.n	22868 <RNG_PLAT_SetUserRngParameters+0x24>
   2289e:	4c05      	ldr	r4, [pc, #20]	; (228b4 <RNG_PLAT_SetUserRngParameters+0x70>)
   228a0:	e7de      	b.n	22860 <RNG_PLAT_SetUserRngParameters+0x1c>
   228a2:	f043 0308 	orr.w	r3, r3, #8
   228a6:	4620      	mov	r0, r4
   228a8:	e9c5 3408 	strd	r3, r4, [r5, #32]
   228ac:	b003      	add	sp, #12
   228ae:	bd30      	pop	{r4, r5, pc}
   228b0:	00f00c37 	.word	0x00f00c37
   228b4:	00f00c0e 	.word	0x00f00c0e

000228b8 <CC_PalTrngParamGet>:
   228b8:	b118      	cbz	r0, 228c2 <CC_PalTrngParamGet+0xa>
   228ba:	b111      	cbz	r1, 228c2 <CC_PalTrngParamGet+0xa>
   228bc:	680b      	ldr	r3, [r1, #0]
   228be:	2b1c      	cmp	r3, #28
   228c0:	d001      	beq.n	228c6 <CC_PalTrngParamGet+0xe>
   228c2:	2001      	movs	r0, #1
   228c4:	4770      	bx	lr
   228c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   228ca:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   228ce:	3201      	adds	r2, #1
   228d0:	bf14      	ite	ne
   228d2:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   228d6:	f241 225c 	movweq	r2, #4700	; 0x125c
   228da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   228de:	6002      	str	r2, [r0, #0]
   228e0:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   228e4:	3201      	adds	r2, #1
   228e6:	bf14      	ite	ne
   228e8:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   228ec:	f641 1264 	movweq	r2, #6500	; 0x1964
   228f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   228f4:	6042      	str	r2, [r0, #4]
   228f6:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   228fa:	3201      	adds	r2, #1
   228fc:	bf14      	ite	ne
   228fe:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   22902:	f640 62d8 	movweq	r2, #3800	; 0xed8
   22906:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2290a:	6082      	str	r2, [r0, #8]
   2290c:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   22910:	3201      	adds	r2, #1
   22912:	bf14      	ite	ne
   22914:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   22918:	f241 3288 	movweq	r2, #5000	; 0x1388
   2291c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22920:	60c2      	str	r2, [r0, #12]
   22922:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   22926:	3201      	adds	r2, #1
   22928:	bf14      	ite	ne
   2292a:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   2292e:	2290      	moveq	r2, #144	; 0x90
   22930:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22934:	6102      	str	r2, [r0, #16]
   22936:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   2293a:	3201      	adds	r2, #1
   2293c:	bf14      	ite	ne
   2293e:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   22942:	2251      	moveq	r2, #81	; 0x51
   22944:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22948:	6142      	str	r2, [r0, #20]
   2294a:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   2294e:	3201      	adds	r2, #1
   22950:	bf14      	ite	ne
   22952:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   22956:	f240 3337 	movweq	r3, #823	; 0x337
   2295a:	6183      	str	r3, [r0, #24]
   2295c:	2000      	movs	r0, #0
   2295e:	4770      	bx	lr

00022960 <LLF_RND_WaitRngInterrupt>:
   22960:	b508      	push	{r3, lr}
   22962:	4601      	mov	r1, r0
   22964:	f44f 6080 	mov.w	r0, #1024	; 0x400
   22968:	f7ff f91e 	bl	21ba8 <CC_HalWaitInterruptRND>
   2296c:	4b03      	ldr	r3, [pc, #12]	; (2297c <LLF_RND_WaitRngInterrupt+0x1c>)
   2296e:	2200      	movs	r2, #0
   22970:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   22974:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   22978:	bd08      	pop	{r3, pc}
   2297a:	bf00      	nop
   2297c:	5002b000 	.word	0x5002b000

00022980 <LLF_RND_GetRoscSampleCnt>:
   22980:	3801      	subs	r0, #1
   22982:	2807      	cmp	r0, #7
   22984:	d805      	bhi.n	22992 <LLF_RND_GetRoscSampleCnt+0x12>
   22986:	e8df f000 	tbb	[pc, r0]
   2298a:	0e10      	.short	0x0e10
   2298c:	04040a04 	.word	0x04040a04
   22990:	0604      	.short	0x0604
   22992:	4807      	ldr	r0, [pc, #28]	; (229b0 <LLF_RND_GetRoscSampleCnt+0x30>)
   22994:	4770      	bx	lr
   22996:	68cb      	ldr	r3, [r1, #12]
   22998:	624b      	str	r3, [r1, #36]	; 0x24
   2299a:	2000      	movs	r0, #0
   2299c:	4770      	bx	lr
   2299e:	688b      	ldr	r3, [r1, #8]
   229a0:	624b      	str	r3, [r1, #36]	; 0x24
   229a2:	2000      	movs	r0, #0
   229a4:	4770      	bx	lr
   229a6:	684b      	ldr	r3, [r1, #4]
   229a8:	e7f6      	b.n	22998 <LLF_RND_GetRoscSampleCnt+0x18>
   229aa:	680b      	ldr	r3, [r1, #0]
   229ac:	e7f4      	b.n	22998 <LLF_RND_GetRoscSampleCnt+0x18>
   229ae:	bf00      	nop
   229b0:	00f10c31 	.word	0x00f10c31

000229b4 <LLF_RND_GetFastestRosc>:
   229b4:	680b      	ldr	r3, [r1, #0]
   229b6:	e002      	b.n	229be <LLF_RND_GetFastestRosc+0xa>
   229b8:	2b08      	cmp	r3, #8
   229ba:	600b      	str	r3, [r1, #0]
   229bc:	d806      	bhi.n	229cc <LLF_RND_GetFastestRosc+0x18>
   229be:	6a02      	ldr	r2, [r0, #32]
   229c0:	4213      	tst	r3, r2
   229c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
   229c6:	d0f7      	beq.n	229b8 <LLF_RND_GetFastestRosc+0x4>
   229c8:	2000      	movs	r0, #0
   229ca:	4770      	bx	lr
   229cc:	4800      	ldr	r0, [pc, #0]	; (229d0 <LLF_RND_GetFastestRosc+0x1c>)
   229ce:	4770      	bx	lr
   229d0:	00f10c31 	.word	0x00f10c31

000229d4 <LLF_RND_TurnOffTrng>:
   229d4:	4b04      	ldr	r3, [pc, #16]	; (229e8 <LLF_RND_TurnOffTrng+0x14>)
   229d6:	2200      	movs	r2, #0
   229d8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   229dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
   229e0:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   229e4:	f7ff b8c6 	b.w	21b74 <CC_HalClearInterruptBit>
   229e8:	5002b000 	.word	0x5002b000

000229ec <SetDataBuffersInfo>:
   229ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   229ee:	b083      	sub	sp, #12
   229f0:	461d      	mov	r5, r3
   229f2:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   229f6:	f04f 0300 	mov.w	r3, #0
   229fa:	f88d 3007 	strb.w	r3, [sp, #7]
   229fe:	d324      	bcc.n	22a4a <SetDataBuffersInfo+0x5e>
   22a00:	468c      	mov	ip, r1
   22a02:	4484      	add	ip, r0
   22a04:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   22a08:	4604      	mov	r4, r0
   22a0a:	d81e      	bhi.n	22a4a <SetDataBuffersInfo+0x5e>
   22a0c:	4617      	mov	r7, r2
   22a0e:	f10d 0307 	add.w	r3, sp, #7
   22a12:	2201      	movs	r2, #1
   22a14:	f000 fe64 	bl	236e0 <CC_PalDataBufferAttrGet>
   22a18:	4606      	mov	r6, r0
   22a1a:	b9b0      	cbnz	r0, 22a4a <SetDataBuffersInfo+0x5e>
   22a1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   22a1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   22a22:	603c      	str	r4, [r7, #0]
   22a24:	713b      	strb	r3, [r7, #4]
   22a26:	b192      	cbz	r2, 22a4e <SetDataBuffersInfo+0x62>
   22a28:	b14d      	cbz	r5, 22a3e <SetDataBuffersInfo+0x52>
   22a2a:	4602      	mov	r2, r0
   22a2c:	9908      	ldr	r1, [sp, #32]
   22a2e:	f10d 0307 	add.w	r3, sp, #7
   22a32:	4628      	mov	r0, r5
   22a34:	f000 fe54 	bl	236e0 <CC_PalDataBufferAttrGet>
   22a38:	b938      	cbnz	r0, 22a4a <SetDataBuffersInfo+0x5e>
   22a3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   22a3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   22a40:	4630      	mov	r0, r6
   22a42:	6015      	str	r5, [r2, #0]
   22a44:	7113      	strb	r3, [r2, #4]
   22a46:	b003      	add	sp, #12
   22a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22a4a:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   22a4e:	4630      	mov	r0, r6
   22a50:	b003      	add	sp, #12
   22a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022a54 <InitHashDrv>:
   22a54:	b1d8      	cbz	r0, 22a8e <InitHashDrv+0x3a>
   22a56:	b508      	push	{r3, lr}
   22a58:	6803      	ldr	r3, [r0, #0]
   22a5a:	2b01      	cmp	r3, #1
   22a5c:	d004      	beq.n	22a68 <InitHashDrv+0x14>
   22a5e:	2b02      	cmp	r3, #2
   22a60:	d00f      	beq.n	22a82 <InitHashDrv+0x2e>
   22a62:	b143      	cbz	r3, 22a76 <InitHashDrv+0x22>
   22a64:	480b      	ldr	r0, [pc, #44]	; (22a94 <InitHashDrv+0x40>)
   22a66:	bd08      	pop	{r3, pc}
   22a68:	490b      	ldr	r1, [pc, #44]	; (22a98 <InitHashDrv+0x44>)
   22a6a:	2220      	movs	r2, #32
   22a6c:	3008      	adds	r0, #8
   22a6e:	f7ff f90f 	bl	21c90 <CC_PalMemCopyPlat>
   22a72:	2000      	movs	r0, #0
   22a74:	bd08      	pop	{r3, pc}
   22a76:	4909      	ldr	r1, [pc, #36]	; (22a9c <InitHashDrv+0x48>)
   22a78:	2214      	movs	r2, #20
   22a7a:	3008      	adds	r0, #8
   22a7c:	f7ff f908 	bl	21c90 <CC_PalMemCopyPlat>
   22a80:	e7f7      	b.n	22a72 <InitHashDrv+0x1e>
   22a82:	4907      	ldr	r1, [pc, #28]	; (22aa0 <InitHashDrv+0x4c>)
   22a84:	2220      	movs	r2, #32
   22a86:	3008      	adds	r0, #8
   22a88:	f7ff f902 	bl	21c90 <CC_PalMemCopyPlat>
   22a8c:	e7f1      	b.n	22a72 <InitHashDrv+0x1e>
   22a8e:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   22a92:	4770      	bx	lr
   22a94:	00f30001 	.word	0x00f30001
   22a98:	00028c38 	.word	0x00028c38
   22a9c:	00028c78 	.word	0x00028c78
   22aa0:	00028c58 	.word	0x00028c58

00022aa4 <ProcessHashDrv>:
   22aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22aa8:	2900      	cmp	r1, #0
   22aaa:	f000 80f9 	beq.w	22ca0 <ProcessHashDrv+0x1fc>
   22aae:	4604      	mov	r4, r0
   22ab0:	2800      	cmp	r0, #0
   22ab2:	f000 80f9 	beq.w	22ca8 <ProcessHashDrv+0x204>
   22ab6:	6803      	ldr	r3, [r0, #0]
   22ab8:	4690      	mov	r8, r2
   22aba:	460f      	mov	r7, r1
   22abc:	2b00      	cmp	r3, #0
   22abe:	f000 80c3 	beq.w	22c48 <ProcessHashDrv+0x1a4>
   22ac2:	3b01      	subs	r3, #1
   22ac4:	2b01      	cmp	r3, #1
   22ac6:	f200 80d7 	bhi.w	22c78 <ProcessHashDrv+0x1d4>
   22aca:	4879      	ldr	r0, [pc, #484]	; (22cb0 <ProcessHashDrv+0x20c>)
   22acc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22ad0:	f04f 0902 	mov.w	r9, #2
   22ad4:	f7ff f8f8 	bl	21cc8 <CC_PalMutexLock>
   22ad8:	2800      	cmp	r0, #0
   22ada:	f040 80bf 	bne.w	22c5c <ProcessHashDrv+0x1b8>
   22ade:	2000      	movs	r0, #0
   22ae0:	f7ff f922 	bl	21d28 <CC_PalPowerSaveModeSelect>
   22ae4:	4606      	mov	r6, r0
   22ae6:	2800      	cmp	r0, #0
   22ae8:	f040 80c2 	bne.w	22c70 <ProcessHashDrv+0x1cc>
   22aec:	4a71      	ldr	r2, [pc, #452]	; (22cb4 <ProcessHashDrv+0x210>)
   22aee:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   22af2:	2b00      	cmp	r3, #0
   22af4:	d1fb      	bne.n	22aee <ProcessHashDrv+0x4a>
   22af6:	4d6f      	ldr	r5, [pc, #444]	; (22cb4 <ProcessHashDrv+0x210>)
   22af8:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   22afc:	2b00      	cmp	r3, #0
   22afe:	d1fb      	bne.n	22af8 <ProcessHashDrv+0x54>
   22b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22b04:	f7ff f836 	bl	21b74 <CC_HalClearInterruptBit>
   22b08:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   22b0c:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   22b10:	f7ff f83e 	bl	21b90 <CC_HalMaskInterrupt>
   22b14:	2301      	movs	r3, #1
   22b16:	2207      	movs	r2, #7
   22b18:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   22b1c:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   22b20:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   22b24:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   22b26:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   22b2a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   22b2c:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   22b30:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   22b34:	6823      	ldr	r3, [r4, #0]
   22b36:	b15b      	cbz	r3, 22b50 <ProcessHashDrv+0xac>
   22b38:	3b01      	subs	r3, #1
   22b3a:	2b01      	cmp	r3, #1
   22b3c:	d818      	bhi.n	22b70 <ProcessHashDrv+0xcc>
   22b3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22b40:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   22b44:	6a23      	ldr	r3, [r4, #32]
   22b46:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   22b4a:	69e3      	ldr	r3, [r4, #28]
   22b4c:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   22b50:	4b58      	ldr	r3, [pc, #352]	; (22cb4 <ProcessHashDrv+0x210>)
   22b52:	69a2      	ldr	r2, [r4, #24]
   22b54:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   22b58:	6962      	ldr	r2, [r4, #20]
   22b5a:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   22b5e:	6922      	ldr	r2, [r4, #16]
   22b60:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   22b64:	68e2      	ldr	r2, [r4, #12]
   22b66:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   22b6a:	68a2      	ldr	r2, [r4, #8]
   22b6c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   22b70:	4a50      	ldr	r2, [pc, #320]	; (22cb4 <ProcessHashDrv+0x210>)
   22b72:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   22b76:	2b00      	cmp	r3, #0
   22b78:	d1fb      	bne.n	22b72 <ProcessHashDrv+0xce>
   22b7a:	f1b8 0f00 	cmp.w	r8, #0
   22b7e:	d05f      	beq.n	22c40 <ProcessHashDrv+0x19c>
   22b80:	6863      	ldr	r3, [r4, #4]
   22b82:	2b01      	cmp	r3, #1
   22b84:	bf08      	it	eq
   22b86:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   22b8a:	4b4a      	ldr	r3, [pc, #296]	; (22cb4 <ProcessHashDrv+0x210>)
   22b8c:	683a      	ldr	r2, [r7, #0]
   22b8e:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   22b92:	2040      	movs	r0, #64	; 0x40
   22b94:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   22b98:	f7ff f800 	bl	21b9c <CC_HalWaitInterrupt>
   22b9c:	4606      	mov	r6, r0
   22b9e:	4a45      	ldr	r2, [pc, #276]	; (22cb4 <ProcessHashDrv+0x210>)
   22ba0:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   22ba4:	2b00      	cmp	r3, #0
   22ba6:	d1fb      	bne.n	22ba0 <ProcessHashDrv+0xfc>
   22ba8:	4a42      	ldr	r2, [pc, #264]	; (22cb4 <ProcessHashDrv+0x210>)
   22baa:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   22bae:	2b00      	cmp	r3, #0
   22bb0:	d1fb      	bne.n	22baa <ProcessHashDrv+0x106>
   22bb2:	6823      	ldr	r3, [r4, #0]
   22bb4:	b15b      	cbz	r3, 22bce <ProcessHashDrv+0x12a>
   22bb6:	3b01      	subs	r3, #1
   22bb8:	2b01      	cmp	r3, #1
   22bba:	d818      	bhi.n	22bee <ProcessHashDrv+0x14a>
   22bbc:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   22bc0:	6263      	str	r3, [r4, #36]	; 0x24
   22bc2:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   22bc6:	6223      	str	r3, [r4, #32]
   22bc8:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   22bcc:	61e3      	str	r3, [r4, #28]
   22bce:	4b39      	ldr	r3, [pc, #228]	; (22cb4 <ProcessHashDrv+0x210>)
   22bd0:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   22bd4:	61a2      	str	r2, [r4, #24]
   22bd6:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   22bda:	6162      	str	r2, [r4, #20]
   22bdc:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   22be0:	6122      	str	r2, [r4, #16]
   22be2:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   22be6:	60e2      	str	r2, [r4, #12]
   22be8:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   22bec:	60a3      	str	r3, [r4, #8]
   22bee:	4a31      	ldr	r2, [pc, #196]	; (22cb4 <ProcessHashDrv+0x210>)
   22bf0:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   22bf4:	64a1      	str	r1, [r4, #72]	; 0x48
   22bf6:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   22bfa:	64e1      	str	r1, [r4, #76]	; 0x4c
   22bfc:	2300      	movs	r3, #0
   22bfe:	2101      	movs	r1, #1
   22c00:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   22c04:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   22c08:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   22c0c:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   22c10:	2b00      	cmp	r3, #0
   22c12:	d1fb      	bne.n	22c0c <ProcessHashDrv+0x168>
   22c14:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   22c18:	2e00      	cmp	r6, #0
   22c1a:	d13b      	bne.n	22c94 <ProcessHashDrv+0x1f0>
   22c1c:	4b25      	ldr	r3, [pc, #148]	; (22cb4 <ProcessHashDrv+0x210>)
   22c1e:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   22c22:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   22c26:	f7fe ffb3 	bl	21b90 <CC_HalMaskInterrupt>
   22c2a:	2001      	movs	r0, #1
   22c2c:	f7ff f87c 	bl	21d28 <CC_PalPowerSaveModeSelect>
   22c30:	bb60      	cbnz	r0, 22c8c <ProcessHashDrv+0x1e8>
   22c32:	481f      	ldr	r0, [pc, #124]	; (22cb0 <ProcessHashDrv+0x20c>)
   22c34:	f7ff f850 	bl	21cd8 <CC_PalMutexUnlock>
   22c38:	bb10      	cbnz	r0, 22c80 <ProcessHashDrv+0x1dc>
   22c3a:	4630      	mov	r0, r6
   22c3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22c40:	2304      	movs	r3, #4
   22c42:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   22c46:	e7aa      	b.n	22b9e <ProcessHashDrv+0xfa>
   22c48:	4819      	ldr	r0, [pc, #100]	; (22cb0 <ProcessHashDrv+0x20c>)
   22c4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22c4e:	f04f 0901 	mov.w	r9, #1
   22c52:	f7ff f839 	bl	21cc8 <CC_PalMutexLock>
   22c56:	2800      	cmp	r0, #0
   22c58:	f43f af41 	beq.w	22ade <ProcessHashDrv+0x3a>
   22c5c:	4816      	ldr	r0, [pc, #88]	; (22cb8 <ProcessHashDrv+0x214>)
   22c5e:	f7fe f927 	bl	20eb0 <CC_PalAbort>
   22c62:	2000      	movs	r0, #0
   22c64:	f7ff f860 	bl	21d28 <CC_PalPowerSaveModeSelect>
   22c68:	4606      	mov	r6, r0
   22c6a:	2800      	cmp	r0, #0
   22c6c:	f43f af3e 	beq.w	22aec <ProcessHashDrv+0x48>
   22c70:	4812      	ldr	r0, [pc, #72]	; (22cbc <ProcessHashDrv+0x218>)
   22c72:	f7fe f91d 	bl	20eb0 <CC_PalAbort>
   22c76:	e739      	b.n	22aec <ProcessHashDrv+0x48>
   22c78:	4e11      	ldr	r6, [pc, #68]	; (22cc0 <ProcessHashDrv+0x21c>)
   22c7a:	4630      	mov	r0, r6
   22c7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22c80:	4810      	ldr	r0, [pc, #64]	; (22cc4 <ProcessHashDrv+0x220>)
   22c82:	f7fe f915 	bl	20eb0 <CC_PalAbort>
   22c86:	4630      	mov	r0, r6
   22c88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22c8c:	480e      	ldr	r0, [pc, #56]	; (22cc8 <ProcessHashDrv+0x224>)
   22c8e:	f7fe f90f 	bl	20eb0 <CC_PalAbort>
   22c92:	e7ce      	b.n	22c32 <ProcessHashDrv+0x18e>
   22c94:	2110      	movs	r1, #16
   22c96:	f104 0008 	add.w	r0, r4, #8
   22c9a:	f7fe fffd 	bl	21c98 <CC_PalMemSetZeroPlat>
   22c9e:	e7bd      	b.n	22c1c <ProcessHashDrv+0x178>
   22ca0:	4e0a      	ldr	r6, [pc, #40]	; (22ccc <ProcessHashDrv+0x228>)
   22ca2:	4630      	mov	r0, r6
   22ca4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22ca8:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   22cac:	e7c5      	b.n	22c3a <ProcessHashDrv+0x196>
   22cae:	bf00      	nop
   22cb0:	2000077c 	.word	0x2000077c
   22cb4:	5002b000 	.word	0x5002b000
   22cb8:	00028b6c 	.word	0x00028b6c
   22cbc:	00028b84 	.word	0x00028b84
   22cc0:	00f30001 	.word	0x00f30001
   22cc4:	00028bc4 	.word	0x00028bc4
   22cc8:	00028ba4 	.word	0x00028ba4
   22ccc:	00f30003 	.word	0x00f30003

00022cd0 <FinishHashDrv>:
   22cd0:	b398      	cbz	r0, 22d3a <FinishHashDrv+0x6a>
   22cd2:	b470      	push	{r4, r5, r6}
   22cd4:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   22cd8:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   22cdc:	ba26      	rev	r6, r4
   22cde:	ba0d      	rev	r5, r1
   22ce0:	ba14      	rev	r4, r2
   22ce2:	ba19      	rev	r1, r3
   22ce4:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   22ce8:	ba12      	rev	r2, r2
   22cea:	e9c0 4104 	strd	r4, r1, [r0, #16]
   22cee:	6182      	str	r2, [r0, #24]
   22cf0:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   22cf4:	e9c0 6502 	strd	r6, r5, [r0, #8]
   22cf8:	ba1b      	rev	r3, r3
   22cfa:	ba25      	rev	r5, r4
   22cfc:	e9c0 3507 	strd	r3, r5, [r0, #28]
   22d00:	ba14      	rev	r4, r2
   22d02:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   22d06:	6a81      	ldr	r1, [r0, #40]	; 0x28
   22d08:	ba12      	rev	r2, r2
   22d0a:	ba09      	rev	r1, r1
   22d0c:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   22d10:	62c2      	str	r2, [r0, #44]	; 0x2c
   22d12:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   22d16:	ba1b      	rev	r3, r3
   22d18:	ba25      	rev	r5, r4
   22d1a:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   22d1e:	ba14      	rev	r4, r2
   22d20:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   22d24:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   22d26:	ba12      	rev	r2, r2
   22d28:	ba09      	rev	r1, r1
   22d2a:	ba1b      	rev	r3, r3
   22d2c:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   22d30:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   22d34:	2000      	movs	r0, #0
   22d36:	bc70      	pop	{r4, r5, r6}
   22d38:	4770      	bx	lr
   22d3a:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   22d3e:	4770      	bx	lr

00022d40 <LoadAesKey>:
   22d40:	2800      	cmp	r0, #0
   22d42:	d047      	beq.n	22dd4 <LoadAesKey+0x94>
   22d44:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   22d48:	2b00      	cmp	r3, #0
   22d4a:	d034      	beq.n	22db6 <LoadAesKey+0x76>
   22d4c:	2b03      	cmp	r3, #3
   22d4e:	b510      	push	{r4, lr}
   22d50:	d013      	beq.n	22d7a <LoadAesKey+0x3a>
   22d52:	4822      	ldr	r0, [pc, #136]	; (22ddc <LoadAesKey+0x9c>)
   22d54:	4c22      	ldr	r4, [pc, #136]	; (22de0 <LoadAesKey+0xa0>)
   22d56:	6822      	ldr	r2, [r4, #0]
   22d58:	4b22      	ldr	r3, [pc, #136]	; (22de4 <LoadAesKey+0xa4>)
   22d5a:	6812      	ldr	r2, [r2, #0]
   22d5c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   22d60:	6822      	ldr	r2, [r4, #0]
   22d62:	6852      	ldr	r2, [r2, #4]
   22d64:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   22d68:	6822      	ldr	r2, [r4, #0]
   22d6a:	6892      	ldr	r2, [r2, #8]
   22d6c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   22d70:	6822      	ldr	r2, [r4, #0]
   22d72:	68d2      	ldr	r2, [r2, #12]
   22d74:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   22d78:	bd10      	pop	{r4, pc}
   22d7a:	6b01      	ldr	r1, [r0, #48]	; 0x30
   22d7c:	6c00      	ldr	r0, [r0, #64]	; 0x40
   22d7e:	4c18      	ldr	r4, [pc, #96]	; (22de0 <LoadAesKey+0xa0>)
   22d80:	f000 fba8 	bl	234d4 <kmu_validate_kdr_slot_and_size>
   22d84:	2800      	cmp	r0, #0
   22d86:	d1e6      	bne.n	22d56 <LoadAesKey+0x16>
   22d88:	6822      	ldr	r2, [r4, #0]
   22d8a:	4b16      	ldr	r3, [pc, #88]	; (22de4 <LoadAesKey+0xa4>)
   22d8c:	6812      	ldr	r2, [r2, #0]
   22d8e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   22d92:	6822      	ldr	r2, [r4, #0]
   22d94:	6852      	ldr	r2, [r2, #4]
   22d96:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   22d9a:	6822      	ldr	r2, [r4, #0]
   22d9c:	6892      	ldr	r2, [r2, #8]
   22d9e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   22da2:	6822      	ldr	r2, [r4, #0]
   22da4:	68d2      	ldr	r2, [r2, #12]
   22da6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   22daa:	f000 fba1 	bl	234f0 <kmu_use_kdr_key>
   22dae:	2800      	cmp	r0, #0
   22db0:	d1d1      	bne.n	22d56 <LoadAesKey+0x16>
   22db2:	2000      	movs	r0, #0
   22db4:	bd10      	pop	{r4, pc}
   22db6:	4b0b      	ldr	r3, [pc, #44]	; (22de4 <LoadAesKey+0xa4>)
   22db8:	6902      	ldr	r2, [r0, #16]
   22dba:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   22dbe:	6942      	ldr	r2, [r0, #20]
   22dc0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   22dc4:	6982      	ldr	r2, [r0, #24]
   22dc6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   22dca:	69c2      	ldr	r2, [r0, #28]
   22dcc:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   22dd0:	2000      	movs	r0, #0
   22dd2:	4770      	bx	lr
   22dd4:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   22dd8:	4770      	bx	lr
   22dda:	bf00      	nop
   22ddc:	00f10009 	.word	0x00f10009
   22de0:	20000768 	.word	0x20000768
   22de4:	5002b000 	.word	0x5002b000

00022de8 <InitAes.part.0>:
   22de8:	4a37      	ldr	r2, [pc, #220]	; (22ec8 <InitAes.part.0+0xe0>)
   22dea:	b538      	push	{r3, r4, r5, lr}
   22dec:	4604      	mov	r4, r0
   22dee:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   22df2:	2b00      	cmp	r3, #0
   22df4:	d1fb      	bne.n	22dee <InitAes.part.0+0x6>
   22df6:	4a34      	ldr	r2, [pc, #208]	; (22ec8 <InitAes.part.0+0xe0>)
   22df8:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   22dfc:	2b00      	cmp	r3, #0
   22dfe:	d1fb      	bne.n	22df8 <InitAes.part.0+0x10>
   22e00:	4a31      	ldr	r2, [pc, #196]	; (22ec8 <InitAes.part.0+0xe0>)
   22e02:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   22e06:	2b00      	cmp	r3, #0
   22e08:	d1fb      	bne.n	22e02 <InitAes.part.0+0x1a>
   22e0a:	4a2f      	ldr	r2, [pc, #188]	; (22ec8 <InitAes.part.0+0xe0>)
   22e0c:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   22e10:	2b00      	cmp	r3, #0
   22e12:	d1fb      	bne.n	22e0c <InitAes.part.0+0x24>
   22e14:	4a2c      	ldr	r2, [pc, #176]	; (22ec8 <InitAes.part.0+0xe0>)
   22e16:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   22e1a:	2b00      	cmp	r3, #0
   22e1c:	d1fb      	bne.n	22e16 <InitAes.part.0+0x2e>
   22e1e:	4d2a      	ldr	r5, [pc, #168]	; (22ec8 <InitAes.part.0+0xe0>)
   22e20:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   22e24:	2b00      	cmp	r3, #0
   22e26:	d1fb      	bne.n	22e20 <InitAes.part.0+0x38>
   22e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22e2c:	f7fe fea2 	bl	21b74 <CC_HalClearInterruptBit>
   22e30:	6b63      	ldr	r3, [r4, #52]	; 0x34
   22e32:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   22e36:	f023 0304 	bic.w	r3, r3, #4
   22e3a:	2b03      	cmp	r3, #3
   22e3c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   22e3e:	d039      	beq.n	22eb4 <InitAes.part.0+0xcc>
   22e40:	2b01      	cmp	r3, #1
   22e42:	bf0c      	ite	eq
   22e44:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   22e48:	f020 0020 	bicne.w	r0, r0, #32
   22e4c:	f7fe fea0 	bl	21b90 <CC_HalMaskInterrupt>
   22e50:	4a1d      	ldr	r2, [pc, #116]	; (22ec8 <InitAes.part.0+0xe0>)
   22e52:	2301      	movs	r3, #1
   22e54:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   22e58:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   22e5c:	2b00      	cmp	r3, #0
   22e5e:	d1fb      	bne.n	22e58 <InitAes.part.0+0x70>
   22e60:	4a19      	ldr	r2, [pc, #100]	; (22ec8 <InitAes.part.0+0xe0>)
   22e62:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   22e66:	2b00      	cmp	r3, #0
   22e68:	d1fb      	bne.n	22e62 <InitAes.part.0+0x7a>
   22e6a:	4917      	ldr	r1, [pc, #92]	; (22ec8 <InitAes.part.0+0xe0>)
   22e6c:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   22e70:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   22e74:	2b00      	cmp	r3, #0
   22e76:	d1fb      	bne.n	22e70 <InitAes.part.0+0x88>
   22e78:	4a13      	ldr	r2, [pc, #76]	; (22ec8 <InitAes.part.0+0xe0>)
   22e7a:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   22e7e:	2b00      	cmp	r3, #0
   22e80:	d1fb      	bne.n	22e7a <InitAes.part.0+0x92>
   22e82:	6b62      	ldr	r2, [r4, #52]	; 0x34
   22e84:	f022 0104 	bic.w	r1, r2, #4
   22e88:	2903      	cmp	r1, #3
   22e8a:	bf18      	it	ne
   22e8c:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   22e8e:	490e      	ldr	r1, [pc, #56]	; (22ec8 <InitAes.part.0+0xe0>)
   22e90:	ea4f 0282 	mov.w	r2, r2, lsl #2
   22e94:	bf18      	it	ne
   22e96:	f003 0301 	andne.w	r3, r3, #1
   22e9a:	f002 021c 	and.w	r2, r2, #28
   22e9e:	431a      	orrs	r2, r3
   22ea0:	f8c1 24c0 	str.w	r2, [r1, #1216]	; 0x4c0
   22ea4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   22ea6:	2b07      	cmp	r3, #7
   22ea8:	bf04      	itt	eq
   22eaa:	2301      	moveq	r3, #1
   22eac:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   22eb0:	2000      	movs	r0, #0
   22eb2:	bd38      	pop	{r3, r4, r5, pc}
   22eb4:	2b01      	cmp	r3, #1
   22eb6:	bf0c      	ite	eq
   22eb8:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   22ebc:	f020 0010 	bicne.w	r0, r0, #16
   22ec0:	f7fe fe66 	bl	21b90 <CC_HalMaskInterrupt>
   22ec4:	e7c4      	b.n	22e50 <InitAes.part.0+0x68>
   22ec6:	bf00      	nop
   22ec8:	5002b000 	.word	0x5002b000

00022ecc <write_invalid_key>:
   22ecc:	4a09      	ldr	r2, [pc, #36]	; (22ef4 <write_invalid_key+0x28>)
   22ece:	4b0a      	ldr	r3, [pc, #40]	; (22ef8 <write_invalid_key+0x2c>)
   22ed0:	6811      	ldr	r1, [r2, #0]
   22ed2:	6809      	ldr	r1, [r1, #0]
   22ed4:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   22ed8:	6811      	ldr	r1, [r2, #0]
   22eda:	6849      	ldr	r1, [r1, #4]
   22edc:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   22ee0:	6811      	ldr	r1, [r2, #0]
   22ee2:	6889      	ldr	r1, [r1, #8]
   22ee4:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   22ee8:	6812      	ldr	r2, [r2, #0]
   22eea:	68d2      	ldr	r2, [r2, #12]
   22eec:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   22ef0:	4770      	bx	lr
   22ef2:	bf00      	nop
   22ef4:	20000768 	.word	0x20000768
   22ef8:	5002b000 	.word	0x5002b000

00022efc <ProcessAesDrv>:
   22efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22f00:	b085      	sub	sp, #20
   22f02:	2900      	cmp	r1, #0
   22f04:	f000 80ec 	beq.w	230e0 <ProcessAesDrv+0x1e4>
   22f08:	4690      	mov	r8, r2
   22f0a:	2a00      	cmp	r2, #0
   22f0c:	f000 80e8 	beq.w	230e0 <ProcessAesDrv+0x1e4>
   22f10:	4605      	mov	r5, r0
   22f12:	2800      	cmp	r0, #0
   22f14:	f000 8129 	beq.w	2316a <ProcessAesDrv+0x26e>
   22f18:	4699      	mov	r9, r3
   22f1a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   22f1c:	460e      	mov	r6, r1
   22f1e:	2b00      	cmp	r3, #0
   22f20:	d152      	bne.n	22fc8 <ProcessAesDrv+0xcc>
   22f22:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   22f26:	d254      	bcs.n	22fd2 <ProcessAesDrv+0xd6>
   22f28:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   22f2c:	2b04      	cmp	r3, #4
   22f2e:	f000 80ff 	beq.w	23130 <ProcessAesDrv+0x234>
   22f32:	2700      	movs	r7, #0
   22f34:	48ad      	ldr	r0, [pc, #692]	; (231ec <ProcessAesDrv+0x2f0>)
   22f36:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22f3a:	f7fe fec5 	bl	21cc8 <CC_PalMutexLock>
   22f3e:	2800      	cmp	r0, #0
   22f40:	f040 80d5 	bne.w	230ee <ProcessAesDrv+0x1f2>
   22f44:	2000      	movs	r0, #0
   22f46:	f7fe feef 	bl	21d28 <CC_PalPowerSaveModeSelect>
   22f4a:	2800      	cmp	r0, #0
   22f4c:	f040 80d8 	bne.w	23100 <ProcessAesDrv+0x204>
   22f50:	48a7      	ldr	r0, [pc, #668]	; (231f0 <ProcessAesDrv+0x2f4>)
   22f52:	2301      	movs	r3, #1
   22f54:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   22f58:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   22f5c:	2c00      	cmp	r4, #0
   22f5e:	d1fb      	bne.n	22f58 <ProcessAesDrv+0x5c>
   22f60:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   22f62:	2b03      	cmp	r3, #3
   22f64:	dc3a      	bgt.n	22fdc <ProcessAesDrv+0xe0>
   22f66:	2b00      	cmp	r3, #0
   22f68:	da3b      	bge.n	22fe2 <ProcessAesDrv+0xe6>
   22f6a:	4ca2      	ldr	r4, [pc, #648]	; (231f4 <ProcessAesDrv+0x2f8>)
   22f6c:	4aa0      	ldr	r2, [pc, #640]	; (231f0 <ProcessAesDrv+0x2f4>)
   22f6e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   22f72:	2b00      	cmp	r3, #0
   22f74:	d1fb      	bne.n	22f6e <ProcessAesDrv+0x72>
   22f76:	2f00      	cmp	r7, #0
   22f78:	f040 80d1 	bne.w	2311e <ProcessAesDrv+0x222>
   22f7c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   22f7e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   22f80:	f023 0304 	bic.w	r3, r3, #4
   22f84:	2b03      	cmp	r3, #3
   22f86:	4b9a      	ldr	r3, [pc, #616]	; (231f0 <ProcessAesDrv+0x2f4>)
   22f88:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   22f8c:	f000 809f 	beq.w	230ce <ProcessAesDrv+0x1d2>
   22f90:	2a01      	cmp	r2, #1
   22f92:	bf0c      	ite	eq
   22f94:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   22f98:	f040 0020 	orrne.w	r0, r0, #32
   22f9c:	f7fe fdf8 	bl	21b90 <CC_HalMaskInterrupt>
   22fa0:	4b93      	ldr	r3, [pc, #588]	; (231f0 <ProcessAesDrv+0x2f4>)
   22fa2:	2200      	movs	r2, #0
   22fa4:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   22fa8:	2001      	movs	r0, #1
   22faa:	f7fe febd 	bl	21d28 <CC_PalPowerSaveModeSelect>
   22fae:	2800      	cmp	r0, #0
   22fb0:	f040 80b1 	bne.w	23116 <ProcessAesDrv+0x21a>
   22fb4:	488d      	ldr	r0, [pc, #564]	; (231ec <ProcessAesDrv+0x2f0>)
   22fb6:	f7fe fe8f 	bl	21cd8 <CC_PalMutexUnlock>
   22fba:	2800      	cmp	r0, #0
   22fbc:	f040 80a4 	bne.w	23108 <ProcessAesDrv+0x20c>
   22fc0:	4620      	mov	r0, r4
   22fc2:	b005      	add	sp, #20
   22fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22fc8:	2b01      	cmp	r3, #1
   22fca:	d1ad      	bne.n	22f28 <ProcessAesDrv+0x2c>
   22fcc:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   22fd0:	d3aa      	bcc.n	22f28 <ProcessAesDrv+0x2c>
   22fd2:	4c89      	ldr	r4, [pc, #548]	; (231f8 <ProcessAesDrv+0x2fc>)
   22fd4:	4620      	mov	r0, r4
   22fd6:	b005      	add	sp, #20
   22fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22fdc:	3b06      	subs	r3, #6
   22fde:	2b01      	cmp	r3, #1
   22fe0:	d8c3      	bhi.n	22f6a <ProcessAesDrv+0x6e>
   22fe2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   22fe4:	2b01      	cmp	r3, #1
   22fe6:	f200 80be 	bhi.w	23166 <ProcessAesDrv+0x26a>
   22fea:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   22fec:	2b01      	cmp	r3, #1
   22fee:	d87c      	bhi.n	230ea <ProcessAesDrv+0x1ee>
   22ff0:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   22ff2:	2b01      	cmp	r3, #1
   22ff4:	f200 80e8 	bhi.w	231c8 <ProcessAesDrv+0x2cc>
   22ff8:	4628      	mov	r0, r5
   22ffa:	f7ff fef5 	bl	22de8 <InitAes.part.0>
   22ffe:	4604      	mov	r4, r0
   23000:	2800      	cmp	r0, #0
   23002:	d1b3      	bne.n	22f6c <ProcessAesDrv+0x70>
   23004:	4628      	mov	r0, r5
   23006:	f7ff fe9b 	bl	22d40 <LoadAesKey>
   2300a:	4604      	mov	r4, r0
   2300c:	2800      	cmp	r0, #0
   2300e:	d1ad      	bne.n	22f6c <ProcessAesDrv+0x70>
   23010:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   23012:	2b07      	cmp	r3, #7
   23014:	d8a9      	bhi.n	22f6a <ProcessAesDrv+0x6e>
   23016:	2201      	movs	r2, #1
   23018:	409a      	lsls	r2, r3
   2301a:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   2301e:	f040 80d5 	bne.w	231cc <ProcessAesDrv+0x2d0>
   23022:	f012 0f44 	tst.w	r2, #68	; 0x44
   23026:	f040 80ba 	bne.w	2319e <ProcessAesDrv+0x2a2>
   2302a:	07d2      	lsls	r2, r2, #31
   2302c:	d59d      	bpl.n	22f6a <ProcessAesDrv+0x6e>
   2302e:	f023 0304 	bic.w	r3, r3, #4
   23032:	2b03      	cmp	r3, #3
   23034:	6832      	ldr	r2, [r6, #0]
   23036:	d00d      	beq.n	23054 <ProcessAesDrv+0x158>
   23038:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   2303a:	f8d8 1000 	ldr.w	r1, [r8]
   2303e:	2b01      	cmp	r3, #1
   23040:	4b6b      	ldr	r3, [pc, #428]	; (231f0 <ProcessAesDrv+0x2f4>)
   23042:	bf0b      	itete	eq
   23044:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   23048:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   2304c:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   23050:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   23054:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   23056:	2b01      	cmp	r3, #1
   23058:	4b65      	ldr	r3, [pc, #404]	; (231f0 <ProcessAesDrv+0x2f4>)
   2305a:	bf0b      	itete	eq
   2305c:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   23060:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   23064:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   23068:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   2306c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2306e:	f023 0304 	bic.w	r3, r3, #4
   23072:	2b03      	cmp	r3, #3
   23074:	f000 80a2 	beq.w	231bc <ProcessAesDrv+0x2c0>
   23078:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   2307a:	2b01      	cmp	r3, #1
   2307c:	bf14      	ite	ne
   2307e:	2020      	movne	r0, #32
   23080:	2080      	moveq	r0, #128	; 0x80
   23082:	f7fe fd8b 	bl	21b9c <CC_HalWaitInterrupt>
   23086:	4604      	mov	r4, r0
   23088:	2800      	cmp	r0, #0
   2308a:	f47f af6f 	bne.w	22f6c <ProcessAesDrv+0x70>
   2308e:	4b58      	ldr	r3, [pc, #352]	; (231f0 <ProcessAesDrv+0x2f4>)
   23090:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   23094:	2c00      	cmp	r4, #0
   23096:	d1fb      	bne.n	23090 <ProcessAesDrv+0x194>
   23098:	6b69      	ldr	r1, [r5, #52]	; 0x34
   2309a:	2907      	cmp	r1, #7
   2309c:	d814      	bhi.n	230c8 <ProcessAesDrv+0x1cc>
   2309e:	2201      	movs	r2, #1
   230a0:	408a      	lsls	r2, r1
   230a2:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   230a6:	f040 80bb 	bne.w	23220 <ProcessAesDrv+0x324>
   230aa:	f012 0f44 	tst.w	r2, #68	; 0x44
   230ae:	d00b      	beq.n	230c8 <ProcessAesDrv+0x1cc>
   230b0:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   230b4:	602a      	str	r2, [r5, #0]
   230b6:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   230ba:	606a      	str	r2, [r5, #4]
   230bc:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   230c0:	60aa      	str	r2, [r5, #8]
   230c2:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   230c6:	60eb      	str	r3, [r5, #12]
   230c8:	2301      	movs	r3, #1
   230ca:	65ab      	str	r3, [r5, #88]	; 0x58
   230cc:	e74e      	b.n	22f6c <ProcessAesDrv+0x70>
   230ce:	2a01      	cmp	r2, #1
   230d0:	bf0c      	ite	eq
   230d2:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   230d6:	f040 0010 	orrne.w	r0, r0, #16
   230da:	f7fe fd59 	bl	21b90 <CC_HalMaskInterrupt>
   230de:	e75f      	b.n	22fa0 <ProcessAesDrv+0xa4>
   230e0:	4c46      	ldr	r4, [pc, #280]	; (231fc <ProcessAesDrv+0x300>)
   230e2:	4620      	mov	r0, r4
   230e4:	b005      	add	sp, #20
   230e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   230ea:	4c45      	ldr	r4, [pc, #276]	; (23200 <ProcessAesDrv+0x304>)
   230ec:	e73e      	b.n	22f6c <ProcessAesDrv+0x70>
   230ee:	4845      	ldr	r0, [pc, #276]	; (23204 <ProcessAesDrv+0x308>)
   230f0:	f7fd fede 	bl	20eb0 <CC_PalAbort>
   230f4:	2000      	movs	r0, #0
   230f6:	f7fe fe17 	bl	21d28 <CC_PalPowerSaveModeSelect>
   230fa:	2800      	cmp	r0, #0
   230fc:	f43f af28 	beq.w	22f50 <ProcessAesDrv+0x54>
   23100:	4841      	ldr	r0, [pc, #260]	; (23208 <ProcessAesDrv+0x30c>)
   23102:	f7fd fed5 	bl	20eb0 <CC_PalAbort>
   23106:	e723      	b.n	22f50 <ProcessAesDrv+0x54>
   23108:	4840      	ldr	r0, [pc, #256]	; (2320c <ProcessAesDrv+0x310>)
   2310a:	f7fd fed1 	bl	20eb0 <CC_PalAbort>
   2310e:	4620      	mov	r0, r4
   23110:	b005      	add	sp, #20
   23112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23116:	483e      	ldr	r0, [pc, #248]	; (23210 <ProcessAesDrv+0x314>)
   23118:	f7fd feca 	bl	20eb0 <CC_PalAbort>
   2311c:	e74a      	b.n	22fb4 <ProcessAesDrv+0xb8>
   2311e:	2304      	movs	r3, #4
   23120:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   23124:	2120      	movs	r1, #32
   23126:	f105 0010 	add.w	r0, r5, #16
   2312a:	f7fe fdb5 	bl	21c98 <CC_PalMemSetZeroPlat>
   2312e:	e725      	b.n	22f7c <ProcessAesDrv+0x80>
   23130:	6b29      	ldr	r1, [r5, #48]	; 0x30
   23132:	6c28      	ldr	r0, [r5, #64]	; 0x40
   23134:	f000 f9c0 	bl	234b8 <kmu_validate_slot_and_size>
   23138:	b998      	cbnz	r0, 23162 <ProcessAesDrv+0x266>
   2313a:	4f36      	ldr	r7, [pc, #216]	; (23214 <ProcessAesDrv+0x318>)
   2313c:	4c2c      	ldr	r4, [pc, #176]	; (231f0 <ProcessAesDrv+0x2f4>)
   2313e:	683b      	ldr	r3, [r7, #0]
   23140:	681b      	ldr	r3, [r3, #0]
   23142:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   23146:	683b      	ldr	r3, [r7, #0]
   23148:	685b      	ldr	r3, [r3, #4]
   2314a:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   2314e:	683b      	ldr	r3, [r7, #0]
   23150:	689b      	ldr	r3, [r3, #8]
   23152:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   23156:	683b      	ldr	r3, [r7, #0]
   23158:	68db      	ldr	r3, [r3, #12]
   2315a:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   2315e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   23160:	b131      	cbz	r1, 23170 <ProcessAesDrv+0x274>
   23162:	2701      	movs	r7, #1
   23164:	e6e6      	b.n	22f34 <ProcessAesDrv+0x38>
   23166:	4c2c      	ldr	r4, [pc, #176]	; (23218 <ProcessAesDrv+0x31c>)
   23168:	e700      	b.n	22f6c <ProcessAesDrv+0x70>
   2316a:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   2316e:	e727      	b.n	22fc0 <ProcessAesDrv+0xc4>
   23170:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   23172:	9301      	str	r3, [sp, #4]
   23174:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   23176:	9300      	str	r3, [sp, #0]
   23178:	f105 0a10 	add.w	sl, r5, #16
   2317c:	f04f 0b10 	mov.w	fp, #16
   23180:	f8cd a008 	str.w	sl, [sp, #8]
   23184:	f8cd b00c 	str.w	fp, [sp, #12]
   23188:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   2318c:	6c28      	ldr	r0, [r5, #64]	; 0x40
   2318e:	f000 f9b9 	bl	23504 <kmu_derive_cmac>
   23192:	2800      	cmp	r0, #0
   23194:	d151      	bne.n	2323a <ProcessAesDrv+0x33e>
   23196:	2300      	movs	r3, #0
   23198:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   2319c:	e7e1      	b.n	23162 <ProcessAesDrv+0x266>
   2319e:	4b14      	ldr	r3, [pc, #80]	; (231f0 <ProcessAesDrv+0x2f4>)
   231a0:	682a      	ldr	r2, [r5, #0]
   231a2:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   231a6:	686a      	ldr	r2, [r5, #4]
   231a8:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   231ac:	68aa      	ldr	r2, [r5, #8]
   231ae:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   231b2:	68ea      	ldr	r2, [r5, #12]
   231b4:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   231b8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   231ba:	e738      	b.n	2302e <ProcessAesDrv+0x132>
   231bc:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   231be:	2b01      	cmp	r3, #1
   231c0:	bf14      	ite	ne
   231c2:	2010      	movne	r0, #16
   231c4:	2040      	moveq	r0, #64	; 0x40
   231c6:	e75c      	b.n	23082 <ProcessAesDrv+0x186>
   231c8:	4c14      	ldr	r4, [pc, #80]	; (2321c <ProcessAesDrv+0x320>)
   231ca:	e6cf      	b.n	22f6c <ProcessAesDrv+0x70>
   231cc:	4b08      	ldr	r3, [pc, #32]	; (231f0 <ProcessAesDrv+0x2f4>)
   231ce:	682a      	ldr	r2, [r5, #0]
   231d0:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   231d4:	686a      	ldr	r2, [r5, #4]
   231d6:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   231da:	68aa      	ldr	r2, [r5, #8]
   231dc:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   231e0:	68ea      	ldr	r2, [r5, #12]
   231e2:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   231e6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   231e8:	e721      	b.n	2302e <ProcessAesDrv+0x132>
   231ea:	bf00      	nop
   231ec:	2000077c 	.word	0x2000077c
   231f0:	5002b000 	.word	0x5002b000
   231f4:	00f10001 	.word	0x00f10001
   231f8:	00f10005 	.word	0x00f10005
   231fc:	00f1000b 	.word	0x00f1000b
   23200:	00f10003 	.word	0x00f10003
   23204:	00028b6c 	.word	0x00028b6c
   23208:	00028b84 	.word	0x00028b84
   2320c:	00028bc4 	.word	0x00028bc4
   23210:	00028ba4 	.word	0x00028ba4
   23214:	20000768 	.word	0x20000768
   23218:	00f10002 	.word	0x00f10002
   2321c:	00f10004 	.word	0x00f10004
   23220:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   23224:	602a      	str	r2, [r5, #0]
   23226:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   2322a:	606a      	str	r2, [r5, #4]
   2322c:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   23230:	60aa      	str	r2, [r5, #8]
   23232:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   23236:	60eb      	str	r3, [r5, #12]
   23238:	e746      	b.n	230c8 <ProcessAesDrv+0x1cc>
   2323a:	683b      	ldr	r3, [r7, #0]
   2323c:	681b      	ldr	r3, [r3, #0]
   2323e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   23242:	683b      	ldr	r3, [r7, #0]
   23244:	685b      	ldr	r3, [r3, #4]
   23246:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   2324a:	683b      	ldr	r3, [r7, #0]
   2324c:	689b      	ldr	r3, [r3, #8]
   2324e:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   23252:	683b      	ldr	r3, [r7, #0]
   23254:	68db      	ldr	r3, [r3, #12]
   23256:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   2325a:	4659      	mov	r1, fp
   2325c:	4650      	mov	r0, sl
   2325e:	f7fe fd1b 	bl	21c98 <CC_PalMemSetZeroPlat>
   23262:	e798      	b.n	23196 <ProcessAesDrv+0x29a>

00023264 <FinishAesDrv>:
   23264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23268:	b309      	cbz	r1, 232ae <FinishAesDrv+0x4a>
   2326a:	b302      	cbz	r2, 232ae <FinishAesDrv+0x4a>
   2326c:	4604      	mov	r4, r0
   2326e:	2800      	cmp	r0, #0
   23270:	f000 80af 	beq.w	233d2 <FinishAesDrv+0x16e>
   23274:	461d      	mov	r5, r3
   23276:	6b43      	ldr	r3, [r0, #52]	; 0x34
   23278:	2b07      	cmp	r3, #7
   2327a:	460e      	mov	r6, r1
   2327c:	d01b      	beq.n	232b6 <FinishAesDrv+0x52>
   2327e:	b95d      	cbnz	r5, 23298 <FinishAesDrv+0x34>
   23280:	2b03      	cmp	r3, #3
   23282:	d110      	bne.n	232a6 <FinishAesDrv+0x42>
   23284:	6d83      	ldr	r3, [r0, #88]	; 0x58
   23286:	b973      	cbnz	r3, 232a6 <FinishAesDrv+0x42>
   23288:	f100 0364 	add.w	r3, r0, #100	; 0x64
   2328c:	6645      	str	r5, [r0, #100]	; 0x64
   2328e:	6685      	str	r5, [r0, #104]	; 0x68
   23290:	66c5      	str	r5, [r0, #108]	; 0x6c
   23292:	6705      	str	r5, [r0, #112]	; 0x70
   23294:	600b      	str	r3, [r1, #0]
   23296:	2510      	movs	r5, #16
   23298:	462b      	mov	r3, r5
   2329a:	4631      	mov	r1, r6
   2329c:	4620      	mov	r0, r4
   2329e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   232a2:	f7ff be2b 	b.w	22efc <ProcessAesDrv>
   232a6:	462f      	mov	r7, r5
   232a8:	4638      	mov	r0, r7
   232aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   232ae:	4f76      	ldr	r7, [pc, #472]	; (23488 <FinishAesDrv+0x224>)
   232b0:	4638      	mov	r0, r7
   232b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   232b6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   232b8:	2b00      	cmp	r3, #0
   232ba:	f040 808d 	bne.w	233d8 <FinishAesDrv+0x174>
   232be:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   232c2:	f080 8090 	bcs.w	233e6 <FinishAesDrv+0x182>
   232c6:	b91d      	cbnz	r5, 232d0 <FinishAesDrv+0x6c>
   232c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
   232ca:	2b00      	cmp	r3, #0
   232cc:	f040 808b 	bne.w	233e6 <FinishAesDrv+0x182>
   232d0:	486e      	ldr	r0, [pc, #440]	; (2348c <FinishAesDrv+0x228>)
   232d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   232d6:	f7fe fcf7 	bl	21cc8 <CC_PalMutexLock>
   232da:	2800      	cmp	r0, #0
   232dc:	f040 808f 	bne.w	233fe <FinishAesDrv+0x19a>
   232e0:	2000      	movs	r0, #0
   232e2:	f7fe fd21 	bl	21d28 <CC_PalPowerSaveModeSelect>
   232e6:	2800      	cmp	r0, #0
   232e8:	f040 8085 	bne.w	233f6 <FinishAesDrv+0x192>
   232ec:	4a68      	ldr	r2, [pc, #416]	; (23490 <FinishAesDrv+0x22c>)
   232ee:	2301      	movs	r3, #1
   232f0:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   232f4:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   232f8:	2b00      	cmp	r3, #0
   232fa:	d1fb      	bne.n	232f4 <FinishAesDrv+0x90>
   232fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   232fe:	2b03      	cmp	r3, #3
   23300:	dd4f      	ble.n	233a2 <FinishAesDrv+0x13e>
   23302:	3b06      	subs	r3, #6
   23304:	2b01      	cmp	r3, #1
   23306:	d84e      	bhi.n	233a6 <FinishAesDrv+0x142>
   23308:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2330a:	2b01      	cmp	r3, #1
   2330c:	d86d      	bhi.n	233ea <FinishAesDrv+0x186>
   2330e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   23310:	2b01      	cmp	r3, #1
   23312:	d878      	bhi.n	23406 <FinishAesDrv+0x1a2>
   23314:	6e23      	ldr	r3, [r4, #96]	; 0x60
   23316:	2b01      	cmp	r3, #1
   23318:	d877      	bhi.n	2340a <FinishAesDrv+0x1a6>
   2331a:	4620      	mov	r0, r4
   2331c:	f7ff fd64 	bl	22de8 <InitAes.part.0>
   23320:	4607      	mov	r7, r0
   23322:	2800      	cmp	r0, #0
   23324:	d140      	bne.n	233a8 <FinishAesDrv+0x144>
   23326:	4620      	mov	r0, r4
   23328:	f7ff fd0a 	bl	22d40 <LoadAesKey>
   2332c:	4607      	mov	r7, r0
   2332e:	2800      	cmp	r0, #0
   23330:	d13a      	bne.n	233a8 <FinishAesDrv+0x144>
   23332:	6b62      	ldr	r2, [r4, #52]	; 0x34
   23334:	2a07      	cmp	r2, #7
   23336:	d836      	bhi.n	233a6 <FinishAesDrv+0x142>
   23338:	2301      	movs	r3, #1
   2333a:	4093      	lsls	r3, r2
   2333c:	f013 0f8a 	tst.w	r3, #138	; 0x8a
   23340:	f040 8081 	bne.w	23446 <FinishAesDrv+0x1e2>
   23344:	f013 0f44 	tst.w	r3, #68	; 0x44
   23348:	d16f      	bne.n	2342a <FinishAesDrv+0x1c6>
   2334a:	07db      	lsls	r3, r3, #31
   2334c:	d52b      	bpl.n	233a6 <FinishAesDrv+0x142>
   2334e:	4b50      	ldr	r3, [pc, #320]	; (23490 <FinishAesDrv+0x22c>)
   23350:	2201      	movs	r2, #1
   23352:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   23356:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   2335a:	6831      	ldr	r1, [r6, #0]
   2335c:	2d00      	cmp	r5, #0
   2335e:	d156      	bne.n	2340e <FinishAesDrv+0x1aa>
   23360:	6da1      	ldr	r1, [r4, #88]	; 0x58
   23362:	b909      	cbnz	r1, 23368 <FinishAesDrv+0x104>
   23364:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   23368:	4b49      	ldr	r3, [pc, #292]	; (23490 <FinishAesDrv+0x22c>)
   2336a:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   2336e:	2f00      	cmp	r7, #0
   23370:	d1fb      	bne.n	2336a <FinishAesDrv+0x106>
   23372:	6b61      	ldr	r1, [r4, #52]	; 0x34
   23374:	2907      	cmp	r1, #7
   23376:	d817      	bhi.n	233a8 <FinishAesDrv+0x144>
   23378:	2201      	movs	r2, #1
   2337a:	408a      	lsls	r2, r1
   2337c:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   23380:	d16f      	bne.n	23462 <FinishAesDrv+0x1fe>
   23382:	f012 0f44 	tst.w	r2, #68	; 0x44
   23386:	d00f      	beq.n	233a8 <FinishAesDrv+0x144>
   23388:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   2338c:	6022      	str	r2, [r4, #0]
   2338e:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   23392:	6062      	str	r2, [r4, #4]
   23394:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   23398:	60a2      	str	r2, [r4, #8]
   2339a:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   2339e:	60e3      	str	r3, [r4, #12]
   233a0:	e002      	b.n	233a8 <FinishAesDrv+0x144>
   233a2:	2b00      	cmp	r3, #0
   233a4:	dab0      	bge.n	23308 <FinishAesDrv+0xa4>
   233a6:	4f3b      	ldr	r7, [pc, #236]	; (23494 <FinishAesDrv+0x230>)
   233a8:	4a39      	ldr	r2, [pc, #228]	; (23490 <FinishAesDrv+0x22c>)
   233aa:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   233ae:	2b00      	cmp	r3, #0
   233b0:	d1fb      	bne.n	233aa <FinishAesDrv+0x146>
   233b2:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   233b6:	2001      	movs	r0, #1
   233b8:	f7fe fcb6 	bl	21d28 <CC_PalPowerSaveModeSelect>
   233bc:	b9b8      	cbnz	r0, 233ee <FinishAesDrv+0x18a>
   233be:	4833      	ldr	r0, [pc, #204]	; (2348c <FinishAesDrv+0x228>)
   233c0:	f7fe fc8a 	bl	21cd8 <CC_PalMutexUnlock>
   233c4:	2800      	cmp	r0, #0
   233c6:	f43f af6f 	beq.w	232a8 <FinishAesDrv+0x44>
   233ca:	4833      	ldr	r0, [pc, #204]	; (23498 <FinishAesDrv+0x234>)
   233cc:	f7fd fd70 	bl	20eb0 <CC_PalAbort>
   233d0:	e76a      	b.n	232a8 <FinishAesDrv+0x44>
   233d2:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   233d6:	e767      	b.n	232a8 <FinishAesDrv+0x44>
   233d8:	2b01      	cmp	r3, #1
   233da:	f47f af74 	bne.w	232c6 <FinishAesDrv+0x62>
   233de:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   233e2:	f4ff af70 	bcc.w	232c6 <FinishAesDrv+0x62>
   233e6:	4f2d      	ldr	r7, [pc, #180]	; (2349c <FinishAesDrv+0x238>)
   233e8:	e75e      	b.n	232a8 <FinishAesDrv+0x44>
   233ea:	4f2d      	ldr	r7, [pc, #180]	; (234a0 <FinishAesDrv+0x23c>)
   233ec:	e7dc      	b.n	233a8 <FinishAesDrv+0x144>
   233ee:	482d      	ldr	r0, [pc, #180]	; (234a4 <FinishAesDrv+0x240>)
   233f0:	f7fd fd5e 	bl	20eb0 <CC_PalAbort>
   233f4:	e7e3      	b.n	233be <FinishAesDrv+0x15a>
   233f6:	482c      	ldr	r0, [pc, #176]	; (234a8 <FinishAesDrv+0x244>)
   233f8:	f7fd fd5a 	bl	20eb0 <CC_PalAbort>
   233fc:	e776      	b.n	232ec <FinishAesDrv+0x88>
   233fe:	482b      	ldr	r0, [pc, #172]	; (234ac <FinishAesDrv+0x248>)
   23400:	f7fd fd56 	bl	20eb0 <CC_PalAbort>
   23404:	e76c      	b.n	232e0 <FinishAesDrv+0x7c>
   23406:	4f2a      	ldr	r7, [pc, #168]	; (234b0 <FinishAesDrv+0x24c>)
   23408:	e7ce      	b.n	233a8 <FinishAesDrv+0x144>
   2340a:	4f2a      	ldr	r7, [pc, #168]	; (234b4 <FinishAesDrv+0x250>)
   2340c:	e7cc      	b.n	233a8 <FinishAesDrv+0x144>
   2340e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   23410:	2a01      	cmp	r2, #1
   23412:	d033      	beq.n	2347c <FinishAesDrv+0x218>
   23414:	f8c3 1c30 	str.w	r1, [r3, #3120]	; 0xc30
   23418:	2010      	movs	r0, #16
   2341a:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   2341e:	f7fe fbbd 	bl	21b9c <CC_HalWaitInterrupt>
   23422:	4607      	mov	r7, r0
   23424:	2800      	cmp	r0, #0
   23426:	d09f      	beq.n	23368 <FinishAesDrv+0x104>
   23428:	e7be      	b.n	233a8 <FinishAesDrv+0x144>
   2342a:	4b19      	ldr	r3, [pc, #100]	; (23490 <FinishAesDrv+0x22c>)
   2342c:	6822      	ldr	r2, [r4, #0]
   2342e:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   23432:	6862      	ldr	r2, [r4, #4]
   23434:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   23438:	68a2      	ldr	r2, [r4, #8]
   2343a:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   2343e:	68e2      	ldr	r2, [r4, #12]
   23440:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   23444:	e783      	b.n	2334e <FinishAesDrv+0xea>
   23446:	4b12      	ldr	r3, [pc, #72]	; (23490 <FinishAesDrv+0x22c>)
   23448:	6822      	ldr	r2, [r4, #0]
   2344a:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   2344e:	6862      	ldr	r2, [r4, #4]
   23450:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   23454:	68a2      	ldr	r2, [r4, #8]
   23456:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   2345a:	68e2      	ldr	r2, [r4, #12]
   2345c:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   23460:	e775      	b.n	2334e <FinishAesDrv+0xea>
   23462:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   23466:	6022      	str	r2, [r4, #0]
   23468:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   2346c:	6062      	str	r2, [r4, #4]
   2346e:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   23472:	60a2      	str	r2, [r4, #8]
   23474:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   23478:	60e3      	str	r3, [r4, #12]
   2347a:	e795      	b.n	233a8 <FinishAesDrv+0x144>
   2347c:	f8c3 1c28 	str.w	r1, [r3, #3112]	; 0xc28
   23480:	2040      	movs	r0, #64	; 0x40
   23482:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   23486:	e7ca      	b.n	2341e <FinishAesDrv+0x1ba>
   23488:	00f1000b 	.word	0x00f1000b
   2348c:	2000077c 	.word	0x2000077c
   23490:	5002b000 	.word	0x5002b000
   23494:	00f10001 	.word	0x00f10001
   23498:	00028bc4 	.word	0x00028bc4
   2349c:	00f10005 	.word	0x00f10005
   234a0:	00f10002 	.word	0x00f10002
   234a4:	00028ba4 	.word	0x00028ba4
   234a8:	00028b84 	.word	0x00028b84
   234ac:	00028b6c 	.word	0x00028b6c
   234b0:	00f10003 	.word	0x00f10003
   234b4:	00f10004 	.word	0x00f10004

000234b8 <kmu_validate_slot_and_size>:
   234b8:	b929      	cbnz	r1, 234c6 <kmu_validate_slot_and_size+0xe>
   234ba:	4b04      	ldr	r3, [pc, #16]	; (234cc <kmu_validate_slot_and_size+0x14>)
   234bc:	2800      	cmp	r0, #0
   234be:	bf14      	ite	ne
   234c0:	4618      	movne	r0, r3
   234c2:	2000      	moveq	r0, #0
   234c4:	4770      	bx	lr
   234c6:	4802      	ldr	r0, [pc, #8]	; (234d0 <kmu_validate_slot_and_size+0x18>)
   234c8:	4770      	bx	lr
   234ca:	bf00      	nop
   234cc:	00f70001 	.word	0x00f70001
   234d0:	00f70003 	.word	0x00f70003

000234d4 <kmu_validate_kdr_slot_and_size>:
   234d4:	b929      	cbnz	r1, 234e2 <kmu_validate_kdr_slot_and_size+0xe>
   234d6:	4b04      	ldr	r3, [pc, #16]	; (234e8 <kmu_validate_kdr_slot_and_size+0x14>)
   234d8:	2800      	cmp	r0, #0
   234da:	bf14      	ite	ne
   234dc:	4618      	movne	r0, r3
   234de:	2000      	moveq	r0, #0
   234e0:	4770      	bx	lr
   234e2:	4802      	ldr	r0, [pc, #8]	; (234ec <kmu_validate_kdr_slot_and_size+0x18>)
   234e4:	4770      	bx	lr
   234e6:	bf00      	nop
   234e8:	00f70001 	.word	0x00f70001
   234ec:	00f70003 	.word	0x00f70003

000234f0 <kmu_use_kdr_key>:
   234f0:	4b03      	ldr	r3, [pc, #12]	; (23500 <kmu_use_kdr_key+0x10>)
   234f2:	2000      	movs	r0, #0
   234f4:	2201      	movs	r2, #1
   234f6:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   234fa:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   234fe:	4770      	bx	lr
   23500:	5002b000 	.word	0x5002b000

00023504 <kmu_derive_cmac>:
   23504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23508:	b0cc      	sub	sp, #304	; 0x130
   2350a:	2400      	movs	r4, #0
   2350c:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   2350e:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   23512:	4682      	mov	sl, r0
   23514:	4689      	mov	r9, r1
   23516:	4616      	mov	r6, r2
   23518:	4621      	mov	r1, r4
   2351a:	2274      	movs	r2, #116	; 0x74
   2351c:	a80e      	add	r0, sp, #56	; 0x38
   2351e:	461f      	mov	r7, r3
   23520:	f001 fa20 	bl	24964 <memset>
   23524:	2280      	movs	r2, #128	; 0x80
   23526:	4621      	mov	r1, r4
   23528:	a82c      	add	r0, sp, #176	; 0xb0
   2352a:	942b      	str	r4, [sp, #172]	; 0xac
   2352c:	f001 fa1a 	bl	24964 <memset>
   23530:	2384      	movs	r3, #132	; 0x84
   23532:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   23536:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   2353a:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   2353e:	9305      	str	r3, [sp, #20]
   23540:	d863      	bhi.n	2360a <kmu_derive_cmac+0x106>
   23542:	f7ff fcc3 	bl	22ecc <write_invalid_key>
   23546:	ab05      	add	r3, sp, #20
   23548:	4630      	mov	r0, r6
   2354a:	ae2b      	add	r6, sp, #172	; 0xac
   2354c:	9301      	str	r3, [sp, #4]
   2354e:	9502      	str	r5, [sp, #8]
   23550:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   23554:	4639      	mov	r1, r7
   23556:	9600      	str	r6, [sp, #0]
   23558:	f000 f862 	bl	23620 <UtilCmacBuildDataForDerivation>
   2355c:	2800      	cmp	r0, #0
   2355e:	d14f      	bne.n	23600 <kmu_derive_cmac+0xfc>
   23560:	2303      	movs	r3, #3
   23562:	f88d 3013 	strb.w	r3, [sp, #19]
   23566:	f89d 3013 	ldrb.w	r3, [sp, #19]
   2356a:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   2356e:	2307      	movs	r3, #7
   23570:	2200      	movs	r2, #0
   23572:	901c      	str	r0, [sp, #112]	; 0x70
   23574:	2110      	movs	r1, #16
   23576:	a80e      	add	r0, sp, #56	; 0x38
   23578:	931b      	str	r3, [sp, #108]	; 0x6c
   2357a:	2401      	movs	r4, #1
   2357c:	2301      	movs	r3, #1
   2357e:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   23582:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   23586:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   2358a:	9426      	str	r4, [sp, #152]	; 0x98
   2358c:	f10d 0920 	add.w	r9, sp, #32
   23590:	f7fe fb82 	bl	21c98 <CC_PalMemSetZeroPlat>
   23594:	2210      	movs	r2, #16
   23596:	9200      	str	r2, [sp, #0]
   23598:	9905      	ldr	r1, [sp, #20]
   2359a:	f8cd 9004 	str.w	r9, [sp, #4]
   2359e:	ab0a      	add	r3, sp, #40	; 0x28
   235a0:	4630      	mov	r0, r6
   235a2:	aa06      	add	r2, sp, #24
   235a4:	f7ff fa22 	bl	229ec <SetDataBuffersInfo>
   235a8:	4607      	mov	r7, r0
   235aa:	b170      	cbz	r0, 235ca <kmu_derive_cmac+0xc6>
   235ac:	e01d      	b.n	235ea <kmu_derive_cmac+0xe6>
   235ae:	a90e      	add	r1, sp, #56	; 0x38
   235b0:	eb08 0007 	add.w	r0, r8, r7
   235b4:	f7fe fb6c 	bl	21c90 <CC_PalMemCopyPlat>
   235b8:	2110      	movs	r1, #16
   235ba:	a80e      	add	r0, sp, #56	; 0x38
   235bc:	f7fe fb6c 	bl	21c98 <CC_PalMemSetZeroPlat>
   235c0:	3401      	adds	r4, #1
   235c2:	1bad      	subs	r5, r5, r6
   235c4:	4437      	add	r7, r6
   235c6:	b2e4      	uxtb	r4, r4
   235c8:	d024      	beq.n	23614 <kmu_derive_cmac+0x110>
   235ca:	2d10      	cmp	r5, #16
   235cc:	464a      	mov	r2, r9
   235ce:	9b05      	ldr	r3, [sp, #20]
   235d0:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   235d4:	a906      	add	r1, sp, #24
   235d6:	a80e      	add	r0, sp, #56	; 0x38
   235d8:	462e      	mov	r6, r5
   235da:	bf28      	it	cs
   235dc:	2610      	movcs	r6, #16
   235de:	f7ff fe41 	bl	23264 <FinishAesDrv>
   235e2:	4632      	mov	r2, r6
   235e4:	2800      	cmp	r0, #0
   235e6:	d0e2      	beq.n	235ae <kmu_derive_cmac+0xaa>
   235e8:	4607      	mov	r7, r0
   235ea:	a80e      	add	r0, sp, #56	; 0x38
   235ec:	2274      	movs	r2, #116	; 0x74
   235ee:	2100      	movs	r1, #0
   235f0:	f7fe fb50 	bl	21c94 <CC_PalMemSetPlat>
   235f4:	f7ff fc6a 	bl	22ecc <write_invalid_key>
   235f8:	4638      	mov	r0, r7
   235fa:	b04c      	add	sp, #304	; 0x130
   235fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23600:	4f05      	ldr	r7, [pc, #20]	; (23618 <kmu_derive_cmac+0x114>)
   23602:	4638      	mov	r0, r7
   23604:	b04c      	add	sp, #304	; 0x130
   23606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2360a:	4f04      	ldr	r7, [pc, #16]	; (2361c <kmu_derive_cmac+0x118>)
   2360c:	4638      	mov	r0, r7
   2360e:	b04c      	add	sp, #304	; 0x130
   23610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23614:	462f      	mov	r7, r5
   23616:	e7e8      	b.n	235ea <kmu_derive_cmac+0xe6>
   23618:	00f1000e 	.word	0x00f1000e
   2361c:	00f1000f 	.word	0x00f1000f

00023620 <UtilCmacBuildDataForDerivation>:
   23620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23624:	b082      	sub	sp, #8
   23626:	461e      	mov	r6, r3
   23628:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2362a:	2300      	movs	r3, #0
   2362c:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   23630:	9301      	str	r3, [sp, #4]
   23632:	d83e      	bhi.n	236b2 <UtilCmacBuildDataForDerivation+0x92>
   23634:	00ed      	lsls	r5, r5, #3
   23636:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   2363a:	4617      	mov	r7, r2
   2363c:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   23640:	bf34      	ite	cc
   23642:	2303      	movcc	r3, #3
   23644:	2304      	movcs	r3, #4
   23646:	2a3f      	cmp	r2, #63	; 0x3f
   23648:	460c      	mov	r4, r1
   2364a:	9300      	str	r3, [sp, #0]
   2364c:	d831      	bhi.n	236b2 <UtilCmacBuildDataForDerivation+0x92>
   2364e:	b380      	cbz	r0, 236b2 <UtilCmacBuildDataForDerivation+0x92>
   23650:	bb66      	cbnz	r6, 236ac <UtilCmacBuildDataForDerivation+0x8c>
   23652:	9a08      	ldr	r2, [sp, #32]
   23654:	b36a      	cbz	r2, 236b2 <UtilCmacBuildDataForDerivation+0x92>
   23656:	9a09      	ldr	r2, [sp, #36]	; 0x24
   23658:	6811      	ldr	r1, [r2, #0]
   2365a:	b351      	cbz	r1, 236b2 <UtilCmacBuildDataForDerivation+0x92>
   2365c:	19a2      	adds	r2, r4, r6
   2365e:	4413      	add	r3, r2
   23660:	4299      	cmp	r1, r3
   23662:	d326      	bcc.n	236b2 <UtilCmacBuildDataForDerivation+0x92>
   23664:	9b08      	ldr	r3, [sp, #32]
   23666:	4601      	mov	r1, r0
   23668:	4622      	mov	r2, r4
   2366a:	1c58      	adds	r0, r3, #1
   2366c:	f7fe fb10 	bl	21c90 <CC_PalMemCopyPlat>
   23670:	9b08      	ldr	r3, [sp, #32]
   23672:	f104 0802 	add.w	r8, r4, #2
   23676:	441c      	add	r4, r3
   23678:	2300      	movs	r3, #0
   2367a:	7063      	strb	r3, [r4, #1]
   2367c:	bb26      	cbnz	r6, 236c8 <UtilCmacBuildDataForDerivation+0xa8>
   2367e:	9b08      	ldr	r3, [sp, #32]
   23680:	9500      	str	r5, [sp, #0]
   23682:	2dff      	cmp	r5, #255	; 0xff
   23684:	eb03 0008 	add.w	r0, r3, r8
   23688:	d917      	bls.n	236ba <UtilCmacBuildDataForDerivation+0x9a>
   2368a:	022b      	lsls	r3, r5, #8
   2368c:	b29b      	uxth	r3, r3
   2368e:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
   23692:	2202      	movs	r2, #2
   23694:	a901      	add	r1, sp, #4
   23696:	9301      	str	r3, [sp, #4]
   23698:	f7fe fafa 	bl	21c90 <CC_PalMemCopyPlat>
   2369c:	f108 0302 	add.w	r3, r8, #2
   236a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   236a2:	2000      	movs	r0, #0
   236a4:	6013      	str	r3, [r2, #0]
   236a6:	b002      	add	sp, #8
   236a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   236ac:	b10f      	cbz	r7, 236b2 <UtilCmacBuildDataForDerivation+0x92>
   236ae:	2e40      	cmp	r6, #64	; 0x40
   236b0:	d9cf      	bls.n	23652 <UtilCmacBuildDataForDerivation+0x32>
   236b2:	480a      	ldr	r0, [pc, #40]	; (236dc <UtilCmacBuildDataForDerivation+0xbc>)
   236b4:	b002      	add	sp, #8
   236b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   236ba:	2201      	movs	r2, #1
   236bc:	4669      	mov	r1, sp
   236be:	f7fe fae7 	bl	21c90 <CC_PalMemCopyPlat>
   236c2:	f108 0301 	add.w	r3, r8, #1
   236c6:	e7eb      	b.n	236a0 <UtilCmacBuildDataForDerivation+0x80>
   236c8:	9b08      	ldr	r3, [sp, #32]
   236ca:	4632      	mov	r2, r6
   236cc:	eb03 0008 	add.w	r0, r3, r8
   236d0:	4639      	mov	r1, r7
   236d2:	f7fe fadd 	bl	21c90 <CC_PalMemCopyPlat>
   236d6:	44b0      	add	r8, r6
   236d8:	e7d1      	b.n	2367e <UtilCmacBuildDataForDerivation+0x5e>
   236da:	bf00      	nop
   236dc:	80000006 	.word	0x80000006

000236e0 <CC_PalDataBufferAttrGet>:
   236e0:	2000      	movs	r0, #0
   236e2:	7018      	strb	r0, [r3, #0]
   236e4:	4770      	bx	lr
   236e6:	bf00      	nop

000236e8 <app_led_cb>:
{
   236e8:	4601      	mov	r1, r0
	dk_set_led(USER_LED, led_state);
   236ea:	2002      	movs	r0, #2
   236ec:	f7f9 bec0 	b.w	1d470 <dk_set_led>

000236f0 <z_log_msg_static_create.constprop.0>:
   236f0:	2300      	movs	r3, #0
   236f2:	f7ef ba8d 	b.w	12c10 <z_impl_z_log_msg_static_create>

000236f6 <cbpprintf_external>:
{
   236f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   236fa:	4606      	mov	r6, r0
   236fc:	460d      	mov	r5, r1
   236fe:	4617      	mov	r7, r2
	if (buf == NULL) {
   23700:	4698      	mov	r8, r3
   23702:	b32b      	cbz	r3, 23750 <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
   23704:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   23708:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2370c:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   2370e:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   23710:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   23714:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   23718:	441c      	add	r4, r3
   2371a:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   2371c:	f04f 0a00 	mov.w	sl, #0
   23720:	45ca      	cmp	sl, r9
   23722:	d309      	bcc.n	23738 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   23724:	f8d8 2004 	ldr.w	r2, [r8, #4]
   23728:	f108 0308 	add.w	r3, r8, #8
   2372c:	4639      	mov	r1, r7
   2372e:	4630      	mov	r0, r6
   23730:	46ac      	mov	ip, r5
}
   23732:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   23736:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   23738:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   2373c:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   23740:	4620      	mov	r0, r4
   23742:	f001 f8cd 	bl	248e0 <strlen>
   23746:	3001      	adds	r0, #1
   23748:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   2374a:	f10a 0a01 	add.w	sl, sl, #1
   2374e:	e7e7      	b.n	23720 <cbpprintf_external+0x2a>
}
   23750:	f06f 0015 	mvn.w	r0, #21
   23754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00023758 <is_ptr>:
{
   23758:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   2375a:	2500      	movs	r5, #0
{
   2375c:	4602      	mov	r2, r0
	bool mod = false;
   2375e:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   23760:	4614      	mov	r4, r2
   23762:	f814 3b01 	ldrb.w	r3, [r4], #1
   23766:	b90b      	cbnz	r3, 2376c <is_ptr+0x14>
					return false;
   23768:	4618      	mov	r0, r3
   2376a:	e009      	b.n	23780 <is_ptr+0x28>
		if (mod) {
   2376c:	b198      	cbz	r0, 23796 <is_ptr+0x3e>
			if (cnt == n) {
   2376e:	428d      	cmp	r5, r1
   23770:	d107      	bne.n	23782 <is_ptr+0x2a>
				if (c == 'p') {
   23772:	2b70      	cmp	r3, #112	; 0x70
   23774:	d004      	beq.n	23780 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   23776:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   2377a:	2a3a      	cmp	r2, #58	; 0x3a
   2377c:	d80b      	bhi.n	23796 <is_ptr+0x3e>
					return false;
   2377e:	2000      	movs	r0, #0
}
   23780:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   23782:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   23786:	2e3a      	cmp	r6, #58	; 0x3a
   23788:	d805      	bhi.n	23796 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   2378a:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   2378c:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   2378e:	1c94      	adds	r4, r2, #2
   23790:	2b00      	cmp	r3, #0
   23792:	d0e9      	beq.n	23768 <is_ptr+0x10>
   23794:	2000      	movs	r0, #0
		if (c == '%') {
   23796:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
   23798:	bf08      	it	eq
   2379a:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
   2379e:	4622      	mov	r2, r4
   237a0:	e7de      	b.n	23760 <is_ptr+0x8>

000237a2 <arch_printk_char_out>:
}
   237a2:	2000      	movs	r0, #0
   237a4:	4770      	bx	lr

000237a6 <str_out>:
{
   237a6:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   237a8:	688a      	ldr	r2, [r1, #8]
   237aa:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   237ac:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   237ae:	b114      	cbz	r4, 237b6 <str_out+0x10>
   237b0:	684b      	ldr	r3, [r1, #4]
   237b2:	4293      	cmp	r3, r2
   237b4:	dc01      	bgt.n	237ba <str_out+0x14>
		ctx->count++;
   237b6:	608d      	str	r5, [r1, #8]
}
   237b8:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   237ba:	3b01      	subs	r3, #1
   237bc:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   237be:	bf08      	it	eq
   237c0:	2200      	moveq	r2, #0
   237c2:	608d      	str	r5, [r1, #8]
   237c4:	bf0c      	ite	eq
   237c6:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   237c8:	54a0      	strbne	r0, [r4, r2]
   237ca:	e7f5      	b.n	237b8 <str_out+0x12>

000237cc <vprintk>:
		z_log_vprintk(fmt, ap);
   237cc:	f000 bdb1 	b.w	24332 <z_log_vprintk>

000237d0 <printk>:
{
   237d0:	b40f      	push	{r0, r1, r2, r3}
   237d2:	b507      	push	{r0, r1, r2, lr}
   237d4:	a904      	add	r1, sp, #16
   237d6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   237da:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   237dc:	f000 fda9 	bl	24332 <z_log_vprintk>
}
   237e0:	b003      	add	sp, #12
   237e2:	f85d eb04 	ldr.w	lr, [sp], #4
   237e6:	b004      	add	sp, #16
   237e8:	4770      	bx	lr

000237ea <snprintk>:
{
   237ea:	b40c      	push	{r2, r3}
   237ec:	b507      	push	{r0, r1, r2, lr}
   237ee:	ab04      	add	r3, sp, #16
   237f0:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   237f4:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   237f6:	f7ee fa85 	bl	11d04 <vsnprintk>
}
   237fa:	b003      	add	sp, #12
   237fc:	f85d eb04 	ldr.w	lr, [sp], #4
   23800:	b002      	add	sp, #8
   23802:	4770      	bx	lr

00023804 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   23804:	4604      	mov	r4, r0
   23806:	b508      	push	{r3, lr}
   23808:	4608      	mov	r0, r1
   2380a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2380c:	461a      	mov	r2, r3
   2380e:	47a0      	blx	r4
	return z_impl_z_current_get();
   23810:	f7fc fc96 	bl	20140 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   23814:	f7f0 fd38 	bl	14288 <z_impl_k_thread_abort>

00023818 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   23818:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2381c:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   2381e:	0840      	lsrs	r0, r0, #1
   23820:	4770      	bx	lr

00023822 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   23822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23824:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   23826:	f7ff fff7 	bl	23818 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   2382a:	fab0 f080 	clz	r0, r0
   2382e:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   23832:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   23836:	00ca      	lsls	r2, r1, #3
   23838:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   2383c:	1d17      	adds	r7, r2, #4
{
   2383e:	460c      	mov	r4, r1
   23840:	3206      	adds	r2, #6
   23842:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   23844:	b956      	cbnz	r6, 2385c <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   23846:	2101      	movs	r1, #1
   23848:	fa01 f000 	lsl.w	r0, r1, r0
   2384c:	68d9      	ldr	r1, [r3, #12]
   2384e:	4301      	orrs	r1, r0
   23850:	60d9      	str	r1, [r3, #12]
		b->next = c;
   23852:	f8cc 4010 	str.w	r4, [ip, #16]
   23856:	53dd      	strh	r5, [r3, r7]
   23858:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   2385a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   2385c:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2385e:	3104      	adds	r1, #4
   23860:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   23862:	53d8      	strh	r0, [r3, r7]
   23864:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   23868:	529e      	strh	r6, [r3, r2]
   2386a:	80c5      	strh	r5, [r0, #6]
   2386c:	525d      	strh	r5, [r3, r1]
   2386e:	e7f4      	b.n	2385a <free_list_add+0x38>

00023870 <free_list_remove_bidx>:
{
   23870:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   23872:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   23876:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   23878:	4299      	cmp	r1, r3
   2387a:	f102 0104 	add.w	r1, r2, #4
   2387e:	d10a      	bne.n	23896 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   23880:	2301      	movs	r3, #1
   23882:	fa03 f202 	lsl.w	r2, r3, r2
   23886:	68c3      	ldr	r3, [r0, #12]
   23888:	ea23 0302 	bic.w	r3, r3, r2
   2388c:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2388e:	2300      	movs	r3, #0
   23890:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   23894:	bd10      	pop	{r4, pc}
   23896:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   23898:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2389c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   238a0:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   238a4:	80cb      	strh	r3, [r1, #6]
   238a6:	8082      	strh	r2, [r0, #4]
}
   238a8:	e7f4      	b.n	23894 <free_list_remove_bidx+0x24>

000238aa <free_list_remove>:
{
   238aa:	b508      	push	{r3, lr}
   238ac:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   238ae:	f7ff ffb3 	bl	23818 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   238b2:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   238b6:	f1c2 021f 	rsb	r2, r2, #31
   238ba:	4618      	mov	r0, r3
}
   238bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   238c0:	f7ff bfd6 	b.w	23870 <free_list_remove_bidx>

000238c4 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   238c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   238c8:	fab1 f581 	clz	r5, r1
   238cc:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   238d0:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   238d4:	4603      	mov	r3, r0
	if (b->next) {
   238d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   238da:	460e      	mov	r6, r1
	if (b->next) {
   238dc:	b1c2      	cbz	r2, 23910 <alloc_chunk+0x4c>
   238de:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   238e0:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   238e4:	4618      	mov	r0, r3
   238e6:	4621      	mov	r1, r4
   238e8:	f7ff ff96 	bl	23818 <chunk_size>
   238ec:	42b0      	cmp	r0, r6
   238ee:	d306      	bcc.n	238fe <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   238f0:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   238f2:	4618      	mov	r0, r3
   238f4:	f7ff ffbc 	bl	23870 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   238f8:	4620      	mov	r0, r4
   238fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   238fe:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   23902:	3f01      	subs	r7, #1
   23904:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   23906:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   2390a:	d001      	beq.n	23910 <alloc_chunk+0x4c>
   2390c:	4282      	cmp	r2, r0
   2390e:	d1e7      	bne.n	238e0 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   23910:	f1c5 0220 	rsb	r2, r5, #32
   23914:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   23918:	4094      	lsls	r4, r2
   2391a:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   2391c:	4014      	ands	r4, r2
   2391e:	d0eb      	beq.n	238f8 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   23920:	fa94 f2a4 	rbit	r2, r4
   23924:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   23928:	1d11      	adds	r1, r2, #4
   2392a:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2392e:	4621      	mov	r1, r4
   23930:	e7df      	b.n	238f2 <alloc_chunk+0x2e>

00023932 <merge_chunks>:
{
   23932:	b538      	push	{r3, r4, r5, lr}
   23934:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   23936:	f7ff ff6f 	bl	23818 <chunk_size>
{
   2393a:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2393c:	4604      	mov	r4, r0
   2393e:	4611      	mov	r1, r2
   23940:	4618      	mov	r0, r3
   23942:	f7ff ff69 	bl	23818 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   23946:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   2394a:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2394c:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   2394e:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   23950:	4618      	mov	r0, r3
   23952:	f7ff ff61 	bl	23818 <chunk_size>
	void *cmem = &buf[c];
   23956:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   23958:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   2395c:	bd38      	pop	{r3, r4, r5, pc}

0002395e <split_chunks>:
{
   2395e:	b538      	push	{r3, r4, r5, lr}
   23960:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   23962:	f7ff ff59 	bl	23818 <chunk_size>
{
   23966:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   23968:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   2396a:	1a51      	subs	r1, r2, r1
   2396c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   23970:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23972:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   23974:	8060      	strh	r0, [r4, #2]
   23976:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2397a:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2397c:	8044      	strh	r4, [r0, #2]
   2397e:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   23982:	4618      	mov	r0, r3
   23984:	4611      	mov	r1, r2
   23986:	f7ff ff47 	bl	23818 <chunk_size>
	void *cmem = &buf[c];
   2398a:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2398c:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   23990:	bd38      	pop	{r3, r4, r5, pc}

00023992 <free_chunk>:
{
   23992:	b538      	push	{r3, r4, r5, lr}
   23994:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   23996:	f7ff ff3f 	bl	23818 <chunk_size>
   2399a:	460c      	mov	r4, r1
   2399c:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   2399e:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   239a2:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   239a4:	07da      	lsls	r2, r3, #31
   239a6:	d40a      	bmi.n	239be <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   239a8:	4628      	mov	r0, r5
   239aa:	f7ff ff7e 	bl	238aa <free_list_remove>
	return c + chunk_size(h, c);
   239ae:	4621      	mov	r1, r4
   239b0:	4628      	mov	r0, r5
   239b2:	f7ff ff31 	bl	23818 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   239b6:	1822      	adds	r2, r4, r0
   239b8:	4628      	mov	r0, r5
   239ba:	f7ff ffba 	bl	23932 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   239be:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   239c2:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   239c4:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   239c8:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   239ca:	07db      	lsls	r3, r3, #31
   239cc:	d40c      	bmi.n	239e8 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   239ce:	4628      	mov	r0, r5
   239d0:	f7ff ff6b 	bl	238aa <free_list_remove>
		return ((uint16_t *)cmem)[f];
   239d4:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   239d8:	4622      	mov	r2, r4
   239da:	1a61      	subs	r1, r4, r1
   239dc:	4628      	mov	r0, r5
   239de:	f7ff ffa8 	bl	23932 <merge_chunks>
   239e2:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   239e6:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   239e8:	4621      	mov	r1, r4
   239ea:	4628      	mov	r0, r5
}
   239ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   239f0:	f7ff bf17 	b.w	23822 <free_list_add>

000239f4 <sys_heap_free>:
	if (mem == NULL) {
   239f4:	b161      	cbz	r1, 23a10 <sys_heap_free+0x1c>
   239f6:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   239f8:	3904      	subs	r1, #4
   239fa:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   239fc:	f021 0307 	bic.w	r3, r1, #7
   23a00:	4403      	add	r3, r0
	free_chunk(h, c);
   23a02:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   23a04:	885a      	ldrh	r2, [r3, #2]
   23a06:	f022 0201 	bic.w	r2, r2, #1
   23a0a:	805a      	strh	r2, [r3, #2]
   23a0c:	f7ff bfc1 	b.w	23992 <free_chunk>
}
   23a10:	4770      	bx	lr

00023a12 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   23a12:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   23a14:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   23a16:	b909      	cbnz	r1, 23a1c <sys_heap_alloc+0xa>
		return NULL;
   23a18:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   23a1a:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   23a1c:	68ab      	ldr	r3, [r5, #8]
   23a1e:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   23a22:	d9f9      	bls.n	23a18 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   23a24:	310b      	adds	r1, #11
   23a26:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   23a28:	4621      	mov	r1, r4
   23a2a:	4628      	mov	r0, r5
   23a2c:	f7ff ff4a 	bl	238c4 <alloc_chunk>
	if (c == 0U) {
   23a30:	4606      	mov	r6, r0
   23a32:	2800      	cmp	r0, #0
   23a34:	d0f0      	beq.n	23a18 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   23a36:	4601      	mov	r1, r0
   23a38:	4628      	mov	r0, r5
   23a3a:	f7ff feed 	bl	23818 <chunk_size>
   23a3e:	42a0      	cmp	r0, r4
   23a40:	d907      	bls.n	23a52 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   23a42:	1932      	adds	r2, r6, r4
   23a44:	4628      	mov	r0, r5
   23a46:	f7ff ff8a 	bl	2395e <split_chunks>
		free_list_add(h, c + chunk_sz);
   23a4a:	4611      	mov	r1, r2
   23a4c:	4628      	mov	r0, r5
   23a4e:	f7ff fee8 	bl	23822 <free_list_add>
	void *cmem = &buf[c];
   23a52:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   23a56:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   23a58:	8853      	ldrh	r3, [r2, #2]
   23a5a:	f043 0301 	orr.w	r3, r3, #1
   23a5e:	8053      	strh	r3, [r2, #2]
   23a60:	3004      	adds	r0, #4
	return mem;
   23a62:	e7da      	b.n	23a1a <sys_heap_alloc+0x8>

00023a64 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   23a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23a68:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   23a6c:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   23a70:	6806      	ldr	r6, [r0, #0]
{
   23a72:	460f      	mov	r7, r1
   23a74:	4614      	mov	r4, r2
	if (align != rew) {
   23a76:	d00c      	beq.n	23a92 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   23a78:	424b      	negs	r3, r1
   23a7a:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   23a7c:	2b04      	cmp	r3, #4
   23a7e:	461a      	mov	r2, r3
   23a80:	464f      	mov	r7, r9
   23a82:	bf28      	it	cs
   23a84:	2204      	movcs	r2, #4
	rew = align & -align;
   23a86:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   23a88:	b964      	cbnz	r4, 23aa4 <sys_heap_aligned_alloc+0x40>
		return NULL;
   23a8a:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   23a8c:	4628      	mov	r0, r5
   23a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   23a92:	2904      	cmp	r1, #4
   23a94:	d804      	bhi.n	23aa0 <sys_heap_aligned_alloc+0x3c>
}
   23a96:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   23a9a:	4611      	mov	r1, r2
   23a9c:	f7ff bfb9 	b.w	23a12 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   23aa0:	2204      	movs	r2, #4
   23aa2:	e7f1      	b.n	23a88 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   23aa4:	68b3      	ldr	r3, [r6, #8]
   23aa6:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   23aaa:	d9ee      	bls.n	23a8a <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   23aac:	f104 010b 	add.w	r1, r4, #11
   23ab0:	4439      	add	r1, r7
   23ab2:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   23ab4:	08c9      	lsrs	r1, r1, #3
   23ab6:	4630      	mov	r0, r6
   23ab8:	f7ff ff04 	bl	238c4 <alloc_chunk>
	if (c0 == 0) {
   23abc:	4680      	mov	r8, r0
   23abe:	2800      	cmp	r0, #0
   23ac0:	d0e3      	beq.n	23a8a <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   23ac2:	f109 0504 	add.w	r5, r9, #4
   23ac6:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   23aca:	1e7b      	subs	r3, r7, #1
   23acc:	4435      	add	r5, r6
   23ace:	441d      	add	r5, r3
   23ad0:	427f      	negs	r7, r7
   23ad2:	403d      	ands	r5, r7
   23ad4:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   23ad8:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   23ada:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   23adc:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   23ade:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   23ae0:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   23ae4:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   23ae6:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   23aea:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   23aee:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   23af2:	d208      	bcs.n	23b06 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   23af4:	4601      	mov	r1, r0
   23af6:	463a      	mov	r2, r7
   23af8:	4630      	mov	r0, r6
   23afa:	f7ff ff30 	bl	2395e <split_chunks>
		free_list_add(h, c0);
   23afe:	4641      	mov	r1, r8
   23b00:	4630      	mov	r0, r6
   23b02:	f7ff fe8e 	bl	23822 <free_list_add>
	return c + chunk_size(h, c);
   23b06:	4639      	mov	r1, r7
   23b08:	4630      	mov	r0, r6
   23b0a:	f7ff fe85 	bl	23818 <chunk_size>
   23b0e:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   23b10:	4284      	cmp	r4, r0
   23b12:	d207      	bcs.n	23b24 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   23b14:	4630      	mov	r0, r6
   23b16:	4622      	mov	r2, r4
   23b18:	f7ff ff21 	bl	2395e <split_chunks>
		free_list_add(h, c_end);
   23b1c:	4621      	mov	r1, r4
   23b1e:	4630      	mov	r0, r6
   23b20:	f7ff fe7f 	bl	23822 <free_list_add>
	void *cmem = &buf[c];
   23b24:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   23b28:	8873      	ldrh	r3, [r6, #2]
   23b2a:	f043 0301 	orr.w	r3, r3, #1
   23b2e:	8073      	strh	r3, [r6, #2]
   23b30:	e7ac      	b.n	23a8c <sys_heap_aligned_alloc+0x28>

00023b32 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   23b32:	3a04      	subs	r2, #4
{
   23b34:	b4f0      	push	{r4, r5, r6, r7}
   23b36:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   23b38:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   23b3a:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   23b3c:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   23b40:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   23b44:	1a0e      	subs	r6, r1, r0
   23b46:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   23b48:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   23b4a:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   23b4e:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   23b50:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   23b54:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   23b56:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   23b58:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   23b5a:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   23b5e:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   23b60:	f1c2 0220 	rsb	r2, r2, #32
   23b64:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   23b66:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   23b6a:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   23b6e:	4294      	cmp	r4, r2
   23b70:	d1fb      	bne.n	23b6a <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23b72:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   23b74:	f042 0201 	orr.w	r2, r2, #1
   23b78:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   23b7a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   23b7e:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23b80:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   23b82:	8007      	strh	r7, [r0, #0]
   23b84:	8065      	strh	r5, [r4, #2]
   23b86:	1984      	adds	r4, r0, r6
   23b88:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   23b8c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   23b90:	8067      	strh	r7, [r4, #2]
   23b92:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   23b94:	885a      	ldrh	r2, [r3, #2]
   23b96:	f042 0201 	orr.w	r2, r2, #1
   23b9a:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   23b9c:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   23b9e:	f7ff be40 	b.w	23822 <free_list_add>

00023ba2 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   23ba2:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   23ba4:	f013 0307 	ands.w	r3, r3, #7
   23ba8:	d105      	bne.n	23bb6 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   23baa:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   23bac:	2b00      	cmp	r3, #0
   23bae:	bf0c      	ite	eq
   23bb0:	2000      	moveq	r0, #0
   23bb2:	2003      	movne	r0, #3
   23bb4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   23bb6:	2b02      	cmp	r3, #2
   23bb8:	d105      	bne.n	23bc6 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   23bba:	8b40      	ldrh	r0, [r0, #26]
   23bbc:	fab0 f080 	clz	r0, r0
   23bc0:	0940      	lsrs	r0, r0, #5
   23bc2:	0080      	lsls	r0, r0, #2
   23bc4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   23bc6:	2b01      	cmp	r3, #1
   23bc8:	d105      	bne.n	23bd6 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   23bca:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   23bcc:	2b00      	cmp	r3, #0
   23bce:	bf0c      	ite	eq
   23bd0:	2000      	moveq	r0, #0
   23bd2:	2005      	movne	r0, #5
   23bd4:	4770      	bx	lr
	int evt = EVT_NOP;
   23bd6:	2000      	movs	r0, #0
}
   23bd8:	4770      	bx	lr

00023bda <validate_args>:
{
   23bda:	b510      	push	{r4, lr}
   23bdc:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   23bde:	b100      	cbz	r0, 23be2 <validate_args+0x8>
   23be0:	b911      	cbnz	r1, 23be8 <validate_args+0xe>
		return -EINVAL;
   23be2:	f06f 0015 	mvn.w	r0, #21
}
   23be6:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   23be8:	1d08      	adds	r0, r1, #4
   23bea:	f000 f895 	bl	23d18 <sys_notify_validate>
	if ((rv == 0)
   23bee:	2800      	cmp	r0, #0
   23bf0:	d1f9      	bne.n	23be6 <validate_args+0xc>
	    && ((cli->notify.flags
   23bf2:	68a3      	ldr	r3, [r4, #8]
   23bf4:	2b03      	cmp	r3, #3
   23bf6:	d9f6      	bls.n	23be6 <validate_args+0xc>
   23bf8:	e7f3      	b.n	23be2 <validate_args+0x8>

00023bfa <notify_one>:
{
   23bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23bfe:	460d      	mov	r5, r1
   23c00:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   23c02:	4619      	mov	r1, r3
   23c04:	1d28      	adds	r0, r5, #4
{
   23c06:	4690      	mov	r8, r2
   23c08:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   23c0a:	f000 f899 	bl	23d40 <sys_notify_finalize>
	if (cb) {
   23c0e:	4604      	mov	r4, r0
   23c10:	b138      	cbz	r0, 23c22 <notify_one+0x28>
		cb(mgr, cli, state, res);
   23c12:	4633      	mov	r3, r6
   23c14:	4642      	mov	r2, r8
   23c16:	4629      	mov	r1, r5
   23c18:	4638      	mov	r0, r7
   23c1a:	46a4      	mov	ip, r4
}
   23c1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   23c20:	4760      	bx	ip
}
   23c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023c26 <transition_complete>:
{
   23c26:	b410      	push	{r4}
	__asm__ volatile(
   23c28:	f04f 0440 	mov.w	r4, #64	; 0x40
   23c2c:	f3ef 8211 	mrs	r2, BASEPRI
   23c30:	f384 8812 	msr	BASEPRI_MAX, r4
   23c34:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   23c38:	6141      	str	r1, [r0, #20]
}
   23c3a:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   23c3c:	2101      	movs	r1, #1
   23c3e:	f7ee b877 	b.w	11d30 <process_event>

00023c42 <onoff_manager_init>:
{
   23c42:	b538      	push	{r3, r4, r5, lr}
   23c44:	460c      	mov	r4, r1
	if ((mgr == NULL)
   23c46:	4605      	mov	r5, r0
   23c48:	b158      	cbz	r0, 23c62 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   23c4a:	b151      	cbz	r1, 23c62 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   23c4c:	680b      	ldr	r3, [r1, #0]
   23c4e:	b143      	cbz	r3, 23c62 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   23c50:	684b      	ldr	r3, [r1, #4]
   23c52:	b133      	cbz	r3, 23c62 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   23c54:	221c      	movs	r2, #28
   23c56:	2100      	movs	r1, #0
   23c58:	f000 fe84 	bl	24964 <memset>
   23c5c:	612c      	str	r4, [r5, #16]
	return 0;
   23c5e:	2000      	movs	r0, #0
}
   23c60:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   23c62:	f06f 0015 	mvn.w	r0, #21
   23c66:	e7fb      	b.n	23c60 <onoff_manager_init+0x1e>

00023c68 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   23c68:	b570      	push	{r4, r5, r6, lr}
   23c6a:	4605      	mov	r5, r0
   23c6c:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   23c6e:	f7ff ffb4 	bl	23bda <validate_args>

	if (rv < 0) {
   23c72:	1e04      	subs	r4, r0, #0
   23c74:	db15      	blt.n	23ca2 <onoff_request+0x3a>
   23c76:	f04f 0340 	mov.w	r3, #64	; 0x40
   23c7a:	f3ef 8211 	mrs	r2, BASEPRI
   23c7e:	f383 8812 	msr	BASEPRI_MAX, r3
   23c82:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   23c86:	8b6b      	ldrh	r3, [r5, #26]
   23c88:	8b2c      	ldrh	r4, [r5, #24]
   23c8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   23c8e:	428b      	cmp	r3, r1
   23c90:	f004 0407 	and.w	r4, r4, #7
   23c94:	d107      	bne.n	23ca6 <onoff_request+0x3e>
	__asm__ volatile(
   23c96:	f382 8811 	msr	BASEPRI, r2
   23c9a:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   23c9e:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   23ca2:	4620      	mov	r0, r4
   23ca4:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   23ca6:	2c02      	cmp	r4, #2
   23ca8:	d10c      	bne.n	23cc4 <onoff_request+0x5c>
		mgr->refs += 1U;
   23caa:	3301      	adds	r3, #1
   23cac:	836b      	strh	r3, [r5, #26]
   23cae:	f382 8811 	msr	BASEPRI, r2
   23cb2:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   23cb6:	2300      	movs	r3, #0
   23cb8:	4622      	mov	r2, r4
   23cba:	4631      	mov	r1, r6
   23cbc:	4628      	mov	r0, r5
   23cbe:	f7ff ff9c 	bl	23bfa <notify_one>
   23cc2:	e7ee      	b.n	23ca2 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   23cc4:	2c06      	cmp	r4, #6
   23cc6:	d814      	bhi.n	23cf2 <onoff_request+0x8a>
   23cc8:	e8df f004 	tbb	[pc, r4]
   23ccc:	13131304 	.word	0x13131304
   23cd0:	1a04      	.short	0x1a04
   23cd2:	04          	.byte	0x04
   23cd3:	00          	.byte	0x00
	parent->next = child;
   23cd4:	2300      	movs	r3, #0
   23cd6:	6033      	str	r3, [r6, #0]
	return list->tail;
   23cd8:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   23cda:	b93b      	cbnz	r3, 23cec <onoff_request+0x84>
	list->head = node;
   23cdc:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   23ce0:	b9ac      	cbnz	r4, 23d0e <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   23ce2:	2102      	movs	r1, #2
   23ce4:	4628      	mov	r0, r5
   23ce6:	f7ee f823 	bl	11d30 <process_event>
   23cea:	e7da      	b.n	23ca2 <onoff_request+0x3a>
	parent->next = child;
   23cec:	601e      	str	r6, [r3, #0]
	list->tail = node;
   23cee:	606e      	str	r6, [r5, #4]
}
   23cf0:	e7f6      	b.n	23ce0 <onoff_request+0x78>
   23cf2:	f382 8811 	msr	BASEPRI, r2
   23cf6:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   23cfa:	f06f 0404 	mvn.w	r4, #4
   23cfe:	e7d0      	b.n	23ca2 <onoff_request+0x3a>
   23d00:	f382 8811 	msr	BASEPRI, r2
   23d04:	f3bf 8f6f 	isb	sy
   23d08:	f06f 0485 	mvn.w	r4, #133	; 0x85
   23d0c:	e7c9      	b.n	23ca2 <onoff_request+0x3a>
   23d0e:	f382 8811 	msr	BASEPRI, r2
   23d12:	f3bf 8f6f 	isb	sy
		if (notify) {
   23d16:	e7c4      	b.n	23ca2 <onoff_request+0x3a>

00023d18 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   23d18:	4603      	mov	r3, r0
   23d1a:	b140      	cbz	r0, 23d2e <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   23d1c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   23d1e:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   23d22:	2a02      	cmp	r2, #2
   23d24:	d006      	beq.n	23d34 <sys_notify_validate+0x1c>
   23d26:	2a03      	cmp	r2, #3
   23d28:	d004      	beq.n	23d34 <sys_notify_validate+0x1c>
   23d2a:	2a01      	cmp	r2, #1
   23d2c:	d005      	beq.n	23d3a <sys_notify_validate+0x22>
   23d2e:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   23d32:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   23d34:	681a      	ldr	r2, [r3, #0]
   23d36:	2a00      	cmp	r2, #0
   23d38:	d0f9      	beq.n	23d2e <sys_notify_validate+0x16>
		notify->result = 0;
   23d3a:	2000      	movs	r0, #0
   23d3c:	6098      	str	r0, [r3, #8]
   23d3e:	4770      	bx	lr

00023d40 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   23d40:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   23d42:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   23d44:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   23d46:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   23d4a:	2a02      	cmp	r2, #2
{
   23d4c:	4603      	mov	r3, r0
	switch (method) {
   23d4e:	f04f 0400 	mov.w	r4, #0
   23d52:	d007      	beq.n	23d64 <sys_notify_finalize+0x24>
   23d54:	2a03      	cmp	r2, #3
   23d56:	d002      	beq.n	23d5e <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   23d58:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   23d5a:	2000      	movs	r0, #0
   23d5c:	e001      	b.n	23d62 <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   23d5e:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   23d60:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   23d62:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   23d64:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   23d66:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   23d68:	2800      	cmp	r0, #0
   23d6a:	d0f6      	beq.n	23d5a <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   23d6c:	f7fc fcb8 	bl	206e0 <z_impl_k_poll_signal_raise>
   23d70:	e7f3      	b.n	23d5a <sys_notify_finalize+0x1a>

00023d72 <encode_uint>:
{
   23d72:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23d76:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
   23d78:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   23d7a:	2b6f      	cmp	r3, #111	; 0x6f
{
   23d7c:	4680      	mov	r8, r0
   23d7e:	460f      	mov	r7, r1
   23d80:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   23d82:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   23d86:	d029      	beq.n	23ddc <encode_uint+0x6a>
   23d88:	d824      	bhi.n	23dd4 <encode_uint+0x62>
		return 10;
   23d8a:	2b58      	cmp	r3, #88	; 0x58
   23d8c:	bf0c      	ite	eq
   23d8e:	2610      	moveq	r6, #16
   23d90:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   23d92:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   23d96:	4632      	mov	r2, r6
   23d98:	2300      	movs	r3, #0
   23d9a:	4640      	mov	r0, r8
   23d9c:	4639      	mov	r1, r7
   23d9e:	f7dc f9af 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   23da2:	2a09      	cmp	r2, #9
   23da4:	b2d4      	uxtb	r4, r2
   23da6:	d81e      	bhi.n	23de6 <encode_uint+0x74>
   23da8:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   23daa:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   23dac:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   23dae:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   23db2:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   23db6:	d301      	bcc.n	23dbc <encode_uint+0x4a>
   23db8:	45d1      	cmp	r9, sl
   23dba:	d811      	bhi.n	23de0 <encode_uint+0x6e>
	if (conv->flag_hash) {
   23dbc:	782b      	ldrb	r3, [r5, #0]
   23dbe:	069b      	lsls	r3, r3, #26
   23dc0:	d505      	bpl.n	23dce <encode_uint+0x5c>
		if (radix == 8) {
   23dc2:	2e08      	cmp	r6, #8
   23dc4:	d115      	bne.n	23df2 <encode_uint+0x80>
			conv->altform_0 = true;
   23dc6:	78ab      	ldrb	r3, [r5, #2]
   23dc8:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   23dcc:	70ab      	strb	r3, [r5, #2]
}
   23dce:	4648      	mov	r0, r9
   23dd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   23dd4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   23dd8:	2b70      	cmp	r3, #112	; 0x70
   23dda:	e7d7      	b.n	23d8c <encode_uint+0x1a>
	switch (specifier) {
   23ddc:	2608      	movs	r6, #8
   23dde:	e7d8      	b.n	23d92 <encode_uint+0x20>
		value /= radix;
   23de0:	4680      	mov	r8, r0
   23de2:	460f      	mov	r7, r1
   23de4:	e7d7      	b.n	23d96 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   23de6:	f1bb 0f19 	cmp.w	fp, #25
   23dea:	bf94      	ite	ls
   23dec:	3437      	addls	r4, #55	; 0x37
   23dee:	3457      	addhi	r4, #87	; 0x57
   23df0:	e7db      	b.n	23daa <encode_uint+0x38>
		} else if (radix == 16) {
   23df2:	2e10      	cmp	r6, #16
   23df4:	d1eb      	bne.n	23dce <encode_uint+0x5c>
			conv->altform_0c = true;
   23df6:	78ab      	ldrb	r3, [r5, #2]
   23df8:	f043 0310 	orr.w	r3, r3, #16
   23dfc:	e7e6      	b.n	23dcc <encode_uint+0x5a>

00023dfe <outs>:
{
   23dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23e02:	4607      	mov	r7, r0
   23e04:	4688      	mov	r8, r1
   23e06:	4615      	mov	r5, r2
   23e08:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   23e0a:	4614      	mov	r4, r2
   23e0c:	42b4      	cmp	r4, r6
   23e0e:	d305      	bcc.n	23e1c <outs+0x1e>
   23e10:	b10e      	cbz	r6, 23e16 <outs+0x18>
	return (int)count;
   23e12:	1b60      	subs	r0, r4, r5
   23e14:	e008      	b.n	23e28 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   23e16:	7823      	ldrb	r3, [r4, #0]
   23e18:	2b00      	cmp	r3, #0
   23e1a:	d0fa      	beq.n	23e12 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   23e1c:	f814 0b01 	ldrb.w	r0, [r4], #1
   23e20:	4641      	mov	r1, r8
   23e22:	47b8      	blx	r7
		if (rc < 0) {
   23e24:	2800      	cmp	r0, #0
   23e26:	daf1      	bge.n	23e0c <outs+0xe>
}
   23e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023e2c <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   23e2c:	b40f      	push	{r0, r1, r2, r3}
   23e2e:	b507      	push	{r0, r1, r2, lr}
   23e30:	a904      	add	r1, sp, #16
   23e32:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   23e36:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   23e38:	f7ff fcc8 	bl	237cc <vprintk>

	va_end(ap);
}
   23e3c:	b003      	add	sp, #12
   23e3e:	f85d eb04 	ldr.w	lr, [sp], #4
   23e42:	b004      	add	sp, #16
   23e44:	4770      	bx	lr

00023e46 <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
   23e46:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
   23e48:	6903      	ldr	r3, [r0, #16]
{
   23e4a:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
   23e4c:	f013 0008 	ands.w	r0, r3, #8
   23e50:	d109      	bne.n	23e66 <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   23e52:	6813      	ldr	r3, [r2, #0]
   23e54:	68d4      	ldr	r4, [r2, #12]
   23e56:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
   23e58:	bf97      	itett	ls
   23e5a:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   23e5c:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
   23e5e:	1ad3      	subls	r3, r2, r3

	return true;
   23e60:	2001      	movls	r0, #1
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   23e62:	600b      	str	r3, [r1, #0]
}
   23e64:	bd10      	pop	{r4, pc}
   23e66:	2300      	movs	r3, #0
		return false;
   23e68:	4618      	mov	r0, r3
   23e6a:	e7fa      	b.n	23e62 <free_space+0x1c>

00023e6c <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   23e6c:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   23e6e:	a901      	add	r1, sp, #4
{
   23e70:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   23e72:	f7ff ffe8 	bl	23e46 <free_space>
   23e76:	b120      	cbz	r0, 23e82 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   23e78:	9b01      	ldr	r3, [sp, #4]
   23e7a:	68e2      	ldr	r2, [r4, #12]
   23e7c:	3b01      	subs	r3, #1
   23e7e:	4413      	add	r3, r2
   23e80:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   23e82:	6a20      	ldr	r0, [r4, #32]
   23e84:	9b01      	ldr	r3, [sp, #4]
   23e86:	1ac0      	subs	r0, r0, r3
}
   23e88:	3801      	subs	r0, #1
   23e8a:	b002      	add	sp, #8
   23e8c:	bd10      	pop	{r4, pc}

00023e8e <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
   23e8e:	b510      	push	{r4, lr}
   23e90:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   23e92:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   23e94:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   23e96:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   23e98:	07d2      	lsls	r2, r2, #31
   23e9a:	d502      	bpl.n	23ea2 <idx_inc+0x14>
		return i & (buffer->size - 1);
   23e9c:	3b01      	subs	r3, #1
   23e9e:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   23ea0:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   23ea2:	4298      	cmp	r0, r3
   23ea4:	bf28      	it	cs
   23ea6:	1ac0      	subcs	r0, r0, r3
   23ea8:	e7fa      	b.n	23ea0 <idx_inc+0x12>

00023eaa <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
   23eaa:	b510      	push	{r4, lr}
   23eac:	4604      	mov	r4, r0
   23eae:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   23eb0:	68c1      	ldr	r1, [r0, #12]
   23eb2:	f7ff ffec 	bl	23e8e <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
   23eb6:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   23eb8:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
   23eba:	f023 0308 	bic.w	r3, r3, #8
   23ebe:	6123      	str	r3, [r4, #16]
}
   23ec0:	bd10      	pop	{r4, pc}

00023ec2 <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   23ec2:	b538      	push	{r3, r4, r5, lr}
   23ec4:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   23ec6:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
   23ec8:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   23eca:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   23ecc:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   23ed0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
{
   23ed4:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   23ed6:	6801      	ldr	r1, [r0, #0]
   23ed8:	462a      	mov	r2, r5
   23eda:	f7ff ffd8 	bl	23e8e <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   23ede:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   23ee0:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   23ee2:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   23ee4:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
   23ee6:	bf02      	ittt	eq
   23ee8:	6923      	ldreq	r3, [r4, #16]
   23eea:	f043 0308 	orreq.w	r3, r3, #8
   23eee:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   23ef0:	462a      	mov	r2, r5
   23ef2:	4620      	mov	r0, r4
   23ef4:	f7ff ffcb 	bl	23e8e <idx_inc>
   23ef8:	6060      	str	r0, [r4, #4]
}
   23efa:	bd38      	pop	{r3, r4, r5, pc}

00023efc <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
   23efc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   23f00:	68c7      	ldr	r7, [r0, #12]
   23f02:	69c6      	ldr	r6, [r0, #28]
{
   23f04:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
   23f06:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   23f0a:	f003 0303 	and.w	r3, r3, #3
   23f0e:	2b02      	cmp	r3, #2
{
   23f10:	4604      	mov	r4, r0
   23f12:	4688      	mov	r8, r1
   23f14:	4691      	mov	r9, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   23f16:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   23f1a:	f04f 0300 	mov.w	r3, #0
   23f1e:	d009      	beq.n	23f34 <drop_item_locked+0x38>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
   23f20:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
   23f22:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
   23f26:	6923      	ldr	r3, [r4, #16]
   23f28:	0799      	lsls	r1, r3, #30
   23f2a:	d410      	bmi.n	23f4e <drop_item_locked+0x52>
		return false;
   23f2c:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
   23f2e:	b003      	add	sp, #12
   23f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
   23f34:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
   23f38:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
   23f3a:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
   23f3c:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
   23f40:	d0f1      	beq.n	23f26 <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
   23f42:	f7ff ffb2 	bl	23eaa <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   23f46:	68e3      	ldr	r3, [r4, #12]
   23f48:	60a3      	str	r3, [r4, #8]
		return true;
   23f4a:	2001      	movs	r0, #1
   23f4c:	e7ef      	b.n	23f2e <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
   23f4e:	69a3      	ldr	r3, [r4, #24]
   23f50:	4650      	mov	r0, sl
   23f52:	4798      	blx	r3
	return item->hdr.valid;
   23f54:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	if (!is_valid(item)) {
   23f58:	07da      	lsls	r2, r3, #31
	uint32_t rd_wlen = buffer->get_wlen(item);
   23f5a:	4605      	mov	r5, r0
	if (!is_valid(item)) {
   23f5c:	d5e6      	bpl.n	23f2c <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
   23f5e:	f013 0302 	ands.w	r3, r3, #2
   23f62:	d01d      	beq.n	23fa0 <drop_item_locked+0xa4>
		if (free_wlen) {
   23f64:	f1b8 0f00 	cmp.w	r8, #0
   23f68:	d003      	beq.n	23f72 <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
   23f6a:	4641      	mov	r1, r8
   23f6c:	4620      	mov	r0, r4
   23f6e:	f7ff ffa8 	bl	23ec2 <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   23f72:	6861      	ldr	r1, [r4, #4]
   23f74:	462a      	mov	r2, r5
   23f76:	4620      	mov	r0, r4
   23f78:	f7ff ff89 	bl	23e8e <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   23f7c:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   23f80:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   23f82:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   23f84:	d104      	bne.n	23f90 <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
   23f86:	462a      	mov	r2, r5
   23f88:	4620      	mov	r0, r4
   23f8a:	f7ff ff80 	bl	23e8e <idx_inc>
   23f8e:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
   23f90:	68a3      	ldr	r3, [r4, #8]
   23f92:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
   23f94:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
   23f96:	6923      	ldr	r3, [r4, #16]
   23f98:	f043 0308 	orr.w	r3, r3, #8
   23f9c:	6123      	str	r3, [r4, #16]
   23f9e:	e7d4      	b.n	23f4a <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
   23fa0:	4601      	mov	r1, r0
   23fa2:	4620      	mov	r0, r4
   23fa4:	9301      	str	r3, [sp, #4]
   23fa6:	f7ff ff80 	bl	23eaa <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   23faa:	68e2      	ldr	r2, [r4, #12]
   23fac:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
   23fae:	f1b8 0f00 	cmp.w	r8, #0
   23fb2:	d004      	beq.n	23fbe <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
   23fb4:	6821      	ldr	r1, [r4, #0]
   23fb6:	69e2      	ldr	r2, [r4, #28]
   23fb8:	9b01      	ldr	r3, [sp, #4]
   23fba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
   23fbe:	eb05 0208 	add.w	r2, r5, r8
   23fc2:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   23fc6:	6821      	ldr	r1, [r4, #0]
   23fc8:	4620      	mov	r0, r4
   23fca:	f7ff ff60 	bl	23e8e <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
   23fce:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   23fd0:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   23fd2:	f043 0308 	orr.w	r3, r3, #8
   23fd6:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
   23fd8:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   23fdc:	f36f 0300 	bfc	r3, #0, #1
   23fe0:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
   23fe4:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
   23fe8:	e7af      	b.n	23f4a <drop_item_locked+0x4e>

00023fea <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
   23fea:	b570      	push	{r4, r5, r6, lr}
   23fec:	4604      	mov	r4, r0
   23fee:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
   23ff0:	f7ff ff4d 	bl	23e8e <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
   23ff4:	6823      	ldr	r3, [r4, #0]
   23ff6:	4283      	cmp	r3, r0
   23ff8:	d105      	bne.n	24006 <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
   23ffa:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
   23ffc:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
   23ffe:	f023 0308 	bic.w	r3, r3, #8
   24002:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
   24004:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   24006:	69e2      	ldr	r2, [r4, #28]
	union mpsc_pbuf_generic skip = {
   24008:	00ab      	lsls	r3, r5, #2
   2400a:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   2400e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
   24012:	4620      	mov	r0, r4
   24014:	6861      	ldr	r1, [r4, #4]
   24016:	462a      	mov	r2, r5
   24018:	f7ff ff39 	bl	23e8e <idx_inc>
   2401c:	6060      	str	r0, [r4, #4]
   2401e:	e7f1      	b.n	24004 <post_drop_action+0x1a>

00024020 <max_utilization_update>:
{
   24020:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   24022:	6903      	ldr	r3, [r0, #16]
   24024:	075b      	lsls	r3, r3, #29
{
   24026:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   24028:	d506      	bpl.n	24038 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   2402a:	6a45      	ldr	r5, [r0, #36]	; 0x24
   2402c:	f7ff ff1e 	bl	23e6c <get_usage>
   24030:	4285      	cmp	r5, r0
   24032:	bf2c      	ite	cs
   24034:	6265      	strcs	r5, [r4, #36]	; 0x24
   24036:	6260      	strcc	r0, [r4, #36]	; 0x24
}
   24038:	bd38      	pop	{r3, r4, r5, pc}

0002403a <mpsc_pbuf_init>:
{
   2403a:	b538      	push	{r3, r4, r5, lr}
   2403c:	460d      	mov	r5, r1
   2403e:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   24040:	221c      	movs	r2, #28
   24042:	2100      	movs	r1, #0
   24044:	f000 fc8e 	bl	24964 <memset>
	buffer->get_wlen = cfg->get_wlen;
   24048:	68eb      	ldr	r3, [r5, #12]
   2404a:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   2404c:	68ab      	ldr	r3, [r5, #8]
   2404e:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   24050:	682b      	ldr	r3, [r5, #0]
   24052:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   24054:	686b      	ldr	r3, [r5, #4]
   24056:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
   24058:	2200      	movs	r2, #0
   2405a:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
   2405c:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
   2405e:	b123      	cbz	r3, 2406a <mpsc_pbuf_init+0x30>
   24060:	1e59      	subs	r1, r3, #1
   24062:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   24064:	bf08      	it	eq
   24066:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   2406a:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   2406c:	2201      	movs	r2, #1
   2406e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   24072:	2100      	movs	r1, #0
}
   24074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   24078:	f003 ba9a 	b.w	275b0 <z_impl_k_sem_init>

0002407c <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   2407c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24080:	b087      	sub	sp, #28
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
   24082:	2500      	movs	r5, #0
{
   24084:	9300      	str	r3, [sp, #0]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
   24086:	6a03      	ldr	r3, [r0, #32]
	union mpsc_pbuf_generic *dropped_item = NULL;
   24088:	9503      	str	r5, [sp, #12]
	if (wlen > (buffer->size)) {
   2408a:	428b      	cmp	r3, r1
{
   2408c:	4604      	mov	r4, r0
   2408e:	460e      	mov	r6, r1
   24090:	4692      	mov	sl, r2
	uint32_t tmp_wr_idx_shift = 0;
   24092:	9505      	str	r5, [sp, #20]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
   24094:	46a9      	mov	r9, r5
	if (wlen > (buffer->size)) {
   24096:	d33a      	bcc.n	2410e <mpsc_pbuf_alloc+0x92>
	__asm__ volatile(
   24098:	f04f 0340 	mov.w	r3, #64	; 0x40
   2409c:	f3ef 8b11 	mrs	fp, BASEPRI
   240a0:	f383 8812 	msr	BASEPRI_MAX, r3
   240a4:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
   240a8:	9a05      	ldr	r2, [sp, #20]
   240aa:	46d8      	mov	r8, fp
   240ac:	b12a      	cbz	r2, 240ba <mpsc_pbuf_alloc+0x3e>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
   240ae:	4629      	mov	r1, r5
   240b0:	4620      	mov	r0, r4
   240b2:	f7ff ff9a 	bl	23fea <post_drop_action>
			tmp_wr_idx_shift = 0;
   240b6:	2300      	movs	r3, #0
   240b8:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
   240ba:	a904      	add	r1, sp, #16
   240bc:	4620      	mov	r0, r4
   240be:	f7ff fec2 	bl	23e46 <free_space>

		if (free_wlen >= wlen) {
   240c2:	9904      	ldr	r1, [sp, #16]
   240c4:	42b1      	cmp	r1, r6
		wrap = free_space(buffer, &free_wlen);
   240c6:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
   240c8:	d32a      	bcc.n	24120 <mpsc_pbuf_alloc+0xa4>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   240ca:	6822      	ldr	r2, [r4, #0]
			item =
   240cc:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
   240ce:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   240d2:	f021 0103 	bic.w	r1, r1, #3
   240d6:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
   240da:	eb03 0982 	add.w	r9, r3, r2, lsl #2
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   240de:	6821      	ldr	r1, [r4, #0]
   240e0:	4632      	mov	r2, r6
   240e2:	4620      	mov	r0, r4
   240e4:	f7ff fed3 	bl	23e8e <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   240e8:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   240ea:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   240ec:	4298      	cmp	r0, r3
   240ee:	d012      	beq.n	24116 <mpsc_pbuf_alloc+0x9a>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
   240f0:	2700      	movs	r7, #0
	__asm__ volatile(
   240f2:	f388 8811 	msr	BASEPRI, r8
   240f6:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
   240fa:	9903      	ldr	r1, [sp, #12]
   240fc:	b129      	cbz	r1, 2410a <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   240fe:	6962      	ldr	r2, [r4, #20]
   24100:	b10a      	cbz	r2, 24106 <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
   24102:	4620      	mov	r0, r4
   24104:	4790      	blx	r2
			}
			dropped_item = NULL;
   24106:	2300      	movs	r3, #0
   24108:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
   2410a:	2f00      	cmp	r7, #0
   2410c:	d1c4      	bne.n	24098 <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   2410e:	4648      	mov	r0, r9
   24110:	b007      	add	sp, #28
   24112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
   24116:	6923      	ldr	r3, [r4, #16]
   24118:	f043 0308 	orr.w	r3, r3, #8
   2411c:	6123      	str	r3, [r4, #16]
   2411e:	e7e7      	b.n	240f0 <mpsc_pbuf_alloc+0x74>
		} else if (wrap) {
   24120:	b118      	cbz	r0, 2412a <mpsc_pbuf_alloc+0xae>
			add_skip_item(buffer, free_wlen);
   24122:	4620      	mov	r0, r4
   24124:	f7ff fecd 	bl	23ec2 <add_skip_item>
			cont = true;
   24128:	e7e3      	b.n	240f2 <mpsc_pbuf_alloc+0x76>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   2412a:	9b00      	ldr	r3, [sp, #0]
   2412c:	ea5a 0303 	orrs.w	r3, sl, r3
   24130:	d01a      	beq.n	24168 <mpsc_pbuf_alloc+0xec>
   24132:	9101      	str	r1, [sp, #4]
   24134:	f003 f982 	bl	2743c <k_is_in_isr>
   24138:	9901      	ldr	r1, [sp, #4]
   2413a:	b9a8      	cbnz	r0, 24168 <mpsc_pbuf_alloc+0xec>
   2413c:	f38b 8811 	msr	BASEPRI, fp
   24140:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   24144:	9b00      	ldr	r3, [sp, #0]
   24146:	4652      	mov	r2, sl
   24148:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2414c:	f7fb fb24 	bl	1f798 <z_impl_k_sem_take>
	__asm__ volatile(
   24150:	f04f 0340 	mov.w	r3, #64	; 0x40
   24154:	f3ef 8811 	mrs	r8, BASEPRI
   24158:	f383 8812 	msr	BASEPRI_MAX, r3
   2415c:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
   24160:	fab0 f780 	clz	r7, r0
   24164:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   24166:	e7c4      	b.n	240f2 <mpsc_pbuf_alloc+0x76>
			cont = drop_item_locked(buffer, free_wlen,
   24168:	ab05      	add	r3, sp, #20
   2416a:	aa03      	add	r2, sp, #12
   2416c:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
   2416e:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
   24170:	f7ff fec4 	bl	23efc <drop_item_locked>
   24174:	4607      	mov	r7, r0
   24176:	e7bc      	b.n	240f2 <mpsc_pbuf_alloc+0x76>

00024178 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   24178:	b570      	push	{r4, r5, r6, lr}
   2417a:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   2417c:	6983      	ldr	r3, [r0, #24]
   2417e:	4608      	mov	r0, r1
{
   24180:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   24182:	4798      	blx	r3
   24184:	4602      	mov	r2, r0
   24186:	f04f 0340 	mov.w	r3, #64	; 0x40
   2418a:	f3ef 8611 	mrs	r6, BASEPRI
   2418e:	f383 8812 	msr	BASEPRI_MAX, r3
   24192:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   24196:	782b      	ldrb	r3, [r5, #0]
   24198:	f043 0301 	orr.w	r3, r3, #1
   2419c:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2419e:	6861      	ldr	r1, [r4, #4]
   241a0:	4620      	mov	r0, r4
   241a2:	f7ff fe74 	bl	23e8e <idx_inc>
   241a6:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   241a8:	4620      	mov	r0, r4
   241aa:	f7ff ff39 	bl	24020 <max_utilization_update>
	__asm__ volatile(
   241ae:	f386 8811 	msr	BASEPRI, r6
   241b2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
   241b6:	bd70      	pop	{r4, r5, r6, pc}

000241b8 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   241b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   241ba:	4604      	mov	r4, r0
	__asm__ volatile(
   241bc:	f04f 0340 	mov.w	r3, #64	; 0x40
   241c0:	f3ef 8611 	mrs	r6, BASEPRI
   241c4:	f383 8812 	msr	BASEPRI_MAX, r3
   241c8:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   241cc:	6923      	ldr	r3, [r4, #16]
   241ce:	f013 0f08 	tst.w	r3, #8
   241d2:	68a3      	ldr	r3, [r4, #8]
   241d4:	d102      	bne.n	241dc <mpsc_pbuf_claim+0x24>
   241d6:	6862      	ldr	r2, [r4, #4]
   241d8:	4293      	cmp	r3, r2
   241da:	d900      	bls.n	241de <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
   241dc:	6a22      	ldr	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
   241de:	69e1      	ldr	r1, [r4, #28]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   241e0:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
   241e2:	b92a      	cbnz	r2, 241f0 <mpsc_pbuf_claim+0x38>
	__asm__ volatile(
   241e4:	f386 8811 	msr	BASEPRI, r6
   241e8:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
   241ec:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
   241ee:	e033      	b.n	24258 <mpsc_pbuf_claim+0xa0>
	return !item->hdr.valid && !item->hdr.busy;
   241f0:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
   241f4:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
   241f8:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
   241fc:	d0f2      	beq.n	241e4 <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
   241fe:	2802      	cmp	r0, #2
   24200:	d103      	bne.n	2420a <mpsc_pbuf_claim+0x52>
		return item->skip.len;
   24202:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
   24206:	08ad      	lsrs	r5, r5, #2
   24208:	d105      	bne.n	24216 <mpsc_pbuf_claim+0x5e>
   2420a:	07d0      	lsls	r0, r2, #31
   2420c:	d412      	bmi.n	24234 <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
   2420e:	69a3      	ldr	r3, [r4, #24]
   24210:	4638      	mov	r0, r7
   24212:	4798      	blx	r3
   24214:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   24216:	68a1      	ldr	r1, [r4, #8]
   24218:	462a      	mov	r2, r5
   2421a:	4620      	mov	r0, r4
   2421c:	f7ff fe37 	bl	23e8e <idx_inc>
				rd_idx_inc(buffer, inc);
   24220:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
   24222:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
   24224:	4620      	mov	r0, r4
   24226:	f7ff fe40 	bl	23eaa <rd_idx_inc>
   2422a:	f386 8811 	msr	BASEPRI, r6
   2422e:	f3bf 8f6f 	isb	sy
	} while (cont);
   24232:	e7c3      	b.n	241bc <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
   24234:	f042 0202 	orr.w	r2, r2, #2
   24238:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
						buffer->get_wlen(item));
   2423c:	4638      	mov	r0, r7
   2423e:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
   24240:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
   24242:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
   24244:	4629      	mov	r1, r5
						buffer->get_wlen(item));
   24246:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
   24248:	4620      	mov	r0, r4
   2424a:	f7ff fe20 	bl	23e8e <idx_inc>
				buffer->tmp_rd_idx =
   2424e:	60a0      	str	r0, [r4, #8]
   24250:	f386 8811 	msr	BASEPRI, r6
   24254:	f3bf 8f6f 	isb	sy
}
   24258:	4638      	mov	r0, r7
   2425a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002425c <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   2425c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2425e:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   24260:	6983      	ldr	r3, [r0, #24]
   24262:	4608      	mov	r0, r1
{
   24264:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   24266:	4798      	blx	r3
   24268:	4606      	mov	r6, r0
	__asm__ volatile(
   2426a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2426e:	f3ef 8711 	mrs	r7, BASEPRI
   24272:	f383 8812 	msr	BASEPRI_MAX, r3
   24276:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   2427a:	782b      	ldrb	r3, [r5, #0]
   2427c:	f36f 0300 	bfc	r3, #0, #1
   24280:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   24282:	6923      	ldr	r3, [r4, #16]
   24284:	079b      	lsls	r3, r3, #30
   24286:	d505      	bpl.n	24294 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   24288:	68e2      	ldr	r2, [r4, #12]
   2428a:	69e3      	ldr	r3, [r4, #28]
   2428c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   24290:	429d      	cmp	r5, r3
   24292:	d11a      	bne.n	242ca <mpsc_pbuf_free+0x6e>
		witem->hdr.busy = 0;
   24294:	782b      	ldrb	r3, [r5, #0]
   24296:	f36f 0341 	bfc	r3, #1, #1
   2429a:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   2429c:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   242a0:	4299      	cmp	r1, r3
   242a2:	d104      	bne.n	242ae <mpsc_pbuf_free+0x52>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
   242a4:	4632      	mov	r2, r6
   242a6:	4620      	mov	r0, r4
   242a8:	f7ff fdf1 	bl	23e8e <idx_inc>
   242ac:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
   242ae:	4631      	mov	r1, r6
   242b0:	4620      	mov	r0, r4
   242b2:	f7ff fdfa 	bl	23eaa <rd_idx_inc>
	__asm__ volatile(
   242b6:	f387 8811 	msr	BASEPRI, r7
   242ba:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   242be:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   242c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   242c6:	f7fb ba41 	b.w	1f74c <z_impl_k_sem_give>
		witem->skip.len = wlen;
   242ca:	682b      	ldr	r3, [r5, #0]
   242cc:	f360 039f 	bfi	r3, r0, #2, #30
   242d0:	602b      	str	r3, [r5, #0]
   242d2:	e7f0      	b.n	242b6 <mpsc_pbuf_free+0x5a>

000242d4 <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   242d4:	6902      	ldr	r2, [r0, #16]
   242d6:	6883      	ldr	r3, [r0, #8]
   242d8:	0712      	lsls	r2, r2, #28
   242da:	d402      	bmi.n	242e2 <mpsc_pbuf_is_pending+0xe>
   242dc:	6842      	ldr	r2, [r0, #4]
   242de:	429a      	cmp	r2, r3
   242e0:	d200      	bcs.n	242e4 <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
   242e2:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   242e4:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   242e6:	1e18      	subs	r0, r3, #0
   242e8:	bf18      	it	ne
   242ea:	2001      	movne	r0, #1
   242ec:	4770      	bx	lr

000242ee <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   242ee:	4770      	bx	lr

000242f0 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
   242f0:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   242f2:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   242f4:	bf5f      	itttt	pl
   242f6:	6803      	ldrpl	r3, [r0, #0]
   242f8:	8842      	ldrhpl	r2, [r0, #2]
   242fa:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
   242fe:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
   24302:	bf5d      	ittte	pl
   24304:	3017      	addpl	r0, #23
   24306:	f020 0007 	bicpl.w	r0, r0, #7
   2430a:	0880      	lsrpl	r0, r0, #2
	return 0;
   2430c:	2000      	movmi	r0, #0
}
   2430e:	4770      	bx	lr

00024310 <dummy_timestamp>:
}
   24310:	2000      	movs	r0, #0
   24312:	4770      	bx	lr

00024314 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   24314:	f002 be49 	b.w	26faa <sys_clock_cycle_get_32>

00024318 <atomic_inc>:
{
   24318:	4603      	mov	r3, r0
}
   2431a:	f3bf 8f5b 	dmb	ish
   2431e:	e853 0f00 	ldrex	r0, [r3]
   24322:	1c42      	adds	r2, r0, #1
   24324:	e843 2100 	strex	r1, r2, [r3]
   24328:	2900      	cmp	r1, #0
   2432a:	d1f8      	bne.n	2431e <atomic_inc+0x6>
   2432c:	f3bf 8f5b 	dmb	ish
   24330:	4770      	bx	lr

00024332 <z_log_vprintk>:
{
   24332:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   24334:	2300      	movs	r3, #0
   24336:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2433a:	e9cd 3300 	strd	r3, r3, [sp]
   2433e:	461a      	mov	r2, r3
   24340:	4619      	mov	r1, r3
   24342:	4618      	mov	r0, r3
   24344:	f7ee fce8 	bl	12d18 <z_impl_z_log_msg_runtime_vcreate>
}
   24348:	b005      	add	sp, #20
   2434a:	f85d fb04 	ldr.w	pc, [sp], #4

0002434e <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   2434e:	2001      	movs	r0, #1
   24350:	f7ee ba9a 	b.w	12888 <z_log_dropped>

00024354 <z_log_get_tag>:
}
   24354:	2000      	movs	r0, #0
   24356:	4770      	bx	lr

00024358 <z_cbprintf_cpy>:
{
   24358:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   2435a:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   2435e:	1b9b      	subs	r3, r3, r6
   24360:	428b      	cmp	r3, r1
{
   24362:	460c      	mov	r4, r1
   24364:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   24366:	d30a      	bcc.n	2437e <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   24368:	6813      	ldr	r3, [r2, #0]
   2436a:	460a      	mov	r2, r1
   2436c:	4601      	mov	r1, r0
   2436e:	1998      	adds	r0, r3, r6
   24370:	f000 faed 	bl	2494e <memcpy>
	desc->off += len;
   24374:	68ab      	ldr	r3, [r5, #8]
   24376:	4423      	add	r3, r4
   24378:	60ab      	str	r3, [r5, #8]
	return len;
   2437a:	4620      	mov	r0, r4
}
   2437c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   2437e:	f06f 001b 	mvn.w	r0, #27
   24382:	e7fb      	b.n	2437c <z_cbprintf_cpy+0x24>

00024384 <z_log_msg_finalize>:
{
   24384:	b570      	push	{r4, r5, r6, lr}
   24386:	460e      	mov	r6, r1
   24388:	4615      	mov	r5, r2
   2438a:	4619      	mov	r1, r3
	if (!msg) {
   2438c:	4604      	mov	r4, r0
   2438e:	b918      	cbnz	r0, 24398 <z_log_msg_finalize+0x14>
}
   24390:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   24394:	f7ee ba78 	b.w	12888 <z_log_dropped>
	if (data) {
   24398:	b133      	cbz	r3, 243a8 <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
   2439a:	f3c2 234a 	ubfx	r3, r2, #9, #11
   2439e:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
   243a0:	0d12      	lsrs	r2, r2, #20
   243a2:	4418      	add	r0, r3
   243a4:	f000 fad3 	bl	2494e <memcpy>
	msg->hdr.source = source;
   243a8:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   243ac:	4620      	mov	r0, r4
}
   243ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   243b2:	f7ee bbf9 	b.w	12ba8 <z_log_msg_commit>

000243b6 <buffer_write>:
{
   243b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   243b8:	4606      	mov	r6, r0
   243ba:	460d      	mov	r5, r1
   243bc:	4614      	mov	r4, r2
   243be:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   243c0:	4621      	mov	r1, r4
   243c2:	4628      	mov	r0, r5
   243c4:	463a      	mov	r2, r7
   243c6:	47b0      	blx	r6
	} while (len != 0);
   243c8:	1a24      	subs	r4, r4, r0
		buf += processed;
   243ca:	4405      	add	r5, r0
	} while (len != 0);
   243cc:	d1f8      	bne.n	243c0 <buffer_write+0xa>
}
   243ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000243d0 <cbvprintf>:
{
   243d0:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   243d2:	2400      	movs	r4, #0
   243d4:	9400      	str	r4, [sp, #0]
   243d6:	f7ed fdb9 	bl	11f4c <z_cbvprintf_impl>
}
   243da:	b002      	add	sp, #8
   243dc:	bd10      	pop	{r4, pc}

000243de <log_output_flush>:
{
   243de:	b510      	push	{r4, lr}
		     output->control_block->offset,
   243e0:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   243e2:	6881      	ldr	r1, [r0, #8]
{
   243e4:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   243e6:	e9d2 2300 	ldrd	r2, r3, [r2]
   243ea:	6800      	ldr	r0, [r0, #0]
   243ec:	f7ff ffe3 	bl	243b6 <buffer_write>
	output->control_block->offset = 0;
   243f0:	6863      	ldr	r3, [r4, #4]
   243f2:	2200      	movs	r2, #0
   243f4:	601a      	str	r2, [r3, #0]
}
   243f6:	bd10      	pop	{r4, pc}

000243f8 <out_func>:
{
   243f8:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   243fa:	684b      	ldr	r3, [r1, #4]
   243fc:	681a      	ldr	r2, [r3, #0]
   243fe:	68cb      	ldr	r3, [r1, #12]
   24400:	429a      	cmp	r2, r3
{
   24402:	4605      	mov	r5, r0
   24404:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   24406:	d102      	bne.n	2440e <out_func+0x16>
		log_output_flush(out_ctx);
   24408:	4608      	mov	r0, r1
   2440a:	f7ff ffe8 	bl	243de <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2440e:	6863      	ldr	r3, [r4, #4]
   24410:	f3bf 8f5b 	dmb	ish
   24414:	e853 2f00 	ldrex	r2, [r3]
   24418:	1c51      	adds	r1, r2, #1
   2441a:	e843 1000 	strex	r0, r1, [r3]
   2441e:	2800      	cmp	r0, #0
   24420:	d1f8      	bne.n	24414 <out_func+0x1c>
   24422:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   24426:	68a3      	ldr	r3, [r4, #8]
   24428:	549d      	strb	r5, [r3, r2]
}
   2442a:	2000      	movs	r0, #0
   2442c:	bd38      	pop	{r3, r4, r5, pc}

0002442e <cr_out_func>:
	if (c == '\n') {
   2442e:	280a      	cmp	r0, #10
{
   24430:	b538      	push	{r3, r4, r5, lr}
   24432:	4604      	mov	r4, r0
   24434:	460d      	mov	r5, r1
	if (c == '\n') {
   24436:	d102      	bne.n	2443e <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   24438:	200d      	movs	r0, #13
   2443a:	f7ff ffdd 	bl	243f8 <out_func>
	out_func(c, ctx);
   2443e:	4629      	mov	r1, r5
   24440:	4620      	mov	r0, r4
   24442:	f7ff ffd9 	bl	243f8 <out_func>
}
   24446:	2000      	movs	r0, #0
   24448:	bd38      	pop	{r3, r4, r5, pc}

0002444a <log_backend_uart_init>:
}
   2444a:	4770      	bx	lr

0002444c <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   2444c:	b538      	push	{r3, r4, r5, lr}
   2444e:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   24450:	42ab      	cmp	r3, r5
{
   24452:	4611      	mov	r1, r2
   24454:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   24456:	d804      	bhi.n	24462 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   24458:	461a      	mov	r2, r3
   2445a:	f000 fa78 	bl	2494e <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2445e:	4620      	mov	r0, r4
   24460:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   24462:	2400      	movs	r4, #0
   24464:	e7fb      	b.n	2445e <_copy+0x12>

00024466 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   24466:	f000 ba7d 	b.w	24964 <memset>

0002446a <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2446a:	09c3      	lsrs	r3, r0, #7
   2446c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   24470:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   24474:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   24478:	b2c0      	uxtb	r0, r0
   2447a:	4770      	bx	lr

0002447c <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2447c:	78cb      	ldrb	r3, [r1, #3]
   2447e:	7802      	ldrb	r2, [r0, #0]
   24480:	4053      	eors	r3, r2
   24482:	7003      	strb	r3, [r0, #0]
   24484:	884b      	ldrh	r3, [r1, #2]
   24486:	7842      	ldrb	r2, [r0, #1]
   24488:	4053      	eors	r3, r2
   2448a:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2448c:	680a      	ldr	r2, [r1, #0]
   2448e:	7883      	ldrb	r3, [r0, #2]
   24490:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   24494:	7083      	strb	r3, [r0, #2]
   24496:	680a      	ldr	r2, [r1, #0]
   24498:	78c3      	ldrb	r3, [r0, #3]
   2449a:	4053      	eors	r3, r2
   2449c:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2449e:	79cb      	ldrb	r3, [r1, #7]
   244a0:	7902      	ldrb	r2, [r0, #4]
   244a2:	4053      	eors	r3, r2
   244a4:	7103      	strb	r3, [r0, #4]
   244a6:	88cb      	ldrh	r3, [r1, #6]
   244a8:	7942      	ldrb	r2, [r0, #5]
   244aa:	4053      	eors	r3, r2
   244ac:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   244ae:	684a      	ldr	r2, [r1, #4]
   244b0:	7983      	ldrb	r3, [r0, #6]
   244b2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   244b6:	7183      	strb	r3, [r0, #6]
   244b8:	684a      	ldr	r2, [r1, #4]
   244ba:	79c3      	ldrb	r3, [r0, #7]
   244bc:	4053      	eors	r3, r2
   244be:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   244c0:	7acb      	ldrb	r3, [r1, #11]
   244c2:	7a02      	ldrb	r2, [r0, #8]
   244c4:	4053      	eors	r3, r2
   244c6:	7203      	strb	r3, [r0, #8]
   244c8:	7a42      	ldrb	r2, [r0, #9]
   244ca:	894b      	ldrh	r3, [r1, #10]
   244cc:	4053      	eors	r3, r2
   244ce:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   244d0:	688a      	ldr	r2, [r1, #8]
   244d2:	7a83      	ldrb	r3, [r0, #10]
   244d4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   244d8:	7283      	strb	r3, [r0, #10]
   244da:	688a      	ldr	r2, [r1, #8]
   244dc:	7ac3      	ldrb	r3, [r0, #11]
   244de:	4053      	eors	r3, r2
   244e0:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   244e2:	7bcb      	ldrb	r3, [r1, #15]
   244e4:	7b02      	ldrb	r2, [r0, #12]
   244e6:	4053      	eors	r3, r2
   244e8:	7303      	strb	r3, [r0, #12]
   244ea:	89cb      	ldrh	r3, [r1, #14]
   244ec:	7b42      	ldrb	r2, [r0, #13]
   244ee:	4053      	eors	r3, r2
   244f0:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   244f2:	68ca      	ldr	r2, [r1, #12]
   244f4:	7b83      	ldrb	r3, [r0, #14]
   244f6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   244fa:	7383      	strb	r3, [r0, #14]
   244fc:	68ca      	ldr	r2, [r1, #12]
   244fe:	7bc3      	ldrb	r3, [r0, #15]
   24500:	4053      	eors	r3, r2
   24502:	73c3      	strb	r3, [r0, #15]
}
   24504:	4770      	bx	lr

00024506 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   24506:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   24508:	7802      	ldrb	r2, [r0, #0]
   2450a:	f88d 2000 	strb.w	r2, [sp]
   2450e:	7942      	ldrb	r2, [r0, #5]
   24510:	f88d 2001 	strb.w	r2, [sp, #1]
   24514:	7a82      	ldrb	r2, [r0, #10]
   24516:	f88d 2002 	strb.w	r2, [sp, #2]
   2451a:	7bc2      	ldrb	r2, [r0, #15]
   2451c:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   24520:	7902      	ldrb	r2, [r0, #4]
   24522:	f88d 2004 	strb.w	r2, [sp, #4]
   24526:	7a42      	ldrb	r2, [r0, #9]
   24528:	f88d 2005 	strb.w	r2, [sp, #5]
   2452c:	7b82      	ldrb	r2, [r0, #14]
   2452e:	f88d 2006 	strb.w	r2, [sp, #6]
   24532:	78c2      	ldrb	r2, [r0, #3]
   24534:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   24538:	7a02      	ldrb	r2, [r0, #8]
   2453a:	f88d 2008 	strb.w	r2, [sp, #8]
   2453e:	7b42      	ldrb	r2, [r0, #13]
   24540:	f88d 2009 	strb.w	r2, [sp, #9]
   24544:	7882      	ldrb	r2, [r0, #2]
   24546:	f88d 200a 	strb.w	r2, [sp, #10]
   2454a:	79c2      	ldrb	r2, [r0, #7]
   2454c:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   24550:	7b02      	ldrb	r2, [r0, #12]
   24552:	f88d 200c 	strb.w	r2, [sp, #12]
   24556:	7842      	ldrb	r2, [r0, #1]
   24558:	7ac3      	ldrb	r3, [r0, #11]
   2455a:	f88d 200d 	strb.w	r2, [sp, #13]
   2455e:	7982      	ldrb	r2, [r0, #6]
   24560:	f88d 200e 	strb.w	r2, [sp, #14]
   24564:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   24568:	2310      	movs	r3, #16
   2456a:	466a      	mov	r2, sp
   2456c:	4619      	mov	r1, r3
   2456e:	f7ff ff6d 	bl	2444c <_copy>
}
   24572:	b005      	add	sp, #20
   24574:	f85d fb04 	ldr.w	pc, [sp], #4

00024578 <mult_row_column>:
{
   24578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2457a:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2457c:	7808      	ldrb	r0, [r1, #0]
{
   2457e:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   24580:	f7ff ff73 	bl	2446a <_double_byte>
   24584:	4605      	mov	r5, r0
   24586:	7860      	ldrb	r0, [r4, #1]
   24588:	f7ff ff6f 	bl	2446a <_double_byte>
   2458c:	78a2      	ldrb	r2, [r4, #2]
   2458e:	7863      	ldrb	r3, [r4, #1]
   24590:	4053      	eors	r3, r2
   24592:	78e2      	ldrb	r2, [r4, #3]
   24594:	4053      	eors	r3, r2
   24596:	405d      	eors	r5, r3
   24598:	4068      	eors	r0, r5
   2459a:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2459c:	7860      	ldrb	r0, [r4, #1]
   2459e:	7827      	ldrb	r7, [r4, #0]
   245a0:	f7ff ff63 	bl	2446a <_double_byte>
   245a4:	4605      	mov	r5, r0
   245a6:	78a0      	ldrb	r0, [r4, #2]
   245a8:	f7ff ff5f 	bl	2446a <_double_byte>
   245ac:	78a3      	ldrb	r3, [r4, #2]
   245ae:	405f      	eors	r7, r3
   245b0:	78e3      	ldrb	r3, [r4, #3]
   245b2:	405f      	eors	r7, r3
   245b4:	407d      	eors	r5, r7
   245b6:	4068      	eors	r0, r5
   245b8:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   245ba:	7863      	ldrb	r3, [r4, #1]
   245bc:	7827      	ldrb	r7, [r4, #0]
   245be:	78a0      	ldrb	r0, [r4, #2]
   245c0:	405f      	eors	r7, r3
   245c2:	f7ff ff52 	bl	2446a <_double_byte>
   245c6:	4605      	mov	r5, r0
   245c8:	78e0      	ldrb	r0, [r4, #3]
   245ca:	f7ff ff4e 	bl	2446a <_double_byte>
   245ce:	78e3      	ldrb	r3, [r4, #3]
   245d0:	405f      	eors	r7, r3
   245d2:	407d      	eors	r5, r7
   245d4:	4068      	eors	r0, r5
   245d6:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   245d8:	7820      	ldrb	r0, [r4, #0]
   245da:	f7ff ff46 	bl	2446a <_double_byte>
   245de:	7862      	ldrb	r2, [r4, #1]
   245e0:	7823      	ldrb	r3, [r4, #0]
   245e2:	4053      	eors	r3, r2
   245e4:	78a2      	ldrb	r2, [r4, #2]
   245e6:	4053      	eors	r3, r2
   245e8:	ea80 0503 	eor.w	r5, r0, r3
   245ec:	78e0      	ldrb	r0, [r4, #3]
   245ee:	f7ff ff3c 	bl	2446a <_double_byte>
   245f2:	b2ed      	uxtb	r5, r5
   245f4:	4045      	eors	r5, r0
   245f6:	70f5      	strb	r5, [r6, #3]
}
   245f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000245fa <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   245fa:	b570      	push	{r4, r5, r6, lr}
   245fc:	4614      	mov	r4, r2
   245fe:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   24600:	4605      	mov	r5, r0
   24602:	2800      	cmp	r0, #0
   24604:	d049      	beq.n	2469a <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   24606:	2900      	cmp	r1, #0
   24608:	d049      	beq.n	2469e <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   2460a:	2a00      	cmp	r2, #0
   2460c:	d049      	beq.n	246a2 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   2460e:	2310      	movs	r3, #16
   24610:	460a      	mov	r2, r1
   24612:	4668      	mov	r0, sp
   24614:	4619      	mov	r1, r3
   24616:	f7ff ff19 	bl	2444c <_copy>
	add_round_key(state, s->words);
   2461a:	4621      	mov	r1, r4
   2461c:	4668      	mov	r0, sp
   2461e:	f7ff ff2d 	bl	2447c <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   24622:	3410      	adds	r4, #16
   24624:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   24628:	4668      	mov	r0, sp
   2462a:	f7ee ff9b 	bl	13564 <sub_bytes>
		shift_rows(state);
   2462e:	4668      	mov	r0, sp
   24630:	f7ff ff69 	bl	24506 <shift_rows>
	mult_row_column(t, s);
   24634:	4669      	mov	r1, sp
   24636:	a804      	add	r0, sp, #16
   24638:	f7ff ff9e 	bl	24578 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   2463c:	a901      	add	r1, sp, #4
   2463e:	a805      	add	r0, sp, #20
   24640:	f7ff ff9a 	bl	24578 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   24644:	a902      	add	r1, sp, #8
   24646:	a806      	add	r0, sp, #24
   24648:	f7ff ff96 	bl	24578 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   2464c:	a903      	add	r1, sp, #12
   2464e:	a807      	add	r0, sp, #28
   24650:	f7ff ff92 	bl	24578 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   24654:	2310      	movs	r3, #16
   24656:	4619      	mov	r1, r3
   24658:	eb0d 0203 	add.w	r2, sp, r3
   2465c:	4668      	mov	r0, sp
   2465e:	f7ff fef5 	bl	2444c <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   24662:	4621      	mov	r1, r4
   24664:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   24666:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   24668:	f7ff ff08 	bl	2447c <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   2466c:	42b4      	cmp	r4, r6
   2466e:	d1db      	bne.n	24628 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   24670:	f7ee ff78 	bl	13564 <sub_bytes>
	shift_rows(state);
   24674:	4668      	mov	r0, sp
   24676:	f7ff ff46 	bl	24506 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   2467a:	4621      	mov	r1, r4
   2467c:	4668      	mov	r0, sp
   2467e:	f7ff fefd 	bl	2447c <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   24682:	2310      	movs	r3, #16
   24684:	4619      	mov	r1, r3
   24686:	466a      	mov	r2, sp
   24688:	4628      	mov	r0, r5
   2468a:	f7ff fedf 	bl	2444c <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   2468e:	4668      	mov	r0, sp
   24690:	2210      	movs	r2, #16
   24692:	2100      	movs	r1, #0
   24694:	f7ff fee7 	bl	24466 <_set>

	return TC_CRYPTO_SUCCESS;
   24698:	2001      	movs	r0, #1
}
   2469a:	b008      	add	sp, #32
   2469c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2469e:	4608      	mov	r0, r1
   246a0:	e7fb      	b.n	2469a <tc_aes_encrypt+0xa0>
   246a2:	4610      	mov	r0, r2
   246a4:	e7f9      	b.n	2469a <tc_aes_encrypt+0xa0>

000246a6 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   246a6:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   246a8:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   246aa:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   246ac:	f912 3b10 	ldrsb.w	r3, [r2], #16
   246b0:	2b00      	cmp	r3, #0
   246b2:	bfac      	ite	ge
   246b4:	2300      	movge	r3, #0
   246b6:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   246b8:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   246bc:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   246c0:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   246c2:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   246c6:	d002      	beq.n	246ce <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   246c8:	7813      	ldrb	r3, [r2, #0]
   246ca:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   246cc:	e7f4      	b.n	246b8 <gf_double+0x12>
	}
}
   246ce:	bd10      	pop	{r4, pc}

000246d0 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   246d0:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   246d2:	b120      	cbz	r0, 246de <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   246d4:	2258      	movs	r2, #88	; 0x58
   246d6:	2100      	movs	r1, #0
   246d8:	f7ff fec5 	bl	24466 <_set>
   246dc:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   246de:	bd08      	pop	{r3, pc}

000246e0 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   246e0:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   246e2:	4604      	mov	r4, r0
   246e4:	b188      	cbz	r0, 2470a <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   246e6:	2210      	movs	r2, #16
   246e8:	2100      	movs	r1, #0
   246ea:	f7ff febc 	bl	24466 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   246ee:	2210      	movs	r2, #16
   246f0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   246f4:	2100      	movs	r1, #0
   246f6:	f7ff feb6 	bl	24466 <_set>
	s->leftover_offset = 0;
   246fa:	2300      	movs	r3, #0
   246fc:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   246fe:	2200      	movs	r2, #0
   24700:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   24704:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   24708:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2470a:	bd10      	pop	{r4, pc}

0002470c <tc_cmac_setup>:
{
   2470c:	b570      	push	{r4, r5, r6, lr}
   2470e:	4604      	mov	r4, r0
   24710:	460d      	mov	r5, r1
   24712:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   24714:	b310      	cbz	r0, 2475c <tc_cmac_setup+0x50>
   24716:	b311      	cbz	r1, 2475e <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   24718:	2258      	movs	r2, #88	; 0x58
   2471a:	2100      	movs	r1, #0
   2471c:	f7ff fea3 	bl	24466 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   24720:	4629      	mov	r1, r5
	s->sched = sched;
   24722:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   24724:	4630      	mov	r0, r6
   24726:	f7ee ff29 	bl	1357c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2472a:	2210      	movs	r2, #16
   2472c:	2100      	movs	r1, #0
   2472e:	4620      	mov	r0, r4
   24730:	f7ff fe99 	bl	24466 <_set>
	gf_double (s->K1, s->iv);
   24734:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   24738:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2473a:	4621      	mov	r1, r4
   2473c:	4620      	mov	r0, r4
   2473e:	f7ff ff5c 	bl	245fa <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   24742:	4621      	mov	r1, r4
   24744:	4628      	mov	r0, r5
   24746:	f7ff ffae 	bl	246a6 <gf_double>
	gf_double (s->K2, s->K1);
   2474a:	4629      	mov	r1, r5
   2474c:	f104 0020 	add.w	r0, r4, #32
   24750:	f7ff ffa9 	bl	246a6 <gf_double>
	tc_cmac_init(s);
   24754:	4620      	mov	r0, r4
   24756:	f7ff ffc3 	bl	246e0 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2475a:	2001      	movs	r0, #1
}
   2475c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2475e:	4608      	mov	r0, r1
   24760:	e7fc      	b.n	2475c <tc_cmac_setup+0x50>

00024762 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   24762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24766:	460e      	mov	r6, r1
   24768:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2476a:	4604      	mov	r4, r0
   2476c:	2800      	cmp	r0, #0
   2476e:	d060      	beq.n	24832 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   24770:	b1fa      	cbz	r2, 247b2 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   24772:	2900      	cmp	r1, #0
   24774:	d05d      	beq.n	24832 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   24776:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   2477a:	ea53 0102 	orrs.w	r1, r3, r2
   2477e:	d058      	beq.n	24832 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   24780:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   24782:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   24786:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   2478a:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2478e:	f1b8 0f00 	cmp.w	r8, #0
   24792:	d02c      	beq.n	247ee <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   24794:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   24798:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   2479c:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2479e:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   247a0:	d20a      	bcs.n	247b8 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   247a2:	462b      	mov	r3, r5
   247a4:	4632      	mov	r2, r6
   247a6:	4629      	mov	r1, r5
   247a8:	f7ff fe50 	bl	2444c <_copy>
			s->leftover_offset += data_length;
   247ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
   247ae:	442b      	add	r3, r5
   247b0:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   247b2:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   247b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   247b8:	463b      	mov	r3, r7
   247ba:	4632      	mov	r2, r6
   247bc:	4639      	mov	r1, r7
   247be:	f7ff fe45 	bl	2444c <_copy>
		data_length -= remaining_space;
   247c2:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   247c4:	2300      	movs	r3, #0
   247c6:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   247c8:	4445      	add	r5, r8
		data += remaining_space;
   247ca:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   247cc:	1e63      	subs	r3, r4, #1
   247ce:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   247d2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   247d6:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   247da:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   247dc:	ea82 0200 	eor.w	r2, r2, r0
   247e0:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   247e2:	d1f6      	bne.n	247d2 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   247e4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   247e6:	4621      	mov	r1, r4
   247e8:	4620      	mov	r0, r4
   247ea:	f7ff ff06 	bl	245fa <tc_aes_encrypt>
   247ee:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   247f2:	2d10      	cmp	r5, #16
   247f4:	d80a      	bhi.n	2480c <tc_cmac_update+0xaa>
	if (data_length > 0) {
   247f6:	2d00      	cmp	r5, #0
   247f8:	d0db      	beq.n	247b2 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   247fa:	462b      	mov	r3, r5
   247fc:	4632      	mov	r2, r6
   247fe:	4629      	mov	r1, r5
   24800:	f104 0030 	add.w	r0, r4, #48	; 0x30
   24804:	f7ff fe22 	bl	2444c <_copy>
		s->leftover_offset = data_length;
   24808:	6465      	str	r5, [r4, #68]	; 0x44
   2480a:	e7d2      	b.n	247b2 <tc_cmac_update+0x50>
   2480c:	1e63      	subs	r3, r4, #1
   2480e:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   24810:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   24814:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24818:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   2481a:	ea82 0200 	eor.w	r2, r2, r0
   2481e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24820:	d1f6      	bne.n	24810 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   24822:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24824:	4621      	mov	r1, r4
   24826:	4620      	mov	r0, r4
   24828:	f7ff fee7 	bl	245fa <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2482c:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2482e:	3d10      	subs	r5, #16
   24830:	e7df      	b.n	247f2 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   24832:	2000      	movs	r0, #0
   24834:	e7be      	b.n	247b4 <tc_cmac_update+0x52>

00024836 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   24836:	b570      	push	{r4, r5, r6, lr}
   24838:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2483a:	4605      	mov	r5, r0
   2483c:	b1e8      	cbz	r0, 2487a <tc_cmac_final+0x44>
   2483e:	b369      	cbz	r1, 2489c <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   24840:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   24842:	2a10      	cmp	r2, #16
   24844:	d11a      	bne.n	2487c <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   24846:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24848:	1e63      	subs	r3, r4, #1
   2484a:	3901      	subs	r1, #1
   2484c:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   24850:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   24854:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   24858:	4072      	eors	r2, r6
   2485a:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2485e:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   24860:	ea82 0206 	eor.w	r2, r2, r6
   24864:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24866:	d1f3      	bne.n	24850 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   24868:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2486a:	4621      	mov	r1, r4
   2486c:	4628      	mov	r0, r5
   2486e:	f7ff fec4 	bl	245fa <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   24872:	4620      	mov	r0, r4
   24874:	f7ff ff2c 	bl	246d0 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   24878:	2001      	movs	r0, #1
}
   2487a:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2487c:	f102 0030 	add.w	r0, r2, #48	; 0x30
   24880:	2100      	movs	r1, #0
   24882:	f1c2 0210 	rsb	r2, r2, #16
   24886:	4420      	add	r0, r4
   24888:	f7ff fded 	bl	24466 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2488c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2488e:	4423      	add	r3, r4
   24890:	2280      	movs	r2, #128	; 0x80
   24892:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   24896:	f104 0120 	add.w	r1, r4, #32
   2489a:	e7d5      	b.n	24848 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2489c:	4608      	mov	r0, r1
   2489e:	e7ec      	b.n	2487a <tc_cmac_final+0x44>

000248a0 <abort_function>:
{
   248a0:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   248a2:	2000      	movs	r0, #0
   248a4:	f7ed ff04 	bl	126b0 <sys_reboot>

000248a8 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   248a8:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   248aa:	6800      	ldr	r0, [r0, #0]
   248ac:	f7ee bfc4 	b.w	13838 <z_arm_fatal_error>

000248b0 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   248b0:	2100      	movs	r1, #0
   248b2:	2001      	movs	r0, #1
   248b4:	f7ee bfc0 	b.w	13838 <z_arm_fatal_error>

000248b8 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   248b8:	b508      	push	{r3, lr}
	handler();
   248ba:	f7ef f87b 	bl	139b4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   248be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   248c2:	f7ef b953 	b.w	13b6c <z_arm_exc_exit>

000248c6 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   248c6:	2300      	movs	r3, #0
   248c8:	f7ee b9a2 	b.w	12c10 <z_impl_z_log_msg_static_create>

000248cc <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   248cc:	3901      	subs	r1, #1
   248ce:	4603      	mov	r3, r0
   248d0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   248d4:	b90a      	cbnz	r2, 248da <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   248d6:	701a      	strb	r2, [r3, #0]

	return dest;
}
   248d8:	4770      	bx	lr
		*d = *s;
   248da:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   248de:	e7f7      	b.n	248d0 <strcpy+0x4>

000248e0 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   248e0:	4603      	mov	r3, r0
	size_t n = 0;
   248e2:	2000      	movs	r0, #0

	while (*s != '\0') {
   248e4:	5c1a      	ldrb	r2, [r3, r0]
   248e6:	b902      	cbnz	r2, 248ea <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   248e8:	4770      	bx	lr
		n++;
   248ea:	3001      	adds	r0, #1
   248ec:	e7fa      	b.n	248e4 <strlen+0x4>

000248ee <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   248ee:	4603      	mov	r3, r0
	size_t n = 0;
   248f0:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   248f2:	5c1a      	ldrb	r2, [r3, r0]
   248f4:	b10a      	cbz	r2, 248fa <strnlen+0xc>
   248f6:	4288      	cmp	r0, r1
   248f8:	d100      	bne.n	248fc <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   248fa:	4770      	bx	lr
		n++;
   248fc:	3001      	adds	r0, #1
   248fe:	e7f8      	b.n	248f2 <strnlen+0x4>

00024900 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   24900:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   24902:	b15a      	cbz	r2, 2491c <memcmp+0x1c>
   24904:	3901      	subs	r1, #1
   24906:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   24908:	f810 2b01 	ldrb.w	r2, [r0], #1
   2490c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   24910:	42a0      	cmp	r0, r4
   24912:	d001      	beq.n	24918 <memcmp+0x18>
   24914:	429a      	cmp	r2, r3
   24916:	d0f7      	beq.n	24908 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   24918:	1ad0      	subs	r0, r2, r3
}
   2491a:	bd10      	pop	{r4, pc}
		return 0;
   2491c:	4610      	mov	r0, r2
   2491e:	e7fc      	b.n	2491a <memcmp+0x1a>

00024920 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   24920:	1a43      	subs	r3, r0, r1
   24922:	4293      	cmp	r3, r2
{
   24924:	b510      	push	{r4, lr}
   24926:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   2492a:	d308      	bcc.n	2493e <memmove+0x1e>
   2492c:	3901      	subs	r1, #1
	char *dest = d;
   2492e:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   24930:	429a      	cmp	r2, r3
   24932:	d00b      	beq.n	2494c <memmove+0x2c>
			*dest = *src;
   24934:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   24938:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   2493c:	e7f8      	b.n	24930 <memmove+0x10>
   2493e:	440a      	add	r2, r1
			dest[n] = src[n];
   24940:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   24944:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   24948:	428a      	cmp	r2, r1
   2494a:	d1f9      	bne.n	24940 <memmove+0x20>
		}
	}

	return d;
}
   2494c:	bd10      	pop	{r4, pc}

0002494e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   2494e:	b510      	push	{r4, lr}
   24950:	1e43      	subs	r3, r0, #1
   24952:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   24954:	4291      	cmp	r1, r2
   24956:	d100      	bne.n	2495a <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   24958:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   2495a:	f811 4b01 	ldrb.w	r4, [r1], #1
   2495e:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   24962:	e7f7      	b.n	24954 <memcpy+0x6>

00024964 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   24964:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   24966:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   24968:	4603      	mov	r3, r0
	while (n > 0) {
   2496a:	4293      	cmp	r3, r2
   2496c:	d100      	bne.n	24970 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   2496e:	4770      	bx	lr
		*(d_byte++) = c_byte;
   24970:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   24974:	e7f9      	b.n	2496a <memset+0x6>

00024976 <_stdout_hook_default>:
}
   24976:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2497a:	4770      	bx	lr

0002497c <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2497c:	2806      	cmp	r0, #6
   2497e:	d108      	bne.n	24992 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   24980:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   24984:	2201      	movs	r2, #1
   24986:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2498a:	f3bf 8f4f 	dsb	sy
        __WFE();
   2498e:	bf20      	wfe
    while (true)
   24990:	e7fd      	b.n	2498e <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   24992:	4770      	bx	lr

00024994 <pm_state_exit_post_ops>:
   24994:	2300      	movs	r3, #0
   24996:	f383 8811 	msr	BASEPRI, r3
   2499a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2499e:	4770      	bx	lr

000249a0 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   249a0:	b530      	push	{r4, r5, lr}
   249a2:	b085      	sub	sp, #20
   249a4:	4604      	mov	r4, r0
   249a6:	4615      	mov	r5, r2

	LOG_DBG("irk %s", bt_hex(irk, 16));
	LOG_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   249a8:	4668      	mov	r0, sp
   249aa:	2203      	movs	r2, #3
   249ac:	f7ff ffcf 	bl	2494e <memcpy>
	(void)memset(res + 3, 0, 13);
   249b0:	220d      	movs	r2, #13
   249b2:	2100      	movs	r1, #0
   249b4:	f10d 0003 	add.w	r0, sp, #3
   249b8:	f7ff ffd4 	bl	24964 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   249bc:	4620      	mov	r0, r4
   249be:	466a      	mov	r2, sp
   249c0:	4669      	mov	r1, sp
   249c2:	f002 fb70 	bl	270a6 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   249c6:	4604      	mov	r4, r0
   249c8:	b920      	cbnz	r0, 249d4 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   249ca:	2203      	movs	r2, #3
   249cc:	4669      	mov	r1, sp
   249ce:	4628      	mov	r0, r5
   249d0:	f7ff ffbd 	bl	2494e <memcpy>

	return 0;
}
   249d4:	4620      	mov	r0, r4
   249d6:	b005      	add	sp, #20
   249d8:	bd30      	pop	{r4, r5, pc}

000249da <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   249da:	b513      	push	{r0, r1, r4, lr}
   249dc:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	LOG_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   249de:	aa01      	add	r2, sp, #4
   249e0:	3103      	adds	r1, #3
   249e2:	f7ff ffdd 	bl	249a0 <ah>
	if (err) {
   249e6:	b948      	cbnz	r0, 249fc <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   249e8:	2203      	movs	r2, #3
   249ea:	a901      	add	r1, sp, #4
   249ec:	4620      	mov	r0, r4
   249ee:	f7ff ff87 	bl	24900 <memcmp>
   249f2:	fab0 f080 	clz	r0, r0
   249f6:	0940      	lsrs	r0, r0, #5
}
   249f8:	b002      	add	sp, #8
   249fa:	bd10      	pop	{r4, pc}
		return false;
   249fc:	2000      	movs	r0, #0
   249fe:	e7fb      	b.n	249f8 <bt_rpa_irk_matches+0x1e>

00024a00 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   24a00:	b510      	push	{r4, lr}
   24a02:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   24a04:	7801      	ldrb	r1, [r0, #0]
   24a06:	7822      	ldrb	r2, [r4, #0]
   24a08:	428a      	cmp	r2, r1
{
   24a0a:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   24a0c:	d00f      	beq.n	24a2e <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   24a0e:	4669      	mov	r1, sp
   24a10:	f7ef fe1e 	bl	14650 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   24a14:	a905      	add	r1, sp, #20
   24a16:	4620      	mov	r0, r4
   24a18:	f7ef fe1a 	bl	14650 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   24a1c:	2210      	movs	r2, #16
   24a1e:	f10d 0115 	add.w	r1, sp, #21
   24a22:	f10d 0001 	add.w	r0, sp, #1
   24a26:	f7ff ff6b 	bl	24900 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   24a2a:	b00a      	add	sp, #40	; 0x28
   24a2c:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   24a2e:	2a01      	cmp	r2, #1
   24a30:	d006      	beq.n	24a40 <bt_uuid_cmp+0x40>
   24a32:	2a02      	cmp	r2, #2
   24a34:	d007      	beq.n	24a46 <bt_uuid_cmp+0x46>
   24a36:	b972      	cbnz	r2, 24a56 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   24a38:	8840      	ldrh	r0, [r0, #2]
   24a3a:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   24a3c:	1ac0      	subs	r0, r0, r3
   24a3e:	e7f4      	b.n	24a2a <bt_uuid_cmp+0x2a>
   24a40:	6840      	ldr	r0, [r0, #4]
   24a42:	6863      	ldr	r3, [r4, #4]
   24a44:	e7fa      	b.n	24a3c <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   24a46:	2210      	movs	r2, #16
   24a48:	1c61      	adds	r1, r4, #1
   24a4a:	3001      	adds	r0, #1
}
   24a4c:	b00a      	add	sp, #40	; 0x28
   24a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   24a52:	f7ff bf55 	b.w	24900 <memcmp>
	switch (u1->type) {
   24a56:	f06f 0015 	mvn.w	r0, #21
   24a5a:	e7e6      	b.n	24a2a <bt_uuid_cmp+0x2a>

00024a5c <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   24a5c:	2a04      	cmp	r2, #4
{
   24a5e:	b510      	push	{r4, lr}
	switch (data_len) {
   24a60:	d00a      	beq.n	24a78 <bt_uuid_create+0x1c>
   24a62:	2a10      	cmp	r2, #16
   24a64:	d00d      	beq.n	24a82 <bt_uuid_create+0x26>
   24a66:	2a02      	cmp	r2, #2
   24a68:	f04f 0300 	mov.w	r3, #0
   24a6c:	d10f      	bne.n	24a8e <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   24a6e:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   24a70:	880b      	ldrh	r3, [r1, #0]
   24a72:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   24a74:	2001      	movs	r0, #1
}
   24a76:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   24a78:	2301      	movs	r3, #1
   24a7a:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   24a7c:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   24a7e:	6043      	str	r3, [r0, #4]
		break;
   24a80:	e7f8      	b.n	24a74 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   24a82:	2302      	movs	r3, #2
   24a84:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   24a88:	f7ff ff61 	bl	2494e <memcpy>
		break;
   24a8c:	e7f2      	b.n	24a74 <bt_uuid_create+0x18>
	switch (data_len) {
   24a8e:	4618      	mov	r0, r3
   24a90:	e7f1      	b.n	24a76 <bt_uuid_create+0x1a>

00024a92 <bt_addr_le_create_static>:

#define ADDR_RESOLVED_BITMASK (0x02)

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   24a92:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   24a94:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   24a96:	2106      	movs	r1, #6
{
   24a98:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   24a9a:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   24a9e:	f7f9 fb6d 	bl	1e17c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   24aa2:	b918      	cbnz	r0, 24aac <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   24aa4:	79a3      	ldrb	r3, [r4, #6]
   24aa6:	f063 033f 	orn	r3, r3, #63	; 0x3f
   24aaa:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   24aac:	bd10      	pop	{r4, pc}

00024aae <bt_addr_le_copy_resolved>:

	return 0;
}

void bt_addr_le_copy_resolved(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
   24aae:	b510      	push	{r4, lr}
   24ab0:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   24ab2:	2207      	movs	r2, #7
   24ab4:	f7ff ff4b 	bl	2494e <memcpy>
	bt_addr_le_copy(dst, src);
	/* translate to "regular" address type */
	dst->type &= ~ADDR_RESOLVED_BITMASK;
   24ab8:	7823      	ldrb	r3, [r4, #0]
   24aba:	f023 0302 	bic.w	r3, r3, #2
   24abe:	7023      	strb	r3, [r4, #0]
}
   24ac0:	bd10      	pop	{r4, pc}

00024ac2 <bt_addr_le_is_resolved>:

bool bt_addr_le_is_resolved(const bt_addr_le_t *addr)
{
	return (addr->type & ADDR_RESOLVED_BITMASK) != 0;
   24ac2:	7800      	ldrb	r0, [r0, #0]
}
   24ac4:	f3c0 0040 	ubfx	r0, r0, #1, #1
   24ac8:	4770      	bx	lr

00024aca <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   24aca:	280f      	cmp	r0, #15
   24acc:	d807      	bhi.n	24ade <bt_hci_evt_get_flags+0x14>
   24ace:	280d      	cmp	r0, #13
   24ad0:	d80b      	bhi.n	24aea <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   24ad2:	2805      	cmp	r0, #5
   24ad4:	bf08      	it	eq
   24ad6:	2003      	moveq	r0, #3
   24ad8:	bf18      	it	ne
   24ada:	2002      	movne	r0, #2
   24adc:	4770      	bx	lr
	switch (evt) {
   24ade:	2813      	cmp	r0, #19
   24ae0:	d003      	beq.n	24aea <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   24ae2:	281a      	cmp	r0, #26
   24ae4:	bf08      	it	eq
   24ae6:	2001      	moveq	r0, #1
   24ae8:	e7f6      	b.n	24ad8 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   24aea:	2001      	movs	r0, #1
	}
}
   24aec:	4770      	bx	lr

00024aee <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   24aee:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   24af2:	b183      	cbz	r3, 24b16 <update_sec_level+0x28>
   24af4:	7b5a      	ldrb	r2, [r3, #13]
   24af6:	07d1      	lsls	r1, r2, #31
   24af8:	d50d      	bpl.n	24b16 <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   24afa:	06d2      	lsls	r2, r2, #27
   24afc:	d50d      	bpl.n	24b1a <update_sec_level+0x2c>
   24afe:	7b1b      	ldrb	r3, [r3, #12]
   24b00:	2b10      	cmp	r3, #16
   24b02:	bf14      	ite	ne
   24b04:	2303      	movne	r3, #3
   24b06:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   24b08:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   24b0a:	7a80      	ldrb	r0, [r0, #10]
}
   24b0c:	4298      	cmp	r0, r3
   24b0e:	bf8c      	ite	hi
   24b10:	2000      	movhi	r0, #0
   24b12:	2001      	movls	r0, #1
   24b14:	4770      	bx	lr
   24b16:	2302      	movs	r3, #2
   24b18:	e7f6      	b.n	24b08 <update_sec_level+0x1a>
   24b1a:	2303      	movs	r3, #3
   24b1c:	e7f4      	b.n	24b08 <update_sec_level+0x1a>

00024b1e <hci_vendor_event>:
}
   24b1e:	4770      	bx	lr

00024b20 <atomic_or>:
{
   24b20:	b510      	push	{r4, lr}
   24b22:	4603      	mov	r3, r0
}
   24b24:	f3bf 8f5b 	dmb	ish
   24b28:	e853 0f00 	ldrex	r0, [r3]
   24b2c:	ea40 0201 	orr.w	r2, r0, r1
   24b30:	e843 2400 	strex	r4, r2, [r3]
   24b34:	2c00      	cmp	r4, #0
   24b36:	d1f7      	bne.n	24b28 <atomic_or+0x8>
   24b38:	f3bf 8f5b 	dmb	ish
   24b3c:	bd10      	pop	{r4, pc}

00024b3e <z_log_msg_static_create.constprop.0>:
   24b3e:	2300      	movs	r3, #0
   24b40:	f7ee b866 	b.w	12c10 <z_impl_z_log_msg_static_create>

00024b44 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24b44:	f3bf 8f5b 	dmb	ish
   24b48:	e850 3f00 	ldrex	r3, [r0]
   24b4c:	400b      	ands	r3, r1
   24b4e:	e840 3200 	strex	r2, r3, [r0]
   24b52:	2a00      	cmp	r2, #0
   24b54:	d1f8      	bne.n	24b48 <atomic_and.isra.0+0x4>
   24b56:	f3bf 8f5b 	dmb	ish
}
   24b5a:	4770      	bx	lr

00024b5c <sys_put_le64>:
	dst[1] = val >> 8;
   24b5c:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   24b60:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   24b62:	0e00      	lsrs	r0, r0, #24
   24b64:	7053      	strb	r3, [r2, #1]
   24b66:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   24b68:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   24b6a:	f3c1 2007 	ubfx	r0, r1, #8, #8
   24b6e:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   24b70:	7093      	strb	r3, [r2, #2]
   24b72:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   24b74:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   24b76:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   24b78:	71d1      	strb	r1, [r2, #7]
}
   24b7a:	4770      	bx	lr

00024b7c <bt_hci_disconnect>:
{
   24b7c:	b570      	push	{r4, r5, r6, lr}
   24b7e:	4606      	mov	r6, r0
   24b80:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   24b82:	f240 4006 	movw	r0, #1030	; 0x406
   24b86:	2103      	movs	r1, #3
   24b88:	f7f0 fa6a 	bl	15060 <bt_hci_cmd_create>
	if (!buf) {
   24b8c:	4604      	mov	r4, r0
   24b8e:	b168      	cbz	r0, 24bac <bt_hci_disconnect+0x30>
   24b90:	2103      	movs	r1, #3
   24b92:	300c      	adds	r0, #12
   24b94:	f002 f818 	bl	26bc8 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   24b98:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   24b9a:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   24b9c:	4621      	mov	r1, r4
   24b9e:	2200      	movs	r2, #0
}
   24ba0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   24ba4:	f240 4006 	movw	r0, #1030	; 0x406
   24ba8:	f7f0 ba94 	b.w	150d4 <bt_hci_cmd_send_sync>
}
   24bac:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24bb0:	bd70      	pop	{r4, r5, r6, pc}

00024bb2 <bt_le_set_data_len>:
{
   24bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24bb4:	4607      	mov	r7, r0
   24bb6:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   24bb8:	f242 0022 	movw	r0, #8226	; 0x2022
   24bbc:	2106      	movs	r1, #6
{
   24bbe:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   24bc0:	f7f0 fa4e 	bl	15060 <bt_hci_cmd_create>
	if (!buf) {
   24bc4:	4604      	mov	r4, r0
   24bc6:	b178      	cbz	r0, 24be8 <bt_le_set_data_len+0x36>
   24bc8:	2106      	movs	r1, #6
   24bca:	300c      	adds	r0, #12
   24bcc:	f001 fffc 	bl	26bc8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   24bd0:	883b      	ldrh	r3, [r7, #0]
   24bd2:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   24bd4:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   24bd6:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   24bd8:	4621      	mov	r1, r4
   24bda:	2200      	movs	r2, #0
}
   24bdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   24be0:	f242 0022 	movw	r0, #8226	; 0x2022
   24be4:	f7f0 ba76 	b.w	150d4 <bt_hci_cmd_send_sync>
}
   24be8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024bee <bt_le_set_phy>:
{
   24bee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24bf2:	4681      	mov	r9, r0
   24bf4:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   24bf6:	f242 0032 	movw	r0, #8242	; 0x2032
   24bfa:	2107      	movs	r1, #7
{
   24bfc:	f89d a020 	ldrb.w	sl, [sp, #32]
   24c00:	4617      	mov	r7, r2
   24c02:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   24c04:	f7f0 fa2c 	bl	15060 <bt_hci_cmd_create>
	if (!buf) {
   24c08:	4605      	mov	r5, r0
   24c0a:	b1a0      	cbz	r0, 24c36 <bt_le_set_phy+0x48>
   24c0c:	2107      	movs	r1, #7
   24c0e:	300c      	adds	r0, #12
   24c10:	f001 ffda 	bl	26bc8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   24c14:	f8b9 3000 	ldrh.w	r3, [r9]
   24c18:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   24c1a:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   24c1e:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   24c20:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   24c22:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   24c26:	4629      	mov	r1, r5
   24c28:	2200      	movs	r2, #0
}
   24c2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   24c2e:	f242 0032 	movw	r0, #8242	; 0x2032
   24c32:	f7f0 ba4f 	b.w	150d4 <bt_hci_cmd_send_sync>
}
   24c36:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00024c3e <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   24c3e:	68c0      	ldr	r0, [r0, #12]
   24c40:	f7f0 bb1c 	b.w	1527c <bt_hci_le_enh_conn_complete>

00024c44 <bt_le_conn_params_valid>:
{
   24c44:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   24c46:	8803      	ldrh	r3, [r0, #0]
   24c48:	8842      	ldrh	r2, [r0, #2]
   24c4a:	4293      	cmp	r3, r2
   24c4c:	d819      	bhi.n	24c82 <bt_le_conn_params_valid+0x3e>
   24c4e:	2b05      	cmp	r3, #5
   24c50:	d917      	bls.n	24c82 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   24c52:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   24c56:	d814      	bhi.n	24c82 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   24c58:	8883      	ldrh	r3, [r0, #4]
   24c5a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   24c5e:	d210      	bcs.n	24c82 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   24c60:	88c0      	ldrh	r0, [r0, #6]
   24c62:	f1a0 010a 	sub.w	r1, r0, #10
   24c66:	b289      	uxth	r1, r1
   24c68:	f640 4476 	movw	r4, #3190	; 0xc76
   24c6c:	42a1      	cmp	r1, r4
   24c6e:	d808      	bhi.n	24c82 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   24c70:	3301      	adds	r3, #1
   24c72:	b29b      	uxth	r3, r3
   24c74:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   24c76:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   24c7a:	bf34      	ite	cc
   24c7c:	2001      	movcc	r0, #1
   24c7e:	2000      	movcs	r0, #0
}
   24c80:	bd10      	pop	{r4, pc}
		return false;
   24c82:	2000      	movs	r0, #0
   24c84:	e7fc      	b.n	24c80 <bt_le_conn_params_valid+0x3c>

00024c86 <le_conn_param_neg_reply>:
{
   24c86:	b570      	push	{r4, r5, r6, lr}
   24c88:	4606      	mov	r6, r0
   24c8a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   24c8c:	f242 0021 	movw	r0, #8225	; 0x2021
   24c90:	2103      	movs	r1, #3
   24c92:	f7f0 f9e5 	bl	15060 <bt_hci_cmd_create>
	if (!buf) {
   24c96:	4604      	mov	r4, r0
   24c98:	b918      	cbnz	r0, 24ca2 <le_conn_param_neg_reply+0x1c>
}
   24c9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   24c9e:	f7ef bdd3 	b.w	14848 <le_conn_param_neg_reply.part.0>
   24ca2:	2103      	movs	r1, #3
   24ca4:	300c      	adds	r0, #12
   24ca6:	f001 ff8f 	bl	26bc8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   24caa:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   24cac:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   24cae:	4621      	mov	r1, r4
   24cb0:	f242 0021 	movw	r0, #8225	; 0x2021
}
   24cb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   24cb8:	f7f0 bd4e 	b.w	15758 <bt_hci_cmd_send>

00024cbc <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   24cbc:	2000      	movs	r0, #0
   24cbe:	4770      	bx	lr

00024cc0 <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   24cc0:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   24cc2:	f7f6 ff13 	bl	1baec <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   24cc6:	b118      	cbz	r0, 24cd0 <bt_addr_le_is_bonded+0x10>
   24cc8:	89c0      	ldrh	r0, [r0, #14]
   24cca:	3800      	subs	r0, #0
   24ccc:	bf18      	it	ne
   24cce:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   24cd0:	bd08      	pop	{r3, pc}

00024cd2 <bt_addr_le_eq>:
{
   24cd2:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   24cd4:	2207      	movs	r2, #7
   24cd6:	f7ff fe13 	bl	24900 <memcmp>
}
   24cda:	fab0 f080 	clz	r0, r0
   24cde:	0940      	lsrs	r0, r0, #5
   24ce0:	bd08      	pop	{r3, pc}

00024ce2 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   24ce2:	2207      	movs	r2, #7
   24ce4:	f7ff be33 	b.w	2494e <memcpy>

00024ce8 <hci_id_add>:
{
   24ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24cec:	4688      	mov	r8, r1
   24cee:	4617      	mov	r7, r2
	if (id >= CONFIG_BT_ID_MAX) {
   24cf0:	4605      	mov	r5, r0
   24cf2:	bb08      	cbnz	r0, 24d38 <hci_id_add+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   24cf4:	2127      	movs	r1, #39	; 0x27
   24cf6:	f242 0027 	movw	r0, #8231	; 0x2027
   24cfa:	f7f0 f9b1 	bl	15060 <bt_hci_cmd_create>
	if (!buf) {
   24cfe:	4604      	mov	r4, r0
   24d00:	b1f0      	cbz	r0, 24d40 <hci_id_add+0x58>
   24d02:	2127      	movs	r1, #39	; 0x27
   24d04:	300c      	adds	r0, #12
   24d06:	f001 ff5f 	bl	26bc8 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   24d0a:	4641      	mov	r1, r8
   24d0c:	4606      	mov	r6, r0
   24d0e:	f7ff ffe8 	bl	24ce2 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   24d12:	4639      	mov	r1, r7
   24d14:	2210      	movs	r2, #16
   24d16:	1df0      	adds	r0, r6, #7
   24d18:	f7ff fe19 	bl	2494e <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   24d1c:	4629      	mov	r1, r5
   24d1e:	2210      	movs	r2, #16
   24d20:	f106 0017 	add.w	r0, r6, #23
   24d24:	f7ff fe1e 	bl	24964 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   24d28:	462a      	mov	r2, r5
   24d2a:	4621      	mov	r1, r4
   24d2c:	f242 0027 	movw	r0, #8231	; 0x2027
}
   24d30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   24d34:	f7f0 b9ce 	b.w	150d4 <bt_hci_cmd_send_sync>
		return -EINVAL;
   24d38:	f06f 0015 	mvn.w	r0, #21
}
   24d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   24d40:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24d44:	e7fa      	b.n	24d3c <hci_id_add+0x54>

00024d46 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   24d46:	7a03      	ldrb	r3, [r0, #8]
   24d48:	075b      	lsls	r3, r3, #29
{
   24d4a:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   24d4c:	d505      	bpl.n	24d5a <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   24d4e:	4601      	mov	r1, r0
   24d50:	322a      	adds	r2, #42	; 0x2a
   24d52:	f811 0b01 	ldrb.w	r0, [r1], #1
   24d56:	f7ff bfc7 	b.w	24ce8 <hci_id_add>
}
   24d5a:	4770      	bx	lr

00024d5c <z_log_msg_static_create.constprop.0>:
   24d5c:	2300      	movs	r3, #0
   24d5e:	f7ed bf57 	b.w	12c10 <z_impl_z_log_msg_static_create>

00024d62 <addr_res_enable>:
{
   24d62:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   24d64:	2101      	movs	r1, #1
{
   24d66:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   24d68:	f242 002d 	movw	r0, #8237	; 0x202d
   24d6c:	f7f0 f978 	bl	15060 <bt_hci_cmd_create>
	if (!buf) {
   24d70:	4604      	mov	r4, r0
   24d72:	b158      	cbz	r0, 24d8c <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   24d74:	4629      	mov	r1, r5
   24d76:	300c      	adds	r0, #12
   24d78:	f001 ff35 	bl	26be6 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   24d7c:	4621      	mov	r1, r4
   24d7e:	2200      	movs	r2, #0
}
   24d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   24d84:	f242 002d 	movw	r0, #8237	; 0x202d
   24d88:	f7f0 b9a4 	b.w	150d4 <bt_hci_cmd_send_sync>
}
   24d8c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24d90:	bd38      	pop	{r3, r4, r5, pc}

00024d92 <adv_unpause_enabled>:
{
   24d92:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24d94:	f100 0310 	add.w	r3, r0, #16
   24d98:	f3bf 8f5b 	dmb	ish
   24d9c:	e853 2f00 	ldrex	r2, [r3]
   24da0:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   24da4:	e843 1400 	strex	r4, r1, [r3]
   24da8:	2c00      	cmp	r4, #0
   24daa:	d1f7      	bne.n	24d9c <adv_unpause_enabled+0xa>
   24dac:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   24db0:	0413      	lsls	r3, r2, #16
   24db2:	d503      	bpl.n	24dbc <adv_unpause_enabled+0x2a>
}
   24db4:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   24db6:	2101      	movs	r1, #1
   24db8:	f000 b96e 	b.w	25098 <bt_le_adv_set_enable>
}
   24dbc:	bc10      	pop	{r4}
   24dbe:	4770      	bx	lr

00024dc0 <find_rl_conflict>:
{
   24dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conflict->found) {
   24dc4:	684f      	ldr	r7, [r1, #4]
{
   24dc6:	b086      	sub	sp, #24
   24dc8:	4605      	mov	r5, r0
   24dca:	460c      	mov	r4, r1
	if (conflict->found) {
   24dcc:	b9c7      	cbnz	r7, 24e00 <find_rl_conflict+0x40>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   24dce:	7a03      	ldrb	r3, [r0, #8]
   24dd0:	075b      	lsls	r3, r3, #29
   24dd2:	d515      	bpl.n	24e00 <find_rl_conflict+0x40>
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   24dd4:	6808      	ldr	r0, [r1, #0]
   24dd6:	1c69      	adds	r1, r5, #1
   24dd8:	3001      	adds	r0, #1
   24dda:	f7ff ff7a 	bl	24cd2 <bt_addr_le_eq>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   24dde:	f8d4 8000 	ldr.w	r8, [r4]
   24de2:	2216      	movs	r2, #22
   24de4:	4639      	mov	r1, r7
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   24de6:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   24de8:	4668      	mov	r0, sp
   24dea:	f7ff fdbb 	bl	24964 <memset>
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   24dee:	2210      	movs	r2, #16
   24df0:	4669      	mov	r1, sp
   24df2:	f108 002a 	add.w	r0, r8, #42	; 0x2a
   24df6:	f7ff fd83 	bl	24900 <memcmp>
   24dfa:	b920      	cbnz	r0, 24e06 <find_rl_conflict+0x46>
	if (addr_conflict || irk_conflict) {
   24dfc:	b106      	cbz	r6, 24e00 <find_rl_conflict+0x40>
		conflict->found = resident;
   24dfe:	6065      	str	r5, [r4, #4]
}
   24e00:	b006      	add	sp, #24
   24e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24e06:	6820      	ldr	r0, [r4, #0]
   24e08:	2210      	movs	r2, #16
   24e0a:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   24e0e:	302a      	adds	r0, #42	; 0x2a
   24e10:	f7ff fd76 	bl	24900 <memcmp>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   24e14:	2800      	cmp	r0, #0
   24e16:	d0f2      	beq.n	24dfe <find_rl_conflict+0x3e>
   24e18:	e7f0      	b.n	24dfc <find_rl_conflict+0x3c>

00024e1a <adv_pause_enabled>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24e1a:	f3bf 8f5b 	dmb	ish
   24e1e:	6903      	ldr	r3, [r0, #16]
   24e20:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   24e24:	061b      	lsls	r3, r3, #24
   24e26:	f100 0210 	add.w	r2, r0, #16
   24e2a:	d50e      	bpl.n	24e4a <adv_pause_enabled+0x30>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   24e2c:	f3bf 8f5b 	dmb	ish
   24e30:	e852 3f00 	ldrex	r3, [r2]
   24e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   24e38:	e842 3100 	strex	r1, r3, [r2]
   24e3c:	2900      	cmp	r1, #0
   24e3e:	d1f7      	bne.n	24e30 <adv_pause_enabled+0x16>
   24e40:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   24e44:	2100      	movs	r1, #0
   24e46:	f000 b927 	b.w	25098 <bt_le_adv_set_enable>
}
   24e4a:	4770      	bx	lr

00024e4c <bt_lookup_id_addr>:
{
   24e4c:	b510      	push	{r4, lr}
   24e4e:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   24e50:	b930      	cbnz	r0, 24e60 <bt_lookup_id_addr+0x14>
   24e52:	b119      	cbz	r1, 24e5c <bt_lookup_id_addr+0x10>
		keys = bt_keys_find_irk(id, addr);
   24e54:	f7f6 fe06 	bl	1ba64 <bt_keys_find_irk>
		if (keys) {
   24e58:	b100      	cbz	r0, 24e5c <bt_lookup_id_addr+0x10>
			return &keys->addr;
   24e5a:	1c44      	adds	r4, r0, #1
}
   24e5c:	4620      	mov	r0, r4
   24e5e:	bd10      	pop	{r4, pc}
		return NULL;
   24e60:	2400      	movs	r4, #0
   24e62:	e7fb      	b.n	24e5c <bt_lookup_id_addr+0x10>

00024e64 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   24e64:	b118      	cbz	r0, 24e6e <bt_id_set_adv_random_addr+0xa>
   24e66:	b111      	cbz	r1, 24e6e <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   24e68:	4608      	mov	r0, r1
   24e6a:	f7f1 b937 	b.w	160dc <set_random_address>
}
   24e6e:	f06f 0015 	mvn.w	r0, #21
   24e72:	4770      	bx	lr

00024e74 <bt_id_set_adv_private_addr>:
{
   24e74:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   24e76:	4604      	mov	r4, r0
   24e78:	b180      	cbz	r0, 24e9c <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   24e7a:	2106      	movs	r1, #6
   24e7c:	4668      	mov	r0, sp
   24e7e:	f7f9 f97d 	bl	1e17c <bt_rand>
	if (err) {
   24e82:	b948      	cbnz	r0, 24e98 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   24e84:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   24e88:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   24e8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   24e8e:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   24e90:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   24e94:	f7ff ffe6 	bl	24e64 <bt_id_set_adv_random_addr>
}
   24e98:	b002      	add	sp, #8
   24e9a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   24e9c:	f06f 0015 	mvn.w	r0, #21
   24ea0:	e7fa      	b.n	24e98 <bt_id_set_adv_private_addr+0x24>

00024ea2 <bt_id_adv_random_addr_check>:
}
   24ea2:	3800      	subs	r0, #0
   24ea4:	bf18      	it	ne
   24ea6:	2001      	movne	r0, #1
   24ea8:	4770      	bx	lr

00024eaa <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   24eaa:	7a03      	ldrb	r3, [r0, #8]
   24eac:	07d9      	lsls	r1, r3, #31
   24eae:	d504      	bpl.n	24eba <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   24eb0:	f023 0301 	bic.w	r3, r3, #1
   24eb4:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   24eb6:	f7f1 ba01 	b.w	162bc <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   24eba:	0799      	lsls	r1, r3, #30
   24ebc:	d504      	bpl.n	24ec8 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   24ebe:	f023 0302 	bic.w	r3, r3, #2
   24ec2:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   24ec4:	f7f1 ba14 	b.w	162f0 <bt_id_del>
}
   24ec8:	4770      	bx	lr

00024eca <get_adv_channel_map>:
{
   24eca:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   24ecc:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   24ed0:	bf0c      	ite	eq
   24ed2:	2007      	moveq	r0, #7
   24ed4:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   24ed6:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   24ed8:	bf48      	it	mi
   24eda:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   24ede:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   24ee0:	bf48      	it	mi
   24ee2:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   24ee6:	4770      	bx	lr

00024ee8 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24ee8:	f3bf 8f5b 	dmb	ish
   24eec:	6800      	ldr	r0, [r0, #0]
   24eee:	f3bf 8f5b 	dmb	ish
}
   24ef2:	4770      	bx	lr

00024ef4 <atomic_and>:
{
   24ef4:	b510      	push	{r4, lr}
   24ef6:	4603      	mov	r3, r0
}
   24ef8:	f3bf 8f5b 	dmb	ish
   24efc:	e853 0f00 	ldrex	r0, [r3]
   24f00:	ea00 0201 	and.w	r2, r0, r1
   24f04:	e843 2400 	strex	r4, r2, [r3]
   24f08:	2c00      	cmp	r4, #0
   24f0a:	d1f7      	bne.n	24efc <atomic_and+0x8>
   24f0c:	f3bf 8f5b 	dmb	ish
   24f10:	bd10      	pop	{r4, pc}

00024f12 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   24f12:	2301      	movs	r3, #1
{
   24f14:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   24f16:	fa03 f101 	lsl.w	r1, r3, r1
{
   24f1a:	4604      	mov	r4, r0
	if (val) {
   24f1c:	b162      	cbz	r2, 24f38 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   24f1e:	f3bf 8f5b 	dmb	ish
   24f22:	e854 3f00 	ldrex	r3, [r4]
   24f26:	430b      	orrs	r3, r1
   24f28:	e844 3200 	strex	r2, r3, [r4]
   24f2c:	2a00      	cmp	r2, #0
   24f2e:	d1f8      	bne.n	24f22 <atomic_set_bit_to+0x10>
   24f30:	f3bf 8f5b 	dmb	ish
	}
}
   24f34:	bc10      	pop	{r4}
   24f36:	4770      	bx	lr
   24f38:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   24f3a:	43c9      	mvns	r1, r1
   24f3c:	f7ff bfda 	b.w	24ef4 <atomic_and>

00024f40 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   24f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24f44:	b087      	sub	sp, #28
   24f46:	4605      	mov	r5, r0
   24f48:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   24f4c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   24f50:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   24f54:	460c      	mov	r4, r1
   24f56:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   24f58:	2100      	movs	r1, #0
   24f5a:	2210      	movs	r2, #16
   24f5c:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   24f5e:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   24f60:	f7ff fd00 	bl	24964 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   24f64:	b9ee      	cbnz	r6, 24fa2 <le_adv_update.constprop.0+0x62>
		d[0].len = ad_len;
   24f66:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   24f6a:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   24f6c:	a902      	add	r1, sp, #8
   24f6e:	f242 0008 	movw	r0, #8200	; 0x2008
   24f72:	f7f1 fb8d 	bl	16690 <hci_set_ad>
		if (err) {
   24f76:	4604      	mov	r4, r0
   24f78:	b978      	cbnz	r0, 24f9a <le_adv_update.constprop.0+0x5a>
	if (scannable) {
   24f7a:	f1ba 0f00 	cmp.w	sl, #0
   24f7e:	d13e      	bne.n	24ffe <le_adv_update.constprop.0+0xbe>
   24f80:	3510      	adds	r5, #16
   24f82:	f3bf 8f5b 	dmb	ish
   24f86:	e855 3f00 	ldrex	r3, [r5]
   24f8a:	f043 0304 	orr.w	r3, r3, #4
   24f8e:	e845 3200 	strex	r2, r3, [r5]
   24f92:	2a00      	cmp	r2, #0
   24f94:	d1f7      	bne.n	24f86 <le_adv_update.constprop.0+0x46>
   24f96:	f3bf 8f5b 	dmb	ish
}
   24f9a:	4620      	mov	r0, r4
   24f9c:	b007      	add	sp, #28
   24f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   24fa2:	f7f0 ff99 	bl	15ed8 <bt_get_name>
   24fa6:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   24fa8:	b9e4      	cbnz	r4, 24fe4 <le_adv_update.constprop.0+0xa4>
   24faa:	bb37      	cbnz	r7, 24ffa <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   24fac:	4658      	mov	r0, fp
   24fae:	f7ff fc97 	bl	248e0 <strlen>
   24fb2:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   24fb4:	2e01      	cmp	r6, #1
		d[0].data = ad;
   24fb6:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   24fba:	f88d 3000 	strb.w	r3, [sp]
   24fbe:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   24fc2:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   24fc6:	d1d0      	bne.n	24f6a <le_adv_update.constprop.0+0x2a>
			d[1].data = &data;
   24fc8:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   24fcc:	9605      	str	r6, [sp, #20]
			d_len = 2;
   24fce:	2202      	movs	r2, #2
   24fd0:	e7cc      	b.n	24f6c <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   24fd2:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   24fd6:	3a08      	subs	r2, #8
   24fd8:	2a01      	cmp	r2, #1
   24fda:	d925      	bls.n	25028 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   24fdc:	3301      	adds	r3, #1
   24fde:	4598      	cmp	r8, r3
   24fe0:	d1f7      	bne.n	24fd2 <le_adv_update.constprop.0+0x92>
   24fe2:	e7e2      	b.n	24faa <le_adv_update.constprop.0+0x6a>
   24fe4:	2300      	movs	r3, #0
   24fe6:	e7fa      	b.n	24fde <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   24fe8:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   24fec:	3a08      	subs	r2, #8
   24fee:	2a01      	cmp	r2, #1
   24ff0:	d91a      	bls.n	25028 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   24ff2:	3301      	adds	r3, #1
   24ff4:	4599      	cmp	r9, r3
   24ff6:	d1f7      	bne.n	24fe8 <le_adv_update.constprop.0+0xa8>
   24ff8:	e7d8      	b.n	24fac <le_adv_update.constprop.0+0x6c>
   24ffa:	2300      	movs	r3, #0
   24ffc:	e7fa      	b.n	24ff4 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   24ffe:	2e02      	cmp	r6, #2
   25000:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   25004:	bf08      	it	eq
   25006:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   25008:	a902      	add	r1, sp, #8
			d_len = 2;
   2500a:	bf08      	it	eq
   2500c:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2500e:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   25012:	bf08      	it	eq
   25014:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   25018:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2501c:	f7f1 fb38 	bl	16690 <hci_set_ad>
		if (err) {
   25020:	2800      	cmp	r0, #0
   25022:	d0ad      	beq.n	24f80 <le_adv_update.constprop.0+0x40>
   25024:	4604      	mov	r4, r0
   25026:	e7b8      	b.n	24f9a <le_adv_update.constprop.0+0x5a>
			return -EINVAL;
   25028:	f06f 0415 	mvn.w	r4, #21
   2502c:	e7b5      	b.n	24f9a <le_adv_update.constprop.0+0x5a>

0002502e <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   2502e:	6843      	ldr	r3, [r0, #4]
   25030:	f013 0008 	ands.w	r0, r3, #8
   25034:	d00a      	beq.n	2504c <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   25036:	035a      	lsls	r2, r3, #13
   25038:	d407      	bmi.n	2504a <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   2503a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   2503e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   25042:	bf14      	ite	ne
   25044:	2002      	movne	r0, #2
   25046:	2001      	moveq	r0, #1
   25048:	4770      	bx	lr
   2504a:	2001      	movs	r0, #1
}
   2504c:	4770      	bx	lr

0002504e <bt_le_adv_set_enable_legacy>:
{
   2504e:	b570      	push	{r4, r5, r6, lr}
   25050:	4606      	mov	r6, r0
   25052:	b086      	sub	sp, #24
   25054:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   25056:	f242 000a 	movw	r0, #8202	; 0x200a
   2505a:	2101      	movs	r1, #1
   2505c:	f7f0 f800 	bl	15060 <bt_hci_cmd_create>
	if (!buf) {
   25060:	4604      	mov	r4, r0
   25062:	b1b0      	cbz	r0, 25092 <bt_le_adv_set_enable_legacy+0x44>
   25064:	300c      	adds	r0, #12
	if (enable) {
   25066:	b195      	cbz	r5, 2508e <bt_le_adv_set_enable_legacy+0x40>
   25068:	2101      	movs	r1, #1
   2506a:	f001 fdbc 	bl	26be6 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   2506e:	f106 0210 	add.w	r2, r6, #16
   25072:	a903      	add	r1, sp, #12
   25074:	4620      	mov	r0, r4
   25076:	9500      	str	r5, [sp, #0]
   25078:	2307      	movs	r3, #7
   2507a:	f7ef ffdf 	bl	1503c <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   2507e:	2200      	movs	r2, #0
   25080:	4621      	mov	r1, r4
   25082:	f242 000a 	movw	r0, #8202	; 0x200a
   25086:	f7f0 f825 	bl	150d4 <bt_hci_cmd_send_sync>
}
   2508a:	b006      	add	sp, #24
   2508c:	bd70      	pop	{r4, r5, r6, pc}
   2508e:	4629      	mov	r1, r5
   25090:	e7eb      	b.n	2506a <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   25092:	f06f 0068 	mvn.w	r0, #104	; 0x68
   25096:	e7f8      	b.n	2508a <bt_le_adv_set_enable_legacy+0x3c>

00025098 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   25098:	f7ff bfd9 	b.w	2504e <bt_le_adv_set_enable_legacy>

0002509c <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   2509c:	3018      	adds	r0, #24
   2509e:	f002 bb5c 	b.w	2775a <k_work_cancel_delayable>

000250a2 <sys_slist_find_and_remove>:
	return list->head;
   250a2:	6803      	ldr	r3, [r0, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   250a4:	2200      	movs	r2, #0
   250a6:	b90b      	cbnz	r3, 250ac <sys_slist_find_and_remove+0xa>
   250a8:	4618      	mov	r0, r3
   250aa:	4770      	bx	lr
   250ac:	428b      	cmp	r3, r1
   250ae:	d110      	bne.n	250d2 <sys_slist_find_and_remove+0x30>
	return node->next;
   250b0:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   250b2:	b942      	cbnz	r2, 250c6 <sys_slist_find_and_remove+0x24>
   250b4:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   250b6:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   250b8:	4291      	cmp	r1, r2
   250ba:	d100      	bne.n	250be <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   250bc:	6043      	str	r3, [r0, #4]
	parent->next = child;
   250be:	2300      	movs	r3, #0
   250c0:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   250c2:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   250c4:	4770      	bx	lr
	parent->next = child;
   250c6:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   250c8:	6843      	ldr	r3, [r0, #4]
   250ca:	4299      	cmp	r1, r3
	list->tail = node;
   250cc:	bf08      	it	eq
   250ce:	6042      	streq	r2, [r0, #4]
}
   250d0:	e7f5      	b.n	250be <sys_slist_find_and_remove+0x1c>
	return node->next;
   250d2:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   250d4:	681b      	ldr	r3, [r3, #0]
   250d6:	e7e6      	b.n	250a6 <sys_slist_find_and_remove+0x4>

000250d8 <atomic_and>:
{
   250d8:	b510      	push	{r4, lr}
   250da:	4603      	mov	r3, r0
}
   250dc:	f3bf 8f5b 	dmb	ish
   250e0:	e853 0f00 	ldrex	r0, [r3]
   250e4:	ea00 0201 	and.w	r2, r0, r1
   250e8:	e843 2400 	strex	r4, r2, [r3]
   250ec:	2c00      	cmp	r4, #0
   250ee:	d1f7      	bne.n	250e0 <atomic_and+0x8>
   250f0:	f3bf 8f5b 	dmb	ish
   250f4:	bd10      	pop	{r4, pc}

000250f6 <z_log_msg_static_create.constprop.0>:
   250f6:	2300      	movs	r3, #0
   250f8:	f7ed bd8a 	b.w	12c10 <z_impl_z_log_msg_static_create>

000250fc <tx_complete_work>:
	tx_notify(conn);
   250fc:	3828      	subs	r0, #40	; 0x28
   250fe:	f7f1 bf8d 	b.w	1701c <tx_notify>

00025102 <bt_conn_reset_rx_state>:
{
   25102:	b510      	push	{r4, lr}
   25104:	4604      	mov	r4, r0
	if (!conn->rx) {
   25106:	6900      	ldr	r0, [r0, #16]
   25108:	b118      	cbz	r0, 25112 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2510a:	f7f6 fe5d 	bl	1bdc8 <net_buf_unref>
	conn->rx = NULL;
   2510e:	2300      	movs	r3, #0
   25110:	6123      	str	r3, [r4, #16]
}
   25112:	bd10      	pop	{r4, pc}

00025114 <conn_cleanup>:
{
   25114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25118:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   2511a:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   2511c:	f104 0638 	add.w	r6, r4, #56	; 0x38
   25120:	2300      	movs	r3, #0
   25122:	2200      	movs	r2, #0
   25124:	4630      	mov	r0, r6
   25126:	f001 fcf4 	bl	26b12 <net_buf_get>
   2512a:	4603      	mov	r3, r0
   2512c:	b950      	cbnz	r0, 25144 <conn_cleanup+0x30>
	bt_conn_reset_rx_state(conn);
   2512e:	4620      	mov	r0, r4
   25130:	f7ff ffe7 	bl	25102 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   25134:	f104 0058 	add.w	r0, r4, #88	; 0x58
   25138:	2200      	movs	r2, #0
}
   2513a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2513e:	2300      	movs	r3, #0
   25140:	f7fa bd1c 	b.w	1fb7c <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   25144:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   25146:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   25148:	f7f6 fe3e 	bl	1bdc8 <net_buf_unref>
		if (tx) {
   2514c:	2d00      	cmp	r5, #0
   2514e:	d0e7      	beq.n	25120 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   25150:	4629      	mov	r1, r5
   25152:	4620      	mov	r0, r4
   25154:	f7f1 ff92 	bl	1707c <conn_tx_destroy>
   25158:	e7e0      	b.n	2511c <conn_cleanup+0x8>

0002515a <bt_conn_ref>:
{
   2515a:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2515c:	f3bf 8f5b 	dmb	ish
   25160:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   25164:	f3bf 8f5b 	dmb	ish
		old = atomic_get(&conn->ref);
   25168:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
		if (!old) {
   2516c:	b17b      	cbz	r3, 2518e <bt_conn_ref+0x34>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2516e:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   25172:	1c59      	adds	r1, r3, #1
   25174:	e852 4f00 	ldrex	r4, [r2]
   25178:	429c      	cmp	r4, r3
   2517a:	d104      	bne.n	25186 <bt_conn_ref+0x2c>
   2517c:	e842 1c00 	strex	ip, r1, [r2]
   25180:	f1bc 0f00 	cmp.w	ip, #0
   25184:	d1f6      	bne.n	25174 <bt_conn_ref+0x1a>
   25186:	f3bf 8f5b 	dmb	ish
   2518a:	d1e7      	bne.n	2515c <bt_conn_ref+0x2>
}
   2518c:	bd10      	pop	{r4, pc}
			return NULL;
   2518e:	4618      	mov	r0, r3
   25190:	e7fc      	b.n	2518c <bt_conn_ref+0x32>

00025192 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   25192:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   25196:	f3bf 8f5b 	dmb	ish
   2519a:	e853 1f00 	ldrex	r1, [r3]
   2519e:	3901      	subs	r1, #1
   251a0:	e843 1200 	strex	r2, r1, [r3]
   251a4:	2a00      	cmp	r2, #0
   251a6:	d1f8      	bne.n	2519a <bt_conn_unref+0x8>
   251a8:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   251ac:	8842      	ldrh	r2, [r0, #2]
   251ae:	f240 1301 	movw	r3, #257	; 0x101
   251b2:	429a      	cmp	r2, r3
   251b4:	d108      	bne.n	251c8 <bt_conn_unref+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   251b6:	f3bf 8f5b 	dmb	ish
   251ba:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   251be:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   251c2:	b90b      	cbnz	r3, 251c8 <bt_conn_unref+0x36>
		bt_le_adv_resume();
   251c4:	f7f1 bd20 	b.w	16c08 <bt_le_adv_resume>
}
   251c8:	4770      	bx	lr

000251ca <conn_lookup_handle>:
{
   251ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   251ce:	4607      	mov	r7, r0
   251d0:	460e      	mov	r6, r1
   251d2:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   251d4:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   251d6:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   251da:	42b4      	cmp	r4, r6
   251dc:	d103      	bne.n	251e6 <conn_lookup_handle+0x1c>
	return NULL;
   251de:	2300      	movs	r3, #0
}
   251e0:	4618      	mov	r0, r3
   251e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   251e6:	fb09 7004 	mla	r0, r9, r4, r7
   251ea:	f7ff ffb6 	bl	2515a <bt_conn_ref>
   251ee:	4603      	mov	r3, r0
		if (!conn) {
   251f0:	b158      	cbz	r0, 2520a <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   251f2:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   251f4:	2d01      	cmp	r5, #1
   251f6:	d002      	beq.n	251fe <conn_lookup_handle+0x34>
   251f8:	3d07      	subs	r5, #7
   251fa:	2d01      	cmp	r5, #1
   251fc:	d803      	bhi.n	25206 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   251fe:	881a      	ldrh	r2, [r3, #0]
   25200:	4542      	cmp	r2, r8
   25202:	d0ed      	beq.n	251e0 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   25204:	4618      	mov	r0, r3
   25206:	f7ff ffc4 	bl	25192 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2520a:	3401      	adds	r4, #1
   2520c:	e7e5      	b.n	251da <conn_lookup_handle+0x10>

0002520e <bt_conn_connected>:
{
   2520e:	b510      	push	{r4, lr}
   25210:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   25212:	f7f2 fe01 	bl	17e18 <bt_l2cap_connected>
	notify_connected(conn);
   25216:	4620      	mov	r0, r4
}
   25218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2521c:	f7f1 becc 	b.w	16fb8 <notify_connected>

00025220 <bt_conn_disconnect>:
{
   25220:	b510      	push	{r4, lr}
	switch (conn->state) {
   25222:	7b43      	ldrb	r3, [r0, #13]
   25224:	3b02      	subs	r3, #2
{
   25226:	4604      	mov	r4, r0
	switch (conn->state) {
   25228:	2b06      	cmp	r3, #6
   2522a:	d816      	bhi.n	2525a <bt_conn_disconnect+0x3a>
   2522c:	e8df f003 	tbb	[pc, r3]
   25230:	15151504 	.word	0x15151504
   25234:	0b09      	.short	0x0b09
   25236:	09          	.byte	0x09
   25237:	00          	.byte	0x00
		conn->err = reason;
   25238:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2523a:	2100      	movs	r1, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   2523c:	4620      	mov	r0, r4
   2523e:	f7f2 f99b 	bl	17578 <bt_conn_set_state>
{
   25242:	2000      	movs	r0, #0
}
   25244:	bd10      	pop	{r4, pc}
	err = bt_hci_disconnect(conn->handle, reason);
   25246:	8800      	ldrh	r0, [r0, #0]
   25248:	f7ff fc98 	bl	24b7c <bt_hci_disconnect>
	if (err) {
   2524c:	2800      	cmp	r0, #0
   2524e:	d1f9      	bne.n	25244 <bt_conn_disconnect+0x24>
	if (conn->state == BT_CONN_CONNECTED) {
   25250:	7b63      	ldrb	r3, [r4, #13]
   25252:	2b07      	cmp	r3, #7
   25254:	d1f5      	bne.n	25242 <bt_conn_disconnect+0x22>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   25256:	2108      	movs	r1, #8
   25258:	e7f0      	b.n	2523c <bt_conn_disconnect+0x1c>
		return -ENOTCONN;
   2525a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2525e:	e7f1      	b.n	25244 <bt_conn_disconnect+0x24>

00025260 <bt_conn_ltk_present>:
{
   25260:	b510      	push	{r4, lr}
   25262:	4604      	mov	r4, r0
	const struct bt_keys *keys = conn->le.keys;
   25264:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
	if (!keys) {
   25268:	b928      	cbnz	r0, 25276 <bt_conn_ltk_present+0x16>
		keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   2526a:	7a20      	ldrb	r0, [r4, #8]
   2526c:	f104 0188 	add.w	r1, r4, #136	; 0x88
   25270:	f7f6 fc3c 	bl	1baec <bt_keys_find_addr>
	if (keys) {
   25274:	b138      	cbz	r0, 25286 <bt_conn_ltk_present+0x26>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   25276:	78e2      	ldrb	r2, [r4, #3]
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_PERIPH_LTK);
   25278:	89c3      	ldrh	r3, [r0, #14]
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2527a:	b92a      	cbnz	r2, 25288 <bt_conn_ltk_present+0x28>
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_PERIPH_LTK);
   2527c:	f013 0f21 	tst.w	r3, #33	; 0x21
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK);
   25280:	bf14      	ite	ne
   25282:	2001      	movne	r0, #1
   25284:	2000      	moveq	r0, #0
}
   25286:	bd10      	pop	{r4, pc}
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK);
   25288:	f013 0f24 	tst.w	r3, #36	; 0x24
   2528c:	e7f8      	b.n	25280 <bt_conn_ltk_present+0x20>

0002528e <bt_conn_set_security>:
{
   2528e:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   25290:	7b43      	ldrb	r3, [r0, #13]
   25292:	2b07      	cmp	r3, #7
{
   25294:	4604      	mov	r4, r0
   25296:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   25298:	d126      	bne.n	252e8 <bt_conn_set_security+0x5a>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   2529a:	7a43      	ldrb	r3, [r0, #9]
   2529c:	428b      	cmp	r3, r1
   2529e:	d219      	bcs.n	252d4 <bt_conn_set_security+0x46>
   252a0:	7a83      	ldrb	r3, [r0, #10]
   252a2:	428b      	cmp	r3, r1
   252a4:	d216      	bcs.n	252d4 <bt_conn_set_security+0x46>
	if (val) {
   252a6:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   252a8:	f100 0004 	add.w	r0, r0, #4
   252ac:	d514      	bpl.n	252d8 <bt_conn_set_security+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   252ae:	f3bf 8f5b 	dmb	ish
   252b2:	e850 3f00 	ldrex	r3, [r0]
   252b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   252ba:	e840 3200 	strex	r2, r3, [r0]
   252be:	2a00      	cmp	r2, #0
   252c0:	d1f7      	bne.n	252b2 <bt_conn_set_security+0x24>
   252c2:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   252c6:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   252ca:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   252cc:	4620      	mov	r0, r4
   252ce:	f7f5 fda7 	bl	1ae20 <bt_smp_start_security>
	if (err) {
   252d2:	b930      	cbnz	r0, 252e2 <bt_conn_set_security+0x54>
		return -ENOTCONN;
   252d4:	2000      	movs	r0, #0
}
   252d6:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   252d8:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   252dc:	f7ff fefc 	bl	250d8 <atomic_and>
   252e0:	e7f1      	b.n	252c6 <bt_conn_set_security+0x38>
		conn->required_sec_level = conn->sec_level;
   252e2:	7a63      	ldrb	r3, [r4, #9]
   252e4:	72a3      	strb	r3, [r4, #10]
   252e6:	e7f6      	b.n	252d6 <bt_conn_set_security+0x48>
		return -ENOTCONN;
   252e8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   252ec:	e7f3      	b.n	252d6 <bt_conn_set_security+0x48>

000252ee <bt_conn_get_security>:
}
   252ee:	7a40      	ldrb	r0, [r0, #9]
   252f0:	4770      	bx	lr

000252f2 <bt_conn_is_peer_addr_le>:
{
   252f2:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   252f4:	7a03      	ldrb	r3, [r0, #8]
   252f6:	428b      	cmp	r3, r1
{
   252f8:	4604      	mov	r4, r0
   252fa:	4615      	mov	r5, r2
	if (id != conn->id) {
   252fc:	d115      	bne.n	2532a <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   252fe:	f100 0188 	add.w	r1, r0, #136	; 0x88
   25302:	2207      	movs	r2, #7
   25304:	4628      	mov	r0, r5
   25306:	f7ff fafb 	bl	24900 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   2530a:	b180      	cbz	r0, 2532e <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2530c:	78e3      	ldrb	r3, [r4, #3]
   2530e:	2207      	movs	r2, #7
   25310:	b943      	cbnz	r3, 25324 <bt_conn_is_peer_addr_le+0x32>
   25312:	f104 0196 	add.w	r1, r4, #150	; 0x96
   25316:	4628      	mov	r0, r5
   25318:	f7ff faf2 	bl	24900 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   2531c:	fab0 f080 	clz	r0, r0
   25320:	0940      	lsrs	r0, r0, #5
}
   25322:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   25324:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   25328:	e7f5      	b.n	25316 <bt_conn_is_peer_addr_le+0x24>
		return false;
   2532a:	2000      	movs	r0, #0
   2532c:	e7f9      	b.n	25322 <bt_conn_is_peer_addr_le+0x30>
		return true;
   2532e:	2001      	movs	r0, #1
   25330:	e7f7      	b.n	25322 <bt_conn_is_peer_addr_le+0x30>

00025332 <bt_conn_get_dst>:
}
   25332:	3088      	adds	r0, #136	; 0x88
   25334:	4770      	bx	lr

00025336 <bt_conn_le_conn_update>:
{
   25336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25338:	4607      	mov	r7, r0
   2533a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2533c:	f242 0013 	movw	r0, #8211	; 0x2013
   25340:	210e      	movs	r1, #14
   25342:	f7ef fe8d 	bl	15060 <bt_hci_cmd_create>
	if (!buf) {
   25346:	4606      	mov	r6, r0
   25348:	b1d0      	cbz	r0, 25380 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   2534a:	210e      	movs	r1, #14
   2534c:	300c      	adds	r0, #12
   2534e:	f001 fc3b 	bl	26bc8 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   25352:	220e      	movs	r2, #14
   25354:	4604      	mov	r4, r0
   25356:	2100      	movs	r1, #0
   25358:	f7ff fb04 	bl	24964 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2535c:	883b      	ldrh	r3, [r7, #0]
   2535e:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   25360:	882b      	ldrh	r3, [r5, #0]
   25362:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   25364:	886b      	ldrh	r3, [r5, #2]
   25366:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   25368:	88ab      	ldrh	r3, [r5, #4]
   2536a:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2536c:	88eb      	ldrh	r3, [r5, #6]
   2536e:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   25370:	4631      	mov	r1, r6
   25372:	2200      	movs	r2, #0
}
   25374:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   25378:	f242 0013 	movw	r0, #8211	; 0x2013
   2537c:	f7ef beaa 	b.w	150d4 <bt_hci_cmd_send_sync>
}
   25380:	f06f 0068 	mvn.w	r0, #104	; 0x68
   25384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025386 <l2cap_connected>:
}
   25386:	4770      	bx	lr

00025388 <z_log_msg_static_create.constprop.0>:
   25388:	2300      	movs	r3, #0
   2538a:	f7ed bc41 	b.w	12c10 <z_impl_z_log_msg_static_create>

0002538e <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   2538e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25390:	4605      	mov	r5, r0
   25392:	460f      	mov	r7, r1
   25394:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   25396:	2300      	movs	r3, #0
   25398:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2539c:	2104      	movs	r1, #4
   2539e:	2000      	movs	r0, #0
   253a0:	f7f2 f9f8 	bl	17794 <bt_conn_create_pdu_timeout>
	if (!buf) {
   253a4:	4604      	mov	r4, r0
   253a6:	b920      	cbnz	r0, 253b2 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   253a8:	4628      	mov	r0, r5
}
   253aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   253ae:	f7f2 bcf7 	b.w	17da0 <l2cap_create_le_sig_pdu.part.0>
   253b2:	2104      	movs	r1, #4
   253b4:	300c      	adds	r0, #12
   253b6:	f001 fc07 	bl	26bc8 <net_buf_simple_add>
	hdr->code = code;
   253ba:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   253bc:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   253be:	8046      	strh	r6, [r0, #2]
}
   253c0:	4620      	mov	r0, r4
   253c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000253c4 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   253c4:	4770      	bx	lr

000253c6 <bt_l2cap_chan_del>:
{
   253c6:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   253c8:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   253cc:	4604      	mov	r4, r0
	if (!chan->conn) {
   253ce:	b123      	cbz	r3, 253da <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   253d0:	686b      	ldr	r3, [r5, #4]
   253d2:	b103      	cbz	r3, 253d6 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   253d4:	4798      	blx	r3
	chan->conn = NULL;
   253d6:	2300      	movs	r3, #0
   253d8:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   253da:	68e3      	ldr	r3, [r4, #12]
   253dc:	b10b      	cbz	r3, 253e2 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   253de:	4620      	mov	r0, r4
   253e0:	4798      	blx	r3
	if (ops->released) {
   253e2:	6a2b      	ldr	r3, [r5, #32]
   253e4:	b11b      	cbz	r3, 253ee <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   253e6:	4620      	mov	r0, r4
}
   253e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   253ec:	4718      	bx	r3
}
   253ee:	bd70      	pop	{r4, r5, r6, pc}

000253f0 <bt_l2cap_disconnected>:
{
   253f0:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   253f2:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   253f4:	b130      	cbz	r0, 25404 <bt_l2cap_disconnected+0x14>
	return node->next;
   253f6:	f850 4908 	ldr.w	r4, [r0], #-8
   253fa:	b104      	cbz	r4, 253fe <bt_l2cap_disconnected+0xe>
   253fc:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   253fe:	f7ff ffe2 	bl	253c6 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25402:	b904      	cbnz	r4, 25406 <bt_l2cap_disconnected+0x16>
}
   25404:	bd38      	pop	{r3, r4, r5, pc}
   25406:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25408:	b12d      	cbz	r5, 25416 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   2540a:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2540c:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   2540e:	f7ff ffda 	bl	253c6 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25412:	462c      	mov	r4, r5
   25414:	e7f7      	b.n	25406 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   25416:	4620      	mov	r0, r4
}
   25418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   2541c:	f7ff bfd3 	b.w	253c6 <bt_l2cap_chan_del>

00025420 <bt_l2cap_security_changed>:
{
   25420:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   25422:	6d03      	ldr	r3, [r0, #80]	; 0x50
   25424:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   25426:	b1bb      	cbz	r3, 25458 <bt_l2cap_security_changed+0x38>
   25428:	4618      	mov	r0, r3
	return node->next;
   2542a:	f850 4908 	ldr.w	r4, [r0], #-8
   2542e:	b104      	cbz	r4, 25432 <bt_l2cap_security_changed+0x12>
   25430:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   25432:	f853 3c04 	ldr.w	r3, [r3, #-4]
   25436:	689b      	ldr	r3, [r3, #8]
   25438:	b10b      	cbz	r3, 2543e <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   2543a:	4629      	mov	r1, r5
   2543c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2543e:	b15c      	cbz	r4, 25458 <bt_l2cap_security_changed+0x38>
   25440:	4620      	mov	r0, r4
   25442:	68a4      	ldr	r4, [r4, #8]
   25444:	6843      	ldr	r3, [r0, #4]
   25446:	b124      	cbz	r4, 25452 <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   25448:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2544a:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2544c:	2b00      	cmp	r3, #0
   2544e:	d1f4      	bne.n	2543a <bt_l2cap_security_changed+0x1a>
   25450:	e7f6      	b.n	25440 <bt_l2cap_security_changed+0x20>
   25452:	689b      	ldr	r3, [r3, #8]
   25454:	2b00      	cmp	r3, #0
   25456:	d1f0      	bne.n	2543a <bt_l2cap_security_changed+0x1a>
}
   25458:	bd38      	pop	{r3, r4, r5, pc}

0002545a <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2545a:	3104      	adds	r1, #4
   2545c:	f7f2 b99a 	b.w	17794 <bt_conn_create_pdu_timeout>

00025460 <bt_l2cap_send_cb>:
{
   25460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25464:	4614      	mov	r4, r2
   25466:	4605      	mov	r5, r0
   25468:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   2546a:	f102 000c 	add.w	r0, r2, #12
   2546e:	2104      	movs	r1, #4
   25470:	461e      	mov	r6, r3
   25472:	f8dd 8018 	ldr.w	r8, [sp, #24]
   25476:	f001 fbbe 	bl	26bf6 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2547a:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   2547c:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2547e:	3a04      	subs	r2, #4
   25480:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   25482:	4643      	mov	r3, r8
   25484:	4632      	mov	r2, r6
   25486:	4621      	mov	r1, r4
   25488:	4628      	mov	r0, r5
}
   2548a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2548e:	f7f1 bfb1 	b.w	173f4 <bt_conn_send_cb>

00025492 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   25492:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25494:	b130      	cbz	r0, 254a4 <bt_l2cap_le_lookup_tx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   25496:	8b83      	ldrh	r3, [r0, #28]
   25498:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2549a:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2549e:	d001      	beq.n	254a4 <bt_l2cap_le_lookup_tx_cid+0x12>
	return node->next;
   254a0:	6880      	ldr	r0, [r0, #8]
   254a2:	e7f7      	b.n	25494 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   254a4:	4770      	bx	lr

000254a6 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   254a6:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   254a8:	b130      	cbz	r0, 254b8 <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   254aa:	8983      	ldrh	r3, [r0, #12]
   254ac:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   254ae:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   254b2:	d001      	beq.n	254b8 <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   254b4:	6880      	ldr	r0, [r0, #8]
   254b6:	e7f7      	b.n	254a8 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   254b8:	4770      	bx	lr

000254ba <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   254ba:	4770      	bx	lr

000254bc <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   254bc:	4603      	mov	r3, r0
	return list->head;
   254be:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   254c0:	b128      	cbz	r0, 254ce <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   254c2:	6859      	ldr	r1, [r3, #4]
	return node->next;
   254c4:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   254c6:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   254c8:	4288      	cmp	r0, r1
	list->tail = node;
   254ca:	bf08      	it	eq
   254cc:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   254ce:	4770      	bx	lr

000254d0 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   254d0:	4603      	mov	r3, r0
	size_t bytes = 0;
   254d2:	2000      	movs	r0, #0

	while (buf) {
   254d4:	b903      	cbnz	r3, 254d8 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   254d6:	4770      	bx	lr
		bytes += buf->len;
   254d8:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   254da:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   254dc:	4410      	add	r0, r2
		buf = buf->frags;
   254de:	e7f9      	b.n	254d4 <net_buf_frags_len+0x4>

000254e0 <attr_read_type_cb>:
{
   254e0:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   254e2:	68d4      	ldr	r4, [r2, #12]
   254e4:	7823      	ldrb	r3, [r4, #0]
   254e6:	3102      	adds	r1, #2
   254e8:	b913      	cbnz	r3, 254f0 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   254ea:	7021      	strb	r1, [r4, #0]
	return true;
   254ec:	2001      	movs	r0, #1
}
   254ee:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   254f0:	428b      	cmp	r3, r1
   254f2:	d0fb      	beq.n	254ec <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   254f4:	8a03      	ldrh	r3, [r0, #16]
   254f6:	3b02      	subs	r3, #2
   254f8:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   254fa:	2000      	movs	r0, #0
   254fc:	6110      	str	r0, [r2, #16]
		return false;
   254fe:	e7f6      	b.n	254ee <attr_read_type_cb+0xe>

00025500 <att_prepare_write_req>:
}
   25500:	2006      	movs	r0, #6
   25502:	4770      	bx	lr

00025504 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25504:	f3bf 8f5b 	dmb	ish
   25508:	6800      	ldr	r0, [r0, #0]
   2550a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2550e:	4108      	asrs	r0, r1
}
   25510:	f000 0001 	and.w	r0, r0, #1
   25514:	4770      	bx	lr

00025516 <write_cb>:
{
   25516:	b573      	push	{r0, r1, r4, r5, r6, lr}
   25518:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2551a:	4601      	mov	r1, r0
{
   2551c:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2551e:	f44f 7295 	mov.w	r2, #298	; 0x12a
   25522:	6820      	ldr	r0, [r4, #0]
   25524:	f000 fe55 	bl	261d2 <bt_gatt_check_perm>
   25528:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2552a:	bb00      	cbnz	r0, 2556e <write_cb+0x58>
	if (!data->req) {
   2552c:	7a23      	ldrb	r3, [r4, #8]
   2552e:	b1b3      	cbz	r3, 2555e <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   25530:	f1a3 0218 	sub.w	r2, r3, #24
   25534:	4253      	negs	r3, r2
   25536:	4153      	adcs	r3, r2
   25538:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2553a:	9301      	str	r3, [sp, #4]
   2553c:	8a63      	ldrh	r3, [r4, #18]
   2553e:	9300      	str	r3, [sp, #0]
   25540:	68ae      	ldr	r6, [r5, #8]
   25542:	8a23      	ldrh	r3, [r4, #16]
   25544:	68e2      	ldr	r2, [r4, #12]
   25546:	6820      	ldr	r0, [r4, #0]
   25548:	4629      	mov	r1, r5
   2554a:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   2554c:	2800      	cmp	r0, #0
   2554e:	db08      	blt.n	25562 <write_cb+0x4c>
   25550:	8a23      	ldrh	r3, [r4, #16]
   25552:	4298      	cmp	r0, r3
   25554:	d10e      	bne.n	25574 <write_cb+0x5e>
	data->err = 0U;
   25556:	2300      	movs	r3, #0
   25558:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2555a:	2001      	movs	r0, #1
   2555c:	e008      	b.n	25570 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2555e:	2302      	movs	r3, #2
   25560:	e7eb      	b.n	2553a <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   25562:	f110 0fff 	cmn.w	r0, #255	; 0xff
   25566:	d305      	bcc.n	25574 <write_cb+0x5e>
		return -err;
   25568:	4240      	negs	r0, r0
   2556a:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   2556c:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   2556e:	2000      	movs	r0, #0
}
   25570:	b002      	add	sp, #8
   25572:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   25574:	200e      	movs	r0, #14
   25576:	e7f9      	b.n	2556c <write_cb+0x56>

00025578 <bt_gatt_foreach_attr>:
{
   25578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2557a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2557e:	2300      	movs	r3, #0
   25580:	9300      	str	r3, [sp, #0]
   25582:	461a      	mov	r2, r3
   25584:	f7f4 f87c 	bl	19680 <bt_gatt_foreach_attr_type>
}
   25588:	b005      	add	sp, #20
   2558a:	f85d fb04 	ldr.w	pc, [sp], #4

0002558e <find_info_cb>:
{
   2558e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   25590:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   25592:	6817      	ldr	r7, [r2, #0]
{
   25594:	4605      	mov	r5, r0
   25596:	460e      	mov	r6, r1
   25598:	4614      	mov	r4, r2
	if (!data->rsp) {
   2559a:	b963      	cbnz	r3, 255b6 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2559c:	6850      	ldr	r0, [r2, #4]
   2559e:	2101      	movs	r1, #1
   255a0:	300c      	adds	r0, #12
   255a2:	f001 fb11 	bl	26bc8 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   255a6:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   255a8:	682b      	ldr	r3, [r5, #0]
   255aa:	781b      	ldrb	r3, [r3, #0]
   255ac:	2b00      	cmp	r3, #0
   255ae:	bf14      	ite	ne
   255b0:	2302      	movne	r3, #2
   255b2:	2301      	moveq	r3, #1
   255b4:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   255b6:	68a3      	ldr	r3, [r4, #8]
   255b8:	781b      	ldrb	r3, [r3, #0]
   255ba:	2b01      	cmp	r3, #1
   255bc:	d003      	beq.n	255c6 <find_info_cb+0x38>
   255be:	2b02      	cmp	r3, #2
   255c0:	d019      	beq.n	255f6 <find_info_cb+0x68>
   255c2:	2000      	movs	r0, #0
   255c4:	e016      	b.n	255f4 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   255c6:	682b      	ldr	r3, [r5, #0]
   255c8:	781b      	ldrb	r3, [r3, #0]
   255ca:	2b00      	cmp	r3, #0
   255cc:	d1f9      	bne.n	255c2 <find_info_cb+0x34>
   255ce:	6860      	ldr	r0, [r4, #4]
   255d0:	2104      	movs	r1, #4
   255d2:	300c      	adds	r0, #12
   255d4:	f001 faf8 	bl	26bc8 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   255d8:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   255da:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   255dc:	682a      	ldr	r2, [r5, #0]
   255de:	68e3      	ldr	r3, [r4, #12]
   255e0:	8852      	ldrh	r2, [r2, #2]
   255e2:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   255e4:	6863      	ldr	r3, [r4, #4]
   255e6:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   255e8:	8a1b      	ldrh	r3, [r3, #16]
   255ea:	1ac0      	subs	r0, r0, r3
   255ec:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   255ee:	bf94      	ite	ls
   255f0:	2000      	movls	r0, #0
   255f2:	2001      	movhi	r0, #1
}
   255f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   255f6:	682b      	ldr	r3, [r5, #0]
   255f8:	781b      	ldrb	r3, [r3, #0]
   255fa:	2b02      	cmp	r3, #2
   255fc:	d1e1      	bne.n	255c2 <find_info_cb+0x34>
   255fe:	6860      	ldr	r0, [r4, #4]
   25600:	2112      	movs	r1, #18
   25602:	300c      	adds	r0, #12
   25604:	f001 fae0 	bl	26bc8 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   25608:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2560a:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2560c:	6829      	ldr	r1, [r5, #0]
   2560e:	68e0      	ldr	r0, [r4, #12]
   25610:	2210      	movs	r2, #16
   25612:	3101      	adds	r1, #1
   25614:	3002      	adds	r0, #2
   25616:	f7ff f99a 	bl	2494e <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   2561a:	6863      	ldr	r3, [r4, #4]
   2561c:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   2561e:	8a1b      	ldrh	r3, [r3, #16]
   25620:	1ac0      	subs	r0, r0, r3
   25622:	2812      	cmp	r0, #18
   25624:	e7e3      	b.n	255ee <find_info_cb+0x60>

00025626 <att_chan_mtu_updated>:
{
   25626:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   25628:	6805      	ldr	r5, [r0, #0]
	return list->head;
   2562a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2562c:	b352      	cbz	r2, 25684 <att_chan_mtu_updated+0x5e>
	return node->next;
   2562e:	6813      	ldr	r3, [r2, #0]
   25630:	b103      	cbz	r3, 25634 <att_chan_mtu_updated+0xe>
   25632:	3b88      	subs	r3, #136	; 0x88
   25634:	f1a2 0488 	sub.w	r4, r2, #136	; 0x88
   25638:	2200      	movs	r2, #0
   2563a:	4611      	mov	r1, r2
   2563c:	e000      	b.n	25640 <att_chan_mtu_updated+0x1a>
   2563e:	3b88      	subs	r3, #136	; 0x88
		if (chan == updated_chan) {
   25640:	4284      	cmp	r4, r0
   25642:	d007      	beq.n	25654 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   25644:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   25646:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   25648:	42b1      	cmp	r1, r6
   2564a:	bf38      	it	cc
   2564c:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2564e:	42a2      	cmp	r2, r4
   25650:	bf38      	it	cc
   25652:	4622      	movcc	r2, r4
   25654:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25656:	b12b      	cbz	r3, 25664 <att_chan_mtu_updated+0x3e>
   25658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   2565c:	2b00      	cmp	r3, #0
   2565e:	d1ee      	bne.n	2563e <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   25660:	4284      	cmp	r4, r0
   25662:	d1ef      	bne.n	25644 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   25664:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   25666:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   25668:	428b      	cmp	r3, r1
   2566a:	d801      	bhi.n	25670 <att_chan_mtu_updated+0x4a>
   2566c:	4290      	cmp	r0, r2
   2566e:	d90b      	bls.n	25688 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   25670:	4282      	cmp	r2, r0
   25672:	bf38      	it	cc
   25674:	4602      	movcc	r2, r0
   25676:	4299      	cmp	r1, r3
   25678:	6828      	ldr	r0, [r5, #0]
   2567a:	bf38      	it	cc
   2567c:	4619      	movcc	r1, r3
}
   2567e:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   25680:	f7f4 bc70 	b.w	19f64 <bt_gatt_att_max_mtu_changed>
   25684:	4611      	mov	r1, r2
   25686:	e7ed      	b.n	25664 <att_chan_mtu_updated+0x3e>
}
   25688:	bc70      	pop	{r4, r5, r6}
   2568a:	4770      	bx	lr

0002568c <attr_read_group_cb>:
	if (!data->rsp->len) {
   2568c:	68d0      	ldr	r0, [r2, #12]
   2568e:	7803      	ldrb	r3, [r0, #0]
   25690:	3104      	adds	r1, #4
   25692:	b913      	cbnz	r3, 2569a <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   25694:	7001      	strb	r1, [r0, #0]
	return true;
   25696:	2001      	movs	r0, #1
   25698:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2569a:	428b      	cmp	r3, r1
   2569c:	d0fb      	beq.n	25696 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   2569e:	6891      	ldr	r1, [r2, #8]
   256a0:	8a0b      	ldrh	r3, [r1, #16]
		data->group = NULL;
   256a2:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   256a4:	3b04      	subs	r3, #4
   256a6:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   256a8:	6110      	str	r0, [r2, #16]
}
   256aa:	4770      	bx	lr

000256ac <z_log_msg_static_create.constprop.0>:
   256ac:	2300      	movs	r3, #0
   256ae:	f7ed baaf 	b.w	12c10 <z_impl_z_log_msg_static_create>

000256b2 <chan_req_send>:
{
   256b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   256b4:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   256b6:	6888      	ldr	r0, [r1, #8]
   256b8:	f7ff ff0a 	bl	254d0 <net_buf_frags_len>
   256bc:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   256be:	4283      	cmp	r3, r0
{
   256c0:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   256c2:	d30b      	bcc.n	256dc <chan_req_send+0x2a>
	chan->req = req;
   256c4:	63a9      	str	r1, [r5, #56]	; 0x38
	buf = req->buf;
   256c6:	688f      	ldr	r7, [r1, #8]
	req->buf = NULL;
   256c8:	2600      	movs	r6, #0
   256ca:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   256cc:	4628      	mov	r0, r5
   256ce:	4639      	mov	r1, r7
   256d0:	f7f2 fdea 	bl	182a8 <chan_send>
	if (err) {
   256d4:	b108      	cbz	r0, 256da <chan_req_send+0x28>
		req->buf = buf;
   256d6:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   256d8:	63ae      	str	r6, [r5, #56]	; 0x38
}
   256da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   256dc:	f06f 0079 	mvn.w	r0, #121	; 0x79
   256e0:	e7fb      	b.n	256da <chan_req_send+0x28>

000256e2 <process_queue>:
{
   256e2:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   256e4:	2200      	movs	r2, #0
{
   256e6:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   256e8:	2300      	movs	r3, #0
   256ea:	4608      	mov	r0, r1
{
   256ec:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   256ee:	f001 fa10 	bl	26b12 <net_buf_get>
	if (buf) {
   256f2:	4605      	mov	r5, r0
   256f4:	b158      	cbz	r0, 2570e <process_queue+0x2c>
	return chan_send(chan, buf);
   256f6:	4601      	mov	r1, r0
   256f8:	4620      	mov	r0, r4
   256fa:	f7f2 fdd5 	bl	182a8 <chan_send>
		if (err) {
   256fe:	4604      	mov	r4, r0
   25700:	b118      	cbz	r0, 2570a <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   25702:	4629      	mov	r1, r5
   25704:	4630      	mov	r0, r6
   25706:	f001 ff45 	bl	27594 <k_queue_prepend>
}
   2570a:	4620      	mov	r0, r4
   2570c:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2570e:	f06f 0401 	mvn.w	r4, #1
   25712:	e7fa      	b.n	2570a <process_queue+0x28>

00025714 <bt_att_chan_send_rsp>:
{
   25714:	b538      	push	{r3, r4, r5, lr}
   25716:	4604      	mov	r4, r0
   25718:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   2571a:	f7f2 fdc5 	bl	182a8 <chan_send>
	if (err) {
   2571e:	b130      	cbz	r0, 2572e <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   25720:	4629      	mov	r1, r5
   25722:	f104 003c 	add.w	r0, r4, #60	; 0x3c
}
   25726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   2572a:	f001 ba21 	b.w	26b70 <net_buf_put>
}
   2572e:	bd38      	pop	{r3, r4, r5, pc}

00025730 <att_chan_read>:
{
   25730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25734:	4680      	mov	r8, r0
   25736:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   25738:	4610      	mov	r0, r2
{
   2573a:	4699      	mov	r9, r3
   2573c:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2573e:	f7ff fec7 	bl	254d0 <net_buf_frags_len>
   25742:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   25746:	4283      	cmp	r3, r0
{
   25748:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2574a:	d97a      	bls.n	25842 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2574c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   25750:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   25752:	4630      	mov	r0, r6
   25754:	f001 fa12 	bl	26b7c <net_buf_frag_last>
	size_t len, total = 0;
   25758:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2575c:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2575e:	4630      	mov	r0, r6
   25760:	f7ff feb6 	bl	254d0 <net_buf_frags_len>
   25764:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   25768:	f105 070c 	add.w	r7, r5, #12
   2576c:	1a24      	subs	r4, r4, r0
   2576e:	4638      	mov	r0, r7
   25770:	f001 fa65 	bl	26c3e <net_buf_simple_tailroom>
   25774:	4284      	cmp	r4, r0
   25776:	d211      	bcs.n	2579c <att_chan_read+0x6c>
   25778:	4630      	mov	r0, r6
   2577a:	f7ff fea9 	bl	254d0 <net_buf_frags_len>
   2577e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   25782:	1a24      	subs	r4, r4, r0
		if (!len) {
   25784:	bb34      	cbnz	r4, 257d4 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   25786:	7ab0      	ldrb	r0, [r6, #10]
   25788:	f7f6 fa5c 	bl	1bc44 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2578c:	2200      	movs	r2, #0
   2578e:	2300      	movs	r3, #0
   25790:	f001 f9ba 	bl	26b08 <net_buf_alloc_fixed>
			if (!frag) {
   25794:	4605      	mov	r5, r0
   25796:	b930      	cbnz	r0, 257a6 <att_chan_read+0x76>
	return total;
   25798:	4657      	mov	r7, sl
   2579a:	e02c      	b.n	257f6 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2579c:	4638      	mov	r0, r7
   2579e:	f001 fa4e 	bl	26c3e <net_buf_simple_tailroom>
   257a2:	4604      	mov	r4, r0
   257a4:	e7ee      	b.n	25784 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   257a6:	4601      	mov	r1, r0
   257a8:	4630      	mov	r0, r6
   257aa:	f001 f9f8 	bl	26b9e <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   257ae:	4630      	mov	r0, r6
   257b0:	f7ff fe8e 	bl	254d0 <net_buf_frags_len>
   257b4:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   257b8:	f105 070c 	add.w	r7, r5, #12
   257bc:	1a24      	subs	r4, r4, r0
   257be:	4638      	mov	r0, r7
   257c0:	f001 fa3d 	bl	26c3e <net_buf_simple_tailroom>
   257c4:	4284      	cmp	r4, r0
   257c6:	d21a      	bcs.n	257fe <att_chan_read+0xce>
   257c8:	4630      	mov	r0, r6
   257ca:	f7ff fe81 	bl	254d0 <net_buf_frags_len>
   257ce:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   257d2:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   257d4:	68e9      	ldr	r1, [r5, #12]
   257d6:	8a2a      	ldrh	r2, [r5, #16]
   257d8:	f8cd 9000 	str.w	r9, [sp]
   257dc:	f8db 7004 	ldr.w	r7, [fp, #4]
   257e0:	9803      	ldr	r0, [sp, #12]
   257e2:	440a      	add	r2, r1
   257e4:	b2a3      	uxth	r3, r4
   257e6:	4659      	mov	r1, fp
   257e8:	47b8      	blx	r7
		if (read < 0) {
   257ea:	1e07      	subs	r7, r0, #0
   257ec:	da0c      	bge.n	25808 <att_chan_read+0xd8>
				return total;
   257ee:	f1ba 0f00 	cmp.w	sl, #0
   257f2:	bf18      	it	ne
   257f4:	4657      	movne	r7, sl
}
   257f6:	4638      	mov	r0, r7
   257f8:	b005      	add	sp, #20
   257fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   257fe:	4638      	mov	r0, r7
   25800:	f001 fa1d 	bl	26c3e <net_buf_simple_tailroom>
   25804:	4604      	mov	r4, r0
   25806:	e7e5      	b.n	257d4 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   25808:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2580a:	b993      	cbnz	r3, 25832 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2580c:	4639      	mov	r1, r7
   2580e:	f105 000c 	add.w	r0, r5, #12
   25812:	f001 f9d9 	bl	26bc8 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   25816:	4630      	mov	r0, r6
   25818:	f7ff fe5a 	bl	254d0 <net_buf_frags_len>
   2581c:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   25820:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   25822:	4283      	cmp	r3, r0
		total += read;
   25824:	44ba      	add	sl, r7
		offset += read;
   25826:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2582a:	d9b5      	bls.n	25798 <att_chan_read+0x68>
   2582c:	42a7      	cmp	r7, r4
   2582e:	d096      	beq.n	2575e <att_chan_read+0x2e>
   25830:	e7b2      	b.n	25798 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   25832:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   25834:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25836:	4639      	mov	r1, r7
   25838:	4628      	mov	r0, r5
   2583a:	4798      	blx	r3
   2583c:	2800      	cmp	r0, #0
   2583e:	d1e5      	bne.n	2580c <att_chan_read+0xdc>
   25840:	e7aa      	b.n	25798 <att_chan_read+0x68>
		return 0;
   25842:	2700      	movs	r7, #0
   25844:	e7d7      	b.n	257f6 <att_chan_read+0xc6>

00025846 <sys_slist_find_and_remove.isra.0>:
	return list->head;
   25846:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25848:	2200      	movs	r2, #0
   2584a:	b903      	cbnz	r3, 2584e <sys_slist_find_and_remove.isra.0+0x8>
   2584c:	4770      	bx	lr
   2584e:	428b      	cmp	r3, r1
   25850:	d10f      	bne.n	25872 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   25852:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   25854:	b93a      	cbnz	r2, 25866 <sys_slist_find_and_remove.isra.0+0x20>
   25856:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   25858:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2585a:	4291      	cmp	r1, r2
   2585c:	d100      	bne.n	25860 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2585e:	6043      	str	r3, [r0, #4]
	parent->next = child;
   25860:	2300      	movs	r3, #0
   25862:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   25864:	4770      	bx	lr
	parent->next = child;
   25866:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   25868:	6843      	ldr	r3, [r0, #4]
   2586a:	4299      	cmp	r1, r3
	list->tail = node;
   2586c:	bf08      	it	eq
   2586e:	6042      	streq	r2, [r0, #4]
}
   25870:	e7f6      	b.n	25860 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   25872:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25874:	681b      	ldr	r3, [r3, #0]
   25876:	e7e8      	b.n	2584a <sys_slist_find_and_remove.isra.0+0x4>

00025878 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   25878:	2301      	movs	r3, #1
   2587a:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2587c:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2587e:	f3bf 8f5b 	dmb	ish
   25882:	e850 2f00 	ldrex	r2, [r0]
   25886:	401a      	ands	r2, r3
   25888:	e840 2100 	strex	r1, r2, [r0]
   2588c:	2900      	cmp	r1, #0
   2588e:	d1f8      	bne.n	25882 <atomic_clear_bit+0xa>
   25890:	f3bf 8f5b 	dmb	ish
}
   25894:	4770      	bx	lr

00025896 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   25896:	2006      	movs	r0, #6
   25898:	4770      	bx	lr

0002589a <atomic_test_and_set_bit>:
{
   2589a:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2589c:	2301      	movs	r3, #1
   2589e:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   258a2:	f3bf 8f5b 	dmb	ish
   258a6:	e850 3f00 	ldrex	r3, [r0]
   258aa:	ea43 0201 	orr.w	r2, r3, r1
   258ae:	e840 2400 	strex	r4, r2, [r0]
   258b2:	2c00      	cmp	r4, #0
   258b4:	d1f7      	bne.n	258a6 <atomic_test_and_set_bit+0xc>
   258b6:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   258ba:	4219      	tst	r1, r3
}
   258bc:	bf14      	ite	ne
   258be:	2001      	movne	r0, #1
   258c0:	2000      	moveq	r0, #0
   258c2:	bd10      	pop	{r4, pc}

000258c4 <read_cb>:
{
   258c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   258c6:	6816      	ldr	r6, [r2, #0]
{
   258c8:	4605      	mov	r5, r0
	data->err = 0x00;
   258ca:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   258cc:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   258ce:	7313      	strb	r3, [r2, #12]
{
   258d0:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   258d2:	4629      	mov	r1, r5
   258d4:	2295      	movs	r2, #149	; 0x95
   258d6:	f000 fc7c 	bl	261d2 <bt_gatt_check_perm>
   258da:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   258dc:	b980      	cbnz	r0, 25900 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   258de:	e9cd 0000 	strd	r0, r0, [sp]
   258e2:	4629      	mov	r1, r5
   258e4:	88a3      	ldrh	r3, [r4, #4]
   258e6:	68a2      	ldr	r2, [r4, #8]
   258e8:	4630      	mov	r0, r6
   258ea:	f7ff ff21 	bl	25730 <att_chan_read>
	if (ret < 0) {
   258ee:	2800      	cmp	r0, #0
   258f0:	da09      	bge.n	25906 <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   258f2:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   258f6:	bf26      	itte	cs
   258f8:	4240      	negcs	r0, r0
   258fa:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   258fc:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   258fe:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   25900:	2000      	movs	r0, #0
}
   25902:	b002      	add	sp, #8
   25904:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   25906:	2001      	movs	r0, #1
   25908:	e7fb      	b.n	25902 <read_cb+0x3e>

0002590a <read_vl_cb>:
{
   2590a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   2590e:	f8d2 8000 	ldr.w	r8, [r2]
{
   25912:	4606      	mov	r6, r0
	data->err = 0x00;
   25914:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   25916:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   2591a:	7313      	strb	r3, [r2, #12]
{
   2591c:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2591e:	4631      	mov	r1, r6
   25920:	2295      	movs	r2, #149	; 0x95
   25922:	f000 fc56 	bl	261d2 <bt_gatt_check_perm>
   25926:	4605      	mov	r5, r0
   25928:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2592a:	b9e0      	cbnz	r0, 25966 <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   2592c:	68a0      	ldr	r0, [r4, #8]
   2592e:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   25932:	8a02      	ldrh	r2, [r0, #16]
   25934:	1a9b      	subs	r3, r3, r2
   25936:	2b01      	cmp	r3, #1
   25938:	dd15      	ble.n	25966 <read_vl_cb+0x5c>
   2593a:	2102      	movs	r1, #2
   2593c:	300c      	adds	r0, #12
   2593e:	f001 f943 	bl	26bc8 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   25942:	e9cd 5500 	strd	r5, r5, [sp]
   25946:	4607      	mov	r7, r0
   25948:	88a3      	ldrh	r3, [r4, #4]
   2594a:	68a2      	ldr	r2, [r4, #8]
   2594c:	4631      	mov	r1, r6
   2594e:	4640      	mov	r0, r8
   25950:	f7ff feee 	bl	25730 <att_chan_read>
	if (read < 0) {
   25954:	1e03      	subs	r3, r0, #0
   25956:	da0a      	bge.n	2596e <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   25958:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2595c:	bf26      	itte	cs
   2595e:	425b      	negcs	r3, r3
   25960:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   25962:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   25964:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   25966:	2000      	movs	r0, #0
}
   25968:	b002      	add	sp, #8
   2596a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   2596e:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   25970:	2001      	movs	r0, #1
   25972:	e7f9      	b.n	25968 <read_vl_cb+0x5e>

00025974 <bt_att_sent>:
{
   25974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att = chan->att;
   25976:	f850 4c04 	ldr.w	r4, [r0, #-4]
{
   2597a:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2597c:	1f07      	subs	r7, r0, #4
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   2597e:	2104      	movs	r1, #4
   25980:	3030      	adds	r0, #48	; 0x30
   25982:	f7ff ff79 	bl	25878 <atomic_clear_bit>
	if (!att) {
   25986:	b304      	cbz	r4, 259ca <bt_att_sent+0x56>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   25988:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2598a:	b98b      	cbnz	r3, 259b0 <bt_att_sent+0x3c>
   2598c:	6863      	ldr	r3, [r4, #4]
   2598e:	b17b      	cbz	r3, 259b0 <bt_att_sent+0x3c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   25990:	1d20      	adds	r0, r4, #4
   25992:	f7ff fd93 	bl	254bc <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25996:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   25998:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2599a:	4638      	mov	r0, r7
   2599c:	f7ff fe89 	bl	256b2 <chan_req_send>
   259a0:	2800      	cmp	r0, #0
   259a2:	da12      	bge.n	259ca <bt_att_sent+0x56>
	return list->head;
   259a4:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   259a6:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   259a8:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   259aa:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   259ac:	b903      	cbnz	r3, 259b0 <bt_att_sent+0x3c>
	list->tail = node;
   259ae:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   259b0:	f105 0138 	add.w	r1, r5, #56	; 0x38
   259b4:	4638      	mov	r0, r7
   259b6:	f7ff fe94 	bl	256e2 <process_queue>
	if (!err) {
   259ba:	b130      	cbz	r0, 259ca <bt_att_sent+0x56>
	(void)process_queue(chan, &att->tx_queue);
   259bc:	f104 010c 	add.w	r1, r4, #12
   259c0:	4638      	mov	r0, r7
}
   259c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   259c6:	f7ff be8c 	b.w	256e2 <process_queue>
}
   259ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000259cc <att_req_send_process>:
{
   259cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   259d0:	6a44      	ldr	r4, [r0, #36]	; 0x24
   259d2:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   259d4:	2c00      	cmp	r4, #0
   259d6:	d03a      	beq.n	25a4e <att_req_send_process+0x82>
	return node->next;
   259d8:	f854 6988 	ldr.w	r6, [r4], #-136
   259dc:	b106      	cbz	r6, 259e0 <att_req_send_process+0x14>
   259de:	3e88      	subs	r6, #136	; 0x88
{
   259e0:	2300      	movs	r3, #0
   259e2:	461d      	mov	r5, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   259e4:	f108 0704 	add.w	r7, r8, #4
   259e8:	e013      	b.n	25a12 <att_req_send_process+0x46>
		if (!req && prev &&
   259ea:	b1bb      	cbz	r3, 25a1c <att_req_send_process+0x50>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   259ec:	2103      	movs	r1, #3
   259ee:	f104 0034 	add.w	r0, r4, #52	; 0x34
   259f2:	f7ff fd87 	bl	25504 <atomic_test_bit>
   259f6:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   259f8:	f103 0034 	add.w	r0, r3, #52	; 0x34
   259fc:	f7ff fd82 	bl	25504 <atomic_test_bit>
		if (!req && prev &&
   25a00:	4282      	cmp	r2, r0
   25a02:	d10b      	bne.n	25a1c <att_req_send_process+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25a04:	b31e      	cbz	r6, 25a4e <att_req_send_process+0x82>
   25a06:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
   25a0a:	b102      	cbz	r2, 25a0e <att_req_send_process+0x42>
   25a0c:	3a88      	subs	r2, #136	; 0x88
{
   25a0e:	4634      	mov	r4, r6
   25a10:	4616      	mov	r6, r2
		if (chan->req) {
   25a12:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   25a14:	2a00      	cmp	r2, #0
   25a16:	d1f5      	bne.n	25a04 <att_req_send_process+0x38>
		if (!req && prev &&
   25a18:	2d00      	cmp	r5, #0
   25a1a:	d0e6      	beq.n	259ea <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   25a1c:	4638      	mov	r0, r7
   25a1e:	f7ff fd4d 	bl	254bc <sys_slist_get>
	if (node) {
   25a22:	4605      	mov	r5, r0
   25a24:	b908      	cbnz	r0, 25a2a <att_req_send_process+0x5e>
   25a26:	4623      	mov	r3, r4
   25a28:	e7ec      	b.n	25a04 <att_req_send_process+0x38>
	return chan_req_send(chan, req);
   25a2a:	4601      	mov	r1, r0
   25a2c:	4620      	mov	r0, r4
   25a2e:	f7ff fe40 	bl	256b2 <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   25a32:	2800      	cmp	r0, #0
   25a34:	da0b      	bge.n	25a4e <att_req_send_process+0x82>
	return list->head;
   25a36:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   25a3a:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   25a3c:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   25a40:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   25a44:	2b00      	cmp	r3, #0
   25a46:	d1ee      	bne.n	25a26 <att_req_send_process+0x5a>
	list->tail = node;
   25a48:	f8c8 5008 	str.w	r5, [r8, #8]
}
   25a4c:	e7eb      	b.n	25a26 <att_req_send_process+0x5a>
}
   25a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025a52 <bt_att_status>:
{
   25a52:	b538      	push	{r3, r4, r5, lr}
   25a54:	4605      	mov	r5, r0
   25a56:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   25a58:	2100      	movs	r1, #0
   25a5a:	f7ff fd53 	bl	25504 <atomic_test_bit>
   25a5e:	b1b8      	cbz	r0, 25a90 <bt_att_status+0x3e>
	if (!chan->att) {
   25a60:	f855 0c04 	ldr.w	r0, [r5, #-4]
   25a64:	b1a0      	cbz	r0, 25a90 <bt_att_status+0x3e>
	if (chan->req) {
   25a66:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   25a68:	b993      	cbnz	r3, 25a90 <bt_att_status+0x3e>
	node = sys_slist_get(&chan->att->reqs);
   25a6a:	3004      	adds	r0, #4
   25a6c:	f7ff fd26 	bl	254bc <sys_slist_get>
	if (!node) {
   25a70:	4604      	mov	r4, r0
   25a72:	b168      	cbz	r0, 25a90 <bt_att_status+0x3e>
	return chan_req_send(chan, req);
   25a74:	4601      	mov	r1, r0
   25a76:	1f28      	subs	r0, r5, #4
   25a78:	f7ff fe1b 	bl	256b2 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25a7c:	2800      	cmp	r0, #0
   25a7e:	da07      	bge.n	25a90 <bt_att_status+0x3e>
	sys_slist_prepend(&chan->att->reqs, node);
   25a80:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   25a84:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   25a86:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   25a88:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   25a8a:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   25a8c:	b902      	cbnz	r2, 25a90 <bt_att_status+0x3e>
	list->tail = node;
   25a8e:	609c      	str	r4, [r3, #8]
}
   25a90:	bd38      	pop	{r3, r4, r5, pc}

00025a92 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   25a92:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   25a94:	6883      	ldr	r3, [r0, #8]
   25a96:	699b      	ldr	r3, [r3, #24]
   25a98:	b10b      	cbz	r3, 25a9e <att_sent+0xc>
		chan->ops->sent(chan);
   25a9a:	3004      	adds	r0, #4
   25a9c:	4718      	bx	r3
}
   25a9e:	4770      	bx	lr

00025aa0 <att_unknown>:
{
   25aa0:	b510      	push	{r4, lr}
   25aa2:	460c      	mov	r4, r1
	if (!err) {
   25aa4:	b90a      	cbnz	r2, 25aaa <att_unknown+0xa>
		att_sent(conn, user_data);
   25aa6:	f7ff fff4 	bl	25a92 <att_sent>
	tx_meta_data_free(user_data);
   25aaa:	4620      	mov	r0, r4
}
   25aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   25ab0:	f7f2 bb2c 	b.w	1810c <tx_meta_data_free>

00025ab4 <att_tx_complete>:
{
   25ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25ab8:	4606      	mov	r6, r0
   25aba:	460d      	mov	r5, r1
	if (!err) {
   25abc:	4614      	mov	r4, r2
   25abe:	b122      	cbz	r2, 25aca <att_tx_complete+0x16>
}
   25ac0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   25ac4:	4608      	mov	r0, r1
   25ac6:	f7f2 bb21 	b.w	1810c <tx_meta_data_free>
		att_sent(conn, user_data);
   25aca:	f7ff ffe2 	bl	25a92 <att_sent>
	bt_gatt_complete_func_t func = data->func;
   25ace:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   25ad0:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   25ad4:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   25ad8:	4628      	mov	r0, r5
   25ada:	f7f2 fb17 	bl	1810c <tx_meta_data_free>
	if (!err && func) {
   25ade:	b92f      	cbnz	r7, 25aec <att_tx_complete+0x38>
}
   25ae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   25ae4:	4649      	mov	r1, r9
   25ae6:	4630      	mov	r0, r6
   25ae8:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   25aea:	3401      	adds	r4, #1
   25aec:	b2a3      	uxth	r3, r4
   25aee:	4543      	cmp	r3, r8
   25af0:	d3f8      	bcc.n	25ae4 <att_tx_complete+0x30>
   25af2:	e7f5      	b.n	25ae0 <att_tx_complete+0x2c>

00025af4 <att_req_sent>:
{
   25af4:	b510      	push	{r4, lr}
   25af6:	460c      	mov	r4, r1
	if (!err) {
   25af8:	b90a      	cbnz	r2, 25afe <att_req_sent+0xa>
		att_sent(conn, user_data);
   25afa:	f7ff ffca 	bl	25a92 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   25afe:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   25b00:	6b83      	ldr	r3, [r0, #56]	; 0x38
   25b02:	b12b      	cbz	r3, 25b10 <att_req_sent+0x1c>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   25b04:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   25b08:	2300      	movs	r3, #0
   25b0a:	3058      	adds	r0, #88	; 0x58
   25b0c:	f7fa f836 	bl	1fb7c <k_work_reschedule>
	tx_meta_data_free(user_data);
   25b10:	4620      	mov	r0, r4
}
   25b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   25b16:	f7f2 baf9 	b.w	1810c <tx_meta_data_free>

00025b1a <att_cfm_sent>:
{
   25b1a:	b510      	push	{r4, lr}
   25b1c:	460c      	mov	r4, r1
	if (!err) {
   25b1e:	b90a      	cbnz	r2, 25b24 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   25b20:	f7ff ffb7 	bl	25a92 <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   25b24:	6820      	ldr	r0, [r4, #0]
   25b26:	2101      	movs	r1, #1
   25b28:	3034      	adds	r0, #52	; 0x34
   25b2a:	f7ff fea5 	bl	25878 <atomic_clear_bit>
	tx_meta_data_free(data);
   25b2e:	4620      	mov	r0, r4
}
   25b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   25b34:	f7f2 baea 	b.w	1810c <tx_meta_data_free>

00025b38 <att_rsp_sent>:
{
   25b38:	b510      	push	{r4, lr}
   25b3a:	460c      	mov	r4, r1
	if (!err) {
   25b3c:	b90a      	cbnz	r2, 25b42 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   25b3e:	f7ff ffa8 	bl	25a92 <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   25b42:	6820      	ldr	r0, [r4, #0]
   25b44:	2100      	movs	r1, #0
   25b46:	3034      	adds	r0, #52	; 0x34
   25b48:	f7ff fe96 	bl	25878 <atomic_clear_bit>
	tx_meta_data_free(data);
   25b4c:	4620      	mov	r0, r4
}
   25b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   25b52:	f7f2 badb 	b.w	1810c <tx_meta_data_free>

00025b56 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   25b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25b5a:	4688      	mov	r8, r1
   25b5c:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   25b5e:	2101      	movs	r1, #1
   25b60:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   25b62:	4605      	mov	r5, r0
   25b64:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   25b66:	f7f2 fd9d 	bl	186a4 <bt_att_chan_create_pdu>
	if (!buf) {
   25b6a:	4604      	mov	r4, r0
   25b6c:	b170      	cbz	r0, 25b8c <send_err_rsp.part.0+0x36>
   25b6e:	2104      	movs	r1, #4
   25b70:	300c      	adds	r0, #12
   25b72:	f001 f829 	bl	26bc8 <net_buf_simple_add>
	rsp->request = req;
   25b76:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   25b7a:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   25b7e:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   25b80:	4621      	mov	r1, r4
   25b82:	4628      	mov	r0, r5
}
   25b84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   25b88:	f7ff bdc4 	b.w	25714 <bt_att_chan_send_rsp>
}
   25b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025b90 <att_write_req>:
{
   25b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25b92:	460c      	mov	r4, r1
   25b94:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   25b96:	f101 000c 	add.w	r0, r1, #12
   25b9a:	f001 f844 	bl	26c26 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   25b9e:	8a22      	ldrh	r2, [r4, #16]
   25ba0:	9201      	str	r2, [sp, #4]
   25ba2:	68e2      	ldr	r2, [r4, #12]
   25ba4:	9200      	str	r2, [sp, #0]
   25ba6:	4603      	mov	r3, r0
   25ba8:	2213      	movs	r2, #19
   25baa:	2112      	movs	r1, #18
   25bac:	4628      	mov	r0, r5
   25bae:	f7f2 fe9d 	bl	188ec <att_write_rsp.constprop.0>
}
   25bb2:	b003      	add	sp, #12
   25bb4:	bd30      	pop	{r4, r5, pc}

00025bb6 <att_write_cmd>:
{
   25bb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25bb8:	460c      	mov	r4, r1
   25bba:	4605      	mov	r5, r0
   25bbc:	f101 000c 	add.w	r0, r1, #12
   25bc0:	f001 f831 	bl	26c26 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   25bc4:	8a22      	ldrh	r2, [r4, #16]
   25bc6:	9201      	str	r2, [sp, #4]
   25bc8:	68e2      	ldr	r2, [r4, #12]
   25bca:	9200      	str	r2, [sp, #0]
   25bcc:	2200      	movs	r2, #0
   25bce:	4603      	mov	r3, r0
   25bd0:	4611      	mov	r1, r2
   25bd2:	4628      	mov	r0, r5
   25bd4:	f7f2 fe8a 	bl	188ec <att_write_rsp.constprop.0>
}
   25bd8:	b003      	add	sp, #12
   25bda:	bd30      	pop	{r4, r5, pc}

00025bdc <att_read_blob_req>:
{
   25bdc:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   25bde:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   25be0:	8813      	ldrh	r3, [r2, #0]
   25be2:	8852      	ldrh	r2, [r2, #2]
   25be4:	9200      	str	r2, [sp, #0]
   25be6:	210c      	movs	r1, #12
   25be8:	220d      	movs	r2, #13
   25bea:	f7f3 f845 	bl	18c78 <att_read_rsp>
}
   25bee:	b003      	add	sp, #12
   25bf0:	f85d fb04 	ldr.w	pc, [sp], #4

00025bf4 <att_read_req>:
{
   25bf4:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   25bf6:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   25bf8:	2200      	movs	r2, #0
   25bfa:	881b      	ldrh	r3, [r3, #0]
   25bfc:	9200      	str	r2, [sp, #0]
   25bfe:	210a      	movs	r1, #10
   25c00:	220b      	movs	r2, #11
   25c02:	f7f3 f839 	bl	18c78 <att_read_rsp>
}
   25c06:	b003      	add	sp, #12
   25c08:	f85d fb04 	ldr.w	pc, [sp], #4

00025c0c <att_mtu_req>:
{
   25c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25c0e:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   25c10:	f850 2b34 	ldr.w	r2, [r0], #52
{
   25c14:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   25c16:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   25c18:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   25c1a:	f7ff fc73 	bl	25504 <atomic_test_bit>
   25c1e:	4604      	mov	r4, r0
   25c20:	b9f0      	cbnz	r0, 25c60 <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   25c22:	68db      	ldr	r3, [r3, #12]
   25c24:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   25c26:	2e16      	cmp	r6, #22
   25c28:	d91c      	bls.n	25c64 <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   25c2a:	4638      	mov	r0, r7
   25c2c:	2202      	movs	r2, #2
   25c2e:	f7f2 fec1 	bl	189b4 <bt_att_create_pdu>
	if (!pdu) {
   25c32:	4607      	mov	r7, r0
   25c34:	b1c0      	cbz	r0, 25c68 <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   25c36:	2102      	movs	r1, #2
   25c38:	300c      	adds	r0, #12
   25c3a:	f000 ffc5 	bl	26bc8 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   25c3e:	2341      	movs	r3, #65	; 0x41
   25c40:	7003      	strb	r3, [r0, #0]
   25c42:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   25c44:	4639      	mov	r1, r7
   25c46:	4628      	mov	r0, r5
   25c48:	f7ff fd64 	bl	25714 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   25c4c:	2e41      	cmp	r6, #65	; 0x41
   25c4e:	bf28      	it	cs
   25c50:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   25c52:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   25c54:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   25c56:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   25c58:	f7ff fce5 	bl	25626 <att_chan_mtu_updated>
	return 0;
   25c5c:	4620      	mov	r0, r4
}
   25c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   25c60:	2006      	movs	r0, #6
   25c62:	e7fc      	b.n	25c5e <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   25c64:	2004      	movs	r0, #4
   25c66:	e7fa      	b.n	25c5e <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   25c68:	200e      	movs	r0, #14
   25c6a:	e7f8      	b.n	25c5e <att_mtu_req+0x52>

00025c6c <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   25c6c:	8a0a      	ldrh	r2, [r1, #16]
   25c6e:	68c9      	ldr	r1, [r1, #12]
   25c70:	2300      	movs	r3, #0
   25c72:	f7f3 b9ad 	b.w	18fd0 <att_handle_rsp>

00025c76 <bt_att_encrypt_change>:
{
   25c76:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   25c78:	4606      	mov	r6, r0
	if (!att_chan->att) {
   25c7a:	f850 3c04 	ldr.w	r3, [r0, #-4]
	struct bt_conn *conn = le_chan->chan.conn;
   25c7e:	f856 5904 	ldr.w	r5, [r6], #-4
{
   25c82:	4604      	mov	r4, r0
	if (!att_chan->att) {
   25c84:	2b00      	cmp	r3, #0
   25c86:	d036      	beq.n	25cf6 <bt_att_encrypt_change+0x80>
	if (hci_status) {
   25c88:	b139      	cbz	r1, 25c9a <bt_att_encrypt_change+0x24>
		if (att_chan->req && att_chan->req->retrying) {
   25c8a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   25c8c:	2b00      	cmp	r3, #0
   25c8e:	d032      	beq.n	25cf6 <bt_att_encrypt_change+0x80>
   25c90:	7c1b      	ldrb	r3, [r3, #16]
   25c92:	07da      	lsls	r2, r3, #31
   25c94:	d52f      	bpl.n	25cf6 <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   25c96:	2305      	movs	r3, #5
   25c98:	e020      	b.n	25cdc <bt_att_encrypt_change+0x66>
	bt_gatt_encrypt_change(conn);
   25c9a:	4628      	mov	r0, r5
   25c9c:	f7f4 f976 	bl	19f8c <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   25ca0:	7a6b      	ldrb	r3, [r5, #9]
   25ca2:	2b01      	cmp	r3, #1
   25ca4:	d027      	beq.n	25cf6 <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   25ca6:	6b65      	ldr	r5, [r4, #52]	; 0x34
   25ca8:	b32d      	cbz	r5, 25cf6 <bt_att_encrypt_change+0x80>
   25caa:	7c2b      	ldrb	r3, [r5, #16]
   25cac:	07db      	lsls	r3, r3, #31
   25cae:	d522      	bpl.n	25cf6 <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   25cb0:	68eb      	ldr	r3, [r5, #12]
   25cb2:	2b00      	cmp	r3, #0
   25cb4:	d0ef      	beq.n	25c96 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   25cb6:	696a      	ldr	r2, [r5, #20]
   25cb8:	7c69      	ldrb	r1, [r5, #17]
   25cba:	4630      	mov	r0, r6
   25cbc:	f7f2 fcf2 	bl	186a4 <bt_att_chan_create_pdu>
	if (!buf) {
   25cc0:	4604      	mov	r4, r0
   25cc2:	b150      	cbz	r0, 25cda <bt_att_encrypt_change+0x64>
	if (req->encode(buf, req->len, req->user_data)) {
   25cc4:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   25cc8:	68eb      	ldr	r3, [r5, #12]
   25cca:	4798      	blx	r3
   25ccc:	b168      	cbz	r0, 25cea <bt_att_encrypt_change+0x74>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   25cce:	69a0      	ldr	r0, [r4, #24]
   25cd0:	f7f2 fa1c 	bl	1810c <tx_meta_data_free>
		net_buf_unref(buf);
   25cd4:	4620      	mov	r0, r4
   25cd6:	f7f6 f877 	bl	1bdc8 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   25cda:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   25cdc:	2200      	movs	r2, #0
   25cde:	4630      	mov	r0, r6
   25ce0:	4611      	mov	r1, r2
}
   25ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   25ce6:	f7f3 b973 	b.w	18fd0 <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   25cea:	4621      	mov	r1, r4
   25cec:	4630      	mov	r0, r6
   25cee:	f7f2 fadb 	bl	182a8 <chan_send>
   25cf2:	2800      	cmp	r0, #0
   25cf4:	d1eb      	bne.n	25cce <bt_att_encrypt_change+0x58>
}
   25cf6:	bd70      	pop	{r4, r5, r6, pc}

00025cf8 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   25cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25cfa:	460d      	mov	r5, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   25cfc:	f7f2 fb4a 	bl	18394 <att_get>
	if (!att) {
   25d00:	4604      	mov	r4, r0
   25d02:	b940      	cbnz	r0, 25d16 <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   25d04:	69a8      	ldr	r0, [r5, #24]
   25d06:	f7f2 fa01 	bl	1810c <tx_meta_data_free>
		net_buf_unref(buf);
   25d0a:	4628      	mov	r0, r5
   25d0c:	f7f6 f85c 	bl	1bdc8 <net_buf_unref>
		return -ENOTCONN;
   25d10:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   25d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   25d16:	f100 060c 	add.w	r6, r0, #12
   25d1a:	4629      	mov	r1, r5
   25d1c:	4630      	mov	r0, r6
   25d1e:	f000 ff27 	bl	26b70 <net_buf_put>
	return list->head;
   25d22:	6a65      	ldr	r5, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25d24:	b14d      	cbz	r5, 25d3a <bt_att_send+0x42>
	return node->next;
   25d26:	f855 4988 	ldr.w	r4, [r5], #-136
   25d2a:	b104      	cbz	r4, 25d2e <bt_att_send+0x36>
   25d2c:	3c88      	subs	r4, #136	; 0x88
		err = process_queue(chan, &att->tx_queue);
   25d2e:	4631      	mov	r1, r6
   25d30:	4628      	mov	r0, r5
   25d32:	f7ff fcd6 	bl	256e2 <process_queue>
		if (!err) {
   25d36:	4603      	mov	r3, r0
   25d38:	b980      	cbnz	r0, 25d5c <bt_att_send+0x64>
	return 0;
   25d3a:	2000      	movs	r0, #0
   25d3c:	e7ea      	b.n	25d14 <bt_att_send+0x1c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   25d3e:	2103      	movs	r1, #3
   25d40:	f104 0034 	add.w	r0, r4, #52	; 0x34
   25d44:	f7ff fbde 	bl	25504 <atomic_test_bit>
   25d48:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   25d4a:	f105 0034 	add.w	r0, r5, #52	; 0x34
   25d4e:	f7ff fbd9 	bl	25504 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   25d52:	4287      	cmp	r7, r0
   25d54:	f06f 0301 	mvn.w	r3, #1
   25d58:	d107      	bne.n	25d6a <bt_att_send+0x72>
   25d5a:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25d5c:	2c00      	cmp	r4, #0
   25d5e:	d0ec      	beq.n	25d3a <bt_att_send+0x42>
   25d60:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   25d64:	b922      	cbnz	r2, 25d70 <bt_att_send+0x78>
		if (err == -ENOENT && prev &&
   25d66:	3302      	adds	r3, #2
   25d68:	d0e9      	beq.n	25d3e <bt_att_send+0x46>
{
   25d6a:	4625      	mov	r5, r4
   25d6c:	4614      	mov	r4, r2
   25d6e:	e7de      	b.n	25d2e <bt_att_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25d70:	3a88      	subs	r2, #136	; 0x88
   25d72:	e7f8      	b.n	25d66 <bt_att_send+0x6e>

00025d74 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   25d74:	b510      	push	{r4, lr}
   25d76:	460c      	mov	r4, r1
	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   25d78:	f7f2 fb0c 	bl	18394 <att_get>
	if (!att) {
   25d7c:	b160      	cbz	r0, 25d98 <bt_att_req_send+0x24>
	parent->next = child;
   25d7e:	2300      	movs	r3, #0
   25d80:	6023      	str	r3, [r4, #0]
	return list->tail;
   25d82:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   25d84:	b92b      	cbnz	r3, 25d92 <bt_att_req_send+0x1e>
	list->head = node;
   25d86:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   25d8a:	f7ff fe1f 	bl	259cc <att_req_send_process>

	return 0;
   25d8e:	2000      	movs	r0, #0
}
   25d90:	bd10      	pop	{r4, pc}
	parent->next = child;
   25d92:	601c      	str	r4, [r3, #0]
	list->tail = node;
   25d94:	6084      	str	r4, [r0, #8]
}
   25d96:	e7f8      	b.n	25d8a <bt_att_req_send+0x16>
		return -ENOTCONN;
   25d98:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   25d9c:	e7f8      	b.n	25d90 <bt_att_req_send+0x1c>

00025d9e <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   25d9e:	2001      	movs	r0, #1
   25da0:	4770      	bx	lr

00025da2 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   25da2:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
   25da4:	f7f2 faf6 	bl	18394 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   25da8:	b150      	cbz	r0, 25dc0 <bt_att_clear_out_of_sync_sent+0x1e>
	return list->head;
   25daa:	6a44      	ldr	r4, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   25dac:	b144      	cbz	r4, 25dc0 <bt_att_clear_out_of_sync_sent+0x1e>
   25dae:	3c88      	subs	r4, #136	; 0x88
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   25db0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   25db4:	2105      	movs	r1, #5
   25db6:	f7ff fd5f 	bl	25878 <atomic_clear_bit>
	return node->next;
   25dba:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
   25dbe:	e7f5      	b.n	25dac <bt_att_clear_out_of_sync_sent+0xa>
	}
}
   25dc0:	bd10      	pop	{r4, pc}

00025dc2 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   25dc2:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   25dc4:	2104      	movs	r1, #4
   25dc6:	f7ff fb6e 	bl	254a6 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   25dca:	b128      	cbz	r0, 25dd8 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   25dcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   25dd0:	2105      	movs	r1, #5
   25dd2:	3030      	adds	r0, #48	; 0x30
   25dd4:	f7ff bb96 	b.w	25504 <atomic_test_bit>
}
   25dd8:	bd08      	pop	{r3, pc}

00025dda <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   25dda:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   25ddc:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   25de0:	2201      	movs	r2, #1
   25de2:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   25de4:	7403      	strb	r3, [r0, #16]
}
   25de6:	4770      	bx	lr

00025de8 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   25de8:	6010      	str	r0, [r2, #0]
}
   25dea:	2000      	movs	r0, #0
   25dec:	4770      	bx	lr

00025dee <gatt_ccc_changed>:
{
   25dee:	460b      	mov	r3, r1
   25df0:	8909      	ldrh	r1, [r1, #8]
   25df2:	8a5a      	ldrh	r2, [r3, #18]
   25df4:	4291      	cmp	r1, r2
   25df6:	bf38      	it	cc
   25df8:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   25dfa:	8a9a      	ldrh	r2, [r3, #20]
   25dfc:	428a      	cmp	r2, r1
   25dfe:	d003      	beq.n	25e08 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   25e00:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   25e02:	699b      	ldr	r3, [r3, #24]
   25e04:	b103      	cbz	r3, 25e08 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   25e06:	4718      	bx	r3
}
   25e08:	4770      	bx	lr

00025e0a <gatt_indicate_rsp>:
{
   25e0a:	b510      	push	{r4, lr}
   25e0c:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   25e0e:	68a3      	ldr	r3, [r4, #8]
{
   25e10:	460a      	mov	r2, r1
	if (params->func) {
   25e12:	b10b      	cbz	r3, 25e18 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   25e14:	4621      	mov	r1, r4
   25e16:	4798      	blx	r3
	params->_ref--;
   25e18:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   25e1a:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   25e1c:	3b01      	subs	r3, #1
   25e1e:	b2db      	uxtb	r3, r3
   25e20:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   25e22:	b122      	cbz	r2, 25e2e <gatt_indicate_rsp+0x24>
   25e24:	b91b      	cbnz	r3, 25e2e <gatt_indicate_rsp+0x24>
		params->destroy(params);
   25e26:	4620      	mov	r0, r4
}
   25e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   25e2c:	4710      	bx	r2
}
   25e2e:	bd10      	pop	{r4, pc}

00025e30 <match_uuid>:
	data->attr = attr;
   25e30:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   25e32:	8091      	strh	r1, [r2, #4]
}
   25e34:	2000      	movs	r0, #0
   25e36:	4770      	bx	lr

00025e38 <gen_hash_m>:
{
   25e38:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   25e3a:	6807      	ldr	r7, [r0, #0]
   25e3c:	783d      	ldrb	r5, [r7, #0]
{
   25e3e:	b089      	sub	sp, #36	; 0x24
   25e40:	4606      	mov	r6, r0
   25e42:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   25e44:	b9dd      	cbnz	r5, 25e7e <gen_hash_m+0x46>
	switch (u16->val) {
   25e46:	887b      	ldrh	r3, [r7, #2]
   25e48:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   25e4c:	d004      	beq.n	25e58 <gen_hash_m+0x20>
   25e4e:	d810      	bhi.n	25e72 <gen_hash_m+0x3a>
   25e50:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   25e54:	2b03      	cmp	r3, #3
   25e56:	d812      	bhi.n	25e7e <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   25e58:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25e5c:	2202      	movs	r2, #2
   25e5e:	f10d 010a 	add.w	r1, sp, #10
   25e62:	4620      	mov	r0, r4
   25e64:	f7fe fc7d 	bl	24762 <tc_cmac_update>
   25e68:	b968      	cbnz	r0, 25e86 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   25e6a:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   25e6e:	65a2      	str	r2, [r4, #88]	; 0x58
   25e70:	e006      	b.n	25e80 <gen_hash_m+0x48>
	switch (u16->val) {
   25e72:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   25e76:	33ff      	adds	r3, #255	; 0xff
   25e78:	b29b      	uxth	r3, r3
   25e7a:	2b04      	cmp	r3, #4
   25e7c:	d91e      	bls.n	25ebc <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   25e7e:	2501      	movs	r5, #1
}
   25e80:	4628      	mov	r0, r5
   25e82:	b009      	add	sp, #36	; 0x24
   25e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   25e86:	887b      	ldrh	r3, [r7, #2]
   25e88:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25e8c:	2202      	movs	r2, #2
   25e8e:	f10d 010a 	add.w	r1, sp, #10
   25e92:	4620      	mov	r0, r4
   25e94:	f7fe fc65 	bl	24762 <tc_cmac_update>
   25e98:	2800      	cmp	r0, #0
   25e9a:	d0e6      	beq.n	25e6a <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   25e9c:	2000      	movs	r0, #0
   25e9e:	9000      	str	r0, [sp, #0]
   25ea0:	aa03      	add	r2, sp, #12
   25ea2:	6877      	ldr	r7, [r6, #4]
   25ea4:	2313      	movs	r3, #19
   25ea6:	4631      	mov	r1, r6
   25ea8:	47b8      	blx	r7
		if (len < 0) {
   25eaa:	1e02      	subs	r2, r0, #0
   25eac:	dbdf      	blt.n	25e6e <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   25eae:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25eb0:	4620      	mov	r0, r4
   25eb2:	f7fe fc56 	bl	24762 <tc_cmac_update>
   25eb6:	2800      	cmp	r0, #0
   25eb8:	d1e1      	bne.n	25e7e <gen_hash_m+0x46>
   25eba:	e7d6      	b.n	25e6a <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   25ebc:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25ec0:	2202      	movs	r2, #2
   25ec2:	f10d 010a 	add.w	r1, sp, #10
   25ec6:	4620      	mov	r0, r4
   25ec8:	f7fe fc4b 	bl	24762 <tc_cmac_update>
   25ecc:	2800      	cmp	r0, #0
   25ece:	d0cc      	beq.n	25e6a <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   25ed0:	887b      	ldrh	r3, [r7, #2]
   25ed2:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25ed6:	2202      	movs	r2, #2
   25ed8:	f10d 010a 	add.w	r1, sp, #10
   25edc:	e7e8      	b.n	25eb0 <gen_hash_m+0x78>

00025ede <bt_addr_le_eq>:
{
   25ede:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   25ee0:	2207      	movs	r2, #7
   25ee2:	f7fe fd0d 	bl	24900 <memcmp>
}
   25ee6:	fab0 f080 	clz	r0, r0
   25eea:	0940      	lsrs	r0, r0, #5
   25eec:	bd08      	pop	{r3, pc}

00025eee <atomic_or>:
{
   25eee:	b510      	push	{r4, lr}
   25ef0:	4603      	mov	r3, r0
}
   25ef2:	f3bf 8f5b 	dmb	ish
   25ef6:	e853 0f00 	ldrex	r0, [r3]
   25efa:	ea40 0201 	orr.w	r2, r0, r1
   25efe:	e843 2400 	strex	r4, r2, [r3]
   25f02:	2c00      	cmp	r4, #0
   25f04:	d1f7      	bne.n	25ef6 <atomic_or+0x8>
   25f06:	f3bf 8f5b 	dmb	ish
   25f0a:	bd10      	pop	{r4, pc}

00025f0c <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   25f0c:	2207      	movs	r2, #7
   25f0e:	f7fe bd1e 	b.w	2494e <memcpy>

00025f12 <z_log_msg_static_create.constprop.0>:
   25f12:	2300      	movs	r3, #0
   25f14:	f7ec be7c 	b.w	12c10 <z_impl_z_log_msg_static_create>

00025f18 <sc_clear>:
{
   25f18:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   25f1a:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   25f1e:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   25f20:	4631      	mov	r1, r6
   25f22:	7a00      	ldrb	r0, [r0, #8]
   25f24:	f7fe fecc 	bl	24cc0 <bt_addr_le_is_bonded>
   25f28:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   25f2a:	4631      	mov	r1, r6
   25f2c:	f7f3 f944 	bl	191b8 <find_sc_cfg>
	if (!cfg) {
   25f30:	b128      	cbz	r0, 25f3e <sc_clear+0x26>
}
   25f32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   25f36:	220c      	movs	r2, #12
   25f38:	2100      	movs	r1, #0
   25f3a:	f7fe bd13 	b.w	24964 <memset>
}
   25f3e:	bd70      	pop	{r4, r5, r6, pc}

00025f40 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   25f40:	2a02      	cmp	r2, #2
{
   25f42:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   25f44:	d108      	bne.n	25f58 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   25f46:	2300      	movs	r3, #0
   25f48:	f100 0188 	add.w	r1, r0, #136	; 0x88
   25f4c:	461a      	mov	r2, r3
   25f4e:	7a00      	ldrb	r0, [r0, #8]
   25f50:	f7f3 f9f8 	bl	19344 <sc_save>
}
   25f54:	2002      	movs	r0, #2
   25f56:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   25f58:	f7ff ffde 	bl	25f18 <sc_clear>
   25f5c:	e7fa      	b.n	25f54 <sc_ccc_cfg_write+0x14>

00025f5e <read_appearance>:
{
   25f5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25f60:	4615      	mov	r5, r2
   25f62:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   25f66:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   25f68:	f7fe fea8 	bl	24cbc <bt_get_appearance>
	if (offset > value_len) {
   25f6c:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   25f6e:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   25f72:	d80e      	bhi.n	25f92 <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   25f74:	f1c6 0402 	rsb	r4, r6, #2
   25f78:	42bc      	cmp	r4, r7
   25f7a:	bfa8      	it	ge
   25f7c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   25f7e:	f10d 0306 	add.w	r3, sp, #6
   25f82:	4622      	mov	r2, r4
   25f84:	1999      	adds	r1, r3, r6
   25f86:	4628      	mov	r0, r5
   25f88:	f7fe fce1 	bl	2494e <memcpy>
}
   25f8c:	4620      	mov	r0, r4
   25f8e:	b003      	add	sp, #12
   25f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25f92:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   25f96:	e7f9      	b.n	25f8c <read_appearance+0x2e>

00025f98 <read_name>:
{
   25f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25f9c:	4698      	mov	r8, r3
   25f9e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   25fa2:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   25fa4:	f7ef ff98 	bl	15ed8 <bt_get_name>
   25fa8:	4607      	mov	r7, r0
				 strlen(name));
   25faa:	f7fe fc99 	bl	248e0 <strlen>
	if (offset > value_len) {
   25fae:	b283      	uxth	r3, r0
   25fb0:	42b3      	cmp	r3, r6
   25fb2:	d30c      	bcc.n	25fce <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   25fb4:	1b9c      	subs	r4, r3, r6
   25fb6:	4544      	cmp	r4, r8
   25fb8:	bfa8      	it	ge
   25fba:	4644      	movge	r4, r8
   25fbc:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   25fbe:	4622      	mov	r2, r4
   25fc0:	19b9      	adds	r1, r7, r6
   25fc2:	4628      	mov	r0, r5
   25fc4:	f7fe fcc3 	bl	2494e <memcpy>
}
   25fc8:	4620      	mov	r0, r4
   25fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25fce:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   25fd2:	e7f9      	b.n	25fc8 <read_name+0x30>

00025fd4 <cf_read>:
{
   25fd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25fd6:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   25fd8:	2300      	movs	r3, #0
{
   25fda:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   25fde:	f88d 3004 	strb.w	r3, [sp, #4]
{
   25fe2:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   25fe4:	f7f3 f8ba 	bl	1915c <find_cf_cfg>
	if (cfg) {
   25fe8:	b128      	cbz	r0, 25ff6 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   25fea:	f100 0108 	add.w	r1, r0, #8
   25fee:	2201      	movs	r2, #1
   25ff0:	a801      	add	r0, sp, #4
   25ff2:	f7fe fcac 	bl	2494e <memcpy>
	if (offset > value_len) {
   25ff6:	2e01      	cmp	r6, #1
   25ff8:	d80d      	bhi.n	26016 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   25ffa:	f1c6 0401 	rsb	r4, r6, #1
   25ffe:	42bc      	cmp	r4, r7
   26000:	bfa8      	it	ge
   26002:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   26004:	ab01      	add	r3, sp, #4
   26006:	4622      	mov	r2, r4
   26008:	1999      	adds	r1, r3, r6
   2600a:	4628      	mov	r0, r5
   2600c:	f7fe fc9f 	bl	2494e <memcpy>
}
   26010:	4620      	mov	r0, r4
   26012:	b003      	add	sp, #12
   26014:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   26016:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2601a:	e7f9      	b.n	26010 <cf_read+0x3c>

0002601c <bt_gatt_attr_read_service>:
{
   2601c:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   2601e:	68c9      	ldr	r1, [r1, #12]
{
   26020:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   26022:	780a      	ldrb	r2, [r1, #0]
{
   26024:	461c      	mov	r4, r3
   26026:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   2602a:	b992      	cbnz	r2, 26052 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2602c:	884a      	ldrh	r2, [r1, #2]
   2602e:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   26032:	2b02      	cmp	r3, #2
   26034:	d818      	bhi.n	26068 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   26036:	f1c3 0202 	rsb	r2, r3, #2
   2603a:	4294      	cmp	r4, r2
   2603c:	bfa8      	it	ge
   2603e:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   26040:	4622      	mov	r2, r4
   26042:	f10d 0106 	add.w	r1, sp, #6
   26046:	4419      	add	r1, r3
   26048:	f7fe fc81 	bl	2494e <memcpy>
}
   2604c:	4620      	mov	r0, r4
   2604e:	b002      	add	sp, #8
   26050:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   26052:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   26054:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   26058:	d806      	bhi.n	26068 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   2605a:	f1c3 0210 	rsb	r2, r3, #16
   2605e:	4294      	cmp	r4, r2
   26060:	bfa8      	it	ge
   26062:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   26064:	4622      	mov	r2, r4
   26066:	e7ee      	b.n	26046 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   26068:	f06f 0406 	mvn.w	r4, #6
   2606c:	e7ee      	b.n	2604c <bt_gatt_attr_read_service+0x30>

0002606e <bt_gatt_attr_read_ccc>:
{
   2606e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   26070:	68c9      	ldr	r1, [r1, #12]
{
   26072:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   26076:	4615      	mov	r5, r2
   26078:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   2607a:	f7f3 f8bf 	bl	191fc <find_ccc_cfg>
	if (cfg) {
   2607e:	b100      	cbz	r0, 26082 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   26080:	8900      	ldrh	r0, [r0, #8]
   26082:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   26086:	2e02      	cmp	r6, #2
   26088:	d80e      	bhi.n	260a8 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   2608a:	f1c6 0402 	rsb	r4, r6, #2
   2608e:	42bc      	cmp	r4, r7
   26090:	bfa8      	it	ge
   26092:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   26094:	f10d 0306 	add.w	r3, sp, #6
   26098:	4622      	mov	r2, r4
   2609a:	1999      	adds	r1, r3, r6
   2609c:	4628      	mov	r0, r5
   2609e:	f7fe fc56 	bl	2494e <memcpy>
}
   260a2:	4620      	mov	r0, r4
   260a4:	b003      	add	sp, #12
   260a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   260a8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   260ac:	e7f9      	b.n	260a2 <bt_gatt_attr_read_ccc+0x34>

000260ae <set_change_aware_no_store.constprop.0.isra.0>:
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   260ae:	2101      	movs	r1, #1
   260b0:	300c      	adds	r0, #12
   260b2:	f7ff bf1c 	b.w	25eee <atomic_or>

000260b6 <sc_restore_rsp>:
{
   260b6:	b538      	push	{r3, r4, r5, lr}
   260b8:	4604      	mov	r4, r0
   260ba:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   260bc:	f7ff fe6f 	bl	25d9e <bt_att_fixed_chan_only>
   260c0:	b140      	cbz	r0, 260d4 <sc_restore_rsp+0x1e>
		cfg = find_cf_cfg(conn);
   260c2:	4620      	mov	r0, r4
   260c4:	f7f3 f84a 	bl	1915c <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   260c8:	b120      	cbz	r0, 260d4 <sc_restore_rsp+0x1e>
   260ca:	7a03      	ldrb	r3, [r0, #8]
   260cc:	07db      	lsls	r3, r3, #31
   260ce:	d501      	bpl.n	260d4 <sc_restore_rsp+0x1e>
	bool changed = set_change_aware_no_store(cfg, aware);
   260d0:	f7ff ffed 	bl	260ae <set_change_aware_no_store.constprop.0.isra.0>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   260d4:	b965      	cbnz	r5, 260f0 <sc_restore_rsp+0x3a>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   260d6:	7a20      	ldrb	r0, [r4, #8]
   260d8:	f104 0188 	add.w	r1, r4, #136	; 0x88
   260dc:	f7f3 f86c 	bl	191b8 <find_sc_cfg>
		if (sc_cfg) {
   260e0:	b130      	cbz	r0, 260f0 <sc_restore_rsp+0x3a>
	memset(&cfg->data, 0, sizeof(cfg->data));
   260e2:	4629      	mov	r1, r5
   260e4:	2204      	movs	r2, #4
}
   260e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   260ea:	3008      	adds	r0, #8
   260ec:	f7fe bc3a 	b.w	24964 <memset>
}
   260f0:	bd38      	pop	{r3, r4, r5, pc}

000260f2 <bt_gatt_attr_read>:
{
   260f2:	b510      	push	{r4, lr}
   260f4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   260f8:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   260fc:	42a1      	cmp	r1, r4
{
   260fe:	4610      	mov	r0, r2
	if (offset > value_len) {
   26100:	d80b      	bhi.n	2611a <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   26102:	1a64      	subs	r4, r4, r1
   26104:	429c      	cmp	r4, r3
   26106:	bfa8      	it	ge
   26108:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2610a:	9b03      	ldr	r3, [sp, #12]
   2610c:	b2a4      	uxth	r4, r4
   2610e:	4622      	mov	r2, r4
   26110:	4419      	add	r1, r3
   26112:	f7fe fc1c 	bl	2494e <memcpy>
}
   26116:	4620      	mov	r0, r4
   26118:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2611a:	f06f 0406 	mvn.w	r4, #6
   2611e:	e7fa      	b.n	26116 <bt_gatt_attr_read+0x24>

00026120 <bt_gatt_attr_value_handle>:
{
   26120:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   26122:	4604      	mov	r4, r0
   26124:	b910      	cbnz	r0, 2612c <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   26126:	2000      	movs	r0, #0
}
   26128:	b002      	add	sp, #8
   2612a:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2612c:	2300      	movs	r3, #0
   2612e:	f88d 3004 	strb.w	r3, [sp, #4]
   26132:	6800      	ldr	r0, [r0, #0]
   26134:	f642 0303 	movw	r3, #10243	; 0x2803
   26138:	a901      	add	r1, sp, #4
   2613a:	f8ad 3006 	strh.w	r3, [sp, #6]
   2613e:	f7fe fc5f 	bl	24a00 <bt_uuid_cmp>
   26142:	2800      	cmp	r0, #0
   26144:	d1ef      	bne.n	26126 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   26146:	68e3      	ldr	r3, [r4, #12]
   26148:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2614a:	2800      	cmp	r0, #0
   2614c:	d1ec      	bne.n	26128 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2614e:	4620      	mov	r0, r4
   26150:	f7f3 fa66 	bl	19620 <bt_gatt_attr_get_handle>
   26154:	3001      	adds	r0, #1
   26156:	b280      	uxth	r0, r0
	return handle;
   26158:	e7e6      	b.n	26128 <bt_gatt_attr_value_handle+0x8>

0002615a <bt_gatt_attr_read_chrc>:
{
   2615a:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2615c:	68cc      	ldr	r4, [r1, #12]
{
   2615e:	b087      	sub	sp, #28
   26160:	4608      	mov	r0, r1
   26162:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   26164:	79a3      	ldrb	r3, [r4, #6]
   26166:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2616a:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   2616e:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   26170:	f7ff ffd6 	bl	26120 <bt_gatt_attr_value_handle>
   26174:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   26178:	6821      	ldr	r1, [r4, #0]
   2617a:	780b      	ldrb	r3, [r1, #0]
   2617c:	b99b      	cbnz	r3, 261a6 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2617e:	884b      	ldrh	r3, [r1, #2]
   26180:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   26184:	2405      	movs	r4, #5
	if (offset > value_len) {
   26186:	42b4      	cmp	r4, r6
   26188:	d315      	bcc.n	261b6 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   2618a:	1ba4      	subs	r4, r4, r6
   2618c:	42bc      	cmp	r4, r7
   2618e:	bfa8      	it	ge
   26190:	463c      	movge	r4, r7
   26192:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   26194:	ab01      	add	r3, sp, #4
   26196:	4622      	mov	r2, r4
   26198:	1999      	adds	r1, r3, r6
   2619a:	4628      	mov	r0, r5
   2619c:	f7fe fbd7 	bl	2494e <memcpy>
}
   261a0:	4620      	mov	r0, r4
   261a2:	b007      	add	sp, #28
   261a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   261a6:	2210      	movs	r2, #16
   261a8:	3101      	adds	r1, #1
   261aa:	f10d 0007 	add.w	r0, sp, #7
   261ae:	f7fe fbce 	bl	2494e <memcpy>
		value_len += 16U;
   261b2:	2413      	movs	r4, #19
   261b4:	e7e7      	b.n	26186 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   261b6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   261ba:	e7f1      	b.n	261a0 <bt_gatt_attr_read_chrc+0x46>

000261bc <bt_gatt_foreach_attr>:
{
   261bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   261be:	e9cd 2301 	strd	r2, r3, [sp, #4]
   261c2:	2300      	movs	r3, #0
   261c4:	9300      	str	r3, [sp, #0]
   261c6:	461a      	mov	r2, r3
   261c8:	f7f3 fa5a 	bl	19680 <bt_gatt_foreach_attr_type>
}
   261cc:	b005      	add	sp, #20
   261ce:	f85d fb04 	ldr.w	pc, [sp], #4

000261d2 <bt_gatt_check_perm>:
{
   261d2:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   261d4:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   261d6:	8a4b      	ldrh	r3, [r1, #18]
{
   261d8:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   261da:	d504      	bpl.n	261e6 <bt_gatt_check_perm+0x14>
   261dc:	f013 0f95 	tst.w	r3, #149	; 0x95
   261e0:	d02b      	beq.n	2623a <bt_gatt_check_perm+0x68>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   261e2:	6848      	ldr	r0, [r1, #4]
   261e4:	b348      	cbz	r0, 2623a <bt_gatt_check_perm+0x68>
	if ((mask & BT_GATT_PERM_WRITE) &&
   261e6:	0790      	lsls	r0, r2, #30
   261e8:	d504      	bpl.n	261f4 <bt_gatt_check_perm+0x22>
   261ea:	f413 7f95 	tst.w	r3, #298	; 0x12a
   261ee:	d026      	beq.n	2623e <bt_gatt_check_perm+0x6c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   261f0:	6889      	ldr	r1, [r1, #8]
   261f2:	b321      	cbz	r1, 2623e <bt_gatt_check_perm+0x6c>
	mask &= attr->perm;
   261f4:	ea02 0403 	and.w	r4, r2, r3
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   261f8:	f014 0f3c 	tst.w	r4, #60	; 0x3c
   261fc:	d00d      	beq.n	2621a <bt_gatt_check_perm+0x48>
		if (!conn->encrypt) {
   261fe:	7aeb      	ldrb	r3, [r5, #11]
   26200:	b92b      	cbnz	r3, 2620e <bt_gatt_check_perm+0x3c>
			if (bt_conn_ltk_present(conn)) {
   26202:	4628      	mov	r0, r5
   26204:	f7ff f82c 	bl	25260 <bt_conn_ltk_present>
   26208:	b9d8      	cbnz	r0, 26242 <bt_gatt_check_perm+0x70>
				return BT_ATT_ERR_AUTHENTICATION;
   2620a:	2005      	movs	r0, #5
}
   2620c:	bd38      	pop	{r3, r4, r5, pc}
		if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2620e:	f014 0f30 	tst.w	r4, #48	; 0x30
   26212:	d104      	bne.n	2621e <bt_gatt_check_perm+0x4c>
		if (mask & BT_GATT_PERM_LESC_MASK) {
   26214:	f414 7fc0 	tst.w	r4, #384	; 0x180
   26218:	d107      	bne.n	2622a <bt_gatt_check_perm+0x58>
	return 0;
   2621a:	2000      	movs	r0, #0
   2621c:	e7f6      	b.n	2620c <bt_gatt_check_perm+0x3a>
			if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2621e:	4628      	mov	r0, r5
   26220:	f7ff f865 	bl	252ee <bt_conn_get_security>
   26224:	2802      	cmp	r0, #2
   26226:	d8f5      	bhi.n	26214 <bt_gatt_check_perm+0x42>
   26228:	e7ef      	b.n	2620a <bt_gatt_check_perm+0x38>
			const struct bt_keys *keys = conn->le.keys;
   2622a:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
			if (!keys || (keys->flags & BT_KEYS_SC) == 0) {
   2622e:	2b00      	cmp	r3, #0
   26230:	d0eb      	beq.n	2620a <bt_gatt_check_perm+0x38>
   26232:	7b5b      	ldrb	r3, [r3, #13]
   26234:	06db      	lsls	r3, r3, #27
   26236:	d5e8      	bpl.n	2620a <bt_gatt_check_perm+0x38>
   26238:	e7ef      	b.n	2621a <bt_gatt_check_perm+0x48>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2623a:	2002      	movs	r0, #2
   2623c:	e7e6      	b.n	2620c <bt_gatt_check_perm+0x3a>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2623e:	2003      	movs	r0, #3
   26240:	e7e4      	b.n	2620c <bt_gatt_check_perm+0x3a>
				return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   26242:	200f      	movs	r0, #15
   26244:	e7e2      	b.n	2620c <bt_gatt_check_perm+0x3a>

00026246 <bt_gatt_is_subscribed>:
{
   26246:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2624a:	7b43      	ldrb	r3, [r0, #13]
   2624c:	2b07      	cmp	r3, #7
{
   2624e:	4605      	mov	r5, r0
   26250:	460c      	mov	r4, r1
   26252:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   26254:	d110      	bne.n	26278 <bt_gatt_is_subscribed+0x32>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   26256:	2300      	movs	r3, #0
   26258:	f88d 300c 	strb.w	r3, [sp, #12]
   2625c:	6820      	ldr	r0, [r4, #0]
   2625e:	f642 0303 	movw	r3, #10243	; 0x2803
   26262:	a903      	add	r1, sp, #12
   26264:	f8ad 300e 	strh.w	r3, [sp, #14]
   26268:	f7fe fbca 	bl	24a00 <bt_uuid_cmp>
   2626c:	b960      	cbnz	r0, 26288 <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   2626e:	68e3      	ldr	r3, [r4, #12]
   26270:	799b      	ldrb	r3, [r3, #6]
   26272:	f013 0f30 	tst.w	r3, #48	; 0x30
   26276:	d103      	bne.n	26280 <bt_gatt_is_subscribed+0x3a>
		return false;
   26278:	2000      	movs	r0, #0
}
   2627a:	b004      	add	sp, #16
   2627c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   26280:	4620      	mov	r0, r4
   26282:	f7f3 faeb 	bl	1985c <bt_gatt_attr_next>
   26286:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   26288:	2300      	movs	r3, #0
   2628a:	6820      	ldr	r0, [r4, #0]
   2628c:	f88d 300c 	strb.w	r3, [sp, #12]
   26290:	a903      	add	r1, sp, #12
   26292:	f642 1302 	movw	r3, #10498	; 0x2902
   26296:	f8ad 300e 	strh.w	r3, [sp, #14]
   2629a:	f7fe fbb1 	bl	24a00 <bt_uuid_cmp>
   2629e:	b118      	cbz	r0, 262a8 <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   262a0:	4620      	mov	r0, r4
   262a2:	f7f3 fadb 	bl	1985c <bt_gatt_attr_next>
   262a6:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   262a8:	2700      	movs	r7, #0
   262aa:	f642 1802 	movw	r8, #10498	; 0x2902
   262ae:	6820      	ldr	r0, [r4, #0]
   262b0:	f88d 7000 	strb.w	r7, [sp]
   262b4:	4669      	mov	r1, sp
   262b6:	f8ad 8002 	strh.w	r8, [sp, #2]
   262ba:	f7fe fba1 	bl	24a00 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   262be:	bb20      	cbnz	r0, 2630a <bt_gatt_is_subscribed+0xc4>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   262c0:	2300      	movs	r3, #0
   262c2:	6820      	ldr	r0, [r4, #0]
   262c4:	f88d 300c 	strb.w	r3, [sp, #12]
   262c8:	a903      	add	r1, sp, #12
   262ca:	f642 1302 	movw	r3, #10498	; 0x2902
   262ce:	f8ad 300e 	strh.w	r3, [sp, #14]
   262d2:	f7fe fb95 	bl	24a00 <bt_uuid_cmp>
   262d6:	2800      	cmp	r0, #0
   262d8:	d1ce      	bne.n	26278 <bt_gatt_is_subscribed+0x32>
	ccc = attr->user_data;
   262da:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   262dc:	4622      	mov	r2, r4
   262de:	4628      	mov	r0, r5
   262e0:	f812 1b01 	ldrb.w	r1, [r2], #1
   262e4:	f7ff f805 	bl	252f2 <bt_conn_is_peer_addr_le>
   262e8:	b110      	cbz	r0, 262f0 <bt_gatt_is_subscribed+0xaa>
   262ea:	8923      	ldrh	r3, [r4, #8]
   262ec:	421e      	tst	r6, r3
   262ee:	d10a      	bne.n	26306 <bt_gatt_is_subscribed+0xc0>
   262f0:	7aa1      	ldrb	r1, [r4, #10]
   262f2:	f104 020b 	add.w	r2, r4, #11
   262f6:	4628      	mov	r0, r5
   262f8:	f7fe fffb 	bl	252f2 <bt_conn_is_peer_addr_le>
   262fc:	2800      	cmp	r0, #0
   262fe:	d0bb      	beq.n	26278 <bt_gatt_is_subscribed+0x32>
   26300:	8a63      	ldrh	r3, [r4, #18]
   26302:	421e      	tst	r6, r3
   26304:	d0b8      	beq.n	26278 <bt_gatt_is_subscribed+0x32>
			return true;
   26306:	2001      	movs	r0, #1
   26308:	e7b7      	b.n	2627a <bt_gatt_is_subscribed+0x34>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2630a:	6820      	ldr	r0, [r4, #0]
   2630c:	f88d 7004 	strb.w	r7, [sp, #4]
   26310:	f642 0303 	movw	r3, #10243	; 0x2803
   26314:	a901      	add	r1, sp, #4
   26316:	f8ad 3006 	strh.w	r3, [sp, #6]
   2631a:	f7fe fb71 	bl	24a00 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   2631e:	2800      	cmp	r0, #0
   26320:	d0ce      	beq.n	262c0 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   26322:	6820      	ldr	r0, [r4, #0]
   26324:	f88d 7008 	strb.w	r7, [sp, #8]
   26328:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2632c:	a902      	add	r1, sp, #8
   2632e:	f8ad 300a 	strh.w	r3, [sp, #10]
   26332:	f7fe fb65 	bl	24a00 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   26336:	2800      	cmp	r0, #0
   26338:	d0c2      	beq.n	262c0 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2633a:	6820      	ldr	r0, [r4, #0]
   2633c:	f88d 700c 	strb.w	r7, [sp, #12]
   26340:	f642 0301 	movw	r3, #10241	; 0x2801
   26344:	a903      	add	r1, sp, #12
   26346:	f8ad 300e 	strh.w	r3, [sp, #14]
   2634a:	f7fe fb59 	bl	24a00 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2634e:	2800      	cmp	r0, #0
   26350:	d0b6      	beq.n	262c0 <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   26352:	4620      	mov	r0, r4
   26354:	f7f3 fa82 	bl	1985c <bt_gatt_attr_next>
		if (!attr) {
   26358:	4604      	mov	r4, r0
   2635a:	2800      	cmp	r0, #0
   2635c:	d1a7      	bne.n	262ae <bt_gatt_is_subscribed+0x68>
   2635e:	e78b      	b.n	26278 <bt_gatt_is_subscribed+0x32>

00026360 <bt_gatt_change_aware>:
{
   26360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26364:	4605      	mov	r5, r0
   26366:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   26368:	f7f2 fef8 	bl	1915c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2636c:	4604      	mov	r4, r0
   2636e:	b308      	cbz	r0, 263b4 <bt_gatt_change_aware+0x54>
   26370:	7a03      	ldrb	r3, [r0, #8]
   26372:	07da      	lsls	r2, r3, #31
   26374:	d51e      	bpl.n	263b4 <bt_gatt_change_aware+0x54>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26376:	f3bf 8f5b 	dmb	ish
   2637a:	68c6      	ldr	r6, [r0, #12]
   2637c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   26380:	f016 0601 	ands.w	r6, r6, #1
   26384:	f100 080c 	add.w	r8, r0, #12
   26388:	d114      	bne.n	263b4 <bt_gatt_change_aware+0x54>
	if (!req) {
   2638a:	b1a7      	cbz	r7, 263b6 <bt_gatt_change_aware+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2638c:	f3bf 8f5b 	dmb	ish
   26390:	e858 3f00 	ldrex	r3, [r8]
   26394:	f023 0202 	bic.w	r2, r3, #2
   26398:	e848 2100 	strex	r1, r2, [r8]
   2639c:	2900      	cmp	r1, #0
   2639e:	d1f7      	bne.n	26390 <bt_gatt_change_aware+0x30>
   263a0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   263a4:	079b      	lsls	r3, r3, #30
		bt_att_clear_out_of_sync_sent(conn);
   263a6:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   263a8:	d508      	bpl.n	263bc <bt_gatt_change_aware+0x5c>
		bt_att_clear_out_of_sync_sent(conn);
   263aa:	f7ff fcfa 	bl	25da2 <bt_att_clear_out_of_sync_sent>
	bool changed = set_change_aware_no_store(cfg, aware);
   263ae:	4620      	mov	r0, r4
   263b0:	f7ff fe7d 	bl	260ae <set_change_aware_no_store.constprop.0.isra.0>
		return true;
   263b4:	2601      	movs	r6, #1
}
   263b6:	4630      	mov	r0, r6
   263b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   263bc:	f7ff fcef 	bl	25d9e <bt_att_fixed_chan_only>
   263c0:	2800      	cmp	r0, #0
   263c2:	d0f8      	beq.n	263b6 <bt_gatt_change_aware+0x56>
   263c4:	4628      	mov	r0, r5
   263c6:	f7ff fcfc 	bl	25dc2 <bt_att_out_of_sync_sent_on_fixed>
   263ca:	2800      	cmp	r0, #0
   263cc:	d0f3      	beq.n	263b6 <bt_gatt_change_aware+0x56>
   263ce:	f3bf 8f5b 	dmb	ish
   263d2:	e858 3f00 	ldrex	r3, [r8]
   263d6:	f023 0302 	bic.w	r3, r3, #2
   263da:	e848 3200 	strex	r2, r3, [r8]
   263de:	2a00      	cmp	r2, #0
   263e0:	d1f7      	bne.n	263d2 <bt_gatt_change_aware+0x72>
   263e2:	f3bf 8f5b 	dmb	ish
		bt_att_clear_out_of_sync_sent(conn);
   263e6:	4628      	mov	r0, r5
   263e8:	e7df      	b.n	263aa <bt_gatt_change_aware+0x4a>

000263ea <smp_pairing_rsp>:
}
   263ea:	2007      	movs	r0, #7
   263ec:	4770      	bx	lr

000263ee <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   263ee:	f3bf 8f5b 	dmb	ish
   263f2:	6800      	ldr	r0, [r0, #0]
   263f4:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   263f8:	4108      	asrs	r0, r1
}
   263fa:	f000 0001 	and.w	r0, r0, #1
   263fe:	4770      	bx	lr

00026400 <update_keys_check>:
{
   26400:	b510      	push	{r4, lr}
   26402:	4603      	mov	r3, r0
	if (!keys ||
   26404:	b1d9      	cbz	r1, 2643e <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   26406:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   26408:	f010 0f24 	tst.w	r0, #36	; 0x24
   2640c:	d017      	beq.n	2643e <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2640e:	7d1a      	ldrb	r2, [r3, #20]
   26410:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   26412:	7b09      	ldrb	r1, [r1, #12]
   26414:	42a2      	cmp	r2, r4
   26416:	bf28      	it	cs
   26418:	4622      	movcs	r2, r4
   2641a:	4291      	cmp	r1, r2
   2641c:	d901      	bls.n	26422 <update_keys_check+0x22>
			return false;
   2641e:	2000      	movs	r0, #0
}
   26420:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   26422:	0682      	lsls	r2, r0, #26
   26424:	d404      	bmi.n	26430 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   26426:	7a18      	ldrb	r0, [r3, #8]
   26428:	3800      	subs	r0, #0
   2642a:	bf18      	it	ne
   2642c:	2001      	movne	r0, #1
   2642e:	e7f7      	b.n	26420 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   26430:	2105      	movs	r1, #5
   26432:	1d18      	adds	r0, r3, #4
   26434:	f7ff ffdb 	bl	263ee <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   26438:	2800      	cmp	r0, #0
   2643a:	d1f4      	bne.n	26426 <update_keys_check+0x26>
   2643c:	e7ef      	b.n	2641e <update_keys_check+0x1e>
	return true;
   2643e:	2001      	movs	r0, #1
   26440:	e7ee      	b.n	26420 <update_keys_check+0x20>

00026442 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   26442:	2301      	movs	r3, #1
   26444:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   26446:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26448:	f3bf 8f5b 	dmb	ish
   2644c:	e850 2f00 	ldrex	r2, [r0]
   26450:	401a      	ands	r2, r3
   26452:	e840 2100 	strex	r1, r2, [r0]
   26456:	2900      	cmp	r1, #0
   26458:	d1f8      	bne.n	2644c <atomic_clear_bit+0xa>
   2645a:	f3bf 8f5b 	dmb	ish
}
   2645e:	4770      	bx	lr

00026460 <smp_security_request>:
static uint8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
   26460:	2007      	movs	r0, #7
   26462:	4770      	bx	lr

00026464 <z_log_msg_static_create.constprop.0>:
   26464:	2300      	movs	r3, #0
   26466:	f7ec bbd3 	b.w	12c10 <z_impl_z_log_msg_static_create>

0002646a <smp_chan_get>:
{
   2646a:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   2646c:	2106      	movs	r1, #6
   2646e:	f7ff f81a 	bl	254a6 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   26472:	b918      	cbnz	r0, 2647c <smp_chan_get+0x12>
}
   26474:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   26478:	f7f3 be96 	b.w	1a1a8 <smp_chan_get.part.0>
   2647c:	38ec      	subs	r0, #236	; 0xec
   2647e:	bd08      	pop	{r3, pc}

00026480 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   26480:	2301      	movs	r3, #1
   26482:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26484:	f3bf 8f5b 	dmb	ish
   26488:	e850 2f00 	ldrex	r2, [r0]
   2648c:	431a      	orrs	r2, r3
   2648e:	e840 2100 	strex	r1, r2, [r0]
   26492:	2900      	cmp	r1, #0
   26494:	d1f8      	bne.n	26488 <atomic_set_bit+0x8>
   26496:	f3bf 8f5b 	dmb	ish
}
   2649a:	4770      	bx	lr

0002649c <smp_keypress_notif>:
{
   2649c:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2649e:	210e      	movs	r1, #14
   264a0:	f7ff ffee 	bl	26480 <atomic_set_bit>
}
   264a4:	2000      	movs	r0, #0
   264a6:	bd08      	pop	{r3, pc}

000264a8 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   264a8:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   264aa:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   264ac:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   264ae:	4628      	mov	r0, r5
   264b0:	2104      	movs	r1, #4
   264b2:	f7ff ff9c 	bl	263ee <atomic_test_bit>
   264b6:	b168      	cbz	r0, 264d4 <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   264b8:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   264ba:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   264bc:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   264be:	4608      	mov	r0, r1
   264c0:	f7fe ffcb 	bl	2545a <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   264c4:	4604      	mov	r4, r0
   264c6:	b940      	cbnz	r0, 264da <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   264c8:	2104      	movs	r1, #4
   264ca:	4628      	mov	r0, r5
   264cc:	f7ff ffd8 	bl	26480 <atomic_set_bit>
}
   264d0:	4620      	mov	r0, r4
   264d2:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   264d4:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   264d8:	e7ef      	b.n	264ba <smp_create_pdu.constprop.0+0x12>
   264da:	2101      	movs	r1, #1
   264dc:	300c      	adds	r0, #12
   264de:	f000 fb73 	bl	26bc8 <net_buf_simple_add>
	hdr->code = op;
   264e2:	7006      	strb	r6, [r0, #0]
	return buf;
   264e4:	e7f4      	b.n	264d0 <smp_create_pdu.constprop.0+0x28>

000264e6 <send_pairing_rsp>:
{
   264e6:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   264e8:	2102      	movs	r1, #2
{
   264ea:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   264ec:	f7ff ffdc 	bl	264a8 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   264f0:	4604      	mov	r4, r0
   264f2:	b178      	cbz	r0, 26514 <send_pairing_rsp+0x2e>
   264f4:	2106      	movs	r1, #6
   264f6:	300c      	adds	r0, #12
   264f8:	f000 fb66 	bl	26bc8 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   264fc:	2206      	movs	r2, #6
   264fe:	f105 0111 	add.w	r1, r5, #17
   26502:	f7fe fa24 	bl	2494e <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   26506:	4628      	mov	r0, r5
   26508:	2200      	movs	r2, #0
   2650a:	4621      	mov	r1, r4
   2650c:	f7f3 fde2 	bl	1a0d4 <smp_send.constprop.0>
	return 0;
   26510:	2000      	movs	r0, #0
}
   26512:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   26514:	2008      	movs	r0, #8
   26516:	e7fc      	b.n	26512 <send_pairing_rsp+0x2c>

00026518 <smp_send_pairing_random>:
{
   26518:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2651a:	2104      	movs	r1, #4
{
   2651c:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2651e:	f7ff ffc3 	bl	264a8 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   26522:	4604      	mov	r4, r0
   26524:	b178      	cbz	r0, 26546 <smp_send_pairing_random+0x2e>
   26526:	2110      	movs	r1, #16
   26528:	300c      	adds	r0, #12
   2652a:	f000 fb4d 	bl	26bc8 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   2652e:	2210      	movs	r2, #16
   26530:	f105 0127 	add.w	r1, r5, #39	; 0x27
   26534:	f7fe fa0b 	bl	2494e <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   26538:	4628      	mov	r0, r5
   2653a:	2200      	movs	r2, #0
   2653c:	4621      	mov	r1, r4
   2653e:	f7f3 fdc9 	bl	1a0d4 <smp_send.constprop.0>
	return 0;
   26542:	2000      	movs	r0, #0
}
   26544:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   26546:	2008      	movs	r0, #8
   26548:	e7fc      	b.n	26544 <smp_send_pairing_random+0x2c>

0002654a <smp_dhkey_check>:
{
   2654a:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2654c:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   26550:	78db      	ldrb	r3, [r3, #3]
   26552:	2b01      	cmp	r3, #1
{
   26554:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   26556:	d114      	bne.n	26582 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   26558:	68ce      	ldr	r6, [r1, #12]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2655a:	1d05      	adds	r5, r0, #4
   2655c:	2110      	movs	r1, #16
   2655e:	4628      	mov	r0, r5
   26560:	f7ff ff6f 	bl	26442 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   26564:	4631      	mov	r1, r6
   26566:	2210      	movs	r2, #16
   26568:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   2656c:	f7fe f9ef 	bl	2494e <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   26570:	2107      	movs	r1, #7
   26572:	4628      	mov	r0, r5
   26574:	f7ff ff3b 	bl	263ee <atomic_test_bit>
   26578:	b128      	cbz	r0, 26586 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2657a:	2109      	movs	r1, #9
   2657c:	4628      	mov	r0, r5
   2657e:	f7ff ff7f 	bl	26480 <atomic_set_bit>
}
   26582:	2000      	movs	r0, #0
   26584:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   26586:	210a      	movs	r1, #10
   26588:	4628      	mov	r0, r5
   2658a:	f7ff ff30 	bl	263ee <atomic_test_bit>
   2658e:	2800      	cmp	r0, #0
   26590:	d1f3      	bne.n	2657a <smp_dhkey_check+0x30>
		return compute_and_check_and_send_periph_dhcheck(smp);
   26592:	4620      	mov	r0, r4
}
   26594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   26598:	f7f4 ba12 	b.w	1a9c0 <compute_and_check_and_send_periph_dhcheck>

0002659c <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   2659c:	2007      	movs	r0, #7
   2659e:	4770      	bx	lr

000265a0 <atomic_test_and_clear_bit>:
{
   265a0:	b530      	push	{r4, r5, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   265a2:	2301      	movs	r3, #1
   265a4:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   265a8:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   265aa:	f3bf 8f5b 	dmb	ish
   265ae:	e850 3f00 	ldrex	r3, [r0]
   265b2:	ea03 0402 	and.w	r4, r3, r2
   265b6:	e840 4500 	strex	r5, r4, [r0]
   265ba:	2d00      	cmp	r5, #0
   265bc:	d1f7      	bne.n	265ae <atomic_test_and_clear_bit+0xe>
   265be:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   265c2:	4219      	tst	r1, r3
}
   265c4:	bf14      	ite	ne
   265c6:	2001      	movne	r0, #1
   265c8:	2000      	moveq	r0, #0
   265ca:	bd30      	pop	{r4, r5, pc}

000265cc <smp_reset>:
{
   265cc:	b538      	push	{r3, r4, r5, lr}
   265ce:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   265d0:	1d03      	adds	r3, r0, #4
   265d2:	2500      	movs	r5, #0
   265d4:	f3bf 8f5b 	dmb	ish
   265d8:	e853 2f00 	ldrex	r2, [r3]
   265dc:	e843 5100 	strex	r1, r5, [r3]
   265e0:	2900      	cmp	r1, #0
   265e2:	d1f9      	bne.n	265d8 <smp_reset+0xc>
   265e4:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   265e8:	f504 7090 	add.w	r0, r4, #288	; 0x120
   265ec:	f001 f8b5 	bl	2775a <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   265f0:	7225      	strb	r5, [r4, #8]
   265f2:	f3bf 8f5b 	dmb	ish
   265f6:	e854 3f00 	ldrex	r3, [r4]
   265fa:	e844 5200 	strex	r2, r5, [r4]
   265fe:	2a00      	cmp	r2, #0
   26600:	d1f9      	bne.n	265f6 <smp_reset+0x2a>
   26602:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   26606:	4620      	mov	r0, r4
   26608:	2101      	movs	r1, #1
}
   2660a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2660e:	f7ff bf37 	b.w	26480 <atomic_set_bit>

00026612 <smp_c1>:
{
   26612:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26616:	b089      	sub	sp, #36	; 0x24
   26618:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   2661c:	4699      	mov	r9, r3
	p1[0] = ia->type;
   2661e:	783b      	ldrb	r3, [r7, #0]
{
   26620:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   26622:	f88d 3000 	strb.w	r3, [sp]
{
   26626:	460c      	mov	r4, r1
	p1[1] = ra->type;
   26628:	f898 3000 	ldrb.w	r3, [r8]
   2662c:	f88d 3001 	strb.w	r3, [sp, #1]
{
   26630:	4611      	mov	r1, r2
   26632:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   26634:	2207      	movs	r2, #7
   26636:	f10d 0002 	add.w	r0, sp, #2
   2663a:	f7fe f988 	bl	2494e <memcpy>
	memcpy(p1 + 9, pres, 7);
   2663e:	2207      	movs	r2, #7
   26640:	4649      	mov	r1, r9
   26642:	f10d 0009 	add.w	r0, sp, #9
   26646:	f7fe f982 	bl	2494e <memcpy>
	while (len--) {
   2664a:	f104 0010 	add.w	r0, r4, #16
	memcpy(p1 + 9, pres, 7);
   2664e:	462a      	mov	r2, r5
   26650:	4669      	mov	r1, sp
		*r++ = *p++ ^ *q++;
   26652:	f814 3b01 	ldrb.w	r3, [r4], #1
   26656:	f811 cb01 	ldrb.w	ip, [r1], #1
	while (len--) {
   2665a:	4284      	cmp	r4, r0
		*r++ = *p++ ^ *q++;
   2665c:	ea83 030c 	eor.w	r3, r3, ip
   26660:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   26664:	d1f5      	bne.n	26652 <smp_c1+0x40>
	err = bt_encrypt_le(k, enc_data, enc_data);
   26666:	462a      	mov	r2, r5
   26668:	4629      	mov	r1, r5
   2666a:	4630      	mov	r0, r6
   2666c:	f000 fd1b 	bl	270a6 <bt_encrypt_le>
	if (err) {
   26670:	4604      	mov	r4, r0
   26672:	bb20      	cbnz	r0, 266be <smp_c1+0xac>
	memcpy(p2, ra->a.val, 6);
   26674:	2206      	movs	r2, #6
   26676:	f108 0101 	add.w	r1, r8, #1
   2667a:	a804      	add	r0, sp, #16
   2667c:	f7fe f967 	bl	2494e <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   26680:	2206      	movs	r2, #6
   26682:	1c79      	adds	r1, r7, #1
   26684:	f10d 0016 	add.w	r0, sp, #22
   26688:	f7fe f961 	bl	2494e <memcpy>
	(void)memset(p2 + 12, 0, 4);
   2668c:	2204      	movs	r2, #4
   2668e:	4621      	mov	r1, r4
   26690:	a807      	add	r0, sp, #28
   26692:	f7fe f967 	bl	24964 <memset>
	while (len--) {
   26696:	f105 0010 	add.w	r0, r5, #16
	(void)memset(p2 + 12, 0, 4);
   2669a:	462a      	mov	r2, r5
   2669c:	ab04      	add	r3, sp, #16
		*r++ = *p++ ^ *q++;
   2669e:	f812 1b01 	ldrb.w	r1, [r2], #1
   266a2:	f813 4b01 	ldrb.w	r4, [r3], #1
	while (len--) {
   266a6:	4282      	cmp	r2, r0
		*r++ = *p++ ^ *q++;
   266a8:	ea81 0104 	eor.w	r1, r1, r4
   266ac:	f802 1c01 	strb.w	r1, [r2, #-1]
	while (len--) {
   266b0:	d1f5      	bne.n	2669e <smp_c1+0x8c>
	return bt_encrypt_le(k, enc_data, enc_data);
   266b2:	462a      	mov	r2, r5
   266b4:	4629      	mov	r1, r5
   266b6:	4630      	mov	r0, r6
   266b8:	f000 fcf5 	bl	270a6 <bt_encrypt_le>
   266bc:	4604      	mov	r4, r0
}
   266be:	4620      	mov	r0, r4
   266c0:	b009      	add	sp, #36	; 0x24
   266c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000266c6 <legacy_pairing_confirm>:
{
   266c6:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   266c8:	1d07      	adds	r7, r0, #4
{
   266ca:	b085      	sub	sp, #20
   266cc:	4604      	mov	r4, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   266ce:	210a      	movs	r1, #10
   266d0:	4638      	mov	r0, r7
   266d2:	f7ff fe8c 	bl	263ee <atomic_test_bit>
   266d6:	bb88      	cbnz	r0, 2673c <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   266d8:	2104      	movs	r1, #4
   266da:	4620      	mov	r0, r4
   266dc:	f7ff fed0 	bl	26480 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   266e0:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   266e2:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   266e6:	f7ff fedf 	bl	264a8 <smp_create_pdu.constprop.0>
	if (!buf) {
   266ea:	4605      	mov	r5, r0
   266ec:	b1c0      	cbz	r0, 26720 <legacy_pairing_confirm+0x5a>
   266ee:	2110      	movs	r1, #16
   266f0:	300c      	adds	r0, #12
   266f2:	f000 fa69 	bl	26bc8 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   266f6:	f106 0396 	add.w	r3, r6, #150	; 0x96
   266fa:	368f      	adds	r6, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   266fc:	9002      	str	r0, [sp, #8]
   266fe:	9301      	str	r3, [sp, #4]
   26700:	9600      	str	r6, [sp, #0]
   26702:	f104 0310 	add.w	r3, r4, #16
   26706:	f104 0209 	add.w	r2, r4, #9
   2670a:	f104 0127 	add.w	r1, r4, #39	; 0x27
   2670e:	f104 0047 	add.w	r0, r4, #71	; 0x47
   26712:	f7ff ff7e 	bl	26612 <smp_c1>
   26716:	4606      	mov	r6, r0
   26718:	b128      	cbz	r0, 26726 <legacy_pairing_confirm+0x60>
		net_buf_unref(buf);
   2671a:	4628      	mov	r0, r5
   2671c:	f7f5 fb54 	bl	1bdc8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   26720:	2008      	movs	r0, #8
}
   26722:	b005      	add	sp, #20
   26724:	bdf0      	pop	{r4, r5, r6, r7, pc}
	smp_send(smp, buf, NULL, NULL);
   26726:	4602      	mov	r2, r0
   26728:	4629      	mov	r1, r5
   2672a:	4620      	mov	r0, r4
   2672c:	f7f3 fcd2 	bl	1a0d4 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   26730:	4631      	mov	r1, r6
   26732:	4638      	mov	r0, r7
   26734:	f7ff fe85 	bl	26442 <atomic_clear_bit>
	return 0;
   26738:	2000      	movs	r0, #0
   2673a:	e7f2      	b.n	26722 <legacy_pairing_confirm+0x5c>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2673c:	2100      	movs	r1, #0
   2673e:	4638      	mov	r0, r7
   26740:	f7ff fe9e 	bl	26480 <atomic_set_bit>
	return 0;
   26744:	e7f8      	b.n	26738 <legacy_pairing_confirm+0x72>

00026746 <bt_smp_request_ltk>:
{
   26746:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2674a:	9f09      	ldr	r7, [sp, #36]	; 0x24
   2674c:	e9cd 2300 	strd	r2, r3, [sp]
   26750:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   26752:	f7ff fe8a 	bl	2646a <smp_chan_get>
	if (!smp) {
   26756:	4605      	mov	r5, r0
   26758:	2800      	cmp	r0, #0
   2675a:	d07c      	beq.n	26856 <bt_smp_request_ltk+0x110>
	if (ediv == 0U && rand == 0U &&
   2675c:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   26760:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   26762:	f1b8 0f00 	cmp.w	r8, #0
   26766:	d128      	bne.n	267ba <bt_smp_request_ltk+0x74>
   26768:	e9dd 3200 	ldrd	r3, r2, [sp]
   2676c:	4313      	orrs	r3, r2
   2676e:	d124      	bne.n	267ba <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   26770:	2103      	movs	r1, #3
   26772:	4630      	mov	r0, r6
   26774:	f7ff fe3b 	bl	263ee <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   26778:	b1f8      	cbz	r0, 267ba <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2677a:	2101      	movs	r1, #1
   2677c:	4630      	mov	r0, r6
   2677e:	f7ff fe36 	bl	263ee <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   26782:	b1d0      	cbz	r0, 267ba <bt_smp_request_ltk+0x74>
	return MIN(req->max_key_size, rsp->max_key_size);
   26784:	7d2c      	ldrb	r4, [r5, #20]
   26786:	7b6b      	ldrb	r3, [r5, #13]
   26788:	429c      	cmp	r4, r3
   2678a:	bf28      	it	cs
   2678c:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   2678e:	4622      	mov	r2, r4
   26790:	f105 0147 	add.w	r1, r5, #71	; 0x47
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   26794:	4638      	mov	r0, r7
   26796:	f7fe f8da 	bl	2494e <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2679a:	2c0f      	cmp	r4, #15
   2679c:	d805      	bhi.n	267aa <bt_smp_request_ltk+0x64>
			(void)memset(ltk + enc_size, 0,
   2679e:	f1c4 0210 	rsb	r2, r4, #16
   267a2:	4641      	mov	r1, r8
   267a4:	1938      	adds	r0, r7, r4
   267a6:	f7fe f8dd 	bl	24964 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   267aa:	4630      	mov	r0, r6
   267ac:	2101      	movs	r1, #1
   267ae:	f7ff fe67 	bl	26480 <atomic_set_bit>
		return true;
   267b2:	2001      	movs	r0, #1
}
   267b4:	b002      	add	sp, #8
   267b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   267ba:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   267be:	b983      	cbnz	r3, 267e2 <bt_smp_request_ltk+0x9c>
					     &conn->le.dst);
   267c0:	f104 0888 	add.w	r8, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   267c4:	7a21      	ldrb	r1, [r4, #8]
   267c6:	4642      	mov	r2, r8
   267c8:	2020      	movs	r0, #32
   267ca:	f7f5 f927 	bl	1ba1c <bt_keys_find>
   267ce:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		if (!conn->le.keys) {
   267d2:	b930      	cbnz	r0, 267e2 <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   267d4:	7a21      	ldrb	r1, [r4, #8]
   267d6:	4642      	mov	r2, r8
   267d8:	2001      	movs	r0, #1
   267da:	f7f5 f91f 	bl	1ba1c <bt_keys_find>
   267de:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (ediv == 0U && rand == 0U &&
   267e2:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   267e6:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
	if (ediv == 0U && rand == 0U &&
   267ea:	f1b8 0f00 	cmp.w	r8, #0
   267ee:	d10c      	bne.n	2680a <bt_smp_request_ltk+0xc4>
   267f0:	e9dd 3200 	ldrd	r3, r2, [sp]
   267f4:	4313      	orrs	r3, r2
   267f6:	d108      	bne.n	2680a <bt_smp_request_ltk+0xc4>
   267f8:	b300      	cbz	r0, 2683c <bt_smp_request_ltk+0xf6>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   267fa:	89c3      	ldrh	r3, [r0, #14]
   267fc:	069a      	lsls	r2, r3, #26
   267fe:	d505      	bpl.n	2680c <bt_smp_request_ltk+0xc6>
		enc_size = conn->le.keys->enc_size;
   26800:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   26802:	f100 011a 	add.w	r1, r0, #26
   26806:	4622      	mov	r2, r4
   26808:	e7c4      	b.n	26794 <bt_smp_request_ltk+0x4e>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2680a:	b1b8      	cbz	r0, 2683c <bt_smp_request_ltk+0xf6>
   2680c:	89c3      	ldrh	r3, [r0, #14]
   2680e:	07db      	lsls	r3, r3, #31
   26810:	d514      	bpl.n	2683c <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   26812:	2208      	movs	r2, #8
   26814:	4669      	mov	r1, sp
   26816:	3040      	adds	r0, #64	; 0x40
   26818:	f7fe f872 	bl	24900 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2681c:	b970      	cbnz	r0, 2683c <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   2681e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   26822:	2202      	movs	r2, #2
   26824:	a908      	add	r1, sp, #32
   26826:	3048      	adds	r0, #72	; 0x48
   26828:	f7fe f86a 	bl	24900 <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2682c:	4680      	mov	r8, r0
   2682e:	b928      	cbnz	r0, 2683c <bt_smp_request_ltk+0xf6>
		enc_size = conn->le.keys->enc_size;
   26830:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
   26834:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   26836:	314a      	adds	r1, #74	; 0x4a
   26838:	4622      	mov	r2, r4
   2683a:	e7ab      	b.n	26794 <bt_smp_request_ltk+0x4e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2683c:	210f      	movs	r1, #15
   2683e:	4630      	mov	r0, r6
   26840:	f7ff fdd5 	bl	263ee <atomic_test_bit>
   26844:	b120      	cbz	r0, 26850 <bt_smp_request_ltk+0x10a>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   26846:	2202      	movs	r2, #2
   26848:	2106      	movs	r1, #6
   2684a:	4620      	mov	r0, r4
   2684c:	f7f1 f864 	bl	17918 <bt_conn_security_changed>
	smp_reset(smp);
   26850:	4628      	mov	r0, r5
   26852:	f7ff febb 	bl	265cc <smp_reset>
		return false;
   26856:	2000      	movs	r0, #0
   26858:	e7ac      	b.n	267b4 <bt_smp_request_ltk+0x6e>

0002685a <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   2685a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2685e:	4770      	bx	lr

00026860 <bt_smp_dhkey_ready>:
{
   26860:	b570      	push	{r4, r5, r6, lr}
   26862:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   26864:	2008      	movs	r0, #8
   26866:	f7f3 fbc5 	bl	19ff4 <smp_find>
	if (smp) {
   2686a:	4604      	mov	r4, r0
   2686c:	b1b8      	cbz	r0, 2689e <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2686e:	1d05      	adds	r5, r0, #4
   26870:	2108      	movs	r1, #8
   26872:	4628      	mov	r0, r5
   26874:	f7ff fde5 	bl	26442 <atomic_clear_bit>
	if (!dhkey) {
   26878:	b38e      	cbz	r6, 268de <bt_smp_dhkey_ready+0x7e>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2687a:	2107      	movs	r1, #7
   2687c:	f7ff fde1 	bl	26442 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   26880:	4631      	mov	r1, r6
   26882:	2220      	movs	r2, #32
   26884:	f104 0097 	add.w	r0, r4, #151	; 0x97
   26888:	f7fe f861 	bl	2494e <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2688c:	210a      	movs	r1, #10
   2688e:	4628      	mov	r0, r5
   26890:	f7ff fdad 	bl	263ee <atomic_test_bit>
   26894:	b168      	cbz	r0, 268b2 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   26896:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   26898:	4628      	mov	r0, r5
   2689a:	f7ff fdf1 	bl	26480 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2689e:	2007      	movs	r0, #7
   268a0:	f7f3 fba8 	bl	19ff4 <smp_find>
		if (smp) {
   268a4:	4604      	mov	r4, r0
   268a6:	b118      	cbz	r0, 268b0 <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   268a8:	f7f3 fcae 	bl	1a208 <smp_dhkey_generate>
			if (err) {
   268ac:	4601      	mov	r1, r0
   268ae:	b990      	cbnz	r0, 268d6 <bt_smp_dhkey_ready+0x76>
}
   268b0:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   268b2:	2110      	movs	r1, #16
   268b4:	4628      	mov	r0, r5
   268b6:	f7ff fd9a 	bl	263ee <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   268ba:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   268bc:	2800      	cmp	r0, #0
   268be:	d1eb      	bne.n	26898 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   268c0:	4628      	mov	r0, r5
   268c2:	f7ff fd94 	bl	263ee <atomic_test_bit>
   268c6:	2800      	cmp	r0, #0
   268c8:	d0e9      	beq.n	2689e <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   268ca:	4620      	mov	r0, r4
   268cc:	f7f4 f878 	bl	1a9c0 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   268d0:	4601      	mov	r1, r0
   268d2:	2800      	cmp	r0, #0
   268d4:	d0e3      	beq.n	2689e <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   268d6:	4620      	mov	r0, r4
   268d8:	f7f4 fbe6 	bl	1b0a8 <smp_error>
   268dc:	e7df      	b.n	2689e <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   268de:	210b      	movs	r1, #11
   268e0:	e7f9      	b.n	268d6 <bt_smp_dhkey_ready+0x76>

000268e2 <bt_smp_disconnected>:
{
   268e2:	b570      	push	{r4, r5, r6, lr}
   268e4:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   268e6:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   268ea:	f850 3b34 	ldr.w	r3, [r0], #52
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   268ee:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   268f0:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
	(void)k_work_cancel_delayable(&smp->work);
   268f4:	f000 ff31 	bl	2775a <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   268f8:	2103      	movs	r1, #3
   268fa:	4620      	mov	r0, r4
   268fc:	f7ff fd77 	bl	263ee <atomic_test_bit>
   26900:	b1a0      	cbz	r0, 2692c <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   26902:	2108      	movs	r1, #8
   26904:	4630      	mov	r0, r6
   26906:	f7f4 fb51 	bl	1afac <smp_pairing_complete>
	if (keys) {
   2690a:	b13d      	cbz	r5, 2691c <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2690c:	89eb      	ldrh	r3, [r5, #14]
   2690e:	b113      	cbz	r3, 26916 <bt_smp_disconnected+0x34>
   26910:	7b6b      	ldrb	r3, [r5, #13]
   26912:	079b      	lsls	r3, r3, #30
   26914:	d502      	bpl.n	2691c <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   26916:	4628      	mov	r0, r5
   26918:	f000 f840 	bl	2699c <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   2691c:	4630      	mov	r0, r6
   2691e:	f44f 72ac 	mov.w	r2, #344	; 0x158
}
   26922:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   26926:	2100      	movs	r1, #0
   26928:	f7fe b81c 	b.w	24964 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2692c:	2101      	movs	r1, #1
   2692e:	4620      	mov	r0, r4
   26930:	f7ff fd5d 	bl	263ee <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26934:	2800      	cmp	r0, #0
   26936:	d1e4      	bne.n	26902 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   26938:	210f      	movs	r1, #15
   2693a:	4620      	mov	r0, r4
   2693c:	f7ff fd57 	bl	263ee <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   26940:	2800      	cmp	r0, #0
   26942:	d1de      	bne.n	26902 <bt_smp_disconnected+0x20>
   26944:	e7e1      	b.n	2690a <bt_smp_disconnected+0x28>

00026946 <smp_ident_sent>:
{
   26946:	b508      	push	{r3, lr}
	if (!err) {
   26948:	b99a      	cbnz	r2, 26972 <smp_ident_sent+0x2c>
	if (conn->type == BT_CONN_TYPE_LE) {
   2694a:	7883      	ldrb	r3, [r0, #2]
   2694c:	2b01      	cmp	r3, #1
   2694e:	d110      	bne.n	26972 <smp_ident_sent+0x2c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   26950:	2106      	movs	r1, #6
   26952:	f7fe fd9e 	bl	25492 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   26956:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   2695a:	f023 0301 	bic.w	r3, r3, #1
   2695e:	f800 3c04 	strb.w	r3, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   26962:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   26966:	b921      	cbnz	r1, 26972 <smp_ident_sent+0x2c>
}
   26968:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   2696c:	38ec      	subs	r0, #236	; 0xec
   2696e:	f7f4 bb1d 	b.w	1afac <smp_pairing_complete>
}
   26972:	bd08      	pop	{r3, pc}

00026974 <bt_keys_get_type>:
{
   26974:	b570      	push	{r4, r5, r6, lr}
   26976:	4604      	mov	r4, r0
   26978:	460d      	mov	r5, r1
   2697a:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   2697c:	f7f5 f84e 	bl	1ba1c <bt_keys_find>
	if (keys) {
   26980:	b938      	cbnz	r0, 26992 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   26982:	4631      	mov	r1, r6
   26984:	4628      	mov	r0, r5
   26986:	f7f5 f815 	bl	1b9b4 <bt_keys_get_addr>
	if (!keys) {
   2698a:	b110      	cbz	r0, 26992 <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, enum bt_keys_type type)
{
	__ASSERT_NO_MSG(keys != NULL);

	keys->keys |= type;
   2698c:	89c3      	ldrh	r3, [r0, #14]
   2698e:	431c      	orrs	r4, r3
   26990:	81c4      	strh	r4, [r0, #14]
}
   26992:	bd70      	pop	{r4, r5, r6, pc}

00026994 <bt_keys_add_type>:
	keys->keys |= type;
   26994:	89c3      	ldrh	r3, [r0, #14]
   26996:	4319      	orrs	r1, r3
   26998:	81c1      	strh	r1, [r0, #14]
}
   2699a:	4770      	bx	lr

0002699c <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   2699c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(keys != NULL);

	LOG_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   2699e:	7a03      	ldrb	r3, [r0, #8]
   269a0:	075b      	lsls	r3, r3, #29
{
   269a2:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   269a4:	d501      	bpl.n	269aa <bt_keys_clear+0xe>
		bt_id_del(keys);
   269a6:	f7ef fca3 	bl	162f0 <bt_id_del>

		LOG_DBG("Deleting key %s", key);
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
   269aa:	4620      	mov	r0, r4
   269ac:	225c      	movs	r2, #92	; 0x5c
}
   269ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(keys, 0, sizeof(*keys));
   269b2:	2100      	movs	r1, #0
   269b4:	f7fd bfd6 	b.w	24964 <memset>

000269b8 <sys_memcpy_swap>:
	psrc += length - 1;
   269b8:	1e53      	subs	r3, r2, #1
   269ba:	4419      	add	r1, r3
	for (; length > 0; length--) {
   269bc:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   269be:	f811 3901 	ldrb.w	r3, [r1], #-1
   269c2:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   269c6:	4290      	cmp	r0, r2
   269c8:	d1f9      	bne.n	269be <sys_memcpy_swap+0x6>
}
   269ca:	4770      	bx	lr

000269cc <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   269cc:	b510      	push	{r4, lr}
   269ce:	1e43      	subs	r3, r0, #1
   269d0:	f100 0210 	add.w	r2, r0, #16
   269d4:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   269d6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   269da:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   269de:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   269e0:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   269e2:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   269e4:	d1f7      	bne.n	269d6 <sys_mem_swap.constprop.0+0xa>
	}
}
   269e6:	bd10      	pop	{r4, pc}

000269e8 <bt_crypto_aes_cmac>:
{
   269e8:	b570      	push	{r4, r5, r6, lr}
   269ea:	b0c2      	sub	sp, #264	; 0x108
   269ec:	460d      	mov	r5, r1
   269ee:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   269f0:	4601      	mov	r1, r0
   269f2:	aa16      	add	r2, sp, #88	; 0x58
   269f4:	4668      	mov	r0, sp
{
   269f6:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   269f8:	f7fd fe88 	bl	2470c <tc_cmac_setup>
   269fc:	b918      	cbnz	r0, 26a06 <bt_crypto_aes_cmac+0x1e>
		return -EIO;
   269fe:	f06f 0004 	mvn.w	r0, #4
}
   26a02:	b042      	add	sp, #264	; 0x108
   26a04:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   26a06:	4632      	mov	r2, r6
   26a08:	4629      	mov	r1, r5
   26a0a:	4668      	mov	r0, sp
   26a0c:	f7fd fea9 	bl	24762 <tc_cmac_update>
   26a10:	2800      	cmp	r0, #0
   26a12:	d0f4      	beq.n	269fe <bt_crypto_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   26a14:	4669      	mov	r1, sp
   26a16:	4620      	mov	r0, r4
   26a18:	f7fd ff0d 	bl	24836 <tc_cmac_final>
   26a1c:	2800      	cmp	r0, #0
   26a1e:	d0ee      	beq.n	269fe <bt_crypto_aes_cmac+0x16>
	return 0;
   26a20:	2000      	movs	r0, #0
   26a22:	e7ee      	b.n	26a02 <bt_crypto_aes_cmac+0x1a>

00026a24 <bt_crypto_f4>:
{
   26a24:	b5f0      	push	{r4, r5, r6, r7, lr}
   26a26:	b097      	sub	sp, #92	; 0x5c
   26a28:	4614      	mov	r4, r2
   26a2a:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   26a2c:	2220      	movs	r2, #32
   26a2e:	4601      	mov	r1, r0
   26a30:	a805      	add	r0, sp, #20
{
   26a32:	461d      	mov	r5, r3
   26a34:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   26a36:	f7ff ffbf 	bl	269b8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   26a3a:	2220      	movs	r2, #32
   26a3c:	4631      	mov	r1, r6
   26a3e:	a80d      	add	r0, sp, #52	; 0x34
   26a40:	f7ff ffba 	bl	269b8 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   26a44:	4621      	mov	r1, r4
   26a46:	2210      	movs	r2, #16
   26a48:	a801      	add	r0, sp, #4
	m[64] = z;
   26a4a:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   26a4e:	f7ff ffb3 	bl	269b8 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), res);
   26a52:	463b      	mov	r3, r7
   26a54:	2241      	movs	r2, #65	; 0x41
   26a56:	a905      	add	r1, sp, #20
   26a58:	a801      	add	r0, sp, #4
   26a5a:	f7ff ffc5 	bl	269e8 <bt_crypto_aes_cmac>
	if (err) {
   26a5e:	4604      	mov	r4, r0
   26a60:	b910      	cbnz	r0, 26a68 <bt_crypto_f4+0x44>
	sys_mem_swap(res, 16);
   26a62:	4638      	mov	r0, r7
   26a64:	f7ff ffb2 	bl	269cc <sys_mem_swap.constprop.0>
}
   26a68:	4620      	mov	r0, r4
   26a6a:	b017      	add	sp, #92	; 0x5c
   26a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026a6e <bt_crypto_f6>:
{
   26a6e:	b5f0      	push	{r4, r5, r6, r7, lr}
   26a70:	b097      	sub	sp, #92	; 0x5c
   26a72:	4605      	mov	r5, r0
   26a74:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   26a76:	a805      	add	r0, sp, #20
   26a78:	2210      	movs	r2, #16
{
   26a7a:	461c      	mov	r4, r3
   26a7c:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   26a7e:	f7ff ff9b 	bl	269b8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   26a82:	2210      	movs	r2, #16
   26a84:	4631      	mov	r1, r6
   26a86:	a809      	add	r0, sp, #36	; 0x24
   26a88:	f7ff ff96 	bl	269b8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   26a8c:	4621      	mov	r1, r4
   26a8e:	2210      	movs	r2, #16
   26a90:	a80d      	add	r0, sp, #52	; 0x34
   26a92:	f7ff ff91 	bl	269b8 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   26a96:	991c      	ldr	r1, [sp, #112]	; 0x70
   26a98:	2203      	movs	r2, #3
   26a9a:	a811      	add	r0, sp, #68	; 0x44
   26a9c:	f7ff ff8c 	bl	269b8 <sys_memcpy_swap>
	m[51] = a1->type;
   26aa0:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   26aa2:	f814 3b01 	ldrb.w	r3, [r4], #1
   26aa6:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   26aaa:	4621      	mov	r1, r4
   26aac:	2206      	movs	r2, #6
   26aae:	a812      	add	r0, sp, #72	; 0x48
   26ab0:	f7fd ff4d 	bl	2494e <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   26ab4:	4621      	mov	r1, r4
   26ab6:	2206      	movs	r2, #6
   26ab8:	a812      	add	r0, sp, #72	; 0x48
   26aba:	f7ff ff7d 	bl	269b8 <sys_memcpy_swap>
	m[58] = a2->type;
   26abe:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   26ac0:	f814 3b01 	ldrb.w	r3, [r4], #1
   26ac4:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   26ac8:	4621      	mov	r1, r4
   26aca:	2206      	movs	r2, #6
   26acc:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   26ad0:	f7fd ff3d 	bl	2494e <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   26ad4:	4621      	mov	r1, r4
   26ad6:	2206      	movs	r2, #6
   26ad8:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   26adc:	f7ff ff6c 	bl	269b8 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   26ae0:	2210      	movs	r2, #16
   26ae2:	4629      	mov	r1, r5
   26ae4:	a801      	add	r0, sp, #4
   26ae6:	f7ff ff67 	bl	269b8 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(ws, m, sizeof(m), check);
   26aea:	463b      	mov	r3, r7
   26aec:	2241      	movs	r2, #65	; 0x41
   26aee:	a905      	add	r1, sp, #20
   26af0:	a801      	add	r0, sp, #4
   26af2:	f7ff ff79 	bl	269e8 <bt_crypto_aes_cmac>
	if (err) {
   26af6:	4604      	mov	r4, r0
   26af8:	b910      	cbnz	r0, 26b00 <bt_crypto_f6+0x92>
	sys_mem_swap(check, 16);
   26afa:	4638      	mov	r0, r7
   26afc:	f7ff ff66 	bl	269cc <sys_mem_swap.constprop.0>
}
   26b00:	4620      	mov	r0, r4
   26b02:	b017      	add	sp, #92	; 0x5c
   26b04:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026b06 <fixed_data_unref>:
}
   26b06:	4770      	bx	lr

00026b08 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   26b08:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   26b0a:	6849      	ldr	r1, [r1, #4]
   26b0c:	6809      	ldr	r1, [r1, #0]
   26b0e:	f7f5 b8c9 	b.w	1bca4 <net_buf_alloc_len>

00026b12 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   26b12:	f7f8 bde7 	b.w	1f6e4 <z_impl_k_queue_get>

00026b16 <net_buf_slist_put>:
	__asm__ volatile(
   26b16:	f04f 0340 	mov.w	r3, #64	; 0x40
   26b1a:	f3ef 8211 	mrs	r2, BASEPRI
   26b1e:	f383 8812 	msr	BASEPRI_MAX, r3
   26b22:	f3bf 8f6f 	isb	sy
	parent->next = child;
   26b26:	2300      	movs	r3, #0
   26b28:	600b      	str	r3, [r1, #0]
	return list->tail;
   26b2a:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   26b2c:	b933      	cbnz	r3, 26b3c <net_buf_slist_put+0x26>
	list->head = node;
   26b2e:	e9c0 1100 	strd	r1, r1, [r0]
	__asm__ volatile(
   26b32:	f382 8811 	msr	BASEPRI, r2
   26b36:	f3bf 8f6f 	isb	sy
}
   26b3a:	4770      	bx	lr
	parent->next = child;
   26b3c:	6019      	str	r1, [r3, #0]
	list->tail = node;
   26b3e:	6041      	str	r1, [r0, #4]
}
   26b40:	e7f7      	b.n	26b32 <net_buf_slist_put+0x1c>

00026b42 <net_buf_slist_get>:
{
   26b42:	b510      	push	{r4, lr}
   26b44:	4603      	mov	r3, r0
	__asm__ volatile(
   26b46:	f04f 0240 	mov.w	r2, #64	; 0x40
   26b4a:	f3ef 8111 	mrs	r1, BASEPRI
   26b4e:	f382 8812 	msr	BASEPRI_MAX, r2
   26b52:	f3bf 8f6f 	isb	sy
	return list->head;
   26b56:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   26b58:	b128      	cbz	r0, 26b66 <net_buf_slist_get+0x24>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   26b5a:	685c      	ldr	r4, [r3, #4]
	return node->next;
   26b5c:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   26b5e:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   26b60:	42a0      	cmp	r0, r4
	list->tail = node;
   26b62:	bf08      	it	eq
   26b64:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
   26b66:	f381 8811 	msr	BASEPRI, r1
   26b6a:	f3bf 8f6f 	isb	sy
}
   26b6e:	bd10      	pop	{r4, pc}

00026b70 <net_buf_put>:
	k_fifo_put(fifo, buf);
   26b70:	f000 bd05 	b.w	2757e <k_queue_append>

00026b74 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   26b74:	7a02      	ldrb	r2, [r0, #8]
   26b76:	3201      	adds	r2, #1
   26b78:	7202      	strb	r2, [r0, #8]
	return buf;
}
   26b7a:	4770      	bx	lr

00026b7c <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   26b7c:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   26b7e:	4618      	mov	r0, r3
   26b80:	685b      	ldr	r3, [r3, #4]
   26b82:	2b00      	cmp	r3, #0
   26b84:	d1fb      	bne.n	26b7e <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   26b86:	4770      	bx	lr

00026b88 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   26b88:	6842      	ldr	r2, [r0, #4]
{
   26b8a:	b510      	push	{r4, lr}
	if (parent->frags) {
   26b8c:	b12a      	cbz	r2, 26b9a <net_buf_frag_insert+0x12>
   26b8e:	460b      	mov	r3, r1
	while (buf->frags) {
   26b90:	461c      	mov	r4, r3
   26b92:	685b      	ldr	r3, [r3, #4]
   26b94:	2b00      	cmp	r3, #0
   26b96:	d1fb      	bne.n	26b90 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   26b98:	6062      	str	r2, [r4, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   26b9a:	6041      	str	r1, [r0, #4]
}
   26b9c:	bd10      	pop	{r4, pc}

00026b9e <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   26b9e:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   26ba0:	4604      	mov	r4, r0
   26ba2:	b920      	cbnz	r0, 26bae <net_buf_frag_add+0x10>
	buf->ref++;
   26ba4:	7a0b      	ldrb	r3, [r1, #8]
   26ba6:	3301      	adds	r3, #1
   26ba8:	720b      	strb	r3, [r1, #8]
		return net_buf_ref(frag);
   26baa:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   26bac:	bd10      	pop	{r4, pc}
   26bae:	4603      	mov	r3, r0
	while (buf->frags) {
   26bb0:	4618      	mov	r0, r3
   26bb2:	685b      	ldr	r3, [r3, #4]
   26bb4:	2b00      	cmp	r3, #0
   26bb6:	d1fb      	bne.n	26bb0 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   26bb8:	f7ff ffe6 	bl	26b88 <net_buf_frag_insert>
   26bbc:	4620      	mov	r0, r4
   26bbe:	e7f5      	b.n	26bac <net_buf_frag_add+0xe>

00026bc0 <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_SIMPLE_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   26bc0:	6883      	ldr	r3, [r0, #8]
   26bc2:	440b      	add	r3, r1
   26bc4:	6003      	str	r3, [r0, #0]
}
   26bc6:	4770      	bx	lr

00026bc8 <net_buf_simple_add>:
	return buf->data + buf->len;
   26bc8:	8883      	ldrh	r3, [r0, #4]
   26bca:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   26bcc:	4419      	add	r1, r3
   26bce:	8081      	strh	r1, [r0, #4]
	return tail;
}
   26bd0:	18d0      	adds	r0, r2, r3
   26bd2:	4770      	bx	lr

00026bd4 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   26bd4:	b430      	push	{r4, r5}
   26bd6:	8884      	ldrh	r4, [r0, #4]
   26bd8:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   26bda:	18a3      	adds	r3, r4, r2
   26bdc:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   26bde:	1928      	adds	r0, r5, r4
}
   26be0:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   26be2:	f7fd beb4 	b.w	2494e <memcpy>

00026be6 <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   26be6:	b510      	push	{r4, lr}
   26be8:	8883      	ldrh	r3, [r0, #4]
   26bea:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   26bec:	1c5c      	adds	r4, r3, #1
   26bee:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   26bf0:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   26bf2:	18d0      	adds	r0, r2, r3
   26bf4:	bd10      	pop	{r4, pc}

00026bf6 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   26bf6:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   26bf8:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   26bfa:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   26bfc:	1a40      	subs	r0, r0, r1
	buf->len += len;
   26bfe:	4411      	add	r1, r2
	buf->data -= len;
   26c00:	6018      	str	r0, [r3, #0]
	buf->len += len;
   26c02:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   26c04:	4770      	bx	lr

00026c06 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   26c06:	8882      	ldrh	r2, [r0, #4]
   26c08:	1a52      	subs	r2, r2, r1
{
   26c0a:	4603      	mov	r3, r0
	buf->len -= len;
   26c0c:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   26c0e:	6800      	ldr	r0, [r0, #0]
   26c10:	4408      	add	r0, r1
   26c12:	6018      	str	r0, [r3, #0]
}
   26c14:	4770      	bx	lr

00026c16 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   26c16:	4603      	mov	r3, r0
	void *data = buf->data;
   26c18:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   26c1a:	889a      	ldrh	r2, [r3, #4]
   26c1c:	1a52      	subs	r2, r2, r1
	buf->data += len;
   26c1e:	4401      	add	r1, r0
	buf->len -= len;
   26c20:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   26c22:	6019      	str	r1, [r3, #0]

	return data;
}
   26c24:	4770      	bx	lr

00026c26 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   26c26:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   26c28:	6803      	ldr	r3, [r0, #0]
   26c2a:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   26c2c:	2102      	movs	r1, #2
   26c2e:	f7ff ffea 	bl	26c06 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   26c32:	4620      	mov	r0, r4
   26c34:	bd10      	pop	{r4, pc}

00026c36 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   26c36:	6802      	ldr	r2, [r0, #0]
   26c38:	6880      	ldr	r0, [r0, #8]
}
   26c3a:	1a10      	subs	r0, r2, r0
   26c3c:	4770      	bx	lr

00026c3e <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   26c3e:	8883      	ldrh	r3, [r0, #4]
   26c40:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   26c42:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   26c44:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   26c46:	6803      	ldr	r3, [r0, #0]
   26c48:	1a5b      	subs	r3, r3, r1
}
   26c4a:	1ad0      	subs	r0, r2, r3
   26c4c:	4770      	bx	lr

00026c4e <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   26c4e:	6903      	ldr	r3, [r0, #16]
   26c50:	b2c9      	uxtb	r1, r1
   26c52:	220c      	movs	r2, #12
   26c54:	fb01 3302 	mla	r3, r1, r2, r3
   26c58:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   26c5a:	f000 0007 	and.w	r0, r0, #7
   26c5e:	4770      	bx	lr

00026c60 <set_on_state>:
	__asm__ volatile(
   26c60:	f04f 0340 	mov.w	r3, #64	; 0x40
   26c64:	f3ef 8211 	mrs	r2, BASEPRI
   26c68:	f383 8812 	msr	BASEPRI_MAX, r3
   26c6c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   26c70:	6803      	ldr	r3, [r0, #0]
   26c72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   26c76:	f043 0302 	orr.w	r3, r3, #2
   26c7a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   26c7c:	f382 8811 	msr	BASEPRI, r2
   26c80:	f3bf 8f6f 	isb	sy
}
   26c84:	4770      	bx	lr

00026c86 <stop>:
{
   26c86:	b570      	push	{r4, r5, r6, lr}
   26c88:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   26c8a:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   26c8c:	f04f 0440 	mov.w	r4, #64	; 0x40
   26c90:	f3ef 8511 	mrs	r5, BASEPRI
   26c94:	f384 8812 	msr	BASEPRI_MAX, r4
   26c98:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   26c9c:	260c      	movs	r6, #12
   26c9e:	fb06 3401 	mla	r4, r6, r1, r3
   26ca2:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   26ca4:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   26ca8:	d008      	beq.n	26cbc <stop+0x36>
   26caa:	42a2      	cmp	r2, r4
   26cac:	d006      	beq.n	26cbc <stop+0x36>
	__asm__ volatile(
   26cae:	f385 8811 	msr	BASEPRI, r5
   26cb2:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   26cb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   26cba:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   26cbc:	4371      	muls	r1, r6
   26cbe:	440b      	add	r3, r1
   26cc0:	2201      	movs	r2, #1
   26cc2:	641a      	str	r2, [r3, #64]	; 0x40
   26cc4:	f385 8811 	msr	BASEPRI, r5
   26cc8:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   26ccc:	6843      	ldr	r3, [r0, #4]
   26cce:	440b      	add	r3, r1
   26cd0:	685b      	ldr	r3, [r3, #4]
   26cd2:	4798      	blx	r3
	return 0;
   26cd4:	2000      	movs	r0, #0
   26cd6:	e7f0      	b.n	26cba <stop+0x34>

00026cd8 <api_stop>:
	return stop(dev, subsys, CTX_API);
   26cd8:	2280      	movs	r2, #128	; 0x80
   26cda:	f7ff bfd4 	b.w	26c86 <stop>

00026cde <async_start>:
{
   26cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26ce0:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   26ce2:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   26ce4:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   26ce6:	f04f 0540 	mov.w	r5, #64	; 0x40
   26cea:	f3ef 8611 	mrs	r6, BASEPRI
   26cee:	f385 8812 	msr	BASEPRI_MAX, r5
   26cf2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   26cf6:	250c      	movs	r5, #12
   26cf8:	4369      	muls	r1, r5
   26cfa:	440c      	add	r4, r1
   26cfc:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   26cfe:	f005 0c07 	and.w	ip, r5, #7
   26d02:	f1bc 0f01 	cmp.w	ip, #1
   26d06:	d10b      	bne.n	26d20 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   26d08:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   26d0a:	f386 8811 	msr	BASEPRI, r6
   26d0e:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   26d12:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   26d16:	6843      	ldr	r3, [r0, #4]
   26d18:	585b      	ldr	r3, [r3, r1]
   26d1a:	4798      	blx	r3
	return 0;
   26d1c:	2000      	movs	r0, #0
}
   26d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   26d20:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   26d24:	42af      	cmp	r7, r5
   26d26:	f386 8811 	msr	BASEPRI, r6
   26d2a:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   26d2e:	bf0c      	ite	eq
   26d30:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   26d34:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   26d38:	e7f1      	b.n	26d1e <async_start+0x40>

00026d3a <api_start>:
{
   26d3a:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   26d3c:	2480      	movs	r4, #128	; 0x80
   26d3e:	9400      	str	r4, [sp, #0]
   26d40:	f7ff ffcd 	bl	26cde <async_start>
}
   26d44:	b002      	add	sp, #8
   26d46:	bd10      	pop	{r4, pc}

00026d48 <onoff_started_callback>:
{
   26d48:	b410      	push	{r4}
	return &data->mgr[type];
   26d4a:	6900      	ldr	r0, [r0, #16]
   26d4c:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   26d4e:	241c      	movs	r4, #28
   26d50:	fb03 0004 	mla	r0, r3, r4, r0
   26d54:	2100      	movs	r1, #0
}
   26d56:	bc10      	pop	{r4}
	notify(mgr, 0);
   26d58:	4710      	bx	r2

00026d5a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   26d5a:	2000      	movs	r0, #0
   26d5c:	f7f7 bc24 	b.w	1e5a8 <nrfx_clock_start>

00026d60 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   26d60:	2000      	movs	r0, #0
   26d62:	f000 ba27 	b.w	271b4 <nrfx_clock_stop>

00026d66 <blocking_start_callback>:
{
   26d66:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   26d68:	f7f8 bcf0 	b.w	1f74c <z_impl_k_sem_give>

00026d6c <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   26d6c:	2000      	movs	r0, #0
   26d6e:	4770      	bx	lr

00026d70 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   26d70:	b538      	push	{r3, r4, r5, lr}
   26d72:	460c      	mov	r4, r1
   26d74:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   26d76:	f7ef f8a3 	bl	15ec0 <bt_is_ready>
   26d7a:	b128      	cbz	r0, 26d88 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   26d7c:	4629      	mov	r1, r5
   26d7e:	4620      	mov	r0, r4
}
   26d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   26d84:	f7ee ba4e 	b.w	15224 <bt_hci_le_rand>
}
   26d88:	f06f 000a 	mvn.w	r0, #10
   26d8c:	bd38      	pop	{r3, r4, r5, pc}

00026d8e <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   26d8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26d90:	460f      	mov	r7, r1
   26d92:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(buffer != NULL);
	int err = EINVAL;

	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   26d94:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   26d98:	2400      	movs	r4, #0
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   26d9a:	42a6      	cmp	r6, r4
   26d9c:	d803      	bhi.n	26da6 <entropy_cc3xx_rng_get_entropy+0x18>
		}

		offset += chunk_size;
	}

	if (offset == length) {
   26d9e:	d016      	beq.n	26dce <entropy_cc3xx_rng_get_entropy+0x40>
	int err = EINVAL;
   26da0:	2016      	movs	r0, #22
		err = 0;
	}

	return err;
}
   26da2:	b003      	add	sp, #12
   26da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   26da6:	1b33      	subs	r3, r6, r4
   26da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   26dac:	bf38      	it	cc
   26dae:	461d      	movcc	r5, r3
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   26db0:	462a      	mov	r2, r5
   26db2:	ab01      	add	r3, sp, #4
   26db4:	1939      	adds	r1, r7, r4
   26db6:	2000      	movs	r0, #0
   26db8:	f7fa f8cc 	bl	20f54 <nrf_cc3xx_platform_ctr_drbg_get>
		if (ret != 0) {
   26dbc:	b920      	cbnz	r0, 26dc8 <entropy_cc3xx_rng_get_entropy+0x3a>
		if (olen != chunk_size) {
   26dbe:	9b01      	ldr	r3, [sp, #4]
   26dc0:	42ab      	cmp	r3, r5
   26dc2:	d101      	bne.n	26dc8 <entropy_cc3xx_rng_get_entropy+0x3a>
		offset += chunk_size;
   26dc4:	442c      	add	r4, r5
   26dc6:	e7e8      	b.n	26d9a <entropy_cc3xx_rng_get_entropy+0xc>
			return -EINVAL;
   26dc8:	f06f 0015 	mvn.w	r0, #21
   26dcc:	e7e9      	b.n	26da2 <entropy_cc3xx_rng_get_entropy+0x14>
		err = 0;
   26dce:	2000      	movs	r0, #0
   26dd0:	e7e7      	b.n	26da2 <entropy_cc3xx_rng_get_entropy+0x14>

00026dd2 <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   26dd2:	2200      	movs	r2, #0
{
   26dd4:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   26dd6:	4611      	mov	r1, r2
   26dd8:	4610      	mov	r0, r2
   26dda:	f7fa f88b 	bl	20ef4 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   26dde:	2800      	cmp	r0, #0
	}

	return 0;
}
   26de0:	bf18      	it	ne
   26de2:	f06f 0015 	mvnne.w	r0, #21
   26de6:	bd08      	pop	{r3, pc}

00026de8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26de8:	6843      	ldr	r3, [r0, #4]
   26dea:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   26dec:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   26df0:	600b      	str	r3, [r1, #0]
}
   26df2:	2000      	movs	r0, #0
   26df4:	4770      	bx	lr

00026df6 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26df6:	6843      	ldr	r3, [r0, #4]
   26df8:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   26dfa:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   26dfe:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   26e02:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   26e06:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   26e0a:	2000      	movs	r0, #0
   26e0c:	4770      	bx	lr

00026e0e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26e0e:	6843      	ldr	r3, [r0, #4]
   26e10:	685b      	ldr	r3, [r3, #4]
}
   26e12:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   26e14:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   26e18:	4770      	bx	lr

00026e1a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26e1a:	6843      	ldr	r3, [r0, #4]
   26e1c:	685b      	ldr	r3, [r3, #4]
}
   26e1e:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   26e20:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   26e24:	4770      	bx	lr

00026e26 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26e26:	6843      	ldr	r3, [r0, #4]
   26e28:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   26e2a:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   26e2e:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   26e32:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   26e34:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   26e38:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   26e3c:	2000      	movs	r0, #0
   26e3e:	4770      	bx	lr

00026e40 <gpio_nrfx_manage_callback>:
{
   26e40:	b510      	push	{r4, lr}
	return port->data;
   26e42:	6903      	ldr	r3, [r0, #16]
	return list->head;
   26e44:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   26e46:	b1f8      	cbz	r0, 26e88 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26e48:	4288      	cmp	r0, r1
   26e4a:	d119      	bne.n	26e80 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   26e4c:	689c      	ldr	r4, [r3, #8]
	return node->next;
   26e4e:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   26e50:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   26e52:	42a1      	cmp	r1, r4
   26e54:	d100      	bne.n	26e58 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   26e56:	6098      	str	r0, [r3, #8]
	parent->next = child;
   26e58:	2000      	movs	r0, #0
   26e5a:	6008      	str	r0, [r1, #0]
	if (set) {
   26e5c:	b12a      	cbz	r2, 26e6a <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   26e5e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   26e60:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   26e62:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   26e64:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   26e66:	b902      	cbnz	r2, 26e6a <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   26e68:	6099      	str	r1, [r3, #8]
	return 0;
   26e6a:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   26e6c:	e010      	b.n	26e90 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26e6e:	4281      	cmp	r1, r0
   26e70:	d106      	bne.n	26e80 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   26e72:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   26e74:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   26e76:	6898      	ldr	r0, [r3, #8]
   26e78:	4281      	cmp	r1, r0
   26e7a:	d1ed      	bne.n	26e58 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   26e7c:	609c      	str	r4, [r3, #8]
}
   26e7e:	e7eb      	b.n	26e58 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   26e80:	4604      	mov	r4, r0
   26e82:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26e84:	2800      	cmp	r0, #0
   26e86:	d1f2      	bne.n	26e6e <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   26e88:	2a00      	cmp	r2, #0
   26e8a:	d1e8      	bne.n	26e5e <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   26e8c:	f06f 0015 	mvn.w	r0, #21
}
   26e90:	bd10      	pop	{r4, pc}

00026e92 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   26e92:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   26e94:	6843      	ldr	r3, [r0, #4]
   26e96:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   26e98:	7a05      	ldrb	r5, [r0, #8]
   26e9a:	6844      	ldr	r4, [r0, #4]
   26e9c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   26ea0:	42a3      	cmp	r3, r4
   26ea2:	d302      	bcc.n	26eaa <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   26ea4:	f06f 0001 	mvn.w	r0, #1
}
   26ea8:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   26eaa:	795c      	ldrb	r4, [r3, #5]
   26eac:	428c      	cmp	r4, r1
   26eae:	d001      	beq.n	26eb4 <pinctrl_lookup_state+0x22>
		(*state)++;
   26eb0:	3308      	adds	r3, #8
   26eb2:	e7f0      	b.n	26e96 <pinctrl_lookup_state+0x4>
			return 0;
   26eb4:	2000      	movs	r0, #0
   26eb6:	e7f7      	b.n	26ea8 <pinctrl_lookup_state+0x16>

00026eb8 <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
   26eb8:	6902      	ldr	r2, [r0, #16]
{
   26eba:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   26ebc:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   26ec0:	e883 0003 	stmia.w	r3, {r0, r1}
}
   26ec4:	2000      	movs	r0, #0
   26ec6:	4770      	bx	lr

00026ec8 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   26ec8:	6843      	ldr	r3, [r0, #4]
   26eca:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   26ecc:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   26ed0:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   26ed4:	4770      	bx	lr

00026ed6 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   26ed6:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   26ed8:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   26eda:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26edc:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   26ee0:	b150      	cbz	r0, 26ef8 <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
   26ee2:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26ee4:	2000      	movs	r0, #0
   26ee6:	7812      	ldrb	r2, [r2, #0]
   26ee8:	700a      	strb	r2, [r1, #0]
   26eea:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   26eee:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26ef2:	2201      	movs	r2, #1
   26ef4:	601a      	str	r2, [r3, #0]
	return 0;
   26ef6:	4770      	bx	lr
		return -1;
   26ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   26efc:	4770      	bx	lr

00026efe <is_tx_ready.isra.0>:
	return config->uarte_regs;
   26efe:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   26f00:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26f02:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   26f06:	b940      	cbnz	r0, 26f1a <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   26f08:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   26f0a:	079b      	lsls	r3, r3, #30
   26f0c:	d406      	bmi.n	26f1c <is_tx_ready.isra.0+0x1e>
   26f0e:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   26f12:	3800      	subs	r0, #0
   26f14:	bf18      	it	ne
   26f16:	2001      	movne	r0, #1
   26f18:	4770      	bx	lr
   26f1a:	2001      	movs	r0, #1
}
   26f1c:	4770      	bx	lr

00026f1e <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   26f1e:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   26f20:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   26f22:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   26f26:	05c9      	lsls	r1, r1, #23
   26f28:	d518      	bpl.n	26f5c <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26f2a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   26f2e:	b1a9      	cbz	r1, 26f5c <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   26f30:	f04f 0040 	mov.w	r0, #64	; 0x40
   26f34:	f3ef 8111 	mrs	r1, BASEPRI
   26f38:	f380 8812 	msr	BASEPRI_MAX, r0
   26f3c:	f3bf 8f6f 	isb	sy
   26f40:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   26f44:	b130      	cbz	r0, 26f54 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26f46:	2000      	movs	r0, #0
   26f48:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   26f4c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26f50:	2001      	movs	r0, #1
   26f52:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   26f54:	f381 8811 	msr	BASEPRI, r1
   26f58:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   26f5c:	6852      	ldr	r2, [r2, #4]
   26f5e:	06d2      	lsls	r2, r2, #27
   26f60:	d515      	bpl.n	26f8e <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   26f62:	f04f 0140 	mov.w	r1, #64	; 0x40
   26f66:	f3ef 8211 	mrs	r2, BASEPRI
   26f6a:	f381 8812 	msr	BASEPRI_MAX, r1
   26f6e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26f72:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   26f76:	b111      	cbz	r1, 26f7e <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   26f78:	2100      	movs	r1, #0
   26f7a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   26f7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   26f82:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   26f86:	f382 8811 	msr	BASEPRI, r2
   26f8a:	f3bf 8f6f 	isb	sy
}
   26f8e:	4770      	bx	lr

00026f90 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   26f90:	4770      	bx	lr

00026f92 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   26f92:	f100 0350 	add.w	r3, r0, #80	; 0x50
   26f96:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   26f98:	b29b      	uxth	r3, r3
   26f9a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   26f9e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   26fa2:	2200      	movs	r2, #0
   26fa4:	601a      	str	r2, [r3, #0]
   26fa6:	681b      	ldr	r3, [r3, #0]
}
   26fa8:	4770      	bx	lr

00026faa <sys_clock_cycle_get_32>:
{
   26faa:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   26fac:	f7f5 fe4a 	bl	1cc44 <z_nrf_rtc_timer_read>
}
   26fb0:	bd08      	pop	{r3, pc}

00026fb2 <gpio_pin_configure_dt>:
{
   26fb2:	b470      	push	{r4, r5, r6}
   26fb4:	4603      	mov	r3, r0
   26fb6:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
   26fb8:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   26fba:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   26fbc:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
   26fbe:	4322      	orrs	r2, r4
	struct gpio_driver_data *data =
   26fc0:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
   26fc2:	6886      	ldr	r6, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   26fc4:	682b      	ldr	r3, [r5, #0]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   26fc6:	2401      	movs	r4, #1
   26fc8:	408c      	lsls	r4, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   26fca:	f012 0f01 	tst.w	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   26fce:	bf14      	ite	ne
   26fd0:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   26fd2:	43a3      	biceq	r3, r4
   26fd4:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   26fd6:	6833      	ldr	r3, [r6, #0]
}
   26fd8:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
   26fda:	4718      	bx	r3

00026fdc <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   26fdc:	2301      	movs	r3, #1
   26fde:	fa03 f101 	lsl.w	r1, r3, r1
   26fe2:	6903      	ldr	r3, [r0, #16]
   26fe4:	681b      	ldr	r3, [r3, #0]
   26fe6:	4219      	tst	r1, r3
   26fe8:	d003      	beq.n	26ff2 <gpio_pin_set+0x16>
	if (value != 0)	{
   26fea:	b122      	cbz	r2, 26ff6 <gpio_pin_set+0x1a>
	return api->port_clear_bits_raw(port, pins);
   26fec:	6883      	ldr	r3, [r0, #8]
   26fee:	691b      	ldr	r3, [r3, #16]
   26ff0:	e003      	b.n	26ffa <gpio_pin_set+0x1e>
	if (value != 0)	{
   26ff2:	2a00      	cmp	r2, #0
   26ff4:	d0fa      	beq.n	26fec <gpio_pin_set+0x10>
	return api->port_set_bits_raw(port, pins);
   26ff6:	6883      	ldr	r3, [r0, #8]
   26ff8:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   26ffa:	4718      	bx	r3

00026ffc <z_log_msg_static_create.constprop.0>:
   26ffc:	2300      	movs	r3, #0
   26ffe:	f7eb be07 	b.w	12c10 <z_impl_z_log_msg_static_create>

00027002 <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   27002:	2101      	movs	r1, #1
   27004:	f7f6 ba34 	b.w	1d470 <dk_set_led>

00027008 <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   27008:	2100      	movs	r1, #0
   2700a:	f7f6 ba31 	b.w	1d470 <dk_set_led>

0002700e <hci_driver_close>:
{
   2700e:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   27010:	f7f7 f9fa 	bl	1e408 <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   27014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27018:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2701c:	f7f6 fa5a 	bl	1d4d4 <multithreading_lock_acquire>
	if (err) {
   27020:	4604      	mov	r4, r0
   27022:	b920      	cbnz	r0, 2702e <hci_driver_close+0x20>
	err = sdc_disable();
   27024:	f7d9 fc42 	bl	8ac <sdc_disable>
	if (err) {
   27028:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   2702a:	f7f6 fa5b 	bl	1d4e4 <multithreading_lock_release>
}
   2702e:	4620      	mov	r0, r4
   27030:	bd10      	pop	{r4, pc}

00027032 <rand_prio_high_vector_get>:
static uint8_t rand_prio_high_vector_get(uint8_t *p_buff, uint8_t length)
   27032:	f7f6 ba97 	b.w	1d564 <rand_prio_low_vector_get>

00027036 <hci_driver_send>:
{
   27036:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   27038:	8a03      	ldrh	r3, [r0, #16]
{
   2703a:	4605      	mov	r5, r0
	if (!buf->len) {
   2703c:	b373      	cbz	r3, 2709c <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2703e:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   27040:	b1a3      	cbz	r3, 2706c <hci_driver_send+0x36>
   27042:	2b02      	cmp	r3, #2
   27044:	d12a      	bne.n	2709c <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   27046:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2704a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2704e:	f7f6 fa41 	bl	1d4d4 <multithreading_lock_acquire>
	if (!errcode) {
   27052:	4604      	mov	r4, r0
   27054:	b940      	cbnz	r0, 27068 <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   27056:	68e8      	ldr	r0, [r5, #12]
   27058:	f7e5 feac 	bl	cdb4 <sdc_hci_data_put>
   2705c:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2705e:	f7f6 fa41 	bl	1d4e4 <multithreading_lock_release>
		if (errcode) {
   27062:	b1b4      	cbz	r4, 27092 <hci_driver_send+0x5c>
			receive_signal_raise();
   27064:	f7f6 fa92 	bl	1d58c <receive_signal_raise>
}
   27068:	4620      	mov	r0, r4
   2706a:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2706c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27070:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   27074:	f7f6 fa2e 	bl	1d4d4 <multithreading_lock_acquire>
	if (!errcode) {
   27078:	4604      	mov	r4, r0
   2707a:	2800      	cmp	r0, #0
   2707c:	d1f4      	bne.n	27068 <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   2707e:	68e8      	ldr	r0, [r5, #12]
   27080:	f7f6 fc10 	bl	1d8a4 <hci_internal_cmd_put>
   27084:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   27086:	f7f6 fa2d 	bl	1d4e4 <multithreading_lock_release>
	if (errcode) {
   2708a:	2c00      	cmp	r4, #0
   2708c:	d1ec      	bne.n	27068 <hci_driver_send+0x32>
	receive_signal_raise();
   2708e:	f7f6 fa7d 	bl	1d58c <receive_signal_raise>
		net_buf_unref(buf);
   27092:	4628      	mov	r0, r5
   27094:	f7f4 fe98 	bl	1bdc8 <net_buf_unref>
   27098:	2400      	movs	r4, #0
   2709a:	e7e5      	b.n	27068 <hci_driver_send+0x32>
	switch (type) {
   2709c:	f06f 0415 	mvn.w	r4, #21
   270a0:	e7e2      	b.n	27068 <hci_driver_send+0x32>

000270a2 <receive_work_handler>:
	hci_driver_receive_process();
   270a2:	f7f6 bb83 	b.w	1d7ac <hci_driver_receive_process>

000270a6 <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   270a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   270a8:	b08d      	sub	sp, #52	; 0x34
   270aa:	4615      	mov	r5, r2
   270ac:	466a      	mov	r2, sp
   270ae:	f100 0310 	add.w	r3, r0, #16
   270b2:	4616      	mov	r6, r2
		*pdst++ = *psrc--;
   270b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   270b8:	f802 4b01 	strb.w	r4, [r2], #1
	for (; length > 0; length--) {
   270bc:	4283      	cmp	r3, r0
   270be:	d1f9      	bne.n	270b4 <bt_encrypt_le+0xe>
   270c0:	aa04      	add	r2, sp, #16
   270c2:	f101 0310 	add.w	r3, r1, #16
   270c6:	4617      	mov	r7, r2
		*pdst++ = *psrc--;
   270c8:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   270cc:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   270d0:	4299      	cmp	r1, r3
   270d2:	d1f9      	bne.n	270c8 <bt_encrypt_le+0x22>
	LOG_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   270d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   270d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   270dc:	f7f6 f9fa 	bl	1d4d4 <multithreading_lock_acquire>

	if (!errcode) {
   270e0:	4604      	mov	r4, r0
   270e2:	b990      	cbnz	r0, 2710a <bt_encrypt_le+0x64>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   270e4:	aa08      	add	r2, sp, #32
   270e6:	4639      	mov	r1, r7
   270e8:	4630      	mov	r0, r6
   270ea:	f7e5 fba2 	bl	c832 <sdc_soc_ecb_block_encrypt>
   270ee:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   270f0:	f7f6 f9f8 	bl	1d4e4 <multithreading_lock_release>
	}

	if (!errcode) {
   270f4:	b94c      	cbnz	r4, 2710a <bt_encrypt_le+0x64>
   270f6:	1e6b      	subs	r3, r5, #1
	psrc += length - 1;
   270f8:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
   270fc:	350f      	adds	r5, #15
		*pdst++ = *psrc--;
   270fe:	f812 1901 	ldrb.w	r1, [r2], #-1
   27102:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   27106:	429d      	cmp	r5, r3
   27108:	d1f9      	bne.n	270fe <bt_encrypt_le+0x58>

		LOG_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   2710a:	4620      	mov	r0, r4
   2710c:	b00d      	add	sp, #52	; 0x34
   2710e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027110 <sys_memcpy_swap.constprop.0>:
   27110:	f101 0320 	add.w	r3, r1, #32
   27114:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   27116:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2711a:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   2711e:	428b      	cmp	r3, r1
   27120:	d1f9      	bne.n	27116 <sys_memcpy_swap.constprop.0+0x6>
}
   27122:	4770      	bx	lr

00027124 <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   27124:	2100      	movs	r1, #0
   27126:	f7f7 b991 	b.w	1e44c <cmd_le_generate_dhkey>

0002712a <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   2712a:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2712e:	2901      	cmp	r1, #1
   27130:	d801      	bhi.n	27136 <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   27132:	f7f7 b98b 	b.w	1e44c <cmd_le_generate_dhkey>
}
   27136:	2012      	movs	r0, #18
   27138:	4770      	bx	lr

0002713a <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2713a:	4668      	mov	r0, sp
   2713c:	f020 0107 	bic.w	r1, r0, #7
   27140:	468d      	mov	sp, r1
   27142:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   27144:	f7e3 ffca 	bl	b0dc <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   27148:	f7ec fc26 	bl	13998 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   2714c:	f7ec fd0e 	bl	13b6c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   27150:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   27154:	4685      	mov	sp, r0
   27156:	4770      	bx	lr

00027158 <mpsl_low_prio_work_handler>:
{
   27158:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2715a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2715e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27162:	f7f6 f9b7 	bl	1d4d4 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   27166:	f7e9 fad9 	bl	1071c <mpsl_low_priority_process>
}
   2716a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   2716e:	f7f6 b9b9 	b.w	1d4e4 <multithreading_lock_release>

00027172 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   27172:	4668      	mov	r0, sp
   27174:	f020 0107 	bic.w	r1, r0, #7
   27178:	468d      	mov	sp, r1
   2717a:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   2717c:	f7e3 ff64 	bl	b048 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   27180:	f7ec fc0a 	bl	13998 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   27184:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   27188:	4685      	mov	sp, r0
   2718a:	4770      	bx	lr

0002718c <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2718c:	4668      	mov	r0, sp
   2718e:	f020 0107 	bic.w	r1, r0, #7
   27192:	468d      	mov	sp, r1
   27194:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   27196:	f7e1 fbf7 	bl	8988 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   2719a:	f7ec fbfd 	bl	13998 <_arch_isr_direct_pm>
   2719e:	f7ec fce5 	bl	13b6c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   271a2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   271a6:	4685      	mov	sp, r0
   271a8:	4770      	bx	lr

000271aa <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(void)
{
   271aa:	b508      	push	{r3, lr}

	mpsl_fem_init();
   271ac:	f7e9 fc8c 	bl	10ac8 <mpsl_fem_init>

	return 0;
}
   271b0:	2000      	movs	r0, #0
   271b2:	bd08      	pop	{r3, pc}

000271b4 <nrfx_clock_stop>:
	switch (domain) {
   271b4:	2801      	cmp	r0, #1
   271b6:	d101      	bne.n	271bc <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   271b8:	f7e4 be24 	b.w	be04 <mpsl_clock_hfclk_release>
}
   271bc:	4770      	bx	lr

000271be <nrfx_clock_enable>:
}
   271be:	4770      	bx	lr

000271c0 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   271c0:	f7e4 bc2a 	b.w	ba18 <MPSL_IRQ_CLOCK_Handler>

000271c4 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   271c4:	f7f9 be40 	b.w	20e48 <nrf_cc3xx_platform_init>

000271c8 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
   271c8:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   271ca:	f7ec fa29 	bl	13620 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   271ce:	f7ec fafd 	bl	137cc <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
   271d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   271d6:	f7f9 be37 	b.w	20e48 <nrf_cc3xx_platform_init>

000271da <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   271da:	4700      	bx	r0

000271dc <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   271dc:	f000 bc4d 	b.w	27a7a <z_impl_k_busy_wait>

000271e0 <nrf_gpio_reconfigure>:
{
   271e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   271e2:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   271e4:	a801      	add	r0, sp, #4
{
   271e6:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   271ea:	4616      	mov	r6, r2
   271ec:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   271ee:	f7f7 fb2b 	bl	1e848 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   271f2:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   271f4:	f1b6 0c00 	subs.w	ip, r6, #0
   271f8:	bf18      	it	ne
   271fa:	f04f 0c01 	movne.w	ip, #1
   271fe:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   27202:	1e0b      	subs	r3, r1, #0
   27204:	bf18      	it	ne
   27206:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   27208:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2720a:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2720e:	bf14      	ite	ne
   27210:	f04f 0c0c 	movne.w	ip, #12
   27214:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   27218:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2721a:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2721e:	bf14      	ite	ne
   27220:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   27224:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   27228:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2722a:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2722e:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   27232:	bf14      	ite	ne
   27234:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   27238:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2723c:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   27240:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   27244:	b101      	cbz	r1, 27248 <nrf_gpio_reconfigure+0x68>
   27246:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   27248:	b10e      	cbz	r6, 2724e <nrf_gpio_reconfigure+0x6e>
   2724a:	7836      	ldrb	r6, [r6, #0]
   2724c:	0076      	lsls	r6, r6, #1
   2724e:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   27250:	b10d      	cbz	r5, 27256 <nrf_gpio_reconfigure+0x76>
   27252:	782d      	ldrb	r5, [r5, #0]
   27254:	00ad      	lsls	r5, r5, #2
   27256:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   27258:	b10c      	cbz	r4, 2725e <nrf_gpio_reconfigure+0x7e>
   2725a:	7824      	ldrb	r4, [r4, #0]
   2725c:	0224      	lsls	r4, r4, #8
   2725e:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   27260:	b10f      	cbz	r7, 27266 <nrf_gpio_reconfigure+0x86>
   27262:	783f      	ldrb	r7, [r7, #0]
   27264:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   27266:	430c      	orrs	r4, r1
   27268:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   2726a:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   2726e:	b003      	add	sp, #12
   27270:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027272 <nrf_gpio_cfg_sense_set>:
{
   27272:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   27274:	f10d 030f 	add.w	r3, sp, #15
   27278:	9301      	str	r3, [sp, #4]
   2727a:	2300      	movs	r3, #0
{
   2727c:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   27280:	9300      	str	r3, [sp, #0]
   27282:	461a      	mov	r2, r3
   27284:	4619      	mov	r1, r3
   27286:	f7ff ffab 	bl	271e0 <nrf_gpio_reconfigure>
}
   2728a:	b005      	add	sp, #20
   2728c:	f85d fb04 	ldr.w	pc, [sp], #4

00027290 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   27290:	f7f7 be48 	b.w	1ef24 <_DoInit>

00027294 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
   27294:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
   27296:	f7ff fffb 	bl	27290 <SEGGER_RTT_Init>

	return 0;
}
   2729a:	2000      	movs	r0, #0
   2729c:	bd08      	pop	{r3, pc}

0002729e <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   2729e:	4770      	bx	lr

000272a0 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   272a0:	b140      	cbz	r0, 272b4 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   272a2:	68c3      	ldr	r3, [r0, #12]
   272a4:	7858      	ldrb	r0, [r3, #1]
   272a6:	f010 0001 	ands.w	r0, r0, #1
   272aa:	bf1e      	ittt	ne
   272ac:	7818      	ldrbne	r0, [r3, #0]
   272ae:	fab0 f080 	clzne	r0, r0
   272b2:	0940      	lsrne	r0, r0, #5
}
   272b4:	4770      	bx	lr

000272b6 <z_early_memset>:
	(void) memset(dst, c, n);
   272b6:	f7fd bb55 	b.w	24964 <memset>

000272ba <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   272ba:	f7fd bb48 	b.w	2494e <memcpy>

000272be <k_heap_init>:
{
   272be:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   272c0:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   272c4:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   272c8:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   272ca:	f7fc bc32 	b.w	23b32 <sys_heap_init>

000272ce <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   272ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   272d2:	b085      	sub	sp, #20
   272d4:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   272d8:	4607      	mov	r7, r0
   272da:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   272dc:	4650      	mov	r0, sl
   272de:	4621      	mov	r1, r4
{
   272e0:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   272e2:	f000 fbce 	bl	27a82 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   272e6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   272ea:	bf08      	it	eq
   272ec:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   272f0:	4605      	mov	r5, r0
   272f2:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   272f4:	bf04      	itt	eq
   272f6:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   272fa:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   272fe:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   27302:	f04f 0340 	mov.w	r3, #64	; 0x40
   27306:	f3ef 8411 	mrs	r4, BASEPRI
   2730a:	f383 8812 	msr	BASEPRI_MAX, r3
   2730e:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   27312:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   27316:	464a      	mov	r2, r9
   27318:	4641      	mov	r1, r8
   2731a:	4638      	mov	r0, r7
   2731c:	f7fc fba2 	bl	23a64 <sys_heap_aligned_alloc>
   27320:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   27322:	f7f9 f8c5 	bl	204b0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   27326:	9b03      	ldr	r3, [sp, #12]
   27328:	b13b      	cbz	r3, 2733a <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   2732a:	f384 8811 	msr	BASEPRI, r4
   2732e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   27332:	4618      	mov	r0, r3
   27334:	b005      	add	sp, #20
   27336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   2733a:	1a28      	subs	r0, r5, r0
   2733c:	eb66 0101 	sbc.w	r1, r6, r1
   27340:	2801      	cmp	r0, #1
   27342:	f171 0200 	sbcs.w	r2, r1, #0
   27346:	dbf0      	blt.n	2732a <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   27348:	e9cd 0100 	strd	r0, r1, [sp]
   2734c:	465a      	mov	r2, fp
   2734e:	4621      	mov	r1, r4
   27350:	4650      	mov	r0, sl
   27352:	f7f8 fd5b 	bl	1fe0c <z_pend_curr>
	__asm__ volatile(
   27356:	f04f 0340 	mov.w	r3, #64	; 0x40
   2735a:	f3ef 8411 	mrs	r4, BASEPRI
   2735e:	f383 8812 	msr	BASEPRI_MAX, r3
   27362:	f3bf 8f6f 	isb	sy
	return k;
   27366:	e7d6      	b.n	27316 <k_heap_aligned_alloc+0x48>

00027368 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   27368:	b538      	push	{r3, r4, r5, lr}
   2736a:	4604      	mov	r4, r0
   2736c:	f04f 0340 	mov.w	r3, #64	; 0x40
   27370:	f3ef 8511 	mrs	r5, BASEPRI
   27374:	f383 8812 	msr	BASEPRI_MAX, r3
   27378:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   2737c:	f7fc fb3a 	bl	239f4 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   27380:	f104 000c 	add.w	r0, r4, #12
   27384:	f000 fb1a 	bl	279bc <z_unpend_all>
   27388:	b130      	cbz	r0, 27398 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   2738a:	4629      	mov	r1, r5
   2738c:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   27390:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   27394:	f7f8 bd9e 	b.w	1fed4 <z_reschedule>
	__asm__ volatile(
   27398:	f385 8811 	msr	BASEPRI, r5
   2739c:	f3bf 8f6f 	isb	sy
}
   273a0:	bd38      	pop	{r3, r4, r5, pc}

000273a2 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   273a2:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   273a6:	4313      	orrs	r3, r2
   273a8:	f013 0303 	ands.w	r3, r3, #3
   273ac:	d10c      	bne.n	273c8 <create_free_list+0x26>
	slab->free_list = NULL;
   273ae:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   273b0:	6881      	ldr	r1, [r0, #8]
   273b2:	4299      	cmp	r1, r3
   273b4:	d801      	bhi.n	273ba <create_free_list+0x18>
	return 0;
   273b6:	2000      	movs	r0, #0
   273b8:	4770      	bx	lr
		*(char **)p = slab->free_list;
   273ba:	6941      	ldr	r1, [r0, #20]
   273bc:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   273be:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   273c0:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   273c2:	3301      	adds	r3, #1
		p += slab->block_size;
   273c4:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   273c6:	e7f3      	b.n	273b0 <create_free_list+0xe>
		return -EINVAL;
   273c8:	f06f 0015 	mvn.w	r0, #21
}
   273cc:	4770      	bx	lr

000273ce <k_mem_slab_init>:
{
   273ce:	b510      	push	{r4, lr}
	slab->block_size = block_size;
   273d0:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
   273d4:	2300      	movs	r3, #0
	slab->buffer = buffer;
   273d6:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   273d8:	6183      	str	r3, [r0, #24]
{
   273da:	4604      	mov	r4, r0
	rc = create_free_list(slab);
   273dc:	f7ff ffe1 	bl	273a2 <create_free_list>
	if (rc < 0) {
   273e0:	2800      	cmp	r0, #0
   273e2:	bfa8      	it	ge
   273e4:	e9c4 4400 	strdge	r4, r4, [r4]
}
   273e8:	bd10      	pop	{r4, pc}

000273ea <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   273ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   273ec:	4604      	mov	r4, r0
   273ee:	460d      	mov	r5, r1
	__asm__ volatile(
   273f0:	f04f 0340 	mov.w	r3, #64	; 0x40
   273f4:	f3ef 8611 	mrs	r6, BASEPRI
   273f8:	f383 8812 	msr	BASEPRI_MAX, r3
   273fc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   27400:	6947      	ldr	r7, [r0, #20]
   27402:	b977      	cbnz	r7, 27422 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   27404:	f000 fa90 	bl	27928 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   27408:	b158      	cbz	r0, 27422 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2740a:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2740c:	6142      	str	r2, [r0, #20]
   2740e:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   27410:	f000 fa2b 	bl	2786a <z_ready_thread>
			z_reschedule(&slab->lock, key);
   27414:	4631      	mov	r1, r6
   27416:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2741a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   2741e:	f7f8 bd59 	b.w	1fed4 <z_reschedule>
	**(char ***) mem = slab->free_list;
   27422:	682b      	ldr	r3, [r5, #0]
   27424:	6962      	ldr	r2, [r4, #20]
   27426:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   27428:	682b      	ldr	r3, [r5, #0]
   2742a:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   2742c:	69a3      	ldr	r3, [r4, #24]
   2742e:	3b01      	subs	r3, #1
   27430:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   27432:	f386 8811 	msr	BASEPRI, r6
   27436:	f3bf 8f6f 	isb	sy
}
   2743a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002743c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2743c:	f3ef 8005 	mrs	r0, IPSR
}
   27440:	3800      	subs	r0, #0
   27442:	bf18      	it	ne
   27444:	2001      	movne	r0, #1
   27446:	4770      	bx	lr

00027448 <z_impl_k_thread_name_set>:
}
   27448:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2744c:	4770      	bx	lr

0002744e <k_thread_name_get>:
}
   2744e:	2000      	movs	r0, #0
   27450:	4770      	bx	lr

00027452 <z_impl_k_thread_start>:
	z_sched_start(thread);
   27452:	f7f8 bd51 	b.w	1fef8 <z_sched_start>

00027456 <z_pm_save_idle_exit>:
{
   27456:	b508      	push	{r3, lr}
	pm_system_resume();
   27458:	f7eb ff7a 	bl	13350 <pm_system_resume>
}
   2745c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   27460:	f7ff bd96 	b.w	26f90 <sys_clock_idle_exit>

00027464 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   27464:	f990 300e 	ldrsb.w	r3, [r0, #14]
   27468:	428b      	cmp	r3, r1
   2746a:	d001      	beq.n	27470 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2746c:	f7f8 bcec 	b.w	1fe48 <z_set_prio>
}
   27470:	2000      	movs	r0, #0
   27472:	4770      	bx	lr

00027474 <z_impl_k_mutex_init>:
{
   27474:	4603      	mov	r3, r0
	mutex->owner = NULL;
   27476:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   27478:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2747c:	e9c3 3300 	strd	r3, r3, [r3]
}
   27480:	4770      	bx	lr

00027482 <queue_insert>:
{
   27482:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27486:	4699      	mov	r9, r3
   27488:	4604      	mov	r4, r0
   2748a:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2748e:	460d      	mov	r5, r1
   27490:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   27492:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   27496:	f04f 0240 	mov.w	r2, #64	; 0x40
   2749a:	f3ef 8711 	mrs	r7, BASEPRI
   2749e:	f382 8812 	msr	BASEPRI_MAX, r2
   274a2:	f3bf 8f6f 	isb	sy
	if (is_append) {
   274a6:	b103      	cbz	r3, 274aa <queue_insert+0x28>
	return list->tail;
   274a8:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   274aa:	4630      	mov	r0, r6
   274ac:	f000 fa3c 	bl	27928 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   274b0:	b158      	cbz	r0, 274ca <queue_insert+0x48>
   274b2:	2300      	movs	r3, #0
   274b4:	67c3      	str	r3, [r0, #124]	; 0x7c
   274b6:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   274ba:	f000 f9d6 	bl	2786a <z_ready_thread>
	z_reschedule(&queue->lock, key);
   274be:	4630      	mov	r0, r6
   274c0:	4639      	mov	r1, r7
   274c2:	f7f8 fd07 	bl	1fed4 <z_reschedule>
		return 0;
   274c6:	2000      	movs	r0, #0
   274c8:	e00c      	b.n	274e4 <queue_insert+0x62>
	if (alloc) {
   274ca:	f1b9 0f00 	cmp.w	r9, #0
   274ce:	d01b      	beq.n	27508 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   274d0:	2108      	movs	r1, #8
   274d2:	f7f9 f92d 	bl	20730 <z_thread_aligned_alloc>
		if (anode == NULL) {
   274d6:	b938      	cbnz	r0, 274e8 <queue_insert+0x66>
	__asm__ volatile(
   274d8:	f387 8811 	msr	BASEPRI, r7
   274dc:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   274e0:	f06f 000b 	mvn.w	r0, #11
}
   274e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   274e8:	2201      	movs	r2, #1
		anode->data = data;
   274ea:	f8c0 8004 	str.w	r8, [r0, #4]
   274ee:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   274f0:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   274f2:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   274f6:	b95d      	cbnz	r5, 27510 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   274f8:	6822      	ldr	r2, [r4, #0]
   274fa:	430a      	orrs	r2, r1
   274fc:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   274fe:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   27500:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   27502:	b96a      	cbnz	r2, 27520 <queue_insert+0x9e>
	list->tail = node;
   27504:	6060      	str	r0, [r4, #4]
}
   27506:	e00b      	b.n	27520 <queue_insert+0x9e>
	node->next_and_flags = flags;
   27508:	f8c8 9000 	str.w	r9, [r8]
}
   2750c:	4640      	mov	r0, r8
   2750e:	e7ef      	b.n	274f0 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   27510:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   27512:	2a03      	cmp	r2, #3
   27514:	d810      	bhi.n	27538 <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   27516:	6001      	str	r1, [r0, #0]
	return list->tail;
   27518:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2751a:	b939      	cbnz	r1, 2752c <queue_insert+0xaa>
	list->head = node;
   2751c:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   27520:	2104      	movs	r1, #4
   27522:	f104 0010 	add.w	r0, r4, #16
   27526:	f000 fc37 	bl	27d98 <z_handle_obj_poll_events>
   2752a:	e7c8      	b.n	274be <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2752c:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2752e:	f002 0203 	and.w	r2, r2, #3
   27532:	4302      	orrs	r2, r0
   27534:	600a      	str	r2, [r1, #0]
   27536:	e7e5      	b.n	27504 <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   27538:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2753c:	430a      	orrs	r2, r1
   2753e:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27540:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   27542:	f002 0203 	and.w	r2, r2, #3
   27546:	ea40 0302 	orr.w	r3, r0, r2
   2754a:	602b      	str	r3, [r5, #0]
}
   2754c:	e7e8      	b.n	27520 <queue_insert+0x9e>

0002754e <z_queue_node_peek>:
{
   2754e:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   27550:	4604      	mov	r4, r0
   27552:	b130      	cbz	r0, 27562 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27554:	6802      	ldr	r2, [r0, #0]
   27556:	0793      	lsls	r3, r2, #30
   27558:	d003      	beq.n	27562 <z_queue_node_peek+0x14>
		ret = anode->data;
   2755a:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2755c:	b109      	cbz	r1, 27562 <z_queue_node_peek+0x14>
			k_free(anode);
   2755e:	f000 fc31 	bl	27dc4 <k_free>
}
   27562:	4620      	mov	r0, r4
   27564:	bd10      	pop	{r4, pc}

00027566 <z_impl_k_queue_init>:
	list->head = NULL;
   27566:	2300      	movs	r3, #0
	list->tail = NULL;
   27568:	e9c0 3300 	strd	r3, r3, [r0]
   2756c:	f100 0308 	add.w	r3, r0, #8
   27570:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   27574:	f100 0310 	add.w	r3, r0, #16
   27578:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   2757c:	4770      	bx	lr

0002757e <k_queue_append>:
{
   2757e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   27580:	2301      	movs	r3, #1
   27582:	9300      	str	r3, [sp, #0]
   27584:	2300      	movs	r3, #0
{
   27586:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   27588:	4619      	mov	r1, r3
   2758a:	f7ff ff7a 	bl	27482 <queue_insert>
}
   2758e:	b003      	add	sp, #12
   27590:	f85d fb04 	ldr.w	pc, [sp], #4

00027594 <k_queue_prepend>:
{
   27594:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   27596:	2300      	movs	r3, #0
{
   27598:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2759a:	9300      	str	r3, [sp, #0]
   2759c:	4619      	mov	r1, r3
   2759e:	f7ff ff70 	bl	27482 <queue_insert>
}
   275a2:	b003      	add	sp, #12
   275a4:	f85d fb04 	ldr.w	pc, [sp], #4

000275a8 <z_impl_k_queue_peek_head>:
	return true;
}

void *z_impl_k_queue_peek_head(struct k_queue *queue)
{
	void *ret = z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   275a8:	6800      	ldr	r0, [r0, #0]
   275aa:	2100      	movs	r1, #0
   275ac:	f7ff bfcf 	b.w	2754e <z_queue_node_peek>

000275b0 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   275b0:	b15a      	cbz	r2, 275ca <z_impl_k_sem_init+0x1a>
   275b2:	428a      	cmp	r2, r1
   275b4:	d309      	bcc.n	275ca <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   275b6:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   275ba:	e9c0 1202 	strd	r1, r2, [r0, #8]
   275be:	e9c0 0000 	strd	r0, r0, [r0]
   275c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   275c6:	2000      	movs	r0, #0
   275c8:	4770      	bx	lr
		return -EINVAL;
   275ca:	f06f 0015 	mvn.w	r0, #21
}
   275ce:	4770      	bx	lr

000275d0 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   275d0:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   275d2:	2301      	movs	r3, #1
   275d4:	408b      	lsls	r3, r1
   275d6:	ea22 0303 	bic.w	r3, r2, r3
   275da:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   275dc:	fa22 f001 	lsr.w	r0, r2, r1
}
   275e0:	f000 0001 	and.w	r0, r0, #1
   275e4:	4770      	bx	lr

000275e6 <unschedule_locked>:
{
   275e6:	b510      	push	{r4, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   275e8:	2103      	movs	r1, #3
{
   275ea:	4604      	mov	r4, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   275ec:	300c      	adds	r0, #12
   275ee:	f7ff ffef 	bl	275d0 <flag_test_and_clear>
   275f2:	b130      	cbz	r0, 27602 <unschedule_locked+0x1c>
		ret = z_abort_timeout(&dwork->timeout) == 0;
   275f4:	f104 0010 	add.w	r0, r4, #16
   275f8:	f000 fa13 	bl	27a22 <z_abort_timeout>
   275fc:	fab0 f080 	clz	r0, r0
   27600:	0940      	lsrs	r0, r0, #5
}
   27602:	bd10      	pop	{r4, pc}

00027604 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   27604:	b120      	cbz	r0, 27610 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   27606:	2200      	movs	r2, #0
   27608:	4611      	mov	r1, r2
   2760a:	3088      	adds	r0, #136	; 0x88
   2760c:	f000 b9e6 	b.w	279dc <z_sched_wake>
}
   27610:	4770      	bx	lr

00027612 <cancel_async_locked>:
{
   27612:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   27614:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   27616:	f3c3 0640 	ubfx	r6, r3, #1, #1
   2761a:	079b      	lsls	r3, r3, #30
{
   2761c:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2761e:	d416      	bmi.n	2764e <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   27620:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   27622:	2102      	movs	r1, #2
   27624:	300c      	adds	r0, #12
   27626:	f7ff ffd3 	bl	275d0 <flag_test_and_clear>
   2762a:	b180      	cbz	r0, 2764e <cancel_async_locked+0x3c>
	return list->head;
   2762c:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27630:	b16a      	cbz	r2, 2764e <cancel_async_locked+0x3c>
   27632:	4294      	cmp	r4, r2
   27634:	d11d      	bne.n	27672 <cancel_async_locked+0x60>
	return node->next;
   27636:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   27638:	b99e      	cbnz	r6, 27662 <cancel_async_locked+0x50>
   2763a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
	list->head = node;
   2763e:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   27642:	429c      	cmp	r4, r3
   27644:	d101      	bne.n	2764a <cancel_async_locked+0x38>
	list->tail = node;
   27646:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
	parent->next = child;
   2764a:	2300      	movs	r3, #0
   2764c:	6023      	str	r3, [r4, #0]
	return *flagp;
   2764e:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   27650:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   27654:	bf1e      	ittt	ne
   27656:	f043 0302 	orrne.w	r3, r3, #2
   2765a:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2765c:	f040 0002 	orrne.w	r0, r0, #2
}
   27660:	bd70      	pop	{r4, r5, r6, pc}
   27662:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   27664:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
   27668:	4294      	cmp	r4, r2
	list->tail = node;
   2766a:	bf08      	it	eq
   2766c:	f8c5 6084 	streq.w	r6, [r5, #132]	; 0x84
}
   27670:	e7eb      	b.n	2764a <cancel_async_locked+0x38>
	return node->next;
   27672:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27674:	6812      	ldr	r2, [r2, #0]
   27676:	e7db      	b.n	27630 <cancel_async_locked+0x1e>

00027678 <work_timeout>:
{
   27678:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2767a:	4604      	mov	r4, r0
	__asm__ volatile(
   2767c:	f04f 0340 	mov.w	r3, #64	; 0x40
   27680:	f3ef 8511 	mrs	r5, BASEPRI
   27684:	f383 8812 	msr	BASEPRI_MAX, r3
   27688:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   2768c:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2768e:	f1a0 0610 	sub.w	r6, r0, #16
   27692:	2103      	movs	r1, #3
   27694:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   27696:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   27698:	f7ff ff9a 	bl	275d0 <flag_test_and_clear>
   2769c:	b128      	cbz	r0, 276aa <work_timeout+0x32>
		queue = dw->queue;
   2769e:	69a3      	ldr	r3, [r4, #24]
   276a0:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   276a2:	a901      	add	r1, sp, #4
   276a4:	4630      	mov	r0, r6
   276a6:	f7f8 f973 	bl	1f990 <submit_to_queue_locked>
	__asm__ volatile(
   276aa:	f385 8811 	msr	BASEPRI, r5
   276ae:	f3bf 8f6f 	isb	sy
}
   276b2:	b002      	add	sp, #8
   276b4:	bd70      	pop	{r4, r5, r6, pc}

000276b6 <k_work_init>:
{
   276b6:	b538      	push	{r3, r4, r5, lr}
   276b8:	4604      	mov	r4, r0
   276ba:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   276bc:	2210      	movs	r2, #16
   276be:	2100      	movs	r1, #0
   276c0:	f7fd f950 	bl	24964 <memset>
   276c4:	6065      	str	r5, [r4, #4]
}
   276c6:	bd38      	pop	{r3, r4, r5, pc}

000276c8 <k_work_busy_get>:
	__asm__ volatile(
   276c8:	f04f 0240 	mov.w	r2, #64	; 0x40
   276cc:	f3ef 8311 	mrs	r3, BASEPRI
   276d0:	f382 8812 	msr	BASEPRI_MAX, r2
   276d4:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   276d8:	68c0      	ldr	r0, [r0, #12]
   276da:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   276de:	f383 8811 	msr	BASEPRI, r3
   276e2:	f3bf 8f6f 	isb	sy
}
   276e6:	4770      	bx	lr

000276e8 <z_work_submit_to_queue>:
{
   276e8:	b513      	push	{r0, r1, r4, lr}
   276ea:	9001      	str	r0, [sp, #4]
   276ec:	4608      	mov	r0, r1
	__asm__ volatile(
   276ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   276f2:	f3ef 8411 	mrs	r4, BASEPRI
   276f6:	f383 8812 	msr	BASEPRI_MAX, r3
   276fa:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   276fe:	a901      	add	r1, sp, #4
   27700:	f7f8 f946 	bl	1f990 <submit_to_queue_locked>
	__asm__ volatile(
   27704:	f384 8811 	msr	BASEPRI, r4
   27708:	f3bf 8f6f 	isb	sy
}
   2770c:	b002      	add	sp, #8
   2770e:	bd10      	pop	{r4, pc}

00027710 <k_work_submit_to_queue>:
{
   27710:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   27712:	f7ff ffe9 	bl	276e8 <z_work_submit_to_queue>
	if (ret > 0) {
   27716:	1e04      	subs	r4, r0, #0
   27718:	dd09      	ble.n	2772e <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   2771a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2771e:	f3ef 8011 	mrs	r0, BASEPRI
   27722:	f383 8812 	msr	BASEPRI_MAX, r3
   27726:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2772a:	f000 f931 	bl	27990 <z_reschedule_irqlock>
}
   2772e:	4620      	mov	r0, r4
   27730:	bd10      	pop	{r4, pc}

00027732 <k_work_queue_init>:
{
   27732:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   27734:	22a0      	movs	r2, #160	; 0xa0
   27736:	2100      	movs	r1, #0
   27738:	f7fd f914 	bl	24964 <memset>
}
   2773c:	bd08      	pop	{r3, pc}

0002773e <k_work_init_delayable>:
{
   2773e:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   27740:	2230      	movs	r2, #48	; 0x30
{
   27742:	4604      	mov	r4, r0
   27744:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   27746:	2100      	movs	r1, #0
   27748:	f7fd f90c 	bl	24964 <memset>
   2774c:	f44f 7380 	mov.w	r3, #256	; 0x100
   27750:	6065      	str	r5, [r4, #4]
   27752:	60e3      	str	r3, [r4, #12]
}
   27754:	bd38      	pop	{r3, r4, r5, pc}

00027756 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   27756:	f7ff bfb7 	b.w	276c8 <k_work_busy_get>

0002775a <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2775a:	b538      	push	{r3, r4, r5, lr}
   2775c:	4604      	mov	r4, r0
   2775e:	f04f 0340 	mov.w	r3, #64	; 0x40
   27762:	f3ef 8511 	mrs	r5, BASEPRI
   27766:	f383 8812 	msr	BASEPRI_MAX, r3
   2776a:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   2776e:	f7ff ff3a 	bl	275e6 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   27772:	4620      	mov	r0, r4
   27774:	f7ff ff4d 	bl	27612 <cancel_async_locked>
	__asm__ volatile(
   27778:	f385 8811 	msr	BASEPRI, r5
   2777c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   27780:	bd38      	pop	{r3, r4, r5, pc}

00027782 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   27782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27784:	4604      	mov	r4, r0
   27786:	460d      	mov	r5, r1
	__asm__ volatile(
   27788:	f04f 0340 	mov.w	r3, #64	; 0x40
   2778c:	f3ef 8611 	mrs	r6, BASEPRI
   27790:	f383 8812 	msr	BASEPRI_MAX, r3
   27794:	f3bf 8f6f 	isb	sy
	return *flagp;
   27798:	68c3      	ldr	r3, [r0, #12]
   2779a:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2779e:	2b00      	cmp	r3, #0
   277a0:	bf14      	ite	ne
   277a2:	2701      	movne	r7, #1
   277a4:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   277a6:	d105      	bne.n	277b4 <k_work_cancel_delayable_sync+0x32>
	__asm__ volatile(
   277a8:	f386 8811 	msr	BASEPRI, r6
   277ac:	f3bf 8f6f 	isb	sy
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   277b0:	4638      	mov	r0, r7
   277b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)unschedule_locked(dwork);
   277b4:	f7ff ff17 	bl	275e6 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   277b8:	4620      	mov	r0, r4
   277ba:	f7ff ff2a 	bl	27612 <cancel_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   277be:	4629      	mov	r1, r5
   277c0:	4620      	mov	r0, r4
   277c2:	f7f8 f8c7 	bl	1f954 <cancel_sync_locked>
   277c6:	f386 8811 	msr	BASEPRI, r6
   277ca:	f3bf 8f6f 	isb	sy
	if (need_wait) {
   277ce:	2800      	cmp	r0, #0
   277d0:	d0ee      	beq.n	277b0 <k_work_cancel_delayable_sync+0x2e>
	return z_impl_k_sem_take(sem, timeout);
   277d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   277d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   277da:	f105 0008 	add.w	r0, r5, #8
   277de:	f7f7 ffdb 	bl	1f798 <z_impl_k_sem_take>
   277e2:	e7e5      	b.n	277b0 <k_work_cancel_delayable_sync+0x2e>

000277e4 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   277e4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   277e8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   277ea:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   277ec:	2300      	movs	r3, #0
	node->prev = NULL;
   277ee:	e9c0 3300 	strd	r3, r3, [r0]
}
   277f2:	4770      	bx	lr

000277f4 <unpend_thread_no_timeout>:
{
   277f4:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   277f6:	f7ff fff5 	bl	277e4 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   277fa:	7b43      	ldrb	r3, [r0, #13]
   277fc:	f023 0302 	bic.w	r3, r3, #2
   27800:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   27802:	2300      	movs	r3, #0
   27804:	6083      	str	r3, [r0, #8]
}
   27806:	bd08      	pop	{r3, pc}

00027808 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   27808:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2780c:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   27810:	4283      	cmp	r3, r0
		return b2 - b1;
   27812:	bf14      	ite	ne
   27814:	1ac0      	subne	r0, r0, r3
	return 0;
   27816:	2000      	moveq	r0, #0
}
   27818:	4770      	bx	lr

0002781a <add_to_waitq_locked>:
{
   2781a:	b538      	push	{r3, r4, r5, lr}
   2781c:	4604      	mov	r4, r0
   2781e:	460d      	mov	r5, r1
	unready_thread(thread);
   27820:	f7f8 fa94 	bl	1fd4c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   27824:	7b63      	ldrb	r3, [r4, #13]
   27826:	f043 0302 	orr.w	r3, r3, #2
   2782a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2782c:	b1e5      	cbz	r5, 27868 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   2782e:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   27830:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27832:	429d      	cmp	r5, r3
   27834:	d109      	bne.n	2784a <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   27836:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   27838:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2783c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2783e:	606c      	str	r4, [r5, #4]
}
   27840:	e012      	b.n	27868 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   27842:	686a      	ldr	r2, [r5, #4]
   27844:	4293      	cmp	r3, r2
   27846:	d0f6      	beq.n	27836 <add_to_waitq_locked+0x1c>
   27848:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2784a:	2b00      	cmp	r3, #0
   2784c:	d0f3      	beq.n	27836 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   2784e:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   27852:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   27856:	428a      	cmp	r2, r1
   27858:	d0f3      	beq.n	27842 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2785a:	4291      	cmp	r1, r2
   2785c:	ddf1      	ble.n	27842 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   2785e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   27860:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   27864:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   27866:	605c      	str	r4, [r3, #4]
}
   27868:	bd38      	pop	{r3, r4, r5, pc}

0002786a <z_ready_thread>:
{
   2786a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2786c:	f04f 0340 	mov.w	r3, #64	; 0x40
   27870:	f3ef 8411 	mrs	r4, BASEPRI
   27874:	f383 8812 	msr	BASEPRI_MAX, r3
   27878:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   2787c:	f7f8 fa32 	bl	1fce4 <ready_thread>
	__asm__ volatile(
   27880:	f384 8811 	msr	BASEPRI, r4
   27884:	f3bf 8f6f 	isb	sy
}
   27888:	bd10      	pop	{r4, pc}

0002788a <z_unpend_thread_no_timeout>:
{
   2788a:	b508      	push	{r3, lr}
	__asm__ volatile(
   2788c:	f04f 0240 	mov.w	r2, #64	; 0x40
   27890:	f3ef 8111 	mrs	r1, BASEPRI
   27894:	f382 8812 	msr	BASEPRI_MAX, r2
   27898:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   2789c:	6883      	ldr	r3, [r0, #8]
   2789e:	b10b      	cbz	r3, 278a4 <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
   278a0:	f7ff ffa8 	bl	277f4 <unpend_thread_no_timeout>
	__asm__ volatile(
   278a4:	f381 8811 	msr	BASEPRI, r1
   278a8:	f3bf 8f6f 	isb	sy
}
   278ac:	bd08      	pop	{r3, pc}

000278ae <z_sched_wake_thread>:
{
   278ae:	b538      	push	{r3, r4, r5, lr}
   278b0:	4604      	mov	r4, r0
	__asm__ volatile(
   278b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   278b6:	f3ef 8511 	mrs	r5, BASEPRI
   278ba:	f383 8812 	msr	BASEPRI_MAX, r3
   278be:	f3bf 8f6f 	isb	sy
		if (!killed) {
   278c2:	7b43      	ldrb	r3, [r0, #13]
   278c4:	f013 0f28 	tst.w	r3, #40	; 0x28
   278c8:	d10b      	bne.n	278e2 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
   278ca:	6883      	ldr	r3, [r0, #8]
   278cc:	b10b      	cbz	r3, 278d2 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
   278ce:	f7ff ff91 	bl	277f4 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   278d2:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   278d4:	b951      	cbnz	r1, 278ec <z_sched_wake_thread+0x3e>
   278d6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   278da:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
   278dc:	4620      	mov	r0, r4
   278de:	f7f8 fa01 	bl	1fce4 <ready_thread>
	__asm__ volatile(
   278e2:	f385 8811 	msr	BASEPRI, r5
   278e6:	f3bf 8f6f 	isb	sy
}
   278ea:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   278ec:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   278f0:	e7f3      	b.n	278da <z_sched_wake_thread+0x2c>

000278f2 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   278f2:	2101      	movs	r1, #1
   278f4:	3818      	subs	r0, #24
   278f6:	f7ff bfda 	b.w	278ae <z_sched_wake_thread>

000278fa <z_unpend1_no_timeout>:
{
   278fa:	b508      	push	{r3, lr}
   278fc:	4603      	mov	r3, r0
	__asm__ volatile(
   278fe:	f04f 0240 	mov.w	r2, #64	; 0x40
   27902:	f3ef 8111 	mrs	r1, BASEPRI
   27906:	f382 8812 	msr	BASEPRI_MAX, r2
   2790a:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2790e:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27910:	4283      	cmp	r3, r0
   27912:	d007      	beq.n	27924 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   27914:	b108      	cbz	r0, 2791a <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   27916:	f7ff ff6d 	bl	277f4 <unpend_thread_no_timeout>
	__asm__ volatile(
   2791a:	f381 8811 	msr	BASEPRI, r1
   2791e:	f3bf 8f6f 	isb	sy
}
   27922:	bd08      	pop	{r3, pc}
   27924:	2000      	movs	r0, #0
   27926:	e7f8      	b.n	2791a <z_unpend1_no_timeout+0x20>

00027928 <z_unpend_first_thread>:
{
   27928:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2792a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2792e:	f3ef 8511 	mrs	r5, BASEPRI
   27932:	f383 8812 	msr	BASEPRI_MAX, r3
   27936:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2793a:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2793c:	42a0      	cmp	r0, r4
   2793e:	d00d      	beq.n	2795c <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   27940:	b134      	cbz	r4, 27950 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   27942:	4620      	mov	r0, r4
   27944:	f7ff ff56 	bl	277f4 <unpend_thread_no_timeout>
   27948:	f104 0018 	add.w	r0, r4, #24
   2794c:	f000 f869 	bl	27a22 <z_abort_timeout>
	__asm__ volatile(
   27950:	f385 8811 	msr	BASEPRI, r5
   27954:	f3bf 8f6f 	isb	sy
}
   27958:	4620      	mov	r0, r4
   2795a:	bd38      	pop	{r3, r4, r5, pc}
   2795c:	2400      	movs	r4, #0
   2795e:	e7f7      	b.n	27950 <z_unpend_first_thread+0x28>

00027960 <z_unpend_thread>:
{
   27960:	b510      	push	{r4, lr}
   27962:	4601      	mov	r1, r0
	__asm__ volatile(
   27964:	f04f 0340 	mov.w	r3, #64	; 0x40
   27968:	f3ef 8411 	mrs	r4, BASEPRI
   2796c:	f383 8812 	msr	BASEPRI_MAX, r3
   27970:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   27974:	6883      	ldr	r3, [r0, #8]
   27976:	b10b      	cbz	r3, 2797c <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
   27978:	f7ff ff3c 	bl	277f4 <unpend_thread_no_timeout>
	__asm__ volatile(
   2797c:	f384 8811 	msr	BASEPRI, r4
   27980:	f3bf 8f6f 	isb	sy
}
   27984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27988:	f101 0018 	add.w	r0, r1, #24
   2798c:	f000 b849 	b.w	27a22 <z_abort_timeout>

00027990 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   27990:	4603      	mov	r3, r0
   27992:	b920      	cbnz	r0, 2799e <z_reschedule_irqlock+0xe>
   27994:	f3ef 8205 	mrs	r2, IPSR
   27998:	b90a      	cbnz	r2, 2799e <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   2799a:	f7ec b82b 	b.w	139f4 <arch_swap>
   2799e:	f383 8811 	msr	BASEPRI, r3
   279a2:	f3bf 8f6f 	isb	sy
}
   279a6:	4770      	bx	lr

000279a8 <z_reschedule_unlocked>:
	__asm__ volatile(
   279a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   279ac:	f3ef 8011 	mrs	r0, BASEPRI
   279b0:	f383 8812 	msr	BASEPRI_MAX, r3
   279b4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   279b8:	f7ff bfea 	b.w	27990 <z_reschedule_irqlock>

000279bc <z_unpend_all>:
{
   279bc:	b538      	push	{r3, r4, r5, lr}
   279be:	4605      	mov	r5, r0
	int need_sched = 0;
   279c0:	2000      	movs	r0, #0
	return list->head == list;
   279c2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   279c4:	42a5      	cmp	r5, r4
   279c6:	d000      	beq.n	279ca <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   279c8:	b904      	cbnz	r4, 279cc <z_unpend_all+0x10>
}
   279ca:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   279cc:	4620      	mov	r0, r4
   279ce:	f7ff ffc7 	bl	27960 <z_unpend_thread>
		z_ready_thread(thread);
   279d2:	4620      	mov	r0, r4
   279d4:	f7ff ff49 	bl	2786a <z_ready_thread>
		need_sched = 1;
   279d8:	2001      	movs	r0, #1
   279da:	e7f2      	b.n	279c2 <z_unpend_all+0x6>

000279dc <z_sched_wake>:
{
   279dc:	b538      	push	{r3, r4, r5, lr}
   279de:	f04f 0340 	mov.w	r3, #64	; 0x40
   279e2:	f3ef 8511 	mrs	r5, BASEPRI
   279e6:	f383 8812 	msr	BASEPRI_MAX, r3
   279ea:	f3bf 8f6f 	isb	sy
	return list->head == list;
   279ee:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   279f0:	42a0      	cmp	r0, r4
   279f2:	d012      	beq.n	27a1a <z_sched_wake+0x3e>
		if (thread != NULL) {
   279f4:	b19c      	cbz	r4, 27a1e <z_sched_wake+0x42>
   279f6:	67e1      	str	r1, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   279f8:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   279fa:	4620      	mov	r0, r4
   279fc:	f7ff fefa 	bl	277f4 <unpend_thread_no_timeout>
   27a00:	f104 0018 	add.w	r0, r4, #24
   27a04:	f000 f80d 	bl	27a22 <z_abort_timeout>
			ready_thread(thread);
   27a08:	4620      	mov	r0, r4
   27a0a:	f7f8 f96b 	bl	1fce4 <ready_thread>
			ret = true;
   27a0e:	2001      	movs	r0, #1
	__asm__ volatile(
   27a10:	f385 8811 	msr	BASEPRI, r5
   27a14:	f3bf 8f6f 	isb	sy
}
   27a18:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   27a1a:	2000      	movs	r0, #0
   27a1c:	e7f8      	b.n	27a10 <z_sched_wake+0x34>
   27a1e:	4620      	mov	r0, r4
   27a20:	e7f6      	b.n	27a10 <z_sched_wake+0x34>

00027a22 <z_abort_timeout>:
{
   27a22:	b510      	push	{r4, lr}
	__asm__ volatile(
   27a24:	f04f 0240 	mov.w	r2, #64	; 0x40
   27a28:	f3ef 8411 	mrs	r4, BASEPRI
   27a2c:	f382 8812 	msr	BASEPRI_MAX, r2
   27a30:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   27a34:	6803      	ldr	r3, [r0, #0]
   27a36:	b13b      	cbz	r3, 27a48 <z_abort_timeout+0x26>
			remove_timeout(to);
   27a38:	f7f8 fc3e 	bl	202b8 <remove_timeout>
			ret = 0;
   27a3c:	2000      	movs	r0, #0
	__asm__ volatile(
   27a3e:	f384 8811 	msr	BASEPRI, r4
   27a42:	f3bf 8f6f 	isb	sy
}
   27a46:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   27a48:	f06f 0015 	mvn.w	r0, #21
   27a4c:	e7f7      	b.n	27a3e <z_abort_timeout+0x1c>

00027a4e <z_get_next_timeout_expiry>:
{
   27a4e:	b510      	push	{r4, lr}
	__asm__ volatile(
   27a50:	f04f 0340 	mov.w	r3, #64	; 0x40
   27a54:	f3ef 8411 	mrs	r4, BASEPRI
   27a58:	f383 8812 	msr	BASEPRI_MAX, r3
   27a5c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   27a60:	f7f8 fc0a 	bl	20278 <next_timeout>
	__asm__ volatile(
   27a64:	f384 8811 	msr	BASEPRI, r4
   27a68:	f3bf 8f6f 	isb	sy
}
   27a6c:	bd10      	pop	{r4, pc}

00027a6e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   27a6e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   27a70:	f7f8 fd1e 	bl	204b0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   27a74:	bd08      	pop	{r3, pc}

00027a76 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   27a76:	f7f8 bd1b 	b.w	204b0 <sys_clock_tick_get>

00027a7a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   27a7a:	b108      	cbz	r0, 27a80 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   27a7c:	f7ec bd50 	b.w	14520 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   27a80:	4770      	bx	lr

00027a82 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27a82:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   27a86:	bf08      	it	eq
   27a88:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   27a8c:	b538      	push	{r3, r4, r5, lr}
   27a8e:	460c      	mov	r4, r1
   27a90:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27a92:	d014      	beq.n	27abe <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   27a94:	4308      	orrs	r0, r1
   27a96:	d103      	bne.n	27aa0 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   27a98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   27a9c:	f7f8 bd08 	b.w	204b0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   27aa0:	f06f 0001 	mvn.w	r0, #1
   27aa4:	1b40      	subs	r0, r0, r5
   27aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27aaa:	eb63 0101 	sbc.w	r1, r3, r1
   27aae:	2900      	cmp	r1, #0
   27ab0:	da04      	bge.n	27abc <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   27ab2:	f7f8 fcfd 	bl	204b0 <sys_clock_tick_get>
   27ab6:	1940      	adds	r0, r0, r5
   27ab8:	eb41 0104 	adc.w	r1, r1, r4
}
   27abc:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   27abe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27ac2:	4601      	mov	r1, r0
   27ac4:	e7fa      	b.n	27abc <sys_clock_timeout_end_calc+0x3a>

00027ac6 <k_timer_init>:
	timer->status = 0U;
   27ac6:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   27ac8:	e9c0 1208 	strd	r1, r2, [r0, #32]
   27acc:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   27ad0:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   27ad4:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   27ad8:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   27ada:	6343      	str	r3, [r0, #52]	; 0x34
}
   27adc:	4770      	bx	lr

00027ade <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   27ade:	b510      	push	{r4, lr}
   27ae0:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   27ae2:	f7ff ff9e 	bl	27a22 <z_abort_timeout>

	if (inactive) {
   27ae6:	b9b0      	cbnz	r0, 27b16 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   27ae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   27aea:	b10b      	cbz	r3, 27af0 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   27aec:	4620      	mov	r0, r4
   27aee:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   27af0:	f104 0018 	add.w	r0, r4, #24
   27af4:	f7ff ff01 	bl	278fa <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   27af8:	b168      	cbz	r0, 27b16 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   27afa:	f7ff feb6 	bl	2786a <z_ready_thread>
	__asm__ volatile(
   27afe:	f04f 0340 	mov.w	r3, #64	; 0x40
   27b02:	f3ef 8011 	mrs	r0, BASEPRI
   27b06:	f383 8812 	msr	BASEPRI_MAX, r3
   27b0a:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   27b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27b12:	f7ff bf3d 	b.w	27990 <z_reschedule_irqlock>
   27b16:	bd10      	pop	{r4, pc}

00027b18 <add_event>:
{
   27b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27b1a:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27b1c:	e9d0 1300 	ldrd	r1, r3, [r0]
   27b20:	4288      	cmp	r0, r1
   27b22:	4604      	mov	r4, r0
   27b24:	d105      	bne.n	27b32 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   27b26:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   27b28:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   27b2c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   27b2e:	6065      	str	r5, [r4, #4]
   27b30:	e01d      	b.n	27b6e <add_event+0x56>
	if ((pending == NULL) ||
   27b32:	2b00      	cmp	r3, #0
   27b34:	d0f7      	beq.n	27b26 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   27b36:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   27b38:	b100      	cbz	r0, 27b3c <add_event+0x24>
   27b3a:	3860      	subs	r0, #96	; 0x60
   27b3c:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   27b40:	4639      	mov	r1, r7
   27b42:	f7ff fe61 	bl	27808 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   27b46:	2800      	cmp	r0, #0
   27b48:	dced      	bgt.n	27b26 <add_event+0xe>
	return list->head == list;
   27b4a:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27b4c:	42b4      	cmp	r4, r6
   27b4e:	d0ea      	beq.n	27b26 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27b50:	2e00      	cmp	r6, #0
   27b52:	d0e8      	beq.n	27b26 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   27b54:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   27b56:	b101      	cbz	r1, 27b5a <add_event+0x42>
   27b58:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   27b5a:	4638      	mov	r0, r7
   27b5c:	f7ff fe54 	bl	27808 <z_sched_prio_cmp>
   27b60:	2800      	cmp	r0, #0
   27b62:	dd05      	ble.n	27b70 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   27b64:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   27b66:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   27b6a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   27b6c:	6075      	str	r5, [r6, #4]
}
   27b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   27b70:	6863      	ldr	r3, [r4, #4]
   27b72:	429e      	cmp	r6, r3
   27b74:	d0d7      	beq.n	27b26 <add_event+0xe>
   27b76:	6836      	ldr	r6, [r6, #0]
   27b78:	e7ea      	b.n	27b50 <add_event+0x38>

00027b7a <register_events>:
{
   27b7a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   27b7e:	2500      	movs	r5, #0
{
   27b80:	468b      	mov	fp, r1
   27b82:	4614      	mov	r4, r2
   27b84:	461f      	mov	r7, r3
   27b86:	4682      	mov	sl, r0
	int events_registered = 0;
   27b88:	462e      	mov	r6, r5
	event->poller = NULL;
   27b8a:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   27b8c:	455d      	cmp	r5, fp
   27b8e:	db02      	blt.n	27b96 <register_events+0x1c>
}
   27b90:	4630      	mov	r0, r6
   27b92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27b96:	f04f 0340 	mov.w	r3, #64	; 0x40
   27b9a:	f3ef 8911 	mrs	r9, BASEPRI
   27b9e:	f383 8812 	msr	BASEPRI_MAX, r3
   27ba2:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   27ba6:	f89a 300d 	ldrb.w	r3, [sl, #13]
   27baa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27bae:	3b01      	subs	r3, #1
   27bb0:	2b07      	cmp	r3, #7
   27bb2:	d80f      	bhi.n	27bd4 <register_events+0x5a>
   27bb4:	e8df f003 	tbb	[pc, r3]
   27bb8:	0a0e041e 	.word	0x0a0e041e
   27bbc:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   27bc0:	f8da 3010 	ldr.w	r3, [sl, #16]
   27bc4:	689b      	ldr	r3, [r3, #8]
   27bc6:	b12b      	cbz	r3, 27bd4 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   27bc8:	2302      	movs	r3, #2
   27bca:	e020      	b.n	27c0e <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   27bcc:	f8da 3010 	ldr.w	r3, [sl, #16]
   27bd0:	681b      	ldr	r3, [r3, #0]
   27bd2:	bb8b      	cbnz	r3, 27c38 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   27bd4:	bb47      	cbnz	r7, 27c28 <register_events+0xae>
   27bd6:	7823      	ldrb	r3, [r4, #0]
   27bd8:	b333      	cbz	r3, 27c28 <register_events+0xae>
	switch (event->type) {
   27bda:	f89a 300d 	ldrb.w	r3, [sl, #13]
   27bde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27be2:	3b01      	subs	r3, #1
   27be4:	2b07      	cmp	r3, #7
   27be6:	d830      	bhi.n	27c4a <register_events+0xd0>
   27be8:	e8df f003 	tbb	[pc, r3]
   27bec:	282f2833 	.word	0x282f2833
   27bf0:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   27bf4:	f8da 3010 	ldr.w	r3, [sl, #16]
   27bf8:	689b      	ldr	r3, [r3, #8]
   27bfa:	2b00      	cmp	r3, #0
   27bfc:	d0ea      	beq.n	27bd4 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   27bfe:	2301      	movs	r3, #1
   27c00:	e005      	b.n	27c0e <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   27c02:	f8da 3010 	ldr.w	r3, [sl, #16]
   27c06:	6a1b      	ldr	r3, [r3, #32]
   27c08:	2b00      	cmp	r3, #0
   27c0a:	d0e3      	beq.n	27bd4 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   27c0c:	2310      	movs	r3, #16
	event->state |= state;
   27c0e:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   27c12:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   27c16:	f3c2 3186 	ubfx	r1, r2, #14, #7
   27c1a:	430b      	orrs	r3, r1
   27c1c:	f363 3294 	bfi	r2, r3, #14, #7
   27c20:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   27c24:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   27c28:	f389 8811 	msr	BASEPRI, r9
   27c2c:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   27c30:	3501      	adds	r5, #1
   27c32:	f10a 0a14 	add.w	sl, sl, #20
   27c36:	e7a9      	b.n	27b8c <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   27c38:	2304      	movs	r3, #4
   27c3a:	e7e8      	b.n	27c0e <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   27c3c:	f8da 0010 	ldr.w	r0, [sl, #16]
   27c40:	4622      	mov	r2, r4
   27c42:	4651      	mov	r1, sl
   27c44:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   27c46:	f7ff ff67 	bl	27b18 <add_event>
	event->poller = poller;
   27c4a:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   27c4e:	3601      	adds	r6, #1
   27c50:	e7ea      	b.n	27c28 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   27c52:	f8da 0010 	ldr.w	r0, [sl, #16]
   27c56:	4622      	mov	r2, r4
   27c58:	4651      	mov	r1, sl
   27c5a:	e7f4      	b.n	27c46 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   27c5c:	f8da 0010 	ldr.w	r0, [sl, #16]
   27c60:	4622      	mov	r2, r4
   27c62:	4651      	mov	r1, sl
   27c64:	3024      	adds	r0, #36	; 0x24
   27c66:	e7ee      	b.n	27c46 <register_events+0xcc>

00027c68 <signal_poll_event>:
{
   27c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   27c6c:	6884      	ldr	r4, [r0, #8]
{
   27c6e:	4605      	mov	r5, r0
   27c70:	460e      	mov	r6, r1
	if (poller != NULL) {
   27c72:	b144      	cbz	r4, 27c86 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   27c74:	7863      	ldrb	r3, [r4, #1]
   27c76:	2b01      	cmp	r3, #1
   27c78:	d12e      	bne.n	27cd8 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   27c7a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   27c7e:	f013 0302 	ands.w	r3, r3, #2
   27c82:	d10a      	bne.n	27c9a <signal_poll_event+0x32>
		poller->is_polling = false;
   27c84:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   27c86:	68eb      	ldr	r3, [r5, #12]
   27c88:	f3c3 3286 	ubfx	r2, r3, #14, #7
   27c8c:	4316      	orrs	r6, r2
	event->poller = NULL;
   27c8e:	2000      	movs	r0, #0
	event->state |= state;
   27c90:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   27c94:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   27c96:	60eb      	str	r3, [r5, #12]
	return retcode;
   27c98:	e03e      	b.n	27d18 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   27c9a:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   27c9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   27ca2:	bf08      	it	eq
   27ca4:	f112 0f02 	cmneq.w	r2, #2
   27ca8:	d032      	beq.n	27d10 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   27caa:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   27cae:	4640      	mov	r0, r8
   27cb0:	f7ff fe56 	bl	27960 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   27cb4:	2e08      	cmp	r6, #8
   27cb6:	bf0c      	ite	eq
   27cb8:	f06f 0303 	mvneq.w	r3, #3
   27cbc:	2300      	movne	r3, #0
   27cbe:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   27cc0:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   27cc4:	06db      	lsls	r3, r3, #27
   27cc6:	d109      	bne.n	27cdc <signal_poll_event+0x74>
   27cc8:	f854 7c48 	ldr.w	r7, [r4, #-72]
   27ccc:	b937      	cbnz	r7, 27cdc <signal_poll_event+0x74>
	z_ready_thread(thread);
   27cce:	4640      	mov	r0, r8
   27cd0:	f7ff fdcb 	bl	2786a <z_ready_thread>
		poller->is_polling = false;
   27cd4:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   27cd6:	e7d6      	b.n	27c86 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   27cd8:	2b02      	cmp	r3, #2
   27cda:	d001      	beq.n	27ce0 <signal_poll_event+0x78>
		poller->is_polling = false;
   27cdc:	2300      	movs	r3, #0
   27cde:	e7d1      	b.n	27c84 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   27ce0:	7823      	ldrb	r3, [r4, #0]
   27ce2:	2b00      	cmp	r3, #0
   27ce4:	d0cf      	beq.n	27c86 <signal_poll_event+0x1e>
   27ce6:	f854 7c04 	ldr.w	r7, [r4, #-4]
   27cea:	2f00      	cmp	r7, #0
   27cec:	d0f2      	beq.n	27cd4 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   27cee:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   27cf2:	f1a4 0914 	sub.w	r9, r4, #20
   27cf6:	f104 0014 	add.w	r0, r4, #20
   27cfa:	f7ff fe92 	bl	27a22 <z_abort_timeout>
		twork->poll_result = 0;
   27cfe:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   27d02:	4649      	mov	r1, r9
   27d04:	4638      	mov	r0, r7
   27d06:	f7ff fcef 	bl	276e8 <z_work_submit_to_queue>
		poller->is_polling = false;
   27d0a:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   27d0e:	e7ba      	b.n	27c86 <signal_poll_event+0x1e>
		poller->is_polling = false;
   27d10:	2300      	movs	r3, #0
   27d12:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   27d14:	f06f 000a 	mvn.w	r0, #10
}
   27d18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00027d1c <clear_event_registrations>:
	while (num_events--) {
   27d1c:	2314      	movs	r3, #20
{
   27d1e:	b5f0      	push	{r4, r5, r6, r7, lr}
   27d20:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   27d24:	2400      	movs	r4, #0
	switch (event->type) {
   27d26:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
   27d2a:	b901      	cbnz	r1, 27d2e <clear_event_registrations+0x12>
}
   27d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   27d2e:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   27d32:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   27d36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27d3a:	2b08      	cmp	r3, #8
   27d3c:	f1a0 0714 	sub.w	r7, r0, #20
   27d40:	d80c      	bhi.n	27d5c <clear_event_registrations+0x40>
   27d42:	fa26 f303 	lsr.w	r3, r6, r3
   27d46:	07db      	lsls	r3, r3, #31
   27d48:	d508      	bpl.n	27d5c <clear_event_registrations+0x40>
	return node->next != NULL;
   27d4a:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   27d4e:	b12b      	cbz	r3, 27d5c <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   27d50:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   27d54:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   27d56:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   27d58:	e940 4405 	strd	r4, r4, [r0, #-20]
   27d5c:	f382 8811 	msr	BASEPRI, r2
   27d60:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   27d64:	f04f 0340 	mov.w	r3, #64	; 0x40
   27d68:	f3ef 8211 	mrs	r2, BASEPRI
   27d6c:	f383 8812 	msr	BASEPRI_MAX, r3
   27d70:	f3bf 8f6f 	isb	sy
   27d74:	3901      	subs	r1, #1
   27d76:	4638      	mov	r0, r7
   27d78:	e7d7      	b.n	27d2a <clear_event_registrations+0xe>

00027d7a <k_poll_event_init>:
{
   27d7a:	b510      	push	{r4, lr}
	event->type = type;
   27d7c:	0552      	lsls	r2, r2, #21
   27d7e:	0209      	lsls	r1, r1, #8
   27d80:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   27d84:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   27d88:	430a      	orrs	r2, r1
   27d8a:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   27d8c:	2400      	movs	r4, #0
	event->type = type;
   27d8e:	430a      	orrs	r2, r1
	event->obj = obj;
   27d90:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   27d94:	6084      	str	r4, [r0, #8]
}
   27d96:	bd10      	pop	{r4, pc}

00027d98 <z_handle_obj_poll_events>:
{
   27d98:	4603      	mov	r3, r0
	return list->head == list;
   27d9a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   27d9c:	4283      	cmp	r3, r0
   27d9e:	d008      	beq.n	27db2 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   27da0:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   27da4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   27da6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   27da8:	2300      	movs	r3, #0
	node->prev = NULL;
   27daa:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   27dae:	f7ff bf5b 	b.w	27c68 <signal_poll_event>
}
   27db2:	4770      	bx	lr

00027db4 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   27db4:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   27db6:	e9c0 0000 	strd	r0, r0, [r0]
   27dba:	6083      	str	r3, [r0, #8]
}
   27dbc:	4770      	bx	lr

00027dbe <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   27dbe:	2300      	movs	r3, #0
   27dc0:	6083      	str	r3, [r0, #8]
}
   27dc2:	4770      	bx	lr

00027dc4 <k_free>:
	if (ptr != NULL) {
   27dc4:	b120      	cbz	r0, 27dd0 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   27dc6:	1f01      	subs	r1, r0, #4
   27dc8:	f850 0c04 	ldr.w	r0, [r0, #-4]
   27dcc:	f7ff bacc 	b.w	27368 <k_heap_free>
}
   27dd0:	4770      	bx	lr

00027dd2 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   27dd2:	4770      	bx	lr
